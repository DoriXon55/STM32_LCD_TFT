
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009754  080089c0  080089c0  000099c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012114  08012114  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  08012114  08012114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801211c  0801211c  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801211c  0801211c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012120  08012120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08012124  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad20  20000270  08012394  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000af90  08012394  00014f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013762  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003699  00000000  00000000  00027a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0002b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c37  00000000  00000000  0002c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002903f  00000000  00000000  0002cccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016598  00000000  00000000  00055d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edfb5  00000000  00000000  0006c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a25b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  0015a2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089a8 	.word	0x080089a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	080089a8 	.word	0x080089a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ring_buffer_setup>:
ring_buffer txRingBuffer;
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];

void ring_buffer_setup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:

uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	2000028c 	.word	0x2000028c

080005c8 <USART_getchar>:

int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <USART_getchar+0x4c>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <USART_getchar+0x4c>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d013      	beq.n	8000602 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <USART_getchar+0x4c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <USART_getchar+0x50>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <USART_getchar+0x4c>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <USART_getchar+0x4c>)
 80005ec:	68d2      	ldr	r2, [r2, #12]
 80005ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80005f2:	fb01 f202 	mul.w	r2, r1, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <USART_getchar+0x4c>)
 80005fa:	6053      	str	r3, [r2, #4]
        return tmp;
 80005fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000600:	e001      	b.n	8000606 <USART_getchar+0x3e>
    }
    return -1; // Buffer empty
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000028c 	.word	0x2000028c
 8000618:	20000aac 	.word	0x20000aac

0800061c <USART_fsend>:
        	txRingBuffer.readIndex = idx;
        }

        __enable_irq(); //ponownie aktywujemy przerwania
}
void USART_fsend(char* format,...){
 800061c:	b40f      	push	{r0, r1, r2, r3}
 800061e:	b580      	push	{r7, lr}
 8000620:	b0a4      	sub	sp, #144	@ 0x90
 8000622:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000624:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000628:	607b      	str	r3, [r7, #4]
	  vsprintf(tmp_rs,format,arglist);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000634:	4618      	mov	r0, r3
 8000636:	f007 f97b 	bl	8007930 <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 800063a:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <USART_fsend+0xe0>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000646:	e016      	b.n	8000676 <USART_fsend+0x5a>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000652:	440a      	add	r2, r1
 8000654:	7811      	ldrb	r1, [r2, #0]
 8000656:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <USART_fsend+0xe4>)
 8000658:	54d1      	strb	r1, [r2, r3]
		  idx++;
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000666:	db01      	blt.n	800066c <USART_fsend+0x50>
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 800066c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000670:	3301      	adds	r3, #1
 8000672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fda8 	bl	80001d0 <strlen>
 8000680:	4602      	mov	r2, r0
 8000682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000686:	429a      	cmp	r2, r3
 8000688:	d8de      	bhi.n	8000648 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068a:	b672      	cpsid	i
}
 800068c:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <USART_fsend+0xe0>)
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <USART_fsend+0xe0>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	d123      	bne.n	80006e2 <USART_fsend+0xc6>
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <USART_fsend+0xe8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a4:	2b80      	cmp	r3, #128	@ 0x80
 80006a6:	d11c      	bne.n	80006e2 <USART_fsend+0xc6>
		  txRingBuffer.writeIndex=idx;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <USART_fsend+0xe0>)
 80006ae:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <USART_fsend+0xe0>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a12      	ldr	r2, [pc, #72]	@ (8000700 <USART_fsend+0xe4>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	70fb      	strb	r3, [r7, #3]
		  txRingBuffer.readIndex++;
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <USART_fsend+0xe0>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <USART_fsend+0xe0>)
 80006c2:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <USART_fsend+0xe0>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006cc:	d302      	bcc.n	80006d4 <USART_fsend+0xb8>
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <USART_fsend+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006d4:	1cfb      	adds	r3, r7, #3
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	480a      	ldr	r0, [pc, #40]	@ (8000704 <USART_fsend+0xe8>)
 80006dc:	f003 ff9e 	bl	800461c <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 80006e0:	e003      	b.n	80006ea <USART_fsend+0xce>
	  }else{
		  txRingBuffer.writeIndex=idx;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <USART_fsend+0xe0>)
 80006e8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006ea:	b662      	cpsie	i
}
 80006ec:	bf00      	nop
	  }
	  __enable_irq();
}
 80006ee:	bf00      	nop
 80006f0:	3790      	adds	r7, #144	@ 0x90
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f8:	b004      	add	sp, #16
 80006fa:	4770      	bx	lr
 80006fc:	2000029c 	.word	0x2000029c
 8000700:	200002ac 	.word	0x200002ac
 8000704:	2000adb8 	.word	0x2000adb8

08000708 <calculate_crc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculate_crc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	@ 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000714:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000718:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	e019      	b.n	8000754 <calculate_crc16+0x4c>
        uint8_t byte = data[i];
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 800072a:	8bfb      	ldrh	r3, [r7, #30]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000738:	8bfb      	ldrh	r3, [r7, #30]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21a      	sxth	r2, r3
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	490f      	ldr	r1, [pc, #60]	@ (8000780 <calculate_crc16+0x78>)
 8000742:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000746:	b21b      	sxth	r3, r3
 8000748:	4053      	eors	r3, r2
 800074a:	b21b      	sxth	r3, r3
 800074c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	3301      	adds	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e1      	bcc.n	8000720 <calculate_crc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 800075c:	8bfb      	ldrh	r3, [r7, #30]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2da      	uxtb	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	8bfa      	ldrh	r2, [r7, #30]
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3724      	adds	r7, #36	@ 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <parse_color>:
uint8_t received_char;
Receive_Frame ramka;

//=========================FUNKCJE POMOCNICZE=============================
//TODO do sprawdzenia
static Color_t parse_color(const char *color_name) {
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < sizeof(color_map) / sizeof(ColorMap); ++i) {
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e01c      	b.n	80007cc <parse_color+0x48>
        if (strncmp(color_name, color_map[i].name, strlen(color_map[i].name)) == 0) {
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <parse_color+0x5c>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <parse_color+0x5c>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fd14 	bl	80001d0 <strlen>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4621      	mov	r1, r4
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f007 f8dd 	bl	800796e <strncmp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <parse_color+0x42>
            return color_map[i].value;
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <parse_color+0x5c>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	e007      	b.n	80007d6 <parse_color+0x52>
    for (size_t i = 0; i < sizeof(color_map) / sizeof(ColorMap); ++i) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d9df      	bls.n	8000792 <parse_color+0xe>
        }
    }
    return 0xFFFF; // Nieznany kolor
 80007d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	bf00      	nop
 80007e0:	08008aac 	.word	0x08008aac

080007e4 <reset_frame_state>:

static void reset_frame_state() {
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
    in_frame = false;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <reset_frame_state+0x20>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <reset_frame_state+0x24>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <reset_frame_state+0x28>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	20000cc0 	.word	0x20000cc0
 8000808:	20000cba 	.word	0x20000cba
 800080c:	20000cbc 	.word	0x20000cbc

08000810 <parse_parameters>:
		break;
	}
}
*/

static bool parse_parameters(const char *data, const char *format, ...) {
 8000810:	b40e      	push	{r1, r2, r3}
 8000812:	b580      	push	{r7, lr}
 8000814:	b093      	sub	sp, #76	@ 0x4c
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, format);
 800081a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28

    const char *curr = data;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
    const char *next;
    char temp[32] = {0};
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	619a      	str	r2, [r3, #24]
    int param_count = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    while (*format && curr && *curr) {
 8000840:	e0a1      	b.n	8000986 <parse_parameters+0x176>
        // Pomijamy białe znaki
        while (*curr && (*curr == ' ' || *curr == ',')) {
            curr++;
 8000842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000844:	3301      	adds	r3, #1
 8000846:	647b      	str	r3, [r7, #68]	@ 0x44
        while (*curr && (*curr == ' ' || *curr == ',')) {
 8000848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d007      	beq.n	8000860 <parse_parameters+0x50>
 8000850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b20      	cmp	r3, #32
 8000856:	d0f4      	beq.n	8000842 <parse_parameters+0x32>
 8000858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b2c      	cmp	r3, #44	@ 0x2c
 800085e:	d0f0      	beq.n	8000842 <parse_parameters+0x32>
        }

        if (!*curr) break;
 8000860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	f000 809b 	beq.w	80009a0 <parse_parameters+0x190>

        // Znajdujemy następny przecinek lub koniec stringa
        next = strchr(curr, ',');
 800086a:	212c      	movs	r1, #44	@ 0x2c
 800086c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800086e:	f007 f871 	bl	8007954 <strchr>
 8000872:	6438      	str	r0, [r7, #64]	@ 0x40
        if (!next) {
 8000874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000876:	2b00      	cmp	r3, #0
 8000878:	d106      	bne.n	8000888 <parse_parameters+0x78>
            next = curr + strlen(curr);
 800087a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800087c:	f7ff fca8 	bl	80001d0 <strlen>
 8000880:	4602      	mov	r2, r0
 8000882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000884:	4413      	add	r3, r2
 8000886:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        // Kopiujemy wartość do bufora tymczasowego
        size_t len = next - curr;
 8000888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800088a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (len >= sizeof(temp)) return false;
 8000890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000892:	2b1f      	cmp	r3, #31
 8000894:	d901      	bls.n	800089a <parse_parameters+0x8a>
 8000896:	2300      	movs	r3, #0
 8000898:	e084      	b.n	80009a4 <parse_parameters+0x194>
        memcpy(temp, curr, len);
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80008a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80008a2:	4618      	mov	r0, r3
 80008a4:	f007 f957 	bl	8007b56 <memcpy>
        temp[len] = '\0';
 80008a8:	f107 0208 	add.w	r2, r7, #8
 80008ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008ae:	4413      	add	r3, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]

        switch (*format) {
 80008b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b75      	cmp	r3, #117	@ 0x75
 80008ba:	d006      	beq.n	80008ca <parse_parameters+0xba>
 80008bc:	2b75      	cmp	r3, #117	@ 0x75
 80008be:	dc4f      	bgt.n	8000960 <parse_parameters+0x150>
 80008c0:	2b69      	cmp	r3, #105	@ 0x69
 80008c2:	d029      	beq.n	8000918 <parse_parameters+0x108>
 80008c4:	2b73      	cmp	r3, #115	@ 0x73
 80008c6:	d035      	beq.n	8000934 <parse_parameters+0x124>
 80008c8:	e04a      	b.n	8000960 <parse_parameters+0x150>
            case 'u': { // uint8_t
                uint8_t *val = va_arg(args, uint8_t*);
 80008ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008cc:	1d1a      	adds	r2, r3, #4
 80008ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
                if (temp[0] == '0' && (temp[1] == 'x' || temp[1] == 'X')) {
 80008d4:	7a3b      	ldrb	r3, [r7, #8]
 80008d6:	2b30      	cmp	r3, #48	@ 0x30
 80008d8:	d112      	bne.n	8000900 <parse_parameters+0xf0>
 80008da:	7a7b      	ldrb	r3, [r7, #9]
 80008dc:	2b78      	cmp	r3, #120	@ 0x78
 80008de:	d002      	beq.n	80008e6 <parse_parameters+0xd6>
 80008e0:	7a7b      	ldrb	r3, [r7, #9]
 80008e2:	2b58      	cmp	r3, #88	@ 0x58
 80008e4:	d10c      	bne.n	8000900 <parse_parameters+0xf0>
                    *val = (uint8_t)strtoul(temp + 2, NULL, 16);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	3302      	adds	r3, #2
 80008ec:	2210      	movs	r2, #16
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 fddf 	bl	80074b4 <strtoul>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008fc:	701a      	strb	r2, [r3, #0]
                } else {
                    *val = (uint8_t)strtoul(temp, NULL, 10);
                }
                break;
 80008fe:	e032      	b.n	8000966 <parse_parameters+0x156>
                    *val = (uint8_t)strtoul(temp, NULL, 10);
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	220a      	movs	r2, #10
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f006 fdd3 	bl	80074b4 <strtoul>
 800090e:	4603      	mov	r3, r0
 8000910:	b2da      	uxtb	r2, r3
 8000912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000914:	701a      	strb	r2, [r3, #0]
                break;
 8000916:	e026      	b.n	8000966 <parse_parameters+0x156>
            }
            case 'i': { // int
                int *val = va_arg(args, int*);
 8000918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091a:	1d1a      	adds	r2, r3, #4
 800091c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
                *val = atoi(temp);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f006 fcc0 	bl	80072ac <atoi>
 800092c:	4602      	mov	r2, r0
 800092e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000930:	601a      	str	r2, [r3, #0]
                break;
 8000932:	e018      	b.n	8000966 <parse_parameters+0x156>
            }
            case 's': { // string (kolor)
                uint16_t *val = va_arg(args, uint16_t*);
 8000934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000936:	1d1a      	adds	r2, r3, #4
 8000938:	62ba      	str	r2, [r7, #40]	@ 0x28
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
                *val = parse_color(temp);
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff1e 	bl	8000784 <parse_color>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800094e:	801a      	strh	r2, [r3, #0]
                if (*val == 0xFFFF) {
 8000950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	4293      	cmp	r3, r2
 800095a:	d103      	bne.n	8000964 <parse_parameters+0x154>
                    va_end(args);
                    return false;
 800095c:	2300      	movs	r3, #0
 800095e:	e021      	b.n	80009a4 <parse_parameters+0x194>
                }
                break;
            }
            default:
                va_end(args);
                return false;
 8000960:	2300      	movs	r3, #0
 8000962:	e01f      	b.n	80009a4 <parse_parameters+0x194>
                break;
 8000964:	bf00      	nop
        }

        format++;
 8000966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000968:	3301      	adds	r3, #1
 800096a:	657b      	str	r3, [r7, #84]	@ 0x54
        param_count++;
 800096c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800096e:	3301      	adds	r3, #1
 8000970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        curr = next + (*next ? 1 : 0);
 8000972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <parse_parameters+0x16e>
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <parse_parameters+0x170>
 800097e:	2300      	movs	r3, #0
 8000980:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000982:	4413      	add	r3, r2
 8000984:	647b      	str	r3, [r7, #68]	@ 0x44
    while (*format && curr && *curr) {
 8000986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d009      	beq.n	80009a2 <parse_parameters+0x192>
 800098e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <parse_parameters+0x192>
 8000994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	f47f af55 	bne.w	8000848 <parse_parameters+0x38>
 800099e:	e000      	b.n	80009a2 <parse_parameters+0x192>
        if (!*curr) break;
 80009a0:	bf00      	nop
    }

    va_end(args);
    return true;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	374c      	adds	r7, #76	@ 0x4c
 80009a8:	46bd      	mov	sp, r7
 80009aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ae:	b003      	add	sp, #12
 80009b0:	4770      	bx	lr
	...

080009b4 <executeONK>:

//==========================OBSŁUGA KOMEND================================

//TODO nie dzialla
static void executeONK(Receive_Frame *frame)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af04      	add	r7, sp, #16
 80009ba:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	2300      	movs	r3, #0
 80009c2:	73bb      	strb	r3, [r7, #14]
 80009c4:	2300      	movs	r3, #0
 80009c6:	737b      	strb	r3, [r7, #13]
 80009c8:	2300      	movs	r3, #0
 80009ca:	733b      	strb	r3, [r7, #12]
	uint16_t color = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	817b      	strh	r3, [r7, #10]
    if (!parse_parameters(frame->data, "uuuuh", &x, &y, &r, &filling, &color))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	1d58      	adds	r0, r3, #5
 80009d4:	f107 010e 	add.w	r1, r7, #14
 80009d8:	f107 020f 	add.w	r2, r7, #15
 80009dc:	f107 030a 	add.w	r3, r7, #10
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	f107 030d 	add.w	r3, r7, #13
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	460b      	mov	r3, r1
 80009f0:	4917      	ldr	r1, [pc, #92]	@ (8000a50 <executeONK+0x9c>)
 80009f2:	f7ff ff0d 	bl	8000810 <parse_parameters>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f083 0301 	eor.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d009      	beq.n	8000a16 <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3305      	adds	r3, #5
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <executeONK+0xa0>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <executeONK+0xa4>)
 8000a0c:	2167      	movs	r1, #103	@ 0x67
 8000a0e:	2068      	movs	r0, #104	@ 0x68
 8000a10:	f000 fae2 	bl	8000fd8 <prepareFrame>
 8000a14:	e019      	b.n	8000a4a <executeONK+0x96>
        return;
    }
	switch(filling)
 8000a16:	7b3b      	ldrb	r3, [r7, #12]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <executeONK+0x6e>
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d00a      	beq.n	8000a36 <executeONK+0x82>
 8000a20:	e013      	b.n	8000a4a <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	b218      	sxth	r0, r3
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	b219      	sxth	r1, r3
 8000a2a:	7b7b      	ldrb	r3, [r7, #13]
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	897b      	ldrh	r3, [r7, #10]
 8000a30:	f006 f836 	bl	8006aa0 <hagl_draw_circle>
		break;
 8000a34:	e009      	b.n	8000a4a <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	b218      	sxth	r0, r3
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	b219      	sxth	r1, r3
 8000a3e:	7b7b      	ldrb	r3, [r7, #13]
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	897b      	ldrh	r3, [r7, #10]
 8000a44:	f006 f95b 	bl	8006cfe <hagl_fill_circle>
		break;
 8000a48:	bf00      	nop
	}
}
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	080089fc 	.word	0x080089fc
 8000a54:	08008a04 	.word	0x08008a04
 8000a58:	08008a18 	.word	0x08008a18

08000a5c <executeONP>:


static void executeONP(Receive_Frame *frame)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	@ 0x24
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73bb      	strb	r3, [r7, #14]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	737b      	strb	r3, [r7, #13]
 8000a70:	2300      	movs	r3, #0
 8000a72:	733b      	strb	r3, [r7, #12]
 8000a74:	2300      	movs	r3, #0
 8000a76:	72fb      	strb	r3, [r7, #11]
	uint16_t color = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	813b      	strh	r3, [r7, #8]
	if (!parse_parameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	1d58      	adds	r0, r3, #5
 8000a80:	f107 010e 	add.w	r1, r7, #14
 8000a84:	f107 020f 	add.w	r2, r7, #15
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	9303      	str	r3, [sp, #12]
 8000a8e:	f107 030b 	add.w	r3, r7, #11
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	f107 030d 	add.w	r3, r7, #13
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	491c      	ldr	r1, [pc, #112]	@ (8000b14 <executeONP+0xb8>)
 8000aa4:	f7ff feb4 	bl	8000810 <parse_parameters>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3305      	adds	r3, #5
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <executeONP+0xbc>)
 8000abc:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <executeONP+0xc0>)
 8000abe:	2167      	movs	r1, #103	@ 0x67
 8000ac0:	2068      	movs	r0, #104	@ 0x68
 8000ac2:	f000 fa89 	bl	8000fd8 <prepareFrame>
 8000ac6:	e021      	b.n	8000b0c <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000ac8:	7afb      	ldrb	r3, [r7, #11]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <executeONP+0x78>
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d00e      	beq.n	8000af0 <executeONP+0x94>
 8000ad2:	e01b      	b.n	8000b0c <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	b218      	sxth	r0, r3
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	b219      	sxth	r1, r3
 8000adc:	7b7b      	ldrb	r3, [r7, #13]
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	7b3b      	ldrb	r3, [r7, #12]
 8000ae2:	b21c      	sxth	r4, r3
 8000ae4:	893b      	ldrh	r3, [r7, #8]
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	4623      	mov	r3, r4
 8000aea:	f005 fd29 	bl	8006540 <hagl_draw_rectangle>
		break;
 8000aee:	e00d      	b.n	8000b0c <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	b218      	sxth	r0, r3
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	b219      	sxth	r1, r3
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	b21c      	sxth	r4, r3
 8000b00:	893b      	ldrh	r3, [r7, #8]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4623      	mov	r3, r4
 8000b06:	f005 fda1 	bl	800664c <hagl_fill_rectangle>
		break;
 8000b0a:	bf00      	nop
	}
}
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	08008a1c 	.word	0x08008a1c
 8000b18:	08008a04 	.word	0x08008a04
 8000b1c:	08008a18 	.word	0x08008a18

08000b20 <executeONT>:


//TODO nie dziala
static void executeONT(Receive_Frame *frame)
{
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	b08d      	sub	sp, #52	@ 0x34
 8000b24:	af06      	add	r7, sp, #24
 8000b26:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	75fb      	strb	r3, [r7, #23]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75bb      	strb	r3, [r7, #22]
 8000b30:	2300      	movs	r3, #0
 8000b32:	757b      	strb	r3, [r7, #21]
 8000b34:	2300      	movs	r3, #0
 8000b36:	753b      	strb	r3, [r7, #20]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	74fb      	strb	r3, [r7, #19]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	74bb      	strb	r3, [r7, #18]
 8000b40:	2300      	movs	r3, #0
 8000b42:	747b      	strb	r3, [r7, #17]
    uint16_t color = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	81fb      	strh	r3, [r7, #14]
    if (!parse_parameters(frame->data, "uuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	1d58      	adds	r0, r3, #5
 8000b4c:	f107 0116 	add.w	r1, r7, #22
 8000b50:	f107 0217 	add.w	r2, r7, #23
 8000b54:	f107 030e 	add.w	r3, r7, #14
 8000b58:	9305      	str	r3, [sp, #20]
 8000b5a:	f107 0311 	add.w	r3, r7, #17
 8000b5e:	9304      	str	r3, [sp, #16]
 8000b60:	f107 0312 	add.w	r3, r7, #18
 8000b64:	9303      	str	r3, [sp, #12]
 8000b66:	f107 0313 	add.w	r3, r7, #19
 8000b6a:	9302      	str	r3, [sp, #8]
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	f107 0315 	add.w	r3, r7, #21
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4924      	ldr	r1, [pc, #144]	@ (8000c0c <executeONT+0xec>)
 8000b7c:	f7ff fe48 	bl	8000810 <parse_parameters>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f083 0301 	eor.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d009      	beq.n	8000ba0 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3305      	adds	r3, #5
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <executeONT+0xf0>)
 8000b94:	4a1f      	ldr	r2, [pc, #124]	@ (8000c14 <executeONT+0xf4>)
 8000b96:	2167      	movs	r1, #103	@ 0x67
 8000b98:	2068      	movs	r0, #104	@ 0x68
 8000b9a:	f000 fa1d 	bl	8000fd8 <prepareFrame>
 8000b9e:	e031      	b.n	8000c04 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000ba0:	7c7b      	ldrb	r3, [r7, #17]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <executeONT+0x8c>
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d016      	beq.n	8000bd8 <executeONT+0xb8>
 8000baa:	e02b      	b.n	8000c04 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	b218      	sxth	r0, r3
 8000bb0:	7dbb      	ldrb	r3, [r7, #22]
 8000bb2:	b21c      	sxth	r4, r3
 8000bb4:	7d7b      	ldrb	r3, [r7, #21]
 8000bb6:	b21d      	sxth	r5, r3
 8000bb8:	7d3b      	ldrb	r3, [r7, #20]
 8000bba:	b21e      	sxth	r6, r3
 8000bbc:	7cfb      	ldrb	r3, [r7, #19]
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	7cba      	ldrb	r2, [r7, #18]
 8000bc2:	b212      	sxth	r2, r2
 8000bc4:	89f9      	ldrh	r1, [r7, #14]
 8000bc6:	9102      	str	r1, [sp, #8]
 8000bc8:	9201      	str	r2, [sp, #4]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	4633      	mov	r3, r6
 8000bce:	462a      	mov	r2, r5
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	f006 fb1f 	bl	8007214 <hagl_draw_triangle>
            break;
 8000bd6:	e015      	b.n	8000c04 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	b218      	sxth	r0, r3
 8000bdc:	7dbb      	ldrb	r3, [r7, #22]
 8000bde:	b21c      	sxth	r4, r3
 8000be0:	7d7b      	ldrb	r3, [r7, #21]
 8000be2:	b21d      	sxth	r5, r3
 8000be4:	7d3b      	ldrb	r3, [r7, #20]
 8000be6:	b21e      	sxth	r6, r3
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	7cba      	ldrb	r2, [r7, #18]
 8000bee:	b212      	sxth	r2, r2
 8000bf0:	89f9      	ldrh	r1, [r7, #14]
 8000bf2:	9102      	str	r1, [sp, #8]
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	4633      	mov	r3, r6
 8000bfa:	462a      	mov	r2, r5
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	f006 fb2f 	bl	8007260 <hagl_fill_triangle>
            break;
 8000c02:	bf00      	nop
    }
}
 8000c04:	371c      	adds	r7, #28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	08008a24 	.word	0x08008a24
 8000c10:	08008a04 	.word	0x08008a04
 8000c14:	08008a18 	.word	0x08008a18

08000c18 <executeONN>:

//TODO nie dziala, dodac obsluge przewijania tekstu
static void executeONN(Receive_Frame *frame)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	f6ad 0d24 	subw	sp, sp, #2084	@ 0x824
 8000c1e:	af02      	add	r7, sp, #8
 8000c20:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c24:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c28:	6018      	str	r0, [r3, #0]
    wchar_t text[512];
    uint8_t x = 0, y = 0, fontSize = 0;
 8000c2a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c2e:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c3a:	f6a3 0306 	subw	r3, r3, #2054	@ 0x806
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c46:	f6a3 0307 	subw	r3, r3, #2055	@ 0x807
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
    uint16_t color = 0;
 8000c4e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c52:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000c56:	2200      	movs	r2, #0
 8000c58:	801a      	strh	r2, [r3, #0]
    if (!parse_parameters(frame->data, "uuus", &x, &y, &fontSize, &color)) {
 8000c5a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c5e:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1d58      	adds	r0, r3, #5
 8000c66:	f107 0112 	add.w	r1, r7, #18
 8000c6a:	f107 0213 	add.w	r2, r7, #19
 8000c6e:	f107 030e 	add.w	r3, r7, #14
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	f107 0311 	add.w	r3, r7, #17
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4952      	ldr	r1, [pc, #328]	@ (8000dc8 <executeONN+0x1b0>)
 8000c7e:	f7ff fdc7 	bl	8000810 <parse_parameters>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f083 0301 	eor.w	r3, r3, #1
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00d      	beq.n	8000caa <executeONN+0x92>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000c8e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c92:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3305      	adds	r3, #5
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000dcc <executeONN+0x1b4>)
 8000c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd0 <executeONN+0x1b8>)
 8000ca0:	2167      	movs	r1, #103	@ 0x67
 8000ca2:	2068      	movs	r0, #104	@ 0x68
 8000ca4:	f000 f998 	bl	8000fd8 <prepareFrame>
 8000ca8:	e08a      	b.n	8000dc0 <executeONN+0x1a8>
        return;
    }
    const char *text_start = strchr(frame->data, ',');
 8000caa:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000cae:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3305      	adds	r3, #5
 8000cb6:	212c      	movs	r1, #44	@ 0x2c
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 fe4b 	bl	8007954 <strchr>
 8000cbe:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
    if (text_start) {
 8000cc2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d024      	beq.n	8000d14 <executeONN+0xfc>
        text_start = strchr(text_start + 1, ','); // Znajdź początek tekstu
 8000cca:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000cce:	3301      	adds	r3, #1
 8000cd0:	212c      	movs	r1, #44	@ 0x2c
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f006 fe3e 	bl	8007954 <strchr>
 8000cd8:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
        text_start = strchr(text_start + 1, ','); // Znajdź początek tekstu
 8000cdc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	212c      	movs	r1, #44	@ 0x2c
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 fe35 	bl	8007954 <strchr>
 8000cea:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
        text_start = strchr(text_start + 1, ','); // Znajdź początek tekstu
 8000cee:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	212c      	movs	r1, #44	@ 0x2c
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f006 fe2c 	bl	8007954 <strchr>
 8000cfc:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
        mbstowcs(text, text_start + 1, 512); // Konwersja tekstu na `wchar_t`
 8000d00:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000d04:	1c59      	adds	r1, r3, #1
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 fad0 	bl	80072b4 <mbstowcs>
    }
    switch(fontSize)
 8000d14:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d18:	f6a3 0307 	subw	r3, r3, #2055	@ 0x807
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d036      	beq.n	8000d90 <executeONN+0x178>
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	dc4c      	bgt.n	8000dc0 <executeONN+0x1a8>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d002      	beq.n	8000d30 <executeONN+0x118>
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d018      	beq.n	8000d60 <executeONN+0x148>
 8000d2e:	e047      	b.n	8000dc0 <executeONN+0x1a8>
    {
        case 1:
            hagl_put_text(text, x, y, color, font5x7); //fontSize zmien
 8000d30:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d34:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b219      	sxth	r1, r3
 8000d3c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d40:	f6a3 0306 	subw	r3, r3, #2054	@ 0x806
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b21a      	sxth	r2, r3
 8000d48:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d4c:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	f107 0014 	add.w	r0, r7, #20
 8000d56:	4c1f      	ldr	r4, [pc, #124]	@ (8000dd4 <executeONN+0x1bc>)
 8000d58:	9400      	str	r4, [sp, #0]
 8000d5a:	f005 fe19 	bl	8006990 <hagl_put_text>
            break;
 8000d5e:	e02f      	b.n	8000dc0 <executeONN+0x1a8>
        case 2:
            hagl_put_text(text, x, y, color, font5x8); //fontSize zmien
 8000d60:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d64:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b219      	sxth	r1, r3
 8000d6c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d70:	f6a3 0306 	subw	r3, r3, #2054	@ 0x806
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d7c:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	f107 0014 	add.w	r0, r7, #20
 8000d86:	4c14      	ldr	r4, [pc, #80]	@ (8000dd8 <executeONN+0x1c0>)
 8000d88:	9400      	str	r4, [sp, #0]
 8000d8a:	f005 fe01 	bl	8006990 <hagl_put_text>
            break;
 8000d8e:	e017      	b.n	8000dc0 <executeONN+0x1a8>
        case 3:
            hagl_put_text(text, x, x, color, font6x9); //fontSize zmien
 8000d90:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d94:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b219      	sxth	r1, r3
 8000d9c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000da0:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000dac:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	f107 0014 	add.w	r0, r7, #20
 8000db6:	4c09      	ldr	r4, [pc, #36]	@ (8000ddc <executeONN+0x1c4>)
 8000db8:	9400      	str	r4, [sp, #0]
 8000dba:	f005 fde9 	bl	8006990 <hagl_put_text>
            break;
 8000dbe:	bf00      	nop
    }
}
 8000dc0:	f607 071c 	addw	r7, r7, #2076	@ 0x81c
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	08008a2c 	.word	0x08008a2c
 8000dcc:	08008a04 	.word	0x08008a04
 8000dd0:	08008a18 	.word	0x08008a18
 8000dd4:	08008aec 	.word	0x08008aec
 8000dd8:	0800bff4 	.word	0x0800bff4
 8000ddc:	0800ee98 	.word	0x0800ee98

08000de0 <executeOFF>:



//TODO bład parsowania danych
static void executeOFF(Receive_Frame *frame)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	6078      	str	r0, [r7, #4]
	uint8_t state = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
	if (!parse_parameters(frame->data, "u", &state)) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3305      	adds	r3, #5
 8000df0:	f107 020f 	add.w	r2, r7, #15
 8000df4:	4916      	ldr	r1, [pc, #88]	@ (8000e50 <executeOFF+0x70>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fd0a 	bl	8000810 <parse_parameters>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <executeOFF+0x3c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3305      	adds	r3, #5
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <executeOFF+0x74>)
 8000e10:	4a11      	ldr	r2, [pc, #68]	@ (8000e58 <executeOFF+0x78>)
 8000e12:	2167      	movs	r1, #103	@ 0x67
 8000e14:	2068      	movs	r0, #104	@ 0x68
 8000e16:	f000 f8df 	bl	8000fd8 <prepareFrame>
 8000e1a:	e015      	b.n	8000e48 <executeOFF+0x68>
		return;
	}
	switch(state)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <executeOFF+0x48>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d006      	beq.n	8000e34 <executeOFF+0x54>
 8000e26:	e00f      	b.n	8000e48 <executeOFF+0x68>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <executeOFF+0x7c>)
 8000e2e:	f001 fcf1 	bl	8002814 <HAL_GPIO_WritePin>
		break;
 8000e32:	e009      	b.n	8000e48 <executeOFF+0x68>
	case 1:
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, WHITE);
 8000e34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	22a0      	movs	r2, #160	@ 0xa0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2000      	movs	r0, #0
 8000e42:	f005 fc03 	bl	800664c <hagl_fill_rectangle>
		break;
 8000e46:	bf00      	nop
	}
}
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08008a34 	.word	0x08008a34
 8000e54:	08008a04 	.word	0x08008a04
 8000e58:	08008a18 	.word	0x08008a18
 8000e5c:	48000400 	.word	0x48000400

08000e60 <is_within_bounds>:


//=======================SPRAWDZANIE KOORDYNATÓW=========================
bool is_within_bounds(int x, int y)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <is_within_bounds+0x26>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e74:	dc07      	bgt.n	8000e86 <is_within_bounds+0x26>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db04      	blt.n	8000e86 <is_within_bounds+0x26>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e80:	dc01      	bgt.n	8000e86 <is_within_bounds+0x26>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <is_within_bounds+0x28>
 8000e86:	2300      	movs	r3, #0
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <parse_coordinates>:
bool parse_coordinates(const char *data, int *x, int *y)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0a6      	sub	sp, #152	@ 0x98
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE); // Kopiujemy dane wejściowe, bo strtok modyfikuje ciąg
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	68f9      	ldr	r1, [r7, #12]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fd6e 	bl	8007992 <strncpy>

	    token = strtok(data_copy, ","); // Pierwsza współrzędna (jest to funkcja służąca do oddzielania stringów z separatorem)
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4915      	ldr	r1, [pc, #84]	@ (8000f10 <parse_coordinates+0x74>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fd7b 	bl	80079b8 <strtok>
 8000ec2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <parse_coordinates+0x36>
	        return false;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e01a      	b.n	8000f08 <parse_coordinates+0x6c>
	    }
	    *x = atoi(token);
 8000ed2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000ed6:	f006 f9e9 	bl	80072ac <atoi>
 8000eda:	4602      	mov	r2, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ","); // Druga współrzędna
 8000ee0:	490b      	ldr	r1, [pc, #44]	@ (8000f10 <parse_coordinates+0x74>)
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f006 fd68 	bl	80079b8 <strtok>
 8000ee8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <parse_coordinates+0x5c>
	        return false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e007      	b.n	8000f08 <parse_coordinates+0x6c>
	    }
	    *y = atoi(token);
 8000ef8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000efc:	f006 f9d6 	bl	80072ac <atoi>
 8000f00:	4602      	mov	r2, r0
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]

	    return true;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3798      	adds	r7, #152	@ 0x98
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	08008a38 	.word	0x08008a38

08000f14 <byteStuffing>:
//=======================BYTE STUFFING=========================
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	e04b      	b.n	8000fc2 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f34:	d10e      	bne.n	8000f54 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	617a      	str	r2, [r7, #20]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	227d      	movs	r2, #125	@ 0x7d
 8000f42:	701a      	strb	r2, [r3, #0]
            output[j++] = ']';
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	617a      	str	r2, [r7, #20]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	225d      	movs	r2, #93	@ 0x5d
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e033      	b.n	8000fbc <byteStuffing+0xa8>
        } else if (input[i] == '~') {
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f5e:	d10e      	bne.n	8000f7e <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	617a      	str	r2, [r7, #20]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	227d      	movs	r2, #125	@ 0x7d
 8000f6c:	701a      	strb	r2, [r3, #0]
            output[j++] = '^';
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	617a      	str	r2, [r7, #20]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	225e      	movs	r2, #94	@ 0x5e
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e01e      	b.n	8000fbc <byteStuffing+0xa8>
        } else if (input[i] == '`') {
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b60      	cmp	r3, #96	@ 0x60
 8000f88:	d10e      	bne.n	8000fa8 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	617a      	str	r2, [r7, #20]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	227d      	movs	r2, #125	@ 0x7d
 8000f96:	701a      	strb	r2, [r3, #0]
            output[j++] = '&';
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	617a      	str	r2, [r7, #20]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2226      	movs	r2, #38	@ 0x26
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e009      	b.n	8000fbc <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	441a      	add	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	1c59      	adds	r1, r3, #1
 8000fb2:	6179      	str	r1, [r7, #20]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	440b      	add	r3, r1
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d3af      	bcc.n	8000f2a <byteStuffing+0x16>
        }
    }
    return j;
 8000fca:	697b      	ldr	r3, [r7, #20]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <prepareFrame>:

//=======================OBSŁUGA RAMKI ZWROTNEJ=========================
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8000fd8:	b408      	push	{r3}
 8000fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fde:	f5ad 7d36 	sub.w	sp, sp, #728	@ 0x2d8
 8000fe2:	af02      	add	r7, sp, #8
 8000fe4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000fe8:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000ff2:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000ffe:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8001002:	460a      	mov	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	466b      	mov	r3, sp
 8001008:	461e      	mov	r6, r3
    Frame frame = {0};
 800100a:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800100e:	228a      	movs	r2, #138	@ 0x8a
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f006 fc96 	bl	8007944 <memset>
    frame.sender = sender;
 8001018:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800101c:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    frame.receiver = receiver;
 8001026:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800102a:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 8001034:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001038:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800103c:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 8001040:	1cd0      	adds	r0, r2, #3
 8001042:	2203      	movs	r2, #3
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	f006 fca4 	bl	8007992 <strncpy>

    // Formatowanie danych
    va_list args;
    va_start(args, format);
 800104a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800104e:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    vsnprintf((char *)frame.data, MAX_DATA_SIZE, format, args);
 8001052:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8001056:	1d98      	adds	r0, r3, #6
 8001058:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800105c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8001060:	2180      	movs	r1, #128	@ 0x80
 8001062:	f006 fc41 	bl	80078e8 <vsniprintf>
    va_end(args);

    // Oblicz długość danych
    size_t data_len = strlen((const char *)frame.data);
 8001066:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800106a:	3306      	adds	r3, #6
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f8af 	bl	80001d0 <strlen>
 8001072:	f8c7 02c8 	str.w	r0, [r7, #712]	@ 0x2c8

    // Przygotowanie danych do obliczenia CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 8001076:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 800107a:	3305      	adds	r3, #5
 800107c:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
    uint8_t crc_input[crc_input_len];
 8001080:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001084:	460b      	mov	r3, r1
 8001086:	3b01      	subs	r3, #1
 8001088:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800108c:	2300      	movs	r3, #0
 800108e:	6039      	str	r1, [r7, #0]
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	00c3      	lsls	r3, r0, #3
 800109e:	6838      	ldr	r0, [r7, #0]
 80010a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010a4:	6838      	ldr	r0, [r7, #0]
 80010a6:	00c2      	lsls	r2, r0, #3
 80010a8:	2300      	movs	r3, #0
 80010aa:	468a      	mov	sl, r1
 80010ac:	469b      	mov	fp, r3
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010c2:	1dcb      	adds	r3, r1, #7
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	ebad 0d03 	sub.w	sp, sp, r3
 80010cc:	ab02      	add	r3, sp, #8
 80010ce:	3300      	adds	r3, #0
 80010d0:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
    crc_input[0] = frame.sender;
 80010d4:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80010d8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 80010dc:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 80010de:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80010e2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 80010e6:	705a      	strb	r2, [r3, #1]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 80010e8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 80010ec:	3302      	adds	r3, #2
 80010ee:	461a      	mov	r2, r3
 80010f0:	f207 2327 	addw	r3, r7, #551	@ 0x227
 80010f4:	8819      	ldrh	r1, [r3, #0]
 80010f6:	789b      	ldrb	r3, [r3, #2]
 80010f8:	8011      	strh	r1, [r2, #0]
 80010fa:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, frame.data, data_len);
 80010fc:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001100:	1d58      	adds	r0, r3, #5
 8001102:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8001106:	3306      	adds	r3, #6
 8001108:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 800110c:	4619      	mov	r1, r3
 800110e:	f006 fd22 	bl	8007b56 <memcpy>

    // Obliczanie CRC
    char crc_output[2]; // Tablica na wynik CRC
    calculate_crc16(crc_input, crc_input_len, crc_output);
 8001112:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001116:	461a      	mov	r2, r3
 8001118:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 800111c:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 8001120:	f7ff faf2 	bl	8000708 <calculate_crc16>

    // Konwersja CRC na heksadecymalne ciągi znaków
    char crc_hex[5]; // 4 znaki na heksadecymalną reprezentację + 1 na znak null
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 8001124:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8001128:	461a      	mov	r2, r3
 800112a:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 800112e:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4613      	mov	r3, r2
 8001136:	4a49      	ldr	r2, [pc, #292]	@ (800125c <prepareFrame+0x284>)
 8001138:	2105      	movs	r1, #5
 800113a:	f006 fb33 	bl	80077a4 <sniprintf>

    // Przygotowanie do byte-stuffingu
    uint8_t raw_payload[2 + COMMAND_LENGTH + data_len + 4]; // 4 dodatkowe bajty na heksadecymalne CRC
 800113e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001142:	f103 0109 	add.w	r1, r3, #9
 8001146:	460b      	mov	r3, r1
 8001148:	3b01      	subs	r3, #1
 800114a:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800114e:	2300      	movs	r3, #0
 8001150:	4688      	mov	r8, r1
 8001152:	4699      	mov	r9, r3
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001160:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001164:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001168:	2300      	movs	r3, #0
 800116a:	460c      	mov	r4, r1
 800116c:	461d      	mov	r5, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	00eb      	lsls	r3, r5, #3
 8001178:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800117c:	00e2      	lsls	r2, r4, #3
 800117e:	1dcb      	adds	r3, r1, #7
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	ebad 0d03 	sub.w	sp, sp, r3
 8001188:	ab02      	add	r3, sp, #8
 800118a:	3300      	adds	r3, #0
 800118c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
    raw_payload[0] = frame.sender;
 8001190:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8001194:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001198:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 800119a:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800119e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80011a2:	705a      	strb	r2, [r3, #1]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 80011a4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80011a8:	3302      	adds	r3, #2
 80011aa:	461a      	mov	r2, r3
 80011ac:	f207 2327 	addw	r3, r7, #551	@ 0x227
 80011b0:	8819      	ldrh	r1, [r3, #0]
 80011b2:	789b      	ldrb	r3, [r3, #2]
 80011b4:	8011      	strh	r1, [r2, #0]
 80011b6:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, frame.data, data_len);
 80011b8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80011bc:	1d58      	adds	r0, r3, #5
 80011be:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80011c2:	3306      	adds	r3, #6
 80011c4:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80011c8:	4619      	mov	r1, r3
 80011ca:	f006 fcc4 	bl	8007b56 <memcpy>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4); // Dodanie heksadecymalnego CRC
 80011ce:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80011d2:	3305      	adds	r3, #5
 80011d4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80011d8:	4413      	add	r3, r2
 80011da:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80011de:	601a      	str	r2, [r3, #0]

    uint8_t stuffed_payload[512];
    size_t stuffed_len = byteStuffing(raw_payload, 2 + COMMAND_LENGTH + data_len + 4, stuffed_payload);
 80011e0:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80011e4:	3309      	adds	r3, #9
 80011e6:	f107 0214 	add.w	r2, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	f8d7 02b4 	ldr.w	r0, [r7, #692]	@ 0x2b4
 80011f0:	f7ff fe90 	bl	8000f14 <byteStuffing>
 80011f4:	f8c7 02b0 	str.w	r0, [r7, #688]	@ 0x2b0

    // Wysyłanie ramki
    USART_fsend("%c", FRAME_START); // Wyślij początek ramki
 80011f8:	217e      	movs	r1, #126	@ 0x7e
 80011fa:	4819      	ldr	r0, [pc, #100]	@ (8001260 <prepareFrame+0x288>)
 80011fc:	f7ff fa0e 	bl	800061c <USART_fsend>
    for (size_t i = 0; i < stuffed_len; i++) {
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8001206:	e013      	b.n	8001230 <prepareFrame+0x258>
        USART_fsend("%c", stuffed_payload[i]); // Wyślij dane po byte-stuffingu
 8001208:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800120c:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 8001210:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	4811      	ldr	r0, [pc, #68]	@ (8001260 <prepareFrame+0x288>)
 800121c:	f7ff f9fe 	bl	800061c <USART_fsend>
        delay(10);
 8001220:	200a      	movs	r0, #10
 8001222:	f000 fba1 	bl	8001968 <delay>
    for (size_t i = 0; i < stuffed_len; i++) {
 8001226:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8001230:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8001234:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001238:	429a      	cmp	r2, r3
 800123a:	d3e5      	bcc.n	8001208 <prepareFrame+0x230>
    }
    USART_fsend("%c", FRAME_END); // Wyślij koniec ramki
 800123c:	2160      	movs	r1, #96	@ 0x60
 800123e:	4808      	ldr	r0, [pc, #32]	@ (8001260 <prepareFrame+0x288>)
 8001240:	f7ff f9ec 	bl	800061c <USART_fsend>
    USART_fsend("\r\n");
 8001244:	4807      	ldr	r0, [pc, #28]	@ (8001264 <prepareFrame+0x28c>)
 8001246:	f7ff f9e9 	bl	800061c <USART_fsend>
 800124a:	46b5      	mov	sp, r6

}
 800124c:	bf00      	nop
 800124e:	f507 7734 	add.w	r7, r7, #720	@ 0x2d0
 8001252:	46bd      	mov	sp, r7
 8001254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001258:	b001      	add	sp, #4
 800125a:	4770      	bx	lr
 800125c:	08008a3c 	.word	0x08008a3c
 8001260:	08008a48 	.word	0x08008a48
 8001264:	08008a4c 	.word	0x08008a4c

08001268 <decodeFrame>:

//=======================DEKODOWANIE RAMKI=========================
bool decodeFrame(uint8_t *bx, Receive_Frame *frame, uint8_t len) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d948      	bls.n	800130e <decodeFrame+0xa6>
            uint8_t k = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	75fa      	strb	r2, [r7, #23]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	75fa      	strb	r2, [r7, #23]
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c98      	adds	r0, r3, #2
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	2203      	movs	r2, #3
 80012b0:	4619      	mov	r1, r3
 80012b2:	f006 fc50 	bl	8007b56 <memcpy>
            k += COMMAND_LENGTH;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	3303      	adds	r3, #3
 80012ba:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3b07      	subs	r3, #7
 80012c0:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1d58      	adds	r0, r3, #5
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	7dba      	ldrb	r2, [r7, #22]
 80012ce:	4619      	mov	r1, r3
 80012d0:	f006 fc41 	bl	8007b56 <memcpy>
            k += data_len;
 80012d4:	7dfa      	ldrb	r2, [r7, #23]
 80012d6:	7dbb      	ldrb	r3, [r7, #22]
 80012d8:	4413      	add	r3, r2
 80012da:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	823b      	strh	r3, [r7, #16]
            calculate_crc16((uint8_t *)frame, k, ownCrc);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	f107 0214 	add.w	r2, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f7ff fa09 	bl	8000708 <calculate_crc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80012f6:	7d3a      	ldrb	r2, [r7, #20]
 80012f8:	7c3b      	ldrb	r3, [r7, #16]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d103      	bne.n	8001306 <decodeFrame+0x9e>
 80012fe:	7d7a      	ldrb	r2, [r7, #21]
 8001300:	7c7b      	ldrb	r3, [r7, #17]
 8001302:	429a      	cmp	r2, r3
 8001304:	d001      	beq.n	800130a <decodeFrame+0xa2>
            	return false;
 8001306:	2300      	movs	r3, #0
 8001308:	e002      	b.n	8001310 <decodeFrame+0xa8>
            }
            return true;
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <decodeFrame+0xa8>
        }
        return false;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <process_received_char>:



//=======================DETEKCJA RAMKI=========================
void process_received_char(uint8_t received_char) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
    if (received_char == '~') {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b7e      	cmp	r3, #126	@ 0x7e
 8001326:	d113      	bne.n	8001350 <process_received_char+0x38>
        if (!in_frame) {
 8001328:	4b4b      	ldr	r3, [pc, #300]	@ (8001458 <process_received_char+0x140>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	f083 0301 	eor.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <process_received_char+0x32>
            in_frame = true;
 8001336:	4b48      	ldr	r3, [pc, #288]	@ (8001458 <process_received_char+0x140>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
            bx_index = 0;
 800133c:	4b47      	ldr	r3, [pc, #284]	@ (800145c <process_received_char+0x144>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
            escape_detected = false;
 8001342:	4b47      	ldr	r3, [pc, #284]	@ (8001460 <process_received_char+0x148>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
        reset_frame_state();
    }
}
 8001348:	e082      	b.n	8001450 <process_received_char+0x138>
            reset_frame_state();
 800134a:	f7ff fa4b 	bl	80007e4 <reset_frame_state>
}
 800134e:	e07f      	b.n	8001450 <process_received_char+0x138>
    } else if (received_char == '`') {
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b60      	cmp	r3, #96	@ 0x60
 8001354:	d12a      	bne.n	80013ac <process_received_char+0x94>
        if (in_frame) {
 8001356:	4b40      	ldr	r3, [pc, #256]	@ (8001458 <process_received_char+0x140>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01d      	beq.n	800139a <process_received_char+0x82>
            if (decodeFrame(bx, &ramka, bx_index)) {
 800135e:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <process_received_char+0x144>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	493f      	ldr	r1, [pc, #252]	@ (8001464 <process_received_char+0x14c>)
 8001368:	483f      	ldr	r0, [pc, #252]	@ (8001468 <process_received_char+0x150>)
 800136a:	f7ff ff7d 	bl	8001268 <decodeFrame>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d009      	beq.n	8001388 <process_received_char+0x70>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 8001374:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <process_received_char+0x154>)
 8001376:	4a3e      	ldr	r2, [pc, #248]	@ (8001470 <process_received_char+0x158>)
 8001378:	2167      	movs	r1, #103	@ 0x67
 800137a:	2068      	movs	r0, #104	@ 0x68
 800137c:	f7ff fe2c 	bl	8000fd8 <prepareFrame>
                handleCommand(&ramka);
 8001380:	4838      	ldr	r0, [pc, #224]	@ (8001464 <process_received_char+0x14c>)
 8001382:	f000 f879 	bl	8001478 <handleCommand>
 8001386:	e005      	b.n	8001394 <process_received_char+0x7c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001388:	4b3a      	ldr	r3, [pc, #232]	@ (8001474 <process_received_char+0x15c>)
 800138a:	4a39      	ldr	r2, [pc, #228]	@ (8001470 <process_received_char+0x158>)
 800138c:	2167      	movs	r1, #103	@ 0x67
 800138e:	2068      	movs	r0, #104	@ 0x68
 8001390:	f7ff fe22 	bl	8000fd8 <prepareFrame>
            reset_frame_state();
 8001394:	f7ff fa26 	bl	80007e4 <reset_frame_state>
}
 8001398:	e05a      	b.n	8001450 <process_received_char+0x138>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 800139a:	4b36      	ldr	r3, [pc, #216]	@ (8001474 <process_received_char+0x15c>)
 800139c:	4a34      	ldr	r2, [pc, #208]	@ (8001470 <process_received_char+0x158>)
 800139e:	2167      	movs	r1, #103	@ 0x67
 80013a0:	2068      	movs	r0, #104	@ 0x68
 80013a2:	f7ff fe19 	bl	8000fd8 <prepareFrame>
            reset_frame_state();
 80013a6:	f7ff fa1d 	bl	80007e4 <reset_frame_state>
}
 80013aa:	e051      	b.n	8001450 <process_received_char+0x138>
    } else if (in_frame) {
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <process_received_char+0x140>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d04b      	beq.n	800144c <process_received_char+0x134>
        if (escape_detected) {
 80013b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <process_received_char+0x148>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d02f      	beq.n	800141c <process_received_char+0x104>
            if (received_char == '^') {
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b5e      	cmp	r3, #94	@ 0x5e
 80013c0:	d108      	bne.n	80013d4 <process_received_char+0xbc>
                bx[bx_index++] = '~';
 80013c2:	4b26      	ldr	r3, [pc, #152]	@ (800145c <process_received_char+0x144>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	4924      	ldr	r1, [pc, #144]	@ (800145c <process_received_char+0x144>)
 80013ca:	600a      	str	r2, [r1, #0]
 80013cc:	4a26      	ldr	r2, [pc, #152]	@ (8001468 <process_received_char+0x150>)
 80013ce:	217e      	movs	r1, #126	@ 0x7e
 80013d0:	54d1      	strb	r1, [r2, r3]
 80013d2:	e01f      	b.n	8001414 <process_received_char+0xfc>
            } else if (received_char == ']') {
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b5d      	cmp	r3, #93	@ 0x5d
 80013d8:	d108      	bne.n	80013ec <process_received_char+0xd4>
                bx[bx_index++] = '}';
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <process_received_char+0x144>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	491e      	ldr	r1, [pc, #120]	@ (800145c <process_received_char+0x144>)
 80013e2:	600a      	str	r2, [r1, #0]
 80013e4:	4a20      	ldr	r2, [pc, #128]	@ (8001468 <process_received_char+0x150>)
 80013e6:	217d      	movs	r1, #125	@ 0x7d
 80013e8:	54d1      	strb	r1, [r2, r3]
 80013ea:	e013      	b.n	8001414 <process_received_char+0xfc>
            } else if (received_char == '&') {
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b26      	cmp	r3, #38	@ 0x26
 80013f0:	d108      	bne.n	8001404 <process_received_char+0xec>
                bx[bx_index++] = '`';
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <process_received_char+0x144>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	4918      	ldr	r1, [pc, #96]	@ (800145c <process_received_char+0x144>)
 80013fa:	600a      	str	r2, [r1, #0]
 80013fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <process_received_char+0x150>)
 80013fe:	2160      	movs	r1, #96	@ 0x60
 8001400:	54d1      	strb	r1, [r2, r3]
 8001402:	e007      	b.n	8001414 <process_received_char+0xfc>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <process_received_char+0x15c>)
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <process_received_char+0x158>)
 8001408:	2167      	movs	r1, #103	@ 0x67
 800140a:	2068      	movs	r0, #104	@ 0x68
 800140c:	f7ff fde4 	bl	8000fd8 <prepareFrame>
                reset_frame_state();
 8001410:	f7ff f9e8 	bl	80007e4 <reset_frame_state>
            escape_detected = false;
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <process_received_char+0x148>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
}
 800141a:	e019      	b.n	8001450 <process_received_char+0x138>
        } else if (received_char == '}') {
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001420:	d103      	bne.n	800142a <process_received_char+0x112>
            escape_detected = true;
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <process_received_char+0x148>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
}
 8001428:	e012      	b.n	8001450 <process_received_char+0x138>
            if (bx_index < sizeof(bx)) {
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <process_received_char+0x144>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001432:	d208      	bcs.n	8001446 <process_received_char+0x12e>
                bx[bx_index++] = received_char;
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <process_received_char+0x144>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <process_received_char+0x144>)
 800143c:	600a      	str	r2, [r1, #0]
 800143e:	490a      	ldr	r1, [pc, #40]	@ (8001468 <process_received_char+0x150>)
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	54ca      	strb	r2, [r1, r3]
}
 8001444:	e004      	b.n	8001450 <process_received_char+0x138>
                reset_frame_state();
 8001446:	f7ff f9cd 	bl	80007e4 <reset_frame_state>
}
 800144a:	e001      	b.n	8001450 <process_received_char+0x138>
        reset_frame_state();
 800144c:	f7ff f9ca 	bl	80007e4 <reset_frame_state>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000cc0 	.word	0x20000cc0
 800145c:	20000cbc 	.word	0x20000cbc
 8001460:	20000cba 	.word	0x20000cba
 8001464:	20000cc4 	.word	0x20000cc4
 8001468:	20000bac 	.word	0x20000bac
 800146c:	08008a50 	.word	0x08008a50
 8001470:	08008a18 	.word	0x08008a18
 8001474:	08008a58 	.word	0x08008a58

08001478 <handleCommand>:



//=======================ROZPOZNANIE I WYKONANIE KOMENDY=========================
void handleCommand(Receive_Frame *frame)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b092      	sub	sp, #72	@ 0x48
 800147c:	af02      	add	r7, sp, #8
 800147e:	6078      	str	r0, [r7, #4]
	CommandEntry commandTable[COMMAND_COUNT] = {
 8001480:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <handleCommand+0xcc>)
 8001482:	f107 0414 	add.w	r4, r7, #20
 8001486:	461d      	mov	r5, r3
 8001488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001490:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001494:	e884 0003 	stmia.w	r4, {r0, r1}
			{"ONP", executeONP},
			{"ONT", executeONT},
			{"ONN", executeONN},
			{"OFF", executeOFF}
	};
	for (int i = 0; i < COMMAND_COUNT; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800149c:	e043      	b.n	8001526 <handleCommand+0xae>
	        if (strncmp(frame->command, commandTable[i].command, COMMAND_LENGTH) == 0) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1c98      	adds	r0, r3, #2
 80014a2:	f107 0214 	add.w	r2, r7, #20
 80014a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	2203      	movs	r2, #3
 80014ae:	4619      	mov	r1, r3
 80014b0:	f006 fa5d 	bl	800796e <strncmp>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d132      	bne.n	8001520 <handleCommand+0xa8>
	            // Parsowanie współrzędnych z `data`
	            int x, y;
	            if (parse_coordinates(frame->data, &x, &y)) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3305      	adds	r3, #5
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	f107 0110 	add.w	r1, r7, #16
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fce8 	bl	8000e9c <parse_coordinates>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01c      	beq.n	800150c <handleCommand+0x94>
	                // Sprawdzenie zakresu współrzędnych
	                if (is_within_bounds(x, y)) {
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fcc1 	bl	8000e60 <is_within_bounds>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00c      	beq.n	80014fe <handleCommand+0x86>
	                    lcd_clear(); // Czyszczenie ekranu przed rysowaniem
 80014e4:	f000 f960 	bl	80017a8 <lcd_clear>
	                    commandTable[i].function(frame); // Wywołaj przypisaną funkcję
 80014e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	3340      	adds	r3, #64	@ 0x40
 80014ee:	443b      	add	r3, r7
 80014f0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
	                    lcd_copy();
 80014f8:	f000 f928 	bl	800174c <lcd_copy>
	                    return;
 80014fc:	e01f      	b.n	800153e <handleCommand+0xc6>
	                } else {
	                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " DISPLAY_AREA");
 80014fe:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <handleCommand+0xd0>)
 8001500:	4a12      	ldr	r2, [pc, #72]	@ (800154c <handleCommand+0xd4>)
 8001502:	2167      	movs	r1, #103	@ 0x67
 8001504:	2068      	movs	r0, #104	@ 0x68
 8001506:	f7ff fd67 	bl	8000fd8 <prepareFrame>
	                    return;
 800150a:	e018      	b.n	800153e <handleCommand+0xc6>
	                }
	            } else {
	                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " NOT_RECOGNIZED%s", frame->data);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3305      	adds	r3, #5
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <handleCommand+0xd8>)
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <handleCommand+0xd4>)
 8001516:	2167      	movs	r1, #103	@ 0x67
 8001518:	2068      	movs	r0, #104	@ 0x68
 800151a:	f7ff fd5d 	bl	8000fd8 <prepareFrame>
	                return;
 800151e:	e00e      	b.n	800153e <handleCommand+0xc6>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 8001520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001522:	3301      	adds	r3, #1
 8001524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001528:	2b04      	cmp	r3, #4
 800152a:	ddb8      	ble.n	800149e <handleCommand+0x26>
	            }
	        }
	    }
	    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3302      	adds	r3, #2
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <handleCommand+0xdc>)
 8001534:	4a05      	ldr	r2, [pc, #20]	@ (800154c <handleCommand+0xd4>)
 8001536:	2167      	movs	r1, #103	@ 0x67
 8001538:	2068      	movs	r0, #104	@ 0x68
 800153a:	f7ff fd4d 	bl	8000fd8 <prepareFrame>
}
 800153e:	3740      	adds	r7, #64	@ 0x40
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	08008a84 	.word	0x08008a84
 8001548:	08008a60 	.word	0x08008a60
 800154c:	08008a18 	.word	0x08008a18
 8001550:	08008a70 	.word	0x08008a70
 8001554:	08008a04 	.word	0x08008a04

08001558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <MX_GPIO_Init+0x90>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <MX_GPIO_Init+0x90>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <MX_GPIO_Init+0x90>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <MX_GPIO_Init+0x90>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <MX_GPIO_Init+0x90>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <MX_GPIO_Init+0x90>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <MX_GPIO_Init+0x90>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <MX_GPIO_Init+0x90>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <MX_GPIO_Init+0x90>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f641 0106 	movw	r1, #6150	@ 0x1806
 80015bc:	480b      	ldr	r0, [pc, #44]	@ (80015ec <MX_GPIO_Init+0x94>)
 80015be:	f001 f929 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 80015c2:	f641 0306 	movw	r3, #6150	@ 0x1806
 80015c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_GPIO_Init+0x94>)
 80015dc:	f000 ff70 	bl	80024c0 <HAL_GPIO_Init>

}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000400 	.word	0x48000400

080015f0 <lcd_cmd>:
    CMD(0xf6), 0x00,
    CMD(ST7735S_COLMOD), 0x05,
    CMD(ST7735S_MADCTL), 0xa0,
};
static void lcd_cmd(uint8_t cmd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <lcd_cmd+0x44>)
 8001602:	f001 f907 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800160c:	4809      	ldr	r0, [pc, #36]	@ (8001634 <lcd_cmd+0x44>)
 800160e:	f001 f901 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001612:	1df9      	adds	r1, r7, #7
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	2201      	movs	r2, #1
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <lcd_cmd+0x48>)
 800161c:	f002 fcd5 	bl	8003fca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <lcd_cmd+0x44>)
 8001628:	f001 f8f4 	bl	8002814 <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	48000400 	.word	0x48000400
 8001638:	2000ad50 	.word	0x2000ad50

0800163c <lcd_data>:
static void lcd_data(uint8_t data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800164c:	480c      	ldr	r0, [pc, #48]	@ (8001680 <lcd_data+0x44>)
 800164e:	f001 f8e1 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001658:	4809      	ldr	r0, [pc, #36]	@ (8001680 <lcd_data+0x44>)
 800165a:	f001 f8db 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800165e:	1df9      	adds	r1, r7, #7
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	2201      	movs	r2, #1
 8001666:	4807      	ldr	r0, [pc, #28]	@ (8001684 <lcd_data+0x48>)
 8001668:	f002 fcaf 	bl	8003fca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001672:	4803      	ldr	r0, [pc, #12]	@ (8001680 <lcd_data+0x44>)
 8001674:	f001 f8ce 	bl	8002814 <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	48000400 	.word	0x48000400
 8001684:	2000ad50 	.word	0x2000ad50

08001688 <lcd_send>:
static void lcd_send(uint16_t value)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <lcd_send+0x20>
		lcd_cmd(value);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffa5 	bl	80015f0 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80016a6:	e004      	b.n	80016b2 <lcd_send+0x2a>
		lcd_data(value);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ffc5 	bl	800163c <lcd_data>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <lcd_data16>:
static void lcd_data16(uint16_t value)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ffb5 	bl	800163c <lcd_data>
	lcd_data(value);
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ffb0 	bl	800163c <lcd_data>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80016f2:	202a      	movs	r0, #42	@ 0x2a
 80016f4:	f7ff ff7c 	bl	80015f0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ffda 	bl	80016ba <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4413      	add	r3, r2
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffd1 	bl	80016ba <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001718:	202b      	movs	r0, #43	@ 0x2b
 800171a:	f7ff ff69 	bl	80015f0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	b29b      	uxth	r3, r3
 8001722:	3302      	adds	r3, #2
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ffc7 	bl	80016ba <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	b29a      	uxth	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ffbc 	bl	80016ba <lcd_data16>
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <lcd_copy>:
void lcd_copy(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	22a0      	movs	r2, #160	@ 0xa0
 8001754:	2100      	movs	r1, #0
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff ffc4 	bl	80016e4 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 800175c:	202c      	movs	r0, #44	@ 0x2c
 800175e:	f7ff ff47 	bl	80015f0 <lcd_cmd>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <lcd_copy+0x50>)
 800176a:	f001 f853 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001774:	4809      	ldr	r0, [pc, #36]	@ (800179c <lcd_copy+0x50>)
 8001776:	f001 f84d 	bl	8002814 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001782:	4907      	ldr	r1, [pc, #28]	@ (80017a0 <lcd_copy+0x54>)
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <lcd_copy+0x58>)
 8001786:	f002 fc20 	bl	8003fca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <lcd_copy+0x50>)
 8001792:	f001 f83f 	bl	8002814 <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	48000400 	.word	0x48000400
 80017a0:	20000d4c 	.word	0x20000d4c
 80017a4:	2000ad50 	.word	0x2000ad50

080017a8 <lcd_clear>:
void lcd_clear(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
    lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	22a0      	movs	r2, #160	@ 0xa0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff ff95 	bl	80016e4 <lcd_set_window>
    lcd_cmd(ST7735S_RAMWR);
 80017ba:	202c      	movs	r0, #44	@ 0x2c
 80017bc:	f7ff ff18 	bl	80015f0 <lcd_cmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017c6:	4815      	ldr	r0, [pc, #84]	@ (800181c <lcd_clear+0x74>)
 80017c8:	f001 f824 	bl	8002814 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017d2:	4812      	ldr	r0, [pc, #72]	@ (800181c <lcd_clear+0x74>)
 80017d4:	f001 f81e 	bl	8002814 <HAL_GPIO_WritePin>

    // Wypełnij bufor ramki kolorem czarnym
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	e007      	b.n	80017ee <lcd_clear+0x46>
        frame_buffer[i] = 0x0000; // Czarny kolor
 80017de:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <lcd_clear+0x78>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2100      	movs	r1, #0
 80017e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80017f4:	dbf3      	blt.n	80017de <lcd_clear+0x36>
    }

    // Prześlij zaktualizowany bufor ramki do wyświetlacza
    HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <lcd_clear+0x78>)
 8001800:	4808      	ldr	r0, [pc, #32]	@ (8001824 <lcd_clear+0x7c>)
 8001802:	f002 fbe2 	bl	8003fca <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <lcd_clear+0x74>)
 800180e:	f001 f801 	bl	8002814 <HAL_GPIO_WritePin>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	48000400 	.word	0x48000400
 8001820:	20000d4c 	.word	0x20000d4c
 8001824:	2000ad50 	.word	0x2000ad50

08001828 <lcd_init>:


//TODO zrobic zarządzanie podświetleniem
void lcd_init(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2104      	movs	r1, #4
 8001832:	4817      	ldr	r0, [pc, #92]	@ (8001890 <lcd_init+0x68>)
 8001834:	f000 ffee 	bl	8002814 <HAL_GPIO_WritePin>
    delay(100);
 8001838:	2064      	movs	r0, #100	@ 0x64
 800183a:	f000 f895 	bl	8001968 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2104      	movs	r1, #4
 8001842:	4813      	ldr	r0, [pc, #76]	@ (8001890 <lcd_init+0x68>)
 8001844:	f000 ffe6 	bl	8002814 <HAL_GPIO_WritePin>
    delay(100);
 8001848:	2064      	movs	r0, #100	@ 0x64
 800184a:	f000 f88d 	bl	8001968 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	e009      	b.n	8001868 <lcd_init+0x40>
        lcd_send(init_table[i]);
 8001854:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <lcd_init+0x6c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff13 	bl	8001688 <lcd_send>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3301      	adds	r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b4b      	cmp	r3, #75	@ 0x4b
 800186c:	d9f2      	bls.n	8001854 <lcd_init+0x2c>
    }
    delay(200);
 800186e:	20c8      	movs	r0, #200	@ 0xc8
 8001870:	f000 f87a 	bl	8001968 <delay>
    lcd_cmd(ST7735S_SLPOUT);
 8001874:	2011      	movs	r0, #17
 8001876:	f7ff febb 	bl	80015f0 <lcd_cmd>
    delay(120);
 800187a:	2078      	movs	r0, #120	@ 0x78
 800187c:	f000 f874 	bl	8001968 <delay>
    lcd_cmd(ST7735S_DISPON);
 8001880:	2029      	movs	r0, #41	@ 0x29
 8001882:	f7ff feb5 	bl	80015f0 <lcd_cmd>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	48000400 	.word	0x48000400
 8001894:	08011e50 	.word	0x08011e50

08001898 <lcd_put_pixel>:
	lcd_cmd(ST7735S_RAMWR);
	for (int i = 0; i < width * height; i++)
		lcd_data16(color);
}
void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	4905      	ldr	r1, [pc, #20]	@ (80018cc <lcd_put_pixel+0x34>)
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000d4c 	.word	0x20000d4c

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	@ (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	@ (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ffc2 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delayMs){
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <delay+0x2c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs)); //niestety blokuje działanie programu ale na szczęście nie przerwań
 8001976:	bf00      	nop
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	441a      	add	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <delay+0x2c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d8f8      	bhi.n	8001978 <delay+0x10>
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	2000ad4c 	.word	0x2000ad4c

08001998 <wait_for_frame>:
void wait_for_frame(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 800199e:	f7fe fe01 	bl	80005a4 <USART_kbhit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <wait_for_frame+0x20>
	        uint8_t received_char = USART_getchar();
 80019a8:	f7fe fe0e 	bl	80005c8 <USART_getchar>
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
	        process_received_char(received_char);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fcb0 	bl	8001318 <process_received_char>
	 }
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c4:	f000 fb77 	bl	80020b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c8:	f000 f810 	bl	80019ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 80019cc:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <main+0x28>)
 80019ce:	f7ff ffa9 	bl	8001924 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d2:	f7ff fdc1 	bl	8001558 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019d6:	f000 fa99 	bl	8001f0c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80019da:	f000 f85f 	bl	8001a9c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80019de:	f7ff ff23 	bl	8001828 <lcd_init>
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
    /* USER CODE END WHILE */
	  wait_for_frame();
 80019e2:	f7ff ffd9 	bl	8001998 <wait_for_frame>
 80019e6:	e7fc      	b.n	80019e2 <main+0x22>
 80019e8:	00013880 	.word	0x00013880

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b096      	sub	sp, #88	@ 0x58
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	2244      	movs	r2, #68	@ 0x44
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 ffa2 	bl	8007944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a12:	f000 ff25 	bl	8002860 <HAL_PWREx_ControlVoltageScaling>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a1c:	f000 f838 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a20:	2310      	movs	r3, #16
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a2c:	2360      	movs	r3, #96	@ 0x60
 8001a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a30:	2302      	movs	r3, #2
 8001a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a34:	2301      	movs	r3, #1
 8001a36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a3c:	2328      	movs	r3, #40	@ 0x28
 8001a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a40:	2307      	movs	r3, #7
 8001a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 ff5b 	bl	800290c <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a5c:	f000 f818 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2303      	movs	r3, #3
 8001a66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	2104      	movs	r1, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 fb23 	bl	80030c4 <HAL_RCC_ClockConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a84:	f000 f804 	bl	8001a90 <Error_Handler>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3758      	adds	r7, #88	@ 0x58
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <Error_Handler+0x8>

08001a9c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <MX_SPI2_Init+0x78>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001aac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001ab6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001aba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ace:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001aea:	2207      	movs	r2, #7
 8001aec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_SPI2_Init+0x74>)
 8001afc:	f002 f9c2 	bl	8003e84 <HAL_SPI_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b06:	f7ff ffc3 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000ad50 	.word	0x2000ad50
 8001b14:	40003800 	.word	0x40003800

08001b18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	@ 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a25      	ldr	r2, [pc, #148]	@ (8001bcc <HAL_SPI_MspInit+0xb4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d144      	bne.n	8001bc4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b3a:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	4a24      	ldr	r2, [pc, #144]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <HAL_SPI_MspInit+0xb8>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001b82:	2308      	movs	r3, #8
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b92:	2305      	movs	r3, #5
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <HAL_SPI_MspInit+0xbc>)
 8001b9e:	f000 fc8f 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bb4:	2305      	movs	r3, #5
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <HAL_SPI_MspInit+0xc0>)
 8001bc0:	f000 fc7e 	bl	80024c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40003800 	.word	0x40003800
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	48000800 	.word	0x48000800
 8001bd8:	48000400 	.word	0x48000400

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_MspInit+0x44>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <HAL_MspInit+0x44>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bee:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <HAL_MspInit+0x44>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_MspInit+0x44>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <HAL_MspInit+0x44>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_MspInit+0x44>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <NMI_Handler+0x4>

08001c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <HardFault_Handler+0x4>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <MemManage_Handler+0x4>

08001c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 fa70 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <SysTick_Handler+0x18>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a02      	ldr	r2, [pc, #8]	@ (8001c90 <SysTick_Handler+0x18>)
 8001c88:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000ad4c 	.word	0x2000ad4c

08001c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <USART2_IRQHandler+0x10>)
 8001c9a:	f002 fd69 	bl	8004770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000adb8 	.word	0x2000adb8

08001ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_kill>:

int _kill(int pid, int sig)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cc2:	f005 ff1b 	bl	8007afc <__errno>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2216      	movs	r2, #22
 8001cca:	601a      	str	r2, [r3, #0]
  return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_exit>:

void _exit (int status)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffe7 	bl	8001cb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cea:	bf00      	nop
 8001cec:	e7fd      	b.n	8001cea <_exit+0x12>

08001cee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e00a      	b.n	8001d16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d00:	f3af 8000 	nop.w
 8001d04:	4601      	mov	r1, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60ba      	str	r2, [r7, #8]
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbf0      	blt.n	8001d00 <_read+0x12>
  }

  return len;
 8001d1e:	687b      	ldr	r3, [r7, #4]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e009      	b.n	8001d4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	60ba      	str	r2, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbf1      	blt.n	8001d3a <_write+0x12>
  }
  return len;
 8001d56:	687b      	ldr	r3, [r7, #4]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_close>:

int _close(int file)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d88:	605a      	str	r2, [r3, #4]
  return 0;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_isatty>:

int _isatty(int file)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	@ (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df8:	f005 fe80 	bl	8007afc <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	220c      	movs	r2, #12
 8001e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e009      	b.n	8001e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <_sbrk+0x64>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20018000 	.word	0x20018000
 8001e28:	00002000 	.word	0x00002000
 8001e2c:	2000adb4 	.word	0x2000adb4
 8001e30:	2000af90 	.word	0x2000af90

08001e34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <SystemInit+0x20>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3e:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <SystemInit+0x20>)
 8001e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <HAL_UART_TxCpltCallback>:
extern volatile int USART_TX_Busy;
extern volatile int USART_RX_Empty;
extern volatile int USART_RX_Busy;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a13      	ldr	r2, [pc, #76]	@ (8001eb0 <HAL_UART_TxCpltCallback+0x58>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d11e      	bne.n	8001ea6 <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_UART_TxCpltCallback+0x5c>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_UART_TxCpltCallback+0x5c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d018      	beq.n	8001ea6 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_UART_TxCpltCallback+0x5c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <HAL_UART_TxCpltCallback+0x60>)
 8001e7a:	5cd3      	ldrb	r3, [r2, r3]
 8001e7c:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_UART_TxCpltCallback+0x5c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb4 <HAL_UART_TxCpltCallback+0x5c>)
 8001e86:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_UART_TxCpltCallback+0x5c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e90:	d302      	bcc.n	8001e98 <HAL_UART_TxCpltCallback+0x40>
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <HAL_UART_TxCpltCallback+0x5c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001e98:	f107 030f 	add.w	r3, r7, #15
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <HAL_UART_TxCpltCallback+0x58>)
 8001ea2:	f002 fbbb 	bl	800461c <HAL_UART_Transmit_IT>
	   }
   }
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000adb8 	.word	0x2000adb8
 8001eb4:	2000029c 	.word	0x2000029c
 8001eb8:	200002ac 	.word	0x200002ac

08001ebc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f00 <HAL_UART_RxCpltCallback+0x44>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d114      	bne.n	8001ef6 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_UART_RxCpltCallback+0x48>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f04 <HAL_UART_RxCpltCallback+0x48>)
 8001ed4:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <HAL_UART_RxCpltCallback+0x48>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d902      	bls.n	8001ee4 <HAL_UART_RxCpltCallback+0x28>
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_UART_RxCpltCallback+0x48>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <HAL_UART_RxCpltCallback+0x48>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	@ (8001f08 <HAL_UART_RxCpltCallback+0x4c>)
 8001eea:	4413      	add	r3, r2
 8001eec:	2201      	movs	r2, #1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4803      	ldr	r0, [pc, #12]	@ (8001f00 <HAL_UART_RxCpltCallback+0x44>)
 8001ef2:	f002 fbf1 	bl	80046d8 <HAL_UART_Receive_IT>

	 }
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000adb8 	.word	0x2000adb8
 8001f04:	2000028c 	.word	0x2000028c
 8001f08:	20000aac 	.word	0x20000aac

08001f0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f10:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f12:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <MX_USART2_UART_Init+0x7c>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f16:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4e:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f50:	f002 fb16 	bl	8004580 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f5a:	f7ff fd99 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ring_buffer_setup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE);
 8001f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f62:	490a      	ldr	r1, [pc, #40]	@ (8001f8c <MX_USART2_UART_Init+0x80>)
 8001f64:	480a      	ldr	r0, [pc, #40]	@ (8001f90 <MX_USART2_UART_Init+0x84>)
 8001f66:	f7fe fb03 	bl	8000570 <ring_buffer_setup>
  ring_buffer_setup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE);
 8001f6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f6e:	4909      	ldr	r1, [pc, #36]	@ (8001f94 <MX_USART2_UART_Init+0x88>)
 8001f70:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <MX_USART2_UART_Init+0x8c>)
 8001f72:	f7fe fafd 	bl	8000570 <ring_buffer_setup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8001f76:	2201      	movs	r2, #1
 8001f78:	4904      	ldr	r1, [pc, #16]	@ (8001f8c <MX_USART2_UART_Init+0x80>)
 8001f7a:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <MX_USART2_UART_Init+0x78>)
 8001f7c:	f002 fbac 	bl	80046d8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000adb8 	.word	0x2000adb8
 8001f88:	40004400 	.word	0x40004400
 8001f8c:	20000aac 	.word	0x20000aac
 8001f90:	2000028c 	.word	0x2000028c
 8001f94:	200002ac 	.word	0x200002ac
 8001f98:	2000029c 	.word	0x2000029c

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2288      	movs	r2, #136	@ 0x88
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f005 fcc1 	bl	8007944 <memset>
  if(uartHandle->Instance==USART2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a25      	ldr	r2, [pc, #148]	@ (800205c <HAL_UART_MspInit+0xc0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d143      	bne.n	8002054 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 fa97 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe4:	f7ff fd54 	bl	8001a90 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8001fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200c:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <HAL_UART_MspInit+0xc4>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002018:	230c      	movs	r3, #12
 800201a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002030:	2307      	movs	r3, #7
 8002032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002040:	f000 fa3e 	bl	80024c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	2026      	movs	r0, #38	@ 0x26
 800204a:	f000 f984 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800204e:	2026      	movs	r0, #38	@ 0x26
 8002050:	f000 f99d 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002054:	bf00      	nop
 8002056:	37b0      	adds	r7, #176	@ 0xb0
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40004400 	.word	0x40004400
 8002060:	40021000 	.word	0x40021000

08002064 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800209c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002068:	f7ff fee4 	bl	8001e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800206c:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800206e:	490d      	ldr	r1, [pc, #52]	@ (80020a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <LoopForever+0xe>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002084:	4c0a      	ldr	r4, [pc, #40]	@ (80020b0 <LoopForever+0x16>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002092:	f005 fd39 	bl	8007b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002096:	f7ff fc93 	bl	80019c0 <main>

0800209a <LoopForever>:

LoopForever:
    b LoopForever
 800209a:	e7fe      	b.n	800209a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800209c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80020a8:	08012124 	.word	0x08012124
  ldr r2, =_sbss
 80020ac:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80020b0:	2000af90 	.word	0x2000af90

080020b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC1_2_IRQHandler>

080020b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 f93d 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c6:	200f      	movs	r0, #15
 80020c8:	f000 f80e 	bl	80020e8 <HAL_InitTick>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	e001      	b.n	80020dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020d8:	f7ff fd80 	bl	8001bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020dc:	79fb      	ldrb	r3, [r7, #7]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020f4:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <HAL_InitTick+0x6c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d023      	beq.n	8002144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020fc:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_InitTick+0x70>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_InitTick+0x6c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f949 	bl	80023aa <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d809      	bhi.n	8002138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f000 f913 	bl	8002356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_InitTick+0x74>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e007      	b.n	8002148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e004      	b.n	8002148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e001      	b.n	8002148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000208 	.word	0x20000208
 8002158:	20000200 	.word	0x20000200
 800215c:	20000204 	.word	0x20000204

08002160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000208 	.word	0x20000208
 8002184:	2000ae40 	.word	0x2000ae40

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	2000ae40 	.word	0x2000ae40

080021a0 <__NVIC_SetPriorityGrouping>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	@ (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d008      	beq.n	80023ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2204      	movs	r2, #4
 80023de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e022      	b.n	8002432 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 020e 	bic.w	r2, r2, #14
 80023fa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	f003 021c 	and.w	r2, r3, #28
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	2101      	movs	r1, #1
 800241a:	fa01 f202 	lsl.w	r2, r1, r2
 800241e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d005      	beq.n	8002462 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e029      	b.n	80024b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 020e 	bic.w	r2, r2, #14
 8002470:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	f003 021c 	and.w	r2, r3, #28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f202 	lsl.w	r2, r1, r2
 8002494:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	4798      	blx	r3
    }
  }
  return status;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ce:	e17f      	b.n	80027d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8171 	beq.w	80027ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d005      	beq.n	8002500 <HAL_GPIO_Init+0x40>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d130      	bne.n	8002562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002536:	2201      	movs	r2, #1
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0201 	and.w	r2, r3, #1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b03      	cmp	r3, #3
 800256c:	d118      	bne.n	80025a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	6939      	ldr	r1, [r7, #16]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80ac 	beq.w	80027ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b5f      	ldr	r3, [pc, #380]	@ (80027f0 <HAL_GPIO_Init+0x330>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	4a5e      	ldr	r2, [pc, #376]	@ (80027f0 <HAL_GPIO_Init+0x330>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6613      	str	r3, [r2, #96]	@ 0x60
 800267e:	4b5c      	ldr	r3, [pc, #368]	@ (80027f0 <HAL_GPIO_Init+0x330>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800268a:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_GPIO_Init+0x334>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026b4:	d025      	beq.n	8002702 <HAL_GPIO_Init+0x242>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4f      	ldr	r2, [pc, #316]	@ (80027f8 <HAL_GPIO_Init+0x338>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01f      	beq.n	80026fe <HAL_GPIO_Init+0x23e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4e      	ldr	r2, [pc, #312]	@ (80027fc <HAL_GPIO_Init+0x33c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d019      	beq.n	80026fa <HAL_GPIO_Init+0x23a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002800 <HAL_GPIO_Init+0x340>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d013      	beq.n	80026f6 <HAL_GPIO_Init+0x236>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002804 <HAL_GPIO_Init+0x344>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00d      	beq.n	80026f2 <HAL_GPIO_Init+0x232>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002808 <HAL_GPIO_Init+0x348>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <HAL_GPIO_Init+0x22e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	@ (800280c <HAL_GPIO_Init+0x34c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <HAL_GPIO_Init+0x22a>
 80026e6:	2306      	movs	r3, #6
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x244>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x244>
 8002702:	2300      	movs	r3, #0
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002714:	4937      	ldr	r1, [pc, #220]	@ (80027f4 <HAL_GPIO_Init+0x334>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002722:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_GPIO_Init+0x350>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002746:	4a32      	ldr	r2, [pc, #200]	@ (8002810 <HAL_GPIO_Init+0x350>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800274c:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <HAL_GPIO_Init+0x350>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002770:	4a27      	ldr	r2, [pc, #156]	@ (8002810 <HAL_GPIO_Init+0x350>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002776:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <HAL_GPIO_Init+0x350>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800279a:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <HAL_GPIO_Init+0x350>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_GPIO_Init+0x350>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027c4:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <HAL_GPIO_Init+0x350>)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3301      	adds	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f47f ae78 	bne.w	80024d0 <HAL_GPIO_Init+0x10>
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000
 80027f8:	48000400 	.word	0x48000400
 80027fc:	48000800 	.word	0x48000800
 8002800:	48000c00 	.word	0x48000c00
 8002804:	48001000 	.word	0x48001000
 8002808:	48001400 	.word	0x48001400
 800280c:	48001800 	.word	0x48001800
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002830:	e002      	b.n	8002838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <HAL_PWREx_GetVoltageRange+0x18>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800286e:	d130      	bne.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002870:	4b23      	ldr	r3, [pc, #140]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287c:	d038      	beq.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002886:	4a1e      	ldr	r2, [pc, #120]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002888:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800288e:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2232      	movs	r2, #50	@ 0x32
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	4a1b      	ldr	r2, [pc, #108]	@ (8002908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9b      	lsrs	r3, r3, #18
 80028a0:	3301      	adds	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a4:	e002      	b.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b8:	d102      	bne.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f2      	bne.n	80028a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028cc:	d110      	bne.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e00f      	b.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028de:	d007      	beq.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028e0:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028e8:	4a05      	ldr	r2, [pc, #20]	@ (8002900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40007000 	.word	0x40007000
 8002904:	20000200 	.word	0x20000200
 8002908:	431bde83 	.word	0x431bde83

0800290c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e3ca      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291e:	4b97      	ldr	r3, [pc, #604]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002928:	4b94      	ldr	r3, [pc, #592]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80e4 	beq.w	8002b08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <HAL_RCC_OscConfig+0x4a>
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	f040 808b 	bne.w	8002a64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b01      	cmp	r3, #1
 8002952:	f040 8087 	bne.w	8002a64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002956:	4b89      	ldr	r3, [pc, #548]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_RCC_OscConfig+0x62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e3a2      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	4b82      	ldr	r3, [pc, #520]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_RCC_OscConfig+0x7c>
 800297e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002986:	e005      	b.n	8002994 <HAL_RCC_OscConfig+0x88>
 8002988:	4b7c      	ldr	r3, [pc, #496]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002994:	4293      	cmp	r3, r2
 8002996:	d223      	bcs.n	80029e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fd55 	bl	800344c <RCC_SetFlashLatencyFromMSIRange>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e383      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ac:	4b73      	ldr	r3, [pc, #460]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a72      	ldr	r2, [pc, #456]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029b2:	f043 0308 	orr.w	r3, r3, #8
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b70      	ldr	r3, [pc, #448]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	496d      	ldr	r1, [pc, #436]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ca:	4b6c      	ldr	r3, [pc, #432]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	4968      	ldr	r1, [pc, #416]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
 80029de:	e025      	b.n	8002a2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e0:	4b66      	ldr	r3, [pc, #408]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a65      	ldr	r2, [pc, #404]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b63      	ldr	r3, [pc, #396]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4960      	ldr	r1, [pc, #384]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fe:	4b5f      	ldr	r3, [pc, #380]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	495b      	ldr	r1, [pc, #364]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fd15 	bl	800344c <RCC_SetFlashLatencyFromMSIRange>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e343      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a2c:	f000 fc4a 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b52      	ldr	r3, [pc, #328]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	4950      	ldr	r1, [pc, #320]	@ (8002b80 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	4a4e      	ldr	r2, [pc, #312]	@ (8002b84 <HAL_RCC_OscConfig+0x278>)
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b88 <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fb49 	bl	80020e8 <HAL_InitTick>
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d052      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	e327      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d032      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a6c:	4b43      	ldr	r3, [pc, #268]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a42      	ldr	r2, [pc, #264]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a78:	f7ff fb86 	bl	8002188 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a80:	f7ff fb82 	bl	8002188 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e310      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a92:	4b3a      	ldr	r3, [pc, #232]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a36      	ldr	r2, [pc, #216]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b34      	ldr	r3, [pc, #208]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4931      	ldr	r1, [pc, #196]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	492c      	ldr	r1, [pc, #176]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	e01a      	b.n	8002b08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ade:	f7ff fb53 	bl	8002188 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae6:	f7ff fb4f 	bl	8002188 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e2dd      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002af8:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x1da>
 8002b04:	e000      	b.n	8002b08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d074      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x21a>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b0c      	cmp	r3, #12
 8002b1e:	d10e      	bne.n	8002b3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d10b      	bne.n	8002b3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d064      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2f0>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d160      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e2ba      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x24a>
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	e026      	b.n	8002ba4 <HAL_RCC_OscConfig+0x298>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b5e:	d115      	bne.n	8002b8c <HAL_RCC_OscConfig+0x280>
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b03      	ldr	r3, [pc, #12]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a02      	ldr	r2, [pc, #8]	@ (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	e014      	b.n	8002ba4 <HAL_RCC_OscConfig+0x298>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08011ee8 	.word	0x08011ee8
 8002b84:	20000200 	.word	0x20000200
 8002b88:	20000204 	.word	0x20000204
 8002b8c:	4ba0      	ldr	r3, [pc, #640]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a9f      	ldr	r2, [pc, #636]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b9d      	ldr	r3, [pc, #628]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a9c      	ldr	r2, [pc, #624]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7ff faec 	bl	8002188 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff fae8 	bl	8002188 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e276      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc6:	4b92      	ldr	r3, [pc, #584]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x2a8>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7ff fad8 	bl	8002188 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7ff fad4 	bl	8002188 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	@ 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e262      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d0>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d060      	beq.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x310>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d119      	bne.n	8002c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d116      	bne.n	8002c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x328>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e23f      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b76      	ldr	r3, [pc, #472]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4973      	ldr	r1, [pc, #460]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c48:	e040      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c52:	4b6f      	ldr	r3, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6e      	ldr	r2, [pc, #440]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7ff fa93 	bl	8002188 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7ff fa8f 	bl	8002188 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e21d      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c78:	4b65      	ldr	r3, [pc, #404]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b62      	ldr	r3, [pc, #392]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	495f      	ldr	r1, [pc, #380]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
 8002c98:	e018      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7ff fa6f 	bl	8002188 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7ff fa6b 	bl	8002188 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1f9      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc0:	4b53      	ldr	r3, [pc, #332]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce6:	4a4a      	ldr	r2, [pc, #296]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7ff fa4a 	bl	8002188 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7ff fa46 	bl	8002188 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1d4      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0a:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x3ec>
 8002d18:	e01b      	b.n	8002d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d20:	4a3b      	ldr	r2, [pc, #236]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7ff fa2d 	bl	8002188 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d32:	f7ff fa29 	bl	8002188 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1b7      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ef      	bne.n	8002d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80a6 	beq.w	8002eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d64:	4b2a      	ldr	r3, [pc, #168]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b27      	ldr	r3, [pc, #156]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	4a26      	ldr	r2, [pc, #152]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d7c:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8c:	4b21      	ldr	r3, [pc, #132]	@ (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d118      	bne.n	8002dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d98:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da4:	f7ff f9f0 	bl	8002188 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7ff f9ec 	bl	8002188 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e17a      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbe:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4d8>
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002de2:	e029      	b.n	8002e38 <HAL_RCC_OscConfig+0x52c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d115      	bne.n	8002e18 <HAL_RCC_OscConfig+0x50c>
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	4a07      	ldr	r2, [pc, #28]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dfc:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e02:	4a03      	ldr	r2, [pc, #12]	@ (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x52c>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
 8002e18:	4b9c      	ldr	r3, [pc, #624]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	4a9b      	ldr	r2, [pc, #620]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e28:	4b98      	ldr	r3, [pc, #608]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	4a97      	ldr	r2, [pc, #604]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7ff f9a2 	bl	8002188 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7ff f99e 	bl	8002188 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e12a      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ed      	beq.n	8002e48 <HAL_RCC_OscConfig+0x53c>
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7ff f98b 	bl	8002188 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7ff f987 	bl	8002188 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e113      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e8c:	4b7f      	ldr	r3, [pc, #508]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ed      	bne.n	8002e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b7a      	ldr	r3, [pc, #488]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	4a79      	ldr	r2, [pc, #484]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80fe 	beq.w	80030b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	f040 80d0 	bne.w	8003060 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ec0:	4b72      	ldr	r3, [pc, #456]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d130      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d127      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f00:	2a07      	cmp	r2, #7
 8002f02:	bf14      	ite	ne
 8002f04:	2201      	movne	r2, #1
 8002f06:	2200      	moveq	r2, #0
 8002f08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d06e      	beq.n	8003014 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d069      	beq.n	8003010 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f3c:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f48:	4b50      	ldr	r3, [pc, #320]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0ad      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f58:	4b4c      	ldr	r3, [pc, #304]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f64:	f7ff f910 	bl	8002188 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7ff f90c 	bl	8002188 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e09a      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7e:	4b43      	ldr	r3, [pc, #268]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8a:	4b40      	ldr	r3, [pc, #256]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	4b40      	ldr	r3, [pc, #256]	@ (8003090 <HAL_RCC_OscConfig+0x784>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f9a:	3a01      	subs	r2, #1
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fa4:	0212      	lsls	r2, r2, #8
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fac:	0852      	lsrs	r2, r2, #1
 8002fae:	3a01      	subs	r2, #1
 8002fb0:	0552      	lsls	r2, r2, #21
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fb8:	0852      	lsrs	r2, r2, #1
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	0652      	lsls	r2, r2, #25
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fc4:	0912      	lsrs	r2, r2, #4
 8002fc6:	0452      	lsls	r2, r2, #17
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	4930      	ldr	r1, [pc, #192]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fe8:	f7ff f8ce 	bl	8002188 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7ff f8ca 	bl	8002188 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e058      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	4b22      	ldr	r3, [pc, #136]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300e:	e050      	b.n	80030b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e04f      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d148      	bne.n	80030b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003020:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800302c:	4b17      	ldr	r3, [pc, #92]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a16      	ldr	r2, [pc, #88]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003036:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003038:	f7ff f8a6 	bl	8002188 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7ff f8a2 	bl	8002188 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e030      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003052:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x734>
 800305e:	e028      	b.n	80030b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d023      	beq.n	80030ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a08      	ldr	r2, [pc, #32]	@ (800308c <HAL_RCC_OscConfig+0x780>)
 800306c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7ff f889 	bl	8002188 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003078:	e00c      	b.n	8003094 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7ff f885 	bl	8002188 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d905      	bls.n	8003094 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e013      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
 800308c:	40021000 	.word	0x40021000
 8003090:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <HAL_RCC_OscConfig+0x7b0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ec      	bne.n	800307a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCC_OscConfig+0x7b0>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	4905      	ldr	r1, [pc, #20]	@ (80030bc <HAL_RCC_OscConfig+0x7b0>)
 80030a6:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_RCC_OscConfig+0x7b4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	60cb      	str	r3, [r1, #12]
 80030ac:	e001      	b.n	80030b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	feeefffc 	.word	0xfeeefffc

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0e7      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b75      	ldr	r3, [pc, #468]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d910      	bls.n	8003108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b72      	ldr	r3, [pc, #456]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 0207 	bic.w	r2, r3, #7
 80030ee:	4970      	ldr	r1, [pc, #448]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b6e      	ldr	r3, [pc, #440]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0cf      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b66      	ldr	r3, [pc, #408]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003120:	429a      	cmp	r2, r3
 8003122:	d908      	bls.n	8003136 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b63      	ldr	r3, [pc, #396]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4960      	ldr	r1, [pc, #384]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04c      	beq.n	80031dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	4b5a      	ldr	r3, [pc, #360]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d121      	bne.n	800319a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0a6      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003162:	4b54      	ldr	r3, [pc, #336]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d115      	bne.n	800319a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e09a      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800317a:	4b4e      	ldr	r3, [pc, #312]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e08e      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318a:	4b4a      	ldr	r3, [pc, #296]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e086      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800319a:	4b46      	ldr	r3, [pc, #280]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f023 0203 	bic.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4943      	ldr	r1, [pc, #268]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fe ffec 	bl	8002188 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b4:	f7fe ffe8 	bl	8002188 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e06e      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	4b3a      	ldr	r3, [pc, #232]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 020c 	and.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	429a      	cmp	r2, r3
 80031da:	d1eb      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d010      	beq.n	800320a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	4b31      	ldr	r3, [pc, #196]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d208      	bcs.n	800320a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b2e      	ldr	r3, [pc, #184]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	492b      	ldr	r1, [pc, #172]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320a:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d210      	bcs.n	800323a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003218:	4b25      	ldr	r3, [pc, #148]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 0207 	bic.w	r2, r3, #7
 8003220:	4923      	ldr	r1, [pc, #140]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003228:	4b21      	ldr	r3, [pc, #132]	@ (80032b0 <HAL_RCC_ClockConfig+0x1ec>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d001      	beq.n	800323a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e036      	b.n	80032a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003246:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	4918      	ldr	r1, [pc, #96]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	4313      	orrs	r3, r2
 8003256:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003264:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4910      	ldr	r1, [pc, #64]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003278:	f000 f824 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	490b      	ldr	r1, [pc, #44]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f4>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
 8003294:	4a09      	ldr	r2, [pc, #36]	@ (80032bc <HAL_RCC_ClockConfig+0x1f8>)
 8003296:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_ClockConfig+0x1fc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe ff23 	bl	80020e8 <HAL_InitTick>
 80032a2:	4603      	mov	r3, r0
 80032a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40021000 	.word	0x40021000
 80032b8:	08011ee8 	.word	0x08011ee8
 80032bc:	20000200 	.word	0x20000200
 80032c0:	20000204 	.word	0x20000204

080032c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d2:	4b3e      	ldr	r3, [pc, #248]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032dc:	4b3b      	ldr	r3, [pc, #236]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x34>
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d121      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d11e      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032f8:	4b34      	ldr	r3, [pc, #208]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003304:	4b31      	ldr	r3, [pc, #196]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e005      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003314:	4b2d      	ldr	r3, [pc, #180]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003320:	4a2b      	ldr	r2, [pc, #172]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003328:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003334:	e00a      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d102      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800333c:	4b25      	ldr	r3, [pc, #148]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	e004      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d101      	bne.n	800334c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003348:	4b23      	ldr	r3, [pc, #140]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800334a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d134      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003352:	4b1e      	ldr	r3, [pc, #120]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d003      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0xa6>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d003      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0xac>
 8003368:	e005      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800336a:	4b1a      	ldr	r3, [pc, #104]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800336c:	617b      	str	r3, [r7, #20]
      break;
 800336e:	e005      	b.n	800337c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003370:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003372:	617b      	str	r3, [r7, #20]
      break;
 8003374:	e002      	b.n	800337c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	617b      	str	r3, [r7, #20]
      break;
 800337a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800337c:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	3301      	adds	r3, #1
 8003388:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800338a:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	fb03 f202 	mul.w	r2, r3, r2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033a2:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x108>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	0e5b      	lsrs	r3, r3, #25
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	3301      	adds	r3, #1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033bc:	69bb      	ldr	r3, [r7, #24]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3724      	adds	r7, #36	@ 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	08011f00 	.word	0x08011f00
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	007a1200 	.word	0x007a1200

080033dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000200 	.word	0x20000200

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4904      	ldr	r1, [pc, #16]	@ (800341c <HAL_RCC_GetPCLK1Freq+0x28>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	08011ef8 	.word	0x08011ef8

08003420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003424:	f7ff ffda 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0adb      	lsrs	r3, r3, #11
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4904      	ldr	r1, [pc, #16]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	08011ef8 	.word	0x08011ef8

0800344c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003458:	4b2a      	ldr	r3, [pc, #168]	@ (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003464:	f7ff f9ee 	bl	8002844 <HAL_PWREx_GetVoltageRange>
 8003468:	6178      	str	r0, [r7, #20]
 800346a:	e014      	b.n	8003496 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b25      	ldr	r3, [pc, #148]	@ (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	4a24      	ldr	r2, [pc, #144]	@ (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	@ 0x58
 8003478:	4b22      	ldr	r3, [pc, #136]	@ (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003484:	f7ff f9de 	bl	8002844 <HAL_PWREx_GetVoltageRange>
 8003488:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800348a:	4b1e      	ldr	r3, [pc, #120]	@ (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4a1d      	ldr	r2, [pc, #116]	@ (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349c:	d10b      	bne.n	80034b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b80      	cmp	r3, #128	@ 0x80
 80034a2:	d919      	bls.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80034a8:	d902      	bls.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034aa:	2302      	movs	r3, #2
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e013      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	e010      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b80      	cmp	r3, #128	@ 0x80
 80034ba:	d902      	bls.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034bc:	2303      	movs	r3, #3
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	e00a      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b80      	cmp	r3, #128	@ 0x80
 80034c6:	d102      	bne.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034c8:	2302      	movs	r3, #2
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e004      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b70      	cmp	r3, #112	@ 0x70
 80034d2:	d101      	bne.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 0207 	bic.w	r2, r3, #7
 80034e0:	4909      	ldr	r1, [pc, #36]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034e8:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d001      	beq.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	40022000 	.word	0x40022000

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003514:	2300      	movs	r3, #0
 8003516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003518:	2300      	movs	r3, #0
 800351a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003524:	2b00      	cmp	r3, #0
 8003526:	d041      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800352c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003530:	d02a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003532:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003536:	d824      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003538:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800353c:	d008      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800353e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003542:	d81e      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800354c:	d010      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800354e:	e018      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003550:	4b86      	ldr	r3, [pc, #536]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a85      	ldr	r2, [pc, #532]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355c:	e015      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fabb 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800356e:	e00c      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3320      	adds	r3, #32
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fba6 	bl	8003cc8 <RCCEx_PLLSAI2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	74fb      	strb	r3, [r7, #19]
      break;
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003590:	4b76      	ldr	r3, [pc, #472]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800359e:	4973      	ldr	r1, [pc, #460]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035a6:	e001      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d041      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035c0:	d02a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035c6:	d824      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035cc:	d008      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035d2:	d81e      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035dc:	d010      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035de:	e018      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035e0:	4b62      	ldr	r3, [pc, #392]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a61      	ldr	r2, [pc, #388]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ec:	e015      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fa73 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035fe:	e00c      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3320      	adds	r3, #32
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fb5e 	bl	8003cc8 <RCCEx_PLLSAI2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	74fb      	strb	r3, [r7, #19]
      break;
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003620:	4b52      	ldr	r3, [pc, #328]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800362e:	494f      	ldr	r1, [pc, #316]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003636:	e001      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a0 	beq.w	800378a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800364e:	4b47      	ldr	r3, [pc, #284]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003664:	4b41      	ldr	r3, [pc, #260]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003668:	4a40      	ldr	r2, [pc, #256]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003670:	4b3e      	ldr	r3, [pc, #248]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367c:	2301      	movs	r3, #1
 800367e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003680:	4b3b      	ldr	r3, [pc, #236]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3a      	ldr	r2, [pc, #232]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800368c:	f7fe fd7c 	bl	8002188 <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003692:	e009      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7fe fd78 	bl	8002188 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d902      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	74fb      	strb	r3, [r7, #19]
        break;
 80036a6:	e005      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036a8:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ef      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d15c      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ba:	4b2c      	ldr	r3, [pc, #176]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01f      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d019      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036d8:	4b24      	ldr	r3, [pc, #144]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036e4:	4b21      	ldr	r3, [pc, #132]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ea:	4a20      	ldr	r2, [pc, #128]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036f4:	4b1d      	ldr	r3, [pc, #116]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fa:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003704:	4a19      	ldr	r2, [pc, #100]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe fd37 	bl	8002188 <HAL_GetTick>
 800371a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371c:	e00b      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe fd33 	bl	8002188 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d902      	bls.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	74fb      	strb	r3, [r7, #19]
            break;
 8003734:	e006      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ec      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800374a:	4b08      	ldr	r3, [pc, #32]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375a:	4904      	ldr	r1, [pc, #16]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003762:	e009      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003778:	7c7b      	ldrb	r3, [r7, #17]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b9e      	ldr	r3, [pc, #632]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	4a9d      	ldr	r2, [pc, #628]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003796:	4b98      	ldr	r3, [pc, #608]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f023 0203 	bic.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	4994      	ldr	r1, [pc, #592]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b8:	4b8f      	ldr	r3, [pc, #572]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	f023 020c 	bic.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c6:	498c      	ldr	r1, [pc, #560]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037da:	4b87      	ldr	r3, [pc, #540]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	4983      	ldr	r1, [pc, #524]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037fc:	4b7e      	ldr	r3, [pc, #504]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003802:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	497b      	ldr	r1, [pc, #492]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800381e:	4b76      	ldr	r3, [pc, #472]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382c:	4972      	ldr	r1, [pc, #456]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003840:	4b6d      	ldr	r3, [pc, #436]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384e:	496a      	ldr	r1, [pc, #424]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003862:	4b65      	ldr	r3, [pc, #404]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003868:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003870:	4961      	ldr	r1, [pc, #388]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003884:	4b5c      	ldr	r3, [pc, #368]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	4959      	ldr	r1, [pc, #356]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a6:	4b54      	ldr	r3, [pc, #336]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b4:	4950      	ldr	r1, [pc, #320]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038c8:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	4948      	ldr	r1, [pc, #288]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ea:	4b43      	ldr	r3, [pc, #268]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f8:	493f      	ldr	r1, [pc, #252]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d028      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390c:	4b3a      	ldr	r3, [pc, #232]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800391a:	4937      	ldr	r1, [pc, #220]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800392a:	d106      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b32      	ldr	r3, [pc, #200]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a31      	ldr	r2, [pc, #196]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003936:	60d3      	str	r3, [r2, #12]
 8003938:	e011      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003942:	d10c      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f8c8 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800396a:	4b23      	ldr	r3, [pc, #140]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003978:	491f      	ldr	r1, [pc, #124]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003988:	d106      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a1a      	ldr	r2, [pc, #104]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003994:	60d3      	str	r3, [r2, #12]
 8003996:	e011      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2101      	movs	r1, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f899 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d02b      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d6:	4908      	ldr	r1, [pc, #32]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039e6:	d109      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e8:	4b03      	ldr	r3, [pc, #12]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a02      	ldr	r2, [pc, #8]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f2:	60d3      	str	r3, [r2, #12]
 80039f4:	e014      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f867 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a3a:	4928      	ldr	r1, [pc, #160]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a4a:	d10d      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2102      	movs	r1, #2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f844 	bl	8003ae0 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d014      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	74bb      	strb	r3, [r7, #18]
 8003a66:	e011      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3320      	adds	r3, #32
 8003a76:	2102      	movs	r1, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f925 	bl	8003cc8 <RCCEx_PLLSAI2_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a98:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aa6:	490d      	ldr	r1, [pc, #52]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aba:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aca:	4904      	ldr	r1, [pc, #16]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ad2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000

08003ae0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aee:	4b75      	ldr	r3, [pc, #468]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003afa:	4b72      	ldr	r3, [pc, #456]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0203 	and.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d10d      	bne.n	8003b26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b12:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
       ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d047      	beq.n	8003bb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	e044      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d018      	beq.n	8003b66 <RCCEx_PLLSAI1_Config+0x86>
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d825      	bhi.n	8003b84 <RCCEx_PLLSAI1_Config+0xa4>
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d002      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0x62>
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d009      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x74>
 8003b40:	e020      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b42:	4b60      	ldr	r3, [pc, #384]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d11d      	bne.n	8003b8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b52:	e01a      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b54:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d116      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b64:	e013      	b.n	8003b8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b66:	4b57      	ldr	r3, [pc, #348]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b72:	4b54      	ldr	r3, [pc, #336]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b82:	e006      	b.n	8003b92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      break;
 8003b88:	e004      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e002      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e000      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	4944      	ldr	r1, [pc, #272]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d17d      	bne.n	8003cb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bbc:	4b41      	ldr	r3, [pc, #260]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a40      	ldr	r2, [pc, #256]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc8:	f7fe fade 	bl	8002188 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bce:	e009      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bd0:	f7fe fada 	bl	8002188 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d902      	bls.n	8003be4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	73fb      	strb	r3, [r7, #15]
        break;
 8003be2:	e005      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003be4:	4b37      	ldr	r3, [pc, #220]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ef      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d160      	bne.n	8003cb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d111      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bfc:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	0211      	lsls	r1, r2, #8
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68d2      	ldr	r2, [r2, #12]
 8003c12:	0912      	lsrs	r2, r2, #4
 8003c14:	0452      	lsls	r2, r2, #17
 8003c16:	430a      	orrs	r2, r1
 8003c18:	492a      	ldr	r1, [pc, #168]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]
 8003c1e:	e027      	b.n	8003c70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d112      	bne.n	8003c4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c26:	4b27      	ldr	r3, [pc, #156]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003c2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6892      	ldr	r2, [r2, #8]
 8003c36:	0211      	lsls	r1, r2, #8
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6912      	ldr	r2, [r2, #16]
 8003c3c:	0852      	lsrs	r2, r2, #1
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0552      	lsls	r2, r2, #21
 8003c42:	430a      	orrs	r2, r1
 8003c44:	491f      	ldr	r1, [pc, #124]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	610b      	str	r3, [r1, #16]
 8003c4a:	e011      	b.n	8003c70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6892      	ldr	r2, [r2, #8]
 8003c5c:	0211      	lsls	r1, r2, #8
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6952      	ldr	r2, [r2, #20]
 8003c62:	0852      	lsrs	r2, r2, #1
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0652      	lsls	r2, r2, #25
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	4916      	ldr	r1, [pc, #88]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c70:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a13      	ldr	r2, [pc, #76]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fa84 	bl	8002188 <HAL_GetTick>
 8003c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c82:	e009      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c84:	f7fe fa80 	bl	8002188 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d902      	bls.n	8003c98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	73fb      	strb	r3, [r7, #15]
          break;
 8003c96:	e005      	b.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c98:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ef      	beq.n	8003c84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	4904      	ldr	r1, [pc, #16]	@ (8003cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d018      	beq.n	8003d14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ce2:	4b67      	ldr	r3, [pc, #412]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f003 0203 	and.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d10d      	bne.n	8003d0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
       ||
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cfa:	4b61      	ldr	r3, [pc, #388]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
       ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d047      	beq.n	8003d9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	e044      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d018      	beq.n	8003d4e <RCCEx_PLLSAI2_Config+0x86>
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d825      	bhi.n	8003d6c <RCCEx_PLLSAI2_Config+0xa4>
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d002      	beq.n	8003d2a <RCCEx_PLLSAI2_Config+0x62>
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d009      	beq.n	8003d3c <RCCEx_PLLSAI2_Config+0x74>
 8003d28:	e020      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d2a:	4b55      	ldr	r3, [pc, #340]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11d      	bne.n	8003d72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d3a:	e01a      	b.n	8003d72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d3c:	4b50      	ldr	r3, [pc, #320]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d116      	bne.n	8003d76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4c:	e013      	b.n	8003d76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d5a:	4b49      	ldr	r3, [pc, #292]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d6a:	e006      	b.n	8003d7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	e004      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d72:	bf00      	nop
 8003d74:	e002      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d82:	4b3f      	ldr	r3, [pc, #252]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	430b      	orrs	r3, r1
 8003d98:	4939      	ldr	r1, [pc, #228]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d167      	bne.n	8003e74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003da4:	4b36      	ldr	r3, [pc, #216]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a35      	ldr	r2, [pc, #212]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fe f9ea 	bl	8002188 <HAL_GetTick>
 8003db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003db6:	e009      	b.n	8003dcc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003db8:	f7fe f9e6 	bl	8002188 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d902      	bls.n	8003dcc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8003dca:	e005      	b.n	8003dd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ef      	bne.n	8003db8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d14a      	bne.n	8003e74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d111      	bne.n	8003e08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003de4:	4b26      	ldr	r3, [pc, #152]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6892      	ldr	r2, [r2, #8]
 8003df4:	0211      	lsls	r1, r2, #8
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	0912      	lsrs	r2, r2, #4
 8003dfc:	0452      	lsls	r2, r2, #17
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	491f      	ldr	r1, [pc, #124]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	614b      	str	r3, [r1, #20]
 8003e06:	e011      	b.n	8003e2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e08:	4b1d      	ldr	r3, [pc, #116]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	0211      	lsls	r1, r2, #8
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6912      	ldr	r2, [r2, #16]
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0652      	lsls	r2, r2, #25
 8003e24:	430a      	orrs	r2, r1
 8003e26:	4916      	ldr	r1, [pc, #88]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a13      	ldr	r2, [pc, #76]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fe f9a6 	bl	8002188 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e3e:	e009      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e40:	f7fe f9a2 	bl	8002188 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d902      	bls.n	8003e54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	73fb      	strb	r3, [r7, #15]
          break;
 8003e52:	e005      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e54:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	4904      	ldr	r1, [pc, #16]	@ (8003e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000

08003e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e095      	b.n	8003fc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d108      	bne.n	8003eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ea6:	d009      	beq.n	8003ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
 8003eae:	e005      	b.n	8003ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fe1e 	bl	8001b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003efc:	d902      	bls.n	8003f04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e002      	b.n	8003f0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f12:	d007      	beq.n	8003f24 <HAL_SPI_Init+0xa0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f1c:	d002      	beq.n	8003f24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	ea42 0103 	orr.w	r1, r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 0204 	and.w	r2, r3, #4
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b088      	sub	sp, #32
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fda:	f7fe f8d5 	bl	8002188 <HAL_GetTick>
 8003fde:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e15c      	b.n	80042ae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_SPI_Transmit+0x36>
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e154      	b.n	80042ae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_SPI_Transmit+0x48>
 800400e:	2302      	movs	r3, #2
 8004010:	e14d      	b.n	80042ae <HAL_SPI_Transmit+0x2e4>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2203      	movs	r2, #3
 800401e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	88fa      	ldrh	r2, [r7, #6]
 8004032:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004064:	d10f      	bne.n	8004086 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004084:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004090:	2b40      	cmp	r3, #64	@ 0x40
 8004092:	d007      	beq.n	80040a4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040ac:	d952      	bls.n	8004154 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_SPI_Transmit+0xf2>
 80040b6:	8b7b      	ldrh	r3, [r7, #26]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d145      	bne.n	8004148 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	881a      	ldrh	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040e0:	e032      	b.n	8004148 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d112      	bne.n	8004116 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f4:	881a      	ldrh	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004114:	e018      	b.n	8004148 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004116:	f7fe f837 	bl	8002188 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d803      	bhi.n	800412e <HAL_SPI_Transmit+0x164>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d102      	bne.n	8004134 <HAL_SPI_Transmit+0x16a>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0b2      	b.n	80042ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1c7      	bne.n	80040e2 <HAL_SPI_Transmit+0x118>
 8004152:	e083      	b.n	800425c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_Transmit+0x198>
 800415c:	8b7b      	ldrh	r3, [r7, #26]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d177      	bne.n	8004252 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d912      	bls.n	8004192 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b02      	subs	r3, #2
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004190:	e05f      	b.n	8004252 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80041b8:	e04b      	b.n	8004252 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d12b      	bne.n	8004220 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d912      	bls.n	80041f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b02      	subs	r3, #2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041f6:	e02c      	b.n	8004252 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800421e:	e018      	b.n	8004252 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004220:	f7fd ffb2 	bl	8002188 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d803      	bhi.n	8004238 <HAL_SPI_Transmit+0x26e>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d102      	bne.n	800423e <HAL_SPI_Transmit+0x274>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e02d      	b.n	80042ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ae      	bne.n	80041ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f947 	bl	80044f4 <SPI_EndRxTxTransaction>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80042ac:	2300      	movs	r3, #0
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042c8:	f7fd ff5e 	bl	8002188 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	4413      	add	r3, r2
 80042d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042d8:	f7fd ff56 	bl	8002188 <HAL_GetTick>
 80042dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042de:	4b39      	ldr	r3, [pc, #228]	@ (80043c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	015b      	lsls	r3, r3, #5
 80042e4:	0d1b      	lsrs	r3, r3, #20
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ee:	e054      	b.n	800439a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d050      	beq.n	800439a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042f8:	f7fd ff46 	bl	8002188 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	429a      	cmp	r2, r3
 8004306:	d902      	bls.n	800430e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d13d      	bne.n	800438a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800431c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004326:	d111      	bne.n	800434c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004330:	d004      	beq.n	800433c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433a:	d107      	bne.n	800434c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800434a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004354:	d10f      	bne.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e017      	b.n	80043ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3b01      	subs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d19b      	bne.n	80042f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000200 	.word	0x20000200

080043c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	@ 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043da:	f7fd fed5 	bl	8002188 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80043ea:	f7fd fecd 	bl	8002188 <HAL_GetTick>
 80043ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043f8:	4b3d      	ldr	r3, [pc, #244]	@ (80044f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	00da      	lsls	r2, r3, #3
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	0d1b      	lsrs	r3, r3, #20
 8004408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004410:	e060      	b.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004418:	d107      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0x62>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004428:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d050      	beq.n	80044d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004432:	f7fd fea9 	bl	8002188 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	429a      	cmp	r2, r3
 8004440:	d902      	bls.n	8004448 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d13d      	bne.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004460:	d111      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446a:	d004      	beq.n	8004476 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004474:	d107      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800448e:	d10f      	bne.n	80044b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e010      	b.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d196      	bne.n	8004412 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3728      	adds	r7, #40	@ 0x28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000200 	.word	0x20000200

080044f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff ff5b 	bl	80043c8 <SPI_WaitFifoStateUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e027      	b.n	8004578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2200      	movs	r2, #0
 8004530:	2180      	movs	r1, #128	@ 0x80
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff fec0 	bl	80042b8 <SPI_WaitFlagStateUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e014      	b.n	8004578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7ff ff34 	bl	80043c8 <SPI_WaitFifoStateUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e000      	b.n	8004578 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e040      	b.n	8004614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fd fcfa 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	@ 0x24
 80045ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fea6 	bl	8005318 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fbeb 	bl	8004da8 <UART_SetConfig>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e01b      	b.n	8004614 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 ff25 	bl	800545c <UART_CheckIdleState>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800461c:	b480      	push	{r7}
 800461e:	b08b      	sub	sp, #44	@ 0x2c
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800462e:	2b20      	cmp	r3, #32
 8004630:	d147      	bne.n	80046c2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_UART_Transmit_IT+0x22>
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e040      	b.n	80046c4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2221      	movs	r2, #33	@ 0x21
 800466a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004674:	d107      	bne.n	8004686 <HAL_UART_Transmit_IT+0x6a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a13      	ldr	r2, [pc, #76]	@ (80046d0 <HAL_UART_Transmit_IT+0xb4>)
 8004682:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004684:	e002      	b.n	800468c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <HAL_UART_Transmit_IT+0xb8>)
 800468a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	613b      	str	r3, [r7, #16]
   return(result);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	69f9      	ldr	r1, [r7, #28]
 80046b0:	6a3a      	ldr	r2, [r7, #32]
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e6      	bne.n	800468c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	372c      	adds	r7, #44	@ 0x2c
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	080059bf 	.word	0x080059bf
 80046d4:	08005909 	.word	0x08005909

080046d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	@ 0x28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d137      	bne.n	8004760 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_UART_Receive_IT+0x24>
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e030      	b.n	8004762 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a18      	ldr	r2, [pc, #96]	@ (800476c <HAL_UART_Receive_IT+0x94>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d01f      	beq.n	8004750 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d018      	beq.n	8004750 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	613b      	str	r3, [r7, #16]
   return(result);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	69f9      	ldr	r1, [r7, #28]
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	61bb      	str	r3, [r7, #24]
   return(result);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e6      	bne.n	800471e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	461a      	mov	r2, r3
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 ff96 	bl	8005688 <UART_Start_Receive_IT>
 800475c:	4603      	mov	r3, r0
 800475e:	e000      	b.n	8004762 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3728      	adds	r7, #40	@ 0x28
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40008000 	.word	0x40008000

08004770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b0ba      	sub	sp, #232	@ 0xe8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800479a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800479e:	4013      	ands	r3, r2
 80047a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d115      	bne.n	80047d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00f      	beq.n	80047d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 82ca 	beq.w	8004d62 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
      }
      return;
 80047d6:	e2c4      	b.n	8004d62 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8117 	beq.w	8004a10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80047f2:	4b85      	ldr	r3, [pc, #532]	@ (8004a08 <HAL_UART_IRQHandler+0x298>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 810a 	beq.w	8004a10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <HAL_UART_IRQHandler+0xbc>
 8004808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2201      	movs	r2, #1
 800481a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <HAL_UART_IRQHandler+0xec>
 8004838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2202      	movs	r2, #2
 800484a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d011      	beq.n	800488c <HAL_UART_IRQHandler+0x11c>
 8004868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2204      	movs	r2, #4
 800487a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004882:	f043 0202 	orr.w	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d017      	beq.n	80048c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2208      	movs	r2, #8
 80048b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048be:	f043 0208 	orr.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <HAL_UART_IRQHandler+0x18a>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8230 	beq.w	8004d66 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00d      	beq.n	800492e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004934:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	d005      	beq.n	8004952 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800494a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800494e:	2b00      	cmp	r3, #0
 8004950:	d04f      	beq.n	80049f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 ff5e 	bl	8005814 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004962:	2b40      	cmp	r3, #64	@ 0x40
 8004964:	d141      	bne.n	80049ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3308      	adds	r3, #8
 800496c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800497c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3308      	adds	r3, #8
 800498e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004992:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800499e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1d9      	bne.n	8004966 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d013      	beq.n	80049e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049be:	4a13      	ldr	r2, [pc, #76]	@ (8004a0c <HAL_UART_IRQHandler+0x29c>)
 80049c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fd fd39 	bl	800243e <HAL_DMA_Abort_IT>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d017      	beq.n	8004a02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049dc:	4610      	mov	r0, r2
 80049de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	e00f      	b.n	8004a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9ca 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e8:	e00b      	b.n	8004a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9c6 	bl	8004d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	e007      	b.n	8004a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9c2 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a00:	e1b1      	b.n	8004d66 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a02:	bf00      	nop
    return;
 8004a04:	e1af      	b.n	8004d66 <HAL_UART_IRQHandler+0x5f6>
 8004a06:	bf00      	nop
 8004a08:	04000120 	.word	0x04000120
 8004a0c:	080058dd 	.word	0x080058dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f040 816a 	bne.w	8004cee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8163 	beq.w	8004cee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 815c 	beq.w	8004cee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a48:	2b40      	cmp	r3, #64	@ 0x40
 8004a4a:	f040 80d4 	bne.w	8004bf6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80ad 	beq.w	8004bbe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	f080 80a5 	bcs.w	8004bbe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 8086 	bne.w	8004b9c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004abe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1da      	bne.n	8004a90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004afe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e1      	bne.n	8004ada <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e3      	bne.n	8004b16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6c:	f023 0310 	bic.w	r3, r3, #16
 8004b70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e4      	bne.n	8004b5c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fd fc13 	bl	80023c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8ea 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bbc:	e0d5      	b.n	8004d6a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	f040 80ce 	bne.w	8004d6a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	f040 80c5 	bne.w	8004d6a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8ce 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
      return;
 8004bf4:	e0b9      	b.n	8004d6a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80ab 	beq.w	8004d6e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80a6 	beq.w	8004d6e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e4      	bne.n	8004c22 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	623b      	str	r3, [r7, #32]
   return(result);
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e3      	bne.n	8004c58 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f023 0310 	bic.w	r3, r3, #16
 8004cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e4      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f852 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cec:	e03f      	b.n	8004d6e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00e      	beq.n	8004d18 <HAL_UART_IRQHandler+0x5a8>
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f89b 	bl	8005e4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d16:	e02d      	b.n	8004d74 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01c      	beq.n	8004d72 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
    }
    return;
 8004d40:	e017      	b.n	8004d72 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d012      	beq.n	8004d74 <HAL_UART_IRQHandler+0x604>
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fe8f 	bl	8005a7e <UART_EndTransmit_IT>
    return;
 8004d60:	e008      	b.n	8004d74 <HAL_UART_IRQHandler+0x604>
      return;
 8004d62:	bf00      	nop
 8004d64:	e006      	b.n	8004d74 <HAL_UART_IRQHandler+0x604>
    return;
 8004d66:	bf00      	nop
 8004d68:	e004      	b.n	8004d74 <HAL_UART_IRQHandler+0x604>
      return;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <HAL_UART_IRQHandler+0x604>
      return;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_UART_IRQHandler+0x604>
    return;
 8004d72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d74:	37e8      	adds	r7, #232	@ 0xe8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b08a      	sub	sp, #40	@ 0x28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8005068 <UART_SetConfig+0x2c0>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a99      	ldr	r2, [pc, #612]	@ (800506c <UART_SetConfig+0x2c4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	4313      	orrs	r3, r2
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e24:	430a      	orrs	r2, r1
 8004e26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a90      	ldr	r2, [pc, #576]	@ (8005070 <UART_SetConfig+0x2c8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d126      	bne.n	8004e80 <UART_SetConfig+0xd8>
 8004e32:	4b90      	ldr	r3, [pc, #576]	@ (8005074 <UART_SetConfig+0x2cc>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d81b      	bhi.n	8004e78 <UART_SetConfig+0xd0>
 8004e40:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <UART_SetConfig+0xa0>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e69 	.word	0x08004e69
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004e71 	.word	0x08004e71
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5e:	e116      	b.n	800508e <UART_SetConfig+0x2e6>
 8004e60:	2302      	movs	r3, #2
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e66:	e112      	b.n	800508e <UART_SetConfig+0x2e6>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6e:	e10e      	b.n	800508e <UART_SetConfig+0x2e6>
 8004e70:	2308      	movs	r3, #8
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e76:	e10a      	b.n	800508e <UART_SetConfig+0x2e6>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7e:	e106      	b.n	800508e <UART_SetConfig+0x2e6>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a7c      	ldr	r2, [pc, #496]	@ (8005078 <UART_SetConfig+0x2d0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d138      	bne.n	8004efc <UART_SetConfig+0x154>
 8004e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005074 <UART_SetConfig+0x2cc>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	d82d      	bhi.n	8004ef4 <UART_SetConfig+0x14c>
 8004e98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <UART_SetConfig+0xf8>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004ef5 	.word	0x08004ef5
 8004eac:	08004ef5 	.word	0x08004ef5
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004ef5 	.word	0x08004ef5
 8004eb8:	08004ef5 	.word	0x08004ef5
 8004ebc:	08004ef5 	.word	0x08004ef5
 8004ec0:	08004edd 	.word	0x08004edd
 8004ec4:	08004ef5 	.word	0x08004ef5
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004eed 	.word	0x08004eed
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eda:	e0d8      	b.n	800508e <UART_SetConfig+0x2e6>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e0d4      	b.n	800508e <UART_SetConfig+0x2e6>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eea:	e0d0      	b.n	800508e <UART_SetConfig+0x2e6>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef2:	e0cc      	b.n	800508e <UART_SetConfig+0x2e6>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e0c8      	b.n	800508e <UART_SetConfig+0x2e6>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5e      	ldr	r2, [pc, #376]	@ (800507c <UART_SetConfig+0x2d4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d125      	bne.n	8004f52 <UART_SetConfig+0x1aa>
 8004f06:	4b5b      	ldr	r3, [pc, #364]	@ (8005074 <UART_SetConfig+0x2cc>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f10:	2b30      	cmp	r3, #48	@ 0x30
 8004f12:	d016      	beq.n	8004f42 <UART_SetConfig+0x19a>
 8004f14:	2b30      	cmp	r3, #48	@ 0x30
 8004f16:	d818      	bhi.n	8004f4a <UART_SetConfig+0x1a2>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d00a      	beq.n	8004f32 <UART_SetConfig+0x18a>
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d814      	bhi.n	8004f4a <UART_SetConfig+0x1a2>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <UART_SetConfig+0x182>
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d008      	beq.n	8004f3a <UART_SetConfig+0x192>
 8004f28:	e00f      	b.n	8004f4a <UART_SetConfig+0x1a2>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f30:	e0ad      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f32:	2302      	movs	r3, #2
 8004f34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f38:	e0a9      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f40:	e0a5      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f42:	2308      	movs	r3, #8
 8004f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f48:	e0a1      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f50:	e09d      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4a      	ldr	r2, [pc, #296]	@ (8005080 <UART_SetConfig+0x2d8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d125      	bne.n	8004fa8 <UART_SetConfig+0x200>
 8004f5c:	4b45      	ldr	r3, [pc, #276]	@ (8005074 <UART_SetConfig+0x2cc>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f68:	d016      	beq.n	8004f98 <UART_SetConfig+0x1f0>
 8004f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f6c:	d818      	bhi.n	8004fa0 <UART_SetConfig+0x1f8>
 8004f6e:	2b80      	cmp	r3, #128	@ 0x80
 8004f70:	d00a      	beq.n	8004f88 <UART_SetConfig+0x1e0>
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d814      	bhi.n	8004fa0 <UART_SetConfig+0x1f8>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <UART_SetConfig+0x1d8>
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d008      	beq.n	8004f90 <UART_SetConfig+0x1e8>
 8004f7e:	e00f      	b.n	8004fa0 <UART_SetConfig+0x1f8>
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f86:	e082      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8e:	e07e      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e07a      	b.n	800508e <UART_SetConfig+0x2e6>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e076      	b.n	800508e <UART_SetConfig+0x2e6>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e072      	b.n	800508e <UART_SetConfig+0x2e6>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a35      	ldr	r2, [pc, #212]	@ (8005084 <UART_SetConfig+0x2dc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d12a      	bne.n	8005008 <UART_SetConfig+0x260>
 8004fb2:	4b30      	ldr	r3, [pc, #192]	@ (8005074 <UART_SetConfig+0x2cc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc0:	d01a      	beq.n	8004ff8 <UART_SetConfig+0x250>
 8004fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc6:	d81b      	bhi.n	8005000 <UART_SetConfig+0x258>
 8004fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fcc:	d00c      	beq.n	8004fe8 <UART_SetConfig+0x240>
 8004fce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fd2:	d815      	bhi.n	8005000 <UART_SetConfig+0x258>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <UART_SetConfig+0x238>
 8004fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fdc:	d008      	beq.n	8004ff0 <UART_SetConfig+0x248>
 8004fde:	e00f      	b.n	8005000 <UART_SetConfig+0x258>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e052      	b.n	800508e <UART_SetConfig+0x2e6>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e04e      	b.n	800508e <UART_SetConfig+0x2e6>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e04a      	b.n	800508e <UART_SetConfig+0x2e6>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e046      	b.n	800508e <UART_SetConfig+0x2e6>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e042      	b.n	800508e <UART_SetConfig+0x2e6>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a17      	ldr	r2, [pc, #92]	@ (800506c <UART_SetConfig+0x2c4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d13a      	bne.n	8005088 <UART_SetConfig+0x2e0>
 8005012:	4b18      	ldr	r3, [pc, #96]	@ (8005074 <UART_SetConfig+0x2cc>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800501c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005020:	d01a      	beq.n	8005058 <UART_SetConfig+0x2b0>
 8005022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005026:	d81b      	bhi.n	8005060 <UART_SetConfig+0x2b8>
 8005028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800502c:	d00c      	beq.n	8005048 <UART_SetConfig+0x2a0>
 800502e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005032:	d815      	bhi.n	8005060 <UART_SetConfig+0x2b8>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <UART_SetConfig+0x298>
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503c:	d008      	beq.n	8005050 <UART_SetConfig+0x2a8>
 800503e:	e00f      	b.n	8005060 <UART_SetConfig+0x2b8>
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005046:	e022      	b.n	800508e <UART_SetConfig+0x2e6>
 8005048:	2302      	movs	r3, #2
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504e:	e01e      	b.n	800508e <UART_SetConfig+0x2e6>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e01a      	b.n	800508e <UART_SetConfig+0x2e6>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e016      	b.n	800508e <UART_SetConfig+0x2e6>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e012      	b.n	800508e <UART_SetConfig+0x2e6>
 8005068:	efff69f3 	.word	0xefff69f3
 800506c:	40008000 	.word	0x40008000
 8005070:	40013800 	.word	0x40013800
 8005074:	40021000 	.word	0x40021000
 8005078:	40004400 	.word	0x40004400
 800507c:	40004800 	.word	0x40004800
 8005080:	40004c00 	.word	0x40004c00
 8005084:	40005000 	.word	0x40005000
 8005088:	2310      	movs	r3, #16
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a9f      	ldr	r2, [pc, #636]	@ (8005310 <UART_SetConfig+0x568>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d17a      	bne.n	800518e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005098:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800509c:	2b08      	cmp	r3, #8
 800509e:	d824      	bhi.n	80050ea <UART_SetConfig+0x342>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0x300>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050eb 	.word	0x080050eb
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050eb 	.word	0x080050eb
 80050b8:	080050db 	.word	0x080050db
 80050bc:	080050eb 	.word	0x080050eb
 80050c0:	080050eb 	.word	0x080050eb
 80050c4:	080050eb 	.word	0x080050eb
 80050c8:	080050e3 	.word	0x080050e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050cc:	f7fe f992 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 80050d0:	61f8      	str	r0, [r7, #28]
        break;
 80050d2:	e010      	b.n	80050f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005314 <UART_SetConfig+0x56c>)
 80050d6:	61fb      	str	r3, [r7, #28]
        break;
 80050d8:	e00d      	b.n	80050f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7fe f8f3 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 80050de:	61f8      	str	r0, [r7, #28]
        break;
 80050e0:	e009      	b.n	80050f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e6:	61fb      	str	r3, [r7, #28]
        break;
 80050e8:	e005      	b.n	80050f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80fb 	beq.w	80052f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	429a      	cmp	r2, r3
 800510c:	d305      	bcc.n	800511a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	429a      	cmp	r2, r3
 8005118:	d903      	bls.n	8005122 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005120:	e0e8      	b.n	80052f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	2200      	movs	r2, #0
 8005126:	461c      	mov	r4, r3
 8005128:	4615      	mov	r5, r2
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	022b      	lsls	r3, r5, #8
 8005134:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005138:	0222      	lsls	r2, r4, #8
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	6849      	ldr	r1, [r1, #4]
 800513e:	0849      	lsrs	r1, r1, #1
 8005140:	2000      	movs	r0, #0
 8005142:	4688      	mov	r8, r1
 8005144:	4681      	mov	r9, r0
 8005146:	eb12 0a08 	adds.w	sl, r2, r8
 800514a:	eb43 0b09 	adc.w	fp, r3, r9
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800515c:	4650      	mov	r0, sl
 800515e:	4659      	mov	r1, fp
 8005160:	f7fb f88e 	bl	8000280 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005172:	d308      	bcc.n	8005186 <UART_SetConfig+0x3de>
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800517a:	d204      	bcs.n	8005186 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	60da      	str	r2, [r3, #12]
 8005184:	e0b6      	b.n	80052f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800518c:	e0b2      	b.n	80052f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005196:	d15e      	bne.n	8005256 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800519c:	2b08      	cmp	r3, #8
 800519e:	d828      	bhi.n	80051f2 <UART_SetConfig+0x44a>
 80051a0:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <UART_SetConfig+0x400>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fe f912 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 80051d0:	61f8      	str	r0, [r7, #28]
        break;
 80051d2:	e014      	b.n	80051fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fe f924 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 80051d8:	61f8      	str	r0, [r7, #28]
        break;
 80051da:	e010      	b.n	80051fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005314 <UART_SetConfig+0x56c>)
 80051de:	61fb      	str	r3, [r7, #28]
        break;
 80051e0:	e00d      	b.n	80051fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7fe f86f 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 80051e6:	61f8      	str	r0, [r7, #28]
        break;
 80051e8:	e009      	b.n	80051fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ee:	61fb      	str	r3, [r7, #28]
        break;
 80051f0:	e005      	b.n	80051fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d077      	beq.n	80052f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005a      	lsls	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	085b      	lsrs	r3, r3, #1
 800520e:	441a      	add	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b0f      	cmp	r3, #15
 800521e:	d916      	bls.n	800524e <UART_SetConfig+0x4a6>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005226:	d212      	bcs.n	800524e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f023 030f 	bic.w	r3, r3, #15
 8005230:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	b29a      	uxth	r2, r3
 800523e:	8afb      	ldrh	r3, [r7, #22]
 8005240:	4313      	orrs	r3, r2
 8005242:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	8afa      	ldrh	r2, [r7, #22]
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e052      	b.n	80052f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005254:	e04e      	b.n	80052f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005256:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800525a:	2b08      	cmp	r3, #8
 800525c:	d827      	bhi.n	80052ae <UART_SetConfig+0x506>
 800525e:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <UART_SetConfig+0x4bc>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005289 	.word	0x08005289
 8005268:	08005291 	.word	0x08005291
 800526c:	08005299 	.word	0x08005299
 8005270:	080052af 	.word	0x080052af
 8005274:	0800529f 	.word	0x0800529f
 8005278:	080052af 	.word	0x080052af
 800527c:	080052af 	.word	0x080052af
 8005280:	080052af 	.word	0x080052af
 8005284:	080052a7 	.word	0x080052a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fe f8b4 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 800528c:	61f8      	str	r0, [r7, #28]
        break;
 800528e:	e014      	b.n	80052ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7fe f8c6 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
 8005294:	61f8      	str	r0, [r7, #28]
        break;
 8005296:	e010      	b.n	80052ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005298:	4b1e      	ldr	r3, [pc, #120]	@ (8005314 <UART_SetConfig+0x56c>)
 800529a:	61fb      	str	r3, [r7, #28]
        break;
 800529c:	e00d      	b.n	80052ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529e:	f7fe f811 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 80052a2:	61f8      	str	r0, [r7, #28]
        break;
 80052a4:	e009      	b.n	80052ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052aa:	61fb      	str	r3, [r7, #28]
        break;
 80052ac:	e005      	b.n	80052ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052b8:	bf00      	nop
    }

    if (pclk != 0U)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d019      	beq.n	80052f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085a      	lsrs	r2, r3, #1
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	441a      	add	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d909      	bls.n	80052ee <UART_SetConfig+0x546>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e0:	d205      	bcs.n	80052ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
 80052ec:	e002      	b.n	80052f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005300:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005304:	4618      	mov	r0, r3
 8005306:	3728      	adds	r7, #40	@ 0x28
 8005308:	46bd      	mov	sp, r7
 800530a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530e:	bf00      	nop
 8005310:	40008000 	.word	0x40008000
 8005314:	00f42400 	.word	0x00f42400

08005318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01a      	beq.n	800542e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005416:	d10a      	bne.n	800542e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b098      	sub	sp, #96	@ 0x60
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800546c:	f7fc fe8c 	bl	8002188 <HAL_GetTick>
 8005470:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b08      	cmp	r3, #8
 800547e:	d12e      	bne.n	80054de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005488:	2200      	movs	r2, #0
 800548a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f88c 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d021      	beq.n	80054de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e6      	bne.n	800549a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e062      	b.n	80055a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d149      	bne.n	8005580 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f4:	2200      	movs	r2, #0
 80054f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f856 	bl	80055ac <UART_WaitOnFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d03c      	beq.n	8005580 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	623b      	str	r3, [r7, #32]
   return(result);
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800551a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005524:	633b      	str	r3, [r7, #48]	@ 0x30
 8005526:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800552a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e6      	bne.n	8005506 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	60fb      	str	r3, [r7, #12]
   return(result);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005558:	61fa      	str	r2, [r7, #28]
 800555a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	617b      	str	r3, [r7, #20]
   return(result);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e011      	b.n	80055a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3758      	adds	r7, #88	@ 0x58
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055bc:	e04f      	b.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d04b      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fc fddf 	bl	8002188 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <UART_WaitOnFlagUntilTimeout+0x30>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e04e      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d037      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b80      	cmp	r3, #128	@ 0x80
 80055f2:	d034      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b40      	cmp	r3, #64	@ 0x40
 80055f8:	d031      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b08      	cmp	r3, #8
 8005606:	d110      	bne.n	800562a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2208      	movs	r2, #8
 800560e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f8ff 	bl	8005814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2208      	movs	r2, #8
 800561a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e029      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005638:	d111      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8e5 	bl	8005814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e00f      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	bf0c      	ite	eq
 800566e:	2301      	moveq	r3, #1
 8005670:	2300      	movne	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	429a      	cmp	r2, r3
 800567a:	d0a0      	beq.n	80055be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005688:	b480      	push	{r7}
 800568a:	b097      	sub	sp, #92	@ 0x5c
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ba:	d10e      	bne.n	80056da <UART_Start_Receive_IT+0x52>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <UART_Start_Receive_IT+0x48>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80056ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056ce:	e02d      	b.n	800572c <UART_Start_Receive_IT+0xa4>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	22ff      	movs	r2, #255	@ 0xff
 80056d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056d8:	e028      	b.n	800572c <UART_Start_Receive_IT+0xa4>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10d      	bne.n	80056fe <UART_Start_Receive_IT+0x76>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <UART_Start_Receive_IT+0x6c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	22ff      	movs	r2, #255	@ 0xff
 80056ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056f2:	e01b      	b.n	800572c <UART_Start_Receive_IT+0xa4>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	227f      	movs	r2, #127	@ 0x7f
 80056f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056fc:	e016      	b.n	800572c <UART_Start_Receive_IT+0xa4>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005706:	d10d      	bne.n	8005724 <UART_Start_Receive_IT+0x9c>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <UART_Start_Receive_IT+0x92>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	227f      	movs	r2, #127	@ 0x7f
 8005714:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005718:	e008      	b.n	800572c <UART_Start_Receive_IT+0xa4>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	223f      	movs	r2, #63	@ 0x3f
 800571e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005722:	e003      	b.n	800572c <UART_Start_Receive_IT+0xa4>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2222      	movs	r2, #34	@ 0x22
 8005738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	657b      	str	r3, [r7, #84]	@ 0x54
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800575c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800575e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005762:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800576a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005778:	d107      	bne.n	800578a <UART_Start_Receive_IT+0x102>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4a21      	ldr	r2, [pc, #132]	@ (800580c <UART_Start_Receive_IT+0x184>)
 8005786:	669a      	str	r2, [r3, #104]	@ 0x68
 8005788:	e002      	b.n	8005790 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a20      	ldr	r2, [pc, #128]	@ (8005810 <UART_Start_Receive_IT+0x188>)
 800578e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d019      	beq.n	80057cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80057ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e6      	bne.n	8005798 <UART_Start_Receive_IT+0x110>
 80057ca:	e018      	b.n	80057fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	613b      	str	r3, [r7, #16]
   return(result);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f043 0320 	orr.w	r3, r3, #32
 80057e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	69f9      	ldr	r1, [r7, #28]
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	375c      	adds	r7, #92	@ 0x5c
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	08005c91 	.word	0x08005c91
 8005810:	08005ad5 	.word	0x08005ad5

08005814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b095      	sub	sp, #84	@ 0x54
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800583a:	643b      	str	r3, [r7, #64]	@ 0x40
 800583c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	61fb      	str	r3, [r7, #28]
   return(result);
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800586e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005870:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005886:	2b01      	cmp	r3, #1
 8005888:	d118      	bne.n	80058bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	60bb      	str	r3, [r7, #8]
   return(result);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f023 0310 	bic.w	r3, r3, #16
 800589e:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6979      	ldr	r1, [r7, #20]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	613b      	str	r3, [r7, #16]
   return(result);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058d0:	bf00      	nop
 80058d2:	3754      	adds	r7, #84	@ 0x54
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff fa3e 	bl	8004d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b08f      	sub	sp, #60	@ 0x3c
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005914:	2b21      	cmp	r3, #33	@ 0x21
 8005916:	d14c      	bne.n	80059b2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d132      	bne.n	800598a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	61fb      	str	r3, [r7, #28]
   return(result);
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005938:	637b      	str	r3, [r7, #52]	@ 0x34
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005944:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e6      	bne.n	8005924 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60bb      	str	r3, [r7, #8]
   return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800596a:	633b      	str	r3, [r7, #48]	@ 0x30
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	613b      	str	r3, [r7, #16]
   return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005988:	e013      	b.n	80059b2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80059b2:	bf00      	nop
 80059b4:	373c      	adds	r7, #60	@ 0x3c
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059be:	b480      	push	{r7}
 80059c0:	b091      	sub	sp, #68	@ 0x44
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ca:	2b21      	cmp	r3, #33	@ 0x21
 80059cc:	d151      	bne.n	8005a72 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d132      	bne.n	8005a40 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	623b      	str	r3, [r7, #32]
   return(result);
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e6      	bne.n	80059da <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	69b9      	ldr	r1, [r7, #24]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	617b      	str	r3, [r7, #20]
   return(result);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e6      	bne.n	8005a0c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a3e:	e018      	b.n	8005a72 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a52:	b292      	uxth	r2, r2
 8005a54:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5a:	1c9a      	adds	r2, r3, #2
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005a72:	bf00      	nop
 8005a74:	3744      	adds	r7, #68	@ 0x44
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b088      	sub	sp, #32
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6979      	ldr	r1, [r7, #20]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e6      	bne.n	8005a86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fc f9c7 	bl	8001e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aca:	bf00      	nop
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b09c      	sub	sp, #112	@ 0x70
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ae2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aec:	2b22      	cmp	r3, #34	@ 0x22
 8005aee:	f040 80be 	bne.w	8005c6e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005af8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005afc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b00:	b2d9      	uxtb	r1, r3
 8005b02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 80a3 	bne.w	8005c82 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a34      	ldr	r2, [pc, #208]	@ (8005c8c <UART_RxISR_8BIT+0x1b8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d01f      	beq.n	8005c00 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d018      	beq.n	8005c00 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	623b      	str	r3, [r7, #32]
   return(result);
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005be2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e6      	bne.n	8005bce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d12e      	bne.n	8005c66 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0310 	bic.w	r3, r3, #16
 8005c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	69b9      	ldr	r1, [r7, #24]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d103      	bne.n	8005c56 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2210      	movs	r2, #16
 8005c54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff f896 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c64:	e00d      	b.n	8005c82 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc f928 	bl	8001ebc <HAL_UART_RxCpltCallback>
}
 8005c6c:	e009      	b.n	8005c82 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	8b1b      	ldrh	r3, [r3, #24]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0208 	orr.w	r2, r2, #8
 8005c7e:	b292      	uxth	r2, r2
 8005c80:	831a      	strh	r2, [r3, #24]
}
 8005c82:	bf00      	nop
 8005c84:	3770      	adds	r7, #112	@ 0x70
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40008000 	.word	0x40008000

08005c90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b09c      	sub	sp, #112	@ 0x70
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca8:	2b22      	cmp	r3, #34	@ 0x22
 8005caa:	f040 80be 	bne.w	8005e2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005cb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005cbe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005cc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ccc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	1c9a      	adds	r2, r3, #2
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 80a3 	bne.w	8005e3e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d18:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e6      	bne.n	8005cf8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e5      	bne.n	8005d2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a34      	ldr	r2, [pc, #208]	@ (8005e48 <UART_RxISR_16BIT+0x1b8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d01f      	beq.n	8005dbc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d018      	beq.n	8005dbc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005daa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d12e      	bne.n	8005e22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f023 0310 	bic.w	r3, r3, #16
 8005dde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	6979      	ldr	r1, [r7, #20]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	613b      	str	r3, [r7, #16]
   return(result);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e6      	bne.n	8005dca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d103      	bne.n	8005e12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fe ffb8 	bl	8004d90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e20:	e00d      	b.n	8005e3e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fc f84a 	bl	8001ebc <HAL_UART_RxCpltCallback>
}
 8005e28:	e009      	b.n	8005e3e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	8b1b      	ldrh	r3, [r3, #24]
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0208 	orr.w	r2, r2, #8
 8005e3a:	b292      	uxth	r2, r2
 8005e3c:	831a      	strh	r2, [r3, #24]
}
 8005e3e:	bf00      	nop
 8005e40:	3770      	adds	r7, #112	@ 0x70
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40008000 	.word	0x40008000

08005e4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	7992      	ldrb	r2, [r2, #6]
 8005e72:	08d2      	lsrs	r2, r2, #3
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	fb13 f302 	smulbb	r3, r3, r2
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	889b      	ldrh	r3, [r3, #4]
 8005e84:	461a      	mov	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	885b      	ldrh	r3, [r3, #2]
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	60da      	str	r2, [r3, #12]
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8005ea6:	b490      	push	{r4, r7}
 8005ea8:	b086      	sub	sp, #24
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	4604      	mov	r4, r0
 8005eae:	4608      	mov	r0, r1
 8005eb0:	1d39      	adds	r1, r7, #4
 8005eb2:	e881 000c 	stmia.w	r1, {r2, r3}
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	81fb      	strh	r3, [r7, #14]
 8005eba:	4603      	mov	r3, r0
 8005ebc:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8005ec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ec6:	88ba      	ldrh	r2, [r7, #4]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	da04      	bge.n	8005ed6 <code+0x30>
        code |= LEFT;
 8005ecc:	2201      	movs	r2, #1
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	75fb      	strb	r3, [r7, #23]
 8005ed4:	e008      	b.n	8005ee8 <code+0x42>
    } else if (x0 > window.x1) {
 8005ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005eda:	893a      	ldrh	r2, [r7, #8]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	dd03      	ble.n	8005ee8 <code+0x42>
        code |= RIGHT;
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005ee8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	da04      	bge.n	8005efc <code+0x56>
        code |= BOTTOM;
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	75fb      	strb	r3, [r7, #23]
 8005efa:	e008      	b.n	8005f0e <code+0x68>
    } else if (y0 > window.y1) {
 8005efc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f00:	897a      	ldrh	r2, [r7, #10]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	dd03      	ble.n	8005f0e <code+0x68>
        code |= TOP;
 8005f06:	2208      	movs	r2, #8
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc90      	pop	{r4, r7}
 8005f18:	4770      	bx	lr

08005f1a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b088      	sub	sp, #32
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005f34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005f38:	cb0c      	ldmia	r3, {r2, r3}
 8005f3a:	f7ff ffb4 	bl	8005ea6 <code>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005f52:	cb0c      	ldmia	r3, {r2, r3}
 8005f54:	f7ff ffa7 	bl	8005ea6 <code>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8005f60:	7ffa      	ldrb	r2, [r7, #31]
 8005f62:	7fbb      	ldrb	r3, [r7, #30]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	777b      	strb	r3, [r7, #29]
            break;
 8005f70:	e0e9      	b.n	8006146 <clip_line+0x22c>
        } else if (code0 & code1) {
 8005f72:	7ffa      	ldrb	r2, [r7, #31]
 8005f74:	7fbb      	ldrb	r3, [r7, #30]
 8005f76:	4013      	ands	r3, r2
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 80e2 	bne.w	8006144 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005f88:	7ffb      	ldrb	r3, [r7, #31]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <clip_line+0x78>
 8005f8e:	7ffb      	ldrb	r3, [r7, #31]
 8005f90:	e000      	b.n	8005f94 <clip_line+0x7a>
 8005f92:	7fbb      	ldrb	r3, [r7, #30]
 8005f94:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005f96:	2208      	movs	r2, #8
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d024      	beq.n	8005fec <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb8:	1acb      	subs	r3, r1, r3
 8005fba:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005fc4:	1a41      	subs	r1, r0, r1
 8005fc6:	fb03 f101 	mul.w	r1, r3, r1
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd8:	1ac3      	subs	r3, r0, r3
 8005fda:	fb91 f3f3 	sdiv	r3, r1, r3
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005fe6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005fe8:	833b      	strh	r3, [r7, #24]
 8005fea:	e07f      	b.n	80060ec <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005fec:	2204      	movs	r2, #4
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d024      	beq.n	8006042 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006006:	4619      	mov	r1, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800600e:	1acb      	subs	r3, r1, r3
 8006010:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006012:	4608      	mov	r0, r1
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	f9b1 1000 	ldrsh.w	r1, [r1]
 800601a:	1a41      	subs	r1, r0, r1
 800601c:	fb03 f101 	mul.w	r1, r3, r1
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006026:	4618      	mov	r0, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800602e:	1ac3      	subs	r3, r0, r3
 8006030:	fb91 f3f3 	sdiv	r3, r1, r3
 8006034:	b29b      	uxth	r3, r3
 8006036:	4413      	add	r3, r2
 8006038:	b29b      	uxth	r3, r3
 800603a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800603c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800603e:	833b      	strh	r3, [r7, #24]
 8006040:	e054      	b.n	80060ec <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006042:	2202      	movs	r2, #2
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	4013      	ands	r3, r2
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d024      	beq.n	8006098 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006054:	b29a      	uxth	r2, r3
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800605c:	4619      	mov	r1, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006064:	1acb      	subs	r3, r1, r3
 8006066:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006068:	4608      	mov	r0, r1
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006070:	1a41      	subs	r1, r0, r1
 8006072:	fb03 f101 	mul.w	r1, r3, r1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800607c:	4618      	mov	r0, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006084:	1ac3      	subs	r3, r0, r3
 8006086:	fb91 f3f3 	sdiv	r3, r1, r3
 800608a:	b29b      	uxth	r3, r3
 800608c:	4413      	add	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006092:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006094:	837b      	strh	r3, [r7, #26]
 8006096:	e029      	b.n	80060ec <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006098:	2201      	movs	r2, #1
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	4013      	ands	r3, r2
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d023      	beq.n	80060ec <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060b2:	4619      	mov	r1, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ba:	1acb      	subs	r3, r1, r3
 80060bc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80060be:	4608      	mov	r0, r1
 80060c0:	68f9      	ldr	r1, [r7, #12]
 80060c2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80060c6:	1a41      	subs	r1, r0, r1
 80060c8:	fb03 f101 	mul.w	r1, r3, r1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060d2:	4618      	mov	r0, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060da:	1ac3      	subs	r3, r0, r3
 80060dc:	fb91 f3f3 	sdiv	r3, r1, r3
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80060e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80060ea:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80060ec:	7dfa      	ldrb	r2, [r7, #23]
 80060ee:	7ffb      	ldrb	r3, [r7, #31]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d113      	bne.n	800611c <clip_line+0x202>
                *x0 = x;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8b7a      	ldrh	r2, [r7, #26]
 80060f8:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	8b3a      	ldrh	r2, [r7, #24]
 80060fe:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f9b3 1000 	ldrsh.w	r1, [r3]
 800610c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006110:	cb0c      	ldmia	r3, {r2, r3}
 8006112:	f7ff fec8 	bl	8005ea6 <code>
 8006116:	4603      	mov	r3, r0
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e721      	b.n	8005f60 <clip_line+0x46>
            } else {
                *x1 = x;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8b7a      	ldrh	r2, [r7, #26]
 8006120:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	8b3a      	ldrh	r2, [r7, #24]
 8006126:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006134:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006138:	cb0c      	ldmia	r3, {r2, r3}
 800613a:	f7ff feb4 	bl	8005ea6 <code>
 800613e:	4603      	mov	r3, r0
 8006140:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006142:	e70d      	b.n	8005f60 <clip_line+0x46>
            break;
 8006144:	bf00      	nop
            }
        }
    }

    return accept;
 8006146:	7f7b      	ldrb	r3, [r7, #29]
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	3306      	adds	r3, #6
 8006160:	2208      	movs	r2, #8
 8006162:	4619      	mov	r1, r3
 8006164:	f001 fcf7 	bl	8007b56 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	330e      	adds	r3, #14
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	330f      	adds	r3, #15
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	3310      	adds	r3, #16
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	72da      	strb	r2, [r3, #11]

    return 0;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006190:	b580      	push	{r7, lr}
 8006192:	b08e      	sub	sp, #56	@ 0x38
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800619c:	f107 0314 	add.w	r3, r7, #20
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff ffd4 	bl	8006150 <fontx_meta>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 80061ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <fontx_glyph+0x2c>
        return status;
 80061b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	e077      	b.n	80062ac <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80061bc:	7f7a      	ldrb	r2, [r7, #29]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80061c2:	7fba      	ldrb	r2, [r7, #30]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80061c8:	7f7b      	ldrb	r3, [r7, #29]
 80061ca:	3307      	adds	r3, #7
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	da00      	bge.n	80061d2 <fontx_glyph+0x42>
 80061d0:	3307      	adds	r3, #7
 80061d2:	10db      	asrs	r3, r3, #3
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	78da      	ldrb	r2, [r3, #3]
 80061de:	7fbb      	ldrb	r3, [r7, #30]
 80061e0:	fb12 f303 	smulbb	r3, r2, r3
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80061ea:	7ffb      	ldrb	r3, [r7, #31]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10f      	bne.n	8006210 <fontx_glyph+0x80>
        if (code < 0x100) {
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2bff      	cmp	r3, #255	@ 0xff
 80061f4:	d859      	bhi.n	80062aa <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	789b      	ldrb	r3, [r3, #2]
 80061fa:	461a      	mov	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	3311      	adds	r3, #17
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	441a      	add	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e04d      	b.n	80062ac <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	3312      	adds	r3, #18
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3311      	adds	r3, #17
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006222:	e03d      	b.n	80062a0 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622c:	3301      	adds	r3, #1
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	4413      	add	r3, r2
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	3302      	adds	r3, #2
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006240:	3303      	adds	r3, #3
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	4413      	add	r3, r2
 8006248:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	429a      	cmp	r2, r3
 8006250:	d31c      	bcc.n	800628c <fontx_glyph+0xfc>
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	429a      	cmp	r2, r3
 8006258:	d818      	bhi.n	800628c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006262:	4413      	add	r3, r2
 8006264:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3311      	adds	r3, #17
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	461a      	mov	r2, r3
                    nc * glyph->size
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	789b      	ldrb	r3, [r3, #2]
 8006274:	4619      	mov	r1, r3
 8006276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006278:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800627c:	4413      	add	r3, r2
 800627e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	441a      	add	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	e00f      	b.n	80062ac <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800628c:	6a3a      	ldr	r2, [r7, #32]
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	1ad2      	subs	r2, r2, r3
 8006292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006294:	4413      	add	r3, r2
 8006296:	3301      	adds	r3, #1
 8006298:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	3304      	adds	r3, #4
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	1e5a      	subs	r2, r3, #1
 80062a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1bc      	bne.n	8006224 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80062aa:	2301      	movs	r3, #1
 80062ac:	4618      	mov	r0, r3
 80062ae:	3738      	adds	r7, #56	@ 0x38
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	dd01      	ble.n	80062ca <min+0x16>
        return b;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	e000      	b.n	80062cc <min+0x18>
    };
    return a;
 80062ca:	687b      	ldr	r3, [r7, #4]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <max>:

static inline int max(int a, int b) {
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	dd01      	ble.n	80062ee <max+0x16>
        return a;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	e000      	b.n	80062f0 <max+0x18>
    }
    return b;
 80062ee:	683b      	ldr	r3, [r7, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	80fb      	strh	r3, [r7, #6]
 8006306:	460b      	mov	r3, r1
 8006308:	80bb      	strh	r3, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800630e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006312:	4a12      	ldr	r2, [pc, #72]	@ (800635c <hagl_put_pixel+0x60>)
 8006314:	8812      	ldrh	r2, [r2, #0]
 8006316:	4293      	cmp	r3, r2
 8006318:	db1a      	blt.n	8006350 <hagl_put_pixel+0x54>
 800631a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800631e:	4a0f      	ldr	r2, [pc, #60]	@ (800635c <hagl_put_pixel+0x60>)
 8006320:	8852      	ldrh	r2, [r2, #2]
 8006322:	4293      	cmp	r3, r2
 8006324:	db14      	blt.n	8006350 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800632a:	4a0c      	ldr	r2, [pc, #48]	@ (800635c <hagl_put_pixel+0x60>)
 800632c:	8892      	ldrh	r2, [r2, #4]
 800632e:	4293      	cmp	r3, r2
 8006330:	dc10      	bgt.n	8006354 <hagl_put_pixel+0x58>
 8006332:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006336:	4a09      	ldr	r2, [pc, #36]	@ (800635c <hagl_put_pixel+0x60>)
 8006338:	88d2      	ldrh	r2, [r2, #6]
 800633a:	4293      	cmp	r3, r2
 800633c:	dc0a      	bgt.n	8006354 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800633e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006342:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	4618      	mov	r0, r3
 800634a:	f7fb faa5 	bl	8001898 <lcd_put_pixel>
 800634e:	e002      	b.n	8006356 <hagl_put_pixel+0x5a>
        return;
 8006350:	bf00      	nop
 8006352:	e000      	b.n	8006356 <hagl_put_pixel+0x5a>
        return;
 8006354:	bf00      	nop
}
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	2000020c 	.word	0x2000020c

08006360 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b085      	sub	sp, #20
 8006364:	af02      	add	r7, sp, #8
 8006366:	4604      	mov	r4, r0
 8006368:	4608      	mov	r0, r1
 800636a:	4611      	mov	r1, r2
 800636c:	461a      	mov	r2, r3
 800636e:	4623      	mov	r3, r4
 8006370:	80fb      	strh	r3, [r7, #6]
 8006372:	4603      	mov	r3, r0
 8006374:	80bb      	strh	r3, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	807b      	strh	r3, [r7, #2]
 800637a:	4613      	mov	r3, r2
 800637c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800637e:	88fa      	ldrh	r2, [r7, #6]
 8006380:	887b      	ldrh	r3, [r7, #2]
 8006382:	4413      	add	r3, r2
 8006384:	b29b      	uxth	r3, r3
 8006386:	b21a      	sxth	r2, r3
 8006388:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800638c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006390:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006394:	883b      	ldrh	r3, [r7, #0]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4623      	mov	r3, r4
 800639a:	f000 f827 	bl	80063ec <hagl_draw_line>
#endif
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd90      	pop	{r4, r7, pc}

080063a6 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 80063a6:	b590      	push	{r4, r7, lr}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af02      	add	r7, sp, #8
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	461a      	mov	r2, r3
 80063b4:	4623      	mov	r3, r4
 80063b6:	80fb      	strh	r3, [r7, #6]
 80063b8:	4603      	mov	r3, r0
 80063ba:	80bb      	strh	r3, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
 80063c0:	4613      	mov	r3, r2
 80063c2:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80063c4:	88ba      	ldrh	r2, [r7, #4]
 80063c6:	887b      	ldrh	r3, [r7, #2]
 80063c8:	4413      	add	r3, r2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	b21c      	sxth	r4, r3
 80063ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80063d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80063da:	883b      	ldrh	r3, [r7, #0]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	4623      	mov	r3, r4
 80063e0:	f000 f804 	bl	80063ec <hagl_draw_line>
#endif
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd90      	pop	{r4, r7, pc}

080063ec <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80063ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ee:	b089      	sub	sp, #36	@ 0x24
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	4604      	mov	r4, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	4623      	mov	r3, r4
 80063fc:	80fb      	strh	r3, [r7, #6]
 80063fe:	4603      	mov	r3, r0
 8006400:	80bb      	strh	r3, [r7, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	807b      	strh	r3, [r7, #2]
 8006406:	4613      	mov	r3, r2
 8006408:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800640a:	463b      	mov	r3, r7
 800640c:	1cba      	adds	r2, r7, #2
 800640e:	1d3d      	adds	r5, r7, #4
 8006410:	1dbc      	adds	r4, r7, #6
 8006412:	494a      	ldr	r1, [pc, #296]	@ (800653c <hagl_draw_line+0x150>)
 8006414:	466e      	mov	r6, sp
 8006416:	c903      	ldmia	r1, {r0, r1}
 8006418:	e886 0003 	stmia.w	r6, {r0, r1}
 800641c:	4629      	mov	r1, r5
 800641e:	4620      	mov	r0, r4
 8006420:	f7ff fd7b 	bl	8005f1a <clip_line>
 8006424:	4603      	mov	r3, r0
 8006426:	f083 0301 	eor.w	r3, r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d17e      	bne.n	800652e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006430:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006434:	461a      	mov	r2, r3
 8006436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	bfb8      	it	lt
 8006440:	425b      	neglt	r3, r3
 8006442:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006444:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800644c:	429a      	cmp	r2, r3
 800644e:	da01      	bge.n	8006454 <hagl_draw_line+0x68>
 8006450:	2301      	movs	r3, #1
 8006452:	e001      	b.n	8006458 <hagl_draw_line+0x6c>
 8006454:	f04f 33ff 	mov.w	r3, #4294967295
 8006458:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800645a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800645e:	461a      	mov	r2, r3
 8006460:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	bfb8      	it	lt
 800646a:	425b      	neglt	r3, r3
 800646c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800646e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006472:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006476:	429a      	cmp	r2, r3
 8006478:	da01      	bge.n	800647e <hagl_draw_line+0x92>
 800647a:	2301      	movs	r3, #1
 800647c:	e001      	b.n	8006482 <hagl_draw_line+0x96>
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006484:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006488:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800648c:	429a      	cmp	r2, r3
 800648e:	dd06      	ble.n	800649e <hagl_draw_line+0xb2>
 8006490:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006494:	0fda      	lsrs	r2, r3, #31
 8006496:	4413      	add	r3, r2
 8006498:	105b      	asrs	r3, r3, #1
 800649a:	b21b      	sxth	r3, r3
 800649c:	e006      	b.n	80064ac <hagl_draw_line+0xc0>
 800649e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80064a2:	0fda      	lsrs	r2, r3, #31
 80064a4:	4413      	add	r3, r2
 80064a6:	105b      	asrs	r3, r3, #1
 80064a8:	425b      	negs	r3, r3
 80064aa:	b21b      	sxth	r3, r3
 80064ac:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80064ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80064b6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff ff1f 	bl	80062fc <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80064be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d105      	bne.n	80064d6 <hagl_draw_line+0xea>
 80064ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80064ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d02d      	beq.n	8006532 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80064d6:	8afb      	ldrh	r3, [r7, #22]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	b29b      	uxth	r3, r3
 80064dc:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80064de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80064e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80064e6:	425b      	negs	r3, r3
 80064e8:	429a      	cmp	r2, r3
 80064ea:	dd0c      	ble.n	8006506 <hagl_draw_line+0x11a>
            err -= dy;
 80064ec:	8afa      	ldrh	r2, [r7, #22]
 80064ee:	8a3b      	ldrh	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80064f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	8a7b      	ldrh	r3, [r7, #18]
 80064fe:	4413      	add	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	b21b      	sxth	r3, r3
 8006504:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006506:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800650a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800650e:	429a      	cmp	r2, r3
 8006510:	dacd      	bge.n	80064ae <hagl_draw_line+0xc2>
            err += dx;
 8006512:	8afa      	ldrh	r2, [r7, #22]
 8006514:	8abb      	ldrh	r3, [r7, #20]
 8006516:	4413      	add	r3, r2
 8006518:	b29b      	uxth	r3, r3
 800651a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800651c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006520:	b29a      	uxth	r2, r3
 8006522:	89fb      	ldrh	r3, [r7, #14]
 8006524:	4413      	add	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	b21b      	sxth	r3, r3
 800652a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800652c:	e7bf      	b.n	80064ae <hagl_draw_line+0xc2>
        return;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <hagl_draw_line+0x148>
            break;
 8006532:	bf00      	nop
        }
    }
}
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800653a:	bf00      	nop
 800653c:	2000020c 	.word	0x2000020c

08006540 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	4604      	mov	r4, r0
 8006548:	4608      	mov	r0, r1
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	4623      	mov	r3, r4
 8006550:	80fb      	strh	r3, [r7, #6]
 8006552:	4603      	mov	r3, r0
 8006554:	80bb      	strh	r3, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	807b      	strh	r3, [r7, #2]
 800655a:	4613      	mov	r3, r2
 800655c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800655e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006562:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006566:	429a      	cmp	r2, r3
 8006568:	dd0e      	ble.n	8006588 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	4413      	add	r3, r2
 8006570:	b29b      	uxth	r3, r3
 8006572:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	887b      	ldrh	r3, [r7, #2]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	b29b      	uxth	r3, r3
 800657c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	887b      	ldrh	r3, [r7, #2]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	b29b      	uxth	r3, r3
 8006586:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006588:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800658c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006590:	429a      	cmp	r2, r3
 8006592:	dd0e      	ble.n	80065b2 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8006594:	88ba      	ldrh	r2, [r7, #4]
 8006596:	883b      	ldrh	r3, [r7, #0]
 8006598:	4413      	add	r3, r2
 800659a:	b29b      	uxth	r3, r3
 800659c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800659e:	88ba      	ldrh	r2, [r7, #4]
 80065a0:	883b      	ldrh	r3, [r7, #0]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80065a8:	88ba      	ldrh	r2, [r7, #4]
 80065aa:	883b      	ldrh	r3, [r7, #0]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80065b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065b6:	4a24      	ldr	r2, [pc, #144]	@ (8006648 <hagl_draw_rectangle+0x108>)
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	4293      	cmp	r3, r2
 80065bc:	db3e      	blt.n	800663c <hagl_draw_rectangle+0xfc>
 80065be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80065c2:	4a21      	ldr	r2, [pc, #132]	@ (8006648 <hagl_draw_rectangle+0x108>)
 80065c4:	8852      	ldrh	r2, [r2, #2]
 80065c6:	4293      	cmp	r3, r2
 80065c8:	db38      	blt.n	800663c <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80065ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006648 <hagl_draw_rectangle+0x108>)
 80065d0:	8892      	ldrh	r2, [r2, #4]
 80065d2:	4293      	cmp	r3, r2
 80065d4:	dc34      	bgt.n	8006640 <hagl_draw_rectangle+0x100>
 80065d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065da:	4a1b      	ldr	r2, [pc, #108]	@ (8006648 <hagl_draw_rectangle+0x108>)
 80065dc:	88d2      	ldrh	r2, [r2, #6]
 80065de:	4293      	cmp	r3, r2
 80065e0:	dc2e      	bgt.n	8006640 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80065e2:	887a      	ldrh	r2, [r7, #2]
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3301      	adds	r3, #1
 80065ec:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80065ee:	883a      	ldrh	r2, [r7, #0]
 80065f0:	88bb      	ldrh	r3, [r7, #4]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3301      	adds	r3, #1
 80065f8:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80065fa:	8c3b      	ldrh	r3, [r7, #32]
 80065fc:	89fa      	ldrh	r2, [r7, #14]
 80065fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006602:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006606:	f7ff feab 	bl	8006360 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800660a:	8c3b      	ldrh	r3, [r7, #32]
 800660c:	89fa      	ldrh	r2, [r7, #14]
 800660e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8006612:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006616:	f7ff fea3 	bl	8006360 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800661a:	8c3b      	ldrh	r3, [r7, #32]
 800661c:	89ba      	ldrh	r2, [r7, #12]
 800661e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006622:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006626:	f7ff febe 	bl	80063a6 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800662a:	8c3b      	ldrh	r3, [r7, #32]
 800662c:	89ba      	ldrh	r2, [r7, #12]
 800662e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006632:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006636:	f7ff feb6 	bl	80063a6 <hagl_draw_vline>
 800663a:	e002      	b.n	8006642 <hagl_draw_rectangle+0x102>
        return;
 800663c:	bf00      	nop
 800663e:	e000      	b.n	8006642 <hagl_draw_rectangle+0x102>
        return;
 8006640:	bf00      	nop
}
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	bd90      	pop	{r4, r7, pc}
 8006648:	2000020c 	.word	0x2000020c

0800664c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	461a      	mov	r2, r3
 800665a:	4623      	mov	r3, r4
 800665c:	80fb      	strh	r3, [r7, #6]
 800665e:	4603      	mov	r3, r0
 8006660:	80bb      	strh	r3, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	807b      	strh	r3, [r7, #2]
 8006666:	4613      	mov	r3, r2
 8006668:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800666a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800666e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006672:	429a      	cmp	r2, r3
 8006674:	dd0e      	ble.n	8006694 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	887b      	ldrh	r3, [r7, #2]
 800667a:	4413      	add	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006680:	88fa      	ldrh	r2, [r7, #6]
 8006682:	887b      	ldrh	r3, [r7, #2]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	b29b      	uxth	r3, r3
 8006688:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	887b      	ldrh	r3, [r7, #2]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	b29b      	uxth	r3, r3
 8006692:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006694:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006698:	f9b7 3000 	ldrsh.w	r3, [r7]
 800669c:	429a      	cmp	r2, r3
 800669e:	dd0e      	ble.n	80066be <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 80066a0:	88ba      	ldrh	r2, [r7, #4]
 80066a2:	883b      	ldrh	r3, [r7, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80066aa:	88ba      	ldrh	r2, [r7, #4]
 80066ac:	883b      	ldrh	r3, [r7, #0]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80066b4:	88ba      	ldrh	r2, [r7, #4]
 80066b6:	883b      	ldrh	r3, [r7, #0]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80066be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066c2:	4a33      	ldr	r2, [pc, #204]	@ (8006790 <hagl_fill_rectangle+0x144>)
 80066c4:	8812      	ldrh	r2, [r2, #0]
 80066c6:	4293      	cmp	r3, r2
 80066c8:	db5b      	blt.n	8006782 <hagl_fill_rectangle+0x136>
 80066ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80066ce:	4a30      	ldr	r2, [pc, #192]	@ (8006790 <hagl_fill_rectangle+0x144>)
 80066d0:	8852      	ldrh	r2, [r2, #2]
 80066d2:	4293      	cmp	r3, r2
 80066d4:	db55      	blt.n	8006782 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80066d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066da:	4a2d      	ldr	r2, [pc, #180]	@ (8006790 <hagl_fill_rectangle+0x144>)
 80066dc:	8892      	ldrh	r2, [r2, #4]
 80066de:	4293      	cmp	r3, r2
 80066e0:	dc51      	bgt.n	8006786 <hagl_fill_rectangle+0x13a>
 80066e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80066e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006790 <hagl_fill_rectangle+0x144>)
 80066e8:	88d2      	ldrh	r2, [r2, #6]
 80066ea:	4293      	cmp	r3, r2
 80066ec:	dc4b      	bgt.n	8006786 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80066ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066f2:	4a27      	ldr	r2, [pc, #156]	@ (8006790 <hagl_fill_rectangle+0x144>)
 80066f4:	8812      	ldrh	r2, [r2, #0]
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fded 	bl	80062d8 <max>
 80066fe:	4603      	mov	r3, r0
 8006700:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8006702:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006706:	4a22      	ldr	r2, [pc, #136]	@ (8006790 <hagl_fill_rectangle+0x144>)
 8006708:	8852      	ldrh	r2, [r2, #2]
 800670a:	4611      	mov	r1, r2
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fde3 	bl	80062d8 <max>
 8006712:	4603      	mov	r3, r0
 8006714:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8006716:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800671a:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <hagl_fill_rectangle+0x144>)
 800671c:	8892      	ldrh	r2, [r2, #4]
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fdc7 	bl	80062b4 <min>
 8006726:	4603      	mov	r3, r0
 8006728:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800672a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800672e:	4a18      	ldr	r2, [pc, #96]	@ (8006790 <hagl_fill_rectangle+0x144>)
 8006730:	88d2      	ldrh	r2, [r2, #6]
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fdbd 	bl	80062b4 <min>
 800673a:	4603      	mov	r3, r0
 800673c:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800673e:	887a      	ldrh	r2, [r7, #2]
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	b29b      	uxth	r3, r3
 8006746:	3301      	adds	r3, #1
 8006748:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800674a:	883a      	ldrh	r2, [r7, #0]
 800674c:	88bb      	ldrh	r3, [r7, #4]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	b29b      	uxth	r3, r3
 8006752:	3301      	adds	r3, #1
 8006754:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8006756:	2300      	movs	r3, #0
 8006758:	81fb      	strh	r3, [r7, #14]
 800675a:	e00d      	b.n	8006778 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800675c:	88ba      	ldrh	r2, [r7, #4]
 800675e:	89fb      	ldrh	r3, [r7, #14]
 8006760:	4413      	add	r3, r2
 8006762:	b29b      	uxth	r3, r3
 8006764:	b219      	sxth	r1, r3
 8006766:	8c3b      	ldrh	r3, [r7, #32]
 8006768:	89ba      	ldrh	r2, [r7, #12]
 800676a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800676e:	f7ff fdf7 	bl	8006360 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8006772:	89fb      	ldrh	r3, [r7, #14]
 8006774:	3301      	adds	r3, #1
 8006776:	81fb      	strh	r3, [r7, #14]
 8006778:	89fa      	ldrh	r2, [r7, #14]
 800677a:	897b      	ldrh	r3, [r7, #10]
 800677c:	429a      	cmp	r2, r3
 800677e:	d3ed      	bcc.n	800675c <hagl_fill_rectangle+0x110>
 8006780:	e002      	b.n	8006788 <hagl_fill_rectangle+0x13c>
        return;
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <hagl_fill_rectangle+0x13c>
        return;
 8006786:	bf00      	nop
#endif
    }
}
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}
 800678e:	bf00      	nop
 8006790:	2000020c 	.word	0x2000020c

08006794 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006794:	b590      	push	{r4, r7, lr}
 8006796:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80067a2:	f844 0c24 	str.w	r0, [r4, #-36]
 80067a6:	460c      	mov	r4, r1
 80067a8:	4610      	mov	r0, r2
 80067aa:	4619      	mov	r1, r3
 80067ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067b0:	4622      	mov	r2, r4
 80067b2:	f823 2c26 	strh.w	r2, [r3, #-38]
 80067b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067ba:	4602      	mov	r2, r0
 80067bc:	f823 2c28 	strh.w	r2, [r3, #-40]
 80067c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067c4:	460a      	mov	r2, r1
 80067c6:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80067ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067ce:	4619      	mov	r1, r3
 80067d0:	f107 0310 	add.w	r3, r7, #16
 80067d4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fcd6 	bl	8006190 <fontx_glyph>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80067ea:	f102 0209 	add.w	r2, r2, #9
 80067ee:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80067f0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80067f4:	f103 0309 	add.w	r3, r3, #9
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <hagl_put_char+0x6e>
        return 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	e0c0      	b.n	8006984 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8006802:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006806:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800680a:	461a      	mov	r2, r3
 800680c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006810:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8006814:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006818:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800681c:	461a      	mov	r2, r3
 800681e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006822:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8006826:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800682a:	2210      	movs	r2, #16
 800682c:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8006830:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006834:	3a08      	subs	r2, #8
 8006836:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800683a:	3b18      	subs	r3, #24
 800683c:	4611      	mov	r1, r2
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fb0e 	bl	8005e60 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8006844:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006848:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800684c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006850:	f102 020c 	add.w	r2, r2, #12
 8006854:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8006856:	2300      	movs	r3, #0
 8006858:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800685c:	f102 020b 	add.w	r2, r2, #11
 8006860:	7013      	strb	r3, [r2, #0]
 8006862:	e071      	b.n	8006948 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006864:	2300      	movs	r3, #0
 8006866:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800686a:	f102 020a 	add.w	r2, r2, #10
 800686e:	7013      	strb	r3, [r2, #0]
 8006870:	e047      	b.n	8006902 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8006872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006876:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b25a      	sxtb	r2, r3
 800687e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006882:	f103 030a 	add.w	r3, r3, #10
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	2180      	movs	r1, #128	@ 0x80
 800688e:	fa41 f303 	asr.w	r3, r1, r3
 8006892:	b25b      	sxtb	r3, r3
 8006894:	4013      	ands	r3, r2
 8006896:	b25b      	sxtb	r3, r3
 8006898:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800689c:	f102 0208 	add.w	r2, r2, #8
 80068a0:	7013      	strb	r3, [r2, #0]
            if (set) {
 80068a2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80068a6:	f103 0308 	add.w	r3, r3, #8
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <hagl_put_char+0x13e>
                *(ptr++) = color;
 80068b0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80068b4:	f103 030c 	add.w	r3, r3, #12
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	1c9a      	adds	r2, r3, #2
 80068bc:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80068c0:	f101 010c 	add.w	r1, r1, #12
 80068c4:	600a      	str	r2, [r1, #0]
 80068c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80068ca:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	e00c      	b.n	80068ec <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80068d2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80068d6:	f103 030c 	add.w	r3, r3, #12
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	1c9a      	adds	r2, r3, #2
 80068de:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80068e2:	f101 010c 	add.w	r1, r1, #12
 80068e6:	600a      	str	r2, [r1, #0]
 80068e8:	2200      	movs	r2, #0
 80068ea:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80068ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80068f0:	f103 030a 	add.w	r3, r3, #10
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	3301      	adds	r3, #1
 80068f8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80068fc:	f102 020a 	add.w	r2, r2, #10
 8006900:	7013      	strb	r3, [r2, #0]
 8006902:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006906:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800690a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800690e:	f102 020a 	add.w	r2, r2, #10
 8006912:	7812      	ldrb	r2, [r2, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d3ac      	bcc.n	8006872 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8006918:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800691c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006920:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006924:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8006928:	4413      	add	r3, r2
 800692a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800692e:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8006932:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006936:	f103 030b 	add.w	r3, r3, #11
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	3301      	adds	r3, #1
 800693e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006942:	f102 020b 	add.w	r2, r2, #11
 8006946:	7013      	strb	r3, [r2, #0]
 8006948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800694c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006950:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006954:	f102 020b 	add.w	r2, r2, #11
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d382      	bcc.n	8006864 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800695e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006962:	3b18      	subs	r3, #24
 8006964:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006968:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800696c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006970:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006974:	461a      	mov	r2, r3
 8006976:	f000 f85a 	bl	8006a2e <hagl_blit>

    return bitmap.width;
 800697a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800697e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006982:	b2db      	uxtb	r3, r3
}
 8006984:	4618      	mov	r0, r3
 8006986:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	bd90      	pop	{r4, r7, pc}

08006990 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	@ 0x30
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	461a      	mov	r2, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	817b      	strh	r3, [r7, #10]
 80069a2:	460b      	mov	r3, r1
 80069a4:	813b      	strh	r3, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80069aa:	897b      	ldrh	r3, [r7, #10]
 80069ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80069ae:	f107 0314 	add.w	r3, r7, #20
 80069b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fbcb 	bl	8006150 <fontx_meta>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80069c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <hagl_put_text+0x3c>
        return 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e02c      	b.n	8006a26 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1d1a      	adds	r2, r3, #4
 80069d0:	60fa      	str	r2, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	2b0d      	cmp	r3, #13
 80069da:	d002      	beq.n	80069e2 <hagl_put_text+0x52>
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	2b0a      	cmp	r3, #10
 80069e0:	d108      	bne.n	80069f4 <hagl_put_text+0x64>
            x0 = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80069e6:	7fbb      	ldrb	r3, [r7, #30]
 80069e8:	461a      	mov	r2, r3
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	4413      	add	r3, r2
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	813b      	strh	r3, [r7, #8]
 80069f2:	e010      	b.n	8006a16 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80069f4:	88f8      	ldrh	r0, [r7, #6]
 80069f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80069fa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	4603      	mov	r3, r0
 8006a04:	6a38      	ldr	r0, [r7, #32]
 8006a06:	f7ff fec5 	bl	8006794 <hagl_put_char>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	897b      	ldrh	r3, [r7, #10]
 8006a10:	4413      	add	r3, r2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1d6      	bne.n	80069cc <hagl_put_text+0x3c>

    return x0 - original;
 8006a1e:	897a      	ldrh	r2, [r7, #10]
 8006a20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	b29b      	uxth	r3, r3
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3728      	adds	r7, #40	@ 0x28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b086      	sub	sp, #24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	4603      	mov	r3, r0
 8006a36:	603a      	str	r2, [r7, #0]
 8006a38:	80fb      	strh	r3, [r7, #6]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8006a44:	2300      	movs	r3, #0
 8006a46:	827b      	strh	r3, [r7, #18]
 8006a48:	e020      	b.n	8006a8c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	823b      	strh	r3, [r7, #16]
 8006a4e:	e015      	b.n	8006a7c <hagl_blit+0x4e>
            color = *(ptr++);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	617a      	str	r2, [r7, #20]
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	8a3b      	ldrh	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	b218      	sxth	r0, r3
 8006a64:	88ba      	ldrh	r2, [r7, #4]
 8006a66:	8a7b      	ldrh	r3, [r7, #18]
 8006a68:	4413      	add	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	b21b      	sxth	r3, r3
 8006a6e:	89fa      	ldrh	r2, [r7, #14]
 8006a70:	4619      	mov	r1, r3
 8006a72:	f7ff fc43 	bl	80062fc <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006a76:	8a3b      	ldrh	r3, [r7, #16]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	823b      	strh	r3, [r7, #16]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	8a3a      	ldrh	r2, [r7, #16]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d3e4      	bcc.n	8006a50 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006a86:	8a7b      	ldrh	r3, [r7, #18]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	827b      	strh	r3, [r7, #18]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	885b      	ldrh	r3, [r3, #2]
 8006a90:	8a7a      	ldrh	r2, [r7, #18]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d3d9      	bcc.n	8006a4a <hagl_blit+0x1c>
        }
    }
#endif
};
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <hagl_draw_circle>:
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
        0x00
    );
}

void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	4611      	mov	r1, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4623      	mov	r3, r4
 8006ab0:	80fb      	strh	r3, [r7, #6]
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	80bb      	strh	r3, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	807b      	strh	r3, [r7, #2]
 8006aba:	4613      	mov	r3, r2
 8006abc:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006ac2:	887b      	ldrh	r3, [r7, #2]
 8006ac4:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f1c3 0303 	rsb	r3, r3, #3
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	89fb      	ldrh	r3, [r7, #14]
 8006ad8:	4413      	add	r3, r2
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	b218      	sxth	r0, r3
 8006ade:	88ba      	ldrh	r2, [r7, #4]
 8006ae0:	89bb      	ldrh	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b21b      	sxth	r3, r3
 8006ae8:	883a      	ldrh	r2, [r7, #0]
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7ff fc06 	bl	80062fc <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8006af0:	88fa      	ldrh	r2, [r7, #6]
 8006af2:	89fb      	ldrh	r3, [r7, #14]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	b218      	sxth	r0, r3
 8006afa:	88ba      	ldrh	r2, [r7, #4]
 8006afc:	89bb      	ldrh	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	b21b      	sxth	r3, r3
 8006b04:	883a      	ldrh	r2, [r7, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	f7ff fbf8 	bl	80062fc <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	89fb      	ldrh	r3, [r7, #14]
 8006b10:	4413      	add	r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b218      	sxth	r0, r3
 8006b16:	88ba      	ldrh	r2, [r7, #4]
 8006b18:	89bb      	ldrh	r3, [r7, #12]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b21b      	sxth	r3, r3
 8006b20:	883a      	ldrh	r2, [r7, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	f7ff fbea 	bl	80062fc <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	89fb      	ldrh	r3, [r7, #14]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b218      	sxth	r0, r3
 8006b32:	88ba      	ldrh	r2, [r7, #4]
 8006b34:	89bb      	ldrh	r3, [r7, #12]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	b21b      	sxth	r3, r3
 8006b3c:	883a      	ldrh	r2, [r7, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7ff fbdc 	bl	80062fc <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8006b44:	88fa      	ldrh	r2, [r7, #6]
 8006b46:	89bb      	ldrh	r3, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	b218      	sxth	r0, r3
 8006b4e:	88ba      	ldrh	r2, [r7, #4]
 8006b50:	89fb      	ldrh	r3, [r7, #14]
 8006b52:	4413      	add	r3, r2
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	b21b      	sxth	r3, r3
 8006b58:	883a      	ldrh	r2, [r7, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f7ff fbce 	bl	80062fc <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	89bb      	ldrh	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	b218      	sxth	r0, r3
 8006b6a:	88ba      	ldrh	r2, [r7, #4]
 8006b6c:	89fb      	ldrh	r3, [r7, #14]
 8006b6e:	4413      	add	r3, r2
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	b21b      	sxth	r3, r3
 8006b74:	883a      	ldrh	r2, [r7, #0]
 8006b76:	4619      	mov	r1, r3
 8006b78:	f7ff fbc0 	bl	80062fc <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8006b7c:	88fa      	ldrh	r2, [r7, #6]
 8006b7e:	89bb      	ldrh	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b218      	sxth	r0, r3
 8006b86:	88ba      	ldrh	r2, [r7, #4]
 8006b88:	89fb      	ldrh	r3, [r7, #14]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	883a      	ldrh	r2, [r7, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	f7ff fbb2 	bl	80062fc <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8006b98:	88fa      	ldrh	r2, [r7, #6]
 8006b9a:	89bb      	ldrh	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	b218      	sxth	r0, r3
 8006ba2:	88ba      	ldrh	r2, [r7, #4]
 8006ba4:	89fb      	ldrh	r3, [r7, #14]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	b21b      	sxth	r3, r3
 8006bac:	883a      	ldrh	r2, [r7, #0]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	f7ff fba4 	bl	80062fc <hagl_put_pixel>

    while (y >= x) {
 8006bb4:	e097      	b.n	8006ce6 <hagl_draw_circle+0x246>
        x++;
 8006bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006bc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	dd14      	ble.n	8006bf4 <hagl_draw_circle+0x154>
            y--;
 8006bca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006bd6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006bda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	897b      	ldrh	r3, [r7, #10]
 8006be8:	4413      	add	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	330a      	adds	r3, #10
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	817b      	strh	r3, [r7, #10]
 8006bf2:	e008      	b.n	8006c06 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3306      	adds	r3, #6
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	89fb      	ldrh	r3, [r7, #14]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b218      	sxth	r0, r3
 8006c10:	88ba      	ldrh	r2, [r7, #4]
 8006c12:	89bb      	ldrh	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	883a      	ldrh	r2, [r7, #0]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f7ff fb6d 	bl	80062fc <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8006c22:	88fa      	ldrh	r2, [r7, #6]
 8006c24:	89fb      	ldrh	r3, [r7, #14]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	b218      	sxth	r0, r3
 8006c2c:	88ba      	ldrh	r2, [r7, #4]
 8006c2e:	89bb      	ldrh	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	b21b      	sxth	r3, r3
 8006c36:	883a      	ldrh	r2, [r7, #0]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f7ff fb5f 	bl	80062fc <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8006c3e:	88fa      	ldrh	r2, [r7, #6]
 8006c40:	89fb      	ldrh	r3, [r7, #14]
 8006c42:	4413      	add	r3, r2
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	b218      	sxth	r0, r3
 8006c48:	88ba      	ldrh	r2, [r7, #4]
 8006c4a:	89bb      	ldrh	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	b21b      	sxth	r3, r3
 8006c52:	883a      	ldrh	r2, [r7, #0]
 8006c54:	4619      	mov	r1, r3
 8006c56:	f7ff fb51 	bl	80062fc <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	89fb      	ldrh	r3, [r7, #14]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	b218      	sxth	r0, r3
 8006c64:	88ba      	ldrh	r2, [r7, #4]
 8006c66:	89bb      	ldrh	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	b21b      	sxth	r3, r3
 8006c6e:	883a      	ldrh	r2, [r7, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f7ff fb43 	bl	80062fc <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	89bb      	ldrh	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	b218      	sxth	r0, r3
 8006c80:	88ba      	ldrh	r2, [r7, #4]
 8006c82:	89fb      	ldrh	r3, [r7, #14]
 8006c84:	4413      	add	r3, r2
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	b21b      	sxth	r3, r3
 8006c8a:	883a      	ldrh	r2, [r7, #0]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	f7ff fb35 	bl	80062fc <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	89bb      	ldrh	r3, [r7, #12]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	b218      	sxth	r0, r3
 8006c9c:	88ba      	ldrh	r2, [r7, #4]
 8006c9e:	89fb      	ldrh	r3, [r7, #14]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	b21b      	sxth	r3, r3
 8006ca6:	883a      	ldrh	r2, [r7, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f7ff fb27 	bl	80062fc <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	89bb      	ldrh	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	b218      	sxth	r0, r3
 8006cb8:	88ba      	ldrh	r2, [r7, #4]
 8006cba:	89fb      	ldrh	r3, [r7, #14]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	b21b      	sxth	r3, r3
 8006cc2:	883a      	ldrh	r2, [r7, #0]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f7ff fb19 	bl	80062fc <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	89bb      	ldrh	r3, [r7, #12]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	b218      	sxth	r0, r3
 8006cd4:	88ba      	ldrh	r2, [r7, #4]
 8006cd6:	89fb      	ldrh	r3, [r7, #14]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	b21b      	sxth	r3, r3
 8006cde:	883a      	ldrh	r2, [r7, #0]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f7ff fb0b 	bl	80062fc <hagl_put_pixel>
    while (y >= x) {
 8006ce6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	f6bf af61 	bge.w	8006bb6 <hagl_draw_circle+0x116>
    }
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd90      	pop	{r4, r7, pc}

08006cfe <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8006cfe:	b590      	push	{r4, r7, lr}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	4604      	mov	r4, r0
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	80fb      	strh	r3, [r7, #6]
 8006d10:	4603      	mov	r3, r0
 8006d12:	80bb      	strh	r3, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	807b      	strh	r3, [r7, #2]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006d20:	887b      	ldrh	r3, [r7, #2]
 8006d22:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006d24:	887b      	ldrh	r3, [r7, #2]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f1c3 0303 	rsb	r3, r3, #3
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8006d32:	e067      	b.n	8006e04 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8006d34:	88fa      	ldrh	r2, [r7, #6]
 8006d36:	89fb      	ldrh	r3, [r7, #14]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b218      	sxth	r0, r3
 8006d3e:	88ba      	ldrh	r2, [r7, #4]
 8006d40:	89bb      	ldrh	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b219      	sxth	r1, r3
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	883b      	ldrh	r3, [r7, #0]
 8006d50:	f7ff fb06 	bl	8006360 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	89fb      	ldrh	r3, [r7, #14]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	b218      	sxth	r0, r3
 8006d5e:	88ba      	ldrh	r2, [r7, #4]
 8006d60:	89bb      	ldrh	r3, [r7, #12]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	b219      	sxth	r1, r3
 8006d68:	89fb      	ldrh	r3, [r7, #14]
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	883b      	ldrh	r3, [r7, #0]
 8006d70:	f7ff faf6 	bl	8006360 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8006d74:	88fa      	ldrh	r2, [r7, #6]
 8006d76:	89bb      	ldrh	r3, [r7, #12]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	b218      	sxth	r0, r3
 8006d7e:	88ba      	ldrh	r2, [r7, #4]
 8006d80:	89fb      	ldrh	r3, [r7, #14]
 8006d82:	4413      	add	r3, r2
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	b219      	sxth	r1, r3
 8006d88:	89bb      	ldrh	r3, [r7, #12]
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	883b      	ldrh	r3, [r7, #0]
 8006d90:	f7ff fae6 	bl	8006360 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8006d94:	88fa      	ldrh	r2, [r7, #6]
 8006d96:	89bb      	ldrh	r3, [r7, #12]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	b218      	sxth	r0, r3
 8006d9e:	88ba      	ldrh	r2, [r7, #4]
 8006da0:	89fb      	ldrh	r3, [r7, #14]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	b219      	sxth	r1, r3
 8006da8:	89bb      	ldrh	r3, [r7, #12]
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	883b      	ldrh	r3, [r7, #0]
 8006db0:	f7ff fad6 	bl	8006360 <hagl_draw_hline>
        x++;
 8006db4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3301      	adds	r3, #1
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006dc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dd14      	ble.n	8006df2 <hagl_fill_circle+0xf4>
            y--;
 8006dc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006dd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006dd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	897b      	ldrh	r3, [r7, #10]
 8006de6:	4413      	add	r3, r2
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	330a      	adds	r3, #10
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	817b      	strh	r3, [r7, #10]
 8006df0:	e008      	b.n	8006e04 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8006df2:	89fb      	ldrh	r3, [r7, #14]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	897b      	ldrh	r3, [r7, #10]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3306      	adds	r3, #6
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8006e04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	da91      	bge.n	8006d34 <hagl_fill_circle+0x36>
        }
    }
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd90      	pop	{r4, r7, pc}

08006e1a <hagl_draw_polygon>:
        hagl_draw_hline(x0 - wx, y0 + wy, wx * 2, color);
    }
}


void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006e1a:	b590      	push	{r4, r7, lr}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	4603      	mov	r3, r0
 8006e22:	6039      	str	r1, [r7, #0]
 8006e24:	80fb      	strh	r3, [r7, #6]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	81fb      	strh	r3, [r7, #14]
 8006e2e:	e02a      	b.n	8006e86 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8006e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4413      	add	r3, r2
        hagl_draw_line(
 8006e3a:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8006e3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	3302      	adds	r3, #2
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	4413      	add	r3, r2
        hagl_draw_line(
 8006e4a:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8006e4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e52:	3301      	adds	r3, #1
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	4413      	add	r3, r2
        hagl_draw_line(
 8006e5a:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8006e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	3306      	adds	r3, #6
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	4413      	add	r3, r2
        hagl_draw_line(
 8006e6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e6e:	88bb      	ldrh	r3, [r7, #4]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	4613      	mov	r3, r2
 8006e74:	4622      	mov	r2, r4
 8006e76:	f7ff fab9 	bl	80063ec <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8006e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3301      	adds	r3, #1
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	81fb      	strh	r3, [r7, #14]
 8006e86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	429a      	cmp	r2, r3
 8006e92:	dbcd      	blt.n	8006e30 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	3302      	adds	r3, #2
    hagl_draw_line(
 8006e9e:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8006ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ea6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4413      	add	r3, r2
    hagl_draw_line(
 8006eb2:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8006eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	3b02      	subs	r3, #2
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	4413      	add	r3, r2
    hagl_draw_line(
 8006ec2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006ec6:	88bb      	ldrh	r3, [r7, #4]
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	4622      	mov	r2, r4
 8006ece:	f7ff fa8d 	bl	80063ec <hagl_draw_line>
        color
    );
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd90      	pop	{r4, r7, pc}

08006eda <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b0ac      	sub	sp, #176	@ 0xb0
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	6039      	str	r1, [r7, #0]
 8006ee4:	80fb      	strh	r3, [r7, #6]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8006eea:	2380      	movs	r3, #128	@ 0x80
 8006eec:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006efc:	e02e      	b.n	8006f5c <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8006efe:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	3302      	adds	r3, #2
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f0e:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8006f12:	429a      	cmp	r2, r3
 8006f14:	dd08      	ble.n	8006f28 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8006f16:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	4413      	add	r3, r2
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8006f28:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	3302      	adds	r3, #2
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	4413      	add	r3, r2
 8006f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f38:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	da08      	bge.n	8006f52 <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8006f40:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	3302      	adds	r3, #2
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8006f52:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006f56:	3301      	adds	r3, #1
 8006f58:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006f5c:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8006f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	dbca      	blt.n	8006efe <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8006f68:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8006f6c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8006f70:	e144      	b.n	80071fc <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8006f82:	2300      	movs	r3, #0
 8006f84:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8006f88:	e0a6      	b.n	80070d8 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8006f8a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	4413      	add	r3, r2
 8006f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fa0:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8006fa4:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	3302      	adds	r3, #2
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fbc:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8006fc0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fd6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8006fda:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff2:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8006ff6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007002:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800700a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700e:	d50c      	bpl.n	800702a <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007010:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800701c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007028:	da19      	bge.n	800705e <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 800702a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007036:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800703a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007042:	d53e      	bpl.n	80070c2 <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007044:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007050:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705c:	db31      	blt.n	80070c2 <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 800705e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800706a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800706e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007072:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007076:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800707a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007086:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800708a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800708e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007092:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800709a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800709e:	ee17 3a90 	vmov	r3, s15
 80070a2:	b21a      	sxth	r2, r3
 80070a4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80070a8:	b292      	uxth	r2, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	33b0      	adds	r3, #176	@ 0xb0
 80070ae:	443b      	add	r3, r7
 80070b0:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 80070b4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3301      	adds	r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 80070c2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80070c6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 80070ca:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3301      	adds	r3, #1
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 80070d8:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 80070dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	f6ff af52 	blt.w	8006f8a <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 80070ec:	e046      	b.n	800717c <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 80070ee:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	33b0      	adds	r3, #176	@ 0xb0
 80070f6:	443b      	add	r3, r7
 80070f8:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 80070fc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007100:	3301      	adds	r3, #1
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	33b0      	adds	r3, #176	@ 0xb0
 8007106:	443b      	add	r3, r7
 8007108:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800710c:	429a      	cmp	r2, r3
 800710e:	d92e      	bls.n	800716e <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007110:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	33b0      	adds	r3, #176	@ 0xb0
 8007118:	443b      	add	r3, r7
 800711a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800711e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007122:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007126:	3301      	adds	r3, #1
 8007128:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	33b0      	adds	r3, #176	@ 0xb0
 8007130:	443b      	add	r3, r7
 8007132:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007136:	0053      	lsls	r3, r2, #1
 8007138:	33b0      	adds	r3, #176	@ 0xb0
 800713a:	443b      	add	r3, r7
 800713c:	460a      	mov	r2, r1
 800713e:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007142:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007146:	3301      	adds	r3, #1
 8007148:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	33b0      	adds	r3, #176	@ 0xb0
 8007150:	443b      	add	r3, r7
 8007152:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007156:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00e      	beq.n	800717c <hagl_fill_polygon+0x2a2>
                    i--;
 800715e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 800716c:	e006      	b.n	800717c <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 800716e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007172:	b29b      	uxth	r3, r3
 8007174:	3301      	adds	r3, #1
 8007176:	b29b      	uxth	r3, r3
 8007178:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 800717c:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007180:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007184:	3b01      	subs	r3, #1
 8007186:	429a      	cmp	r2, r3
 8007188:	dbb1      	blt.n	80070ee <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 800718a:	2300      	movs	r3, #0
 800718c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007190:	e027      	b.n	80071e2 <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007192:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007196:	3301      	adds	r3, #1
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	33b0      	adds	r3, #176	@ 0xb0
 800719c:	443b      	add	r3, r7
 800719e:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 80071a2:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	33b0      	adds	r3, #176	@ 0xb0
 80071aa:	443b      	add	r3, r7
 80071ac:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 80071b8:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	33b0      	adds	r3, #176	@ 0xb0
 80071c0:	443b      	add	r3, r7
 80071c2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80071c6:	b218      	sxth	r0, r3
 80071c8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 80071cc:	88bb      	ldrh	r3, [r7, #4]
 80071ce:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 80071d2:	f7ff f8c5 	bl	8006360 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 80071d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80071da:	3302      	adds	r3, #2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 80071e2:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 80071e6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80071ea:	429a      	cmp	r2, r3
 80071ec:	dbd1      	blt.n	8007192 <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 80071ee:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3301      	adds	r3, #1
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80071fc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007200:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007204:	429a      	cmp	r2, r3
 8007206:	f6ff aeb4 	blt.w	8006f72 <hagl_fill_polygon+0x98>
        }
    }
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	37b0      	adds	r7, #176	@ 0xb0
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	461a      	mov	r2, r3
 8007222:	4623      	mov	r3, r4
 8007224:	80fb      	strh	r3, [r7, #6]
 8007226:	4603      	mov	r3, r0
 8007228:	80bb      	strh	r3, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	807b      	strh	r3, [r7, #2]
 800722e:	4613      	mov	r3, r2
 8007230:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	81bb      	strh	r3, [r7, #12]
 8007236:	88bb      	ldrh	r3, [r7, #4]
 8007238:	81fb      	strh	r3, [r7, #14]
 800723a:	887b      	ldrh	r3, [r7, #2]
 800723c:	823b      	strh	r3, [r7, #16]
 800723e:	883b      	ldrh	r3, [r7, #0]
 8007240:	827b      	strh	r3, [r7, #18]
 8007242:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007244:	82bb      	strh	r3, [r7, #20]
 8007246:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007248:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 800724a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800724c:	f107 030c 	add.w	r3, r7, #12
 8007250:	4619      	mov	r1, r3
 8007252:	2003      	movs	r0, #3
 8007254:	f7ff fde1 	bl	8006e1a <hagl_draw_polygon>
};
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	bd90      	pop	{r4, r7, pc}

08007260 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007260:	b590      	push	{r4, r7, lr}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	461a      	mov	r2, r3
 800726e:	4623      	mov	r3, r4
 8007270:	80fb      	strh	r3, [r7, #6]
 8007272:	4603      	mov	r3, r0
 8007274:	80bb      	strh	r3, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	807b      	strh	r3, [r7, #2]
 800727a:	4613      	mov	r3, r2
 800727c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	81bb      	strh	r3, [r7, #12]
 8007282:	88bb      	ldrh	r3, [r7, #4]
 8007284:	81fb      	strh	r3, [r7, #14]
 8007286:	887b      	ldrh	r3, [r7, #2]
 8007288:	823b      	strh	r3, [r7, #16]
 800728a:	883b      	ldrh	r3, [r7, #0]
 800728c:	827b      	strh	r3, [r7, #18]
 800728e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007290:	82bb      	strh	r3, [r7, #20]
 8007292:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007294:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007296:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007298:	f107 030c 	add.w	r3, r7, #12
 800729c:	4619      	mov	r1, r3
 800729e:	2003      	movs	r0, #3
 80072a0:	f7ff fe1b 	bl	8006eda <hagl_fill_polygon>
}
 80072a4:	bf00      	nop
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd90      	pop	{r4, r7, pc}

080072ac <atoi>:
 80072ac:	220a      	movs	r2, #10
 80072ae:	2100      	movs	r1, #0
 80072b0:	f000 b888 	b.w	80073c4 <strtol>

080072b4 <mbstowcs>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	4603      	mov	r3, r0
 80072b8:	b142      	cbz	r2, 80072cc <mbstowcs+0x18>
 80072ba:	2000      	movs	r0, #0
 80072bc:	5c0c      	ldrb	r4, [r1, r0]
 80072be:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
 80072c2:	b114      	cbz	r4, 80072ca <mbstowcs+0x16>
 80072c4:	3001      	adds	r0, #1
 80072c6:	4290      	cmp	r0, r2
 80072c8:	d1f8      	bne.n	80072bc <mbstowcs+0x8>
 80072ca:	bd10      	pop	{r4, pc}
 80072cc:	4610      	mov	r0, r2
 80072ce:	e7fc      	b.n	80072ca <mbstowcs+0x16>

080072d0 <_strtol_l.constprop.0>:
 80072d0:	2b24      	cmp	r3, #36	@ 0x24
 80072d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d6:	4686      	mov	lr, r0
 80072d8:	4690      	mov	r8, r2
 80072da:	d801      	bhi.n	80072e0 <_strtol_l.constprop.0+0x10>
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d106      	bne.n	80072ee <_strtol_l.constprop.0+0x1e>
 80072e0:	f000 fc0c 	bl	8007afc <__errno>
 80072e4:	2316      	movs	r3, #22
 80072e6:	6003      	str	r3, [r0, #0]
 80072e8:	2000      	movs	r0, #0
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	4834      	ldr	r0, [pc, #208]	@ (80073c0 <_strtol_l.constprop.0+0xf0>)
 80072f0:	460d      	mov	r5, r1
 80072f2:	462a      	mov	r2, r5
 80072f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072f8:	5d06      	ldrb	r6, [r0, r4]
 80072fa:	f016 0608 	ands.w	r6, r6, #8
 80072fe:	d1f8      	bne.n	80072f2 <_strtol_l.constprop.0+0x22>
 8007300:	2c2d      	cmp	r4, #45	@ 0x2d
 8007302:	d12d      	bne.n	8007360 <_strtol_l.constprop.0+0x90>
 8007304:	782c      	ldrb	r4, [r5, #0]
 8007306:	2601      	movs	r6, #1
 8007308:	1c95      	adds	r5, r2, #2
 800730a:	f033 0210 	bics.w	r2, r3, #16
 800730e:	d109      	bne.n	8007324 <_strtol_l.constprop.0+0x54>
 8007310:	2c30      	cmp	r4, #48	@ 0x30
 8007312:	d12a      	bne.n	800736a <_strtol_l.constprop.0+0x9a>
 8007314:	782a      	ldrb	r2, [r5, #0]
 8007316:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800731a:	2a58      	cmp	r2, #88	@ 0x58
 800731c:	d125      	bne.n	800736a <_strtol_l.constprop.0+0x9a>
 800731e:	786c      	ldrb	r4, [r5, #1]
 8007320:	2310      	movs	r3, #16
 8007322:	3502      	adds	r5, #2
 8007324:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007328:	f10c 3cff 	add.w	ip, ip, #4294967295
 800732c:	2200      	movs	r2, #0
 800732e:	fbbc f9f3 	udiv	r9, ip, r3
 8007332:	4610      	mov	r0, r2
 8007334:	fb03 ca19 	mls	sl, r3, r9, ip
 8007338:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800733c:	2f09      	cmp	r7, #9
 800733e:	d81b      	bhi.n	8007378 <_strtol_l.constprop.0+0xa8>
 8007340:	463c      	mov	r4, r7
 8007342:	42a3      	cmp	r3, r4
 8007344:	dd27      	ble.n	8007396 <_strtol_l.constprop.0+0xc6>
 8007346:	1c57      	adds	r7, r2, #1
 8007348:	d007      	beq.n	800735a <_strtol_l.constprop.0+0x8a>
 800734a:	4581      	cmp	r9, r0
 800734c:	d320      	bcc.n	8007390 <_strtol_l.constprop.0+0xc0>
 800734e:	d101      	bne.n	8007354 <_strtol_l.constprop.0+0x84>
 8007350:	45a2      	cmp	sl, r4
 8007352:	db1d      	blt.n	8007390 <_strtol_l.constprop.0+0xc0>
 8007354:	fb00 4003 	mla	r0, r0, r3, r4
 8007358:	2201      	movs	r2, #1
 800735a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800735e:	e7eb      	b.n	8007338 <_strtol_l.constprop.0+0x68>
 8007360:	2c2b      	cmp	r4, #43	@ 0x2b
 8007362:	bf04      	itt	eq
 8007364:	782c      	ldrbeq	r4, [r5, #0]
 8007366:	1c95      	addeq	r5, r2, #2
 8007368:	e7cf      	b.n	800730a <_strtol_l.constprop.0+0x3a>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1da      	bne.n	8007324 <_strtol_l.constprop.0+0x54>
 800736e:	2c30      	cmp	r4, #48	@ 0x30
 8007370:	bf0c      	ite	eq
 8007372:	2308      	moveq	r3, #8
 8007374:	230a      	movne	r3, #10
 8007376:	e7d5      	b.n	8007324 <_strtol_l.constprop.0+0x54>
 8007378:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800737c:	2f19      	cmp	r7, #25
 800737e:	d801      	bhi.n	8007384 <_strtol_l.constprop.0+0xb4>
 8007380:	3c37      	subs	r4, #55	@ 0x37
 8007382:	e7de      	b.n	8007342 <_strtol_l.constprop.0+0x72>
 8007384:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007388:	2f19      	cmp	r7, #25
 800738a:	d804      	bhi.n	8007396 <_strtol_l.constprop.0+0xc6>
 800738c:	3c57      	subs	r4, #87	@ 0x57
 800738e:	e7d8      	b.n	8007342 <_strtol_l.constprop.0+0x72>
 8007390:	f04f 32ff 	mov.w	r2, #4294967295
 8007394:	e7e1      	b.n	800735a <_strtol_l.constprop.0+0x8a>
 8007396:	1c53      	adds	r3, r2, #1
 8007398:	d108      	bne.n	80073ac <_strtol_l.constprop.0+0xdc>
 800739a:	2322      	movs	r3, #34	@ 0x22
 800739c:	f8ce 3000 	str.w	r3, [lr]
 80073a0:	4660      	mov	r0, ip
 80073a2:	f1b8 0f00 	cmp.w	r8, #0
 80073a6:	d0a0      	beq.n	80072ea <_strtol_l.constprop.0+0x1a>
 80073a8:	1e69      	subs	r1, r5, #1
 80073aa:	e006      	b.n	80073ba <_strtol_l.constprop.0+0xea>
 80073ac:	b106      	cbz	r6, 80073b0 <_strtol_l.constprop.0+0xe0>
 80073ae:	4240      	negs	r0, r0
 80073b0:	f1b8 0f00 	cmp.w	r8, #0
 80073b4:	d099      	beq.n	80072ea <_strtol_l.constprop.0+0x1a>
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	d1f6      	bne.n	80073a8 <_strtol_l.constprop.0+0xd8>
 80073ba:	f8c8 1000 	str.w	r1, [r8]
 80073be:	e794      	b.n	80072ea <_strtol_l.constprop.0+0x1a>
 80073c0:	08011f31 	.word	0x08011f31

080073c4 <strtol>:
 80073c4:	4613      	mov	r3, r2
 80073c6:	460a      	mov	r2, r1
 80073c8:	4601      	mov	r1, r0
 80073ca:	4802      	ldr	r0, [pc, #8]	@ (80073d4 <strtol+0x10>)
 80073cc:	6800      	ldr	r0, [r0, #0]
 80073ce:	f7ff bf7f 	b.w	80072d0 <_strtol_l.constprop.0>
 80073d2:	bf00      	nop
 80073d4:	20000220 	.word	0x20000220

080073d8 <_strtoul_l.constprop.0>:
 80073d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073dc:	4e34      	ldr	r6, [pc, #208]	@ (80074b0 <_strtoul_l.constprop.0+0xd8>)
 80073de:	4686      	mov	lr, r0
 80073e0:	460d      	mov	r5, r1
 80073e2:	4628      	mov	r0, r5
 80073e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073e8:	5d37      	ldrb	r7, [r6, r4]
 80073ea:	f017 0708 	ands.w	r7, r7, #8
 80073ee:	d1f8      	bne.n	80073e2 <_strtoul_l.constprop.0+0xa>
 80073f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80073f2:	d12f      	bne.n	8007454 <_strtoul_l.constprop.0+0x7c>
 80073f4:	782c      	ldrb	r4, [r5, #0]
 80073f6:	2701      	movs	r7, #1
 80073f8:	1c85      	adds	r5, r0, #2
 80073fa:	f033 0010 	bics.w	r0, r3, #16
 80073fe:	d109      	bne.n	8007414 <_strtoul_l.constprop.0+0x3c>
 8007400:	2c30      	cmp	r4, #48	@ 0x30
 8007402:	d12c      	bne.n	800745e <_strtoul_l.constprop.0+0x86>
 8007404:	7828      	ldrb	r0, [r5, #0]
 8007406:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800740a:	2858      	cmp	r0, #88	@ 0x58
 800740c:	d127      	bne.n	800745e <_strtoul_l.constprop.0+0x86>
 800740e:	786c      	ldrb	r4, [r5, #1]
 8007410:	2310      	movs	r3, #16
 8007412:	3502      	adds	r5, #2
 8007414:	f04f 38ff 	mov.w	r8, #4294967295
 8007418:	2600      	movs	r6, #0
 800741a:	fbb8 f8f3 	udiv	r8, r8, r3
 800741e:	fb03 f908 	mul.w	r9, r3, r8
 8007422:	ea6f 0909 	mvn.w	r9, r9
 8007426:	4630      	mov	r0, r6
 8007428:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800742c:	f1bc 0f09 	cmp.w	ip, #9
 8007430:	d81c      	bhi.n	800746c <_strtoul_l.constprop.0+0x94>
 8007432:	4664      	mov	r4, ip
 8007434:	42a3      	cmp	r3, r4
 8007436:	dd2a      	ble.n	800748e <_strtoul_l.constprop.0+0xb6>
 8007438:	f1b6 3fff 	cmp.w	r6, #4294967295
 800743c:	d007      	beq.n	800744e <_strtoul_l.constprop.0+0x76>
 800743e:	4580      	cmp	r8, r0
 8007440:	d322      	bcc.n	8007488 <_strtoul_l.constprop.0+0xb0>
 8007442:	d101      	bne.n	8007448 <_strtoul_l.constprop.0+0x70>
 8007444:	45a1      	cmp	r9, r4
 8007446:	db1f      	blt.n	8007488 <_strtoul_l.constprop.0+0xb0>
 8007448:	fb00 4003 	mla	r0, r0, r3, r4
 800744c:	2601      	movs	r6, #1
 800744e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007452:	e7e9      	b.n	8007428 <_strtoul_l.constprop.0+0x50>
 8007454:	2c2b      	cmp	r4, #43	@ 0x2b
 8007456:	bf04      	itt	eq
 8007458:	782c      	ldrbeq	r4, [r5, #0]
 800745a:	1c85      	addeq	r5, r0, #2
 800745c:	e7cd      	b.n	80073fa <_strtoul_l.constprop.0+0x22>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1d8      	bne.n	8007414 <_strtoul_l.constprop.0+0x3c>
 8007462:	2c30      	cmp	r4, #48	@ 0x30
 8007464:	bf0c      	ite	eq
 8007466:	2308      	moveq	r3, #8
 8007468:	230a      	movne	r3, #10
 800746a:	e7d3      	b.n	8007414 <_strtoul_l.constprop.0+0x3c>
 800746c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007470:	f1bc 0f19 	cmp.w	ip, #25
 8007474:	d801      	bhi.n	800747a <_strtoul_l.constprop.0+0xa2>
 8007476:	3c37      	subs	r4, #55	@ 0x37
 8007478:	e7dc      	b.n	8007434 <_strtoul_l.constprop.0+0x5c>
 800747a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800747e:	f1bc 0f19 	cmp.w	ip, #25
 8007482:	d804      	bhi.n	800748e <_strtoul_l.constprop.0+0xb6>
 8007484:	3c57      	subs	r4, #87	@ 0x57
 8007486:	e7d5      	b.n	8007434 <_strtoul_l.constprop.0+0x5c>
 8007488:	f04f 36ff 	mov.w	r6, #4294967295
 800748c:	e7df      	b.n	800744e <_strtoul_l.constprop.0+0x76>
 800748e:	1c73      	adds	r3, r6, #1
 8007490:	d106      	bne.n	80074a0 <_strtoul_l.constprop.0+0xc8>
 8007492:	2322      	movs	r3, #34	@ 0x22
 8007494:	f8ce 3000 	str.w	r3, [lr]
 8007498:	4630      	mov	r0, r6
 800749a:	b932      	cbnz	r2, 80074aa <_strtoul_l.constprop.0+0xd2>
 800749c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074a0:	b107      	cbz	r7, 80074a4 <_strtoul_l.constprop.0+0xcc>
 80074a2:	4240      	negs	r0, r0
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	d0f9      	beq.n	800749c <_strtoul_l.constprop.0+0xc4>
 80074a8:	b106      	cbz	r6, 80074ac <_strtoul_l.constprop.0+0xd4>
 80074aa:	1e69      	subs	r1, r5, #1
 80074ac:	6011      	str	r1, [r2, #0]
 80074ae:	e7f5      	b.n	800749c <_strtoul_l.constprop.0+0xc4>
 80074b0:	08011f31 	.word	0x08011f31

080074b4 <strtoul>:
 80074b4:	4613      	mov	r3, r2
 80074b6:	460a      	mov	r2, r1
 80074b8:	4601      	mov	r1, r0
 80074ba:	4802      	ldr	r0, [pc, #8]	@ (80074c4 <strtoul+0x10>)
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f7ff bf8b 	b.w	80073d8 <_strtoul_l.constprop.0>
 80074c2:	bf00      	nop
 80074c4:	20000220 	.word	0x20000220

080074c8 <__sflush_r>:
 80074c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d0:	0716      	lsls	r6, r2, #28
 80074d2:	4605      	mov	r5, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	d454      	bmi.n	8007582 <__sflush_r+0xba>
 80074d8:	684b      	ldr	r3, [r1, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	dc02      	bgt.n	80074e4 <__sflush_r+0x1c>
 80074de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dd48      	ble.n	8007576 <__sflush_r+0xae>
 80074e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074e6:	2e00      	cmp	r6, #0
 80074e8:	d045      	beq.n	8007576 <__sflush_r+0xae>
 80074ea:	2300      	movs	r3, #0
 80074ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074f0:	682f      	ldr	r7, [r5, #0]
 80074f2:	6a21      	ldr	r1, [r4, #32]
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	d030      	beq.n	800755a <__sflush_r+0x92>
 80074f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	0759      	lsls	r1, r3, #29
 80074fe:	d505      	bpl.n	800750c <__sflush_r+0x44>
 8007500:	6863      	ldr	r3, [r4, #4]
 8007502:	1ad2      	subs	r2, r2, r3
 8007504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007506:	b10b      	cbz	r3, 800750c <__sflush_r+0x44>
 8007508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	2300      	movs	r3, #0
 800750e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007510:	6a21      	ldr	r1, [r4, #32]
 8007512:	4628      	mov	r0, r5
 8007514:	47b0      	blx	r6
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	d106      	bne.n	800752a <__sflush_r+0x62>
 800751c:	6829      	ldr	r1, [r5, #0]
 800751e:	291d      	cmp	r1, #29
 8007520:	d82b      	bhi.n	800757a <__sflush_r+0xb2>
 8007522:	4a2a      	ldr	r2, [pc, #168]	@ (80075cc <__sflush_r+0x104>)
 8007524:	410a      	asrs	r2, r1
 8007526:	07d6      	lsls	r6, r2, #31
 8007528:	d427      	bmi.n	800757a <__sflush_r+0xb2>
 800752a:	2200      	movs	r2, #0
 800752c:	6062      	str	r2, [r4, #4]
 800752e:	04d9      	lsls	r1, r3, #19
 8007530:	6922      	ldr	r2, [r4, #16]
 8007532:	6022      	str	r2, [r4, #0]
 8007534:	d504      	bpl.n	8007540 <__sflush_r+0x78>
 8007536:	1c42      	adds	r2, r0, #1
 8007538:	d101      	bne.n	800753e <__sflush_r+0x76>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	b903      	cbnz	r3, 8007540 <__sflush_r+0x78>
 800753e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007542:	602f      	str	r7, [r5, #0]
 8007544:	b1b9      	cbz	r1, 8007576 <__sflush_r+0xae>
 8007546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800754a:	4299      	cmp	r1, r3
 800754c:	d002      	beq.n	8007554 <__sflush_r+0x8c>
 800754e:	4628      	mov	r0, r5
 8007550:	f000 fb2e 	bl	8007bb0 <_free_r>
 8007554:	2300      	movs	r3, #0
 8007556:	6363      	str	r3, [r4, #52]	@ 0x34
 8007558:	e00d      	b.n	8007576 <__sflush_r+0xae>
 800755a:	2301      	movs	r3, #1
 800755c:	4628      	mov	r0, r5
 800755e:	47b0      	blx	r6
 8007560:	4602      	mov	r2, r0
 8007562:	1c50      	adds	r0, r2, #1
 8007564:	d1c9      	bne.n	80074fa <__sflush_r+0x32>
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0c6      	beq.n	80074fa <__sflush_r+0x32>
 800756c:	2b1d      	cmp	r3, #29
 800756e:	d001      	beq.n	8007574 <__sflush_r+0xac>
 8007570:	2b16      	cmp	r3, #22
 8007572:	d11e      	bne.n	80075b2 <__sflush_r+0xea>
 8007574:	602f      	str	r7, [r5, #0]
 8007576:	2000      	movs	r0, #0
 8007578:	e022      	b.n	80075c0 <__sflush_r+0xf8>
 800757a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800757e:	b21b      	sxth	r3, r3
 8007580:	e01b      	b.n	80075ba <__sflush_r+0xf2>
 8007582:	690f      	ldr	r7, [r1, #16]
 8007584:	2f00      	cmp	r7, #0
 8007586:	d0f6      	beq.n	8007576 <__sflush_r+0xae>
 8007588:	0793      	lsls	r3, r2, #30
 800758a:	680e      	ldr	r6, [r1, #0]
 800758c:	bf08      	it	eq
 800758e:	694b      	ldreq	r3, [r1, #20]
 8007590:	600f      	str	r7, [r1, #0]
 8007592:	bf18      	it	ne
 8007594:	2300      	movne	r3, #0
 8007596:	eba6 0807 	sub.w	r8, r6, r7
 800759a:	608b      	str	r3, [r1, #8]
 800759c:	f1b8 0f00 	cmp.w	r8, #0
 80075a0:	dde9      	ble.n	8007576 <__sflush_r+0xae>
 80075a2:	6a21      	ldr	r1, [r4, #32]
 80075a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075a6:	4643      	mov	r3, r8
 80075a8:	463a      	mov	r2, r7
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b0      	blx	r6
 80075ae:	2800      	cmp	r0, #0
 80075b0:	dc08      	bgt.n	80075c4 <__sflush_r+0xfc>
 80075b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ba:	81a3      	strh	r3, [r4, #12]
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	4407      	add	r7, r0
 80075c6:	eba8 0800 	sub.w	r8, r8, r0
 80075ca:	e7e7      	b.n	800759c <__sflush_r+0xd4>
 80075cc:	dfbffffe 	.word	0xdfbffffe

080075d0 <_fflush_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	690b      	ldr	r3, [r1, #16]
 80075d4:	4605      	mov	r5, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	b913      	cbnz	r3, 80075e0 <_fflush_r+0x10>
 80075da:	2500      	movs	r5, #0
 80075dc:	4628      	mov	r0, r5
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	b118      	cbz	r0, 80075ea <_fflush_r+0x1a>
 80075e2:	6a03      	ldr	r3, [r0, #32]
 80075e4:	b90b      	cbnz	r3, 80075ea <_fflush_r+0x1a>
 80075e6:	f000 f8a7 	bl	8007738 <__sinit>
 80075ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0f3      	beq.n	80075da <_fflush_r+0xa>
 80075f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075f4:	07d0      	lsls	r0, r2, #31
 80075f6:	d404      	bmi.n	8007602 <_fflush_r+0x32>
 80075f8:	0599      	lsls	r1, r3, #22
 80075fa:	d402      	bmi.n	8007602 <_fflush_r+0x32>
 80075fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075fe:	f000 faa8 	bl	8007b52 <__retarget_lock_acquire_recursive>
 8007602:	4628      	mov	r0, r5
 8007604:	4621      	mov	r1, r4
 8007606:	f7ff ff5f 	bl	80074c8 <__sflush_r>
 800760a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800760c:	07da      	lsls	r2, r3, #31
 800760e:	4605      	mov	r5, r0
 8007610:	d4e4      	bmi.n	80075dc <_fflush_r+0xc>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	059b      	lsls	r3, r3, #22
 8007616:	d4e1      	bmi.n	80075dc <_fflush_r+0xc>
 8007618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800761a:	f000 fa9b 	bl	8007b54 <__retarget_lock_release_recursive>
 800761e:	e7dd      	b.n	80075dc <_fflush_r+0xc>

08007620 <std>:
 8007620:	2300      	movs	r3, #0
 8007622:	b510      	push	{r4, lr}
 8007624:	4604      	mov	r4, r0
 8007626:	e9c0 3300 	strd	r3, r3, [r0]
 800762a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800762e:	6083      	str	r3, [r0, #8]
 8007630:	8181      	strh	r1, [r0, #12]
 8007632:	6643      	str	r3, [r0, #100]	@ 0x64
 8007634:	81c2      	strh	r2, [r0, #14]
 8007636:	6183      	str	r3, [r0, #24]
 8007638:	4619      	mov	r1, r3
 800763a:	2208      	movs	r2, #8
 800763c:	305c      	adds	r0, #92	@ 0x5c
 800763e:	f000 f981 	bl	8007944 <memset>
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <std+0x58>)
 8007644:	6263      	str	r3, [r4, #36]	@ 0x24
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <std+0x5c>)
 8007648:	62a3      	str	r3, [r4, #40]	@ 0x28
 800764a:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <std+0x60>)
 800764c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <std+0x64>)
 8007650:	6323      	str	r3, [r4, #48]	@ 0x30
 8007652:	4b0d      	ldr	r3, [pc, #52]	@ (8007688 <std+0x68>)
 8007654:	6224      	str	r4, [r4, #32]
 8007656:	429c      	cmp	r4, r3
 8007658:	d006      	beq.n	8007668 <std+0x48>
 800765a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800765e:	4294      	cmp	r4, r2
 8007660:	d002      	beq.n	8007668 <std+0x48>
 8007662:	33d0      	adds	r3, #208	@ 0xd0
 8007664:	429c      	cmp	r4, r3
 8007666:	d105      	bne.n	8007674 <std+0x54>
 8007668:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f000 ba6e 	b.w	8007b50 <__retarget_lock_init_recursive>
 8007674:	bd10      	pop	{r4, pc}
 8007676:	bf00      	nop
 8007678:	0800780d 	.word	0x0800780d
 800767c:	0800782f 	.word	0x0800782f
 8007680:	08007867 	.word	0x08007867
 8007684:	0800788b 	.word	0x0800788b
 8007688:	2000ae44 	.word	0x2000ae44

0800768c <stdio_exit_handler>:
 800768c:	4a02      	ldr	r2, [pc, #8]	@ (8007698 <stdio_exit_handler+0xc>)
 800768e:	4903      	ldr	r1, [pc, #12]	@ (800769c <stdio_exit_handler+0x10>)
 8007690:	4803      	ldr	r0, [pc, #12]	@ (80076a0 <stdio_exit_handler+0x14>)
 8007692:	f000 b869 	b.w	8007768 <_fwalk_sglue>
 8007696:	bf00      	nop
 8007698:	20000214 	.word	0x20000214
 800769c:	080075d1 	.word	0x080075d1
 80076a0:	20000224 	.word	0x20000224

080076a4 <cleanup_stdio>:
 80076a4:	6841      	ldr	r1, [r0, #4]
 80076a6:	4b0c      	ldr	r3, [pc, #48]	@ (80076d8 <cleanup_stdio+0x34>)
 80076a8:	4299      	cmp	r1, r3
 80076aa:	b510      	push	{r4, lr}
 80076ac:	4604      	mov	r4, r0
 80076ae:	d001      	beq.n	80076b4 <cleanup_stdio+0x10>
 80076b0:	f7ff ff8e 	bl	80075d0 <_fflush_r>
 80076b4:	68a1      	ldr	r1, [r4, #8]
 80076b6:	4b09      	ldr	r3, [pc, #36]	@ (80076dc <cleanup_stdio+0x38>)
 80076b8:	4299      	cmp	r1, r3
 80076ba:	d002      	beq.n	80076c2 <cleanup_stdio+0x1e>
 80076bc:	4620      	mov	r0, r4
 80076be:	f7ff ff87 	bl	80075d0 <_fflush_r>
 80076c2:	68e1      	ldr	r1, [r4, #12]
 80076c4:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <cleanup_stdio+0x3c>)
 80076c6:	4299      	cmp	r1, r3
 80076c8:	d004      	beq.n	80076d4 <cleanup_stdio+0x30>
 80076ca:	4620      	mov	r0, r4
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d0:	f7ff bf7e 	b.w	80075d0 <_fflush_r>
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	bf00      	nop
 80076d8:	2000ae44 	.word	0x2000ae44
 80076dc:	2000aeac 	.word	0x2000aeac
 80076e0:	2000af14 	.word	0x2000af14

080076e4 <global_stdio_init.part.0>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007714 <global_stdio_init.part.0+0x30>)
 80076e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007718 <global_stdio_init.part.0+0x34>)
 80076ea:	4a0c      	ldr	r2, [pc, #48]	@ (800771c <global_stdio_init.part.0+0x38>)
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	4620      	mov	r0, r4
 80076f0:	2200      	movs	r2, #0
 80076f2:	2104      	movs	r1, #4
 80076f4:	f7ff ff94 	bl	8007620 <std>
 80076f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076fc:	2201      	movs	r2, #1
 80076fe:	2109      	movs	r1, #9
 8007700:	f7ff ff8e 	bl	8007620 <std>
 8007704:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007708:	2202      	movs	r2, #2
 800770a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800770e:	2112      	movs	r1, #18
 8007710:	f7ff bf86 	b.w	8007620 <std>
 8007714:	2000af7c 	.word	0x2000af7c
 8007718:	2000ae44 	.word	0x2000ae44
 800771c:	0800768d 	.word	0x0800768d

08007720 <__sfp_lock_acquire>:
 8007720:	4801      	ldr	r0, [pc, #4]	@ (8007728 <__sfp_lock_acquire+0x8>)
 8007722:	f000 ba16 	b.w	8007b52 <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	2000af85 	.word	0x2000af85

0800772c <__sfp_lock_release>:
 800772c:	4801      	ldr	r0, [pc, #4]	@ (8007734 <__sfp_lock_release+0x8>)
 800772e:	f000 ba11 	b.w	8007b54 <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	2000af85 	.word	0x2000af85

08007738 <__sinit>:
 8007738:	b510      	push	{r4, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	f7ff fff0 	bl	8007720 <__sfp_lock_acquire>
 8007740:	6a23      	ldr	r3, [r4, #32]
 8007742:	b11b      	cbz	r3, 800774c <__sinit+0x14>
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	f7ff bff0 	b.w	800772c <__sfp_lock_release>
 800774c:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <__sinit+0x28>)
 800774e:	6223      	str	r3, [r4, #32]
 8007750:	4b04      	ldr	r3, [pc, #16]	@ (8007764 <__sinit+0x2c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f5      	bne.n	8007744 <__sinit+0xc>
 8007758:	f7ff ffc4 	bl	80076e4 <global_stdio_init.part.0>
 800775c:	e7f2      	b.n	8007744 <__sinit+0xc>
 800775e:	bf00      	nop
 8007760:	080076a5 	.word	0x080076a5
 8007764:	2000af7c 	.word	0x2000af7c

08007768 <_fwalk_sglue>:
 8007768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800776c:	4607      	mov	r7, r0
 800776e:	4688      	mov	r8, r1
 8007770:	4614      	mov	r4, r2
 8007772:	2600      	movs	r6, #0
 8007774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007778:	f1b9 0901 	subs.w	r9, r9, #1
 800777c:	d505      	bpl.n	800778a <_fwalk_sglue+0x22>
 800777e:	6824      	ldr	r4, [r4, #0]
 8007780:	2c00      	cmp	r4, #0
 8007782:	d1f7      	bne.n	8007774 <_fwalk_sglue+0xc>
 8007784:	4630      	mov	r0, r6
 8007786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778a:	89ab      	ldrh	r3, [r5, #12]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d907      	bls.n	80077a0 <_fwalk_sglue+0x38>
 8007790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007794:	3301      	adds	r3, #1
 8007796:	d003      	beq.n	80077a0 <_fwalk_sglue+0x38>
 8007798:	4629      	mov	r1, r5
 800779a:	4638      	mov	r0, r7
 800779c:	47c0      	blx	r8
 800779e:	4306      	orrs	r6, r0
 80077a0:	3568      	adds	r5, #104	@ 0x68
 80077a2:	e7e9      	b.n	8007778 <_fwalk_sglue+0x10>

080077a4 <sniprintf>:
 80077a4:	b40c      	push	{r2, r3}
 80077a6:	b530      	push	{r4, r5, lr}
 80077a8:	4b17      	ldr	r3, [pc, #92]	@ (8007808 <sniprintf+0x64>)
 80077aa:	1e0c      	subs	r4, r1, #0
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	b09d      	sub	sp, #116	@ 0x74
 80077b0:	da08      	bge.n	80077c4 <sniprintf+0x20>
 80077b2:	238b      	movs	r3, #139	@ 0x8b
 80077b4:	602b      	str	r3, [r5, #0]
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ba:	b01d      	add	sp, #116	@ 0x74
 80077bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c0:	b002      	add	sp, #8
 80077c2:	4770      	bx	lr
 80077c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80077c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077cc:	bf14      	ite	ne
 80077ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077d2:	4623      	moveq	r3, r4
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	9307      	str	r3, [sp, #28]
 80077d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077dc:	9002      	str	r0, [sp, #8]
 80077de:	9006      	str	r0, [sp, #24]
 80077e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077e6:	ab21      	add	r3, sp, #132	@ 0x84
 80077e8:	a902      	add	r1, sp, #8
 80077ea:	4628      	mov	r0, r5
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	f000 fb3b 	bl	8007e68 <_svfiprintf_r>
 80077f2:	1c43      	adds	r3, r0, #1
 80077f4:	bfbc      	itt	lt
 80077f6:	238b      	movlt	r3, #139	@ 0x8b
 80077f8:	602b      	strlt	r3, [r5, #0]
 80077fa:	2c00      	cmp	r4, #0
 80077fc:	d0dd      	beq.n	80077ba <sniprintf+0x16>
 80077fe:	9b02      	ldr	r3, [sp, #8]
 8007800:	2200      	movs	r2, #0
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	e7d9      	b.n	80077ba <sniprintf+0x16>
 8007806:	bf00      	nop
 8007808:	20000220 	.word	0x20000220

0800780c <__sread>:
 800780c:	b510      	push	{r4, lr}
 800780e:	460c      	mov	r4, r1
 8007810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007814:	f000 f94e 	bl	8007ab4 <_read_r>
 8007818:	2800      	cmp	r0, #0
 800781a:	bfab      	itete	ge
 800781c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800781e:	89a3      	ldrhlt	r3, [r4, #12]
 8007820:	181b      	addge	r3, r3, r0
 8007822:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007826:	bfac      	ite	ge
 8007828:	6563      	strge	r3, [r4, #84]	@ 0x54
 800782a:	81a3      	strhlt	r3, [r4, #12]
 800782c:	bd10      	pop	{r4, pc}

0800782e <__swrite>:
 800782e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007832:	461f      	mov	r7, r3
 8007834:	898b      	ldrh	r3, [r1, #12]
 8007836:	05db      	lsls	r3, r3, #23
 8007838:	4605      	mov	r5, r0
 800783a:	460c      	mov	r4, r1
 800783c:	4616      	mov	r6, r2
 800783e:	d505      	bpl.n	800784c <__swrite+0x1e>
 8007840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007844:	2302      	movs	r3, #2
 8007846:	2200      	movs	r2, #0
 8007848:	f000 f922 	bl	8007a90 <_lseek_r>
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007852:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007856:	81a3      	strh	r3, [r4, #12]
 8007858:	4632      	mov	r2, r6
 800785a:	463b      	mov	r3, r7
 800785c:	4628      	mov	r0, r5
 800785e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007862:	f000 b939 	b.w	8007ad8 <_write_r>

08007866 <__sseek>:
 8007866:	b510      	push	{r4, lr}
 8007868:	460c      	mov	r4, r1
 800786a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800786e:	f000 f90f 	bl	8007a90 <_lseek_r>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	bf15      	itete	ne
 8007878:	6560      	strne	r0, [r4, #84]	@ 0x54
 800787a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800787e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007882:	81a3      	strheq	r3, [r4, #12]
 8007884:	bf18      	it	ne
 8007886:	81a3      	strhne	r3, [r4, #12]
 8007888:	bd10      	pop	{r4, pc}

0800788a <__sclose>:
 800788a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788e:	f000 b8ef 	b.w	8007a70 <_close_r>

08007892 <_vsniprintf_r>:
 8007892:	b530      	push	{r4, r5, lr}
 8007894:	4614      	mov	r4, r2
 8007896:	2c00      	cmp	r4, #0
 8007898:	b09b      	sub	sp, #108	@ 0x6c
 800789a:	4605      	mov	r5, r0
 800789c:	461a      	mov	r2, r3
 800789e:	da05      	bge.n	80078ac <_vsniprintf_r+0x1a>
 80078a0:	238b      	movs	r3, #139	@ 0x8b
 80078a2:	6003      	str	r3, [r0, #0]
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	b01b      	add	sp, #108	@ 0x6c
 80078aa:	bd30      	pop	{r4, r5, pc}
 80078ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80078b4:	bf14      	ite	ne
 80078b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078ba:	4623      	moveq	r3, r4
 80078bc:	9302      	str	r3, [sp, #8]
 80078be:	9305      	str	r3, [sp, #20]
 80078c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078c4:	9100      	str	r1, [sp, #0]
 80078c6:	9104      	str	r1, [sp, #16]
 80078c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80078cc:	4669      	mov	r1, sp
 80078ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80078d0:	f000 faca 	bl	8007e68 <_svfiprintf_r>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	bfbc      	itt	lt
 80078d8:	238b      	movlt	r3, #139	@ 0x8b
 80078da:	602b      	strlt	r3, [r5, #0]
 80078dc:	2c00      	cmp	r4, #0
 80078de:	d0e3      	beq.n	80078a8 <_vsniprintf_r+0x16>
 80078e0:	9b00      	ldr	r3, [sp, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	e7df      	b.n	80078a8 <_vsniprintf_r+0x16>

080078e8 <vsniprintf>:
 80078e8:	b507      	push	{r0, r1, r2, lr}
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	460a      	mov	r2, r1
 80078f0:	4601      	mov	r1, r0
 80078f2:	4803      	ldr	r0, [pc, #12]	@ (8007900 <vsniprintf+0x18>)
 80078f4:	6800      	ldr	r0, [r0, #0]
 80078f6:	f7ff ffcc 	bl	8007892 <_vsniprintf_r>
 80078fa:	b003      	add	sp, #12
 80078fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007900:	20000220 	.word	0x20000220

08007904 <_vsiprintf_r>:
 8007904:	b500      	push	{lr}
 8007906:	b09b      	sub	sp, #108	@ 0x6c
 8007908:	9100      	str	r1, [sp, #0]
 800790a:	9104      	str	r1, [sp, #16]
 800790c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007910:	9105      	str	r1, [sp, #20]
 8007912:	9102      	str	r1, [sp, #8]
 8007914:	4905      	ldr	r1, [pc, #20]	@ (800792c <_vsiprintf_r+0x28>)
 8007916:	9103      	str	r1, [sp, #12]
 8007918:	4669      	mov	r1, sp
 800791a:	f000 faa5 	bl	8007e68 <_svfiprintf_r>
 800791e:	9b00      	ldr	r3, [sp, #0]
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	b01b      	add	sp, #108	@ 0x6c
 8007926:	f85d fb04 	ldr.w	pc, [sp], #4
 800792a:	bf00      	nop
 800792c:	ffff0208 	.word	0xffff0208

08007930 <vsiprintf>:
 8007930:	4613      	mov	r3, r2
 8007932:	460a      	mov	r2, r1
 8007934:	4601      	mov	r1, r0
 8007936:	4802      	ldr	r0, [pc, #8]	@ (8007940 <vsiprintf+0x10>)
 8007938:	6800      	ldr	r0, [r0, #0]
 800793a:	f7ff bfe3 	b.w	8007904 <_vsiprintf_r>
 800793e:	bf00      	nop
 8007940:	20000220 	.word	0x20000220

08007944 <memset>:
 8007944:	4402      	add	r2, r0
 8007946:	4603      	mov	r3, r0
 8007948:	4293      	cmp	r3, r2
 800794a:	d100      	bne.n	800794e <memset+0xa>
 800794c:	4770      	bx	lr
 800794e:	f803 1b01 	strb.w	r1, [r3], #1
 8007952:	e7f9      	b.n	8007948 <memset+0x4>

08007954 <strchr>:
 8007954:	b2c9      	uxtb	r1, r1
 8007956:	4603      	mov	r3, r0
 8007958:	4618      	mov	r0, r3
 800795a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800795e:	b112      	cbz	r2, 8007966 <strchr+0x12>
 8007960:	428a      	cmp	r2, r1
 8007962:	d1f9      	bne.n	8007958 <strchr+0x4>
 8007964:	4770      	bx	lr
 8007966:	2900      	cmp	r1, #0
 8007968:	bf18      	it	ne
 800796a:	2000      	movne	r0, #0
 800796c:	4770      	bx	lr

0800796e <strncmp>:
 800796e:	b510      	push	{r4, lr}
 8007970:	b16a      	cbz	r2, 800798e <strncmp+0x20>
 8007972:	3901      	subs	r1, #1
 8007974:	1884      	adds	r4, r0, r2
 8007976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800797a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800797e:	429a      	cmp	r2, r3
 8007980:	d103      	bne.n	800798a <strncmp+0x1c>
 8007982:	42a0      	cmp	r0, r4
 8007984:	d001      	beq.n	800798a <strncmp+0x1c>
 8007986:	2a00      	cmp	r2, #0
 8007988:	d1f5      	bne.n	8007976 <strncmp+0x8>
 800798a:	1ad0      	subs	r0, r2, r3
 800798c:	bd10      	pop	{r4, pc}
 800798e:	4610      	mov	r0, r2
 8007990:	e7fc      	b.n	800798c <strncmp+0x1e>

08007992 <strncpy>:
 8007992:	b510      	push	{r4, lr}
 8007994:	3901      	subs	r1, #1
 8007996:	4603      	mov	r3, r0
 8007998:	b132      	cbz	r2, 80079a8 <strncpy+0x16>
 800799a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800799e:	f803 4b01 	strb.w	r4, [r3], #1
 80079a2:	3a01      	subs	r2, #1
 80079a4:	2c00      	cmp	r4, #0
 80079a6:	d1f7      	bne.n	8007998 <strncpy+0x6>
 80079a8:	441a      	add	r2, r3
 80079aa:	2100      	movs	r1, #0
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d100      	bne.n	80079b2 <strncpy+0x20>
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	f803 1b01 	strb.w	r1, [r3], #1
 80079b6:	e7f9      	b.n	80079ac <strncpy+0x1a>

080079b8 <strtok>:
 80079b8:	4b16      	ldr	r3, [pc, #88]	@ (8007a14 <strtok+0x5c>)
 80079ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	681f      	ldr	r7, [r3, #0]
 80079c0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80079c2:	4605      	mov	r5, r0
 80079c4:	460e      	mov	r6, r1
 80079c6:	b9ec      	cbnz	r4, 8007a04 <strtok+0x4c>
 80079c8:	2050      	movs	r0, #80	@ 0x50
 80079ca:	f000 f93b 	bl	8007c44 <malloc>
 80079ce:	4602      	mov	r2, r0
 80079d0:	6478      	str	r0, [r7, #68]	@ 0x44
 80079d2:	b920      	cbnz	r0, 80079de <strtok+0x26>
 80079d4:	4b10      	ldr	r3, [pc, #64]	@ (8007a18 <strtok+0x60>)
 80079d6:	4811      	ldr	r0, [pc, #68]	@ (8007a1c <strtok+0x64>)
 80079d8:	215b      	movs	r1, #91	@ 0x5b
 80079da:	f000 f8cb 	bl	8007b74 <__assert_func>
 80079de:	e9c0 4400 	strd	r4, r4, [r0]
 80079e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80079e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80079ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80079ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80079f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80079f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80079fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80079fe:	6184      	str	r4, [r0, #24]
 8007a00:	7704      	strb	r4, [r0, #28]
 8007a02:	6244      	str	r4, [r0, #36]	@ 0x24
 8007a04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a10:	f000 b806 	b.w	8007a20 <__strtok_r>
 8007a14:	20000220 	.word	0x20000220
 8007a18:	08012031 	.word	0x08012031
 8007a1c:	08012048 	.word	0x08012048

08007a20 <__strtok_r>:
 8007a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a22:	4604      	mov	r4, r0
 8007a24:	b908      	cbnz	r0, 8007a2a <__strtok_r+0xa>
 8007a26:	6814      	ldr	r4, [r2, #0]
 8007a28:	b144      	cbz	r4, 8007a3c <__strtok_r+0x1c>
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007a30:	460f      	mov	r7, r1
 8007a32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007a36:	b91e      	cbnz	r6, 8007a40 <__strtok_r+0x20>
 8007a38:	b965      	cbnz	r5, 8007a54 <__strtok_r+0x34>
 8007a3a:	6015      	str	r5, [r2, #0]
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e005      	b.n	8007a4c <__strtok_r+0x2c>
 8007a40:	42b5      	cmp	r5, r6
 8007a42:	d1f6      	bne.n	8007a32 <__strtok_r+0x12>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1f0      	bne.n	8007a2a <__strtok_r+0xa>
 8007a48:	6014      	str	r4, [r2, #0]
 8007a4a:	7003      	strb	r3, [r0, #0]
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	461c      	mov	r4, r3
 8007a50:	e00c      	b.n	8007a6c <__strtok_r+0x4c>
 8007a52:	b915      	cbnz	r5, 8007a5a <__strtok_r+0x3a>
 8007a54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a58:	460e      	mov	r6, r1
 8007a5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007a5e:	42ab      	cmp	r3, r5
 8007a60:	d1f7      	bne.n	8007a52 <__strtok_r+0x32>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f3      	beq.n	8007a4e <__strtok_r+0x2e>
 8007a66:	2300      	movs	r3, #0
 8007a68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007a6c:	6014      	str	r4, [r2, #0]
 8007a6e:	e7ed      	b.n	8007a4c <__strtok_r+0x2c>

08007a70 <_close_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d06      	ldr	r5, [pc, #24]	@ (8007a8c <_close_r+0x1c>)
 8007a74:	2300      	movs	r3, #0
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	f7fa f970 	bl	8001d60 <_close>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_close_r+0x1a>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_close_r+0x1a>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	2000af80 	.word	0x2000af80

08007a90 <_lseek_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	@ (8007ab0 <_lseek_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7fa f985 	bl	8001dae <_lseek>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_lseek_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_lseek_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	2000af80 	.word	0x2000af80

08007ab4 <_read_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d07      	ldr	r5, [pc, #28]	@ (8007ad4 <_read_r+0x20>)
 8007ab8:	4604      	mov	r4, r0
 8007aba:	4608      	mov	r0, r1
 8007abc:	4611      	mov	r1, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	602a      	str	r2, [r5, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f7fa f913 	bl	8001cee <_read>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_read_r+0x1e>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_read_r+0x1e>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	2000af80 	.word	0x2000af80

08007ad8 <_write_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d07      	ldr	r5, [pc, #28]	@ (8007af8 <_write_r+0x20>)
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f7fa f91e 	bl	8001d28 <_write>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_write_r+0x1e>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_write_r+0x1e>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	2000af80 	.word	0x2000af80

08007afc <__errno>:
 8007afc:	4b01      	ldr	r3, [pc, #4]	@ (8007b04 <__errno+0x8>)
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000220 	.word	0x20000220

08007b08 <__libc_init_array>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007b40 <__libc_init_array+0x38>)
 8007b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8007b44 <__libc_init_array+0x3c>)
 8007b0e:	1b64      	subs	r4, r4, r5
 8007b10:	10a4      	asrs	r4, r4, #2
 8007b12:	2600      	movs	r6, #0
 8007b14:	42a6      	cmp	r6, r4
 8007b16:	d109      	bne.n	8007b2c <__libc_init_array+0x24>
 8007b18:	4d0b      	ldr	r5, [pc, #44]	@ (8007b48 <__libc_init_array+0x40>)
 8007b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8007b4c <__libc_init_array+0x44>)
 8007b1c:	f000 ff44 	bl	80089a8 <_init>
 8007b20:	1b64      	subs	r4, r4, r5
 8007b22:	10a4      	asrs	r4, r4, #2
 8007b24:	2600      	movs	r6, #0
 8007b26:	42a6      	cmp	r6, r4
 8007b28:	d105      	bne.n	8007b36 <__libc_init_array+0x2e>
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b30:	4798      	blx	r3
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7ee      	b.n	8007b14 <__libc_init_array+0xc>
 8007b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3a:	4798      	blx	r3
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	e7f2      	b.n	8007b26 <__libc_init_array+0x1e>
 8007b40:	0801211c 	.word	0x0801211c
 8007b44:	0801211c 	.word	0x0801211c
 8007b48:	0801211c 	.word	0x0801211c
 8007b4c:	08012120 	.word	0x08012120

08007b50 <__retarget_lock_init_recursive>:
 8007b50:	4770      	bx	lr

08007b52 <__retarget_lock_acquire_recursive>:
 8007b52:	4770      	bx	lr

08007b54 <__retarget_lock_release_recursive>:
 8007b54:	4770      	bx	lr

08007b56 <memcpy>:
 8007b56:	440a      	add	r2, r1
 8007b58:	4291      	cmp	r1, r2
 8007b5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b5e:	d100      	bne.n	8007b62 <memcpy+0xc>
 8007b60:	4770      	bx	lr
 8007b62:	b510      	push	{r4, lr}
 8007b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b6c:	4291      	cmp	r1, r2
 8007b6e:	d1f9      	bne.n	8007b64 <memcpy+0xe>
 8007b70:	bd10      	pop	{r4, pc}
	...

08007b74 <__assert_func>:
 8007b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b76:	4614      	mov	r4, r2
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4b09      	ldr	r3, [pc, #36]	@ (8007ba0 <__assert_func+0x2c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4605      	mov	r5, r0
 8007b80:	68d8      	ldr	r0, [r3, #12]
 8007b82:	b954      	cbnz	r4, 8007b9a <__assert_func+0x26>
 8007b84:	4b07      	ldr	r3, [pc, #28]	@ (8007ba4 <__assert_func+0x30>)
 8007b86:	461c      	mov	r4, r3
 8007b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b8c:	9100      	str	r1, [sp, #0]
 8007b8e:	462b      	mov	r3, r5
 8007b90:	4905      	ldr	r1, [pc, #20]	@ (8007ba8 <__assert_func+0x34>)
 8007b92:	f000 fbf3 	bl	800837c <fiprintf>
 8007b96:	f000 fcb1 	bl	80084fc <abort>
 8007b9a:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <__assert_func+0x38>)
 8007b9c:	e7f4      	b.n	8007b88 <__assert_func+0x14>
 8007b9e:	bf00      	nop
 8007ba0:	20000220 	.word	0x20000220
 8007ba4:	080120dd 	.word	0x080120dd
 8007ba8:	080120af 	.word	0x080120af
 8007bac:	080120a2 	.word	0x080120a2

08007bb0 <_free_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d041      	beq.n	8007c3c <_free_r+0x8c>
 8007bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbc:	1f0c      	subs	r4, r1, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bfb8      	it	lt
 8007bc2:	18e4      	addlt	r4, r4, r3
 8007bc4:	f000 f8e8 	bl	8007d98 <__malloc_lock>
 8007bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c40 <_free_r+0x90>)
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	b933      	cbnz	r3, 8007bdc <_free_r+0x2c>
 8007bce:	6063      	str	r3, [r4, #4]
 8007bd0:	6014      	str	r4, [r2, #0]
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd8:	f000 b8e4 	b.w	8007da4 <__malloc_unlock>
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	d908      	bls.n	8007bf2 <_free_r+0x42>
 8007be0:	6820      	ldr	r0, [r4, #0]
 8007be2:	1821      	adds	r1, r4, r0
 8007be4:	428b      	cmp	r3, r1
 8007be6:	bf01      	itttt	eq
 8007be8:	6819      	ldreq	r1, [r3, #0]
 8007bea:	685b      	ldreq	r3, [r3, #4]
 8007bec:	1809      	addeq	r1, r1, r0
 8007bee:	6021      	streq	r1, [r4, #0]
 8007bf0:	e7ed      	b.n	8007bce <_free_r+0x1e>
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	b10b      	cbz	r3, 8007bfc <_free_r+0x4c>
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d9fa      	bls.n	8007bf2 <_free_r+0x42>
 8007bfc:	6811      	ldr	r1, [r2, #0]
 8007bfe:	1850      	adds	r0, r2, r1
 8007c00:	42a0      	cmp	r0, r4
 8007c02:	d10b      	bne.n	8007c1c <_free_r+0x6c>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	4401      	add	r1, r0
 8007c08:	1850      	adds	r0, r2, r1
 8007c0a:	4283      	cmp	r3, r0
 8007c0c:	6011      	str	r1, [r2, #0]
 8007c0e:	d1e0      	bne.n	8007bd2 <_free_r+0x22>
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	6053      	str	r3, [r2, #4]
 8007c16:	4408      	add	r0, r1
 8007c18:	6010      	str	r0, [r2, #0]
 8007c1a:	e7da      	b.n	8007bd2 <_free_r+0x22>
 8007c1c:	d902      	bls.n	8007c24 <_free_r+0x74>
 8007c1e:	230c      	movs	r3, #12
 8007c20:	602b      	str	r3, [r5, #0]
 8007c22:	e7d6      	b.n	8007bd2 <_free_r+0x22>
 8007c24:	6820      	ldr	r0, [r4, #0]
 8007c26:	1821      	adds	r1, r4, r0
 8007c28:	428b      	cmp	r3, r1
 8007c2a:	bf04      	itt	eq
 8007c2c:	6819      	ldreq	r1, [r3, #0]
 8007c2e:	685b      	ldreq	r3, [r3, #4]
 8007c30:	6063      	str	r3, [r4, #4]
 8007c32:	bf04      	itt	eq
 8007c34:	1809      	addeq	r1, r1, r0
 8007c36:	6021      	streq	r1, [r4, #0]
 8007c38:	6054      	str	r4, [r2, #4]
 8007c3a:	e7ca      	b.n	8007bd2 <_free_r+0x22>
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	bf00      	nop
 8007c40:	2000af8c 	.word	0x2000af8c

08007c44 <malloc>:
 8007c44:	4b02      	ldr	r3, [pc, #8]	@ (8007c50 <malloc+0xc>)
 8007c46:	4601      	mov	r1, r0
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f000 b825 	b.w	8007c98 <_malloc_r>
 8007c4e:	bf00      	nop
 8007c50:	20000220 	.word	0x20000220

08007c54 <sbrk_aligned>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4e0f      	ldr	r6, [pc, #60]	@ (8007c94 <sbrk_aligned+0x40>)
 8007c58:	460c      	mov	r4, r1
 8007c5a:	6831      	ldr	r1, [r6, #0]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b911      	cbnz	r1, 8007c66 <sbrk_aligned+0x12>
 8007c60:	f000 fc3c 	bl	80084dc <_sbrk_r>
 8007c64:	6030      	str	r0, [r6, #0]
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 fc37 	bl	80084dc <_sbrk_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	d103      	bne.n	8007c7a <sbrk_aligned+0x26>
 8007c72:	f04f 34ff 	mov.w	r4, #4294967295
 8007c76:	4620      	mov	r0, r4
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
 8007c7a:	1cc4      	adds	r4, r0, #3
 8007c7c:	f024 0403 	bic.w	r4, r4, #3
 8007c80:	42a0      	cmp	r0, r4
 8007c82:	d0f8      	beq.n	8007c76 <sbrk_aligned+0x22>
 8007c84:	1a21      	subs	r1, r4, r0
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 fc28 	bl	80084dc <_sbrk_r>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d1f2      	bne.n	8007c76 <sbrk_aligned+0x22>
 8007c90:	e7ef      	b.n	8007c72 <sbrk_aligned+0x1e>
 8007c92:	bf00      	nop
 8007c94:	2000af88 	.word	0x2000af88

08007c98 <_malloc_r>:
 8007c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c9c:	1ccd      	adds	r5, r1, #3
 8007c9e:	f025 0503 	bic.w	r5, r5, #3
 8007ca2:	3508      	adds	r5, #8
 8007ca4:	2d0c      	cmp	r5, #12
 8007ca6:	bf38      	it	cc
 8007ca8:	250c      	movcc	r5, #12
 8007caa:	2d00      	cmp	r5, #0
 8007cac:	4606      	mov	r6, r0
 8007cae:	db01      	blt.n	8007cb4 <_malloc_r+0x1c>
 8007cb0:	42a9      	cmp	r1, r5
 8007cb2:	d904      	bls.n	8007cbe <_malloc_r+0x26>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	6033      	str	r3, [r6, #0]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d94 <_malloc_r+0xfc>
 8007cc2:	f000 f869 	bl	8007d98 <__malloc_lock>
 8007cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cca:	461c      	mov	r4, r3
 8007ccc:	bb44      	cbnz	r4, 8007d20 <_malloc_r+0x88>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff ffbf 	bl	8007c54 <sbrk_aligned>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	4604      	mov	r4, r0
 8007cda:	d158      	bne.n	8007d8e <_malloc_r+0xf6>
 8007cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ce0:	4627      	mov	r7, r4
 8007ce2:	2f00      	cmp	r7, #0
 8007ce4:	d143      	bne.n	8007d6e <_malloc_r+0xd6>
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	d04b      	beq.n	8007d82 <_malloc_r+0xea>
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	4639      	mov	r1, r7
 8007cee:	4630      	mov	r0, r6
 8007cf0:	eb04 0903 	add.w	r9, r4, r3
 8007cf4:	f000 fbf2 	bl	80084dc <_sbrk_r>
 8007cf8:	4581      	cmp	r9, r0
 8007cfa:	d142      	bne.n	8007d82 <_malloc_r+0xea>
 8007cfc:	6821      	ldr	r1, [r4, #0]
 8007cfe:	1a6d      	subs	r5, r5, r1
 8007d00:	4629      	mov	r1, r5
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ffa6 	bl	8007c54 <sbrk_aligned>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d03a      	beq.n	8007d82 <_malloc_r+0xea>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	442b      	add	r3, r5
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	f8d8 3000 	ldr.w	r3, [r8]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	bb62      	cbnz	r2, 8007d74 <_malloc_r+0xdc>
 8007d1a:	f8c8 7000 	str.w	r7, [r8]
 8007d1e:	e00f      	b.n	8007d40 <_malloc_r+0xa8>
 8007d20:	6822      	ldr	r2, [r4, #0]
 8007d22:	1b52      	subs	r2, r2, r5
 8007d24:	d420      	bmi.n	8007d68 <_malloc_r+0xd0>
 8007d26:	2a0b      	cmp	r2, #11
 8007d28:	d917      	bls.n	8007d5a <_malloc_r+0xc2>
 8007d2a:	1961      	adds	r1, r4, r5
 8007d2c:	42a3      	cmp	r3, r4
 8007d2e:	6025      	str	r5, [r4, #0]
 8007d30:	bf18      	it	ne
 8007d32:	6059      	strne	r1, [r3, #4]
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	bf08      	it	eq
 8007d38:	f8c8 1000 	streq.w	r1, [r8]
 8007d3c:	5162      	str	r2, [r4, r5]
 8007d3e:	604b      	str	r3, [r1, #4]
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 f82f 	bl	8007da4 <__malloc_unlock>
 8007d46:	f104 000b 	add.w	r0, r4, #11
 8007d4a:	1d23      	adds	r3, r4, #4
 8007d4c:	f020 0007 	bic.w	r0, r0, #7
 8007d50:	1ac2      	subs	r2, r0, r3
 8007d52:	bf1c      	itt	ne
 8007d54:	1a1b      	subne	r3, r3, r0
 8007d56:	50a3      	strne	r3, [r4, r2]
 8007d58:	e7af      	b.n	8007cba <_malloc_r+0x22>
 8007d5a:	6862      	ldr	r2, [r4, #4]
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	bf0c      	ite	eq
 8007d60:	f8c8 2000 	streq.w	r2, [r8]
 8007d64:	605a      	strne	r2, [r3, #4]
 8007d66:	e7eb      	b.n	8007d40 <_malloc_r+0xa8>
 8007d68:	4623      	mov	r3, r4
 8007d6a:	6864      	ldr	r4, [r4, #4]
 8007d6c:	e7ae      	b.n	8007ccc <_malloc_r+0x34>
 8007d6e:	463c      	mov	r4, r7
 8007d70:	687f      	ldr	r7, [r7, #4]
 8007d72:	e7b6      	b.n	8007ce2 <_malloc_r+0x4a>
 8007d74:	461a      	mov	r2, r3
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d1fb      	bne.n	8007d74 <_malloc_r+0xdc>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	6053      	str	r3, [r2, #4]
 8007d80:	e7de      	b.n	8007d40 <_malloc_r+0xa8>
 8007d82:	230c      	movs	r3, #12
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 f80c 	bl	8007da4 <__malloc_unlock>
 8007d8c:	e794      	b.n	8007cb8 <_malloc_r+0x20>
 8007d8e:	6005      	str	r5, [r0, #0]
 8007d90:	e7d6      	b.n	8007d40 <_malloc_r+0xa8>
 8007d92:	bf00      	nop
 8007d94:	2000af8c 	.word	0x2000af8c

08007d98 <__malloc_lock>:
 8007d98:	4801      	ldr	r0, [pc, #4]	@ (8007da0 <__malloc_lock+0x8>)
 8007d9a:	f7ff beda 	b.w	8007b52 <__retarget_lock_acquire_recursive>
 8007d9e:	bf00      	nop
 8007da0:	2000af84 	.word	0x2000af84

08007da4 <__malloc_unlock>:
 8007da4:	4801      	ldr	r0, [pc, #4]	@ (8007dac <__malloc_unlock+0x8>)
 8007da6:	f7ff bed5 	b.w	8007b54 <__retarget_lock_release_recursive>
 8007daa:	bf00      	nop
 8007dac:	2000af84 	.word	0x2000af84

08007db0 <__ssputs_r>:
 8007db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	688e      	ldr	r6, [r1, #8]
 8007db6:	461f      	mov	r7, r3
 8007db8:	42be      	cmp	r6, r7
 8007dba:	680b      	ldr	r3, [r1, #0]
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	4690      	mov	r8, r2
 8007dc2:	d82d      	bhi.n	8007e20 <__ssputs_r+0x70>
 8007dc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007dcc:	d026      	beq.n	8007e1c <__ssputs_r+0x6c>
 8007dce:	6965      	ldr	r5, [r4, #20]
 8007dd0:	6909      	ldr	r1, [r1, #16]
 8007dd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dd6:	eba3 0901 	sub.w	r9, r3, r1
 8007dda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dde:	1c7b      	adds	r3, r7, #1
 8007de0:	444b      	add	r3, r9
 8007de2:	106d      	asrs	r5, r5, #1
 8007de4:	429d      	cmp	r5, r3
 8007de6:	bf38      	it	cc
 8007de8:	461d      	movcc	r5, r3
 8007dea:	0553      	lsls	r3, r2, #21
 8007dec:	d527      	bpl.n	8007e3e <__ssputs_r+0x8e>
 8007dee:	4629      	mov	r1, r5
 8007df0:	f7ff ff52 	bl	8007c98 <_malloc_r>
 8007df4:	4606      	mov	r6, r0
 8007df6:	b360      	cbz	r0, 8007e52 <__ssputs_r+0xa2>
 8007df8:	6921      	ldr	r1, [r4, #16]
 8007dfa:	464a      	mov	r2, r9
 8007dfc:	f7ff feab 	bl	8007b56 <memcpy>
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	6126      	str	r6, [r4, #16]
 8007e0e:	6165      	str	r5, [r4, #20]
 8007e10:	444e      	add	r6, r9
 8007e12:	eba5 0509 	sub.w	r5, r5, r9
 8007e16:	6026      	str	r6, [r4, #0]
 8007e18:	60a5      	str	r5, [r4, #8]
 8007e1a:	463e      	mov	r6, r7
 8007e1c:	42be      	cmp	r6, r7
 8007e1e:	d900      	bls.n	8007e22 <__ssputs_r+0x72>
 8007e20:	463e      	mov	r6, r7
 8007e22:	6820      	ldr	r0, [r4, #0]
 8007e24:	4632      	mov	r2, r6
 8007e26:	4641      	mov	r1, r8
 8007e28:	f000 fb1c 	bl	8008464 <memmove>
 8007e2c:	68a3      	ldr	r3, [r4, #8]
 8007e2e:	1b9b      	subs	r3, r3, r6
 8007e30:	60a3      	str	r3, [r4, #8]
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	4433      	add	r3, r6
 8007e36:	6023      	str	r3, [r4, #0]
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3e:	462a      	mov	r2, r5
 8007e40:	f000 fb63 	bl	800850a <_realloc_r>
 8007e44:	4606      	mov	r6, r0
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d1e0      	bne.n	8007e0c <__ssputs_r+0x5c>
 8007e4a:	6921      	ldr	r1, [r4, #16]
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f7ff feaf 	bl	8007bb0 <_free_r>
 8007e52:	230c      	movs	r3, #12
 8007e54:	f8ca 3000 	str.w	r3, [sl]
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e7e9      	b.n	8007e3a <__ssputs_r+0x8a>
	...

08007e68 <_svfiprintf_r>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	4698      	mov	r8, r3
 8007e6e:	898b      	ldrh	r3, [r1, #12]
 8007e70:	061b      	lsls	r3, r3, #24
 8007e72:	b09d      	sub	sp, #116	@ 0x74
 8007e74:	4607      	mov	r7, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	4614      	mov	r4, r2
 8007e7a:	d510      	bpl.n	8007e9e <_svfiprintf_r+0x36>
 8007e7c:	690b      	ldr	r3, [r1, #16]
 8007e7e:	b973      	cbnz	r3, 8007e9e <_svfiprintf_r+0x36>
 8007e80:	2140      	movs	r1, #64	@ 0x40
 8007e82:	f7ff ff09 	bl	8007c98 <_malloc_r>
 8007e86:	6028      	str	r0, [r5, #0]
 8007e88:	6128      	str	r0, [r5, #16]
 8007e8a:	b930      	cbnz	r0, 8007e9a <_svfiprintf_r+0x32>
 8007e8c:	230c      	movs	r3, #12
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	b01d      	add	sp, #116	@ 0x74
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	2340      	movs	r3, #64	@ 0x40
 8007e9c:	616b      	str	r3, [r5, #20]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea2:	2320      	movs	r3, #32
 8007ea4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eac:	2330      	movs	r3, #48	@ 0x30
 8007eae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800804c <_svfiprintf_r+0x1e4>
 8007eb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eb6:	f04f 0901 	mov.w	r9, #1
 8007eba:	4623      	mov	r3, r4
 8007ebc:	469a      	mov	sl, r3
 8007ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec2:	b10a      	cbz	r2, 8007ec8 <_svfiprintf_r+0x60>
 8007ec4:	2a25      	cmp	r2, #37	@ 0x25
 8007ec6:	d1f9      	bne.n	8007ebc <_svfiprintf_r+0x54>
 8007ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8007ecc:	d00b      	beq.n	8007ee6 <_svfiprintf_r+0x7e>
 8007ece:	465b      	mov	r3, fp
 8007ed0:	4622      	mov	r2, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7ff ff6b 	bl	8007db0 <__ssputs_r>
 8007eda:	3001      	adds	r0, #1
 8007edc:	f000 80a7 	beq.w	800802e <_svfiprintf_r+0x1c6>
 8007ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ee2:	445a      	add	r2, fp
 8007ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 809f 	beq.w	800802e <_svfiprintf_r+0x1c6>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007efa:	f10a 0a01 	add.w	sl, sl, #1
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f06:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f08:	4654      	mov	r4, sl
 8007f0a:	2205      	movs	r2, #5
 8007f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f10:	484e      	ldr	r0, [pc, #312]	@ (800804c <_svfiprintf_r+0x1e4>)
 8007f12:	f7f8 f965 	bl	80001e0 <memchr>
 8007f16:	9a04      	ldr	r2, [sp, #16]
 8007f18:	b9d8      	cbnz	r0, 8007f52 <_svfiprintf_r+0xea>
 8007f1a:	06d0      	lsls	r0, r2, #27
 8007f1c:	bf44      	itt	mi
 8007f1e:	2320      	movmi	r3, #32
 8007f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f24:	0711      	lsls	r1, r2, #28
 8007f26:	bf44      	itt	mi
 8007f28:	232b      	movmi	r3, #43	@ 0x2b
 8007f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f34:	d015      	beq.n	8007f62 <_svfiprintf_r+0xfa>
 8007f36:	9a07      	ldr	r2, [sp, #28]
 8007f38:	4654      	mov	r4, sl
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f04f 0c0a 	mov.w	ip, #10
 8007f40:	4621      	mov	r1, r4
 8007f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f46:	3b30      	subs	r3, #48	@ 0x30
 8007f48:	2b09      	cmp	r3, #9
 8007f4a:	d94b      	bls.n	8007fe4 <_svfiprintf_r+0x17c>
 8007f4c:	b1b0      	cbz	r0, 8007f7c <_svfiprintf_r+0x114>
 8007f4e:	9207      	str	r2, [sp, #28]
 8007f50:	e014      	b.n	8007f7c <_svfiprintf_r+0x114>
 8007f52:	eba0 0308 	sub.w	r3, r0, r8
 8007f56:	fa09 f303 	lsl.w	r3, r9, r3
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	46a2      	mov	sl, r4
 8007f60:	e7d2      	b.n	8007f08 <_svfiprintf_r+0xa0>
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	1d19      	adds	r1, r3, #4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	9103      	str	r1, [sp, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bfbb      	ittet	lt
 8007f6e:	425b      	neglt	r3, r3
 8007f70:	f042 0202 	orrlt.w	r2, r2, #2
 8007f74:	9307      	strge	r3, [sp, #28]
 8007f76:	9307      	strlt	r3, [sp, #28]
 8007f78:	bfb8      	it	lt
 8007f7a:	9204      	strlt	r2, [sp, #16]
 8007f7c:	7823      	ldrb	r3, [r4, #0]
 8007f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f80:	d10a      	bne.n	8007f98 <_svfiprintf_r+0x130>
 8007f82:	7863      	ldrb	r3, [r4, #1]
 8007f84:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f86:	d132      	bne.n	8007fee <_svfiprintf_r+0x186>
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	9203      	str	r2, [sp, #12]
 8007f90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f94:	3402      	adds	r4, #2
 8007f96:	9305      	str	r3, [sp, #20]
 8007f98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800805c <_svfiprintf_r+0x1f4>
 8007f9c:	7821      	ldrb	r1, [r4, #0]
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	4650      	mov	r0, sl
 8007fa2:	f7f8 f91d 	bl	80001e0 <memchr>
 8007fa6:	b138      	cbz	r0, 8007fb8 <_svfiprintf_r+0x150>
 8007fa8:	9b04      	ldr	r3, [sp, #16]
 8007faa:	eba0 000a 	sub.w	r0, r0, sl
 8007fae:	2240      	movs	r2, #64	@ 0x40
 8007fb0:	4082      	lsls	r2, r0
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	3401      	adds	r4, #1
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbc:	4824      	ldr	r0, [pc, #144]	@ (8008050 <_svfiprintf_r+0x1e8>)
 8007fbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fc2:	2206      	movs	r2, #6
 8007fc4:	f7f8 f90c 	bl	80001e0 <memchr>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d036      	beq.n	800803a <_svfiprintf_r+0x1d2>
 8007fcc:	4b21      	ldr	r3, [pc, #132]	@ (8008054 <_svfiprintf_r+0x1ec>)
 8007fce:	bb1b      	cbnz	r3, 8008018 <_svfiprintf_r+0x1b0>
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	3307      	adds	r3, #7
 8007fd4:	f023 0307 	bic.w	r3, r3, #7
 8007fd8:	3308      	adds	r3, #8
 8007fda:	9303      	str	r3, [sp, #12]
 8007fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fde:	4433      	add	r3, r6
 8007fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe2:	e76a      	b.n	8007eba <_svfiprintf_r+0x52>
 8007fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe8:	460c      	mov	r4, r1
 8007fea:	2001      	movs	r0, #1
 8007fec:	e7a8      	b.n	8007f40 <_svfiprintf_r+0xd8>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	3401      	adds	r4, #1
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	f04f 0c0a 	mov.w	ip, #10
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008000:	3a30      	subs	r2, #48	@ 0x30
 8008002:	2a09      	cmp	r2, #9
 8008004:	d903      	bls.n	800800e <_svfiprintf_r+0x1a6>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0c6      	beq.n	8007f98 <_svfiprintf_r+0x130>
 800800a:	9105      	str	r1, [sp, #20]
 800800c:	e7c4      	b.n	8007f98 <_svfiprintf_r+0x130>
 800800e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008012:	4604      	mov	r4, r0
 8008014:	2301      	movs	r3, #1
 8008016:	e7f0      	b.n	8007ffa <_svfiprintf_r+0x192>
 8008018:	ab03      	add	r3, sp, #12
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	462a      	mov	r2, r5
 800801e:	4b0e      	ldr	r3, [pc, #56]	@ (8008058 <_svfiprintf_r+0x1f0>)
 8008020:	a904      	add	r1, sp, #16
 8008022:	4638      	mov	r0, r7
 8008024:	f3af 8000 	nop.w
 8008028:	1c42      	adds	r2, r0, #1
 800802a:	4606      	mov	r6, r0
 800802c:	d1d6      	bne.n	8007fdc <_svfiprintf_r+0x174>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	065b      	lsls	r3, r3, #25
 8008032:	f53f af2d 	bmi.w	8007e90 <_svfiprintf_r+0x28>
 8008036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008038:	e72c      	b.n	8007e94 <_svfiprintf_r+0x2c>
 800803a:	ab03      	add	r3, sp, #12
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	462a      	mov	r2, r5
 8008040:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <_svfiprintf_r+0x1f0>)
 8008042:	a904      	add	r1, sp, #16
 8008044:	4638      	mov	r0, r7
 8008046:	f000 f879 	bl	800813c <_printf_i>
 800804a:	e7ed      	b.n	8008028 <_svfiprintf_r+0x1c0>
 800804c:	080120de 	.word	0x080120de
 8008050:	080120e8 	.word	0x080120e8
 8008054:	00000000 	.word	0x00000000
 8008058:	08007db1 	.word	0x08007db1
 800805c:	080120e4 	.word	0x080120e4

08008060 <_printf_common>:
 8008060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	4616      	mov	r6, r2
 8008066:	4698      	mov	r8, r3
 8008068:	688a      	ldr	r2, [r1, #8]
 800806a:	690b      	ldr	r3, [r1, #16]
 800806c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008070:	4293      	cmp	r3, r2
 8008072:	bfb8      	it	lt
 8008074:	4613      	movlt	r3, r2
 8008076:	6033      	str	r3, [r6, #0]
 8008078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800807c:	4607      	mov	r7, r0
 800807e:	460c      	mov	r4, r1
 8008080:	b10a      	cbz	r2, 8008086 <_printf_common+0x26>
 8008082:	3301      	adds	r3, #1
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	0699      	lsls	r1, r3, #26
 800808a:	bf42      	ittt	mi
 800808c:	6833      	ldrmi	r3, [r6, #0]
 800808e:	3302      	addmi	r3, #2
 8008090:	6033      	strmi	r3, [r6, #0]
 8008092:	6825      	ldr	r5, [r4, #0]
 8008094:	f015 0506 	ands.w	r5, r5, #6
 8008098:	d106      	bne.n	80080a8 <_printf_common+0x48>
 800809a:	f104 0a19 	add.w	sl, r4, #25
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	6832      	ldr	r2, [r6, #0]
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc26      	bgt.n	80080f6 <_printf_common+0x96>
 80080a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	3b00      	subs	r3, #0
 80080b0:	bf18      	it	ne
 80080b2:	2301      	movne	r3, #1
 80080b4:	0692      	lsls	r2, r2, #26
 80080b6:	d42b      	bmi.n	8008110 <_printf_common+0xb0>
 80080b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080bc:	4641      	mov	r1, r8
 80080be:	4638      	mov	r0, r7
 80080c0:	47c8      	blx	r9
 80080c2:	3001      	adds	r0, #1
 80080c4:	d01e      	beq.n	8008104 <_printf_common+0xa4>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	f003 0306 	and.w	r3, r3, #6
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	bf02      	ittt	eq
 80080d2:	68e5      	ldreq	r5, [r4, #12]
 80080d4:	6833      	ldreq	r3, [r6, #0]
 80080d6:	1aed      	subeq	r5, r5, r3
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	bf0c      	ite	eq
 80080dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e0:	2500      	movne	r5, #0
 80080e2:	4293      	cmp	r3, r2
 80080e4:	bfc4      	itt	gt
 80080e6:	1a9b      	subgt	r3, r3, r2
 80080e8:	18ed      	addgt	r5, r5, r3
 80080ea:	2600      	movs	r6, #0
 80080ec:	341a      	adds	r4, #26
 80080ee:	42b5      	cmp	r5, r6
 80080f0:	d11a      	bne.n	8008128 <_printf_common+0xc8>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e008      	b.n	8008108 <_printf_common+0xa8>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4652      	mov	r2, sl
 80080fa:	4641      	mov	r1, r8
 80080fc:	4638      	mov	r0, r7
 80080fe:	47c8      	blx	r9
 8008100:	3001      	adds	r0, #1
 8008102:	d103      	bne.n	800810c <_printf_common+0xac>
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810c:	3501      	adds	r5, #1
 800810e:	e7c6      	b.n	800809e <_printf_common+0x3e>
 8008110:	18e1      	adds	r1, r4, r3
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	2030      	movs	r0, #48	@ 0x30
 8008116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800811a:	4422      	add	r2, r4
 800811c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008124:	3302      	adds	r3, #2
 8008126:	e7c7      	b.n	80080b8 <_printf_common+0x58>
 8008128:	2301      	movs	r3, #1
 800812a:	4622      	mov	r2, r4
 800812c:	4641      	mov	r1, r8
 800812e:	4638      	mov	r0, r7
 8008130:	47c8      	blx	r9
 8008132:	3001      	adds	r0, #1
 8008134:	d0e6      	beq.n	8008104 <_printf_common+0xa4>
 8008136:	3601      	adds	r6, #1
 8008138:	e7d9      	b.n	80080ee <_printf_common+0x8e>
	...

0800813c <_printf_i>:
 800813c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	7e0f      	ldrb	r7, [r1, #24]
 8008142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008144:	2f78      	cmp	r7, #120	@ 0x78
 8008146:	4691      	mov	r9, r2
 8008148:	4680      	mov	r8, r0
 800814a:	460c      	mov	r4, r1
 800814c:	469a      	mov	sl, r3
 800814e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008152:	d807      	bhi.n	8008164 <_printf_i+0x28>
 8008154:	2f62      	cmp	r7, #98	@ 0x62
 8008156:	d80a      	bhi.n	800816e <_printf_i+0x32>
 8008158:	2f00      	cmp	r7, #0
 800815a:	f000 80d2 	beq.w	8008302 <_printf_i+0x1c6>
 800815e:	2f58      	cmp	r7, #88	@ 0x58
 8008160:	f000 80b9 	beq.w	80082d6 <_printf_i+0x19a>
 8008164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800816c:	e03a      	b.n	80081e4 <_printf_i+0xa8>
 800816e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008172:	2b15      	cmp	r3, #21
 8008174:	d8f6      	bhi.n	8008164 <_printf_i+0x28>
 8008176:	a101      	add	r1, pc, #4	@ (adr r1, 800817c <_printf_i+0x40>)
 8008178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800817c:	080081d5 	.word	0x080081d5
 8008180:	080081e9 	.word	0x080081e9
 8008184:	08008165 	.word	0x08008165
 8008188:	08008165 	.word	0x08008165
 800818c:	08008165 	.word	0x08008165
 8008190:	08008165 	.word	0x08008165
 8008194:	080081e9 	.word	0x080081e9
 8008198:	08008165 	.word	0x08008165
 800819c:	08008165 	.word	0x08008165
 80081a0:	08008165 	.word	0x08008165
 80081a4:	08008165 	.word	0x08008165
 80081a8:	080082e9 	.word	0x080082e9
 80081ac:	08008213 	.word	0x08008213
 80081b0:	080082a3 	.word	0x080082a3
 80081b4:	08008165 	.word	0x08008165
 80081b8:	08008165 	.word	0x08008165
 80081bc:	0800830b 	.word	0x0800830b
 80081c0:	08008165 	.word	0x08008165
 80081c4:	08008213 	.word	0x08008213
 80081c8:	08008165 	.word	0x08008165
 80081cc:	08008165 	.word	0x08008165
 80081d0:	080082ab 	.word	0x080082ab
 80081d4:	6833      	ldr	r3, [r6, #0]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6032      	str	r2, [r6, #0]
 80081dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081e4:	2301      	movs	r3, #1
 80081e6:	e09d      	b.n	8008324 <_printf_i+0x1e8>
 80081e8:	6833      	ldr	r3, [r6, #0]
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	1d19      	adds	r1, r3, #4
 80081ee:	6031      	str	r1, [r6, #0]
 80081f0:	0606      	lsls	r6, r0, #24
 80081f2:	d501      	bpl.n	80081f8 <_printf_i+0xbc>
 80081f4:	681d      	ldr	r5, [r3, #0]
 80081f6:	e003      	b.n	8008200 <_printf_i+0xc4>
 80081f8:	0645      	lsls	r5, r0, #25
 80081fa:	d5fb      	bpl.n	80081f4 <_printf_i+0xb8>
 80081fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008200:	2d00      	cmp	r5, #0
 8008202:	da03      	bge.n	800820c <_printf_i+0xd0>
 8008204:	232d      	movs	r3, #45	@ 0x2d
 8008206:	426d      	negs	r5, r5
 8008208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800820c:	4859      	ldr	r0, [pc, #356]	@ (8008374 <_printf_i+0x238>)
 800820e:	230a      	movs	r3, #10
 8008210:	e011      	b.n	8008236 <_printf_i+0xfa>
 8008212:	6821      	ldr	r1, [r4, #0]
 8008214:	6833      	ldr	r3, [r6, #0]
 8008216:	0608      	lsls	r0, r1, #24
 8008218:	f853 5b04 	ldr.w	r5, [r3], #4
 800821c:	d402      	bmi.n	8008224 <_printf_i+0xe8>
 800821e:	0649      	lsls	r1, r1, #25
 8008220:	bf48      	it	mi
 8008222:	b2ad      	uxthmi	r5, r5
 8008224:	2f6f      	cmp	r7, #111	@ 0x6f
 8008226:	4853      	ldr	r0, [pc, #332]	@ (8008374 <_printf_i+0x238>)
 8008228:	6033      	str	r3, [r6, #0]
 800822a:	bf14      	ite	ne
 800822c:	230a      	movne	r3, #10
 800822e:	2308      	moveq	r3, #8
 8008230:	2100      	movs	r1, #0
 8008232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008236:	6866      	ldr	r6, [r4, #4]
 8008238:	60a6      	str	r6, [r4, #8]
 800823a:	2e00      	cmp	r6, #0
 800823c:	bfa2      	ittt	ge
 800823e:	6821      	ldrge	r1, [r4, #0]
 8008240:	f021 0104 	bicge.w	r1, r1, #4
 8008244:	6021      	strge	r1, [r4, #0]
 8008246:	b90d      	cbnz	r5, 800824c <_printf_i+0x110>
 8008248:	2e00      	cmp	r6, #0
 800824a:	d04b      	beq.n	80082e4 <_printf_i+0x1a8>
 800824c:	4616      	mov	r6, r2
 800824e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008252:	fb03 5711 	mls	r7, r3, r1, r5
 8008256:	5dc7      	ldrb	r7, [r0, r7]
 8008258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800825c:	462f      	mov	r7, r5
 800825e:	42bb      	cmp	r3, r7
 8008260:	460d      	mov	r5, r1
 8008262:	d9f4      	bls.n	800824e <_printf_i+0x112>
 8008264:	2b08      	cmp	r3, #8
 8008266:	d10b      	bne.n	8008280 <_printf_i+0x144>
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	07df      	lsls	r7, r3, #31
 800826c:	d508      	bpl.n	8008280 <_printf_i+0x144>
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	6861      	ldr	r1, [r4, #4]
 8008272:	4299      	cmp	r1, r3
 8008274:	bfde      	ittt	le
 8008276:	2330      	movle	r3, #48	@ 0x30
 8008278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800827c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008280:	1b92      	subs	r2, r2, r6
 8008282:	6122      	str	r2, [r4, #16]
 8008284:	f8cd a000 	str.w	sl, [sp]
 8008288:	464b      	mov	r3, r9
 800828a:	aa03      	add	r2, sp, #12
 800828c:	4621      	mov	r1, r4
 800828e:	4640      	mov	r0, r8
 8008290:	f7ff fee6 	bl	8008060 <_printf_common>
 8008294:	3001      	adds	r0, #1
 8008296:	d14a      	bne.n	800832e <_printf_i+0x1f2>
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	b004      	add	sp, #16
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f043 0320 	orr.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	4833      	ldr	r0, [pc, #204]	@ (8008378 <_printf_i+0x23c>)
 80082ac:	2778      	movs	r7, #120	@ 0x78
 80082ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	6831      	ldr	r1, [r6, #0]
 80082b6:	061f      	lsls	r7, r3, #24
 80082b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80082bc:	d402      	bmi.n	80082c4 <_printf_i+0x188>
 80082be:	065f      	lsls	r7, r3, #25
 80082c0:	bf48      	it	mi
 80082c2:	b2ad      	uxthmi	r5, r5
 80082c4:	6031      	str	r1, [r6, #0]
 80082c6:	07d9      	lsls	r1, r3, #31
 80082c8:	bf44      	itt	mi
 80082ca:	f043 0320 	orrmi.w	r3, r3, #32
 80082ce:	6023      	strmi	r3, [r4, #0]
 80082d0:	b11d      	cbz	r5, 80082da <_printf_i+0x19e>
 80082d2:	2310      	movs	r3, #16
 80082d4:	e7ac      	b.n	8008230 <_printf_i+0xf4>
 80082d6:	4827      	ldr	r0, [pc, #156]	@ (8008374 <_printf_i+0x238>)
 80082d8:	e7e9      	b.n	80082ae <_printf_i+0x172>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f023 0320 	bic.w	r3, r3, #32
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	e7f6      	b.n	80082d2 <_printf_i+0x196>
 80082e4:	4616      	mov	r6, r2
 80082e6:	e7bd      	b.n	8008264 <_printf_i+0x128>
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	6825      	ldr	r5, [r4, #0]
 80082ec:	6961      	ldr	r1, [r4, #20]
 80082ee:	1d18      	adds	r0, r3, #4
 80082f0:	6030      	str	r0, [r6, #0]
 80082f2:	062e      	lsls	r6, r5, #24
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	d501      	bpl.n	80082fc <_printf_i+0x1c0>
 80082f8:	6019      	str	r1, [r3, #0]
 80082fa:	e002      	b.n	8008302 <_printf_i+0x1c6>
 80082fc:	0668      	lsls	r0, r5, #25
 80082fe:	d5fb      	bpl.n	80082f8 <_printf_i+0x1bc>
 8008300:	8019      	strh	r1, [r3, #0]
 8008302:	2300      	movs	r3, #0
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	4616      	mov	r6, r2
 8008308:	e7bc      	b.n	8008284 <_printf_i+0x148>
 800830a:	6833      	ldr	r3, [r6, #0]
 800830c:	1d1a      	adds	r2, r3, #4
 800830e:	6032      	str	r2, [r6, #0]
 8008310:	681e      	ldr	r6, [r3, #0]
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	2100      	movs	r1, #0
 8008316:	4630      	mov	r0, r6
 8008318:	f7f7 ff62 	bl	80001e0 <memchr>
 800831c:	b108      	cbz	r0, 8008322 <_printf_i+0x1e6>
 800831e:	1b80      	subs	r0, r0, r6
 8008320:	6060      	str	r0, [r4, #4]
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	2300      	movs	r3, #0
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800832c:	e7aa      	b.n	8008284 <_printf_i+0x148>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	4632      	mov	r2, r6
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d0ad      	beq.n	8008298 <_printf_i+0x15c>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	079b      	lsls	r3, r3, #30
 8008340:	d413      	bmi.n	800836a <_printf_i+0x22e>
 8008342:	68e0      	ldr	r0, [r4, #12]
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	4298      	cmp	r0, r3
 8008348:	bfb8      	it	lt
 800834a:	4618      	movlt	r0, r3
 800834c:	e7a6      	b.n	800829c <_printf_i+0x160>
 800834e:	2301      	movs	r3, #1
 8008350:	4632      	mov	r2, r6
 8008352:	4649      	mov	r1, r9
 8008354:	4640      	mov	r0, r8
 8008356:	47d0      	blx	sl
 8008358:	3001      	adds	r0, #1
 800835a:	d09d      	beq.n	8008298 <_printf_i+0x15c>
 800835c:	3501      	adds	r5, #1
 800835e:	68e3      	ldr	r3, [r4, #12]
 8008360:	9903      	ldr	r1, [sp, #12]
 8008362:	1a5b      	subs	r3, r3, r1
 8008364:	42ab      	cmp	r3, r5
 8008366:	dcf2      	bgt.n	800834e <_printf_i+0x212>
 8008368:	e7eb      	b.n	8008342 <_printf_i+0x206>
 800836a:	2500      	movs	r5, #0
 800836c:	f104 0619 	add.w	r6, r4, #25
 8008370:	e7f5      	b.n	800835e <_printf_i+0x222>
 8008372:	bf00      	nop
 8008374:	080120ef 	.word	0x080120ef
 8008378:	08012100 	.word	0x08012100

0800837c <fiprintf>:
 800837c:	b40e      	push	{r1, r2, r3}
 800837e:	b503      	push	{r0, r1, lr}
 8008380:	4601      	mov	r1, r0
 8008382:	ab03      	add	r3, sp, #12
 8008384:	4805      	ldr	r0, [pc, #20]	@ (800839c <fiprintf+0x20>)
 8008386:	f853 2b04 	ldr.w	r2, [r3], #4
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	f000 f913 	bl	80085b8 <_vfiprintf_r>
 8008392:	b002      	add	sp, #8
 8008394:	f85d eb04 	ldr.w	lr, [sp], #4
 8008398:	b003      	add	sp, #12
 800839a:	4770      	bx	lr
 800839c:	20000220 	.word	0x20000220

080083a0 <__swhatbuf_r>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	460c      	mov	r4, r1
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	2900      	cmp	r1, #0
 80083aa:	b096      	sub	sp, #88	@ 0x58
 80083ac:	4615      	mov	r5, r2
 80083ae:	461e      	mov	r6, r3
 80083b0:	da0d      	bge.n	80083ce <__swhatbuf_r+0x2e>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083b8:	f04f 0100 	mov.w	r1, #0
 80083bc:	bf14      	ite	ne
 80083be:	2340      	movne	r3, #64	@ 0x40
 80083c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083c4:	2000      	movs	r0, #0
 80083c6:	6031      	str	r1, [r6, #0]
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	b016      	add	sp, #88	@ 0x58
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
 80083ce:	466a      	mov	r2, sp
 80083d0:	f000 f862 	bl	8008498 <_fstat_r>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	dbec      	blt.n	80083b2 <__swhatbuf_r+0x12>
 80083d8:	9901      	ldr	r1, [sp, #4]
 80083da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083e2:	4259      	negs	r1, r3
 80083e4:	4159      	adcs	r1, r3
 80083e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083ea:	e7eb      	b.n	80083c4 <__swhatbuf_r+0x24>

080083ec <__smakebuf_r>:
 80083ec:	898b      	ldrh	r3, [r1, #12]
 80083ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f0:	079d      	lsls	r5, r3, #30
 80083f2:	4606      	mov	r6, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	d507      	bpl.n	8008408 <__smakebuf_r+0x1c>
 80083f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	2301      	movs	r3, #1
 8008402:	6163      	str	r3, [r4, #20]
 8008404:	b003      	add	sp, #12
 8008406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008408:	ab01      	add	r3, sp, #4
 800840a:	466a      	mov	r2, sp
 800840c:	f7ff ffc8 	bl	80083a0 <__swhatbuf_r>
 8008410:	9f00      	ldr	r7, [sp, #0]
 8008412:	4605      	mov	r5, r0
 8008414:	4639      	mov	r1, r7
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff fc3e 	bl	8007c98 <_malloc_r>
 800841c:	b948      	cbnz	r0, 8008432 <__smakebuf_r+0x46>
 800841e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008422:	059a      	lsls	r2, r3, #22
 8008424:	d4ee      	bmi.n	8008404 <__smakebuf_r+0x18>
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	f043 0302 	orr.w	r3, r3, #2
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	e7e2      	b.n	80083f8 <__smakebuf_r+0xc>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	6020      	str	r0, [r4, #0]
 8008436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008442:	b15b      	cbz	r3, 800845c <__smakebuf_r+0x70>
 8008444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008448:	4630      	mov	r0, r6
 800844a:	f000 f837 	bl	80084bc <_isatty_r>
 800844e:	b128      	cbz	r0, 800845c <__smakebuf_r+0x70>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	431d      	orrs	r5, r3
 8008460:	81a5      	strh	r5, [r4, #12]
 8008462:	e7cf      	b.n	8008404 <__smakebuf_r+0x18>

08008464 <memmove>:
 8008464:	4288      	cmp	r0, r1
 8008466:	b510      	push	{r4, lr}
 8008468:	eb01 0402 	add.w	r4, r1, r2
 800846c:	d902      	bls.n	8008474 <memmove+0x10>
 800846e:	4284      	cmp	r4, r0
 8008470:	4623      	mov	r3, r4
 8008472:	d807      	bhi.n	8008484 <memmove+0x20>
 8008474:	1e43      	subs	r3, r0, #1
 8008476:	42a1      	cmp	r1, r4
 8008478:	d008      	beq.n	800848c <memmove+0x28>
 800847a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800847e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008482:	e7f8      	b.n	8008476 <memmove+0x12>
 8008484:	4402      	add	r2, r0
 8008486:	4601      	mov	r1, r0
 8008488:	428a      	cmp	r2, r1
 800848a:	d100      	bne.n	800848e <memmove+0x2a>
 800848c:	bd10      	pop	{r4, pc}
 800848e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008496:	e7f7      	b.n	8008488 <memmove+0x24>

08008498 <_fstat_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d07      	ldr	r5, [pc, #28]	@ (80084b8 <_fstat_r+0x20>)
 800849c:	2300      	movs	r3, #0
 800849e:	4604      	mov	r4, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	f7f9 fc67 	bl	8001d78 <_fstat>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	d102      	bne.n	80084b4 <_fstat_r+0x1c>
 80084ae:	682b      	ldr	r3, [r5, #0]
 80084b0:	b103      	cbz	r3, 80084b4 <_fstat_r+0x1c>
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	bd38      	pop	{r3, r4, r5, pc}
 80084b6:	bf00      	nop
 80084b8:	2000af80 	.word	0x2000af80

080084bc <_isatty_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d06      	ldr	r5, [pc, #24]	@ (80084d8 <_isatty_r+0x1c>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	f7f9 fc66 	bl	8001d98 <_isatty>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	d102      	bne.n	80084d6 <_isatty_r+0x1a>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	b103      	cbz	r3, 80084d6 <_isatty_r+0x1a>
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	2000af80 	.word	0x2000af80

080084dc <_sbrk_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	4d06      	ldr	r5, [pc, #24]	@ (80084f8 <_sbrk_r+0x1c>)
 80084e0:	2300      	movs	r3, #0
 80084e2:	4604      	mov	r4, r0
 80084e4:	4608      	mov	r0, r1
 80084e6:	602b      	str	r3, [r5, #0]
 80084e8:	f7f9 fc6e 	bl	8001dc8 <_sbrk>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d102      	bne.n	80084f6 <_sbrk_r+0x1a>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	b103      	cbz	r3, 80084f6 <_sbrk_r+0x1a>
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	2000af80 	.word	0x2000af80

080084fc <abort>:
 80084fc:	b508      	push	{r3, lr}
 80084fe:	2006      	movs	r0, #6
 8008500:	f000 fa2e 	bl	8008960 <raise>
 8008504:	2001      	movs	r0, #1
 8008506:	f7f9 fbe7 	bl	8001cd8 <_exit>

0800850a <_realloc_r>:
 800850a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850e:	4680      	mov	r8, r0
 8008510:	4615      	mov	r5, r2
 8008512:	460c      	mov	r4, r1
 8008514:	b921      	cbnz	r1, 8008520 <_realloc_r+0x16>
 8008516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800851a:	4611      	mov	r1, r2
 800851c:	f7ff bbbc 	b.w	8007c98 <_malloc_r>
 8008520:	b92a      	cbnz	r2, 800852e <_realloc_r+0x24>
 8008522:	f7ff fb45 	bl	8007bb0 <_free_r>
 8008526:	2400      	movs	r4, #0
 8008528:	4620      	mov	r0, r4
 800852a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800852e:	f000 fa33 	bl	8008998 <_malloc_usable_size_r>
 8008532:	4285      	cmp	r5, r0
 8008534:	4606      	mov	r6, r0
 8008536:	d802      	bhi.n	800853e <_realloc_r+0x34>
 8008538:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800853c:	d8f4      	bhi.n	8008528 <_realloc_r+0x1e>
 800853e:	4629      	mov	r1, r5
 8008540:	4640      	mov	r0, r8
 8008542:	f7ff fba9 	bl	8007c98 <_malloc_r>
 8008546:	4607      	mov	r7, r0
 8008548:	2800      	cmp	r0, #0
 800854a:	d0ec      	beq.n	8008526 <_realloc_r+0x1c>
 800854c:	42b5      	cmp	r5, r6
 800854e:	462a      	mov	r2, r5
 8008550:	4621      	mov	r1, r4
 8008552:	bf28      	it	cs
 8008554:	4632      	movcs	r2, r6
 8008556:	f7ff fafe 	bl	8007b56 <memcpy>
 800855a:	4621      	mov	r1, r4
 800855c:	4640      	mov	r0, r8
 800855e:	f7ff fb27 	bl	8007bb0 <_free_r>
 8008562:	463c      	mov	r4, r7
 8008564:	e7e0      	b.n	8008528 <_realloc_r+0x1e>

08008566 <__sfputc_r>:
 8008566:	6893      	ldr	r3, [r2, #8]
 8008568:	3b01      	subs	r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	b410      	push	{r4}
 800856e:	6093      	str	r3, [r2, #8]
 8008570:	da08      	bge.n	8008584 <__sfputc_r+0x1e>
 8008572:	6994      	ldr	r4, [r2, #24]
 8008574:	42a3      	cmp	r3, r4
 8008576:	db01      	blt.n	800857c <__sfputc_r+0x16>
 8008578:	290a      	cmp	r1, #10
 800857a:	d103      	bne.n	8008584 <__sfputc_r+0x1e>
 800857c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008580:	f000 b932 	b.w	80087e8 <__swbuf_r>
 8008584:	6813      	ldr	r3, [r2, #0]
 8008586:	1c58      	adds	r0, r3, #1
 8008588:	6010      	str	r0, [r2, #0]
 800858a:	7019      	strb	r1, [r3, #0]
 800858c:	4608      	mov	r0, r1
 800858e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008592:	4770      	bx	lr

08008594 <__sfputs_r>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	4606      	mov	r6, r0
 8008598:	460f      	mov	r7, r1
 800859a:	4614      	mov	r4, r2
 800859c:	18d5      	adds	r5, r2, r3
 800859e:	42ac      	cmp	r4, r5
 80085a0:	d101      	bne.n	80085a6 <__sfputs_r+0x12>
 80085a2:	2000      	movs	r0, #0
 80085a4:	e007      	b.n	80085b6 <__sfputs_r+0x22>
 80085a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085aa:	463a      	mov	r2, r7
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ffda 	bl	8008566 <__sfputc_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d1f3      	bne.n	800859e <__sfputs_r+0xa>
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085b8 <_vfiprintf_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	460d      	mov	r5, r1
 80085be:	b09d      	sub	sp, #116	@ 0x74
 80085c0:	4614      	mov	r4, r2
 80085c2:	4698      	mov	r8, r3
 80085c4:	4606      	mov	r6, r0
 80085c6:	b118      	cbz	r0, 80085d0 <_vfiprintf_r+0x18>
 80085c8:	6a03      	ldr	r3, [r0, #32]
 80085ca:	b90b      	cbnz	r3, 80085d0 <_vfiprintf_r+0x18>
 80085cc:	f7ff f8b4 	bl	8007738 <__sinit>
 80085d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085d2:	07d9      	lsls	r1, r3, #31
 80085d4:	d405      	bmi.n	80085e2 <_vfiprintf_r+0x2a>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	059a      	lsls	r2, r3, #22
 80085da:	d402      	bmi.n	80085e2 <_vfiprintf_r+0x2a>
 80085dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085de:	f7ff fab8 	bl	8007b52 <__retarget_lock_acquire_recursive>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	071b      	lsls	r3, r3, #28
 80085e6:	d501      	bpl.n	80085ec <_vfiprintf_r+0x34>
 80085e8:	692b      	ldr	r3, [r5, #16]
 80085ea:	b99b      	cbnz	r3, 8008614 <_vfiprintf_r+0x5c>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4630      	mov	r0, r6
 80085f0:	f000 f938 	bl	8008864 <__swsetup_r>
 80085f4:	b170      	cbz	r0, 8008614 <_vfiprintf_r+0x5c>
 80085f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085f8:	07dc      	lsls	r4, r3, #31
 80085fa:	d504      	bpl.n	8008606 <_vfiprintf_r+0x4e>
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	b01d      	add	sp, #116	@ 0x74
 8008602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	0598      	lsls	r0, r3, #22
 800860a:	d4f7      	bmi.n	80085fc <_vfiprintf_r+0x44>
 800860c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800860e:	f7ff faa1 	bl	8007b54 <__retarget_lock_release_recursive>
 8008612:	e7f3      	b.n	80085fc <_vfiprintf_r+0x44>
 8008614:	2300      	movs	r3, #0
 8008616:	9309      	str	r3, [sp, #36]	@ 0x24
 8008618:	2320      	movs	r3, #32
 800861a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800861e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008622:	2330      	movs	r3, #48	@ 0x30
 8008624:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087d4 <_vfiprintf_r+0x21c>
 8008628:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800862c:	f04f 0901 	mov.w	r9, #1
 8008630:	4623      	mov	r3, r4
 8008632:	469a      	mov	sl, r3
 8008634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008638:	b10a      	cbz	r2, 800863e <_vfiprintf_r+0x86>
 800863a:	2a25      	cmp	r2, #37	@ 0x25
 800863c:	d1f9      	bne.n	8008632 <_vfiprintf_r+0x7a>
 800863e:	ebba 0b04 	subs.w	fp, sl, r4
 8008642:	d00b      	beq.n	800865c <_vfiprintf_r+0xa4>
 8008644:	465b      	mov	r3, fp
 8008646:	4622      	mov	r2, r4
 8008648:	4629      	mov	r1, r5
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ffa2 	bl	8008594 <__sfputs_r>
 8008650:	3001      	adds	r0, #1
 8008652:	f000 80a7 	beq.w	80087a4 <_vfiprintf_r+0x1ec>
 8008656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008658:	445a      	add	r2, fp
 800865a:	9209      	str	r2, [sp, #36]	@ 0x24
 800865c:	f89a 3000 	ldrb.w	r3, [sl]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 809f 	beq.w	80087a4 <_vfiprintf_r+0x1ec>
 8008666:	2300      	movs	r3, #0
 8008668:	f04f 32ff 	mov.w	r2, #4294967295
 800866c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008670:	f10a 0a01 	add.w	sl, sl, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800867c:	931a      	str	r3, [sp, #104]	@ 0x68
 800867e:	4654      	mov	r4, sl
 8008680:	2205      	movs	r2, #5
 8008682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008686:	4853      	ldr	r0, [pc, #332]	@ (80087d4 <_vfiprintf_r+0x21c>)
 8008688:	f7f7 fdaa 	bl	80001e0 <memchr>
 800868c:	9a04      	ldr	r2, [sp, #16]
 800868e:	b9d8      	cbnz	r0, 80086c8 <_vfiprintf_r+0x110>
 8008690:	06d1      	lsls	r1, r2, #27
 8008692:	bf44      	itt	mi
 8008694:	2320      	movmi	r3, #32
 8008696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800869a:	0713      	lsls	r3, r2, #28
 800869c:	bf44      	itt	mi
 800869e:	232b      	movmi	r3, #43	@ 0x2b
 80086a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086aa:	d015      	beq.n	80086d8 <_vfiprintf_r+0x120>
 80086ac:	9a07      	ldr	r2, [sp, #28]
 80086ae:	4654      	mov	r4, sl
 80086b0:	2000      	movs	r0, #0
 80086b2:	f04f 0c0a 	mov.w	ip, #10
 80086b6:	4621      	mov	r1, r4
 80086b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086bc:	3b30      	subs	r3, #48	@ 0x30
 80086be:	2b09      	cmp	r3, #9
 80086c0:	d94b      	bls.n	800875a <_vfiprintf_r+0x1a2>
 80086c2:	b1b0      	cbz	r0, 80086f2 <_vfiprintf_r+0x13a>
 80086c4:	9207      	str	r2, [sp, #28]
 80086c6:	e014      	b.n	80086f2 <_vfiprintf_r+0x13a>
 80086c8:	eba0 0308 	sub.w	r3, r0, r8
 80086cc:	fa09 f303 	lsl.w	r3, r9, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	46a2      	mov	sl, r4
 80086d6:	e7d2      	b.n	800867e <_vfiprintf_r+0xc6>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	1d19      	adds	r1, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	9103      	str	r1, [sp, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfbb      	ittet	lt
 80086e4:	425b      	neglt	r3, r3
 80086e6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ea:	9307      	strge	r3, [sp, #28]
 80086ec:	9307      	strlt	r3, [sp, #28]
 80086ee:	bfb8      	it	lt
 80086f0:	9204      	strlt	r2, [sp, #16]
 80086f2:	7823      	ldrb	r3, [r4, #0]
 80086f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80086f6:	d10a      	bne.n	800870e <_vfiprintf_r+0x156>
 80086f8:	7863      	ldrb	r3, [r4, #1]
 80086fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80086fc:	d132      	bne.n	8008764 <_vfiprintf_r+0x1ac>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	1d1a      	adds	r2, r3, #4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	9203      	str	r2, [sp, #12]
 8008706:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800870a:	3402      	adds	r4, #2
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087e4 <_vfiprintf_r+0x22c>
 8008712:	7821      	ldrb	r1, [r4, #0]
 8008714:	2203      	movs	r2, #3
 8008716:	4650      	mov	r0, sl
 8008718:	f7f7 fd62 	bl	80001e0 <memchr>
 800871c:	b138      	cbz	r0, 800872e <_vfiprintf_r+0x176>
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	eba0 000a 	sub.w	r0, r0, sl
 8008724:	2240      	movs	r2, #64	@ 0x40
 8008726:	4082      	lsls	r2, r0
 8008728:	4313      	orrs	r3, r2
 800872a:	3401      	adds	r4, #1
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008732:	4829      	ldr	r0, [pc, #164]	@ (80087d8 <_vfiprintf_r+0x220>)
 8008734:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008738:	2206      	movs	r2, #6
 800873a:	f7f7 fd51 	bl	80001e0 <memchr>
 800873e:	2800      	cmp	r0, #0
 8008740:	d03f      	beq.n	80087c2 <_vfiprintf_r+0x20a>
 8008742:	4b26      	ldr	r3, [pc, #152]	@ (80087dc <_vfiprintf_r+0x224>)
 8008744:	bb1b      	cbnz	r3, 800878e <_vfiprintf_r+0x1d6>
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	3307      	adds	r3, #7
 800874a:	f023 0307 	bic.w	r3, r3, #7
 800874e:	3308      	adds	r3, #8
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008754:	443b      	add	r3, r7
 8008756:	9309      	str	r3, [sp, #36]	@ 0x24
 8008758:	e76a      	b.n	8008630 <_vfiprintf_r+0x78>
 800875a:	fb0c 3202 	mla	r2, ip, r2, r3
 800875e:	460c      	mov	r4, r1
 8008760:	2001      	movs	r0, #1
 8008762:	e7a8      	b.n	80086b6 <_vfiprintf_r+0xfe>
 8008764:	2300      	movs	r3, #0
 8008766:	3401      	adds	r4, #1
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	4619      	mov	r1, r3
 800876c:	f04f 0c0a 	mov.w	ip, #10
 8008770:	4620      	mov	r0, r4
 8008772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008776:	3a30      	subs	r2, #48	@ 0x30
 8008778:	2a09      	cmp	r2, #9
 800877a:	d903      	bls.n	8008784 <_vfiprintf_r+0x1cc>
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0c6      	beq.n	800870e <_vfiprintf_r+0x156>
 8008780:	9105      	str	r1, [sp, #20]
 8008782:	e7c4      	b.n	800870e <_vfiprintf_r+0x156>
 8008784:	fb0c 2101 	mla	r1, ip, r1, r2
 8008788:	4604      	mov	r4, r0
 800878a:	2301      	movs	r3, #1
 800878c:	e7f0      	b.n	8008770 <_vfiprintf_r+0x1b8>
 800878e:	ab03      	add	r3, sp, #12
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	462a      	mov	r2, r5
 8008794:	4b12      	ldr	r3, [pc, #72]	@ (80087e0 <_vfiprintf_r+0x228>)
 8008796:	a904      	add	r1, sp, #16
 8008798:	4630      	mov	r0, r6
 800879a:	f3af 8000 	nop.w
 800879e:	4607      	mov	r7, r0
 80087a0:	1c78      	adds	r0, r7, #1
 80087a2:	d1d6      	bne.n	8008752 <_vfiprintf_r+0x19a>
 80087a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a6:	07d9      	lsls	r1, r3, #31
 80087a8:	d405      	bmi.n	80087b6 <_vfiprintf_r+0x1fe>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	059a      	lsls	r2, r3, #22
 80087ae:	d402      	bmi.n	80087b6 <_vfiprintf_r+0x1fe>
 80087b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087b2:	f7ff f9cf 	bl	8007b54 <__retarget_lock_release_recursive>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	065b      	lsls	r3, r3, #25
 80087ba:	f53f af1f 	bmi.w	80085fc <_vfiprintf_r+0x44>
 80087be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c0:	e71e      	b.n	8008600 <_vfiprintf_r+0x48>
 80087c2:	ab03      	add	r3, sp, #12
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	462a      	mov	r2, r5
 80087c8:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <_vfiprintf_r+0x228>)
 80087ca:	a904      	add	r1, sp, #16
 80087cc:	4630      	mov	r0, r6
 80087ce:	f7ff fcb5 	bl	800813c <_printf_i>
 80087d2:	e7e4      	b.n	800879e <_vfiprintf_r+0x1e6>
 80087d4:	080120de 	.word	0x080120de
 80087d8:	080120e8 	.word	0x080120e8
 80087dc:	00000000 	.word	0x00000000
 80087e0:	08008595 	.word	0x08008595
 80087e4:	080120e4 	.word	0x080120e4

080087e8 <__swbuf_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	460e      	mov	r6, r1
 80087ec:	4614      	mov	r4, r2
 80087ee:	4605      	mov	r5, r0
 80087f0:	b118      	cbz	r0, 80087fa <__swbuf_r+0x12>
 80087f2:	6a03      	ldr	r3, [r0, #32]
 80087f4:	b90b      	cbnz	r3, 80087fa <__swbuf_r+0x12>
 80087f6:	f7fe ff9f 	bl	8007738 <__sinit>
 80087fa:	69a3      	ldr	r3, [r4, #24]
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	071a      	lsls	r2, r3, #28
 8008802:	d501      	bpl.n	8008808 <__swbuf_r+0x20>
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	b943      	cbnz	r3, 800881a <__swbuf_r+0x32>
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f82a 	bl	8008864 <__swsetup_r>
 8008810:	b118      	cbz	r0, 800881a <__swbuf_r+0x32>
 8008812:	f04f 37ff 	mov.w	r7, #4294967295
 8008816:	4638      	mov	r0, r7
 8008818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	1a98      	subs	r0, r3, r2
 8008820:	6963      	ldr	r3, [r4, #20]
 8008822:	b2f6      	uxtb	r6, r6
 8008824:	4283      	cmp	r3, r0
 8008826:	4637      	mov	r7, r6
 8008828:	dc05      	bgt.n	8008836 <__swbuf_r+0x4e>
 800882a:	4621      	mov	r1, r4
 800882c:	4628      	mov	r0, r5
 800882e:	f7fe fecf 	bl	80075d0 <_fflush_r>
 8008832:	2800      	cmp	r0, #0
 8008834:	d1ed      	bne.n	8008812 <__swbuf_r+0x2a>
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	3b01      	subs	r3, #1
 800883a:	60a3      	str	r3, [r4, #8]
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	701e      	strb	r6, [r3, #0]
 8008844:	6962      	ldr	r2, [r4, #20]
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	429a      	cmp	r2, r3
 800884a:	d004      	beq.n	8008856 <__swbuf_r+0x6e>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	07db      	lsls	r3, r3, #31
 8008850:	d5e1      	bpl.n	8008816 <__swbuf_r+0x2e>
 8008852:	2e0a      	cmp	r6, #10
 8008854:	d1df      	bne.n	8008816 <__swbuf_r+0x2e>
 8008856:	4621      	mov	r1, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f7fe feb9 	bl	80075d0 <_fflush_r>
 800885e:	2800      	cmp	r0, #0
 8008860:	d0d9      	beq.n	8008816 <__swbuf_r+0x2e>
 8008862:	e7d6      	b.n	8008812 <__swbuf_r+0x2a>

08008864 <__swsetup_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4b29      	ldr	r3, [pc, #164]	@ (800890c <__swsetup_r+0xa8>)
 8008868:	4605      	mov	r5, r0
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	460c      	mov	r4, r1
 800886e:	b118      	cbz	r0, 8008878 <__swsetup_r+0x14>
 8008870:	6a03      	ldr	r3, [r0, #32]
 8008872:	b90b      	cbnz	r3, 8008878 <__swsetup_r+0x14>
 8008874:	f7fe ff60 	bl	8007738 <__sinit>
 8008878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887c:	0719      	lsls	r1, r3, #28
 800887e:	d422      	bmi.n	80088c6 <__swsetup_r+0x62>
 8008880:	06da      	lsls	r2, r3, #27
 8008882:	d407      	bmi.n	8008894 <__swsetup_r+0x30>
 8008884:	2209      	movs	r2, #9
 8008886:	602a      	str	r2, [r5, #0]
 8008888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	f04f 30ff 	mov.w	r0, #4294967295
 8008892:	e033      	b.n	80088fc <__swsetup_r+0x98>
 8008894:	0758      	lsls	r0, r3, #29
 8008896:	d512      	bpl.n	80088be <__swsetup_r+0x5a>
 8008898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800889a:	b141      	cbz	r1, 80088ae <__swsetup_r+0x4a>
 800889c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a0:	4299      	cmp	r1, r3
 80088a2:	d002      	beq.n	80088aa <__swsetup_r+0x46>
 80088a4:	4628      	mov	r0, r5
 80088a6:	f7ff f983 	bl	8007bb0 <_free_r>
 80088aa:	2300      	movs	r3, #0
 80088ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	2300      	movs	r3, #0
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	f043 0308 	orr.w	r3, r3, #8
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	b94b      	cbnz	r3, 80088de <__swsetup_r+0x7a>
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d4:	d003      	beq.n	80088de <__swsetup_r+0x7a>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f7ff fd87 	bl	80083ec <__smakebuf_r>
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	f013 0201 	ands.w	r2, r3, #1
 80088e6:	d00a      	beq.n	80088fe <__swsetup_r+0x9a>
 80088e8:	2200      	movs	r2, #0
 80088ea:	60a2      	str	r2, [r4, #8]
 80088ec:	6962      	ldr	r2, [r4, #20]
 80088ee:	4252      	negs	r2, r2
 80088f0:	61a2      	str	r2, [r4, #24]
 80088f2:	6922      	ldr	r2, [r4, #16]
 80088f4:	b942      	cbnz	r2, 8008908 <__swsetup_r+0xa4>
 80088f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088fa:	d1c5      	bne.n	8008888 <__swsetup_r+0x24>
 80088fc:	bd38      	pop	{r3, r4, r5, pc}
 80088fe:	0799      	lsls	r1, r3, #30
 8008900:	bf58      	it	pl
 8008902:	6962      	ldrpl	r2, [r4, #20]
 8008904:	60a2      	str	r2, [r4, #8]
 8008906:	e7f4      	b.n	80088f2 <__swsetup_r+0x8e>
 8008908:	2000      	movs	r0, #0
 800890a:	e7f7      	b.n	80088fc <__swsetup_r+0x98>
 800890c:	20000220 	.word	0x20000220

08008910 <_raise_r>:
 8008910:	291f      	cmp	r1, #31
 8008912:	b538      	push	{r3, r4, r5, lr}
 8008914:	4605      	mov	r5, r0
 8008916:	460c      	mov	r4, r1
 8008918:	d904      	bls.n	8008924 <_raise_r+0x14>
 800891a:	2316      	movs	r3, #22
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008926:	b112      	cbz	r2, 800892e <_raise_r+0x1e>
 8008928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800892c:	b94b      	cbnz	r3, 8008942 <_raise_r+0x32>
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f830 	bl	8008994 <_getpid_r>
 8008934:	4622      	mov	r2, r4
 8008936:	4601      	mov	r1, r0
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800893e:	f000 b817 	b.w	8008970 <_kill_r>
 8008942:	2b01      	cmp	r3, #1
 8008944:	d00a      	beq.n	800895c <_raise_r+0x4c>
 8008946:	1c59      	adds	r1, r3, #1
 8008948:	d103      	bne.n	8008952 <_raise_r+0x42>
 800894a:	2316      	movs	r3, #22
 800894c:	6003      	str	r3, [r0, #0]
 800894e:	2001      	movs	r0, #1
 8008950:	e7e7      	b.n	8008922 <_raise_r+0x12>
 8008952:	2100      	movs	r1, #0
 8008954:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008958:	4620      	mov	r0, r4
 800895a:	4798      	blx	r3
 800895c:	2000      	movs	r0, #0
 800895e:	e7e0      	b.n	8008922 <_raise_r+0x12>

08008960 <raise>:
 8008960:	4b02      	ldr	r3, [pc, #8]	@ (800896c <raise+0xc>)
 8008962:	4601      	mov	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f7ff bfd3 	b.w	8008910 <_raise_r>
 800896a:	bf00      	nop
 800896c:	20000220 	.word	0x20000220

08008970 <_kill_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4d07      	ldr	r5, [pc, #28]	@ (8008990 <_kill_r+0x20>)
 8008974:	2300      	movs	r3, #0
 8008976:	4604      	mov	r4, r0
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	f7f9 f99b 	bl	8001cb8 <_kill>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d102      	bne.n	800898c <_kill_r+0x1c>
 8008986:	682b      	ldr	r3, [r5, #0]
 8008988:	b103      	cbz	r3, 800898c <_kill_r+0x1c>
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	bd38      	pop	{r3, r4, r5, pc}
 800898e:	bf00      	nop
 8008990:	2000af80 	.word	0x2000af80

08008994 <_getpid_r>:
 8008994:	f7f9 b988 	b.w	8001ca8 <_getpid>

08008998 <_malloc_usable_size_r>:
 8008998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899c:	1f18      	subs	r0, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfbc      	itt	lt
 80089a2:	580b      	ldrlt	r3, [r1, r0]
 80089a4:	18c0      	addlt	r0, r0, r3
 80089a6:	4770      	bx	lr

080089a8 <_init>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr

080089b4 <_fini>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr
