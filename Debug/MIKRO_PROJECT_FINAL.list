
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009740  08009434  08009434  0000a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b74  08012b74  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  08012b74  08012b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b7c  08012b7c  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b7c  08012b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b80  08012b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08012b84  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014d68  20000270  08012df4  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014fd8  08012df4  00014fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013edd  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003873  00000000  00000000  0002817d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0002b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4d  00000000  00000000  0002ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029353  00000000  00000000  0002d66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e37  00000000  00000000  000569c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee170  00000000  00000000  0006d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf4  00000000  00000000  0015b9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001606a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800941c 	.word	0x0800941c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0800941c 	.word	0x0800941c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	2000028c 	.word	0x2000028c

080005c8 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <USART_getchar+0x4c>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <USART_getchar+0x4c>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d013      	beq.n	8000602 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <USART_getchar+0x4c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <USART_getchar+0x50>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <USART_getchar+0x4c>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <USART_getchar+0x4c>)
 80005ec:	68d2      	ldr	r2, [r2, #12]
 80005ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80005f2:	fb01 f202 	mul.w	r2, r1, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <USART_getchar+0x4c>)
 80005fa:	6053      	str	r3, [r2, #4]
        return tmp;
 80005fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000600:	e001      	b.n	8000606 <USART_getchar+0x3e>
    }
    return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000028c 	.word	0x2000028c
 8000618:	20000aac 	.word	0x20000aac

0800061c <USART_fsend>:
* (Formatuje teskt i zapisuje go do bufora nadawczego. Jeśli
* rejest jest gotowy, funkcja inicjuje przerwanie transmisji
* pierwszego bajru. __disable_irq() oraz __enable_irq() to
* nic innego jak zabezpieczenie kodu przed sekcją krytyczną)
************************************************************************/
void USART_fsend(char* format,...){
 800061c:	b40f      	push	{r0, r1, r2, r3}
 800061e:	b580      	push	{r7, lr}
 8000620:	b0c6      	sub	sp, #280	@ 0x118
 8000622:	af00      	add	r7, sp, #0
	char tmp_rs[258];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000624:	f507 7292 	add.w	r2, r7, #292	@ 0x124
 8000628:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800062c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000630:	601a      	str	r2, [r3, #0]
	  vsprintf(tmp_rs,format,arglist);
 8000632:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000636:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800063a:	f107 0010 	add.w	r0, r7, #16
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8000644:	f007 ff72 	bl	800852c <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 8000648:	4b44      	ldr	r3, [pc, #272]	@ (800075c <USART_fsend+0x140>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	461a      	mov	r2, r3
 800064e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000652:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000656:	601a      	str	r2, [r3, #0]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800065e:	e02c      	b.n	80006ba <USART_fsend+0x9e>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000660:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000664:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800066e:	f5a2 7184 	sub.w	r1, r2, #264	@ 0x108
 8000672:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000676:	440a      	add	r2, r1
 8000678:	7811      	ldrb	r1, [r2, #0]
 800067a:	4a39      	ldr	r2, [pc, #228]	@ (8000760 <USART_fsend+0x144>)
 800067c:	54d1      	strb	r1, [r2, r3]
		  idx++;
 800067e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000682:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800068e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000692:	601a      	str	r2, [r3, #0]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 8000694:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000698:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006a2:	db05      	blt.n	80006b0 <USART_fsend+0x94>
 80006a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
	  for(i=0;i<strlen(tmp_rs);i++){
 80006b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd86 	bl	80001d0 <strlen>
 80006c4:	4602      	mov	r2, r0
 80006c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d8c8      	bhi.n	8000660 <USART_fsend+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ce:	b672      	cpsid	i
}
 80006d0:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 80006d2:	4b22      	ldr	r3, [pc, #136]	@ (800075c <USART_fsend+0x140>)
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	4b21      	ldr	r3, [pc, #132]	@ (800075c <USART_fsend+0x140>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d12b      	bne.n	8000736 <USART_fsend+0x11a>
 80006de:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <USART_fsend+0x148>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e8:	2b80      	cmp	r3, #128	@ 0x80
 80006ea:	d124      	bne.n	8000736 <USART_fsend+0x11a>
		  txRingBuffer.writeIndex=idx;
 80006ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <USART_fsend+0x140>)
 80006fa:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <USART_fsend+0x140>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <USART_fsend+0x144>)
 8000702:	5cd2      	ldrb	r2, [r2, r3]
 8000704:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000708:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800070c:	701a      	strb	r2, [r3, #0]
		  txRingBuffer.readIndex++;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <USART_fsend+0x140>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	3301      	adds	r3, #1
 8000714:	4a11      	ldr	r2, [pc, #68]	@ (800075c <USART_fsend+0x140>)
 8000716:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <USART_fsend+0x140>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000720:	d302      	bcc.n	8000728 <USART_fsend+0x10c>
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <USART_fsend+0x140>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	@ (8000764 <USART_fsend+0x148>)
 8000730:	f004 fcc0 	bl	80050b4 <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000734:	e007      	b.n	8000746 <USART_fsend+0x12a>
	  }else{
		  txRingBuffer.writeIndex=idx;
 8000736:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800073a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <USART_fsend+0x140>)
 8000744:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000746:	b662      	cpsie	i
}
 8000748:	bf00      	nop
	  }
	  __enable_irq();
}
 800074a:	bf00      	nop
 800074c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000750:	46bd      	mov	sp, r7
 8000752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000756:	b004      	add	sp, #16
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	2000029c 	.word	0x2000029c
 8000760:	200002ac 	.word	0x200002ac
 8000764:	20014e00 	.word	0x20014e00

08000768 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000772:	4b38      	ldr	r3, [pc, #224]	@ (8000854 <USART_sendFrame+0xec>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 800077c:	4a36      	ldr	r2, [pc, #216]	@ (8000858 <USART_sendFrame+0xf0>)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	4413      	add	r3, r2
 8000782:	227e      	movs	r2, #126	@ 0x7e
 8000784:	701a      	strb	r2, [r3, #0]
    idx++;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
    if(idx >= TX_BUFFER_SIZE) idx = 0;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000792:	db01      	blt.n	8000798 <USART_sendFrame+0x30>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	e014      	b.n	80007c8 <USART_sendFrame+0x60>
        USART_TxBuf[idx] = data[i];
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	4413      	add	r3, r2
 80007a4:	7819      	ldrb	r1, [r3, #0]
 80007a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000858 <USART_sendFrame+0xf0>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	460a      	mov	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
        idx++;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3301      	adds	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
        if(idx >= TX_BUFFER_SIZE) idx = 0;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007bc:	db01      	blt.n	80007c2 <USART_sendFrame+0x5a>
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	3301      	adds	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d3e6      	bcc.n	800079e <USART_sendFrame+0x36>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 80007d0:	4a21      	ldr	r2, [pc, #132]	@ (8000858 <USART_sendFrame+0xf0>)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	4413      	add	r3, r2
 80007d6:	2260      	movs	r2, #96	@ 0x60
 80007d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
    if(idx >= TX_BUFFER_SIZE) idx = 0;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007e6:	db01      	blt.n	80007ec <USART_sendFrame+0x84>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <USART_sendFrame+0xec>)
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <USART_sendFrame+0xec>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d123      	bne.n	8000840 <USART_sendFrame+0xd8>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <USART_sendFrame+0xf4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 8000802:	2b80      	cmp	r3, #128	@ 0x80
 8000804:	d11c      	bne.n	8000840 <USART_sendFrame+0xd8>
        txRingBuffer.writeIndex = idx;
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <USART_sendFrame+0xec>)
 800080a:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <USART_sendFrame+0xec>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a11      	ldr	r2, [pc, #68]	@ (8000858 <USART_sendFrame+0xf0>)
 8000812:	5cd3      	ldrb	r3, [r2, r3]
 8000814:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex++;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <USART_sendFrame+0xec>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	3301      	adds	r3, #1
 800081c:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <USART_sendFrame+0xec>)
 800081e:	6053      	str	r3, [r2, #4]
        if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex = 0;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <USART_sendFrame+0xec>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000828:	d302      	bcc.n	8000830 <USART_sendFrame+0xc8>
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <USART_sendFrame+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000830:	f107 030f 	add.w	r3, r7, #15
 8000834:	2201      	movs	r2, #1
 8000836:	4619      	mov	r1, r3
 8000838:	4808      	ldr	r0, [pc, #32]	@ (800085c <USART_sendFrame+0xf4>)
 800083a:	f004 fc3b 	bl	80050b4 <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 800083e:	e002      	b.n	8000846 <USART_sendFrame+0xde>
    } else {
        txRingBuffer.writeIndex = idx;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <USART_sendFrame+0xec>)
 8000844:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000846:	b662      	cpsie	i
}
 8000848:	bf00      	nop
    }

    __enable_irq();
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000029c 	.word	0x2000029c
 8000858:	200002ac 	.word	0x200002ac
 800085c:	20014e00 	.word	0x20014e00

08000860 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	@ 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 800086c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000870:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	e019      	b.n	80008ac <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 8000882:	8bfb      	ldrh	r3, [r7, #30]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29b      	uxth	r3, r3
 8000888:	b2da      	uxtb	r2, r3
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	4053      	eors	r3, r2
 800088e:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000890:	8bfb      	ldrh	r3, [r7, #30]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b21a      	sxth	r2, r3
 8000896:	7dbb      	ldrb	r3, [r7, #22]
 8000898:	490f      	ldr	r1, [pc, #60]	@ (80008d8 <calculateCrc16+0x78>)
 800089a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800089e:	b21b      	sxth	r3, r3
 80008a0:	4053      	eors	r3, r2
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	3301      	adds	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3e1      	bcc.n	8000878 <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 80008b4:	8bfb      	ldrh	r3, [r7, #30]
 80008b6:	0a1b      	lsrs	r3, r3, #8
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	8bfa      	ldrh	r2, [r7, #30]
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	701a      	strb	r2, [r3, #0]
}
 80008ca:	bf00      	nop
 80008cc:	3724      	adds	r7, #36	@ 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000

080008dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_DMA_Init+0x38>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <MX_DMA_Init+0x38>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_DMA_Init+0x38>)
 80008f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	200f      	movs	r0, #15
 8000900:	f001 fee1 	bl	80026c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000904:	200f      	movs	r0, #15
 8000906:	f001 fefa 	bl	80026fe <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <safeCompare>:
uint8_t received_char;
Receive_Frame receiveFrame;


static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <safeCompare+0x18>
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <safeCompare+0x1c>
	{
		return false;
 8000930:	2300      	movs	r3, #0
 8000932:	e00a      	b.n	800094a <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f007 fe01 	bl	8008540 <memcmp>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	bf0c      	ite	eq
 8000944:	2301      	moveq	r3, #1
 8000946:	2300      	movne	r3, #0
 8000948:	b2db      	uxtb	r3, r3
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <parseColor+0x16>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <parseColor+0x1a>
        return false;
 800096a:	2300      	movs	r3, #0
 800096c:	e026      	b.n	80009bc <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e01f      	b.n	80009b4 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 8000974:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <parseColor+0x70>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fc27 	bl	80001d0 <strlen>
 8000982:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000984:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <parseColor+0x70>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	4619      	mov	r1, r3
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ffc1 	bl	8000918 <safeCompare>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <parseColor+0x5a>
            *color = color_map[i].value;
 800099c:	4a09      	ldr	r2, [pc, #36]	@ (80009c4 <parseColor+0x70>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4413      	add	r3, r2
 80009a4:	889a      	ldrh	r2, [r3, #4]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	801a      	strh	r2, [r3, #0]
            return true;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e006      	b.n	80009bc <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b07      	cmp	r3, #7
 80009b8:	d9dc      	bls.n	8000974 <parseColor+0x20>
        }
    }
    return false;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	0800950c 	.word	0x0800950c

080009c8 <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
    in_frame = false;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <resetFrameState+0x20>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <resetFrameState+0x24>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <resetFrameState+0x28>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	20000cb4 	.word	0x20000cb4
 80009ec:	20000cac 	.word	0x20000cac
 80009f0:	20000cb0 	.word	0x20000cb0

080009f4 <parseParameters>:
*      - Pomija białe znaki
*      - Wyodrębnia token do następnego przecinka
*      - Przetwarza token według odpowiedniego typu
*   4. Zwalnia va_list
************************************************************************/
bool parseParameters(const char* data, const char* format, ...) {
 80009f4:	b40e      	push	{r1, r2, r3}
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b099      	sub	sp, #100	@ 0x64
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <parseParameters+0x16>
 8000a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <parseParameters+0x1a>
        return false;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e0b0      	b.n	8000b70 <parseParameters+0x17c>
    }
    va_list args;
    va_start(args, format);
 8000a0e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a12:	647b      	str	r3, [r7, #68]	@ 0x44

    const char* data_ptr = data;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 8000a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    char token[51];
    size_t token_idx;

    while (*fmt_ptr) {
 8000a1c:	e09c      	b.n	8000b58 <parseParameters+0x164>

        while (isspace(*data_ptr)) data_ptr++;
 8000a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a20:	3301      	adds	r3, #1
 8000a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a55      	ldr	r2, [pc, #340]	@ (8000b80 <parseParameters+0x18c>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f2      	bne.n	8000a1e <parseParameters+0x2a>

        token_idx = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	657b      	str	r3, [r7, #84]	@ 0x54


        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 8000a3c:	e00a      	b.n	8000a54 <parseParameters+0x60>
            token[token_idx++] = *data_ptr++;
 8000a3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000a40:	1c53      	adds	r3, r2, #1
 8000a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a46:	1c59      	adds	r1, r3, #1
 8000a48:	6579      	str	r1, [r7, #84]	@ 0x54
 8000a4a:	7812      	ldrb	r2, [r2, #0]
 8000a4c:	3360      	adds	r3, #96	@ 0x60
 8000a4e:	443b      	add	r3, r7
 8000a50:	f803 2c50 	strb.w	r2, [r3, #-80]
        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 8000a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <parseParameters+0x76>
 8000a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a62:	d002      	beq.n	8000a6a <parseParameters+0x76>
 8000a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a66:	2b30      	cmp	r3, #48	@ 0x30
 8000a68:	d9e9      	bls.n	8000a3e <parseParameters+0x4a>
        }
        token[token_idx] = '\0';
 8000a6a:	f107 0210 	add.w	r2, r7, #16
 8000a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a70:	4413      	add	r3, r2
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]


        if (*data_ptr == ',') data_ptr++;
 8000a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a7c:	d10c      	bne.n	8000a98 <parseParameters+0xa4>
 8000a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a80:	3301      	adds	r3, #1
 8000a82:	65fb      	str	r3, [r7, #92]	@ 0x5c

        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 8000a84:	e008      	b.n	8000a98 <parseParameters+0xa4>
            token[--token_idx] = '\0';
 8000a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a8c:	f107 0210 	add.w	r2, r7, #16
 8000a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a92:	4413      	add	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 8000a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00d      	beq.n	8000aba <parseParameters+0xc6>
 8000a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	3360      	adds	r3, #96	@ 0x60
 8000aa4:	443b      	add	r3, r7
 8000aa6:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a34      	ldr	r2, [pc, #208]	@ (8000b80 <parseParameters+0x18c>)
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1e5      	bne.n	8000a86 <parseParameters+0x92>
        }
        switch (*fmt_ptr) {
 8000aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b75      	cmp	r3, #117	@ 0x75
 8000ac0:	d006      	beq.n	8000ad0 <parseParameters+0xdc>
 8000ac2:	2b75      	cmp	r3, #117	@ 0x75
 8000ac4:	dc42      	bgt.n	8000b4c <parseParameters+0x158>
 8000ac6:	2b73      	cmp	r3, #115	@ 0x73
 8000ac8:	d01c      	beq.n	8000b04 <parseParameters+0x110>
 8000aca:	2b74      	cmp	r3, #116	@ 0x74
 8000acc:	d02d      	beq.n	8000b2a <parseParameters+0x136>
 8000ace:	e03d      	b.n	8000b4c <parseParameters+0x158>
            case 'u': {
                char* endptr;
                unsigned long val = strtoul(token, &endptr, 10);
 8000ad0:	f107 010c 	add.w	r1, r7, #12
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	220a      	movs	r2, #10
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 fae8 	bl	80080b0 <strtoul>
 8000ae0:	6538      	str	r0, [r7, #80]	@ 0x50
                if (*endptr || val > 255) {
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <parseParameters+0xfc>
 8000aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000aec:	2bff      	cmp	r3, #255	@ 0xff
 8000aee:	d901      	bls.n	8000af4 <parseParameters+0x100>
                    va_end(args);
                    return false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	e03d      	b.n	8000b70 <parseParameters+0x17c>
                }
                *va_arg(args, uint8_t*) = (uint8_t)val;
 8000af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	647a      	str	r2, [r7, #68]	@ 0x44
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e026      	b.n	8000b52 <parseParameters+0x15e>
                break;
            }
            case 's': {
                Color_t* color_ptr = va_arg(args, Color_t*);
 8000b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b06:	1d1a      	adds	r2, r3, #4
 8000b08:	647a      	str	r2, [r7, #68]	@ 0x44
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (!parseColor(token, color_ptr)) {
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff1d 	bl	8000954 <parseColor>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f083 0301 	eor.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d014      	beq.n	8000b50 <parseParameters+0x15c>
                    va_end(args);
                    return false;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e022      	b.n	8000b70 <parseParameters+0x17c>
                }
                break;
            }
            case 't': {
                char* ptr = va_arg(args, char*);
 8000b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b2c:	1d1a      	adds	r2, r3, #4
 8000b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
                strncpy(ptr, token, 50);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2232      	movs	r2, #50	@ 0x32
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000b3e:	f007 fd17 	bl	8008570 <strncpy>
                ptr[50] = '\0';
 8000b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b44:	3332      	adds	r3, #50	@ 0x32
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
                break;
 8000b4a:	e002      	b.n	8000b52 <parseParameters+0x15e>
            }
            default:
                va_end(args);
                return false;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e00f      	b.n	8000b70 <parseParameters+0x17c>
                break;
 8000b50:	bf00      	nop
        }
        fmt_ptr++;
 8000b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b54:	3301      	adds	r3, #1
 8000b56:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f47f af61 	bne.w	8000a24 <parseParameters+0x30>
    }
    va_end(args);
    return !*data_ptr;
 8000b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bf0c      	ite	eq
 8000b6a:	2301      	moveq	r3, #1
 8000b6c:	2300      	movne	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3764      	adds	r7, #100	@ 0x64
 8000b74:	46bd      	mov	sp, r7
 8000b76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b7a:	b003      	add	sp, #12
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	08012990 	.word	0x08012990

08000b84 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Receive_Frame* frame) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00d      	beq.n	8000bae <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3305      	adds	r3, #5
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f007 fce0 	bl	8008560 <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 fcd9 	bl	8008560 <memset>
    }
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Receive_Frame *frame)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af04      	add	r7, sp, #16
 8000bbe:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73bb      	strb	r3, [r7, #14]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	737b      	strb	r3, [r7, #13]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	1d58      	adds	r0, r3, #5
 8000bd8:	f107 010e 	add.w	r1, r7, #14
 8000bdc:	f107 020f 	add.w	r2, r7, #15
 8000be0:	f107 030a 	add.w	r3, r7, #10
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	f107 030d 	add.w	r3, r7, #13
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4917      	ldr	r1, [pc, #92]	@ (8000c54 <executeONK+0x9c>)
 8000bf6:	f7ff fefd 	bl	80009f4 <parseParameters>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <executeONK+0xa0>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	@ (8000c5c <executeONK+0xa4>)
 8000c10:	2167      	movs	r1, #103	@ 0x67
 8000c12:	2068      	movs	r0, #104	@ 0x68
 8000c14:	f000 fad8 	bl	80011c8 <prepareFrame>
 8000c18:	e019      	b.n	8000c4e <executeONK+0x96>
        return;
    }
	switch(filling)
 8000c1a:	7b3b      	ldrb	r3, [r7, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <executeONK+0x6e>
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d00a      	beq.n	8000c3a <executeONK+0x82>
 8000c24:	e013      	b.n	8000c4e <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	b218      	sxth	r0, r3
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	b219      	sxth	r1, r3
 8000c2e:	7b7b      	ldrb	r3, [r7, #13]
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	897b      	ldrh	r3, [r7, #10]
 8000c34:	f006 fc81 	bl	800753a <hagl_draw_circle>
		break;
 8000c38:	e009      	b.n	8000c4e <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	b218      	sxth	r0, r3
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	b219      	sxth	r1, r3
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	897b      	ldrh	r3, [r7, #10]
 8000c48:	f006 fda6 	bl	8007798 <hagl_fill_circle>
		break;
 8000c4c:	bf00      	nop
	}
}
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08009470 	.word	0x08009470
 8000c58:	08009478 	.word	0x08009478
 8000c5c:	0800948c 	.word	0x0800948c

08000c60 <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Receive_Frame *frame)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af04      	add	r7, sp, #16
 8000c66:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73bb      	strb	r3, [r7, #14]
 8000c70:	2300      	movs	r3, #0
 8000c72:	737b      	strb	r3, [r7, #13]
 8000c74:	2300      	movs	r3, #0
 8000c76:	733b      	strb	r3, [r7, #12]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1d58      	adds	r0, r3, #5
 8000c84:	f107 010e 	add.w	r1, r7, #14
 8000c88:	f107 020f 	add.w	r2, r7, #15
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	9303      	str	r3, [sp, #12]
 8000c92:	f107 030b 	add.w	r3, r7, #11
 8000c96:	9302      	str	r3, [sp, #8]
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	f107 030d 	add.w	r3, r7, #13
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	491c      	ldr	r1, [pc, #112]	@ (8000d18 <executeONP+0xb8>)
 8000ca8:	f7ff fea4 	bl	80009f4 <parseParameters>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f083 0301 	eor.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d009      	beq.n	8000ccc <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3305      	adds	r3, #5
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <executeONP+0xbc>)
 8000cc0:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <executeONP+0xc0>)
 8000cc2:	2167      	movs	r1, #103	@ 0x67
 8000cc4:	2068      	movs	r0, #104	@ 0x68
 8000cc6:	f000 fa7f 	bl	80011c8 <prepareFrame>
 8000cca:	e021      	b.n	8000d10 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000ccc:	7afb      	ldrb	r3, [r7, #11]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <executeONP+0x78>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d00e      	beq.n	8000cf4 <executeONP+0x94>
 8000cd6:	e01b      	b.n	8000d10 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	b218      	sxth	r0, r3
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	b219      	sxth	r1, r3
 8000ce0:	7b7b      	ldrb	r3, [r7, #13]
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	7b3b      	ldrb	r3, [r7, #12]
 8000ce6:	b21c      	sxth	r4, r3
 8000ce8:	893b      	ldrh	r3, [r7, #8]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4623      	mov	r3, r4
 8000cee:	f006 f973 	bl	8006fd8 <hagl_draw_rectangle>
		break;
 8000cf2:	e00d      	b.n	8000d10 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	b218      	sxth	r0, r3
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	b219      	sxth	r1, r3
 8000cfc:	7b7b      	ldrb	r3, [r7, #13]
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	7b3b      	ldrb	r3, [r7, #12]
 8000d02:	b21c      	sxth	r4, r3
 8000d04:	893b      	ldrh	r3, [r7, #8]
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	4623      	mov	r3, r4
 8000d0a:	f006 f9eb 	bl	80070e4 <hagl_fill_rectangle>
		break;
 8000d0e:	bf00      	nop
	}
}
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	08009490 	.word	0x08009490
 8000d1c:	08009478 	.word	0x08009478
 8000d20:	0800948c 	.word	0x0800948c

08000d24 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Receive_Frame *frame)
{
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	b08d      	sub	sp, #52	@ 0x34
 8000d28:	af06      	add	r7, sp, #24
 8000d2a:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	75fb      	strb	r3, [r7, #23]
 8000d30:	2300      	movs	r3, #0
 8000d32:	75bb      	strb	r3, [r7, #22]
 8000d34:	2300      	movs	r3, #0
 8000d36:	757b      	strb	r3, [r7, #21]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	753b      	strb	r3, [r7, #20]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	74fb      	strb	r3, [r7, #19]
 8000d40:	2300      	movs	r3, #0
 8000d42:	74bb      	strb	r3, [r7, #18]
 8000d44:	2300      	movs	r3, #0
 8000d46:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1d58      	adds	r0, r3, #5
 8000d50:	f107 0116 	add.w	r1, r7, #22
 8000d54:	f107 0217 	add.w	r2, r7, #23
 8000d58:	f107 030e 	add.w	r3, r7, #14
 8000d5c:	9305      	str	r3, [sp, #20]
 8000d5e:	f107 0311 	add.w	r3, r7, #17
 8000d62:	9304      	str	r3, [sp, #16]
 8000d64:	f107 0312 	add.w	r3, r7, #18
 8000d68:	9303      	str	r3, [sp, #12]
 8000d6a:	f107 0313 	add.w	r3, r7, #19
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f107 0315 	add.w	r3, r7, #21
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4924      	ldr	r1, [pc, #144]	@ (8000e10 <executeONT+0xec>)
 8000d80:	f7ff fe38 	bl	80009f4 <parseParameters>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d009      	beq.n	8000da4 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3305      	adds	r3, #5
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <executeONT+0xf0>)
 8000d98:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <executeONT+0xf4>)
 8000d9a:	2167      	movs	r1, #103	@ 0x67
 8000d9c:	2068      	movs	r0, #104	@ 0x68
 8000d9e:	f000 fa13 	bl	80011c8 <prepareFrame>
 8000da2:	e031      	b.n	8000e08 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000da4:	7c7b      	ldrb	r3, [r7, #17]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <executeONT+0x8c>
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d016      	beq.n	8000ddc <executeONT+0xb8>
 8000dae:	e02b      	b.n	8000e08 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000db0:	7dfb      	ldrb	r3, [r7, #23]
 8000db2:	b218      	sxth	r0, r3
 8000db4:	7dbb      	ldrb	r3, [r7, #22]
 8000db6:	b21c      	sxth	r4, r3
 8000db8:	7d7b      	ldrb	r3, [r7, #21]
 8000dba:	b21d      	sxth	r5, r3
 8000dbc:	7d3b      	ldrb	r3, [r7, #20]
 8000dbe:	b21e      	sxth	r6, r3
 8000dc0:	7cfb      	ldrb	r3, [r7, #19]
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	7cba      	ldrb	r2, [r7, #18]
 8000dc6:	b212      	sxth	r2, r2
 8000dc8:	89f9      	ldrh	r1, [r7, #14]
 8000dca:	9102      	str	r1, [sp, #8]
 8000dcc:	9201      	str	r2, [sp, #4]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4633      	mov	r3, r6
 8000dd2:	462a      	mov	r2, r5
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	f006 ff6a 	bl	8007cae <hagl_draw_triangle>
            break;
 8000dda:	e015      	b.n	8000e08 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	b218      	sxth	r0, r3
 8000de0:	7dbb      	ldrb	r3, [r7, #22]
 8000de2:	b21c      	sxth	r4, r3
 8000de4:	7d7b      	ldrb	r3, [r7, #21]
 8000de6:	b21d      	sxth	r5, r3
 8000de8:	7d3b      	ldrb	r3, [r7, #20]
 8000dea:	b21e      	sxth	r6, r3
 8000dec:	7cfb      	ldrb	r3, [r7, #19]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	7cba      	ldrb	r2, [r7, #18]
 8000df2:	b212      	sxth	r2, r2
 8000df4:	89f9      	ldrh	r1, [r7, #14]
 8000df6:	9102      	str	r1, [sp, #8]
 8000df8:	9201      	str	r2, [sp, #4]
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4633      	mov	r3, r6
 8000dfe:	462a      	mov	r2, r5
 8000e00:	4621      	mov	r1, r4
 8000e02:	f006 ff7a 	bl	8007cfa <hagl_fill_triangle>
            break;
 8000e06:	bf00      	nop
    }
}
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08009498 	.word	0x08009498
 8000e14:	08009478 	.word	0x08009478
 8000e18:	0800948c 	.word	0x0800948c

08000e1c <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Receive_Frame *frame)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b0cb      	sub	sp, #300	@ 0x12c
 8000e20:	af04      	add	r7, sp, #16
 8000e22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e2a:	6018      	str	r0, [r3, #0]
    char text[50] = {0};
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000e32:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e36:	222e      	movs	r2, #46	@ 0x2e
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f007 fb90 	bl	8008560 <memset>
    wchar_t wtext[50] = {0};
 8000e40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e48:	4618      	mov	r0, r3
 8000e4a:	23c8      	movs	r3, #200	@ 0xc8
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f007 fb86 	bl	8008560 <memset>
    uint8_t x = 0, y = 0, fontSize = 0, speed = 0;
 8000e54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e58:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e64:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e70:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    Color_t color = BLACK;
 8000e7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e82:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000e86:	2200      	movs	r2, #0
 8000e88:	801a      	strh	r2, [r3, #0]

    if (!parseParameters(frame->data, "uuust", &x, &y, &fontSize, &color, text)) {
 8000e8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1d58      	adds	r0, r3, #5
 8000e96:	f107 010e 	add.w	r1, r7, #14
 8000e9a:	f107 020f 	add.w	r2, r7, #15
 8000e9e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	f107 030a 	add.w	r3, r7, #10
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	f107 030d 	add.w	r3, r7, #13
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4951      	ldr	r1, [pc, #324]	@ (8000ff8 <executeONN+0x1dc>)
 8000eb4:	f7ff fd9e 	bl	80009f4 <parseParameters>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f083 0301 	eor.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00d      	beq.n	8000ee0 <executeONN+0xc4>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000ec4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ec8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3305      	adds	r3, #5
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8000ffc <executeONN+0x1e0>)
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8001000 <executeONN+0x1e4>)
 8000ed6:	2167      	movs	r1, #103	@ 0x67
 8000ed8:	2068      	movs	r0, #104	@ 0x68
 8000eda:	f000 f975 	bl	80011c8 <prepareFrame>
 8000ede:	e087      	b.n	8000ff0 <executeONN+0x1d4>
        return;
    }
    size_t textLen = strlen(text);
 8000ee0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff f973 	bl	80001d0 <strlen>
 8000eea:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    for(size_t i = 0; i < textLen && i < 50; i++) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000ef4:	e013      	b.n	8000f1e <executeONN+0x102>
        wtext[i] = (wchar_t)text[i];
 8000ef6:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8000efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4619      	mov	r1, r3
 8000f04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(size_t i = 0; i < textLen && i < 50; i++) {
 8000f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000f1e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d203      	bcs.n	8000f32 <executeONN+0x116>
 8000f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f2e:	2b31      	cmp	r3, #49	@ 0x31
 8000f30:	d9e1      	bls.n	8000ef6 <executeONN+0xda>
    }
    wtext[textLen] = L'\0';
 8000f32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f3a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    switch(fontSize)
 8000f44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f48:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d036      	beq.n	8000fc0 <executeONN+0x1a4>
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	dc4c      	bgt.n	8000ff0 <executeONN+0x1d4>
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d002      	beq.n	8000f60 <executeONN+0x144>
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d018      	beq.n	8000f90 <executeONN+0x174>
 8000f5e:	e047      	b.n	8000ff0 <executeONN+0x1d4>
    {
        case 1:
            hagl_put_text(wtext, x, y, color, font5x7);
 8000f60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f64:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b219      	sxth	r1, r3
 8000f6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f70:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f7c:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	f107 0010 	add.w	r0, r7, #16
 8000f86:	4c1f      	ldr	r4, [pc, #124]	@ (8001004 <executeONN+0x1e8>)
 8000f88:	9400      	str	r4, [sp, #0]
 8000f8a:	f006 fa4e 	bl	800742a <hagl_put_text>
            break;
 8000f8e:	e02f      	b.n	8000ff0 <executeONN+0x1d4>
        case 2:
            hagl_put_text(wtext, x, y, color, font5x8);
 8000f90:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f94:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b219      	sxth	r1, r3
 8000f9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fa0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fac:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	f107 0010 	add.w	r0, r7, #16
 8000fb6:	4c14      	ldr	r4, [pc, #80]	@ (8001008 <executeONN+0x1ec>)
 8000fb8:	9400      	str	r4, [sp, #0]
 8000fba:	f006 fa36 	bl	800742a <hagl_put_text>
            break;
 8000fbe:	e017      	b.n	8000ff0 <executeONN+0x1d4>
        case 3:
            hagl_put_text(wtext, x, y, color, font6x9);
 8000fc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fc4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b219      	sxth	r1, r3
 8000fcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fd0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fdc:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	f107 0010 	add.w	r0, r7, #16
 8000fe6:	4c09      	ldr	r4, [pc, #36]	@ (800100c <executeONN+0x1f0>)
 8000fe8:	9400      	str	r4, [sp, #0]
 8000fea:	f006 fa1e 	bl	800742a <hagl_put_text>
            break;
 8000fee:	bf00      	nop
    }
}
 8000ff0:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	080094a4 	.word	0x080094a4
 8000ffc:	08009478 	.word	0x08009478
 8001000:	0800948c 	.word	0x0800948c
 8001004:	0800954c 	.word	0x0800954c
 8001008:	0800ca54 	.word	0x0800ca54
 800100c:	0800f8f8 	.word	0x0800f8f8

08001010 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
*   TODO: Naprawienie problemu z wyłączaniem podświetlenia
************************************************************************/
static void executeOFF(Receive_Frame *frame)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	795b      	ldrb	r3, [r3, #5]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <executeOFF+0x16>
 8001020:	2b01      	cmp	r3, #1
 8001022:	d006      	beq.n	8001032 <executeOFF+0x22>
		break;
	case 1:
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
		break;
	}
}
 8001024:	e00e      	b.n	8001044 <executeOFF+0x34>
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET); //TODO sprawdzić dlaczego nie działa
 8001026:	2200      	movs	r2, #0
 8001028:	2102      	movs	r1, #2
 800102a:	4808      	ldr	r0, [pc, #32]	@ (800104c <executeOFF+0x3c>)
 800102c:	f001 ffa2 	bl	8002f74 <HAL_GPIO_WritePin>
		break;
 8001030:	e008      	b.n	8001044 <executeOFF+0x34>
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8001032:	2300      	movs	r3, #0
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2380      	movs	r3, #128	@ 0x80
 8001038:	22a0      	movs	r2, #160	@ 0xa0
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f006 f851 	bl	80070e4 <hagl_fill_rectangle>
		break;
 8001042:	bf00      	nop
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	48000400 	.word	0x48000400

08001050 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <isWithinBounds+0x26>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b9f      	cmp	r3, #159	@ 0x9f
 8001064:	dc07      	bgt.n	8001076 <isWithinBounds+0x26>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db04      	blt.n	8001076 <isWithinBounds+0x26>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001070:	dc01      	bgt.n	8001076 <isWithinBounds+0x26>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <isWithinBounds+0x28>
 8001076:	2300      	movs	r3, #0
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const char *data, int *x, int *y)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a6      	sub	sp, #152	@ 0x98
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2280      	movs	r2, #128	@ 0x80
 800109e:	68f9      	ldr	r1, [r7, #12]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 fa65 	bl	8008570 <strncpy>

	    token = strtok(data_copy, ",");
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4915      	ldr	r1, [pc, #84]	@ (8001100 <parseCoordinates+0x74>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f007 fa73 	bl	8008598 <strtok>
 80010b2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 80010b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <parseCoordinates+0x36>
	        return false;
 80010be:	2300      	movs	r3, #0
 80010c0:	e01a      	b.n	80010f8 <parseCoordinates+0x6c>
	    }
	    *x = atoi(token);
 80010c2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80010c6:	f006 fe3e 	bl	8007d46 <atoi>
 80010ca:	4602      	mov	r2, r0
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ",");
 80010d0:	490b      	ldr	r1, [pc, #44]	@ (8001100 <parseCoordinates+0x74>)
 80010d2:	2000      	movs	r0, #0
 80010d4:	f007 fa60 	bl	8008598 <strtok>
 80010d8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 80010dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <parseCoordinates+0x5c>
	        return false;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e007      	b.n	80010f8 <parseCoordinates+0x6c>
	    }
	    *y = atoi(token);
 80010e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80010ec:	f006 fe2b 	bl	8007d46 <atoi>
 80010f0:	4602      	mov	r2, r0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]

	    return true;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3798      	adds	r7, #152	@ 0x98
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	080094ac 	.word	0x080094ac

08001104 <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e04b      	b.n	80011b2 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b7d      	cmp	r3, #125	@ 0x7d
 8001124:	d10e      	bne.n	8001144 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	617a      	str	r2, [r7, #20]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	227d      	movs	r2, #125	@ 0x7d
 8001132:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	617a      	str	r2, [r7, #20]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	225d      	movs	r2, #93	@ 0x5d
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e033      	b.n	80011ac <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b7e      	cmp	r3, #126	@ 0x7e
 800114e:	d10e      	bne.n	800116e <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	617a      	str	r2, [r7, #20]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	227d      	movs	r2, #125	@ 0x7d
 800115c:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	617a      	str	r2, [r7, #20]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	225e      	movs	r2, #94	@ 0x5e
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e01e      	b.n	80011ac <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b60      	cmp	r3, #96	@ 0x60
 8001178:	d10e      	bne.n	8001198 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	617a      	str	r2, [r7, #20]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	227d      	movs	r2, #125	@ 0x7d
 8001186:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	617a      	str	r2, [r7, #20]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	2226      	movs	r2, #38	@ 0x26
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e009      	b.n	80011ac <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	441a      	add	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	1c59      	adds	r1, r3, #1
 80011a2:	6179      	str	r1, [r7, #20]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	440b      	add	r3, r1
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	3301      	adds	r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3af      	bcc.n	800111a <byteStuffing+0x16>
        }
    }
    return j;
 80011ba:	697b      	ldr	r3, [r7, #20]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 80011c8:	b408      	push	{r3}
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b0b5      	sub	sp, #212	@ 0xd4
 80011ce:	af02      	add	r7, sp, #8
 80011d0:	4603      	mov	r3, r0
 80011d2:	603a      	str	r2, [r7, #0]
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	460b      	mov	r3, r1
 80011d8:	71bb      	strb	r3, [r7, #6]
    Frame frame = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	228a      	movs	r2, #138	@ 0x8a
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f007 f9bc 	bl	8008560 <memset>
    frame.sender = sender;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	777b      	strb	r3, [r7, #29]
    frame.receiver = receiver;
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	77bb      	strb	r3, [r7, #30]
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	3303      	adds	r3, #3
 80011f6:	2203      	movs	r2, #3
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f007 f9b8 	bl	8008570 <strncpy>

    // Użycie dynamicznej alokacji do przechowywania danych sformatowanych
    char *formatted_data = (char *)malloc(MAX_DATA_SIZE);
 8001200:	2080      	movs	r0, #128	@ 0x80
 8001202:	f006 fda5 	bl	8007d50 <malloc>
 8001206:	4603      	mov	r3, r0
 8001208:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (formatted_data == NULL) {
 800120c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80c5 	beq.w	80013a0 <prepareFrame+0x1d8>
        // Obsługa błędu alokacji pamięci
        return;
    }

    va_list args;
    va_start(args, format);
 8001216:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800121a:	61bb      	str	r3, [r7, #24]
    vsnprintf(formatted_data, MAX_DATA_SIZE, format, args);
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001222:	2180      	movs	r1, #128	@ 0x80
 8001224:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001228:	f007 f95c 	bl	80084e4 <vsniprintf>
    va_end(args);

    size_t data_len = strlen(formatted_data);
 800122c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001230:	f7fe ffce 	bl	80001d0 <strlen>
 8001234:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    // Użycie dynamicznej alokacji do obliczeń CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 8001238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800123c:	3305      	adds	r3, #5
 800123e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    uint8_t *crc_input = (uint8_t *)malloc(crc_input_len);
 8001242:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001246:	f006 fd83 	bl	8007d50 <malloc>
 800124a:	4603      	mov	r3, r0
 800124c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (crc_input == NULL) {
 8001250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d104      	bne.n	8001262 <prepareFrame+0x9a>
        // Obsługa błędu alokacji pamięci
        free(formatted_data);
 8001258:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800125c:	f006 fd80 	bl	8007d60 <free>
        return;
 8001260:	e09f      	b.n	80013a2 <prepareFrame+0x1da>
    }

    crc_input[0] = frame.sender;
 8001262:	7f7a      	ldrb	r2, [r7, #29]
 8001264:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001268:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 800126a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800126e:	3301      	adds	r3, #1
 8001270:	7fba      	ldrb	r2, [r7, #30]
 8001272:	701a      	strb	r2, [r3, #0]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 8001274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001278:	3302      	adds	r3, #2
 800127a:	461a      	mov	r2, r3
 800127c:	f107 031f 	add.w	r3, r7, #31
 8001280:	8819      	ldrh	r1, [r3, #0]
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	8011      	strh	r1, [r2, #0]
 8001286:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, formatted_data, data_len);
 8001288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800128c:	3305      	adds	r3, #5
 800128e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001292:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fa5d 	bl	8008756 <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	461a      	mov	r2, r3
 80012a2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80012a6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80012aa:	f7ff fad9 	bl	8000860 <calculateCrc16>
    free(crc_input);  // Zwolnienie pamięci po zakończeniu używania
 80012ae:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80012b2:	f006 fd55 	bl	8007d60 <free>

    // Użycie dynamicznej alokacji do przechowywania ramki
    size_t raw_payload_len = 2 + COMMAND_LENGTH + data_len + 4;
 80012b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80012ba:	3309      	adds	r3, #9
 80012bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint8_t *raw_payload = (uint8_t *)malloc(raw_payload_len);
 80012c0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80012c4:	f006 fd44 	bl	8007d50 <malloc>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (raw_payload == NULL) {
 80012ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <prepareFrame+0x118>
        free(formatted_data);
 80012d6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80012da:	f006 fd41 	bl	8007d60 <free>
        return;
 80012de:	e060      	b.n	80013a2 <prepareFrame+0x1da>
    }

    raw_payload[0] = frame.sender;
 80012e0:	7f7a      	ldrb	r2, [r7, #29]
 80012e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012e6:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 80012e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012ec:	3301      	adds	r3, #1
 80012ee:	7fba      	ldrb	r2, [r7, #30]
 80012f0:	701a      	strb	r2, [r3, #0]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 80012f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012f6:	3302      	adds	r3, #2
 80012f8:	461a      	mov	r2, r3
 80012fa:	f107 031f 	add.w	r3, r7, #31
 80012fe:	8819      	ldrh	r1, [r3, #0]
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	8011      	strh	r1, [r2, #0]
 8001304:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, formatted_data, data_len);
 8001306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800130a:	3305      	adds	r3, #5
 800130c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001310:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001314:	4618      	mov	r0, r3
 8001316:	f007 fa1e 	bl	8008756 <memcpy>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 800131a:	7d3b      	ldrb	r3, [r7, #20]
 800131c:	461a      	mov	r2, r3
 800131e:	7d7b      	ldrb	r3, [r7, #21]
 8001320:	f107 000c 	add.w	r0, r7, #12
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4613      	mov	r3, r2
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <prepareFrame+0x1e8>)
 800132a:	2105      	movs	r1, #5
 800132c:	f007 f838 	bl	80083a0 <sniprintf>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 8001330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001334:	3305      	adds	r3, #5
 8001336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800133a:	4413      	add	r3, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	601a      	str	r2, [r3, #0]
    free(formatted_data);  // Zwolnienie pamięci po zakończeniu używania
 8001340:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001344:	f006 fd0c 	bl	8007d60 <free>

    // Użycie dynamicznej alokacji do przechowywania danych po byte stuffing
    uint8_t *stuffed_payload = (uint8_t *)malloc(512);  // Maksymalny rozmiar bufora
 8001348:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800134c:	f006 fd00 	bl	8007d50 <malloc>
 8001350:	4603      	mov	r3, r0
 8001352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (stuffed_payload == NULL) {
 8001356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <prepareFrame+0x1a0>
        free(raw_payload);
 800135e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001362:	f006 fcfd 	bl	8007d60 <free>
        return;
 8001366:	e01c      	b.n	80013a2 <prepareFrame+0x1da>
    }

    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 8001368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800136c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001370:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001374:	f7ff fec6 	bl	8001104 <byteStuffing>
 8001378:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    free(raw_payload);  // Zwolnienie pamięci po zakończeniu używania
 800137c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001380:	f006 fcee 	bl	8007d60 <free>

    // Wysyłanie ramki przez UART
    USART_sendFrame(stuffed_payload, stuffed_len);
 8001384:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001388:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800138c:	f7ff f9ec 	bl	8000768 <USART_sendFrame>
    USART_fsend("\r\n");
 8001390:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <prepareFrame+0x1ec>)
 8001392:	f7ff f943 	bl	800061c <USART_fsend>

    free(stuffed_payload);  // Zwolnienie pamięci po zakończeniu używania
 8001396:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800139a:	f006 fce1 	bl	8007d60 <free>
 800139e:	e000      	b.n	80013a2 <prepareFrame+0x1da>
        return;
 80013a0:	bf00      	nop
}
 80013a2:	37cc      	adds	r7, #204	@ 0xcc
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013aa:	b001      	add	sp, #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	080094b0 	.word	0x080094b0
 80013b4:	080094bc 	.word	0x080094bc

080013b8 <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Receive_Frame *frame, uint8_t len) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4613      	mov	r3, r2
 80013c4:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b06      	cmp	r3, #6
 80013ca:	d948      	bls.n	800145e <decodeFrame+0xa6>
            uint8_t k = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	75fa      	strb	r2, [r7, #23]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	75fa      	strb	r2, [r7, #23]
 80013e8:	461a      	mov	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c98      	adds	r0, r3, #2
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	2203      	movs	r2, #3
 8001400:	4619      	mov	r1, r3
 8001402:	f007 f9a8 	bl	8008756 <memcpy>
            k += COMMAND_LENGTH;
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	3303      	adds	r3, #3
 800140a:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	3b07      	subs	r3, #7
 8001410:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1d58      	adds	r0, r3, #5
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	7dba      	ldrb	r2, [r7, #22]
 800141e:	4619      	mov	r1, r3
 8001420:	f007 f999 	bl	8008756 <memcpy>
            k += data_len;
 8001424:	7dfa      	ldrb	r2, [r7, #23]
 8001426:	7dbb      	ldrb	r3, [r7, #22]
 8001428:	4413      	add	r3, r2
 800142a:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	823b      	strh	r3, [r7, #16]
            calculateCrc16((uint8_t *)frame, k, ownCrc);
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f107 0214 	add.w	r2, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff fa0d 	bl	8000860 <calculateCrc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 8001446:	7d3a      	ldrb	r2, [r7, #20]
 8001448:	7c3b      	ldrb	r3, [r7, #16]
 800144a:	429a      	cmp	r2, r3
 800144c:	d103      	bne.n	8001456 <decodeFrame+0x9e>
 800144e:	7d7a      	ldrb	r2, [r7, #21]
 8001450:	7c7b      	ldrb	r3, [r7, #17]
 8001452:	429a      	cmp	r2, r3
 8001454:	d001      	beq.n	800145a <decodeFrame+0xa2>
            	return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e002      	b.n	8001460 <decodeFrame+0xa8>
            }
            return true;
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <decodeFrame+0xa8>
        }
        return false;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <processReceivedChar>:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
*   TODO zmienic dekodowanie ramki
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b7e      	cmp	r3, #126	@ 0x7e
 8001476:	d113      	bne.n	80014a0 <processReceivedChar+0x38>
        if (!in_frame) {
 8001478:	4b4b      	ldr	r3, [pc, #300]	@ (80015a8 <processReceivedChar+0x140>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	f083 0301 	eor.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <processReceivedChar+0x32>
            in_frame = true;
 8001486:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <processReceivedChar+0x140>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
            bx_index = 0;
 800148c:	4b47      	ldr	r3, [pc, #284]	@ (80015ac <processReceivedChar+0x144>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
            escape_detected = false;
 8001492:	4b47      	ldr	r3, [pc, #284]	@ (80015b0 <processReceivedChar+0x148>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
    	resetFrameState();
    }
}
 8001498:	e081      	b.n	800159e <processReceivedChar+0x136>
            resetFrameState();
 800149a:	f7ff fa95 	bl	80009c8 <resetFrameState>
}
 800149e:	e07e      	b.n	800159e <processReceivedChar+0x136>
    } else if (received_char == FRAME_END) {
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b60      	cmp	r3, #96	@ 0x60
 80014a4:	d12a      	bne.n	80014fc <processReceivedChar+0x94>
        if (in_frame) {
 80014a6:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <processReceivedChar+0x140>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d01d      	beq.n	80014ea <processReceivedChar+0x82>
            if (decodeFrame(bx, &receiveFrame, bx_index)) {
 80014ae:	4b3f      	ldr	r3, [pc, #252]	@ (80015ac <processReceivedChar+0x144>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	493f      	ldr	r1, [pc, #252]	@ (80015b4 <processReceivedChar+0x14c>)
 80014b8:	483f      	ldr	r0, [pc, #252]	@ (80015b8 <processReceivedChar+0x150>)
 80014ba:	f7ff ff7d 	bl	80013b8 <decodeFrame>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <processReceivedChar+0x70>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 80014c4:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <processReceivedChar+0x154>)
 80014c6:	4a3e      	ldr	r2, [pc, #248]	@ (80015c0 <processReceivedChar+0x158>)
 80014c8:	2167      	movs	r1, #103	@ 0x67
 80014ca:	2068      	movs	r0, #104	@ 0x68
 80014cc:	f7ff fe7c 	bl	80011c8 <prepareFrame>
                handleCommand(&receiveFrame);
 80014d0:	4838      	ldr	r0, [pc, #224]	@ (80015b4 <processReceivedChar+0x14c>)
 80014d2:	f000 f879 	bl	80015c8 <handleCommand>
 80014d6:	e005      	b.n	80014e4 <processReceivedChar+0x7c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80014d8:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <processReceivedChar+0x15c>)
 80014da:	4a39      	ldr	r2, [pc, #228]	@ (80015c0 <processReceivedChar+0x158>)
 80014dc:	2167      	movs	r1, #103	@ 0x67
 80014de:	2068      	movs	r0, #104	@ 0x68
 80014e0:	f7ff fe72 	bl	80011c8 <prepareFrame>
            resetFrameState();
 80014e4:	f7ff fa70 	bl	80009c8 <resetFrameState>
}
 80014e8:	e059      	b.n	800159e <processReceivedChar+0x136>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80014ea:	4b36      	ldr	r3, [pc, #216]	@ (80015c4 <processReceivedChar+0x15c>)
 80014ec:	4a34      	ldr	r2, [pc, #208]	@ (80015c0 <processReceivedChar+0x158>)
 80014ee:	2167      	movs	r1, #103	@ 0x67
 80014f0:	2068      	movs	r0, #104	@ 0x68
 80014f2:	f7ff fe69 	bl	80011c8 <prepareFrame>
            resetFrameState();
 80014f6:	f7ff fa67 	bl	80009c8 <resetFrameState>
}
 80014fa:	e050      	b.n	800159e <processReceivedChar+0x136>
    } else if (in_frame) {
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <processReceivedChar+0x140>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d04a      	beq.n	800159a <processReceivedChar+0x132>
        if (escape_detected) {
 8001504:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <processReceivedChar+0x148>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02f      	beq.n	800156c <processReceivedChar+0x104>
            if (received_char == FRAME_START_STUFF) {
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b5e      	cmp	r3, #94	@ 0x5e
 8001510:	d108      	bne.n	8001524 <processReceivedChar+0xbc>
                bx[bx_index++] = FRAME_START;
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <processReceivedChar+0x144>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	4924      	ldr	r1, [pc, #144]	@ (80015ac <processReceivedChar+0x144>)
 800151a:	600a      	str	r2, [r1, #0]
 800151c:	4a26      	ldr	r2, [pc, #152]	@ (80015b8 <processReceivedChar+0x150>)
 800151e:	217e      	movs	r1, #126	@ 0x7e
 8001520:	54d1      	strb	r1, [r2, r3]
 8001522:	e01f      	b.n	8001564 <processReceivedChar+0xfc>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b5d      	cmp	r3, #93	@ 0x5d
 8001528:	d108      	bne.n	800153c <processReceivedChar+0xd4>
                bx[bx_index++] = ESCAPE_CHAR;
 800152a:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <processReceivedChar+0x144>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	491e      	ldr	r1, [pc, #120]	@ (80015ac <processReceivedChar+0x144>)
 8001532:	600a      	str	r2, [r1, #0]
 8001534:	4a20      	ldr	r2, [pc, #128]	@ (80015b8 <processReceivedChar+0x150>)
 8001536:	217d      	movs	r1, #125	@ 0x7d
 8001538:	54d1      	strb	r1, [r2, r3]
 800153a:	e013      	b.n	8001564 <processReceivedChar+0xfc>
            } else if (received_char == FRAME_END_STUFF) {
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b26      	cmp	r3, #38	@ 0x26
 8001540:	d108      	bne.n	8001554 <processReceivedChar+0xec>
                bx[bx_index++] = FRAME_END;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <processReceivedChar+0x144>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	4918      	ldr	r1, [pc, #96]	@ (80015ac <processReceivedChar+0x144>)
 800154a:	600a      	str	r2, [r1, #0]
 800154c:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <processReceivedChar+0x150>)
 800154e:	2160      	movs	r1, #96	@ 0x60
 8001550:	54d1      	strb	r1, [r2, r3]
 8001552:	e007      	b.n	8001564 <processReceivedChar+0xfc>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <processReceivedChar+0x15c>)
 8001556:	4a1a      	ldr	r2, [pc, #104]	@ (80015c0 <processReceivedChar+0x158>)
 8001558:	2167      	movs	r1, #103	@ 0x67
 800155a:	2068      	movs	r0, #104	@ 0x68
 800155c:	f7ff fe34 	bl	80011c8 <prepareFrame>
                resetFrameState();
 8001560:	f7ff fa32 	bl	80009c8 <resetFrameState>
            escape_detected = false;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <processReceivedChar+0x148>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	e018      	b.n	800159e <processReceivedChar+0x136>
        } else if (received_char == ESCAPE_CHAR) {
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001570:	d103      	bne.n	800157a <processReceivedChar+0x112>
            escape_detected = true;
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <processReceivedChar+0x148>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
}
 8001578:	e011      	b.n	800159e <processReceivedChar+0x136>
            if (bx_index < sizeof(bx)) {
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <processReceivedChar+0x144>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2bff      	cmp	r3, #255	@ 0xff
 8001580:	d808      	bhi.n	8001594 <processReceivedChar+0x12c>
                bx[bx_index++] = received_char;
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <processReceivedChar+0x144>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	4908      	ldr	r1, [pc, #32]	@ (80015ac <processReceivedChar+0x144>)
 800158a:	600a      	str	r2, [r1, #0]
 800158c:	490a      	ldr	r1, [pc, #40]	@ (80015b8 <processReceivedChar+0x150>)
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	54ca      	strb	r2, [r1, r3]
}
 8001592:	e004      	b.n	800159e <processReceivedChar+0x136>
            	resetFrameState();
 8001594:	f7ff fa18 	bl	80009c8 <resetFrameState>
}
 8001598:	e001      	b.n	800159e <processReceivedChar+0x136>
    	resetFrameState();
 800159a:	f7ff fa15 	bl	80009c8 <resetFrameState>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000cb4 	.word	0x20000cb4
 80015ac:	20000cb0 	.word	0x20000cb0
 80015b0:	20000cac 	.word	0x20000cac
 80015b4:	20000cb8 	.word	0x20000cb8
 80015b8:	20000bac 	.word	0x20000bac
 80015bc:	080094c0 	.word	0x080094c0
 80015c0:	0800948c 	.word	0x0800948c
 80015c4:	080094c8 	.word	0x080094c8

080015c8 <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Receive_Frame *frame) {
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b092      	sub	sp, #72	@ 0x48
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8090 	beq.w	80016f8 <handleCommand+0x130>
        return;
    }

    CommandEntry commandTable[COMMAND_COUNT] = {
 80015d8:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <handleCommand+0x138>)
 80015da:	f107 0414 	add.w	r4, r7, #20
 80015de:	461d      	mov	r5, r3
 80015e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ec:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };

    for (int i = 0; i < COMMAND_COUNT; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015f4:	e073      	b.n	80016de <handleCommand+0x116>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	1c98      	adds	r0, r3, #2
 80015fa:	f107 0214 	add.w	r2, r7, #20
 80015fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	2203      	movs	r2, #3
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff f986 	bl	8000918 <safeCompare>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d062      	beq.n	80016d8 <handleCommand+0x110>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 8001612:	f107 0214 	add.w	r2, r7, #20
 8001616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	2203      	movs	r2, #3
 800161e:	4939      	ldr	r1, [pc, #228]	@ (8001704 <handleCommand+0x13c>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f979 	bl	8000918 <safeCompare>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d017      	beq.n	800165c <handleCommand+0x94>
                    lcdClear();
 800162c:	f000 fa18 	bl	8001a60 <lcdClear>
                    commandTable[i].function(frame);
 8001630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	3340      	adds	r3, #64	@ 0x40
 8001636:	443b      	add	r3, r7
 8001638:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
                    if (!lcdIsBusy()) {
 8001640:	f000 fab2 	bl	8001ba8 <lcdIsBusy>
 8001644:	4603      	mov	r3, r0
 8001646:	f083 0301 	eor.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <handleCommand+0x8c>
                        lcdCopy();
 8001650:	f000 f9b8 	bl	80019c4 <lcdCopy>
                    }
                    clearFrame(frame);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fa95 	bl	8000b84 <clearFrame>
                    return;
 800165a:	e04e      	b.n	80016fa <handleCommand+0x132>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3305      	adds	r3, #5
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	f107 0110 	add.w	r1, r7, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fd0f 	bl	800108c <parseCoordinates>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d027      	beq.n	80016c4 <handleCommand+0xfc>
                    if (isWithinBounds(x, y)) {
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fce8 	bl	8001050 <isWithinBounds>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d017      	beq.n	80016b6 <handleCommand+0xee>
                        lcdClear();
 8001686:	f000 f9eb 	bl	8001a60 <lcdClear>
                        commandTable[i].function(frame);
 800168a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	3340      	adds	r3, #64	@ 0x40
 8001690:	443b      	add	r3, r7
 8001692:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
                        if (!lcdIsBusy()) {
 800169a:	f000 fa85 	bl	8001ba8 <lcdIsBusy>
 800169e:	4603      	mov	r3, r0
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <handleCommand+0xe6>
                            lcdCopy();
 80016aa:	f000 f98b 	bl	80019c4 <lcdCopy>
                        }
                        clearFrame(frame);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fa68 	bl	8000b84 <clearFrame>
                        return;
 80016b4:	e021      	b.n	80016fa <handleCommand+0x132>
                    } else {
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 80016b6:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <handleCommand+0x140>)
 80016b8:	4a14      	ldr	r2, [pc, #80]	@ (800170c <handleCommand+0x144>)
 80016ba:	2167      	movs	r1, #103	@ 0x67
 80016bc:	2068      	movs	r0, #104	@ 0x68
 80016be:	f7ff fd83 	bl	80011c8 <prepareFrame>
                    return;
 80016c2:	e01a      	b.n	80016fa <handleCommand+0x132>
                }
            } else {
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3305      	adds	r3, #5
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <handleCommand+0x148>)
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <handleCommand+0x144>)
 80016ce:	2167      	movs	r1, #103	@ 0x67
 80016d0:	2068      	movs	r0, #104	@ 0x68
 80016d2:	f7ff fd79 	bl	80011c8 <prepareFrame>
                return;
 80016d6:	e010      	b.n	80016fa <handleCommand+0x132>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 80016d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016da:	3301      	adds	r3, #1
 80016dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	dd88      	ble.n	80015f6 <handleCommand+0x2e>
            }
        }
    }
    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3302      	adds	r3, #2
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <handleCommand+0x148>)
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <handleCommand+0x144>)
 80016ee:	2167      	movs	r1, #103	@ 0x67
 80016f0:	2068      	movs	r0, #104	@ 0x68
 80016f2:	f7ff fd69 	bl	80011c8 <prepareFrame>
 80016f6:	e000      	b.n	80016fa <handleCommand+0x132>
        return;
 80016f8:	bf00      	nop
}
 80016fa:	3740      	adds	r7, #64	@ 0x40
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	080094e4 	.word	0x080094e4
 8001704:	080094d0 	.word	0x080094d0
 8001708:	080094d4 	.word	0x080094d4
 800170c:	0800948c 	.word	0x0800948c
 8001710:	08009478 	.word	0x08009478

08001714 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <MX_GPIO_Init+0x140>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4a49      	ldr	r2, [pc, #292]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	4a43      	ldr	r2, [pc, #268]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800174c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174e:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <MX_GPIO_Init+0x140>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a3d      	ldr	r2, [pc, #244]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	4a37      	ldr	r2, [pc, #220]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	4b32      	ldr	r3, [pc, #200]	@ (8001854 <MX_GPIO_Init+0x140>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	4a31      	ldr	r2, [pc, #196]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <MX_GPIO_Init+0x140>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f641 0106 	movw	r1, #6150	@ 0x1806
 80017a8:	482b      	ldr	r0, [pc, #172]	@ (8001858 <MX_GPIO_Init+0x144>)
 80017aa:	f001 fbe3 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80017ae:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80017b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4826      	ldr	r0, [pc, #152]	@ (800185c <MX_GPIO_Init+0x148>)
 80017c4:	f001 fa2c 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017c8:	2303      	movs	r3, #3
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017cc:	2303      	movs	r3, #3
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4821      	ldr	r0, [pc, #132]	@ (8001860 <MX_GPIO_Init+0x14c>)
 80017dc:	f001 fa20 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80017e0:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80017e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f8:	f001 fa12 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80017fc:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001800:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4811      	ldr	r0, [pc, #68]	@ (8001858 <MX_GPIO_Init+0x144>)
 8001812:	f001 fa05 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001816:	f641 0306 	movw	r3, #6150	@ 0x1806
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	480a      	ldr	r0, [pc, #40]	@ (8001858 <MX_GPIO_Init+0x144>)
 8001830:	f001 f9f6 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001834:	2304      	movs	r3, #4
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	2303      	movs	r3, #3
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <MX_GPIO_Init+0x150>)
 8001848:	f001 f9ea 	bl	8002c20 <HAL_GPIO_Init>

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	@ 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	48000400 	.word	0x48000400
 800185c:	48000800 	.word	0x48000800
 8001860:	48001c00 	.word	0x48001c00
 8001864:	48000c00 	.word	0x48000c00

08001868 <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <lcdCmd+0x44>)
 800187a:	f001 fb7b 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <lcdCmd+0x44>)
 8001886:	f001 fb75 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800188a:	1df9      	adds	r1, r7, #7
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	2201      	movs	r2, #1
 8001892:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <lcdCmd+0x48>)
 8001894:	f002 ff49 	bl	800472a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <lcdCmd+0x44>)
 80018a0:	f001 fb68 	bl	8002f74 <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	48000400 	.word	0x48000400
 80018b0:	20014d50 	.word	0x20014d50

080018b4 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <lcdData+0x44>)
 80018c6:	f001 fb55 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d0:	4809      	ldr	r0, [pc, #36]	@ (80018f8 <lcdData+0x44>)
 80018d2:	f001 fb4f 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80018d6:	1df9      	adds	r1, r7, #7
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	2201      	movs	r2, #1
 80018de:	4807      	ldr	r0, [pc, #28]	@ (80018fc <lcdData+0x48>)
 80018e0:	f002 ff23 	bl	800472a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ea:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <lcdData+0x44>)
 80018ec:	f001 fb42 	bl	8002f74 <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	48000400 	.word	0x48000400
 80018fc:	20014d50 	.word	0x20014d50

08001900 <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <lcdSend+0x20>
		lcdCmd(value);
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffa5 	bl	8001868 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 800191e:	e004      	b.n	800192a <lcdSend+0x2a>
		lcdData(value);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ffc5 	bl	80018b4 <lcdData>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	b29b      	uxth	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ffb5 	bl	80018b4 <lcdData>
	lcdData(value);
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ffb0 	bl	80018b4 <lcdData>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 800196a:	202a      	movs	r0, #42	@ 0x2a
 800196c:	f7ff ff7c 	bl	8001868 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	b29b      	uxth	r3, r3
 8001974:	3301      	adds	r3, #1
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ffda 	bl	8001932 <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b29b      	uxth	r3, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ffd1 	bl	8001932 <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001990:	202b      	movs	r0, #43	@ 0x2b
 8001992:	f7ff ff69 	bl	8001868 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	b29b      	uxth	r3, r3
 800199a:	3302      	adds	r3, #2
 800199c:	b29b      	uxth	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ffc7 	bl	8001932 <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ffbc 	bl	8001932 <lcdData16>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 80019ca:	f000 f8ed 	bl	8001ba8 <lcdIsBusy>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d138      	bne.n	8001a46 <lcdCopy+0x82>
        return; // Jeśli transfer DMA wciąż trwa, wyjdź
    }

    // Zamień bufory
    uint16_t *temp = lcd_buffers.front_buffer;
 80019d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <lcdCopy+0x8c>)
 80019d6:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	607b      	str	r3, [r7, #4]
    lcd_buffers.front_buffer = lcd_buffers.back_buffer;
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <lcdCopy+0x8c>)
 80019e0:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a50 <lcdCopy+0x8c>)
 80019e8:	f502 32a0 	add.w	r2, r2, #81920	@ 0x14000
 80019ec:	6013      	str	r3, [r2, #0]
    lcd_buffers.back_buffer = temp;
 80019ee:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <lcdCopy+0x8c>)
 80019f0:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6053      	str	r3, [r2, #4]
    current_buffer = lcd_buffers.back_buffer;
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <lcdCopy+0x8c>)
 80019fc:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <lcdCopy+0x90>)
 8001a04:	6013      	str	r3, [r2, #0]

    // Rozpocznij transfer nowego front buffera
    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	22a0      	movs	r2, #160	@ 0xa0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff ffa5 	bl	800195c <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001a12:	202c      	movs	r0, #44	@ 0x2c
 8001a14:	f7ff ff28 	bl	8001868 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a1e:	480e      	ldr	r0, [pc, #56]	@ (8001a58 <lcdCopy+0x94>)
 8001a20:	f001 faa8 	bl	8002f74 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a2a:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <lcdCopy+0x94>)
 8001a2c:	f001 faa2 	bl	8002f74 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)lcd_buffers.front_buffer, sizeof(lcd_buffers.buffer1));
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <lcdCopy+0x8c>)
 8001a32:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <lcdCopy+0x98>)
 8001a40:	f002 ffea 	bl	8004a18 <HAL_SPI_Transmit_DMA>
 8001a44:	e000      	b.n	8001a48 <lcdCopy+0x84>
        return; // Jeśli transfer DMA wciąż trwa, wyjdź
 8001a46:	bf00      	nop
}
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000d40 	.word	0x20000d40
 8001a54:	20014d48 	.word	0x20014d48
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	20014d50 	.word	0x20014d50

08001a60 <lcdClear>:
*   2. Przesyła wyzerowany bufor do wyświetlacza
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    memset(current_buffer, 0, LCD_WIDTH * LCD_HEIGHT * sizeof(uint16_t));
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <lcdClear+0x18>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f006 fd76 	bl	8008560 <memset>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20014d48 	.word	0x20014d48

08001a7c <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2104      	movs	r1, #4
 8001a86:	4828      	ldr	r0, [pc, #160]	@ (8001b28 <lcdInit+0xac>)
 8001a88:	f001 fa74 	bl	8002f74 <HAL_GPIO_WritePin>
    delay(100);
 8001a8c:	2064      	movs	r0, #100	@ 0x64
 8001a8e:	f000 f8e7 	bl	8001c60 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001a92:	2201      	movs	r2, #1
 8001a94:	2104      	movs	r1, #4
 8001a96:	4824      	ldr	r0, [pc, #144]	@ (8001b28 <lcdInit+0xac>)
 8001a98:	f001 fa6c 	bl	8002f74 <HAL_GPIO_WritePin>
    delay(100);
 8001a9c:	2064      	movs	r0, #100	@ 0x64
 8001a9e:	f000 f8df 	bl	8001c60 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	e009      	b.n	8001abc <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001aa8:	4a20      	ldr	r2, [pc, #128]	@ (8001b2c <lcdInit+0xb0>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff25 	bl	8001900 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b4b      	cmp	r3, #75	@ 0x4b
 8001ac0:	d9f2      	bls.n	8001aa8 <lcdInit+0x2c>
    }
    delay(200);
 8001ac2:	20c8      	movs	r0, #200	@ 0xc8
 8001ac4:	f000 f8cc 	bl	8001c60 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001ac8:	2011      	movs	r0, #17
 8001aca:	f7ff fecd 	bl	8001868 <lcdCmd>
    delay(120);
 8001ace:	2078      	movs	r0, #120	@ 0x78
 8001ad0:	f000 f8c6 	bl	8001c60 <delay>
    lcdCmd(ST7735S_DISPON);
 8001ad4:	2029      	movs	r0, #41	@ 0x29
 8001ad6:	f7ff fec7 	bl	8001868 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2102      	movs	r1, #2
 8001ade:	4812      	ldr	r0, [pc, #72]	@ (8001b28 <lcdInit+0xac>)
 8001ae0:	f001 fa48 	bl	8002f74 <HAL_GPIO_WritePin>
    lcd_buffers.front_buffer = lcd_buffers.buffer1;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <lcdInit+0xb4>)
 8001ae6:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <lcdInit+0xb4>)
 8001aee:	6013      	str	r3, [r2, #0]
    lcd_buffers.back_buffer = lcd_buffers.buffer2;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <lcdInit+0xb4>)
 8001af2:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <lcdInit+0xb8>)
 8001afa:	6053      	str	r3, [r2, #4]
    current_buffer = lcd_buffers.back_buffer;
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <lcdInit+0xb4>)
 8001afe:	f503 33a0 	add.w	r3, r3, #81920	@ 0x14000
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a0c      	ldr	r2, [pc, #48]	@ (8001b38 <lcdInit+0xbc>)
 8001b06:	6013      	str	r3, [r2, #0]
    memset(lcd_buffers.buffer1, 0, sizeof(lcd_buffers.buffer1));
 8001b08:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <lcdInit+0xb4>)
 8001b10:	f006 fd26 	bl	8008560 <memset>
    memset(lcd_buffers.buffer2, 0, sizeof(lcd_buffers.buffer2));
 8001b14:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <lcdInit+0xb8>)
 8001b1c:	f006 fd20 	bl	8008560 <memset>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	48000400 	.word	0x48000400
 8001b2c:	080128b0 	.word	0x080128b0
 8001b30:	20000d40 	.word	0x20000d40
 8001b34:	2000ad40 	.word	0x2000ad40
 8001b38:	20014d48 	.word	0x20014d48

08001b3c <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	4613      	mov	r3, r2
 8001b48:	80fb      	strh	r3, [r7, #6]
    if (x >= 0 && x < LCD_WIDTH && y >= 0 && y < LCD_HEIGHT) {
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db16      	blt.n	8001b7e <lcdPutPixel+0x42>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b9f      	cmp	r3, #159	@ 0x9f
 8001b54:	dc13      	bgt.n	8001b7e <lcdPutPixel+0x42>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db10      	blt.n	8001b7e <lcdPutPixel+0x42>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b60:	dc0d      	bgt.n	8001b7e <lcdPutPixel+0x42>
        current_buffer[x + y * LCD_WIDTH] = color;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <lcdPutPixel+0x50>)
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	015b      	lsls	r3, r3, #5
 8001b70:	461a      	mov	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	440b      	add	r3, r1
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	801a      	strh	r2, [r3, #0]
    }
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20014d48 	.word	0x20014d48

08001b90 <lcdTransferDone>:


void lcdTransferDone(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b9a:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <lcdTransferDone+0x14>)
 8001b9c:	f001 f9ea 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <lcdIsBusy>:
bool lcdIsBusy(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	if(HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY)
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <lcdIsBusy+0x1c>)
 8001bae:	f003 f83f 	bl	8004c30 <HAL_SPI_GetState>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d101      	bne.n	8001bbc <lcdIsBusy+0x14>
	{
		return true;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <lcdIsBusy+0x16>
	} else {
		return false;
 8001bbc:	2300      	movs	r3, #0
	}
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20014d50 	.word	0x20014d50

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ffc2 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <delay+0x2c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001c6e:	bf00      	nop
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <delay+0x2c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d8f8      	bhi.n	8001c70 <delay+0x10>
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20014d4c 	.word	0x20014d4c

08001c90 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001c96:	f7fe fc85 	bl	80005a4 <USART_kbhit>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001ca0:	f7fe fc92 	bl	80005c8 <USART_getchar>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fbdc 	bl	8001468 <processReceivedChar>
	 }
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbc:	f000 fbb3 	bl	8002426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc0:	f000 f812 	bl	8001ce8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <main+0x2c>)
 8001cc6:	f7ff ffa9 	bl	8001c1c <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f7ff fd23 	bl	8001714 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cce:	f7fe fe05 	bl	80008dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001cd2:	f000 fad3 	bl	800227c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001cd6:	f000 f85f 	bl	8001d98 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001cda:	f7ff fecf 	bl	8001a7c <lcdInit>
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
    /* USER CODE END WHILE */
	  waitForFrame();
 8001cde:	f7ff ffd7 	bl	8001c90 <waitForFrame>
 8001ce2:	e7fc      	b.n	8001cde <main+0x26>
 8001ce4:	00013880 	.word	0x00013880

08001ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b096      	sub	sp, #88	@ 0x58
 8001cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	2244      	movs	r2, #68	@ 0x44
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f006 fc32 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d0e:	f001 f957 	bl	8002fc0 <HAL_PWREx_ControlVoltageScaling>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d18:	f000 f838 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d28:	2360      	movs	r3, #96	@ 0x60
 8001d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d30:	2301      	movs	r3, #1
 8001d32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d38:	2328      	movs	r3, #40	@ 0x28
 8001d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d44:	2302      	movs	r3, #2
 8001d46:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 f98d 	bl	800306c <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001d58:	f000 f818 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2303      	movs	r3, #3
 8001d62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	2104      	movs	r1, #4
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fd55 	bl	8003824 <HAL_RCC_ClockConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d80:	f000 f804 	bl	8001d8c <Error_Handler>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3758      	adds	r7, #88	@ 0x58
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <Error_Handler+0x8>

08001d98 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <MX_SPI2_Init+0x78>)
 8001da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001da4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001db2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001db6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dce:	2210      	movs	r2, #16
 8001dd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001de6:	2207      	movs	r2, #7
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_SPI2_Init+0x74>)
 8001df8:	f002 fbf4 	bl	80045e4 <HAL_SPI_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e02:	f7ff ffc3 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20014d50 	.word	0x20014d50
 8001e10:	40003800 	.word	0x40003800

08001e14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3a      	ldr	r2, [pc, #232]	@ (8001f1c <HAL_SPI_MspInit+0x108>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d16d      	bne.n	8001f12 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e36:	4b3a      	ldr	r3, [pc, #232]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3a:	4a39      	ldr	r2, [pc, #228]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e42:	4b37      	ldr	r3, [pc, #220]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	4a33      	ldr	r2, [pc, #204]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5a:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b2e      	ldr	r3, [pc, #184]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <HAL_SPI_MspInit+0x10c>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4822      	ldr	r0, [pc, #136]	@ (8001f24 <HAL_SPI_MspInit+0x110>)
 8001e9a:	f000 fec1 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481b      	ldr	r0, [pc, #108]	@ (8001f28 <HAL_SPI_MspInit+0x114>)
 8001ebc:	f000 feb0 	bl	8002c20 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <HAL_SPI_MspInit+0x11c>)
 8001ec4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ece:	2210      	movs	r2, #16
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001eda:	2280      	movs	r2, #128	@ 0x80
 8001edc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ef6:	480d      	ldr	r0, [pc, #52]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001ef8:	f000 fc1c 	bl	8002734 <HAL_DMA_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001f02:	f7ff ff43 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001f0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f0c:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <HAL_SPI_MspInit+0x118>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40003800 	.word	0x40003800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000800 	.word	0x48000800
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	20014db4 	.word	0x20014db4
 8001f30:	40020058 	.word	0x40020058

08001f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_MspInit+0x44>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <HAL_MspInit+0x44>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_MspInit+0x44>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_MspInit+0x44>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f56:	4a08      	ldr	r2, [pc, #32]	@ (8001f78 <HAL_MspInit+0x44>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_MspInit+0x44>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <NMI_Handler+0x4>

08001f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <MemManage_Handler+0x4>

08001f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 fa7c 	bl	80024d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <SysTick_Handler+0x18>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a02      	ldr	r2, [pc, #8]	@ (8001fe8 <SysTick_Handler+0x18>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20014d4c 	.word	0x20014d4c

08001fec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <DMA1_Channel5_IRQHandler+0x10>)
 8001ff2:	f000 fd36 	bl	8002a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20014db4 	.word	0x20014db4

08002000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <USART2_IRQHandler+0x10>)
 8002006:	f003 f8ff 	bl	8005208 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20014e00 	.word	0x20014e00

08002014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return 1;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_kill>:

int _kill(int pid, int sig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800202e:	f006 fb65 	bl	80086fc <__errno>
 8002032:	4603      	mov	r3, r0
 8002034:	2216      	movs	r2, #22
 8002036:	601a      	str	r2, [r3, #0]
  return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_exit>:

void _exit (int status)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ffe7 	bl	8002024 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002056:	bf00      	nop
 8002058:	e7fd      	b.n	8002056 <_exit+0x12>

0800205a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e00a      	b.n	8002082 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800206c:	f3af 8000 	nop.w
 8002070:	4601      	mov	r1, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf0      	blt.n	800206c <_read+0x12>
  }

  return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e009      	b.n	80020ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbf1      	blt.n	80020a6 <_write+0x12>
  }
  return len;
 80020c2:	687b      	ldr	r3, [r7, #4]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_close>:

int _close(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f4:	605a      	str	r2, [r3, #4]
  return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_isatty>:

int _isatty(int file)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f006 faca 	bl	80086fc <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20018000 	.word	0x20018000
 8002194:	00000400 	.word	0x00000400
 8002198:	20014dfc 	.word	0x20014dfc
 800219c:	20014fd8 	.word	0x20014fd8

080021a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <HAL_UART_TxCpltCallback+0x5c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d120      	bne.n	8002216 <HAL_UART_TxCpltCallback+0x52>
	   lcdTransferDone();
 80021d4:	f7ff fcdc 	bl	8001b90 <lcdTransferDone>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_UART_TxCpltCallback+0x60>)
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_UART_TxCpltCallback+0x60>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d018      	beq.n	8002216 <HAL_UART_TxCpltCallback+0x52>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_UART_TxCpltCallback+0x60>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002228 <HAL_UART_TxCpltCallback+0x64>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 80021ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <HAL_UART_TxCpltCallback+0x60>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	3301      	adds	r3, #1
 80021f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002224 <HAL_UART_TxCpltCallback+0x60>)
 80021f6:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_UART_TxCpltCallback+0x60>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002200:	d302      	bcc.n	8002208 <HAL_UART_TxCpltCallback+0x44>
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <HAL_UART_TxCpltCallback+0x60>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8002208:	f107 030f 	add.w	r3, r7, #15
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	4803      	ldr	r0, [pc, #12]	@ (8002220 <HAL_UART_TxCpltCallback+0x5c>)
 8002212:	f002 ff4f 	bl	80050b4 <HAL_UART_Transmit_IT>
	   }
   }
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20014e00 	.word	0x20014e00
 8002224:	2000029c 	.word	0x2000029c
 8002228:	200002ac 	.word	0x200002ac

0800222c <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <HAL_UART_RxCpltCallback+0x44>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d114      	bne.n	8002266 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 800223c:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_UART_RxCpltCallback+0x48>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	3301      	adds	r3, #1
 8002242:	4a0c      	ldr	r2, [pc, #48]	@ (8002274 <HAL_UART_RxCpltCallback+0x48>)
 8002244:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8002246:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_UART_RxCpltCallback+0x48>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	d902      	bls.n	8002254 <HAL_UART_RxCpltCallback+0x28>
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_UART_RxCpltCallback+0x48>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8002254:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <HAL_UART_RxCpltCallback+0x48>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_UART_RxCpltCallback+0x4c>)
 800225a:	4413      	add	r3, r2
 800225c:	2201      	movs	r2, #1
 800225e:	4619      	mov	r1, r3
 8002260:	4803      	ldr	r0, [pc, #12]	@ (8002270 <HAL_UART_RxCpltCallback+0x44>)
 8002262:	f002 ff85 	bl	8005170 <HAL_UART_Receive_IT>

	 }
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20014e00 	.word	0x20014e00
 8002274:	2000028c 	.word	0x2000028c
 8002278:	20000aac 	.word	0x20000aac

0800227c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002280:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 8002282:	4a1d      	ldr	r2, [pc, #116]	@ (80022f8 <MX_USART2_UART_Init+0x7c>)
 8002284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229a:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022be:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 80022c0:	f002 feaa 	bl	8005018 <HAL_UART_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022ca:	f7ff fd5f 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 80022ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d2:	490a      	ldr	r1, [pc, #40]	@ (80022fc <MX_USART2_UART_Init+0x80>)
 80022d4:	480a      	ldr	r0, [pc, #40]	@ (8002300 <MX_USART2_UART_Init+0x84>)
 80022d6:	f7fe f94b 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 80022da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022de:	4909      	ldr	r1, [pc, #36]	@ (8002304 <MX_USART2_UART_Init+0x88>)
 80022e0:	4809      	ldr	r0, [pc, #36]	@ (8002308 <MX_USART2_UART_Init+0x8c>)
 80022e2:	f7fe f945 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 80022e6:	2201      	movs	r2, #1
 80022e8:	4904      	ldr	r1, [pc, #16]	@ (80022fc <MX_USART2_UART_Init+0x80>)
 80022ea:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <MX_USART2_UART_Init+0x78>)
 80022ec:	f002 ff40 	bl	8005170 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20014e00 	.word	0x20014e00
 80022f8:	40004400 	.word	0x40004400
 80022fc:	20000aac 	.word	0x20000aac
 8002300:	2000028c 	.word	0x2000028c
 8002304:	200002ac 	.word	0x200002ac
 8002308:	2000029c 	.word	0x2000029c

0800230c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b0ac      	sub	sp, #176	@ 0xb0
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2288      	movs	r2, #136	@ 0x88
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f006 f917 	bl	8008560 <memset>
  if(uartHandle->Instance==USART2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <HAL_UART_MspInit+0xc0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d143      	bne.n	80023c4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800233c:	2302      	movs	r3, #2
 800233e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002340:	2300      	movs	r3, #0
 8002342:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4618      	mov	r0, r3
 800234a:	f001 fc8f 	bl	8003c6c <HAL_RCCEx_PeriphCLKConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002354:	f7ff fd1a 	bl	8001d8c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002358:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <HAL_UART_MspInit+0xc4>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <HAL_UART_MspInit+0xc4>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002362:	6593      	str	r3, [r2, #88]	@ 0x58
 8002364:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <HAL_UART_MspInit+0xc4>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <HAL_UART_MspInit+0xc4>)
 8002372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_UART_MspInit+0xc4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_UART_MspInit+0xc4>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002388:	230c      	movs	r3, #12
 800238a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a0:	2307      	movs	r3, #7
 80023a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b0:	f000 fc36 	bl	8002c20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2026      	movs	r0, #38	@ 0x26
 80023ba:	f000 f984 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023be:	2026      	movs	r0, #38	@ 0x26
 80023c0:	f000 f99d 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023c4:	bf00      	nop
 80023c6:	37b0      	adds	r7, #176	@ 0xb0
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40004400 	.word	0x40004400
 80023d0:	40021000 	.word	0x40021000

080023d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800240c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d8:	f7ff fee2 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	@ (8002410 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	@ (8002414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002420 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002402:	f006 f981 	bl	8008708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002406:	f7ff fc57 	bl	8001cb8 <main>

0800240a <LoopForever>:

LoopForever:
    b LoopForever
 800240a:	e7fe      	b.n	800240a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800240c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002418:	08012b84 	.word	0x08012b84
  ldr r2, =_sbss
 800241c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002420:	20014fd8 	.word	0x20014fd8

08002424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_2_IRQHandler>

08002426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f93d 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002436:	200f      	movs	r0, #15
 8002438:	f000 f80e 	bl	8002458 <HAL_InitTick>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	71fb      	strb	r3, [r7, #7]
 8002446:	e001      	b.n	800244c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002448:	f7ff fd74 	bl	8001f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800244c:	79fb      	ldrb	r3, [r7, #7]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002464:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <HAL_InitTick+0x6c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d023      	beq.n	80024b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800246c:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <HAL_InitTick+0x70>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <HAL_InitTick+0x6c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f949 	bl	800271a <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0f      	cmp	r3, #15
 8002492:	d809      	bhi.n	80024a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	2200      	movs	r2, #0
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 f913 	bl	80026c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a0:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <HAL_InitTick+0x74>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e007      	b.n	80024b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	e004      	b.n	80024b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e001      	b.n	80024b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000208 	.word	0x20000208
 80024c8:	20000200 	.word	0x20000200
 80024cc:	20000204 	.word	0x20000204

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000208 	.word	0x20000208
 80024f4:	20014e88 	.word	0x20014e88

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20014e88 	.word	0x20014e88

08002510 <__NVIC_SetPriorityGrouping>:
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	@ (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	@ (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	@ (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	@ 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <SysTick_Config>:
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff8e 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff29 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d8:	f7ff ff3e 	bl	8002558 <__NVIC_GetPriorityGrouping>
 80026dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff ff8e 	bl	8002604 <NVIC_EncodePriority>
 80026e8:	4602      	mov	r2, r0
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5d 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff31 	bl	8002574 <__NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffa2 	bl	800266c <SysTick_Config>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e098      	b.n	8002878 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b4d      	ldr	r3, [pc, #308]	@ (8002884 <HAL_DMA_Init+0x150>)
 800274e:	429a      	cmp	r2, r3
 8002750:	d80f      	bhi.n	8002772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b4b      	ldr	r3, [pc, #300]	@ (8002888 <HAL_DMA_Init+0x154>)
 800275a:	4413      	add	r3, r2
 800275c:	4a4b      	ldr	r2, [pc, #300]	@ (800288c <HAL_DMA_Init+0x158>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a48      	ldr	r2, [pc, #288]	@ (8002890 <HAL_DMA_Init+0x15c>)
 800276e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002770:	e00e      	b.n	8002790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_DMA_Init+0x160>)
 800277a:	4413      	add	r3, r2
 800277c:	4a43      	ldr	r2, [pc, #268]	@ (800288c <HAL_DMA_Init+0x158>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	009a      	lsls	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a42      	ldr	r2, [pc, #264]	@ (8002898 <HAL_DMA_Init+0x164>)
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80027a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027ea:	d039      	beq.n	8002860 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <HAL_DMA_Init+0x15c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11a      	bne.n	800282c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027f6:	4b29      	ldr	r3, [pc, #164]	@ (800289c <HAL_DMA_Init+0x168>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f003 031c 	and.w	r3, r3, #28
 8002802:	210f      	movs	r1, #15
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	4924      	ldr	r1, [pc, #144]	@ (800289c <HAL_DMA_Init+0x168>)
 800280c:	4013      	ands	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002810:	4b22      	ldr	r3, [pc, #136]	@ (800289c <HAL_DMA_Init+0x168>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 031c 	and.w	r3, r3, #28
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	491d      	ldr	r1, [pc, #116]	@ (800289c <HAL_DMA_Init+0x168>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
 800282a:	e019      	b.n	8002860 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800282c:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002834:	f003 031c 	and.w	r3, r3, #28
 8002838:	210f      	movs	r1, #15
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	4917      	ldr	r1, [pc, #92]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 8002842:	4013      	ands	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002846:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f003 031c 	and.w	r3, r3, #28
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	4911      	ldr	r1, [pc, #68]	@ (80028a0 <HAL_DMA_Init+0x16c>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40020407 	.word	0x40020407
 8002888:	bffdfff8 	.word	0xbffdfff8
 800288c:	cccccccd 	.word	0xcccccccd
 8002890:	40020000 	.word	0x40020000
 8002894:	bffdfbf8 	.word	0xbffdfbf8
 8002898:	40020400 	.word	0x40020400
 800289c:	400200a8 	.word	0x400200a8
 80028a0:	400204a8 	.word	0x400204a8

080028a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Start_IT+0x20>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e04b      	b.n	800295c <HAL_DMA_Start_IT+0xb8>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d13a      	bne.n	800294e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f95f 	bl	8002bc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 020e 	orr.w	r2, r2, #14
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00f      	b.n	800293c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 020a 	orr.w	r2, r2, #10
 800293a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e005      	b.n	800295a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800295a:	7dfb      	ldrb	r3, [r7, #23]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d008      	beq.n	800298e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e022      	b.n	80029d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 020e 	bic.w	r2, r2, #14
 800299c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f003 021c 	and.w	r2, r3, #28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d005      	beq.n	8002a04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2204      	movs	r2, #4
 80029fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	e029      	b.n	8002a58 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 020e 	bic.w	r2, r2, #14
 8002a12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	f003 021c 	and.w	r2, r3, #28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
    }
  }
  return status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f003 031c 	and.w	r3, r3, #28
 8002a82:	2204      	movs	r2, #4
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d026      	beq.n	8002adc <HAL_DMA_IRQHandler+0x7a>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d021      	beq.n	8002adc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0204 	bic.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f003 021c 	and.w	r2, r3, #28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d071      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ada:	e06c      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	f003 031c 	and.w	r3, r3, #28
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02e      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xec>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d029      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020a 	bic.w	r2, r2, #10
 8002b16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	f003 021c 	and.w	r2, r3, #28
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d038      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b4c:	e033      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f003 031c 	and.w	r3, r3, #28
 8002b56:	2208      	movs	r2, #8
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x156>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d025      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 020e 	bic.w	r2, r2, #14
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b80:	f003 021c 	and.w	r2, r3, #28
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
}
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f003 021c 	and.w	r2, r3, #28
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d108      	bne.n	8002c04 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c02:	e007      	b.n	8002c14 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	e17f      	b.n	8002f30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8171 	beq.w	8002f2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d005      	beq.n	8002c60 <HAL_GPIO_Init+0x40>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d130      	bne.n	8002cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c96:	2201      	movs	r2, #1
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0201 	and.w	r2, r3, #1
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d118      	bne.n	8002d00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d017      	beq.n	8002d3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d123      	bne.n	8002d90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	6939      	ldr	r1, [r7, #16]
 8002d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80ac 	beq.w	8002f2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f50 <HAL_GPIO_Init+0x330>)
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f50 <HAL_GPIO_Init+0x330>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dde:	4b5c      	ldr	r3, [pc, #368]	@ (8002f50 <HAL_GPIO_Init+0x330>)
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dea:	4a5a      	ldr	r2, [pc, #360]	@ (8002f54 <HAL_GPIO_Init+0x334>)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e14:	d025      	beq.n	8002e62 <HAL_GPIO_Init+0x242>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	@ (8002f58 <HAL_GPIO_Init+0x338>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <HAL_GPIO_Init+0x23e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4e      	ldr	r2, [pc, #312]	@ (8002f5c <HAL_GPIO_Init+0x33c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d019      	beq.n	8002e5a <HAL_GPIO_Init+0x23a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4d      	ldr	r2, [pc, #308]	@ (8002f60 <HAL_GPIO_Init+0x340>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x236>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4c      	ldr	r2, [pc, #304]	@ (8002f64 <HAL_GPIO_Init+0x344>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x232>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	@ (8002f68 <HAL_GPIO_Init+0x348>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x22e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4a      	ldr	r2, [pc, #296]	@ (8002f6c <HAL_GPIO_Init+0x34c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x22a>
 8002e46:	2306      	movs	r3, #6
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e62:	2300      	movs	r3, #0
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e74:	4937      	ldr	r1, [pc, #220]	@ (8002f54 <HAL_GPIO_Init+0x334>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea6:	4a32      	ldr	r2, [pc, #200]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eac:	4b30      	ldr	r3, [pc, #192]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ed0:	4a27      	ldr	r2, [pc, #156]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f47f ae78 	bne.w	8002c30 <HAL_GPIO_Init+0x10>
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40010000 	.word	0x40010000
 8002f58:	48000400 	.word	0x48000400
 8002f5c:	48000800 	.word	0x48000800
 8002f60:	48000c00 	.word	0x48000c00
 8002f64:	48001000 	.word	0x48001000
 8002f68:	48001400 	.word	0x48001400
 8002f6c:	48001800 	.word	0x48001800
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fa8:	4b04      	ldr	r3, [pc, #16]	@ (8002fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40007000 	.word	0x40007000

08002fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fce:	d130      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd0:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fdc:	d038      	beq.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fde:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fee:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2232      	movs	r2, #50	@ 0x32
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0c9b      	lsrs	r3, r3, #18
 8003000:	3301      	adds	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003004:	e002      	b.n	800300c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b01      	subs	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800300c:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003018:	d102      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x60>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f2      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302c:	d110      	bne.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e00f      	b.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003032:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303e:	d007      	beq.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003040:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003048:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800304e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000
 8003064:	20000200 	.word	0x20000200
 8003068:	431bde83 	.word	0x431bde83

0800306c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e3ca      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307e:	4b97      	ldr	r3, [pc, #604]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003088:	4b94      	ldr	r3, [pc, #592]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80e4 	beq.w	8003268 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4a>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	f040 808b 	bne.w	80031c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 8087 	bne.w	80031c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030b6:	4b89      	ldr	r3, [pc, #548]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x62>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e3a2      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1a      	ldr	r2, [r3, #32]
 80030d2:	4b82      	ldr	r3, [pc, #520]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_RCC_OscConfig+0x7c>
 80030de:	4b7f      	ldr	r3, [pc, #508]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030e6:	e005      	b.n	80030f4 <HAL_RCC_OscConfig+0x88>
 80030e8:	4b7c      	ldr	r3, [pc, #496]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d223      	bcs.n	8003140 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fd55 	bl	8003bac <RCC_SetFlashLatencyFromMSIRange>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e383      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310c:	4b73      	ldr	r3, [pc, #460]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a72      	ldr	r2, [pc, #456]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003112:	f043 0308 	orr.w	r3, r3, #8
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b70      	ldr	r3, [pc, #448]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	496d      	ldr	r1, [pc, #436]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312a:	4b6c      	ldr	r3, [pc, #432]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	4968      	ldr	r1, [pc, #416]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
 800313e:	e025      	b.n	800318c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003140:	4b66      	ldr	r3, [pc, #408]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b63      	ldr	r3, [pc, #396]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4960      	ldr	r1, [pc, #384]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800315e:	4b5f      	ldr	r3, [pc, #380]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	495b      	ldr	r1, [pc, #364]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd15 	bl	8003bac <RCC_SetFlashLatencyFromMSIRange>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e343      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800318c:	f000 fc4a 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b52      	ldr	r3, [pc, #328]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	4950      	ldr	r1, [pc, #320]	@ (80032e0 <HAL_RCC_OscConfig+0x274>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	4a4e      	ldr	r2, [pc, #312]	@ (80032e4 <HAL_RCC_OscConfig+0x278>)
 80031aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031ac:	4b4e      	ldr	r3, [pc, #312]	@ (80032e8 <HAL_RCC_OscConfig+0x27c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff f951 	bl	8002458 <HAL_InitTick>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d052      	beq.n	8003266 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	e327      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d032      	beq.n	8003232 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031cc:	4b43      	ldr	r3, [pc, #268]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a42      	ldr	r2, [pc, #264]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d8:	f7ff f98e 	bl	80024f8 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e0:	f7ff f98a 	bl	80024f8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e310      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f2:	4b3a      	ldr	r3, [pc, #232]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fe:	4b37      	ldr	r3, [pc, #220]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a36      	ldr	r2, [pc, #216]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b34      	ldr	r3, [pc, #208]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4931      	ldr	r1, [pc, #196]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321c:	4b2f      	ldr	r3, [pc, #188]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	492c      	ldr	r1, [pc, #176]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
 8003230:	e01a      	b.n	8003268 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003232:	4b2a      	ldr	r3, [pc, #168]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a29      	ldr	r2, [pc, #164]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800323e:	f7ff f95b 	bl	80024f8 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003246:	f7ff f957 	bl	80024f8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e2dd      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003258:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x1da>
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003266:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d074      	beq.n	800335e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b08      	cmp	r3, #8
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x21a>
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d10e      	bne.n	800329e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d10b      	bne.n	800329e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d064      	beq.n	800335c <HAL_RCC_OscConfig+0x2f0>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d160      	bne.n	800335c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e2ba      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x24a>
 80032a8:	4b0c      	ldr	r3, [pc, #48]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0b      	ldr	r2, [pc, #44]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e026      	b.n	8003304 <HAL_RCC_OscConfig+0x298>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032be:	d115      	bne.n	80032ec <HAL_RCC_OscConfig+0x280>
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80032c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b03      	ldr	r3, [pc, #12]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a02      	ldr	r2, [pc, #8]	@ (80032dc <HAL_RCC_OscConfig+0x270>)
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x298>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08012948 	.word	0x08012948
 80032e4:	20000200 	.word	0x20000200
 80032e8:	20000204 	.word	0x20000204
 80032ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80032f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7ff f8f4 	bl	80024f8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7ff f8f0 	bl	80024f8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	@ 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e276      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003326:	4b92      	ldr	r3, [pc, #584]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x2a8>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7ff f8e0 	bl	80024f8 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7ff f8dc 	bl	80024f8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	@ 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e262      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334e:	4b88      	ldr	r3, [pc, #544]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x2d0>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d060      	beq.n	800342c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d005      	beq.n	800337c <HAL_RCC_OscConfig+0x310>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d119      	bne.n	80033aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d116      	bne.n	80033aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337c:	4b7c      	ldr	r3, [pc, #496]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_OscConfig+0x328>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e23f      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b76      	ldr	r3, [pc, #472]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	4973      	ldr	r1, [pc, #460]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a8:	e040      	b.n	800342c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d023      	beq.n	80033fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7ff f89b 	bl	80024f8 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7ff f897 	bl	80024f8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e21d      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d8:	4b65      	ldr	r3, [pc, #404]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b62      	ldr	r3, [pc, #392]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	495f      	ldr	r1, [pc, #380]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	e018      	b.n	800342c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7ff f877 	bl	80024f8 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340e:	f7ff f873 	bl	80024f8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1f9      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003420:	4b53      	ldr	r3, [pc, #332]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d03c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01c      	beq.n	800347a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003440:	4b4b      	ldr	r3, [pc, #300]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003446:	4a4a      	ldr	r2, [pc, #296]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7ff f852 	bl	80024f8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7ff f84e 	bl	80024f8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1d4      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346a:	4b41      	ldr	r3, [pc, #260]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 800346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <HAL_RCC_OscConfig+0x3ec>
 8003478:	e01b      	b.n	80034b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347a:	4b3d      	ldr	r3, [pc, #244]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003480:	4a3b      	ldr	r2, [pc, #236]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7ff f835 	bl	80024f8 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003492:	f7ff f831 	bl	80024f8 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1b7      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a4:	4b32      	ldr	r3, [pc, #200]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ef      	bne.n	8003492 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80a6 	beq.w	800360c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c0:	2300      	movs	r3, #0
 80034c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b27      	ldr	r3, [pc, #156]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	4a26      	ldr	r2, [pc, #152]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034da:	6593      	str	r3, [r2, #88]	@ 0x58
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e8:	2301      	movs	r3, #1
 80034ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ec:	4b21      	ldr	r3, [pc, #132]	@ (8003574 <HAL_RCC_OscConfig+0x508>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d118      	bne.n	800352a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003574 <HAL_RCC_OscConfig+0x508>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <HAL_RCC_OscConfig+0x508>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003504:	f7fe fff8 	bl	80024f8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7fe fff4 	bl	80024f8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e17a      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351e:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_RCC_OscConfig+0x508>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d108      	bne.n	8003544 <HAL_RCC_OscConfig+0x4d8>
 8003532:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003538:	4a0d      	ldr	r2, [pc, #52]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003542:	e029      	b.n	8003598 <HAL_RCC_OscConfig+0x52c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d115      	bne.n	8003578 <HAL_RCC_OscConfig+0x50c>
 800354c:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	4a07      	ldr	r2, [pc, #28]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	4a03      	ldr	r2, [pc, #12]	@ (8003570 <HAL_RCC_OscConfig+0x504>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x52c>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	4b9c      	ldr	r3, [pc, #624]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	4a9b      	ldr	r2, [pc, #620]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003588:	4b98      	ldr	r3, [pc, #608]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	4a97      	ldr	r2, [pc, #604]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe ffaa 	bl	80024f8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a6:	e00a      	b.n	80035be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fe ffa6 	bl	80024f8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e12a      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035be:	4b8b      	ldr	r3, [pc, #556]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ed      	beq.n	80035a8 <HAL_RCC_OscConfig+0x53c>
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fe ff93 	bl	80024f8 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fe ff8f 	bl	80024f8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e113      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ec:	4b7f      	ldr	r3, [pc, #508]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ed      	bne.n	80035d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035fa:	7ffb      	ldrb	r3, [r7, #31]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003600:	4b7a      	ldr	r3, [pc, #488]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	4a79      	ldr	r2, [pc, #484]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800360a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80fe 	beq.w	8003812 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	2b02      	cmp	r3, #2
 800361c:	f040 80d0 	bne.w	80037c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003620:	4b72      	ldr	r3, [pc, #456]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0203 	and.w	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d130      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	3b01      	subs	r3, #1
 8003640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d127      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003650:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d11f      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003660:	2a07      	cmp	r2, #7
 8003662:	bf14      	ite	ne
 8003664:	2201      	movne	r2, #1
 8003666:	2200      	moveq	r2, #0
 8003668:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d109      	bne.n	8003696 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003692:	429a      	cmp	r2, r3
 8003694:	d06e      	beq.n	8003774 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d069      	beq.n	8003770 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036a8:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0ad      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036b8:	4b4c      	ldr	r3, [pc, #304]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4b      	ldr	r2, [pc, #300]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80036be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c4:	f7fe ff18 	bl	80024f8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe ff14 	bl	80024f8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e09a      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036de:	4b43      	ldr	r3, [pc, #268]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ea:	4b40      	ldr	r3, [pc, #256]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	4b40      	ldr	r3, [pc, #256]	@ (80037f0 <HAL_RCC_OscConfig+0x784>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036fa:	3a01      	subs	r2, #1
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003704:	0212      	lsls	r2, r2, #8
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	3a01      	subs	r2, #1
 8003710:	0552      	lsls	r2, r2, #21
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003718:	0852      	lsrs	r2, r2, #1
 800371a:	3a01      	subs	r2, #1
 800371c:	0652      	lsls	r2, r2, #25
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003724:	0912      	lsrs	r2, r2, #4
 8003726:	0452      	lsls	r2, r2, #17
 8003728:	430a      	orrs	r2, r1
 800372a:	4930      	ldr	r1, [pc, #192]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 800372c:	4313      	orrs	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003730:	4b2e      	ldr	r3, [pc, #184]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2d      	ldr	r2, [pc, #180]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800373c:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a2a      	ldr	r2, [pc, #168]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003748:	f7fe fed6 	bl	80024f8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe fed2 	bl	80024f8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e058      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003762:	4b22      	ldr	r3, [pc, #136]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800376e:	e050      	b.n	8003812 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e04f      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003774:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d148      	bne.n	8003812 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003780:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a19      	ldr	r2, [pc, #100]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800378c:	4b17      	ldr	r3, [pc, #92]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003798:	f7fe feae 	bl	80024f8 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe feaa 	bl	80024f8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e030      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	4b0e      	ldr	r3, [pc, #56]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x734>
 80037be:	e028      	b.n	8003812 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d023      	beq.n	800380e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a08      	ldr	r2, [pc, #32]	@ (80037ec <HAL_RCC_OscConfig+0x780>)
 80037cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fe fe91 	bl	80024f8 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d8:	e00c      	b.n	80037f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe fe8d 	bl	80024f8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d905      	bls.n	80037f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e013      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f4:	4b09      	ldr	r3, [pc, #36]	@ (800381c <HAL_RCC_OscConfig+0x7b0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ec      	bne.n	80037da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003800:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_RCC_OscConfig+0x7b0>)
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4905      	ldr	r1, [pc, #20]	@ (800381c <HAL_RCC_OscConfig+0x7b0>)
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_RCC_OscConfig+0x7b4>)
 8003808:	4013      	ands	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
 800380c:	e001      	b.n	8003812 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	feeefffc 	.word	0xfeeefffc

08003824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0e7      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	4b75      	ldr	r3, [pc, #468]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d910      	bls.n	8003868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b72      	ldr	r3, [pc, #456]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0207 	bic.w	r2, r3, #7
 800384e:	4970      	ldr	r1, [pc, #448]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b6e      	ldr	r3, [pc, #440]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cf      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d010      	beq.n	8003896 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	4b66      	ldr	r3, [pc, #408]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003880:	429a      	cmp	r2, r3
 8003882:	d908      	bls.n	8003896 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b63      	ldr	r3, [pc, #396]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4960      	ldr	r1, [pc, #384]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04c      	beq.n	800393c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d121      	bne.n	80038fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0a6      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c2:	4b54      	ldr	r3, [pc, #336]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d115      	bne.n	80038fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e09a      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038da:	4b4e      	ldr	r3, [pc, #312]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e08e      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e086      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b46      	ldr	r3, [pc, #280]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4943      	ldr	r1, [pc, #268]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fe fdf4 	bl	80024f8 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fe fdf0 	bl	80024f8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e06e      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d010      	beq.n	800396a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	4b31      	ldr	r3, [pc, #196]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003954:	429a      	cmp	r2, r3
 8003956:	d208      	bcs.n	800396a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003958:	4b2e      	ldr	r3, [pc, #184]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	492b      	ldr	r1, [pc, #172]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800396a:	4b29      	ldr	r3, [pc, #164]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d210      	bcs.n	800399a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 0207 	bic.w	r2, r3, #7
 8003980:	4923      	ldr	r1, [pc, #140]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003988:	4b21      	ldr	r3, [pc, #132]	@ (8003a10 <HAL_RCC_ClockConfig+0x1ec>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d001      	beq.n	800399a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e036      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4918      	ldr	r1, [pc, #96]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c4:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4910      	ldr	r1, [pc, #64]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d8:	f000 f824 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	490b      	ldr	r1, [pc, #44]	@ (8003a18 <HAL_RCC_ClockConfig+0x1f4>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
 80039f4:	4a09      	ldr	r2, [pc, #36]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f8>)
 80039f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039f8:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_RCC_ClockConfig+0x1fc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fd2b 	bl	8002458 <HAL_InitTick>
 8003a02:	4603      	mov	r3, r0
 8003a04:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a06:	7afb      	ldrb	r3, [r7, #11]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08012948 	.word	0x08012948
 8003a1c:	20000200 	.word	0x20000200
 8003a20:	20000204 	.word	0x20000204

08003a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	@ 0x24
 8003a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a32:	4b3e      	ldr	r3, [pc, #248]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d121      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d11e      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a58:	4b34      	ldr	r3, [pc, #208]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a64:	4b31      	ldr	r3, [pc, #196]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e005      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a74:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a80:	4a2b      	ldr	r2, [pc, #172]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d102      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a9c:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e004      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aa8:	4b23      	ldr	r3, [pc, #140]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b0c      	cmp	r3, #12
 8003ab0:	d134      	bne.n	8003b1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0xa6>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aca:	4b1a      	ldr	r3, [pc, #104]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003acc:	617b      	str	r3, [r7, #20]
      break;
 8003ace:	e005      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ad2:	617b      	str	r3, [r7, #20]
      break;
 8003ad4:	e002      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	617b      	str	r3, [r7, #20]
      break;
 8003ada:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003adc:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	fb03 f202 	mul.w	r2, r3, r2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	0e5b      	lsrs	r3, r3, #25
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08012960 	.word	0x08012960
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	007a1200 	.word	0x007a1200

08003b3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b40:	4b03      	ldr	r3, [pc, #12]	@ (8003b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000200 	.word	0x20000200

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b58:	f7ff fff0 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4904      	ldr	r1, [pc, #16]	@ (8003b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08012958 	.word	0x08012958

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b84:	f7ff ffda 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0adb      	lsrs	r3, r3, #11
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4904      	ldr	r1, [pc, #16]	@ (8003ba8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08012958 	.word	0x08012958

08003bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bc4:	f7ff f9ee 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
 8003bc8:	6178      	str	r0, [r7, #20]
 8003bca:	e014      	b.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd0:	4a24      	ldr	r2, [pc, #144]	@ (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd8:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003be4:	f7ff f9de 	bl	8002fa4 <HAL_PWREx_GetVoltageRange>
 8003be8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b1e      	ldr	r3, [pc, #120]	@ (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bee:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d10b      	bne.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	@ 0x80
 8003c02:	d919      	bls.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c08:	d902      	bls.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e013      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c10:	2301      	movs	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e010      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b80      	cmp	r3, #128	@ 0x80
 8003c1a:	d902      	bls.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e00a      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b80      	cmp	r3, #128	@ 0x80
 8003c26:	d102      	bne.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c28:	2302      	movs	r3, #2
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e004      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b70      	cmp	r3, #112	@ 0x70
 8003c32:	d101      	bne.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c34:	2301      	movs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 0207 	bic.w	r2, r3, #7
 8003c40:	4909      	ldr	r1, [pc, #36]	@ (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c48:	4b07      	ldr	r3, [pc, #28]	@ (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d001      	beq.n	8003c5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40022000 	.word	0x40022000

08003c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c74:	2300      	movs	r3, #0
 8003c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c78:	2300      	movs	r3, #0
 8003c7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d041      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c90:	d02a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c96:	d824      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c9c:	d008      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ca2:	d81e      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cac:	d010      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cae:	e018      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cb0:	4b86      	ldr	r3, [pc, #536]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a85      	ldr	r2, [pc, #532]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cbc:	e015      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fabb 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cce:	e00c      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3320      	adds	r3, #32
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fba6 	bl	8004428 <RCCEx_PLLSAI2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf0:	4b76      	ldr	r3, [pc, #472]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cfe:	4973      	ldr	r1, [pc, #460]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d06:	e001      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d041      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d20:	d02a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d26:	d824      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d32:	d81e      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d3c:	d010      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d3e:	e018      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d40:	4b62      	ldr	r3, [pc, #392]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a61      	ldr	r2, [pc, #388]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d4c:	e015      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fa73 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d5e:	e00c      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3320      	adds	r3, #32
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fb5e 	bl	8004428 <RCCEx_PLLSAI2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d70:	e003      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	74fb      	strb	r3, [r7, #19]
      break;
 8003d76:	e000      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d80:	4b52      	ldr	r3, [pc, #328]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d8e:	494f      	ldr	r1, [pc, #316]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d96:	e001      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80a0 	beq.w	8003eea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003daa:	2300      	movs	r3, #0
 8003dac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dae:	4b47      	ldr	r3, [pc, #284]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	4a40      	ldr	r2, [pc, #256]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fb84 	bl	80024f8 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df2:	e009      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df4:	f7fe fb80 	bl	80024f8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d902      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	74fb      	strb	r3, [r7, #19]
        break;
 8003e06:	e005      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e08:	4b31      	ldr	r3, [pc, #196]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ef      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d15c      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01f      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d019      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e38:	4b24      	ldr	r3, [pc, #144]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e44:	4b21      	ldr	r3, [pc, #132]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e64:	4a19      	ldr	r2, [pc, #100]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e76:	f7fe fb3f 	bl	80024f8 <HAL_GetTick>
 8003e7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7c:	e00b      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe fb3b 	bl	80024f8 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d902      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	74fb      	strb	r3, [r7, #19]
            break;
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ec      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eba:	4904      	ldr	r1, [pc, #16]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed8:	7c7b      	ldrb	r3, [r7, #17]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4b9e      	ldr	r3, [pc, #632]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	4a9d      	ldr	r2, [pc, #628]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef6:	4b98      	ldr	r3, [pc, #608]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efc:	f023 0203 	bic.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	4994      	ldr	r1, [pc, #592]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f18:	4b8f      	ldr	r3, [pc, #572]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1e:	f023 020c 	bic.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f26:	498c      	ldr	r1, [pc, #560]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f3a:	4b87      	ldr	r3, [pc, #540]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	4983      	ldr	r1, [pc, #524]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	497b      	ldr	r1, [pc, #492]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f7e:	4b76      	ldr	r3, [pc, #472]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8c:	4972      	ldr	r1, [pc, #456]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa0:	4b6d      	ldr	r3, [pc, #436]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fae:	496a      	ldr	r1, [pc, #424]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc2:	4b65      	ldr	r3, [pc, #404]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	4961      	ldr	r1, [pc, #388]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff2:	4959      	ldr	r1, [pc, #356]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004006:	4b54      	ldr	r3, [pc, #336]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004014:	4950      	ldr	r1, [pc, #320]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004028:	4b4b      	ldr	r3, [pc, #300]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	4948      	ldr	r1, [pc, #288]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800404a:	4b43      	ldr	r3, [pc, #268]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	493f      	ldr	r1, [pc, #252]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d028      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800406c:	4b3a      	ldr	r3, [pc, #232]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004072:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800407a:	4937      	ldr	r1, [pc, #220]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800408a:	d106      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408c:	4b32      	ldr	r3, [pc, #200]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a31      	ldr	r2, [pc, #196]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004096:	60d3      	str	r3, [r2, #12]
 8004098:	e011      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800409e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040a2:	d10c      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f8c8 	bl	8004240 <RCCEx_PLLSAI1_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d028      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ca:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d8:	491f      	ldr	r1, [pc, #124]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040e8:	d106      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040f4:	60d3      	str	r3, [r2, #12]
 80040f6:	e011      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f899 	bl	8004240 <RCCEx_PLLSAI1_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02b      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004128:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004136:	4908      	ldr	r1, [pc, #32]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004146:	d109      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004148:	4b03      	ldr	r3, [pc, #12]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a02      	ldr	r2, [pc, #8]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004152:	60d3      	str	r3, [r2, #12]
 8004154:	e014      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004164:	d10c      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f867 	bl	8004240 <RCCEx_PLLSAI1_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d02f      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800418c:	4b2b      	ldr	r3, [pc, #172]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800419a:	4928      	ldr	r1, [pc, #160]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f844 	bl	8004240 <RCCEx_PLLSAI1_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d014      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	74bb      	strb	r3, [r7, #18]
 80041c6:	e011      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3320      	adds	r3, #32
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f925 	bl	8004428 <RCCEx_PLLSAI2_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041f8:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004206:	490d      	ldr	r1, [pc, #52]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800421a:	4b08      	ldr	r3, [pc, #32]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800422a:	4904      	ldr	r1, [pc, #16]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004232:	7cbb      	ldrb	r3, [r7, #18]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000

08004240 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800424e:	4b75      	ldr	r3, [pc, #468]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d018      	beq.n	800428c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800425a:	4b72      	ldr	r3, [pc, #456]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0203 	and.w	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d10d      	bne.n	8004286 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
       ||
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004272:	4b6c      	ldr	r3, [pc, #432]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
       ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d047      	beq.n	8004316 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	e044      	b.n	8004316 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d018      	beq.n	80042c6 <RCCEx_PLLSAI1_Config+0x86>
 8004294:	2b03      	cmp	r3, #3
 8004296:	d825      	bhi.n	80042e4 <RCCEx_PLLSAI1_Config+0xa4>
 8004298:	2b01      	cmp	r3, #1
 800429a:	d002      	beq.n	80042a2 <RCCEx_PLLSAI1_Config+0x62>
 800429c:	2b02      	cmp	r3, #2
 800429e:	d009      	beq.n	80042b4 <RCCEx_PLLSAI1_Config+0x74>
 80042a0:	e020      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042a2:	4b60      	ldr	r3, [pc, #384]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e01a      	b.n	80042ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c4:	e013      	b.n	80042ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042c6:	4b57      	ldr	r3, [pc, #348]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042d2:	4b54      	ldr	r3, [pc, #336]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042e2:	e006      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      break;
 80042e8:	e004      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	430b      	orrs	r3, r1
 8004310:	4944      	ldr	r1, [pc, #272]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004312:	4313      	orrs	r3, r2
 8004314:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d17d      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800431c:	4b41      	ldr	r3, [pc, #260]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a40      	ldr	r2, [pc, #256]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004328:	f7fe f8e6 	bl	80024f8 <HAL_GetTick>
 800432c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800432e:	e009      	b.n	8004344 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004330:	f7fe f8e2 	bl	80024f8 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d902      	bls.n	8004344 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	73fb      	strb	r3, [r7, #15]
        break;
 8004342:	e005      	b.n	8004350 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004344:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ef      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d160      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d111      	bne.n	8004380 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800435c:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6892      	ldr	r2, [r2, #8]
 800436c:	0211      	lsls	r1, r2, #8
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68d2      	ldr	r2, [r2, #12]
 8004372:	0912      	lsrs	r2, r2, #4
 8004374:	0452      	lsls	r2, r2, #17
 8004376:	430a      	orrs	r2, r1
 8004378:	492a      	ldr	r1, [pc, #168]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	610b      	str	r3, [r1, #16]
 800437e:	e027      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d112      	bne.n	80043ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004386:	4b27      	ldr	r3, [pc, #156]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800438e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	0211      	lsls	r1, r2, #8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6912      	ldr	r2, [r2, #16]
 800439c:	0852      	lsrs	r2, r2, #1
 800439e:	3a01      	subs	r2, #1
 80043a0:	0552      	lsls	r2, r2, #21
 80043a2:	430a      	orrs	r2, r1
 80043a4:	491f      	ldr	r1, [pc, #124]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]
 80043aa:	e011      	b.n	80043d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6892      	ldr	r2, [r2, #8]
 80043bc:	0211      	lsls	r1, r2, #8
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6952      	ldr	r2, [r2, #20]
 80043c2:	0852      	lsrs	r2, r2, #1
 80043c4:	3a01      	subs	r2, #1
 80043c6:	0652      	lsls	r2, r2, #25
 80043c8:	430a      	orrs	r2, r1
 80043ca:	4916      	ldr	r1, [pc, #88]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043d0:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fe f88c 	bl	80024f8 <HAL_GetTick>
 80043e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043e2:	e009      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043e4:	f7fe f888 	bl	80024f8 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d902      	bls.n	80043f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	73fb      	strb	r3, [r7, #15]
          break;
 80043f6:	e005      	b.n	8004404 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ef      	beq.n	80043e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	4904      	ldr	r1, [pc, #16]	@ (8004424 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004414:	4313      	orrs	r3, r2
 8004416:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000

08004428 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004436:	4b6a      	ldr	r3, [pc, #424]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004442:	4b67      	ldr	r3, [pc, #412]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0203 	and.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d10d      	bne.n	800446e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
       ||
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800445a:	4b61      	ldr	r3, [pc, #388]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
       ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d047      	beq.n	80044fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e044      	b.n	80044fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d018      	beq.n	80044ae <RCCEx_PLLSAI2_Config+0x86>
 800447c:	2b03      	cmp	r3, #3
 800447e:	d825      	bhi.n	80044cc <RCCEx_PLLSAI2_Config+0xa4>
 8004480:	2b01      	cmp	r3, #1
 8004482:	d002      	beq.n	800448a <RCCEx_PLLSAI2_Config+0x62>
 8004484:	2b02      	cmp	r3, #2
 8004486:	d009      	beq.n	800449c <RCCEx_PLLSAI2_Config+0x74>
 8004488:	e020      	b.n	80044cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800448a:	4b55      	ldr	r3, [pc, #340]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11d      	bne.n	80044d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449a:	e01a      	b.n	80044d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800449c:	4b50      	ldr	r3, [pc, #320]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d116      	bne.n	80044d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ac:	e013      	b.n	80044d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ae:	4b4c      	ldr	r3, [pc, #304]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ba:	4b49      	ldr	r3, [pc, #292]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ca:	e006      	b.n	80044da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      break;
 80044d0:	e004      	b.n	80044dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044d2:	bf00      	nop
 80044d4:	e002      	b.n	80044dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044da:	bf00      	nop
    }

    if(status == HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044e2:	4b3f      	ldr	r3, [pc, #252]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	430b      	orrs	r3, r1
 80044f8:	4939      	ldr	r1, [pc, #228]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d167      	bne.n	80045d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004504:	4b36      	ldr	r3, [pc, #216]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a35      	ldr	r2, [pc, #212]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fd fff2 	bl	80024f8 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004516:	e009      	b.n	800452c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004518:	f7fd ffee 	bl	80024f8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d902      	bls.n	800452c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	73fb      	strb	r3, [r7, #15]
        break;
 800452a:	e005      	b.n	8004538 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800452c:	4b2c      	ldr	r3, [pc, #176]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ef      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d14a      	bne.n	80045d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d111      	bne.n	8004568 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004544:	4b26      	ldr	r3, [pc, #152]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800454c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
 8004554:	0211      	lsls	r1, r2, #8
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68d2      	ldr	r2, [r2, #12]
 800455a:	0912      	lsrs	r2, r2, #4
 800455c:	0452      	lsls	r2, r2, #17
 800455e:	430a      	orrs	r2, r1
 8004560:	491f      	ldr	r1, [pc, #124]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	614b      	str	r3, [r1, #20]
 8004566:	e011      	b.n	800458c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004568:	4b1d      	ldr	r3, [pc, #116]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004570:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	0211      	lsls	r1, r2, #8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6912      	ldr	r2, [r2, #16]
 800457e:	0852      	lsrs	r2, r2, #1
 8004580:	3a01      	subs	r2, #1
 8004582:	0652      	lsls	r2, r2, #25
 8004584:	430a      	orrs	r2, r1
 8004586:	4916      	ldr	r1, [pc, #88]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004588:	4313      	orrs	r3, r2
 800458a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004596:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fd ffae 	bl	80024f8 <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800459e:	e009      	b.n	80045b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a0:	f7fd ffaa 	bl	80024f8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	73fb      	strb	r3, [r7, #15]
          break;
 80045b2:	e005      	b.n	80045c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ef      	beq.n	80045a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	4904      	ldr	r1, [pc, #16]	@ (80045e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000

080045e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e095      	b.n	8004722 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d108      	bne.n	8004610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004606:	d009      	beq.n	800461c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	61da      	str	r2, [r3, #28]
 800460e:	e005      	b.n	800461c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd fbec 	bl	8001e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004652:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800465c:	d902      	bls.n	8004664 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e002      	b.n	800466a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004668:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004672:	d007      	beq.n	8004684 <HAL_SPI_Init+0xa0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	ea42 0103 	orr.w	r1, r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	f003 0204 	and.w	r2, r3, #4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004700:	ea42 0103 	orr.w	r1, r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b088      	sub	sp, #32
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800473a:	f7fd fedd 	bl	80024f8 <HAL_GetTick>
 800473e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
 8004752:	e15c      	b.n	8004a0e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_SPI_Transmit+0x36>
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e154      	b.n	8004a0e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_SPI_Transmit+0x48>
 800476e:	2302      	movs	r3, #2
 8004770:	e14d      	b.n	8004a0e <HAL_SPI_Transmit+0x2e4>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2203      	movs	r2, #3
 800477e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c4:	d10f      	bne.n	80047e6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d007      	beq.n	8004804 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800480c:	d952      	bls.n	80048b4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0xf2>
 8004816:	8b7b      	ldrh	r3, [r7, #26]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d145      	bne.n	80048a8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	1c9a      	adds	r2, r3, #2
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004840:	e032      	b.n	80048a8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d112      	bne.n	8004876 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	1c9a      	adds	r2, r3, #2
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004874:	e018      	b.n	80048a8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004876:	f7fd fe3f 	bl	80024f8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d803      	bhi.n	800488e <HAL_SPI_Transmit+0x164>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d102      	bne.n	8004894 <HAL_SPI_Transmit+0x16a>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e0b2      	b.n	8004a0e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1c7      	bne.n	8004842 <HAL_SPI_Transmit+0x118>
 80048b2:	e083      	b.n	80049bc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_SPI_Transmit+0x198>
 80048bc:	8b7b      	ldrh	r3, [r7, #26]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d177      	bne.n	80049b2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d912      	bls.n	80048f2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b02      	subs	r3, #2
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048f0:	e05f      	b.n	80049b2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	330c      	adds	r3, #12
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004918:	e04b      	b.n	80049b2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b02      	cmp	r3, #2
 8004926:	d12b      	bne.n	8004980 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d912      	bls.n	8004958 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	881a      	ldrh	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b02      	subs	r3, #2
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004956:	e02c      	b.n	80049b2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800497e:	e018      	b.n	80049b2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004980:	f7fd fdba 	bl	80024f8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d803      	bhi.n	8004998 <HAL_SPI_Transmit+0x26e>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d102      	bne.n	800499e <HAL_SPI_Transmit+0x274>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e02d      	b.n	8004a0e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ae      	bne.n	800491a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	6839      	ldr	r1, [r7, #0]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fae3 	bl	8004f8c <SPI_EndRxTxTransaction>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d001      	beq.n	8004a36 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
 8004a34:	e0d4      	b.n	8004be0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_SPI_Transmit_DMA+0x2a>
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0cc      	b.n	8004be0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_SPI_Transmit_DMA+0x3c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0c5      	b.n	8004be0 <HAL_SPI_Transmit_DMA+0x1c8>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2203      	movs	r2, #3
 8004a60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	88fa      	ldrh	r2, [r7, #6]
 8004a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa6:	d10f      	bne.n	8004ac8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ab6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ac6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004acc:	4a46      	ldr	r2, [pc, #280]	@ (8004be8 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad4:	4a45      	ldr	r2, [pc, #276]	@ (8004bec <HAL_SPI_Transmit_DMA+0x1d4>)
 8004ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	4a44      	ldr	r2, [pc, #272]	@ (8004bf0 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004ade:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004af6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b00:	d82d      	bhi.n	8004b5e <HAL_SPI_Transmit_DMA+0x146>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b0c:	d127      	bne.n	8004b5e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10f      	bne.n	8004b3c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b2a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b3a:	e010      	b.n	8004b5e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b4a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	4619      	mov	r1, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b74:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b76:	f7fd fe95 	bl	80028a4 <HAL_DMA_Start_IT>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00b      	beq.n	8004b98 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b84:	f043 0210 	orr.w	r2, r3, #16
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e023      	b.n	8004be0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba2:	2b40      	cmp	r3, #64	@ 0x40
 8004ba4:	d007      	beq.n	8004bb6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bb4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0220 	orr.w	r2, r2, #32
 8004bcc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0202 	orr.w	r2, r2, #2
 8004bdc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08004cf3 	.word	0x08004cf3
 8004bec:	08004c4d 	.word	0x08004c4d
 8004bf0:	08004d0f 	.word	0x08004d0f

08004bf4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c3e:	b2db      	uxtb	r3, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5a:	f7fd fc4d 	bl	80024f8 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d03b      	beq.n	8004ce6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0220 	bic.w	r2, r2, #32
 8004c7c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0202 	bic.w	r2, r2, #2
 8004c8c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	2164      	movs	r1, #100	@ 0x64
 8004c92:	6978      	ldr	r0, [r7, #20]
 8004c94:	f000 f97a 	bl	8004f8c <SPI_EndRxTxTransaction>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004cde:	6978      	ldr	r0, [r7, #20]
 8004ce0:	f7ff ff9c 	bl	8004c1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ce4:	e002      	b.n	8004cec <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff ff84 	bl	8004bf4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff ff81 	bl	8004c08 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0203 	bic.w	r2, r2, #3
 8004d2a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d30:	f043 0210 	orr.w	r2, r3, #16
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff ff6b 	bl	8004c1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d60:	f7fd fbca 	bl	80024f8 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d70:	f7fd fbc2 	bl	80024f8 <HAL_GetTick>
 8004d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d76:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	015b      	lsls	r3, r3, #5
 8004d7c:	0d1b      	lsrs	r3, r3, #20
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d86:	e054      	b.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d050      	beq.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d90:	f7fd fbb2 	bl	80024f8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d902      	bls.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d13d      	bne.n	8004e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dbe:	d111      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc8:	d004      	beq.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd2:	d107      	bne.n	8004de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dec:	d10f      	bne.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e017      	b.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	bf0c      	ite	eq
 8004e42:	2301      	moveq	r3, #1
 8004e44:	2300      	movne	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d19b      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000200 	.word	0x20000200

08004e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	@ 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e72:	f7fd fb41 	bl	80024f8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004e82:	f7fd fb39 	bl	80024f8 <HAL_GetTick>
 8004e86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e90:	4b3d      	ldr	r3, [pc, #244]	@ (8004f88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	00da      	lsls	r2, r3, #3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	0d1b      	lsrs	r3, r3, #20
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ea8:	e060      	b.n	8004f6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004eb0:	d107      	bne.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d050      	beq.n	8004f6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eca:	f7fd fb15 	bl	80024f8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d902      	bls.n	8004ee0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d13d      	bne.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef8:	d111      	bne.n	8004f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f02:	d004      	beq.n	8004f0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0c:	d107      	bne.n	8004f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f26:	d10f      	bne.n	8004f48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e010      	b.n	8004f7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d196      	bne.n	8004eaa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3728      	adds	r7, #40	@ 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000200 	.word	0x20000200

08004f8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff ff5b 	bl	8004e60 <SPI_WaitFifoStateUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e027      	b.n	8005010 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2180      	movs	r1, #128	@ 0x80
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff fec0 	bl	8004d50 <SPI_WaitFlagStateUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e014      	b.n	8005010 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ff34 	bl	8004e60 <SPI_WaitFifoStateUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e000      	b.n	8005010 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e040      	b.n	80050ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fd f966 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	@ 0x24
 8005044:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fea6 	bl	8005db0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fbeb 	bl	8005840 <UART_SetConfig>
 800506a:	4603      	mov	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e01b      	b.n	80050ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 ff25 	bl	8005ef4 <UART_CheckIdleState>
 80050aa:	4603      	mov	r3, r0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b08b      	sub	sp, #44	@ 0x2c
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d147      	bne.n	800515a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_UART_Transmit_IT+0x22>
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e040      	b.n	800515c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	88fa      	ldrh	r2, [r7, #6]
 80050e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2221      	movs	r2, #33	@ 0x21
 8005102:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510c:	d107      	bne.n	800511e <HAL_UART_Transmit_IT+0x6a>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <HAL_UART_Transmit_IT+0xb4>)
 800511a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800511c:	e002      	b.n	8005124 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a12      	ldr	r2, [pc, #72]	@ (800516c <HAL_UART_Transmit_IT+0xb8>)
 8005122:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	613b      	str	r3, [r7, #16]
   return(result);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	623b      	str	r3, [r7, #32]
 8005144:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	69f9      	ldr	r1, [r7, #28]
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e6      	bne.n	8005124 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	e000      	b.n	800515c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800515a:	2302      	movs	r3, #2
  }
}
 800515c:	4618      	mov	r0, r3
 800515e:	372c      	adds	r7, #44	@ 0x2c
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	08006457 	.word	0x08006457
 800516c:	080063a1 	.word	0x080063a1

08005170 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	@ 0x28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005184:	2b20      	cmp	r3, #32
 8005186:	d137      	bne.n	80051f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Receive_IT+0x24>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e030      	b.n	80051fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_UART_Receive_IT+0x94>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d01f      	beq.n	80051e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d018      	beq.n	80051e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	613b      	str	r3, [r7, #16]
   return(result);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	461a      	mov	r2, r3
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 ff96 	bl	8006120 <UART_Start_Receive_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	e000      	b.n	80051fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
  }
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3728      	adds	r7, #40	@ 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40008000 	.word	0x40008000

08005208 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b0ba      	sub	sp, #232	@ 0xe8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800522e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005232:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005236:	4013      	ands	r3, r2
 8005238:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800523c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d115      	bne.n	8005270 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00f      	beq.n	8005270 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 82ca 	beq.w	80057fa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
      }
      return;
 800526e:	e2c4      	b.n	80057fa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8117 	beq.w	80054a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800528a:	4b85      	ldr	r3, [pc, #532]	@ (80054a0 <HAL_UART_IRQHandler+0x298>)
 800528c:	4013      	ands	r3, r2
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 810a 	beq.w	80054a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d011      	beq.n	80052c4 <HAL_UART_IRQHandler+0xbc>
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00b      	beq.n	80052c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ba:	f043 0201 	orr.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d011      	beq.n	80052f4 <HAL_UART_IRQHandler+0xec>
 80052d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00b      	beq.n	80052f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2202      	movs	r2, #2
 80052e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ea:	f043 0204 	orr.w	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d011      	beq.n	8005324 <HAL_UART_IRQHandler+0x11c>
 8005300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2204      	movs	r2, #4
 8005312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800531a:	f043 0202 	orr.w	r2, r3, #2
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d017      	beq.n	8005360 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800533c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005340:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00b      	beq.n	8005360 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2208      	movs	r2, #8
 800534e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005356:	f043 0208 	orr.w	r2, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005368:	2b00      	cmp	r3, #0
 800536a:	d012      	beq.n	8005392 <HAL_UART_IRQHandler+0x18a>
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005370:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00c      	beq.n	8005392 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8230 	beq.w	80057fe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053da:	2b40      	cmp	r3, #64	@ 0x40
 80053dc:	d005      	beq.n	80053ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d04f      	beq.n	800548a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 ff5e 	bl	80062ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fa:	2b40      	cmp	r3, #64	@ 0x40
 80053fc:	d141      	bne.n	8005482 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800541c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800542a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800542e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1d9      	bne.n	80053fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005456:	4a13      	ldr	r2, [pc, #76]	@ (80054a4 <HAL_UART_IRQHandler+0x29c>)
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd fabe 	bl	80029e0 <HAL_DMA_Abort_IT>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005478:	e00f      	b.n	800549a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f9ca 	bl	8005814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	e00b      	b.n	800549a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f9c6 	bl	8005814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	e007      	b.n	800549a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f9c2 	bl	8005814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005498:	e1b1      	b.n	80057fe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549a:	bf00      	nop
    return;
 800549c:	e1af      	b.n	80057fe <HAL_UART_IRQHandler+0x5f6>
 800549e:	bf00      	nop
 80054a0:	04000120 	.word	0x04000120
 80054a4:	08006375 	.word	0x08006375

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 816a 	bne.w	8005786 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8163 	beq.w	8005786 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 815c 	beq.w	8005786 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2210      	movs	r2, #16
 80054d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b40      	cmp	r3, #64	@ 0x40
 80054e2:	f040 80d4 	bne.w	800568e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 80ad 	beq.w	8005656 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005506:	429a      	cmp	r2, r3
 8005508:	f080 80a5 	bcs.w	8005656 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005512:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 8086 	bne.w	8005634 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800553c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005552:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005556:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800555e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800556a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1da      	bne.n	8005528 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005596:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800559a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800559e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e1      	bne.n	8005572 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e3      	bne.n	80055ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005616:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005618:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800561c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e4      	bne.n	80055f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562e:	4618      	mov	r0, r3
 8005630:	f7fd f998 	bl	8002964 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005646:	b29b      	uxth	r3, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	b29b      	uxth	r3, r3
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f8ea 	bl	8005828 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005654:	e0d5      	b.n	8005802 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800565c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005660:	429a      	cmp	r2, r3
 8005662:	f040 80ce 	bne.w	8005802 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b20      	cmp	r3, #32
 8005674:	f040 80c5 	bne.w	8005802 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8ce 	bl	8005828 <HAL_UARTEx_RxEventCallback>
      return;
 800568c:	e0b9      	b.n	8005802 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800569a:	b29b      	uxth	r3, r3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80ab 	beq.w	8005806 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80056b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80a6 	beq.w	8005806 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e4      	bne.n	80056ba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3308      	adds	r3, #8
 8005710:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005714:	633a      	str	r2, [r7, #48]	@ 0x30
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800571a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e3      	bne.n	80056f0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	60fb      	str	r3, [r7, #12]
   return(result);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 0310 	bic.w	r3, r3, #16
 8005750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	617b      	str	r3, [r7, #20]
   return(result);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e4      	bne.n	800573c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f852 	bl	8005828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005784:	e03f      	b.n	8005806 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00e      	beq.n	80057b0 <HAL_UART_IRQHandler+0x5a8>
 8005792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d008      	beq.n	80057b0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f89b 	bl	80068e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057ae:	e02d      	b.n	800580c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01c      	beq.n	800580a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
    }
    return;
 80057d8:	e017      	b.n	800580a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d012      	beq.n	800580c <HAL_UART_IRQHandler+0x604>
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fe8f 	bl	8006516 <UART_EndTransmit_IT>
    return;
 80057f8:	e008      	b.n	800580c <HAL_UART_IRQHandler+0x604>
      return;
 80057fa:	bf00      	nop
 80057fc:	e006      	b.n	800580c <HAL_UART_IRQHandler+0x604>
    return;
 80057fe:	bf00      	nop
 8005800:	e004      	b.n	800580c <HAL_UART_IRQHandler+0x604>
      return;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <HAL_UART_IRQHandler+0x604>
      return;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_UART_IRQHandler+0x604>
    return;
 800580a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800580c:	37e8      	adds	r7, #232	@ 0xe8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005844:	b08a      	sub	sp, #40	@ 0x28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	4313      	orrs	r3, r2
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4ba4      	ldr	r3, [pc, #656]	@ (8005b00 <UART_SetConfig+0x2c0>)
 8005870:	4013      	ands	r3, r2
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005878:	430b      	orrs	r3, r1
 800587a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a99      	ldr	r2, [pc, #612]	@ (8005b04 <UART_SetConfig+0x2c4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a8:	4313      	orrs	r3, r2
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a90      	ldr	r2, [pc, #576]	@ (8005b08 <UART_SetConfig+0x2c8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d126      	bne.n	8005918 <UART_SetConfig+0xd8>
 80058ca:	4b90      	ldr	r3, [pc, #576]	@ (8005b0c <UART_SetConfig+0x2cc>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d81b      	bhi.n	8005910 <UART_SetConfig+0xd0>
 80058d8:	a201      	add	r2, pc, #4	@ (adr r2, 80058e0 <UART_SetConfig+0xa0>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	08005901 	.word	0x08005901
 80058e8:	080058f9 	.word	0x080058f9
 80058ec:	08005909 	.word	0x08005909
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058f6:	e116      	b.n	8005b26 <UART_SetConfig+0x2e6>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058fe:	e112      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005906:	e10e      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800590e:	e10a      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005916:	e106      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a7c      	ldr	r2, [pc, #496]	@ (8005b10 <UART_SetConfig+0x2d0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d138      	bne.n	8005994 <UART_SetConfig+0x154>
 8005922:	4b7a      	ldr	r3, [pc, #488]	@ (8005b0c <UART_SetConfig+0x2cc>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d82d      	bhi.n	800598c <UART_SetConfig+0x14c>
 8005930:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <UART_SetConfig+0xf8>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800596d 	.word	0x0800596d
 800593c:	0800598d 	.word	0x0800598d
 8005940:	0800598d 	.word	0x0800598d
 8005944:	0800598d 	.word	0x0800598d
 8005948:	0800597d 	.word	0x0800597d
 800594c:	0800598d 	.word	0x0800598d
 8005950:	0800598d 	.word	0x0800598d
 8005954:	0800598d 	.word	0x0800598d
 8005958:	08005975 	.word	0x08005975
 800595c:	0800598d 	.word	0x0800598d
 8005960:	0800598d 	.word	0x0800598d
 8005964:	0800598d 	.word	0x0800598d
 8005968:	08005985 	.word	0x08005985
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005972:	e0d8      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005974:	2302      	movs	r3, #2
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597a:	e0d4      	b.n	8005b26 <UART_SetConfig+0x2e6>
 800597c:	2304      	movs	r3, #4
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005982:	e0d0      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005984:	2308      	movs	r3, #8
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598a:	e0cc      	b.n	8005b26 <UART_SetConfig+0x2e6>
 800598c:	2310      	movs	r3, #16
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005992:	e0c8      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5e      	ldr	r2, [pc, #376]	@ (8005b14 <UART_SetConfig+0x2d4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d125      	bne.n	80059ea <UART_SetConfig+0x1aa>
 800599e:	4b5b      	ldr	r3, [pc, #364]	@ (8005b0c <UART_SetConfig+0x2cc>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059a8:	2b30      	cmp	r3, #48	@ 0x30
 80059aa:	d016      	beq.n	80059da <UART_SetConfig+0x19a>
 80059ac:	2b30      	cmp	r3, #48	@ 0x30
 80059ae:	d818      	bhi.n	80059e2 <UART_SetConfig+0x1a2>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d00a      	beq.n	80059ca <UART_SetConfig+0x18a>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d814      	bhi.n	80059e2 <UART_SetConfig+0x1a2>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <UART_SetConfig+0x182>
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d008      	beq.n	80059d2 <UART_SetConfig+0x192>
 80059c0:	e00f      	b.n	80059e2 <UART_SetConfig+0x1a2>
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c8:	e0ad      	b.n	8005b26 <UART_SetConfig+0x2e6>
 80059ca:	2302      	movs	r3, #2
 80059cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d0:	e0a9      	b.n	8005b26 <UART_SetConfig+0x2e6>
 80059d2:	2304      	movs	r3, #4
 80059d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d8:	e0a5      	b.n	8005b26 <UART_SetConfig+0x2e6>
 80059da:	2308      	movs	r3, #8
 80059dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e0:	e0a1      	b.n	8005b26 <UART_SetConfig+0x2e6>
 80059e2:	2310      	movs	r3, #16
 80059e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e8:	e09d      	b.n	8005b26 <UART_SetConfig+0x2e6>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005b18 <UART_SetConfig+0x2d8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d125      	bne.n	8005a40 <UART_SetConfig+0x200>
 80059f4:	4b45      	ldr	r3, [pc, #276]	@ (8005b0c <UART_SetConfig+0x2cc>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a00:	d016      	beq.n	8005a30 <UART_SetConfig+0x1f0>
 8005a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a04:	d818      	bhi.n	8005a38 <UART_SetConfig+0x1f8>
 8005a06:	2b80      	cmp	r3, #128	@ 0x80
 8005a08:	d00a      	beq.n	8005a20 <UART_SetConfig+0x1e0>
 8005a0a:	2b80      	cmp	r3, #128	@ 0x80
 8005a0c:	d814      	bhi.n	8005a38 <UART_SetConfig+0x1f8>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <UART_SetConfig+0x1d8>
 8005a12:	2b40      	cmp	r3, #64	@ 0x40
 8005a14:	d008      	beq.n	8005a28 <UART_SetConfig+0x1e8>
 8005a16:	e00f      	b.n	8005a38 <UART_SetConfig+0x1f8>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1e:	e082      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a20:	2302      	movs	r3, #2
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a26:	e07e      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2e:	e07a      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a30:	2308      	movs	r3, #8
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a36:	e076      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3e:	e072      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a35      	ldr	r2, [pc, #212]	@ (8005b1c <UART_SetConfig+0x2dc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d12a      	bne.n	8005aa0 <UART_SetConfig+0x260>
 8005a4a:	4b30      	ldr	r3, [pc, #192]	@ (8005b0c <UART_SetConfig+0x2cc>)
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a58:	d01a      	beq.n	8005a90 <UART_SetConfig+0x250>
 8005a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a5e:	d81b      	bhi.n	8005a98 <UART_SetConfig+0x258>
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a64:	d00c      	beq.n	8005a80 <UART_SetConfig+0x240>
 8005a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a6a:	d815      	bhi.n	8005a98 <UART_SetConfig+0x258>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <UART_SetConfig+0x238>
 8005a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a74:	d008      	beq.n	8005a88 <UART_SetConfig+0x248>
 8005a76:	e00f      	b.n	8005a98 <UART_SetConfig+0x258>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7e:	e052      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a80:	2302      	movs	r3, #2
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a86:	e04e      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a8e:	e04a      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a96:	e046      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a9e:	e042      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a17      	ldr	r2, [pc, #92]	@ (8005b04 <UART_SetConfig+0x2c4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d13a      	bne.n	8005b20 <UART_SetConfig+0x2e0>
 8005aaa:	4b18      	ldr	r3, [pc, #96]	@ (8005b0c <UART_SetConfig+0x2cc>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ab4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ab8:	d01a      	beq.n	8005af0 <UART_SetConfig+0x2b0>
 8005aba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005abe:	d81b      	bhi.n	8005af8 <UART_SetConfig+0x2b8>
 8005ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac4:	d00c      	beq.n	8005ae0 <UART_SetConfig+0x2a0>
 8005ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aca:	d815      	bhi.n	8005af8 <UART_SetConfig+0x2b8>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <UART_SetConfig+0x298>
 8005ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad4:	d008      	beq.n	8005ae8 <UART_SetConfig+0x2a8>
 8005ad6:	e00f      	b.n	8005af8 <UART_SetConfig+0x2b8>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ade:	e022      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae6:	e01e      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aee:	e01a      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005af0:	2308      	movs	r3, #8
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005af6:	e016      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005af8:	2310      	movs	r3, #16
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afe:	e012      	b.n	8005b26 <UART_SetConfig+0x2e6>
 8005b00:	efff69f3 	.word	0xefff69f3
 8005b04:	40008000 	.word	0x40008000
 8005b08:	40013800 	.word	0x40013800
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40004400 	.word	0x40004400
 8005b14:	40004800 	.word	0x40004800
 8005b18:	40004c00 	.word	0x40004c00
 8005b1c:	40005000 	.word	0x40005000
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a9f      	ldr	r2, [pc, #636]	@ (8005da8 <UART_SetConfig+0x568>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d17a      	bne.n	8005c26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d824      	bhi.n	8005b82 <UART_SetConfig+0x342>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x300>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b83 	.word	0x08005b83
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b83 	.word	0x08005b83
 8005b50:	08005b73 	.word	0x08005b73
 8005b54:	08005b83 	.word	0x08005b83
 8005b58:	08005b83 	.word	0x08005b83
 8005b5c:	08005b83 	.word	0x08005b83
 8005b60:	08005b7b 	.word	0x08005b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fd fff6 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005b68:	61f8      	str	r0, [r7, #28]
        break;
 8005b6a:	e010      	b.n	8005b8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b8f      	ldr	r3, [pc, #572]	@ (8005dac <UART_SetConfig+0x56c>)
 8005b6e:	61fb      	str	r3, [r7, #28]
        break;
 8005b70:	e00d      	b.n	8005b8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fd ff57 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8005b76:	61f8      	str	r0, [r7, #28]
        break;
 8005b78:	e009      	b.n	8005b8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b7e:	61fb      	str	r3, [r7, #28]
        break;
 8005b80:	e005      	b.n	8005b8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80fb 	beq.w	8005d8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	4413      	add	r3, r2
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d305      	bcc.n	8005bb2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d903      	bls.n	8005bba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005bb8:	e0e8      	b.n	8005d8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	022b      	lsls	r3, r5, #8
 8005bcc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bd0:	0222      	lsls	r2, r4, #8
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	6849      	ldr	r1, [r1, #4]
 8005bd6:	0849      	lsrs	r1, r1, #1
 8005bd8:	2000      	movs	r0, #0
 8005bda:	4688      	mov	r8, r1
 8005bdc:	4681      	mov	r9, r0
 8005bde:	eb12 0a08 	adds.w	sl, r2, r8
 8005be2:	eb43 0b09 	adc.w	fp, r3, r9
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf4:	4650      	mov	r0, sl
 8005bf6:	4659      	mov	r1, fp
 8005bf8:	f7fa fb42 	bl	8000280 <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4613      	mov	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c0a:	d308      	bcc.n	8005c1e <UART_SetConfig+0x3de>
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c12:	d204      	bcs.n	8005c1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e0b6      	b.n	8005d8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c24:	e0b2      	b.n	8005d8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2e:	d15e      	bne.n	8005cee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d828      	bhi.n	8005c8a <UART_SetConfig+0x44a>
 8005c38:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <UART_SetConfig+0x400>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08005c6d 	.word	0x08005c6d
 8005c48:	08005c75 	.word	0x08005c75
 8005c4c:	08005c8b 	.word	0x08005c8b
 8005c50:	08005c7b 	.word	0x08005c7b
 8005c54:	08005c8b 	.word	0x08005c8b
 8005c58:	08005c8b 	.word	0x08005c8b
 8005c5c:	08005c8b 	.word	0x08005c8b
 8005c60:	08005c83 	.word	0x08005c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c64:	f7fd ff76 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005c68:	61f8      	str	r0, [r7, #28]
        break;
 8005c6a:	e014      	b.n	8005c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fd ff88 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8005c70:	61f8      	str	r0, [r7, #28]
        break;
 8005c72:	e010      	b.n	8005c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c74:	4b4d      	ldr	r3, [pc, #308]	@ (8005dac <UART_SetConfig+0x56c>)
 8005c76:	61fb      	str	r3, [r7, #28]
        break;
 8005c78:	e00d      	b.n	8005c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7fd fed3 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8005c7e:	61f8      	str	r0, [r7, #28]
        break;
 8005c80:	e009      	b.n	8005c96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c86:	61fb      	str	r3, [r7, #28]
        break;
 8005c88:	e005      	b.n	8005c96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d077      	beq.n	8005d8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005a      	lsls	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b0f      	cmp	r3, #15
 8005cb6:	d916      	bls.n	8005ce6 <UART_SetConfig+0x4a6>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbe:	d212      	bcs.n	8005ce6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f023 030f 	bic.w	r3, r3, #15
 8005cc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	8afa      	ldrh	r2, [r7, #22]
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	e052      	b.n	8005d8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cec:	e04e      	b.n	8005d8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d827      	bhi.n	8005d46 <UART_SetConfig+0x506>
 8005cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <UART_SetConfig+0x4bc>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d47 	.word	0x08005d47
 8005d0c:	08005d37 	.word	0x08005d37
 8005d10:	08005d47 	.word	0x08005d47
 8005d14:	08005d47 	.word	0x08005d47
 8005d18:	08005d47 	.word	0x08005d47
 8005d1c:	08005d3f 	.word	0x08005d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7fd ff18 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005d24:	61f8      	str	r0, [r7, #28]
        break;
 8005d26:	e014      	b.n	8005d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fd ff2a 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8005d2c:	61f8      	str	r0, [r7, #28]
        break;
 8005d2e:	e010      	b.n	8005d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d30:	4b1e      	ldr	r3, [pc, #120]	@ (8005dac <UART_SetConfig+0x56c>)
 8005d32:	61fb      	str	r3, [r7, #28]
        break;
 8005d34:	e00d      	b.n	8005d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d36:	f7fd fe75 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8005d3a:	61f8      	str	r0, [r7, #28]
        break;
 8005d3c:	e009      	b.n	8005d52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d42:	61fb      	str	r3, [r7, #28]
        break;
 8005d44:	e005      	b.n	8005d52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d50:	bf00      	nop
    }

    if (pclk != 0U)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d019      	beq.n	8005d8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	085a      	lsrs	r2, r3, #1
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	441a      	add	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	d909      	bls.n	8005d86 <UART_SetConfig+0x546>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d205      	bcs.n	8005d86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	e002      	b.n	8005d8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3728      	adds	r7, #40	@ 0x28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da6:	bf00      	nop
 8005da8:	40008000 	.word	0x40008000
 8005dac:	00f42400 	.word	0x00f42400

08005db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eae:	d10a      	bne.n	8005ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b098      	sub	sp, #96	@ 0x60
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f04:	f7fc faf8 	bl	80024f8 <HAL_GetTick>
 8005f08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d12e      	bne.n	8005f76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f88c 	bl	8006044 <UART_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d021      	beq.n	8005f76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e6      	bne.n	8005f32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e062      	b.n	800603c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d149      	bne.n	8006018 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f856 	bl	8006044 <UART_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d03c      	beq.n	8006018 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	623b      	str	r3, [r7, #32]
   return(result);
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3308      	adds	r3, #8
 8005fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e011      	b.n	800603c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3758      	adds	r7, #88	@ 0x58
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006054:	e04f      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d04b      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605e:	f7fc fa4b 	bl	80024f8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <UART_WaitOnFlagUntilTimeout+0x30>
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e04e      	b.n	8006116 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d037      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b80      	cmp	r3, #128	@ 0x80
 800608a:	d034      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b40      	cmp	r3, #64	@ 0x40
 8006090:	d031      	beq.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b08      	cmp	r3, #8
 800609e:	d110      	bne.n	80060c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2208      	movs	r2, #8
 80060a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f8ff 	bl	80062ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2208      	movs	r2, #8
 80060b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e029      	b.n	8006116 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060d0:	d111      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f8e5 	bl	80062ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e00f      	b.n	8006116 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4013      	ands	r3, r2
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	429a      	cmp	r2, r3
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	429a      	cmp	r2, r3
 8006112:	d0a0      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006120:	b480      	push	{r7}
 8006122:	b097      	sub	sp, #92	@ 0x5c
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006152:	d10e      	bne.n	8006172 <UART_Start_Receive_IT+0x52>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d105      	bne.n	8006168 <UART_Start_Receive_IT+0x48>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006162:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006166:	e02d      	b.n	80061c4 <UART_Start_Receive_IT+0xa4>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	22ff      	movs	r2, #255	@ 0xff
 800616c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006170:	e028      	b.n	80061c4 <UART_Start_Receive_IT+0xa4>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <UART_Start_Receive_IT+0x76>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <UART_Start_Receive_IT+0x6c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	22ff      	movs	r2, #255	@ 0xff
 8006186:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800618a:	e01b      	b.n	80061c4 <UART_Start_Receive_IT+0xa4>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	227f      	movs	r2, #127	@ 0x7f
 8006190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006194:	e016      	b.n	80061c4 <UART_Start_Receive_IT+0xa4>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800619e:	d10d      	bne.n	80061bc <UART_Start_Receive_IT+0x9c>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <UART_Start_Receive_IT+0x92>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	227f      	movs	r2, #127	@ 0x7f
 80061ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061b0:	e008      	b.n	80061c4 <UART_Start_Receive_IT+0xa4>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	223f      	movs	r2, #63	@ 0x3f
 80061b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061ba:	e003      	b.n	80061c4 <UART_Start_Receive_IT+0xa4>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2222      	movs	r2, #34	@ 0x22
 80061d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3308      	adds	r3, #8
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80061f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80061f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e5      	bne.n	80061d4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006210:	d107      	bne.n	8006222 <UART_Start_Receive_IT+0x102>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a21      	ldr	r2, [pc, #132]	@ (80062a4 <UART_Start_Receive_IT+0x184>)
 800621e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006220:	e002      	b.n	8006228 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4a20      	ldr	r2, [pc, #128]	@ (80062a8 <UART_Start_Receive_IT+0x188>)
 8006226:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d019      	beq.n	8006264 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006250:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800625c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e6      	bne.n	8006230 <UART_Start_Receive_IT+0x110>
 8006262:	e018      	b.n	8006296 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	613b      	str	r3, [r7, #16]
   return(result);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f043 0320 	orr.w	r3, r3, #32
 8006278:	653b      	str	r3, [r7, #80]	@ 0x50
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006282:	623b      	str	r3, [r7, #32]
 8006284:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	69f9      	ldr	r1, [r7, #28]
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	375c      	adds	r7, #92	@ 0x5c
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	08006729 	.word	0x08006729
 80062a8:	0800656d 	.word	0x0800656d

080062ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b095      	sub	sp, #84	@ 0x54
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e6      	bne.n	80062b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006308:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800630c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e5      	bne.n	80062e6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631e:	2b01      	cmp	r3, #1
 8006320:	d118      	bne.n	8006354 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f023 0310 	bic.w	r3, r3, #16
 8006336:	647b      	str	r3, [r7, #68]	@ 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6979      	ldr	r1, [r7, #20]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	613b      	str	r3, [r7, #16]
   return(result);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006368:	bf00      	nop
 800636a:	3754      	adds	r7, #84	@ 0x54
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fa3e 	bl	8005814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b08f      	sub	sp, #60	@ 0x3c
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ac:	2b21      	cmp	r3, #33	@ 0x21
 80063ae:	d14c      	bne.n	800644a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d132      	bne.n	8006422 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e6      	bne.n	80063bc <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006402:	633b      	str	r3, [r7, #48]	@ 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	613b      	str	r3, [r7, #16]
   return(result);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e6      	bne.n	80063ee <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006420:	e013      	b.n	800644a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006426:	781a      	ldrb	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800644a:	bf00      	nop
 800644c:	373c      	adds	r7, #60	@ 0x3c
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006456:	b480      	push	{r7}
 8006458:	b091      	sub	sp, #68	@ 0x44
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006462:	2b21      	cmp	r3, #33	@ 0x21
 8006464:	d151      	bne.n	800650a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d132      	bne.n	80064d8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	623b      	str	r3, [r7, #32]
   return(result);
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006486:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	633b      	str	r3, [r7, #48]	@ 0x30
 8006492:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	69b9      	ldr	r1, [r7, #24]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	617b      	str	r3, [r7, #20]
   return(result);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e6      	bne.n	80064a4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80064d6:	e018      	b.n	800650a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80064de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ea:	b292      	uxth	r2, r2
 80064ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f2:	1c9a      	adds	r2, r3, #2
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800650a:	bf00      	nop
 800650c:	3744      	adds	r7, #68	@ 0x44
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b088      	sub	sp, #32
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	60bb      	str	r3, [r7, #8]
   return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6979      	ldr	r1, [r7, #20]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	613b      	str	r3, [r7, #16]
   return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e6      	bne.n	800651e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fb fe31 	bl	80021c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006562:	bf00      	nop
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b09c      	sub	sp, #112	@ 0x70
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800657a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006584:	2b22      	cmp	r3, #34	@ 0x22
 8006586:	f040 80be 	bne.w	8006706 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006590:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006594:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006598:	b2d9      	uxtb	r1, r3
 800659a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a4:	400a      	ands	r2, r1
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 80a3 	bne.w	800671a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e6      	bne.n	80065d4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3308      	adds	r3, #8
 800660c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	667b      	str	r3, [r7, #100]	@ 0x64
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006626:	647a      	str	r2, [r7, #68]	@ 0x44
 8006628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800662c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a34      	ldr	r2, [pc, #208]	@ (8006724 <UART_RxISR_8BIT+0x1b8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d01f      	beq.n	8006698 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d018      	beq.n	8006698 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	623b      	str	r3, [r7, #32]
   return(result);
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800667a:	663b      	str	r3, [r7, #96]	@ 0x60
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006684:	633b      	str	r3, [r7, #48]	@ 0x30
 8006686:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800668a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800669c:	2b01      	cmp	r3, #1
 800669e:	d12e      	bne.n	80066fe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0310 	bic.w	r3, r3, #16
 80066ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d103      	bne.n	80066ee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2210      	movs	r2, #16
 80066ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff f896 	bl	8005828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066fc:	e00d      	b.n	800671a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fb fd94 	bl	800222c <HAL_UART_RxCpltCallback>
}
 8006704:	e009      	b.n	800671a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	8b1b      	ldrh	r3, [r3, #24]
 800670c:	b29a      	uxth	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0208 	orr.w	r2, r2, #8
 8006716:	b292      	uxth	r2, r2
 8006718:	831a      	strh	r2, [r3, #24]
}
 800671a:	bf00      	nop
 800671c:	3770      	adds	r7, #112	@ 0x70
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40008000 	.word	0x40008000

08006728 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b09c      	sub	sp, #112	@ 0x70
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006736:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006740:	2b22      	cmp	r3, #34	@ 0x22
 8006742:	f040 80be 	bne.w	80068c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800674c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006754:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006756:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800675a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800675e:	4013      	ands	r3, r2
 8006760:	b29a      	uxth	r2, r3
 8006762:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006764:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 80a3 	bne.w	80068d6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800679e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80067b0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80067bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e6      	bne.n	8006790 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a34      	ldr	r2, [pc, #208]	@ (80068e0 <UART_RxISR_16BIT+0x1b8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d01f      	beq.n	8006854 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d018      	beq.n	8006854 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006836:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006842:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006858:	2b01      	cmp	r3, #1
 800685a:	d12e      	bne.n	80068ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 0310 	bic.w	r3, r3, #16
 8006876:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6979      	ldr	r1, [r7, #20]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	613b      	str	r3, [r7, #16]
   return(result);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e6      	bne.n	8006862 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d103      	bne.n	80068aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2210      	movs	r2, #16
 80068a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fe ffb8 	bl	8005828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068b8:	e00d      	b.n	80068d6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fb fcb6 	bl	800222c <HAL_UART_RxCpltCallback>
}
 80068c0:	e009      	b.n	80068d6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	8b1b      	ldrh	r3, [r3, #24]
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	b292      	uxth	r2, r2
 80068d4:	831a      	strh	r2, [r3, #24]
}
 80068d6:	bf00      	nop
 80068d8:	3770      	adds	r7, #112	@ 0x70
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40008000 	.word	0x40008000

080068e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	7992      	ldrb	r2, [r2, #6]
 800690a:	08d2      	lsrs	r2, r2, #3
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	fb13 f302 	smulbb	r3, r3, r2
 8006912:	b29a      	uxth	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	889b      	ldrh	r3, [r3, #4]
 800691c:	461a      	mov	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	461a      	mov	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	60da      	str	r2, [r3, #12]
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800693e:	b490      	push	{r4, r7}
 8006940:	b086      	sub	sp, #24
 8006942:	af00      	add	r7, sp, #0
 8006944:	4604      	mov	r4, r0
 8006946:	4608      	mov	r0, r1
 8006948:	1d39      	adds	r1, r7, #4
 800694a:	e881 000c 	stmia.w	r1, {r2, r3}
 800694e:	4623      	mov	r3, r4
 8006950:	81fb      	strh	r3, [r7, #14]
 8006952:	4603      	mov	r3, r0
 8006954:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800695a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800695e:	88ba      	ldrh	r2, [r7, #4]
 8006960:	4293      	cmp	r3, r2
 8006962:	da04      	bge.n	800696e <code+0x30>
        code |= LEFT;
 8006964:	2201      	movs	r2, #1
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	4313      	orrs	r3, r2
 800696a:	75fb      	strb	r3, [r7, #23]
 800696c:	e008      	b.n	8006980 <code+0x42>
    } else if (x0 > window.x1) {
 800696e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006972:	893a      	ldrh	r2, [r7, #8]
 8006974:	4293      	cmp	r3, r2
 8006976:	dd03      	ble.n	8006980 <code+0x42>
        code |= RIGHT;
 8006978:	2202      	movs	r2, #2
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	4313      	orrs	r3, r2
 800697e:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006980:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	4293      	cmp	r3, r2
 8006988:	da04      	bge.n	8006994 <code+0x56>
        code |= BOTTOM;
 800698a:	2204      	movs	r2, #4
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	4313      	orrs	r3, r2
 8006990:	75fb      	strb	r3, [r7, #23]
 8006992:	e008      	b.n	80069a6 <code+0x68>
    } else if (y0 > window.y1) {
 8006994:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006998:	897a      	ldrh	r2, [r7, #10]
 800699a:	4293      	cmp	r3, r2
 800699c:	dd03      	ble.n	80069a6 <code+0x68>
        code |= TOP;
 800699e:	2208      	movs	r2, #8
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc90      	pop	{r4, r7}
 80069b0:	4770      	bx	lr

080069b2 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b088      	sub	sp, #32
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80069cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80069d0:	cb0c      	ldmia	r3, {r2, r3}
 80069d2:	f7ff ffb4 	bl	800693e <code>
 80069d6:	4603      	mov	r3, r0
 80069d8:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80069e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80069ea:	cb0c      	ldmia	r3, {r2, r3}
 80069ec:	f7ff ffa7 	bl	800693e <code>
 80069f0:	4603      	mov	r3, r0
 80069f2:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 80069f4:	2300      	movs	r3, #0
 80069f6:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 80069f8:	7ffa      	ldrb	r2, [r7, #31]
 80069fa:	7fbb      	ldrb	r3, [r7, #30]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006a04:	2301      	movs	r3, #1
 8006a06:	777b      	strb	r3, [r7, #29]
            break;
 8006a08:	e0e9      	b.n	8006bde <clip_line+0x22c>
        } else if (code0 & code1) {
 8006a0a:	7ffa      	ldrb	r2, [r7, #31]
 8006a0c:	7fbb      	ldrb	r3, [r7, #30]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 80e2 	bne.w	8006bdc <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006a20:	7ffb      	ldrb	r3, [r7, #31]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <clip_line+0x78>
 8006a26:	7ffb      	ldrb	r3, [r7, #31]
 8006a28:	e000      	b.n	8006a2c <clip_line+0x7a>
 8006a2a:	7fbb      	ldrb	r3, [r7, #30]
 8006a2c:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006a2e:	2208      	movs	r2, #8
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	4013      	ands	r3, r2
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d024      	beq.n	8006a84 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a50:	1acb      	subs	r3, r1, r3
 8006a52:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006a54:	4608      	mov	r0, r1
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006a5c:	1a41      	subs	r1, r0, r1
 8006a5e:	fb03 f101 	mul.w	r1, r3, r1
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a70:	1ac3      	subs	r3, r0, r3
 8006a72:	fb91 f3f3 	sdiv	r3, r1, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006a7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006a80:	833b      	strh	r3, [r7, #24]
 8006a82:	e07f      	b.n	8006b84 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006a84:	2204      	movs	r2, #4
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d024      	beq.n	8006ada <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aa6:	1acb      	subs	r3, r1, r3
 8006aa8:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006aaa:	4608      	mov	r0, r1
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ab2:	1a41      	subs	r1, r0, r1
 8006ab4:	fb03 f101 	mul.w	r1, r3, r1
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac6:	1ac3      	subs	r3, r0, r3
 8006ac8:	fb91 f3f3 	sdiv	r3, r1, r3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006ad4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ad6:	833b      	strh	r3, [r7, #24]
 8006ad8:	e054      	b.n	8006b84 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006ada:	2202      	movs	r2, #2
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d024      	beq.n	8006b30 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af4:	4619      	mov	r1, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006afc:	1acb      	subs	r3, r1, r3
 8006afe:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006b00:	4608      	mov	r0, r1
 8006b02:	68f9      	ldr	r1, [r7, #12]
 8006b04:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b08:	1a41      	subs	r1, r0, r1
 8006b0a:	fb03 f101 	mul.w	r1, r3, r1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b14:	4618      	mov	r0, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b1c:	1ac3      	subs	r3, r0, r3
 8006b1e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	4413      	add	r3, r2
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006b2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b2c:	837b      	strh	r3, [r7, #26]
 8006b2e:	e029      	b.n	8006b84 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006b30:	2201      	movs	r2, #1
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	4013      	ands	r3, r2
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d023      	beq.n	8006b84 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b52:	1acb      	subs	r3, r1, r3
 8006b54:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006b56:	4608      	mov	r0, r1
 8006b58:	68f9      	ldr	r1, [r7, #12]
 8006b5a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b5e:	1a41      	subs	r1, r0, r1
 8006b60:	fb03 f101 	mul.w	r1, r3, r1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b72:	1ac3      	subs	r3, r0, r3
 8006b74:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006b80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b82:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006b84:	7dfa      	ldrb	r2, [r7, #23]
 8006b86:	7ffb      	ldrb	r3, [r7, #31]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d113      	bne.n	8006bb4 <clip_line+0x202>
                *x0 = x;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8b7a      	ldrh	r2, [r7, #26]
 8006b90:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	8b3a      	ldrh	r2, [r7, #24]
 8006b96:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006ba4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006ba8:	cb0c      	ldmia	r3, {r2, r3}
 8006baa:	f7ff fec8 	bl	800693e <code>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e721      	b.n	80069f8 <clip_line+0x46>
            } else {
                *x1 = x;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8b7a      	ldrh	r2, [r7, #26]
 8006bb8:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	8b3a      	ldrh	r2, [r7, #24]
 8006bbe:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006bcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006bd0:	cb0c      	ldmia	r3, {r2, r3}
 8006bd2:	f7ff feb4 	bl	800693e <code>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006bda:	e70d      	b.n	80069f8 <clip_line+0x46>
            break;
 8006bdc:	bf00      	nop
            }
        }
    }

    return accept;
 8006bde:	7f7b      	ldrb	r3, [r7, #29]
 8006be0:	4618      	mov	r0, r3
 8006be2:	3720      	adds	r7, #32
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	3306      	adds	r3, #6
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f001 fdab 	bl	8008756 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	330e      	adds	r3, #14
 8006c04:	781a      	ldrb	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	330f      	adds	r3, #15
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	3310      	adds	r3, #16
 8006c18:	781a      	ldrb	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	72da      	strb	r2, [r3, #11]

    return 0;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08e      	sub	sp, #56	@ 0x38
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006c34:	f107 0314 	add.w	r3, r7, #20
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff ffd4 	bl	8006be8 <fontx_meta>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006c46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <fontx_glyph+0x2c>
        return status;
 8006c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e077      	b.n	8006d44 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006c54:	7f7a      	ldrb	r2, [r7, #29]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006c5a:	7fba      	ldrb	r2, [r7, #30]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006c60:	7f7b      	ldrb	r3, [r7, #29]
 8006c62:	3307      	adds	r3, #7
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	da00      	bge.n	8006c6a <fontx_glyph+0x42>
 8006c68:	3307      	adds	r3, #7
 8006c6a:	10db      	asrs	r3, r3, #3
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	78da      	ldrb	r2, [r3, #3]
 8006c76:	7fbb      	ldrb	r3, [r7, #30]
 8006c78:	fb12 f303 	smulbb	r3, r2, r3
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006c82:	7ffb      	ldrb	r3, [r7, #31]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10f      	bne.n	8006ca8 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2bff      	cmp	r3, #255	@ 0xff
 8006c8c:	d859      	bhi.n	8006d42 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	789b      	ldrb	r3, [r3, #2]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	fb02 f303 	mul.w	r3, r2, r3
 8006c9a:	3311      	adds	r3, #17
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	441a      	add	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e04d      	b.n	8006d44 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3312      	adds	r3, #18
 8006cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3311      	adds	r3, #17
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006cba:	e03d      	b.n	8006d38 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	4413      	add	r3, r2
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	3302      	adds	r3, #2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	3303      	adds	r3, #3
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	4413      	add	r3, r2
 8006ce0:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d31c      	bcc.n	8006d24 <fontx_glyph+0xfc>
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d818      	bhi.n	8006d24 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cfa:	4413      	add	r3, r2
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3311      	adds	r3, #17
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	461a      	mov	r2, r3
                    nc * glyph->size
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	789b      	ldrb	r3, [r3, #2]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d14:	4413      	add	r3, r2
 8006d16:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	441a      	add	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e00f      	b.n	8006d44 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006d24:	6a3a      	ldr	r2, [r7, #32]
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	1ad2      	subs	r2, r2, r3
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3301      	adds	r3, #1
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d34:	3304      	adds	r3, #4
 8006d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	1e5a      	subs	r2, r3, #1
 8006d3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1bc      	bne.n	8006cbc <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006d42:	2301      	movs	r3, #1
 8006d44:	4618      	mov	r0, r3
 8006d46:	3738      	adds	r7, #56	@ 0x38
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	dd01      	ble.n	8006d62 <min+0x16>
        return b;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	e000      	b.n	8006d64 <min+0x18>
    };
    return a;
 8006d62:	687b      	ldr	r3, [r7, #4]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <max>:

static inline int max(int a, int b) {
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	dd01      	ble.n	8006d86 <max+0x16>
        return a;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	e000      	b.n	8006d88 <max+0x18>
    }
    return b;
 8006d86:	683b      	ldr	r3, [r7, #0]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	80fb      	strh	r3, [r7, #6]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	80bb      	strh	r3, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006daa:	4a12      	ldr	r2, [pc, #72]	@ (8006df4 <hagl_put_pixel+0x60>)
 8006dac:	8812      	ldrh	r2, [r2, #0]
 8006dae:	4293      	cmp	r3, r2
 8006db0:	db1a      	blt.n	8006de8 <hagl_put_pixel+0x54>
 8006db2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006db6:	4a0f      	ldr	r2, [pc, #60]	@ (8006df4 <hagl_put_pixel+0x60>)
 8006db8:	8852      	ldrh	r2, [r2, #2]
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	db14      	blt.n	8006de8 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8006df4 <hagl_put_pixel+0x60>)
 8006dc4:	8892      	ldrh	r2, [r2, #4]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	dc10      	bgt.n	8006dec <hagl_put_pixel+0x58>
 8006dca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006dce:	4a09      	ldr	r2, [pc, #36]	@ (8006df4 <hagl_put_pixel+0x60>)
 8006dd0:	88d2      	ldrh	r2, [r2, #6]
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	dc0a      	bgt.n	8006dec <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dda:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006dde:	887a      	ldrh	r2, [r7, #2]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fa feab 	bl	8001b3c <lcdPutPixel>
 8006de6:	e002      	b.n	8006dee <hagl_put_pixel+0x5a>
        return;
 8006de8:	bf00      	nop
 8006dea:	e000      	b.n	8006dee <hagl_put_pixel+0x5a>
        return;
 8006dec:	bf00      	nop
}
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	2000020c 	.word	0x2000020c

08006df8 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006df8:	b590      	push	{r4, r7, lr}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	4623      	mov	r3, r4
 8006e08:	80fb      	strh	r3, [r7, #6]
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	80bb      	strh	r3, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	807b      	strh	r3, [r7, #2]
 8006e12:	4613      	mov	r3, r2
 8006e14:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006e16:	88fa      	ldrh	r2, [r7, #6]
 8006e18:	887b      	ldrh	r3, [r7, #2]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	b21a      	sxth	r2, r3
 8006e20:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006e24:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006e2c:	883b      	ldrh	r3, [r7, #0]
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4623      	mov	r3, r4
 8006e32:	f000 f827 	bl	8006e84 <hagl_draw_line>
#endif
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd90      	pop	{r4, r7, pc}

08006e3e <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006e3e:	b590      	push	{r4, r7, lr}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af02      	add	r7, sp, #8
 8006e44:	4604      	mov	r4, r0
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4623      	mov	r3, r4
 8006e4e:	80fb      	strh	r3, [r7, #6]
 8006e50:	4603      	mov	r3, r0
 8006e52:	80bb      	strh	r3, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	807b      	strh	r3, [r7, #2]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006e5c:	88ba      	ldrh	r2, [r7, #4]
 8006e5e:	887b      	ldrh	r3, [r7, #2]
 8006e60:	4413      	add	r3, r2
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b21c      	sxth	r4, r3
 8006e66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e6e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006e72:	883b      	ldrh	r3, [r7, #0]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	4623      	mov	r3, r4
 8006e78:	f000 f804 	bl	8006e84 <hagl_draw_line>
#endif
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}

08006e84 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	b089      	sub	sp, #36	@ 0x24
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	4623      	mov	r3, r4
 8006e94:	80fb      	strh	r3, [r7, #6]
 8006e96:	4603      	mov	r3, r0
 8006e98:	80bb      	strh	r3, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	807b      	strh	r3, [r7, #2]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	1cba      	adds	r2, r7, #2
 8006ea6:	1d3d      	adds	r5, r7, #4
 8006ea8:	1dbc      	adds	r4, r7, #6
 8006eaa:	494a      	ldr	r1, [pc, #296]	@ (8006fd4 <hagl_draw_line+0x150>)
 8006eac:	466e      	mov	r6, sp
 8006eae:	c903      	ldmia	r1, {r0, r1}
 8006eb0:	e886 0003 	stmia.w	r6, {r0, r1}
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7ff fd7b 	bl	80069b2 <clip_line>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f083 0301 	eor.w	r3, r3, #1
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d17e      	bne.n	8006fc6 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006ec8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfb8      	it	lt
 8006ed8:	425b      	neglt	r3, r3
 8006eda:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006edc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	da01      	bge.n	8006eec <hagl_draw_line+0x68>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e001      	b.n	8006ef0 <hagl_draw_line+0x6c>
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006ef2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bfb8      	it	lt
 8006f02:	425b      	neglt	r3, r3
 8006f04:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006f06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	da01      	bge.n	8006f16 <hagl_draw_line+0x92>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e001      	b.n	8006f1a <hagl_draw_line+0x96>
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006f1c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006f20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	dd06      	ble.n	8006f36 <hagl_draw_line+0xb2>
 8006f28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f2c:	0fda      	lsrs	r2, r3, #31
 8006f2e:	4413      	add	r3, r2
 8006f30:	105b      	asrs	r3, r3, #1
 8006f32:	b21b      	sxth	r3, r3
 8006f34:	e006      	b.n	8006f44 <hagl_draw_line+0xc0>
 8006f36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f3a:	0fda      	lsrs	r2, r3, #31
 8006f3c:	4413      	add	r3, r2
 8006f3e:	105b      	asrs	r3, r3, #1
 8006f40:	425b      	negs	r3, r3
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8006f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f4e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff ff1f 	bl	8006d94 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8006f56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d105      	bne.n	8006f6e <hagl_draw_line+0xea>
 8006f62:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f66:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d02d      	beq.n	8006fca <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006f6e:	8afb      	ldrh	r3, [r7, #22]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8006f76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006f7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f7e:	425b      	negs	r3, r3
 8006f80:	429a      	cmp	r2, r3
 8006f82:	dd0c      	ble.n	8006f9e <hagl_draw_line+0x11a>
            err -= dy;
 8006f84:	8afa      	ldrh	r2, [r7, #22]
 8006f86:	8a3b      	ldrh	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	8a7b      	ldrh	r3, [r7, #18]
 8006f96:	4413      	add	r3, r2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	b21b      	sxth	r3, r3
 8006f9c:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006f9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006fa2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	dacd      	bge.n	8006f46 <hagl_draw_line+0xc2>
            err += dx;
 8006faa:	8afa      	ldrh	r2, [r7, #22]
 8006fac:	8abb      	ldrh	r3, [r7, #20]
 8006fae:	4413      	add	r3, r2
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8006fb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	89fb      	ldrh	r3, [r7, #14]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8006fc4:	e7bf      	b.n	8006f46 <hagl_draw_line+0xc2>
        return;
 8006fc6:	bf00      	nop
 8006fc8:	e000      	b.n	8006fcc <hagl_draw_line+0x148>
            break;
 8006fca:	bf00      	nop
        }
    }
}
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	2000020c 	.word	0x2000020c

08006fd8 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	80fb      	strh	r3, [r7, #6]
 8006fea:	4603      	mov	r3, r0
 8006fec:	80bb      	strh	r3, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	807b      	strh	r3, [r7, #2]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8006ff6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ffa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	dd0e      	ble.n	8007020 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	887b      	ldrh	r3, [r7, #2]
 8007006:	4413      	add	r3, r2
 8007008:	b29b      	uxth	r3, r3
 800700a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800700c:	88fa      	ldrh	r2, [r7, #6]
 800700e:	887b      	ldrh	r3, [r7, #2]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	b29b      	uxth	r3, r3
 8007014:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	887b      	ldrh	r3, [r7, #2]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	b29b      	uxth	r3, r3
 800701e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007020:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007024:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007028:	429a      	cmp	r2, r3
 800702a:	dd0e      	ble.n	800704a <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800702c:	88ba      	ldrh	r2, [r7, #4]
 800702e:	883b      	ldrh	r3, [r7, #0]
 8007030:	4413      	add	r3, r2
 8007032:	b29b      	uxth	r3, r3
 8007034:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007036:	88ba      	ldrh	r2, [r7, #4]
 8007038:	883b      	ldrh	r3, [r7, #0]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	b29b      	uxth	r3, r3
 800703e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007040:	88ba      	ldrh	r2, [r7, #4]
 8007042:	883b      	ldrh	r3, [r7, #0]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	b29b      	uxth	r3, r3
 8007048:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800704a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800704e:	4a24      	ldr	r2, [pc, #144]	@ (80070e0 <hagl_draw_rectangle+0x108>)
 8007050:	8812      	ldrh	r2, [r2, #0]
 8007052:	4293      	cmp	r3, r2
 8007054:	db3e      	blt.n	80070d4 <hagl_draw_rectangle+0xfc>
 8007056:	f9b7 3000 	ldrsh.w	r3, [r7]
 800705a:	4a21      	ldr	r2, [pc, #132]	@ (80070e0 <hagl_draw_rectangle+0x108>)
 800705c:	8852      	ldrh	r2, [r2, #2]
 800705e:	4293      	cmp	r3, r2
 8007060:	db38      	blt.n	80070d4 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007066:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <hagl_draw_rectangle+0x108>)
 8007068:	8892      	ldrh	r2, [r2, #4]
 800706a:	4293      	cmp	r3, r2
 800706c:	dc34      	bgt.n	80070d8 <hagl_draw_rectangle+0x100>
 800706e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007072:	4a1b      	ldr	r2, [pc, #108]	@ (80070e0 <hagl_draw_rectangle+0x108>)
 8007074:	88d2      	ldrh	r2, [r2, #6]
 8007076:	4293      	cmp	r3, r2
 8007078:	dc2e      	bgt.n	80070d8 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800707a:	887a      	ldrh	r2, [r7, #2]
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	b29b      	uxth	r3, r3
 8007082:	3301      	adds	r3, #1
 8007084:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 8007086:	883a      	ldrh	r2, [r7, #0]
 8007088:	88bb      	ldrh	r3, [r7, #4]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	b29b      	uxth	r3, r3
 800708e:	3301      	adds	r3, #1
 8007090:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8007092:	8c3b      	ldrh	r3, [r7, #32]
 8007094:	89fa      	ldrh	r2, [r7, #14]
 8007096:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800709a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800709e:	f7ff feab 	bl	8006df8 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 80070a2:	8c3b      	ldrh	r3, [r7, #32]
 80070a4:	89fa      	ldrh	r2, [r7, #14]
 80070a6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80070aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80070ae:	f7ff fea3 	bl	8006df8 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80070b2:	8c3b      	ldrh	r3, [r7, #32]
 80070b4:	89ba      	ldrh	r2, [r7, #12]
 80070b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80070be:	f7ff febe 	bl	8006e3e <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80070c2:	8c3b      	ldrh	r3, [r7, #32]
 80070c4:	89ba      	ldrh	r2, [r7, #12]
 80070c6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070ca:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80070ce:	f7ff feb6 	bl	8006e3e <hagl_draw_vline>
 80070d2:	e002      	b.n	80070da <hagl_draw_rectangle+0x102>
        return;
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <hagl_draw_rectangle+0x102>
        return;
 80070d8:	bf00      	nop
}
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd90      	pop	{r4, r7, pc}
 80070e0:	2000020c 	.word	0x2000020c

080070e4 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80070e4:	b590      	push	{r4, r7, lr}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	4611      	mov	r1, r2
 80070f0:	461a      	mov	r2, r3
 80070f2:	4623      	mov	r3, r4
 80070f4:	80fb      	strh	r3, [r7, #6]
 80070f6:	4603      	mov	r3, r0
 80070f8:	80bb      	strh	r3, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	807b      	strh	r3, [r7, #2]
 80070fe:	4613      	mov	r3, r2
 8007100:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007102:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007106:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800710a:	429a      	cmp	r2, r3
 800710c:	dd0e      	ble.n	800712c <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800710e:	88fa      	ldrh	r2, [r7, #6]
 8007110:	887b      	ldrh	r3, [r7, #2]
 8007112:	4413      	add	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007118:	88fa      	ldrh	r2, [r7, #6]
 800711a:	887b      	ldrh	r3, [r7, #2]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	b29b      	uxth	r3, r3
 8007120:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	887b      	ldrh	r3, [r7, #2]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	b29b      	uxth	r3, r3
 800712a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800712c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007130:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007134:	429a      	cmp	r2, r3
 8007136:	dd0e      	ble.n	8007156 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007138:	88ba      	ldrh	r2, [r7, #4]
 800713a:	883b      	ldrh	r3, [r7, #0]
 800713c:	4413      	add	r3, r2
 800713e:	b29b      	uxth	r3, r3
 8007140:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007142:	88ba      	ldrh	r2, [r7, #4]
 8007144:	883b      	ldrh	r3, [r7, #0]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	b29b      	uxth	r3, r3
 800714a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800714c:	88ba      	ldrh	r2, [r7, #4]
 800714e:	883b      	ldrh	r3, [r7, #0]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	b29b      	uxth	r3, r3
 8007154:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800715a:	4a33      	ldr	r2, [pc, #204]	@ (8007228 <hagl_fill_rectangle+0x144>)
 800715c:	8812      	ldrh	r2, [r2, #0]
 800715e:	4293      	cmp	r3, r2
 8007160:	db5b      	blt.n	800721a <hagl_fill_rectangle+0x136>
 8007162:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007166:	4a30      	ldr	r2, [pc, #192]	@ (8007228 <hagl_fill_rectangle+0x144>)
 8007168:	8852      	ldrh	r2, [r2, #2]
 800716a:	4293      	cmp	r3, r2
 800716c:	db55      	blt.n	800721a <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800716e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007172:	4a2d      	ldr	r2, [pc, #180]	@ (8007228 <hagl_fill_rectangle+0x144>)
 8007174:	8892      	ldrh	r2, [r2, #4]
 8007176:	4293      	cmp	r3, r2
 8007178:	dc51      	bgt.n	800721e <hagl_fill_rectangle+0x13a>
 800717a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800717e:	4a2a      	ldr	r2, [pc, #168]	@ (8007228 <hagl_fill_rectangle+0x144>)
 8007180:	88d2      	ldrh	r2, [r2, #6]
 8007182:	4293      	cmp	r3, r2
 8007184:	dc4b      	bgt.n	800721e <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8007186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800718a:	4a27      	ldr	r2, [pc, #156]	@ (8007228 <hagl_fill_rectangle+0x144>)
 800718c:	8812      	ldrh	r2, [r2, #0]
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fded 	bl	8006d70 <max>
 8007196:	4603      	mov	r3, r0
 8007198:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800719a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800719e:	4a22      	ldr	r2, [pc, #136]	@ (8007228 <hagl_fill_rectangle+0x144>)
 80071a0:	8852      	ldrh	r2, [r2, #2]
 80071a2:	4611      	mov	r1, r2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff fde3 	bl	8006d70 <max>
 80071aa:	4603      	mov	r3, r0
 80071ac:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80071ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007228 <hagl_fill_rectangle+0x144>)
 80071b4:	8892      	ldrh	r2, [r2, #4]
 80071b6:	4611      	mov	r1, r2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fdc7 	bl	8006d4c <min>
 80071be:	4603      	mov	r3, r0
 80071c0:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80071c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <hagl_fill_rectangle+0x144>)
 80071c8:	88d2      	ldrh	r2, [r2, #6]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fdbd 	bl	8006d4c <min>
 80071d2:	4603      	mov	r3, r0
 80071d4:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80071d6:	887a      	ldrh	r2, [r7, #2]
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3301      	adds	r3, #1
 80071e0:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80071e2:	883a      	ldrh	r2, [r7, #0]
 80071e4:	88bb      	ldrh	r3, [r7, #4]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3301      	adds	r3, #1
 80071ec:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80071ee:	2300      	movs	r3, #0
 80071f0:	81fb      	strh	r3, [r7, #14]
 80071f2:	e00d      	b.n	8007210 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80071f4:	88ba      	ldrh	r2, [r7, #4]
 80071f6:	89fb      	ldrh	r3, [r7, #14]
 80071f8:	4413      	add	r3, r2
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	b219      	sxth	r1, r3
 80071fe:	8c3b      	ldrh	r3, [r7, #32]
 8007200:	89ba      	ldrh	r2, [r7, #12]
 8007202:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007206:	f7ff fdf7 	bl	8006df8 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800720a:	89fb      	ldrh	r3, [r7, #14]
 800720c:	3301      	adds	r3, #1
 800720e:	81fb      	strh	r3, [r7, #14]
 8007210:	89fa      	ldrh	r2, [r7, #14]
 8007212:	897b      	ldrh	r3, [r7, #10]
 8007214:	429a      	cmp	r2, r3
 8007216:	d3ed      	bcc.n	80071f4 <hagl_fill_rectangle+0x110>
 8007218:	e002      	b.n	8007220 <hagl_fill_rectangle+0x13c>
        return;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <hagl_fill_rectangle+0x13c>
        return;
 800721e:	bf00      	nop
#endif
    }
}
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	bd90      	pop	{r4, r7, pc}
 8007226:	bf00      	nop
 8007228:	2000020c 	.word	0x2000020c

0800722c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8007232:	b08d      	sub	sp, #52	@ 0x34
 8007234:	af00      	add	r7, sp, #0
 8007236:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800723a:	f844 0c24 	str.w	r0, [r4, #-36]
 800723e:	460c      	mov	r4, r1
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007248:	4622      	mov	r2, r4
 800724a:	f823 2c26 	strh.w	r2, [r3, #-38]
 800724e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007252:	4602      	mov	r2, r0
 8007254:	f823 2c28 	strh.w	r2, [r3, #-40]
 8007258:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800725c:	460a      	mov	r2, r1
 800725e:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t *buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8007262:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007266:	4619      	mov	r1, r3
 8007268:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800726c:	3b20      	subs	r3, #32
 800726e:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fcd5 	bl	8006c28 <fontx_glyph>
 800727e:	4603      	mov	r3, r0
 8007280:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8007284:	f102 0229 	add.w	r2, r2, #41	@ 0x29
 8007288:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800728a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800728e:	f103 0329 	add.w	r3, r3, #41	@ 0x29
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <hagl_put_char+0x70>
        return 0;
 8007298:	2300      	movs	r3, #0
 800729a:	e0c0      	b.n	800741e <hagl_put_char+0x1f2>
    }

    bitmap.width = glyph.width,
 800729c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072a0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80072a4:	461a      	mov	r2, r3
 80072a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072aa:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80072ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072b2:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072bc:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80072c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072c4:	2210      	movs	r2, #16
 80072c6:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80072ca:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80072ce:	3a08      	subs	r2, #8
 80072d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072d4:	3b18      	subs	r3, #24
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff fb0d 	bl	80068f8 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80072de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072e2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80072e6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80072ea:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80072ee:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80072f0:	2300      	movs	r3, #0
 80072f2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80072f6:	f102 022b 	add.w	r2, r2, #43	@ 0x2b
 80072fa:	7013      	strb	r3, [r2, #0]
 80072fc:	e071      	b.n	80073e2 <hagl_put_char+0x1b6>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80072fe:	2300      	movs	r3, #0
 8007300:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8007304:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 8007308:	7013      	strb	r3, [r2, #0]
 800730a:	e047      	b.n	800739c <hagl_put_char+0x170>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800730c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007310:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b25a      	sxtb	r2, r3
 8007318:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800731c:	f103 032a 	add.w	r3, r3, #42	@ 0x2a
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2180      	movs	r1, #128	@ 0x80
 8007328:	fa41 f303 	asr.w	r3, r1, r3
 800732c:	b25b      	sxtb	r3, r3
 800732e:	4013      	ands	r3, r2
 8007330:	b25b      	sxtb	r3, r3
 8007332:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8007336:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800733a:	7013      	strb	r3, [r2, #0]
            if (set) {
 800733c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8007340:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d010      	beq.n	800736c <hagl_put_char+0x140>
                *(ptr++) = color;
 800734a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800734e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	1c9a      	adds	r2, r3, #2
 8007356:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 800735a:	f101 012c 	add.w	r1, r1, #44	@ 0x2c
 800735e:	600a      	str	r2, [r1, #0]
 8007360:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007364:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	e00c      	b.n	8007386 <hagl_put_char+0x15a>
            } else {
                *(ptr++) = 0x0000;
 800736c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8007370:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	1c9a      	adds	r2, r3, #2
 8007378:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 800737c:	f101 012c 	add.w	r1, r1, #44	@ 0x2c
 8007380:	600a      	str	r2, [r1, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007386:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800738a:	f103 032a 	add.w	r3, r3, #42	@ 0x2a
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8007396:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 800739a:	7013      	strb	r3, [r2, #0]
 800739c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073a0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80073a4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80073a8:	f102 022a 	add.w	r2, r2, #42	@ 0x2a
 80073ac:	7812      	ldrb	r2, [r2, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d3ac      	bcc.n	800730c <hagl_put_char+0xe0>
            }
        }
        glyph.buffer += glyph.pitch;
 80073b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073b6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80073ba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80073be:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80073c2:	4413      	add	r3, r2
 80073c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80073c8:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80073cc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80073d0:	f103 032b 	add.w	r3, r3, #43	@ 0x2b
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	3301      	adds	r3, #1
 80073d8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80073dc:	f102 022b 	add.w	r2, r2, #43	@ 0x2b
 80073e0:	7013      	strb	r3, [r2, #0]
 80073e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073e6:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80073ea:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80073ee:	f102 022b 	add.w	r2, r2, #43	@ 0x2b
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d382      	bcc.n	80072fe <hagl_put_char+0xd2>
    }

    hagl_blit(x0, y0, &bitmap);
 80073f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073fc:	3b18      	subs	r3, #24
 80073fe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007402:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8007406:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800740a:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 800740e:	461a      	mov	r2, r3
 8007410:	f000 f85a 	bl	80074c8 <hagl_blit>

    return bitmap.width;
 8007414:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007418:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800741c:	b2db      	uxtb	r3, r3
}
 800741e:	4618      	mov	r0, r3
 8007420:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8007424:	3734      	adds	r7, #52	@ 0x34
 8007426:	46bd      	mov	sp, r7
 8007428:	bd90      	pop	{r4, r7, pc}

0800742a <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b08c      	sub	sp, #48	@ 0x30
 800742e:	af02      	add	r7, sp, #8
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	461a      	mov	r2, r3
 8007438:	4603      	mov	r3, r0
 800743a:	817b      	strh	r3, [r7, #10]
 800743c:	460b      	mov	r3, r1
 800743e:	813b      	strh	r3, [r7, #8]
 8007440:	4613      	mov	r3, r2
 8007442:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8007444:	897b      	ldrh	r3, [r7, #10]
 8007446:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007448:	f107 0314 	add.w	r3, r7, #20
 800744c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fbca 	bl	8006be8 <fontx_meta>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 800745a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <hagl_put_text+0x3c>
        return 0;
 8007462:	2300      	movs	r3, #0
 8007464:	e02c      	b.n	80074c0 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1d1a      	adds	r2, r3, #4
 800746a:	60fa      	str	r2, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	2b0d      	cmp	r3, #13
 8007474:	d002      	beq.n	800747c <hagl_put_text+0x52>
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2b0a      	cmp	r3, #10
 800747a:	d108      	bne.n	800748e <hagl_put_text+0x64>
            x0 = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8007480:	7fbb      	ldrb	r3, [r7, #30]
 8007482:	461a      	mov	r2, r3
 8007484:	893b      	ldrh	r3, [r7, #8]
 8007486:	4413      	add	r3, r2
 8007488:	b29b      	uxth	r3, r3
 800748a:	813b      	strh	r3, [r7, #8]
 800748c:	e010      	b.n	80074b0 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800748e:	88f8      	ldrh	r0, [r7, #6]
 8007490:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007494:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4603      	mov	r3, r0
 800749e:	6a38      	ldr	r0, [r7, #32]
 80074a0:	f7ff fec4 	bl	800722c <hagl_put_char>
 80074a4:	4603      	mov	r3, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	897b      	ldrh	r3, [r7, #10]
 80074aa:	4413      	add	r3, r2
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1d6      	bne.n	8007466 <hagl_put_text+0x3c>

    return x0 - original;
 80074b8:	897a      	ldrh	r2, [r7, #10]
 80074ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	b29b      	uxth	r3, r3
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3728      	adds	r7, #40	@ 0x28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	603a      	str	r2, [r7, #0]
 80074d2:	80fb      	strh	r3, [r7, #6]
 80074d4:	460b      	mov	r3, r1
 80074d6:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80074de:	2300      	movs	r3, #0
 80074e0:	827b      	strh	r3, [r7, #18]
 80074e2:	e020      	b.n	8007526 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80074e4:	2300      	movs	r3, #0
 80074e6:	823b      	strh	r3, [r7, #16]
 80074e8:	e015      	b.n	8007516 <hagl_blit+0x4e>
            color = *(ptr++);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	1c9a      	adds	r2, r3, #2
 80074ee:	617a      	str	r2, [r7, #20]
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80074f4:	88fa      	ldrh	r2, [r7, #6]
 80074f6:	8a3b      	ldrh	r3, [r7, #16]
 80074f8:	4413      	add	r3, r2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	b218      	sxth	r0, r3
 80074fe:	88ba      	ldrh	r2, [r7, #4]
 8007500:	8a7b      	ldrh	r3, [r7, #18]
 8007502:	4413      	add	r3, r2
 8007504:	b29b      	uxth	r3, r3
 8007506:	b21b      	sxth	r3, r3
 8007508:	89fa      	ldrh	r2, [r7, #14]
 800750a:	4619      	mov	r1, r3
 800750c:	f7ff fc42 	bl	8006d94 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007510:	8a3b      	ldrh	r3, [r7, #16]
 8007512:	3301      	adds	r3, #1
 8007514:	823b      	strh	r3, [r7, #16]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	8a3a      	ldrh	r2, [r7, #16]
 800751c:	429a      	cmp	r2, r3
 800751e:	d3e4      	bcc.n	80074ea <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007520:	8a7b      	ldrh	r3, [r7, #18]
 8007522:	3301      	adds	r3, #1
 8007524:	827b      	strh	r3, [r7, #18]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	885b      	ldrh	r3, [r3, #2]
 800752a:	8a7a      	ldrh	r2, [r7, #18]
 800752c:	429a      	cmp	r2, r3
 800752e:	d3d9      	bcc.n	80074e4 <hagl_blit+0x1c>
        }
    }
#endif
};
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <hagl_draw_circle>:
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
        0x00
    );
}

void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 800753a:	b590      	push	{r4, r7, lr}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	461a      	mov	r2, r3
 8007548:	4623      	mov	r3, r4
 800754a:	80fb      	strh	r3, [r7, #6]
 800754c:	4603      	mov	r3, r0
 800754e:	80bb      	strh	r3, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	807b      	strh	r3, [r7, #2]
 8007554:	4613      	mov	r3, r2
 8007556:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007560:	887b      	ldrh	r3, [r7, #2]
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	b29b      	uxth	r3, r3
 8007566:	f1c3 0303 	rsb	r3, r3, #3
 800756a:	b29b      	uxth	r3, r3
 800756c:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	4413      	add	r3, r2
 8007574:	b29b      	uxth	r3, r3
 8007576:	b218      	sxth	r0, r3
 8007578:	88ba      	ldrh	r2, [r7, #4]
 800757a:	89bb      	ldrh	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	b29b      	uxth	r3, r3
 8007580:	b21b      	sxth	r3, r3
 8007582:	883a      	ldrh	r2, [r7, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	f7ff fc05 	bl	8006d94 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	89fb      	ldrh	r3, [r7, #14]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	b29b      	uxth	r3, r3
 8007592:	b218      	sxth	r0, r3
 8007594:	88ba      	ldrh	r2, [r7, #4]
 8007596:	89bb      	ldrh	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	b29b      	uxth	r3, r3
 800759c:	b21b      	sxth	r3, r3
 800759e:	883a      	ldrh	r2, [r7, #0]
 80075a0:	4619      	mov	r1, r3
 80075a2:	f7ff fbf7 	bl	8006d94 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	89fb      	ldrh	r3, [r7, #14]
 80075aa:	4413      	add	r3, r2
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	b218      	sxth	r0, r3
 80075b0:	88ba      	ldrh	r2, [r7, #4]
 80075b2:	89bb      	ldrh	r3, [r7, #12]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	b21b      	sxth	r3, r3
 80075ba:	883a      	ldrh	r2, [r7, #0]
 80075bc:	4619      	mov	r1, r3
 80075be:	f7ff fbe9 	bl	8006d94 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	89fb      	ldrh	r3, [r7, #14]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	b218      	sxth	r0, r3
 80075cc:	88ba      	ldrh	r2, [r7, #4]
 80075ce:	89bb      	ldrh	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	b21b      	sxth	r3, r3
 80075d6:	883a      	ldrh	r2, [r7, #0]
 80075d8:	4619      	mov	r1, r3
 80075da:	f7ff fbdb 	bl	8006d94 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 80075de:	88fa      	ldrh	r2, [r7, #6]
 80075e0:	89bb      	ldrh	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	b218      	sxth	r0, r3
 80075e8:	88ba      	ldrh	r2, [r7, #4]
 80075ea:	89fb      	ldrh	r3, [r7, #14]
 80075ec:	4413      	add	r3, r2
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	b21b      	sxth	r3, r3
 80075f2:	883a      	ldrh	r2, [r7, #0]
 80075f4:	4619      	mov	r1, r3
 80075f6:	f7ff fbcd 	bl	8006d94 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	89bb      	ldrh	r3, [r7, #12]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	b29b      	uxth	r3, r3
 8007602:	b218      	sxth	r0, r3
 8007604:	88ba      	ldrh	r2, [r7, #4]
 8007606:	89fb      	ldrh	r3, [r7, #14]
 8007608:	4413      	add	r3, r2
 800760a:	b29b      	uxth	r3, r3
 800760c:	b21b      	sxth	r3, r3
 800760e:	883a      	ldrh	r2, [r7, #0]
 8007610:	4619      	mov	r1, r3
 8007612:	f7ff fbbf 	bl	8006d94 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8007616:	88fa      	ldrh	r2, [r7, #6]
 8007618:	89bb      	ldrh	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	b29b      	uxth	r3, r3
 800761e:	b218      	sxth	r0, r3
 8007620:	88ba      	ldrh	r2, [r7, #4]
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	b29b      	uxth	r3, r3
 8007628:	b21b      	sxth	r3, r3
 800762a:	883a      	ldrh	r2, [r7, #0]
 800762c:	4619      	mov	r1, r3
 800762e:	f7ff fbb1 	bl	8006d94 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007632:	88fa      	ldrh	r2, [r7, #6]
 8007634:	89bb      	ldrh	r3, [r7, #12]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	b29b      	uxth	r3, r3
 800763a:	b218      	sxth	r0, r3
 800763c:	88ba      	ldrh	r2, [r7, #4]
 800763e:	89fb      	ldrh	r3, [r7, #14]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	b29b      	uxth	r3, r3
 8007644:	b21b      	sxth	r3, r3
 8007646:	883a      	ldrh	r2, [r7, #0]
 8007648:	4619      	mov	r1, r3
 800764a:	f7ff fba3 	bl	8006d94 <hagl_put_pixel>

    while (y >= x) {
 800764e:	e097      	b.n	8007780 <hagl_draw_circle+0x246>
        x++;
 8007650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007654:	b29b      	uxth	r3, r3
 8007656:	3301      	adds	r3, #1
 8007658:	b29b      	uxth	r3, r3
 800765a:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 800765c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dd14      	ble.n	800768e <hagl_draw_circle+0x154>
            y--;
 8007664:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007670:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007674:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	b29b      	uxth	r3, r3
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	b29a      	uxth	r2, r3
 8007680:	897b      	ldrh	r3, [r7, #10]
 8007682:	4413      	add	r3, r2
 8007684:	b29b      	uxth	r3, r3
 8007686:	330a      	adds	r3, #10
 8007688:	b29b      	uxth	r3, r3
 800768a:	817b      	strh	r3, [r7, #10]
 800768c:	e008      	b.n	80076a0 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 800768e:	89fb      	ldrh	r3, [r7, #14]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	b29a      	uxth	r2, r3
 8007694:	897b      	ldrh	r3, [r7, #10]
 8007696:	4413      	add	r3, r2
 8007698:	b29b      	uxth	r3, r3
 800769a:	3306      	adds	r3, #6
 800769c:	b29b      	uxth	r3, r3
 800769e:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 80076a0:	88fa      	ldrh	r2, [r7, #6]
 80076a2:	89fb      	ldrh	r3, [r7, #14]
 80076a4:	4413      	add	r3, r2
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	b218      	sxth	r0, r3
 80076aa:	88ba      	ldrh	r2, [r7, #4]
 80076ac:	89bb      	ldrh	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	883a      	ldrh	r2, [r7, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	f7ff fb6c 	bl	8006d94 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 80076bc:	88fa      	ldrh	r2, [r7, #6]
 80076be:	89fb      	ldrh	r3, [r7, #14]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	b218      	sxth	r0, r3
 80076c6:	88ba      	ldrh	r2, [r7, #4]
 80076c8:	89bb      	ldrh	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	b21b      	sxth	r3, r3
 80076d0:	883a      	ldrh	r2, [r7, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	f7ff fb5e 	bl	8006d94 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 80076d8:	88fa      	ldrh	r2, [r7, #6]
 80076da:	89fb      	ldrh	r3, [r7, #14]
 80076dc:	4413      	add	r3, r2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	b218      	sxth	r0, r3
 80076e2:	88ba      	ldrh	r2, [r7, #4]
 80076e4:	89bb      	ldrh	r3, [r7, #12]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	b21b      	sxth	r3, r3
 80076ec:	883a      	ldrh	r2, [r7, #0]
 80076ee:	4619      	mov	r1, r3
 80076f0:	f7ff fb50 	bl	8006d94 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	89fb      	ldrh	r3, [r7, #14]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	b218      	sxth	r0, r3
 80076fe:	88ba      	ldrh	r2, [r7, #4]
 8007700:	89bb      	ldrh	r3, [r7, #12]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	b29b      	uxth	r3, r3
 8007706:	b21b      	sxth	r3, r3
 8007708:	883a      	ldrh	r2, [r7, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	f7ff fb42 	bl	8006d94 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007710:	88fa      	ldrh	r2, [r7, #6]
 8007712:	89bb      	ldrh	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	b29b      	uxth	r3, r3
 8007718:	b218      	sxth	r0, r3
 800771a:	88ba      	ldrh	r2, [r7, #4]
 800771c:	89fb      	ldrh	r3, [r7, #14]
 800771e:	4413      	add	r3, r2
 8007720:	b29b      	uxth	r3, r3
 8007722:	b21b      	sxth	r3, r3
 8007724:	883a      	ldrh	r2, [r7, #0]
 8007726:	4619      	mov	r1, r3
 8007728:	f7ff fb34 	bl	8006d94 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 800772c:	88fa      	ldrh	r2, [r7, #6]
 800772e:	89bb      	ldrh	r3, [r7, #12]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	b29b      	uxth	r3, r3
 8007734:	b218      	sxth	r0, r3
 8007736:	88ba      	ldrh	r2, [r7, #4]
 8007738:	89fb      	ldrh	r3, [r7, #14]
 800773a:	4413      	add	r3, r2
 800773c:	b29b      	uxth	r3, r3
 800773e:	b21b      	sxth	r3, r3
 8007740:	883a      	ldrh	r2, [r7, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	f7ff fb26 	bl	8006d94 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8007748:	88fa      	ldrh	r2, [r7, #6]
 800774a:	89bb      	ldrh	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	b29b      	uxth	r3, r3
 8007750:	b218      	sxth	r0, r3
 8007752:	88ba      	ldrh	r2, [r7, #4]
 8007754:	89fb      	ldrh	r3, [r7, #14]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	b21b      	sxth	r3, r3
 800775c:	883a      	ldrh	r2, [r7, #0]
 800775e:	4619      	mov	r1, r3
 8007760:	f7ff fb18 	bl	8006d94 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	89bb      	ldrh	r3, [r7, #12]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	b29b      	uxth	r3, r3
 800776c:	b218      	sxth	r0, r3
 800776e:	88ba      	ldrh	r2, [r7, #4]
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	b29b      	uxth	r3, r3
 8007776:	b21b      	sxth	r3, r3
 8007778:	883a      	ldrh	r2, [r7, #0]
 800777a:	4619      	mov	r1, r3
 800777c:	f7ff fb0a 	bl	8006d94 <hagl_put_pixel>
    while (y >= x) {
 8007780:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007784:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007788:	429a      	cmp	r2, r3
 800778a:	f6bf af61 	bge.w	8007650 <hagl_draw_circle+0x116>
    }
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	bd90      	pop	{r4, r7, pc}

08007798 <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8007798:	b590      	push	{r4, r7, lr}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	4608      	mov	r0, r1
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	4623      	mov	r3, r4
 80077a8:	80fb      	strh	r3, [r7, #6]
 80077aa:	4603      	mov	r3, r0
 80077ac:	80bb      	strh	r3, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	807b      	strh	r3, [r7, #2]
 80077b2:	4613      	mov	r3, r2
 80077b4:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80077ba:	887b      	ldrh	r3, [r7, #2]
 80077bc:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80077be:	887b      	ldrh	r3, [r7, #2]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f1c3 0303 	rsb	r3, r3, #3
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 80077cc:	e067      	b.n	800789e <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 80077ce:	88fa      	ldrh	r2, [r7, #6]
 80077d0:	89fb      	ldrh	r3, [r7, #14]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	b218      	sxth	r0, r3
 80077d8:	88ba      	ldrh	r2, [r7, #4]
 80077da:	89bb      	ldrh	r3, [r7, #12]
 80077dc:	4413      	add	r3, r2
 80077de:	b29b      	uxth	r3, r3
 80077e0:	b219      	sxth	r1, r3
 80077e2:	89fb      	ldrh	r3, [r7, #14]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	883b      	ldrh	r3, [r7, #0]
 80077ea:	f7ff fb05 	bl	8006df8 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	89fb      	ldrh	r3, [r7, #14]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	b218      	sxth	r0, r3
 80077f8:	88ba      	ldrh	r2, [r7, #4]
 80077fa:	89bb      	ldrh	r3, [r7, #12]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	b29b      	uxth	r3, r3
 8007800:	b219      	sxth	r1, r3
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	883b      	ldrh	r3, [r7, #0]
 800780a:	f7ff faf5 	bl	8006df8 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	89bb      	ldrh	r3, [r7, #12]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	b29b      	uxth	r3, r3
 8007816:	b218      	sxth	r0, r3
 8007818:	88ba      	ldrh	r2, [r7, #4]
 800781a:	89fb      	ldrh	r3, [r7, #14]
 800781c:	4413      	add	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	b219      	sxth	r1, r3
 8007822:	89bb      	ldrh	r3, [r7, #12]
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	883b      	ldrh	r3, [r7, #0]
 800782a:	f7ff fae5 	bl	8006df8 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 800782e:	88fa      	ldrh	r2, [r7, #6]
 8007830:	89bb      	ldrh	r3, [r7, #12]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	b29b      	uxth	r3, r3
 8007836:	b218      	sxth	r0, r3
 8007838:	88ba      	ldrh	r2, [r7, #4]
 800783a:	89fb      	ldrh	r3, [r7, #14]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	b29b      	uxth	r3, r3
 8007840:	b219      	sxth	r1, r3
 8007842:	89bb      	ldrh	r3, [r7, #12]
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	883b      	ldrh	r3, [r7, #0]
 800784a:	f7ff fad5 	bl	8006df8 <hagl_draw_hline>
        x++;
 800784e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007852:	b29b      	uxth	r3, r3
 8007854:	3301      	adds	r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 800785a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800785e:	2b00      	cmp	r3, #0
 8007860:	dd14      	ble.n	800788c <hagl_fill_circle+0xf4>
            y--;
 8007862:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29b      	uxth	r3, r3
 800786c:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 800786e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007872:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	b29b      	uxth	r3, r3
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	b29a      	uxth	r2, r3
 800787e:	897b      	ldrh	r3, [r7, #10]
 8007880:	4413      	add	r3, r2
 8007882:	b29b      	uxth	r3, r3
 8007884:	330a      	adds	r3, #10
 8007886:	b29b      	uxth	r3, r3
 8007888:	817b      	strh	r3, [r7, #10]
 800788a:	e008      	b.n	800789e <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 800788c:	89fb      	ldrh	r3, [r7, #14]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	b29a      	uxth	r2, r3
 8007892:	897b      	ldrh	r3, [r7, #10]
 8007894:	4413      	add	r3, r2
 8007896:	b29b      	uxth	r3, r3
 8007898:	3306      	adds	r3, #6
 800789a:	b29b      	uxth	r3, r3
 800789c:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 800789e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80078a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	da91      	bge.n	80077ce <hagl_fill_circle+0x36>
        }
    }
}
 80078aa:	bf00      	nop
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd90      	pop	{r4, r7, pc}

080078b4 <hagl_draw_polygon>:
        hagl_draw_hline(x0 - wx, y0 + wy, wx * 2, color);
    }
}


void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	80fb      	strh	r3, [r7, #6]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 80078c4:	2300      	movs	r3, #0
 80078c6:	81fb      	strh	r3, [r7, #14]
 80078c8:	e02a      	b.n	8007920 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 80078ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	4413      	add	r3, r2
        hagl_draw_line(
 80078d4:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 80078d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	3302      	adds	r3, #2
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	4413      	add	r3, r2
        hagl_draw_line(
 80078e4:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 80078e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078ec:	3301      	adds	r3, #1
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	4413      	add	r3, r2
        hagl_draw_line(
 80078f4:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 80078f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	3306      	adds	r3, #6
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	4413      	add	r3, r2
        hagl_draw_line(
 8007904:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007908:	88bb      	ldrh	r3, [r7, #4]
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	4613      	mov	r3, r2
 800790e:	4622      	mov	r2, r4
 8007910:	f7ff fab8 	bl	8006e84 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007914:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007918:	b29b      	uxth	r3, r3
 800791a:	3301      	adds	r3, #1
 800791c:	b29b      	uxth	r3, r3
 800791e:	81fb      	strh	r3, [r7, #14]
 8007920:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007928:	3b01      	subs	r3, #1
 800792a:	429a      	cmp	r2, r3
 800792c:	dbcd      	blt.n	80078ca <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	3302      	adds	r3, #2
    hagl_draw_line(
 8007938:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 800793c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007944:	3b01      	subs	r3, #1
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	4413      	add	r3, r2
    hagl_draw_line(
 800794c:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	3b02      	subs	r3, #2
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	4413      	add	r3, r2
    hagl_draw_line(
 800795c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007960:	88bb      	ldrh	r3, [r7, #4]
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	4622      	mov	r2, r4
 8007968:	f7ff fa8c 	bl	8006e84 <hagl_draw_line>
        color
    );
}
 800796c:	bf00      	nop
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	bd90      	pop	{r4, r7, pc}

08007974 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007974:	b580      	push	{r7, lr}
 8007976:	b0ac      	sub	sp, #176	@ 0xb0
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	6039      	str	r1, [r7, #0]
 800797e:	80fb      	strh	r3, [r7, #6]
 8007980:	4613      	mov	r3, r2
 8007982:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007984:	2380      	movs	r3, #128	@ 0x80
 8007986:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007990:	2300      	movs	r3, #0
 8007992:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007996:	e02e      	b.n	80079f6 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007998:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	3302      	adds	r3, #2
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079a8:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 80079ac:	429a      	cmp	r2, r3
 80079ae:	dd08      	ble.n	80079c2 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 80079b0:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	3302      	adds	r3, #2
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 80079c2:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	3302      	adds	r3, #2
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4413      	add	r3, r2
 80079ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079d2:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 80079d6:	429a      	cmp	r2, r3
 80079d8:	da08      	bge.n	80079ec <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 80079da:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	3302      	adds	r3, #2
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 80079ec:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80079f0:	3301      	adds	r3, #1
 80079f2:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80079f6:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 80079fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	dbca      	blt.n	8007998 <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007a02:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007a06:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007a0a:	e144      	b.n	8007c96 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007a22:	e0a6      	b.n	8007b72 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007a24:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a3a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007a3e:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	3302      	adds	r3, #2
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a56:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007a5a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	4413      	add	r3, r2
 8007a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a70:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007a74:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	3302      	adds	r3, #2
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a8c:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007a90:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007a9c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa8:	d50c      	bpl.n	8007ac4 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007aaa:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	da19      	bge.n	8007af8 <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007ac4:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007ad0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007adc:	d53e      	bpl.n	8007b5c <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007ade:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aea:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007aee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af6:	db31      	blt.n	8007b5c <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007af8:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007afc:	ee07 3a90 	vmov	s15, r3
 8007b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b04:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007b08:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b0c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007b10:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1c:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007b20:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007b24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b2c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b38:	ee17 3a90 	vmov	r3, s15
 8007b3c:	b21a      	sxth	r2, r3
 8007b3e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007b42:	b292      	uxth	r2, r2
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	33b0      	adds	r3, #176	@ 0xb0
 8007b48:	443b      	add	r3, r7
 8007b4a:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007b4e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3301      	adds	r3, #1
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007b5c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007b60:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007b64:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007b72:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	f6ff af52 	blt.w	8007a24 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007b86:	e046      	b.n	8007c16 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007b88:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	33b0      	adds	r3, #176	@ 0xb0
 8007b90:	443b      	add	r3, r7
 8007b92:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007b96:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	33b0      	adds	r3, #176	@ 0xb0
 8007ba0:	443b      	add	r3, r7
 8007ba2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d92e      	bls.n	8007c08 <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007baa:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	33b0      	adds	r3, #176	@ 0xb0
 8007bb2:	443b      	add	r3, r7
 8007bb4:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007bb8:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007bbc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	33b0      	adds	r3, #176	@ 0xb0
 8007bca:	443b      	add	r3, r7
 8007bcc:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007bd0:	0053      	lsls	r3, r2, #1
 8007bd2:	33b0      	adds	r3, #176	@ 0xb0
 8007bd4:	443b      	add	r3, r7
 8007bd6:	460a      	mov	r2, r1
 8007bd8:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007bdc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007be0:	3301      	adds	r3, #1
 8007be2:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	33b0      	adds	r3, #176	@ 0xb0
 8007bea:	443b      	add	r3, r7
 8007bec:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007bf0:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00e      	beq.n	8007c16 <hagl_fill_polygon+0x2a2>
                    i--;
 8007bf8:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007c06:	e006      	b.n	8007c16 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007c08:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3301      	adds	r3, #1
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007c16:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007c1a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	429a      	cmp	r2, r3
 8007c22:	dbb1      	blt.n	8007b88 <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007c24:	2300      	movs	r3, #0
 8007c26:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007c2a:	e027      	b.n	8007c7c <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007c2c:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007c30:	3301      	adds	r3, #1
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	33b0      	adds	r3, #176	@ 0xb0
 8007c36:	443b      	add	r3, r7
 8007c38:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007c3c:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	33b0      	adds	r3, #176	@ 0xb0
 8007c44:	443b      	add	r3, r7
 8007c46:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007c52:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	33b0      	adds	r3, #176	@ 0xb0
 8007c5a:	443b      	add	r3, r7
 8007c5c:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007c60:	b218      	sxth	r0, r3
 8007c62:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007c66:	88bb      	ldrh	r3, [r7, #4]
 8007c68:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007c6c:	f7ff f8c4 	bl	8006df8 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007c70:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007c74:	3302      	adds	r3, #2
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007c7c:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007c80:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007c84:	429a      	cmp	r2, r3
 8007c86:	dbd1      	blt.n	8007c2c <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007c88:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3301      	adds	r3, #1
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007c96:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007c9a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	f6ff aeb4 	blt.w	8007a0c <hagl_fill_polygon+0x98>
        }
    }
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	37b0      	adds	r7, #176	@ 0xb0
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007cae:	b590      	push	{r4, r7, lr}
 8007cb0:	b087      	sub	sp, #28
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	4611      	mov	r1, r2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	80fb      	strh	r3, [r7, #6]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	80bb      	strh	r3, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	807b      	strh	r3, [r7, #2]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	81bb      	strh	r3, [r7, #12]
 8007cd0:	88bb      	ldrh	r3, [r7, #4]
 8007cd2:	81fb      	strh	r3, [r7, #14]
 8007cd4:	887b      	ldrh	r3, [r7, #2]
 8007cd6:	823b      	strh	r3, [r7, #16]
 8007cd8:	883b      	ldrh	r3, [r7, #0]
 8007cda:	827b      	strh	r3, [r7, #18]
 8007cdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007cde:	82bb      	strh	r3, [r7, #20]
 8007ce0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007ce2:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007ce4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007ce6:	f107 030c 	add.w	r3, r7, #12
 8007cea:	4619      	mov	r1, r3
 8007cec:	2003      	movs	r0, #3
 8007cee:	f7ff fde1 	bl	80078b4 <hagl_draw_polygon>
};
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}

08007cfa <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007cfa:	b590      	push	{r4, r7, lr}
 8007cfc:	b087      	sub	sp, #28
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	4604      	mov	r4, r0
 8007d02:	4608      	mov	r0, r1
 8007d04:	4611      	mov	r1, r2
 8007d06:	461a      	mov	r2, r3
 8007d08:	4623      	mov	r3, r4
 8007d0a:	80fb      	strh	r3, [r7, #6]
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	80bb      	strh	r3, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	807b      	strh	r3, [r7, #2]
 8007d14:	4613      	mov	r3, r2
 8007d16:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	81bb      	strh	r3, [r7, #12]
 8007d1c:	88bb      	ldrh	r3, [r7, #4]
 8007d1e:	81fb      	strh	r3, [r7, #14]
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	823b      	strh	r3, [r7, #16]
 8007d24:	883b      	ldrh	r3, [r7, #0]
 8007d26:	827b      	strh	r3, [r7, #18]
 8007d28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d2a:	82bb      	strh	r3, [r7, #20]
 8007d2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d2e:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007d30:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007d32:	f107 030c 	add.w	r3, r7, #12
 8007d36:	4619      	mov	r1, r3
 8007d38:	2003      	movs	r0, #3
 8007d3a:	f7ff fe1b 	bl	8007974 <hagl_fill_polygon>
}
 8007d3e:	bf00      	nop
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}

08007d46 <atoi>:
 8007d46:	220a      	movs	r2, #10
 8007d48:	2100      	movs	r1, #0
 8007d4a:	f000 b939 	b.w	8007fc0 <strtol>
	...

08007d50 <malloc>:
 8007d50:	4b02      	ldr	r3, [pc, #8]	@ (8007d5c <malloc+0xc>)
 8007d52:	4601      	mov	r1, r0
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	f000 b82d 	b.w	8007db4 <_malloc_r>
 8007d5a:	bf00      	nop
 8007d5c:	20000220 	.word	0x20000220

08007d60 <free>:
 8007d60:	4b02      	ldr	r3, [pc, #8]	@ (8007d6c <free+0xc>)
 8007d62:	4601      	mov	r1, r0
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	f000 bd23 	b.w	80087b0 <_free_r>
 8007d6a:	bf00      	nop
 8007d6c:	20000220 	.word	0x20000220

08007d70 <sbrk_aligned>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4e0f      	ldr	r6, [pc, #60]	@ (8007db0 <sbrk_aligned+0x40>)
 8007d74:	460c      	mov	r4, r1
 8007d76:	6831      	ldr	r1, [r6, #0]
 8007d78:	4605      	mov	r5, r0
 8007d7a:	b911      	cbnz	r1, 8007d82 <sbrk_aligned+0x12>
 8007d7c:	f000 fc9c 	bl	80086b8 <_sbrk_r>
 8007d80:	6030      	str	r0, [r6, #0]
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 fc97 	bl	80086b8 <_sbrk_r>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	d103      	bne.n	8007d96 <sbrk_aligned+0x26>
 8007d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8007d92:	4620      	mov	r0, r4
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	1cc4      	adds	r4, r0, #3
 8007d98:	f024 0403 	bic.w	r4, r4, #3
 8007d9c:	42a0      	cmp	r0, r4
 8007d9e:	d0f8      	beq.n	8007d92 <sbrk_aligned+0x22>
 8007da0:	1a21      	subs	r1, r4, r0
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fc88 	bl	80086b8 <_sbrk_r>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d1f2      	bne.n	8007d92 <sbrk_aligned+0x22>
 8007dac:	e7ef      	b.n	8007d8e <sbrk_aligned+0x1e>
 8007dae:	bf00      	nop
 8007db0:	20014e8c 	.word	0x20014e8c

08007db4 <_malloc_r>:
 8007db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db8:	1ccd      	adds	r5, r1, #3
 8007dba:	f025 0503 	bic.w	r5, r5, #3
 8007dbe:	3508      	adds	r5, #8
 8007dc0:	2d0c      	cmp	r5, #12
 8007dc2:	bf38      	it	cc
 8007dc4:	250c      	movcc	r5, #12
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	4606      	mov	r6, r0
 8007dca:	db01      	blt.n	8007dd0 <_malloc_r+0x1c>
 8007dcc:	42a9      	cmp	r1, r5
 8007dce:	d904      	bls.n	8007dda <_malloc_r+0x26>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007eb0 <_malloc_r+0xfc>
 8007dde:	f000 f869 	bl	8007eb4 <__malloc_lock>
 8007de2:	f8d8 3000 	ldr.w	r3, [r8]
 8007de6:	461c      	mov	r4, r3
 8007de8:	bb44      	cbnz	r4, 8007e3c <_malloc_r+0x88>
 8007dea:	4629      	mov	r1, r5
 8007dec:	4630      	mov	r0, r6
 8007dee:	f7ff ffbf 	bl	8007d70 <sbrk_aligned>
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	4604      	mov	r4, r0
 8007df6:	d158      	bne.n	8007eaa <_malloc_r+0xf6>
 8007df8:	f8d8 4000 	ldr.w	r4, [r8]
 8007dfc:	4627      	mov	r7, r4
 8007dfe:	2f00      	cmp	r7, #0
 8007e00:	d143      	bne.n	8007e8a <_malloc_r+0xd6>
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	d04b      	beq.n	8007e9e <_malloc_r+0xea>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	4639      	mov	r1, r7
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	eb04 0903 	add.w	r9, r4, r3
 8007e10:	f000 fc52 	bl	80086b8 <_sbrk_r>
 8007e14:	4581      	cmp	r9, r0
 8007e16:	d142      	bne.n	8007e9e <_malloc_r+0xea>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	1a6d      	subs	r5, r5, r1
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7ff ffa6 	bl	8007d70 <sbrk_aligned>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d03a      	beq.n	8007e9e <_malloc_r+0xea>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	442b      	add	r3, r5
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	bb62      	cbnz	r2, 8007e90 <_malloc_r+0xdc>
 8007e36:	f8c8 7000 	str.w	r7, [r8]
 8007e3a:	e00f      	b.n	8007e5c <_malloc_r+0xa8>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	1b52      	subs	r2, r2, r5
 8007e40:	d420      	bmi.n	8007e84 <_malloc_r+0xd0>
 8007e42:	2a0b      	cmp	r2, #11
 8007e44:	d917      	bls.n	8007e76 <_malloc_r+0xc2>
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	6025      	str	r5, [r4, #0]
 8007e4c:	bf18      	it	ne
 8007e4e:	6059      	strne	r1, [r3, #4]
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	bf08      	it	eq
 8007e54:	f8c8 1000 	streq.w	r1, [r8]
 8007e58:	5162      	str	r2, [r4, r5]
 8007e5a:	604b      	str	r3, [r1, #4]
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 f82f 	bl	8007ec0 <__malloc_unlock>
 8007e62:	f104 000b 	add.w	r0, r4, #11
 8007e66:	1d23      	adds	r3, r4, #4
 8007e68:	f020 0007 	bic.w	r0, r0, #7
 8007e6c:	1ac2      	subs	r2, r0, r3
 8007e6e:	bf1c      	itt	ne
 8007e70:	1a1b      	subne	r3, r3, r0
 8007e72:	50a3      	strne	r3, [r4, r2]
 8007e74:	e7af      	b.n	8007dd6 <_malloc_r+0x22>
 8007e76:	6862      	ldr	r2, [r4, #4]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	bf0c      	ite	eq
 8007e7c:	f8c8 2000 	streq.w	r2, [r8]
 8007e80:	605a      	strne	r2, [r3, #4]
 8007e82:	e7eb      	b.n	8007e5c <_malloc_r+0xa8>
 8007e84:	4623      	mov	r3, r4
 8007e86:	6864      	ldr	r4, [r4, #4]
 8007e88:	e7ae      	b.n	8007de8 <_malloc_r+0x34>
 8007e8a:	463c      	mov	r4, r7
 8007e8c:	687f      	ldr	r7, [r7, #4]
 8007e8e:	e7b6      	b.n	8007dfe <_malloc_r+0x4a>
 8007e90:	461a      	mov	r2, r3
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d1fb      	bne.n	8007e90 <_malloc_r+0xdc>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	6053      	str	r3, [r2, #4]
 8007e9c:	e7de      	b.n	8007e5c <_malloc_r+0xa8>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	6033      	str	r3, [r6, #0]
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f000 f80c 	bl	8007ec0 <__malloc_unlock>
 8007ea8:	e794      	b.n	8007dd4 <_malloc_r+0x20>
 8007eaa:	6005      	str	r5, [r0, #0]
 8007eac:	e7d6      	b.n	8007e5c <_malloc_r+0xa8>
 8007eae:	bf00      	nop
 8007eb0:	20014e90 	.word	0x20014e90

08007eb4 <__malloc_lock>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	@ (8007ebc <__malloc_lock+0x8>)
 8007eb6:	f000 bc4c 	b.w	8008752 <__retarget_lock_acquire_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20014fd4 	.word	0x20014fd4

08007ec0 <__malloc_unlock>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	@ (8007ec8 <__malloc_unlock+0x8>)
 8007ec2:	f000 bc47 	b.w	8008754 <__retarget_lock_release_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20014fd4 	.word	0x20014fd4

08007ecc <_strtol_l.constprop.0>:
 8007ecc:	2b24      	cmp	r3, #36	@ 0x24
 8007ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed2:	4686      	mov	lr, r0
 8007ed4:	4690      	mov	r8, r2
 8007ed6:	d801      	bhi.n	8007edc <_strtol_l.constprop.0+0x10>
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d106      	bne.n	8007eea <_strtol_l.constprop.0+0x1e>
 8007edc:	f000 fc0e 	bl	80086fc <__errno>
 8007ee0:	2316      	movs	r3, #22
 8007ee2:	6003      	str	r3, [r0, #0]
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eea:	4834      	ldr	r0, [pc, #208]	@ (8007fbc <_strtol_l.constprop.0+0xf0>)
 8007eec:	460d      	mov	r5, r1
 8007eee:	462a      	mov	r2, r5
 8007ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ef4:	5d06      	ldrb	r6, [r0, r4]
 8007ef6:	f016 0608 	ands.w	r6, r6, #8
 8007efa:	d1f8      	bne.n	8007eee <_strtol_l.constprop.0+0x22>
 8007efc:	2c2d      	cmp	r4, #45	@ 0x2d
 8007efe:	d12d      	bne.n	8007f5c <_strtol_l.constprop.0+0x90>
 8007f00:	782c      	ldrb	r4, [r5, #0]
 8007f02:	2601      	movs	r6, #1
 8007f04:	1c95      	adds	r5, r2, #2
 8007f06:	f033 0210 	bics.w	r2, r3, #16
 8007f0a:	d109      	bne.n	8007f20 <_strtol_l.constprop.0+0x54>
 8007f0c:	2c30      	cmp	r4, #48	@ 0x30
 8007f0e:	d12a      	bne.n	8007f66 <_strtol_l.constprop.0+0x9a>
 8007f10:	782a      	ldrb	r2, [r5, #0]
 8007f12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f16:	2a58      	cmp	r2, #88	@ 0x58
 8007f18:	d125      	bne.n	8007f66 <_strtol_l.constprop.0+0x9a>
 8007f1a:	786c      	ldrb	r4, [r5, #1]
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	3502      	adds	r5, #2
 8007f20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f28:	2200      	movs	r2, #0
 8007f2a:	fbbc f9f3 	udiv	r9, ip, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f38:	2f09      	cmp	r7, #9
 8007f3a:	d81b      	bhi.n	8007f74 <_strtol_l.constprop.0+0xa8>
 8007f3c:	463c      	mov	r4, r7
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	dd27      	ble.n	8007f92 <_strtol_l.constprop.0+0xc6>
 8007f42:	1c57      	adds	r7, r2, #1
 8007f44:	d007      	beq.n	8007f56 <_strtol_l.constprop.0+0x8a>
 8007f46:	4581      	cmp	r9, r0
 8007f48:	d320      	bcc.n	8007f8c <_strtol_l.constprop.0+0xc0>
 8007f4a:	d101      	bne.n	8007f50 <_strtol_l.constprop.0+0x84>
 8007f4c:	45a2      	cmp	sl, r4
 8007f4e:	db1d      	blt.n	8007f8c <_strtol_l.constprop.0+0xc0>
 8007f50:	fb00 4003 	mla	r0, r0, r3, r4
 8007f54:	2201      	movs	r2, #1
 8007f56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f5a:	e7eb      	b.n	8007f34 <_strtol_l.constprop.0+0x68>
 8007f5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f5e:	bf04      	itt	eq
 8007f60:	782c      	ldrbeq	r4, [r5, #0]
 8007f62:	1c95      	addeq	r5, r2, #2
 8007f64:	e7cf      	b.n	8007f06 <_strtol_l.constprop.0+0x3a>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1da      	bne.n	8007f20 <_strtol_l.constprop.0+0x54>
 8007f6a:	2c30      	cmp	r4, #48	@ 0x30
 8007f6c:	bf0c      	ite	eq
 8007f6e:	2308      	moveq	r3, #8
 8007f70:	230a      	movne	r3, #10
 8007f72:	e7d5      	b.n	8007f20 <_strtol_l.constprop.0+0x54>
 8007f74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f78:	2f19      	cmp	r7, #25
 8007f7a:	d801      	bhi.n	8007f80 <_strtol_l.constprop.0+0xb4>
 8007f7c:	3c37      	subs	r4, #55	@ 0x37
 8007f7e:	e7de      	b.n	8007f3e <_strtol_l.constprop.0+0x72>
 8007f80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f84:	2f19      	cmp	r7, #25
 8007f86:	d804      	bhi.n	8007f92 <_strtol_l.constprop.0+0xc6>
 8007f88:	3c57      	subs	r4, #87	@ 0x57
 8007f8a:	e7d8      	b.n	8007f3e <_strtol_l.constprop.0+0x72>
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	e7e1      	b.n	8007f56 <_strtol_l.constprop.0+0x8a>
 8007f92:	1c53      	adds	r3, r2, #1
 8007f94:	d108      	bne.n	8007fa8 <_strtol_l.constprop.0+0xdc>
 8007f96:	2322      	movs	r3, #34	@ 0x22
 8007f98:	f8ce 3000 	str.w	r3, [lr]
 8007f9c:	4660      	mov	r0, ip
 8007f9e:	f1b8 0f00 	cmp.w	r8, #0
 8007fa2:	d0a0      	beq.n	8007ee6 <_strtol_l.constprop.0+0x1a>
 8007fa4:	1e69      	subs	r1, r5, #1
 8007fa6:	e006      	b.n	8007fb6 <_strtol_l.constprop.0+0xea>
 8007fa8:	b106      	cbz	r6, 8007fac <_strtol_l.constprop.0+0xe0>
 8007faa:	4240      	negs	r0, r0
 8007fac:	f1b8 0f00 	cmp.w	r8, #0
 8007fb0:	d099      	beq.n	8007ee6 <_strtol_l.constprop.0+0x1a>
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	d1f6      	bne.n	8007fa4 <_strtol_l.constprop.0+0xd8>
 8007fb6:	f8c8 1000 	str.w	r1, [r8]
 8007fba:	e794      	b.n	8007ee6 <_strtol_l.constprop.0+0x1a>
 8007fbc:	08012991 	.word	0x08012991

08007fc0 <strtol>:
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4802      	ldr	r0, [pc, #8]	@ (8007fd0 <strtol+0x10>)
 8007fc8:	6800      	ldr	r0, [r0, #0]
 8007fca:	f7ff bf7f 	b.w	8007ecc <_strtol_l.constprop.0>
 8007fce:	bf00      	nop
 8007fd0:	20000220 	.word	0x20000220

08007fd4 <_strtoul_l.constprop.0>:
 8007fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fd8:	4e34      	ldr	r6, [pc, #208]	@ (80080ac <_strtoul_l.constprop.0+0xd8>)
 8007fda:	4686      	mov	lr, r0
 8007fdc:	460d      	mov	r5, r1
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fe4:	5d37      	ldrb	r7, [r6, r4]
 8007fe6:	f017 0708 	ands.w	r7, r7, #8
 8007fea:	d1f8      	bne.n	8007fde <_strtoul_l.constprop.0+0xa>
 8007fec:	2c2d      	cmp	r4, #45	@ 0x2d
 8007fee:	d12f      	bne.n	8008050 <_strtoul_l.constprop.0+0x7c>
 8007ff0:	782c      	ldrb	r4, [r5, #0]
 8007ff2:	2701      	movs	r7, #1
 8007ff4:	1c85      	adds	r5, r0, #2
 8007ff6:	f033 0010 	bics.w	r0, r3, #16
 8007ffa:	d109      	bne.n	8008010 <_strtoul_l.constprop.0+0x3c>
 8007ffc:	2c30      	cmp	r4, #48	@ 0x30
 8007ffe:	d12c      	bne.n	800805a <_strtoul_l.constprop.0+0x86>
 8008000:	7828      	ldrb	r0, [r5, #0]
 8008002:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008006:	2858      	cmp	r0, #88	@ 0x58
 8008008:	d127      	bne.n	800805a <_strtoul_l.constprop.0+0x86>
 800800a:	786c      	ldrb	r4, [r5, #1]
 800800c:	2310      	movs	r3, #16
 800800e:	3502      	adds	r5, #2
 8008010:	f04f 38ff 	mov.w	r8, #4294967295
 8008014:	2600      	movs	r6, #0
 8008016:	fbb8 f8f3 	udiv	r8, r8, r3
 800801a:	fb03 f908 	mul.w	r9, r3, r8
 800801e:	ea6f 0909 	mvn.w	r9, r9
 8008022:	4630      	mov	r0, r6
 8008024:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008028:	f1bc 0f09 	cmp.w	ip, #9
 800802c:	d81c      	bhi.n	8008068 <_strtoul_l.constprop.0+0x94>
 800802e:	4664      	mov	r4, ip
 8008030:	42a3      	cmp	r3, r4
 8008032:	dd2a      	ble.n	800808a <_strtoul_l.constprop.0+0xb6>
 8008034:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008038:	d007      	beq.n	800804a <_strtoul_l.constprop.0+0x76>
 800803a:	4580      	cmp	r8, r0
 800803c:	d322      	bcc.n	8008084 <_strtoul_l.constprop.0+0xb0>
 800803e:	d101      	bne.n	8008044 <_strtoul_l.constprop.0+0x70>
 8008040:	45a1      	cmp	r9, r4
 8008042:	db1f      	blt.n	8008084 <_strtoul_l.constprop.0+0xb0>
 8008044:	fb00 4003 	mla	r0, r0, r3, r4
 8008048:	2601      	movs	r6, #1
 800804a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800804e:	e7e9      	b.n	8008024 <_strtoul_l.constprop.0+0x50>
 8008050:	2c2b      	cmp	r4, #43	@ 0x2b
 8008052:	bf04      	itt	eq
 8008054:	782c      	ldrbeq	r4, [r5, #0]
 8008056:	1c85      	addeq	r5, r0, #2
 8008058:	e7cd      	b.n	8007ff6 <_strtoul_l.constprop.0+0x22>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1d8      	bne.n	8008010 <_strtoul_l.constprop.0+0x3c>
 800805e:	2c30      	cmp	r4, #48	@ 0x30
 8008060:	bf0c      	ite	eq
 8008062:	2308      	moveq	r3, #8
 8008064:	230a      	movne	r3, #10
 8008066:	e7d3      	b.n	8008010 <_strtoul_l.constprop.0+0x3c>
 8008068:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800806c:	f1bc 0f19 	cmp.w	ip, #25
 8008070:	d801      	bhi.n	8008076 <_strtoul_l.constprop.0+0xa2>
 8008072:	3c37      	subs	r4, #55	@ 0x37
 8008074:	e7dc      	b.n	8008030 <_strtoul_l.constprop.0+0x5c>
 8008076:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800807a:	f1bc 0f19 	cmp.w	ip, #25
 800807e:	d804      	bhi.n	800808a <_strtoul_l.constprop.0+0xb6>
 8008080:	3c57      	subs	r4, #87	@ 0x57
 8008082:	e7d5      	b.n	8008030 <_strtoul_l.constprop.0+0x5c>
 8008084:	f04f 36ff 	mov.w	r6, #4294967295
 8008088:	e7df      	b.n	800804a <_strtoul_l.constprop.0+0x76>
 800808a:	1c73      	adds	r3, r6, #1
 800808c:	d106      	bne.n	800809c <_strtoul_l.constprop.0+0xc8>
 800808e:	2322      	movs	r3, #34	@ 0x22
 8008090:	f8ce 3000 	str.w	r3, [lr]
 8008094:	4630      	mov	r0, r6
 8008096:	b932      	cbnz	r2, 80080a6 <_strtoul_l.constprop.0+0xd2>
 8008098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800809c:	b107      	cbz	r7, 80080a0 <_strtoul_l.constprop.0+0xcc>
 800809e:	4240      	negs	r0, r0
 80080a0:	2a00      	cmp	r2, #0
 80080a2:	d0f9      	beq.n	8008098 <_strtoul_l.constprop.0+0xc4>
 80080a4:	b106      	cbz	r6, 80080a8 <_strtoul_l.constprop.0+0xd4>
 80080a6:	1e69      	subs	r1, r5, #1
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	e7f5      	b.n	8008098 <_strtoul_l.constprop.0+0xc4>
 80080ac:	08012991 	.word	0x08012991

080080b0 <strtoul>:
 80080b0:	4613      	mov	r3, r2
 80080b2:	460a      	mov	r2, r1
 80080b4:	4601      	mov	r1, r0
 80080b6:	4802      	ldr	r0, [pc, #8]	@ (80080c0 <strtoul+0x10>)
 80080b8:	6800      	ldr	r0, [r0, #0]
 80080ba:	f7ff bf8b 	b.w	8007fd4 <_strtoul_l.constprop.0>
 80080be:	bf00      	nop
 80080c0:	20000220 	.word	0x20000220

080080c4 <__sflush_r>:
 80080c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080cc:	0716      	lsls	r6, r2, #28
 80080ce:	4605      	mov	r5, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	d454      	bmi.n	800817e <__sflush_r+0xba>
 80080d4:	684b      	ldr	r3, [r1, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dc02      	bgt.n	80080e0 <__sflush_r+0x1c>
 80080da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd48      	ble.n	8008172 <__sflush_r+0xae>
 80080e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	d045      	beq.n	8008172 <__sflush_r+0xae>
 80080e6:	2300      	movs	r3, #0
 80080e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080ec:	682f      	ldr	r7, [r5, #0]
 80080ee:	6a21      	ldr	r1, [r4, #32]
 80080f0:	602b      	str	r3, [r5, #0]
 80080f2:	d030      	beq.n	8008156 <__sflush_r+0x92>
 80080f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	0759      	lsls	r1, r3, #29
 80080fa:	d505      	bpl.n	8008108 <__sflush_r+0x44>
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008102:	b10b      	cbz	r3, 8008108 <__sflush_r+0x44>
 8008104:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	2300      	movs	r3, #0
 800810a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800810c:	6a21      	ldr	r1, [r4, #32]
 800810e:	4628      	mov	r0, r5
 8008110:	47b0      	blx	r6
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	d106      	bne.n	8008126 <__sflush_r+0x62>
 8008118:	6829      	ldr	r1, [r5, #0]
 800811a:	291d      	cmp	r1, #29
 800811c:	d82b      	bhi.n	8008176 <__sflush_r+0xb2>
 800811e:	4a2a      	ldr	r2, [pc, #168]	@ (80081c8 <__sflush_r+0x104>)
 8008120:	410a      	asrs	r2, r1
 8008122:	07d6      	lsls	r6, r2, #31
 8008124:	d427      	bmi.n	8008176 <__sflush_r+0xb2>
 8008126:	2200      	movs	r2, #0
 8008128:	6062      	str	r2, [r4, #4]
 800812a:	04d9      	lsls	r1, r3, #19
 800812c:	6922      	ldr	r2, [r4, #16]
 800812e:	6022      	str	r2, [r4, #0]
 8008130:	d504      	bpl.n	800813c <__sflush_r+0x78>
 8008132:	1c42      	adds	r2, r0, #1
 8008134:	d101      	bne.n	800813a <__sflush_r+0x76>
 8008136:	682b      	ldr	r3, [r5, #0]
 8008138:	b903      	cbnz	r3, 800813c <__sflush_r+0x78>
 800813a:	6560      	str	r0, [r4, #84]	@ 0x54
 800813c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800813e:	602f      	str	r7, [r5, #0]
 8008140:	b1b9      	cbz	r1, 8008172 <__sflush_r+0xae>
 8008142:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008146:	4299      	cmp	r1, r3
 8008148:	d002      	beq.n	8008150 <__sflush_r+0x8c>
 800814a:	4628      	mov	r0, r5
 800814c:	f000 fb30 	bl	80087b0 <_free_r>
 8008150:	2300      	movs	r3, #0
 8008152:	6363      	str	r3, [r4, #52]	@ 0x34
 8008154:	e00d      	b.n	8008172 <__sflush_r+0xae>
 8008156:	2301      	movs	r3, #1
 8008158:	4628      	mov	r0, r5
 800815a:	47b0      	blx	r6
 800815c:	4602      	mov	r2, r0
 800815e:	1c50      	adds	r0, r2, #1
 8008160:	d1c9      	bne.n	80080f6 <__sflush_r+0x32>
 8008162:	682b      	ldr	r3, [r5, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0c6      	beq.n	80080f6 <__sflush_r+0x32>
 8008168:	2b1d      	cmp	r3, #29
 800816a:	d001      	beq.n	8008170 <__sflush_r+0xac>
 800816c:	2b16      	cmp	r3, #22
 800816e:	d11e      	bne.n	80081ae <__sflush_r+0xea>
 8008170:	602f      	str	r7, [r5, #0]
 8008172:	2000      	movs	r0, #0
 8008174:	e022      	b.n	80081bc <__sflush_r+0xf8>
 8008176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800817a:	b21b      	sxth	r3, r3
 800817c:	e01b      	b.n	80081b6 <__sflush_r+0xf2>
 800817e:	690f      	ldr	r7, [r1, #16]
 8008180:	2f00      	cmp	r7, #0
 8008182:	d0f6      	beq.n	8008172 <__sflush_r+0xae>
 8008184:	0793      	lsls	r3, r2, #30
 8008186:	680e      	ldr	r6, [r1, #0]
 8008188:	bf08      	it	eq
 800818a:	694b      	ldreq	r3, [r1, #20]
 800818c:	600f      	str	r7, [r1, #0]
 800818e:	bf18      	it	ne
 8008190:	2300      	movne	r3, #0
 8008192:	eba6 0807 	sub.w	r8, r6, r7
 8008196:	608b      	str	r3, [r1, #8]
 8008198:	f1b8 0f00 	cmp.w	r8, #0
 800819c:	dde9      	ble.n	8008172 <__sflush_r+0xae>
 800819e:	6a21      	ldr	r1, [r4, #32]
 80081a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80081a2:	4643      	mov	r3, r8
 80081a4:	463a      	mov	r2, r7
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b0      	blx	r6
 80081aa:	2800      	cmp	r0, #0
 80081ac:	dc08      	bgt.n	80081c0 <__sflush_r+0xfc>
 80081ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b6:	81a3      	strh	r3, [r4, #12]
 80081b8:	f04f 30ff 	mov.w	r0, #4294967295
 80081bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c0:	4407      	add	r7, r0
 80081c2:	eba8 0800 	sub.w	r8, r8, r0
 80081c6:	e7e7      	b.n	8008198 <__sflush_r+0xd4>
 80081c8:	dfbffffe 	.word	0xdfbffffe

080081cc <_fflush_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	690b      	ldr	r3, [r1, #16]
 80081d0:	4605      	mov	r5, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	b913      	cbnz	r3, 80081dc <_fflush_r+0x10>
 80081d6:	2500      	movs	r5, #0
 80081d8:	4628      	mov	r0, r5
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	b118      	cbz	r0, 80081e6 <_fflush_r+0x1a>
 80081de:	6a03      	ldr	r3, [r0, #32]
 80081e0:	b90b      	cbnz	r3, 80081e6 <_fflush_r+0x1a>
 80081e2:	f000 f8a7 	bl	8008334 <__sinit>
 80081e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0f3      	beq.n	80081d6 <_fflush_r+0xa>
 80081ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081f0:	07d0      	lsls	r0, r2, #31
 80081f2:	d404      	bmi.n	80081fe <_fflush_r+0x32>
 80081f4:	0599      	lsls	r1, r3, #22
 80081f6:	d402      	bmi.n	80081fe <_fflush_r+0x32>
 80081f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081fa:	f000 faaa 	bl	8008752 <__retarget_lock_acquire_recursive>
 80081fe:	4628      	mov	r0, r5
 8008200:	4621      	mov	r1, r4
 8008202:	f7ff ff5f 	bl	80080c4 <__sflush_r>
 8008206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008208:	07da      	lsls	r2, r3, #31
 800820a:	4605      	mov	r5, r0
 800820c:	d4e4      	bmi.n	80081d8 <_fflush_r+0xc>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	059b      	lsls	r3, r3, #22
 8008212:	d4e1      	bmi.n	80081d8 <_fflush_r+0xc>
 8008214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008216:	f000 fa9d 	bl	8008754 <__retarget_lock_release_recursive>
 800821a:	e7dd      	b.n	80081d8 <_fflush_r+0xc>

0800821c <std>:
 800821c:	2300      	movs	r3, #0
 800821e:	b510      	push	{r4, lr}
 8008220:	4604      	mov	r4, r0
 8008222:	e9c0 3300 	strd	r3, r3, [r0]
 8008226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800822a:	6083      	str	r3, [r0, #8]
 800822c:	8181      	strh	r1, [r0, #12]
 800822e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008230:	81c2      	strh	r2, [r0, #14]
 8008232:	6183      	str	r3, [r0, #24]
 8008234:	4619      	mov	r1, r3
 8008236:	2208      	movs	r2, #8
 8008238:	305c      	adds	r0, #92	@ 0x5c
 800823a:	f000 f991 	bl	8008560 <memset>
 800823e:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <std+0x58>)
 8008240:	6263      	str	r3, [r4, #36]	@ 0x24
 8008242:	4b0d      	ldr	r3, [pc, #52]	@ (8008278 <std+0x5c>)
 8008244:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008246:	4b0d      	ldr	r3, [pc, #52]	@ (800827c <std+0x60>)
 8008248:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800824a:	4b0d      	ldr	r3, [pc, #52]	@ (8008280 <std+0x64>)
 800824c:	6323      	str	r3, [r4, #48]	@ 0x30
 800824e:	4b0d      	ldr	r3, [pc, #52]	@ (8008284 <std+0x68>)
 8008250:	6224      	str	r4, [r4, #32]
 8008252:	429c      	cmp	r4, r3
 8008254:	d006      	beq.n	8008264 <std+0x48>
 8008256:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800825a:	4294      	cmp	r4, r2
 800825c:	d002      	beq.n	8008264 <std+0x48>
 800825e:	33d0      	adds	r3, #208	@ 0xd0
 8008260:	429c      	cmp	r4, r3
 8008262:	d105      	bne.n	8008270 <std+0x54>
 8008264:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800826c:	f000 ba70 	b.w	8008750 <__retarget_lock_init_recursive>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	bf00      	nop
 8008274:	08008409 	.word	0x08008409
 8008278:	0800842b 	.word	0x0800842b
 800827c:	08008463 	.word	0x08008463
 8008280:	08008487 	.word	0x08008487
 8008284:	20014e94 	.word	0x20014e94

08008288 <stdio_exit_handler>:
 8008288:	4a02      	ldr	r2, [pc, #8]	@ (8008294 <stdio_exit_handler+0xc>)
 800828a:	4903      	ldr	r1, [pc, #12]	@ (8008298 <stdio_exit_handler+0x10>)
 800828c:	4803      	ldr	r0, [pc, #12]	@ (800829c <stdio_exit_handler+0x14>)
 800828e:	f000 b869 	b.w	8008364 <_fwalk_sglue>
 8008292:	bf00      	nop
 8008294:	20000214 	.word	0x20000214
 8008298:	080081cd 	.word	0x080081cd
 800829c:	20000224 	.word	0x20000224

080082a0 <cleanup_stdio>:
 80082a0:	6841      	ldr	r1, [r0, #4]
 80082a2:	4b0c      	ldr	r3, [pc, #48]	@ (80082d4 <cleanup_stdio+0x34>)
 80082a4:	4299      	cmp	r1, r3
 80082a6:	b510      	push	{r4, lr}
 80082a8:	4604      	mov	r4, r0
 80082aa:	d001      	beq.n	80082b0 <cleanup_stdio+0x10>
 80082ac:	f7ff ff8e 	bl	80081cc <_fflush_r>
 80082b0:	68a1      	ldr	r1, [r4, #8]
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <cleanup_stdio+0x38>)
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d002      	beq.n	80082be <cleanup_stdio+0x1e>
 80082b8:	4620      	mov	r0, r4
 80082ba:	f7ff ff87 	bl	80081cc <_fflush_r>
 80082be:	68e1      	ldr	r1, [r4, #12]
 80082c0:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <cleanup_stdio+0x3c>)
 80082c2:	4299      	cmp	r1, r3
 80082c4:	d004      	beq.n	80082d0 <cleanup_stdio+0x30>
 80082c6:	4620      	mov	r0, r4
 80082c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082cc:	f7ff bf7e 	b.w	80081cc <_fflush_r>
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	bf00      	nop
 80082d4:	20014e94 	.word	0x20014e94
 80082d8:	20014efc 	.word	0x20014efc
 80082dc:	20014f64 	.word	0x20014f64

080082e0 <global_stdio_init.part.0>:
 80082e0:	b510      	push	{r4, lr}
 80082e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <global_stdio_init.part.0+0x30>)
 80082e4:	4c0b      	ldr	r4, [pc, #44]	@ (8008314 <global_stdio_init.part.0+0x34>)
 80082e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008318 <global_stdio_init.part.0+0x38>)
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	4620      	mov	r0, r4
 80082ec:	2200      	movs	r2, #0
 80082ee:	2104      	movs	r1, #4
 80082f0:	f7ff ff94 	bl	800821c <std>
 80082f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082f8:	2201      	movs	r2, #1
 80082fa:	2109      	movs	r1, #9
 80082fc:	f7ff ff8e 	bl	800821c <std>
 8008300:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008304:	2202      	movs	r2, #2
 8008306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800830a:	2112      	movs	r1, #18
 800830c:	f7ff bf86 	b.w	800821c <std>
 8008310:	20014fcc 	.word	0x20014fcc
 8008314:	20014e94 	.word	0x20014e94
 8008318:	08008289 	.word	0x08008289

0800831c <__sfp_lock_acquire>:
 800831c:	4801      	ldr	r0, [pc, #4]	@ (8008324 <__sfp_lock_acquire+0x8>)
 800831e:	f000 ba18 	b.w	8008752 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	20014fd5 	.word	0x20014fd5

08008328 <__sfp_lock_release>:
 8008328:	4801      	ldr	r0, [pc, #4]	@ (8008330 <__sfp_lock_release+0x8>)
 800832a:	f000 ba13 	b.w	8008754 <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	20014fd5 	.word	0x20014fd5

08008334 <__sinit>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4604      	mov	r4, r0
 8008338:	f7ff fff0 	bl	800831c <__sfp_lock_acquire>
 800833c:	6a23      	ldr	r3, [r4, #32]
 800833e:	b11b      	cbz	r3, 8008348 <__sinit+0x14>
 8008340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008344:	f7ff bff0 	b.w	8008328 <__sfp_lock_release>
 8008348:	4b04      	ldr	r3, [pc, #16]	@ (800835c <__sinit+0x28>)
 800834a:	6223      	str	r3, [r4, #32]
 800834c:	4b04      	ldr	r3, [pc, #16]	@ (8008360 <__sinit+0x2c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f5      	bne.n	8008340 <__sinit+0xc>
 8008354:	f7ff ffc4 	bl	80082e0 <global_stdio_init.part.0>
 8008358:	e7f2      	b.n	8008340 <__sinit+0xc>
 800835a:	bf00      	nop
 800835c:	080082a1 	.word	0x080082a1
 8008360:	20014fcc 	.word	0x20014fcc

08008364 <_fwalk_sglue>:
 8008364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008368:	4607      	mov	r7, r0
 800836a:	4688      	mov	r8, r1
 800836c:	4614      	mov	r4, r2
 800836e:	2600      	movs	r6, #0
 8008370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008374:	f1b9 0901 	subs.w	r9, r9, #1
 8008378:	d505      	bpl.n	8008386 <_fwalk_sglue+0x22>
 800837a:	6824      	ldr	r4, [r4, #0]
 800837c:	2c00      	cmp	r4, #0
 800837e:	d1f7      	bne.n	8008370 <_fwalk_sglue+0xc>
 8008380:	4630      	mov	r0, r6
 8008382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d907      	bls.n	800839c <_fwalk_sglue+0x38>
 800838c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008390:	3301      	adds	r3, #1
 8008392:	d003      	beq.n	800839c <_fwalk_sglue+0x38>
 8008394:	4629      	mov	r1, r5
 8008396:	4638      	mov	r0, r7
 8008398:	47c0      	blx	r8
 800839a:	4306      	orrs	r6, r0
 800839c:	3568      	adds	r5, #104	@ 0x68
 800839e:	e7e9      	b.n	8008374 <_fwalk_sglue+0x10>

080083a0 <sniprintf>:
 80083a0:	b40c      	push	{r2, r3}
 80083a2:	b530      	push	{r4, r5, lr}
 80083a4:	4b17      	ldr	r3, [pc, #92]	@ (8008404 <sniprintf+0x64>)
 80083a6:	1e0c      	subs	r4, r1, #0
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	b09d      	sub	sp, #116	@ 0x74
 80083ac:	da08      	bge.n	80083c0 <sniprintf+0x20>
 80083ae:	238b      	movs	r3, #139	@ 0x8b
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	b01d      	add	sp, #116	@ 0x74
 80083b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083bc:	b002      	add	sp, #8
 80083be:	4770      	bx	lr
 80083c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083c8:	bf14      	ite	ne
 80083ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083ce:	4623      	moveq	r3, r4
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	9307      	str	r3, [sp, #28]
 80083d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	9006      	str	r0, [sp, #24]
 80083dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083e2:	ab21      	add	r3, sp, #132	@ 0x84
 80083e4:	a902      	add	r1, sp, #8
 80083e6:	4628      	mov	r0, r5
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	f000 fa87 	bl	80088fc <_svfiprintf_r>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	bfbc      	itt	lt
 80083f2:	238b      	movlt	r3, #139	@ 0x8b
 80083f4:	602b      	strlt	r3, [r5, #0]
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d0dd      	beq.n	80083b6 <sniprintf+0x16>
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	2200      	movs	r2, #0
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e7d9      	b.n	80083b6 <sniprintf+0x16>
 8008402:	bf00      	nop
 8008404:	20000220 	.word	0x20000220

08008408 <__sread>:
 8008408:	b510      	push	{r4, lr}
 800840a:	460c      	mov	r4, r1
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	f000 f940 	bl	8008694 <_read_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	bfab      	itete	ge
 8008418:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800841a:	89a3      	ldrhlt	r3, [r4, #12]
 800841c:	181b      	addge	r3, r3, r0
 800841e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008422:	bfac      	ite	ge
 8008424:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008426:	81a3      	strhlt	r3, [r4, #12]
 8008428:	bd10      	pop	{r4, pc}

0800842a <__swrite>:
 800842a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842e:	461f      	mov	r7, r3
 8008430:	898b      	ldrh	r3, [r1, #12]
 8008432:	05db      	lsls	r3, r3, #23
 8008434:	4605      	mov	r5, r0
 8008436:	460c      	mov	r4, r1
 8008438:	4616      	mov	r6, r2
 800843a:	d505      	bpl.n	8008448 <__swrite+0x1e>
 800843c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008440:	2302      	movs	r3, #2
 8008442:	2200      	movs	r2, #0
 8008444:	f000 f914 	bl	8008670 <_lseek_r>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	4628      	mov	r0, r5
 800845a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	f000 b93b 	b.w	80086d8 <_write_r>

08008462 <__sseek>:
 8008462:	b510      	push	{r4, lr}
 8008464:	460c      	mov	r4, r1
 8008466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846a:	f000 f901 	bl	8008670 <_lseek_r>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	bf15      	itete	ne
 8008474:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008476:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800847a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800847e:	81a3      	strheq	r3, [r4, #12]
 8008480:	bf18      	it	ne
 8008482:	81a3      	strhne	r3, [r4, #12]
 8008484:	bd10      	pop	{r4, pc}

08008486 <__sclose>:
 8008486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848a:	f000 b8e1 	b.w	8008650 <_close_r>

0800848e <_vsniprintf_r>:
 800848e:	b530      	push	{r4, r5, lr}
 8008490:	4614      	mov	r4, r2
 8008492:	2c00      	cmp	r4, #0
 8008494:	b09b      	sub	sp, #108	@ 0x6c
 8008496:	4605      	mov	r5, r0
 8008498:	461a      	mov	r2, r3
 800849a:	da05      	bge.n	80084a8 <_vsniprintf_r+0x1a>
 800849c:	238b      	movs	r3, #139	@ 0x8b
 800849e:	6003      	str	r3, [r0, #0]
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295
 80084a4:	b01b      	add	sp, #108	@ 0x6c
 80084a6:	bd30      	pop	{r4, r5, pc}
 80084a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80084b0:	bf14      	ite	ne
 80084b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084b6:	4623      	moveq	r3, r4
 80084b8:	9302      	str	r3, [sp, #8]
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084c0:	9100      	str	r1, [sp, #0]
 80084c2:	9104      	str	r1, [sp, #16]
 80084c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80084c8:	4669      	mov	r1, sp
 80084ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80084cc:	f000 fa16 	bl	80088fc <_svfiprintf_r>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	bfbc      	itt	lt
 80084d4:	238b      	movlt	r3, #139	@ 0x8b
 80084d6:	602b      	strlt	r3, [r5, #0]
 80084d8:	2c00      	cmp	r4, #0
 80084da:	d0e3      	beq.n	80084a4 <_vsniprintf_r+0x16>
 80084dc:	9b00      	ldr	r3, [sp, #0]
 80084de:	2200      	movs	r2, #0
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e7df      	b.n	80084a4 <_vsniprintf_r+0x16>

080084e4 <vsniprintf>:
 80084e4:	b507      	push	{r0, r1, r2, lr}
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	460a      	mov	r2, r1
 80084ec:	4601      	mov	r1, r0
 80084ee:	4803      	ldr	r0, [pc, #12]	@ (80084fc <vsniprintf+0x18>)
 80084f0:	6800      	ldr	r0, [r0, #0]
 80084f2:	f7ff ffcc 	bl	800848e <_vsniprintf_r>
 80084f6:	b003      	add	sp, #12
 80084f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80084fc:	20000220 	.word	0x20000220

08008500 <_vsiprintf_r>:
 8008500:	b500      	push	{lr}
 8008502:	b09b      	sub	sp, #108	@ 0x6c
 8008504:	9100      	str	r1, [sp, #0]
 8008506:	9104      	str	r1, [sp, #16]
 8008508:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800850c:	9105      	str	r1, [sp, #20]
 800850e:	9102      	str	r1, [sp, #8]
 8008510:	4905      	ldr	r1, [pc, #20]	@ (8008528 <_vsiprintf_r+0x28>)
 8008512:	9103      	str	r1, [sp, #12]
 8008514:	4669      	mov	r1, sp
 8008516:	f000 f9f1 	bl	80088fc <_svfiprintf_r>
 800851a:	9b00      	ldr	r3, [sp, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	b01b      	add	sp, #108	@ 0x6c
 8008522:	f85d fb04 	ldr.w	pc, [sp], #4
 8008526:	bf00      	nop
 8008528:	ffff0208 	.word	0xffff0208

0800852c <vsiprintf>:
 800852c:	4613      	mov	r3, r2
 800852e:	460a      	mov	r2, r1
 8008530:	4601      	mov	r1, r0
 8008532:	4802      	ldr	r0, [pc, #8]	@ (800853c <vsiprintf+0x10>)
 8008534:	6800      	ldr	r0, [r0, #0]
 8008536:	f7ff bfe3 	b.w	8008500 <_vsiprintf_r>
 800853a:	bf00      	nop
 800853c:	20000220 	.word	0x20000220

08008540 <memcmp>:
 8008540:	b510      	push	{r4, lr}
 8008542:	3901      	subs	r1, #1
 8008544:	4402      	add	r2, r0
 8008546:	4290      	cmp	r0, r2
 8008548:	d101      	bne.n	800854e <memcmp+0xe>
 800854a:	2000      	movs	r0, #0
 800854c:	e005      	b.n	800855a <memcmp+0x1a>
 800854e:	7803      	ldrb	r3, [r0, #0]
 8008550:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008554:	42a3      	cmp	r3, r4
 8008556:	d001      	beq.n	800855c <memcmp+0x1c>
 8008558:	1b18      	subs	r0, r3, r4
 800855a:	bd10      	pop	{r4, pc}
 800855c:	3001      	adds	r0, #1
 800855e:	e7f2      	b.n	8008546 <memcmp+0x6>

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <strncpy>:
 8008570:	b510      	push	{r4, lr}
 8008572:	3901      	subs	r1, #1
 8008574:	4603      	mov	r3, r0
 8008576:	b132      	cbz	r2, 8008586 <strncpy+0x16>
 8008578:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800857c:	f803 4b01 	strb.w	r4, [r3], #1
 8008580:	3a01      	subs	r2, #1
 8008582:	2c00      	cmp	r4, #0
 8008584:	d1f7      	bne.n	8008576 <strncpy+0x6>
 8008586:	441a      	add	r2, r3
 8008588:	2100      	movs	r1, #0
 800858a:	4293      	cmp	r3, r2
 800858c:	d100      	bne.n	8008590 <strncpy+0x20>
 800858e:	bd10      	pop	{r4, pc}
 8008590:	f803 1b01 	strb.w	r1, [r3], #1
 8008594:	e7f9      	b.n	800858a <strncpy+0x1a>
	...

08008598 <strtok>:
 8008598:	4b16      	ldr	r3, [pc, #88]	@ (80085f4 <strtok+0x5c>)
 800859a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859e:	681f      	ldr	r7, [r3, #0]
 80085a0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80085a2:	4605      	mov	r5, r0
 80085a4:	460e      	mov	r6, r1
 80085a6:	b9ec      	cbnz	r4, 80085e4 <strtok+0x4c>
 80085a8:	2050      	movs	r0, #80	@ 0x50
 80085aa:	f7ff fbd1 	bl	8007d50 <malloc>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6478      	str	r0, [r7, #68]	@ 0x44
 80085b2:	b920      	cbnz	r0, 80085be <strtok+0x26>
 80085b4:	4b10      	ldr	r3, [pc, #64]	@ (80085f8 <strtok+0x60>)
 80085b6:	4811      	ldr	r0, [pc, #68]	@ (80085fc <strtok+0x64>)
 80085b8:	215b      	movs	r1, #91	@ 0x5b
 80085ba:	f000 f8db 	bl	8008774 <__assert_func>
 80085be:	e9c0 4400 	strd	r4, r4, [r0]
 80085c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80085ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80085d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80085d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80085da:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80085de:	6184      	str	r4, [r0, #24]
 80085e0:	7704      	strb	r4, [r0, #28]
 80085e2:	6244      	str	r4, [r0, #36]	@ 0x24
 80085e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	2301      	movs	r3, #1
 80085ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	f000 b806 	b.w	8008600 <__strtok_r>
 80085f4:	20000220 	.word	0x20000220
 80085f8:	08012a91 	.word	0x08012a91
 80085fc:	08012aa8 	.word	0x08012aa8

08008600 <__strtok_r>:
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	b908      	cbnz	r0, 800860a <__strtok_r+0xa>
 8008606:	6814      	ldr	r4, [r2, #0]
 8008608:	b144      	cbz	r4, 800861c <__strtok_r+0x1c>
 800860a:	4620      	mov	r0, r4
 800860c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008610:	460f      	mov	r7, r1
 8008612:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008616:	b91e      	cbnz	r6, 8008620 <__strtok_r+0x20>
 8008618:	b965      	cbnz	r5, 8008634 <__strtok_r+0x34>
 800861a:	6015      	str	r5, [r2, #0]
 800861c:	2000      	movs	r0, #0
 800861e:	e005      	b.n	800862c <__strtok_r+0x2c>
 8008620:	42b5      	cmp	r5, r6
 8008622:	d1f6      	bne.n	8008612 <__strtok_r+0x12>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f0      	bne.n	800860a <__strtok_r+0xa>
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	7003      	strb	r3, [r0, #0]
 800862c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800862e:	461c      	mov	r4, r3
 8008630:	e00c      	b.n	800864c <__strtok_r+0x4c>
 8008632:	b915      	cbnz	r5, 800863a <__strtok_r+0x3a>
 8008634:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008638:	460e      	mov	r6, r1
 800863a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800863e:	42ab      	cmp	r3, r5
 8008640:	d1f7      	bne.n	8008632 <__strtok_r+0x32>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f3      	beq.n	800862e <__strtok_r+0x2e>
 8008646:	2300      	movs	r3, #0
 8008648:	f804 3c01 	strb.w	r3, [r4, #-1]
 800864c:	6014      	str	r4, [r2, #0]
 800864e:	e7ed      	b.n	800862c <__strtok_r+0x2c>

08008650 <_close_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d06      	ldr	r5, [pc, #24]	@ (800866c <_close_r+0x1c>)
 8008654:	2300      	movs	r3, #0
 8008656:	4604      	mov	r4, r0
 8008658:	4608      	mov	r0, r1
 800865a:	602b      	str	r3, [r5, #0]
 800865c:	f7f9 fd36 	bl	80020cc <_close>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_close_r+0x1a>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_close_r+0x1a>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	20014fd0 	.word	0x20014fd0

08008670 <_lseek_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d07      	ldr	r5, [pc, #28]	@ (8008690 <_lseek_r+0x20>)
 8008674:	4604      	mov	r4, r0
 8008676:	4608      	mov	r0, r1
 8008678:	4611      	mov	r1, r2
 800867a:	2200      	movs	r2, #0
 800867c:	602a      	str	r2, [r5, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	f7f9 fd4b 	bl	800211a <_lseek>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_lseek_r+0x1e>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_lseek_r+0x1e>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	20014fd0 	.word	0x20014fd0

08008694 <_read_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d07      	ldr	r5, [pc, #28]	@ (80086b4 <_read_r+0x20>)
 8008698:	4604      	mov	r4, r0
 800869a:	4608      	mov	r0, r1
 800869c:	4611      	mov	r1, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	602a      	str	r2, [r5, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f7f9 fcd9 	bl	800205a <_read>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_read_r+0x1e>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_read_r+0x1e>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	20014fd0 	.word	0x20014fd0

080086b8 <_sbrk_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	@ (80086d4 <_sbrk_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7f9 fd36 	bl	8002134 <_sbrk>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_sbrk_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_sbrk_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	20014fd0 	.word	0x20014fd0

080086d8 <_write_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d07      	ldr	r5, [pc, #28]	@ (80086f8 <_write_r+0x20>)
 80086dc:	4604      	mov	r4, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f7f9 fcd4 	bl	8002094 <_write>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_write_r+0x1e>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_write_r+0x1e>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	20014fd0 	.word	0x20014fd0

080086fc <__errno>:
 80086fc:	4b01      	ldr	r3, [pc, #4]	@ (8008704 <__errno+0x8>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000220 	.word	0x20000220

08008708 <__libc_init_array>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	4d0d      	ldr	r5, [pc, #52]	@ (8008740 <__libc_init_array+0x38>)
 800870c:	4c0d      	ldr	r4, [pc, #52]	@ (8008744 <__libc_init_array+0x3c>)
 800870e:	1b64      	subs	r4, r4, r5
 8008710:	10a4      	asrs	r4, r4, #2
 8008712:	2600      	movs	r6, #0
 8008714:	42a6      	cmp	r6, r4
 8008716:	d109      	bne.n	800872c <__libc_init_array+0x24>
 8008718:	4d0b      	ldr	r5, [pc, #44]	@ (8008748 <__libc_init_array+0x40>)
 800871a:	4c0c      	ldr	r4, [pc, #48]	@ (800874c <__libc_init_array+0x44>)
 800871c:	f000 fe7e 	bl	800941c <_init>
 8008720:	1b64      	subs	r4, r4, r5
 8008722:	10a4      	asrs	r4, r4, #2
 8008724:	2600      	movs	r6, #0
 8008726:	42a6      	cmp	r6, r4
 8008728:	d105      	bne.n	8008736 <__libc_init_array+0x2e>
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008730:	4798      	blx	r3
 8008732:	3601      	adds	r6, #1
 8008734:	e7ee      	b.n	8008714 <__libc_init_array+0xc>
 8008736:	f855 3b04 	ldr.w	r3, [r5], #4
 800873a:	4798      	blx	r3
 800873c:	3601      	adds	r6, #1
 800873e:	e7f2      	b.n	8008726 <__libc_init_array+0x1e>
 8008740:	08012b7c 	.word	0x08012b7c
 8008744:	08012b7c 	.word	0x08012b7c
 8008748:	08012b7c 	.word	0x08012b7c
 800874c:	08012b80 	.word	0x08012b80

08008750 <__retarget_lock_init_recursive>:
 8008750:	4770      	bx	lr

08008752 <__retarget_lock_acquire_recursive>:
 8008752:	4770      	bx	lr

08008754 <__retarget_lock_release_recursive>:
 8008754:	4770      	bx	lr

08008756 <memcpy>:
 8008756:	440a      	add	r2, r1
 8008758:	4291      	cmp	r1, r2
 800875a:	f100 33ff 	add.w	r3, r0, #4294967295
 800875e:	d100      	bne.n	8008762 <memcpy+0xc>
 8008760:	4770      	bx	lr
 8008762:	b510      	push	{r4, lr}
 8008764:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800876c:	4291      	cmp	r1, r2
 800876e:	d1f9      	bne.n	8008764 <memcpy+0xe>
 8008770:	bd10      	pop	{r4, pc}
	...

08008774 <__assert_func>:
 8008774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008776:	4614      	mov	r4, r2
 8008778:	461a      	mov	r2, r3
 800877a:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <__assert_func+0x2c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4605      	mov	r5, r0
 8008780:	68d8      	ldr	r0, [r3, #12]
 8008782:	b954      	cbnz	r4, 800879a <__assert_func+0x26>
 8008784:	4b07      	ldr	r3, [pc, #28]	@ (80087a4 <__assert_func+0x30>)
 8008786:	461c      	mov	r4, r3
 8008788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800878c:	9100      	str	r1, [sp, #0]
 800878e:	462b      	mov	r3, r5
 8008790:	4905      	ldr	r1, [pc, #20]	@ (80087a8 <__assert_func+0x34>)
 8008792:	f000 fb3d 	bl	8008e10 <fiprintf>
 8008796:	f000 fbeb 	bl	8008f70 <abort>
 800879a:	4b04      	ldr	r3, [pc, #16]	@ (80087ac <__assert_func+0x38>)
 800879c:	e7f4      	b.n	8008788 <__assert_func+0x14>
 800879e:	bf00      	nop
 80087a0:	20000220 	.word	0x20000220
 80087a4:	08012b3d 	.word	0x08012b3d
 80087a8:	08012b0f 	.word	0x08012b0f
 80087ac:	08012b02 	.word	0x08012b02

080087b0 <_free_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	2900      	cmp	r1, #0
 80087b6:	d041      	beq.n	800883c <_free_r+0x8c>
 80087b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087bc:	1f0c      	subs	r4, r1, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfb8      	it	lt
 80087c2:	18e4      	addlt	r4, r4, r3
 80087c4:	f7ff fb76 	bl	8007eb4 <__malloc_lock>
 80087c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008840 <_free_r+0x90>)
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	b933      	cbnz	r3, 80087dc <_free_r+0x2c>
 80087ce:	6063      	str	r3, [r4, #4]
 80087d0:	6014      	str	r4, [r2, #0]
 80087d2:	4628      	mov	r0, r5
 80087d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d8:	f7ff bb72 	b.w	8007ec0 <__malloc_unlock>
 80087dc:	42a3      	cmp	r3, r4
 80087de:	d908      	bls.n	80087f2 <_free_r+0x42>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	1821      	adds	r1, r4, r0
 80087e4:	428b      	cmp	r3, r1
 80087e6:	bf01      	itttt	eq
 80087e8:	6819      	ldreq	r1, [r3, #0]
 80087ea:	685b      	ldreq	r3, [r3, #4]
 80087ec:	1809      	addeq	r1, r1, r0
 80087ee:	6021      	streq	r1, [r4, #0]
 80087f0:	e7ed      	b.n	80087ce <_free_r+0x1e>
 80087f2:	461a      	mov	r2, r3
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	b10b      	cbz	r3, 80087fc <_free_r+0x4c>
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	d9fa      	bls.n	80087f2 <_free_r+0x42>
 80087fc:	6811      	ldr	r1, [r2, #0]
 80087fe:	1850      	adds	r0, r2, r1
 8008800:	42a0      	cmp	r0, r4
 8008802:	d10b      	bne.n	800881c <_free_r+0x6c>
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	4401      	add	r1, r0
 8008808:	1850      	adds	r0, r2, r1
 800880a:	4283      	cmp	r3, r0
 800880c:	6011      	str	r1, [r2, #0]
 800880e:	d1e0      	bne.n	80087d2 <_free_r+0x22>
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	6053      	str	r3, [r2, #4]
 8008816:	4408      	add	r0, r1
 8008818:	6010      	str	r0, [r2, #0]
 800881a:	e7da      	b.n	80087d2 <_free_r+0x22>
 800881c:	d902      	bls.n	8008824 <_free_r+0x74>
 800881e:	230c      	movs	r3, #12
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	e7d6      	b.n	80087d2 <_free_r+0x22>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	1821      	adds	r1, r4, r0
 8008828:	428b      	cmp	r3, r1
 800882a:	bf04      	itt	eq
 800882c:	6819      	ldreq	r1, [r3, #0]
 800882e:	685b      	ldreq	r3, [r3, #4]
 8008830:	6063      	str	r3, [r4, #4]
 8008832:	bf04      	itt	eq
 8008834:	1809      	addeq	r1, r1, r0
 8008836:	6021      	streq	r1, [r4, #0]
 8008838:	6054      	str	r4, [r2, #4]
 800883a:	e7ca      	b.n	80087d2 <_free_r+0x22>
 800883c:	bd38      	pop	{r3, r4, r5, pc}
 800883e:	bf00      	nop
 8008840:	20014e90 	.word	0x20014e90

08008844 <__ssputs_r>:
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	688e      	ldr	r6, [r1, #8]
 800884a:	461f      	mov	r7, r3
 800884c:	42be      	cmp	r6, r7
 800884e:	680b      	ldr	r3, [r1, #0]
 8008850:	4682      	mov	sl, r0
 8008852:	460c      	mov	r4, r1
 8008854:	4690      	mov	r8, r2
 8008856:	d82d      	bhi.n	80088b4 <__ssputs_r+0x70>
 8008858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800885c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008860:	d026      	beq.n	80088b0 <__ssputs_r+0x6c>
 8008862:	6965      	ldr	r5, [r4, #20]
 8008864:	6909      	ldr	r1, [r1, #16]
 8008866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800886a:	eba3 0901 	sub.w	r9, r3, r1
 800886e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008872:	1c7b      	adds	r3, r7, #1
 8008874:	444b      	add	r3, r9
 8008876:	106d      	asrs	r5, r5, #1
 8008878:	429d      	cmp	r5, r3
 800887a:	bf38      	it	cc
 800887c:	461d      	movcc	r5, r3
 800887e:	0553      	lsls	r3, r2, #21
 8008880:	d527      	bpl.n	80088d2 <__ssputs_r+0x8e>
 8008882:	4629      	mov	r1, r5
 8008884:	f7ff fa96 	bl	8007db4 <_malloc_r>
 8008888:	4606      	mov	r6, r0
 800888a:	b360      	cbz	r0, 80088e6 <__ssputs_r+0xa2>
 800888c:	6921      	ldr	r1, [r4, #16]
 800888e:	464a      	mov	r2, r9
 8008890:	f7ff ff61 	bl	8008756 <memcpy>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800889a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	6126      	str	r6, [r4, #16]
 80088a2:	6165      	str	r5, [r4, #20]
 80088a4:	444e      	add	r6, r9
 80088a6:	eba5 0509 	sub.w	r5, r5, r9
 80088aa:	6026      	str	r6, [r4, #0]
 80088ac:	60a5      	str	r5, [r4, #8]
 80088ae:	463e      	mov	r6, r7
 80088b0:	42be      	cmp	r6, r7
 80088b2:	d900      	bls.n	80088b6 <__ssputs_r+0x72>
 80088b4:	463e      	mov	r6, r7
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	4632      	mov	r2, r6
 80088ba:	4641      	mov	r1, r8
 80088bc:	f000 fb1c 	bl	8008ef8 <memmove>
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	1b9b      	subs	r3, r3, r6
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	4433      	add	r3, r6
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	2000      	movs	r0, #0
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	462a      	mov	r2, r5
 80088d4:	f000 fb53 	bl	8008f7e <_realloc_r>
 80088d8:	4606      	mov	r6, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	d1e0      	bne.n	80088a0 <__ssputs_r+0x5c>
 80088de:	6921      	ldr	r1, [r4, #16]
 80088e0:	4650      	mov	r0, sl
 80088e2:	f7ff ff65 	bl	80087b0 <_free_r>
 80088e6:	230c      	movs	r3, #12
 80088e8:	f8ca 3000 	str.w	r3, [sl]
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	e7e9      	b.n	80088ce <__ssputs_r+0x8a>
	...

080088fc <_svfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	4698      	mov	r8, r3
 8008902:	898b      	ldrh	r3, [r1, #12]
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	b09d      	sub	sp, #116	@ 0x74
 8008908:	4607      	mov	r7, r0
 800890a:	460d      	mov	r5, r1
 800890c:	4614      	mov	r4, r2
 800890e:	d510      	bpl.n	8008932 <_svfiprintf_r+0x36>
 8008910:	690b      	ldr	r3, [r1, #16]
 8008912:	b973      	cbnz	r3, 8008932 <_svfiprintf_r+0x36>
 8008914:	2140      	movs	r1, #64	@ 0x40
 8008916:	f7ff fa4d 	bl	8007db4 <_malloc_r>
 800891a:	6028      	str	r0, [r5, #0]
 800891c:	6128      	str	r0, [r5, #16]
 800891e:	b930      	cbnz	r0, 800892e <_svfiprintf_r+0x32>
 8008920:	230c      	movs	r3, #12
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b01d      	add	sp, #116	@ 0x74
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	2340      	movs	r3, #64	@ 0x40
 8008930:	616b      	str	r3, [r5, #20]
 8008932:	2300      	movs	r3, #0
 8008934:	9309      	str	r3, [sp, #36]	@ 0x24
 8008936:	2320      	movs	r3, #32
 8008938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800893c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008940:	2330      	movs	r3, #48	@ 0x30
 8008942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ae0 <_svfiprintf_r+0x1e4>
 8008946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800894a:	f04f 0901 	mov.w	r9, #1
 800894e:	4623      	mov	r3, r4
 8008950:	469a      	mov	sl, r3
 8008952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008956:	b10a      	cbz	r2, 800895c <_svfiprintf_r+0x60>
 8008958:	2a25      	cmp	r2, #37	@ 0x25
 800895a:	d1f9      	bne.n	8008950 <_svfiprintf_r+0x54>
 800895c:	ebba 0b04 	subs.w	fp, sl, r4
 8008960:	d00b      	beq.n	800897a <_svfiprintf_r+0x7e>
 8008962:	465b      	mov	r3, fp
 8008964:	4622      	mov	r2, r4
 8008966:	4629      	mov	r1, r5
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ff6b 	bl	8008844 <__ssputs_r>
 800896e:	3001      	adds	r0, #1
 8008970:	f000 80a7 	beq.w	8008ac2 <_svfiprintf_r+0x1c6>
 8008974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008976:	445a      	add	r2, fp
 8008978:	9209      	str	r2, [sp, #36]	@ 0x24
 800897a:	f89a 3000 	ldrb.w	r3, [sl]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 809f 	beq.w	8008ac2 <_svfiprintf_r+0x1c6>
 8008984:	2300      	movs	r3, #0
 8008986:	f04f 32ff 	mov.w	r2, #4294967295
 800898a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800898e:	f10a 0a01 	add.w	sl, sl, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	9307      	str	r3, [sp, #28]
 8008996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800899a:	931a      	str	r3, [sp, #104]	@ 0x68
 800899c:	4654      	mov	r4, sl
 800899e:	2205      	movs	r2, #5
 80089a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a4:	484e      	ldr	r0, [pc, #312]	@ (8008ae0 <_svfiprintf_r+0x1e4>)
 80089a6:	f7f7 fc1b 	bl	80001e0 <memchr>
 80089aa:	9a04      	ldr	r2, [sp, #16]
 80089ac:	b9d8      	cbnz	r0, 80089e6 <_svfiprintf_r+0xea>
 80089ae:	06d0      	lsls	r0, r2, #27
 80089b0:	bf44      	itt	mi
 80089b2:	2320      	movmi	r3, #32
 80089b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b8:	0711      	lsls	r1, r2, #28
 80089ba:	bf44      	itt	mi
 80089bc:	232b      	movmi	r3, #43	@ 0x2b
 80089be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c2:	f89a 3000 	ldrb.w	r3, [sl]
 80089c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c8:	d015      	beq.n	80089f6 <_svfiprintf_r+0xfa>
 80089ca:	9a07      	ldr	r2, [sp, #28]
 80089cc:	4654      	mov	r4, sl
 80089ce:	2000      	movs	r0, #0
 80089d0:	f04f 0c0a 	mov.w	ip, #10
 80089d4:	4621      	mov	r1, r4
 80089d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089da:	3b30      	subs	r3, #48	@ 0x30
 80089dc:	2b09      	cmp	r3, #9
 80089de:	d94b      	bls.n	8008a78 <_svfiprintf_r+0x17c>
 80089e0:	b1b0      	cbz	r0, 8008a10 <_svfiprintf_r+0x114>
 80089e2:	9207      	str	r2, [sp, #28]
 80089e4:	e014      	b.n	8008a10 <_svfiprintf_r+0x114>
 80089e6:	eba0 0308 	sub.w	r3, r0, r8
 80089ea:	fa09 f303 	lsl.w	r3, r9, r3
 80089ee:	4313      	orrs	r3, r2
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	46a2      	mov	sl, r4
 80089f4:	e7d2      	b.n	800899c <_svfiprintf_r+0xa0>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	1d19      	adds	r1, r3, #4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	9103      	str	r1, [sp, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfbb      	ittet	lt
 8008a02:	425b      	neglt	r3, r3
 8008a04:	f042 0202 	orrlt.w	r2, r2, #2
 8008a08:	9307      	strge	r3, [sp, #28]
 8008a0a:	9307      	strlt	r3, [sp, #28]
 8008a0c:	bfb8      	it	lt
 8008a0e:	9204      	strlt	r2, [sp, #16]
 8008a10:	7823      	ldrb	r3, [r4, #0]
 8008a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a14:	d10a      	bne.n	8008a2c <_svfiprintf_r+0x130>
 8008a16:	7863      	ldrb	r3, [r4, #1]
 8008a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a1a:	d132      	bne.n	8008a82 <_svfiprintf_r+0x186>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	9203      	str	r2, [sp, #12]
 8008a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a28:	3402      	adds	r4, #2
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008af0 <_svfiprintf_r+0x1f4>
 8008a30:	7821      	ldrb	r1, [r4, #0]
 8008a32:	2203      	movs	r2, #3
 8008a34:	4650      	mov	r0, sl
 8008a36:	f7f7 fbd3 	bl	80001e0 <memchr>
 8008a3a:	b138      	cbz	r0, 8008a4c <_svfiprintf_r+0x150>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	eba0 000a 	sub.w	r0, r0, sl
 8008a42:	2240      	movs	r2, #64	@ 0x40
 8008a44:	4082      	lsls	r2, r0
 8008a46:	4313      	orrs	r3, r2
 8008a48:	3401      	adds	r4, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	4824      	ldr	r0, [pc, #144]	@ (8008ae4 <_svfiprintf_r+0x1e8>)
 8008a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a56:	2206      	movs	r2, #6
 8008a58:	f7f7 fbc2 	bl	80001e0 <memchr>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d036      	beq.n	8008ace <_svfiprintf_r+0x1d2>
 8008a60:	4b21      	ldr	r3, [pc, #132]	@ (8008ae8 <_svfiprintf_r+0x1ec>)
 8008a62:	bb1b      	cbnz	r3, 8008aac <_svfiprintf_r+0x1b0>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	3307      	adds	r3, #7
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a72:	4433      	add	r3, r6
 8008a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a76:	e76a      	b.n	800894e <_svfiprintf_r+0x52>
 8008a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7a8      	b.n	80089d4 <_svfiprintf_r+0xd8>
 8008a82:	2300      	movs	r3, #0
 8008a84:	3401      	adds	r4, #1
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f04f 0c0a 	mov.w	ip, #10
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a94:	3a30      	subs	r2, #48	@ 0x30
 8008a96:	2a09      	cmp	r2, #9
 8008a98:	d903      	bls.n	8008aa2 <_svfiprintf_r+0x1a6>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0c6      	beq.n	8008a2c <_svfiprintf_r+0x130>
 8008a9e:	9105      	str	r1, [sp, #20]
 8008aa0:	e7c4      	b.n	8008a2c <_svfiprintf_r+0x130>
 8008aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e7f0      	b.n	8008a8e <_svfiprintf_r+0x192>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8008aec <_svfiprintf_r+0x1f0>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f3af 8000 	nop.w
 8008abc:	1c42      	adds	r2, r0, #1
 8008abe:	4606      	mov	r6, r0
 8008ac0:	d1d6      	bne.n	8008a70 <_svfiprintf_r+0x174>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	065b      	lsls	r3, r3, #25
 8008ac6:	f53f af2d 	bmi.w	8008924 <_svfiprintf_r+0x28>
 8008aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008acc:	e72c      	b.n	8008928 <_svfiprintf_r+0x2c>
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <_svfiprintf_r+0x1f0>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f000 f879 	bl	8008bd0 <_printf_i>
 8008ade:	e7ed      	b.n	8008abc <_svfiprintf_r+0x1c0>
 8008ae0:	08012b3e 	.word	0x08012b3e
 8008ae4:	08012b48 	.word	0x08012b48
 8008ae8:	00000000 	.word	0x00000000
 8008aec:	08008845 	.word	0x08008845
 8008af0:	08012b44 	.word	0x08012b44

08008af4 <_printf_common>:
 8008af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	4616      	mov	r6, r2
 8008afa:	4698      	mov	r8, r3
 8008afc:	688a      	ldr	r2, [r1, #8]
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	bfb8      	it	lt
 8008b08:	4613      	movlt	r3, r2
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b10:	4607      	mov	r7, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b10a      	cbz	r2, 8008b1a <_printf_common+0x26>
 8008b16:	3301      	adds	r3, #1
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	0699      	lsls	r1, r3, #26
 8008b1e:	bf42      	ittt	mi
 8008b20:	6833      	ldrmi	r3, [r6, #0]
 8008b22:	3302      	addmi	r3, #2
 8008b24:	6033      	strmi	r3, [r6, #0]
 8008b26:	6825      	ldr	r5, [r4, #0]
 8008b28:	f015 0506 	ands.w	r5, r5, #6
 8008b2c:	d106      	bne.n	8008b3c <_printf_common+0x48>
 8008b2e:	f104 0a19 	add.w	sl, r4, #25
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	6832      	ldr	r2, [r6, #0]
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc26      	bgt.n	8008b8a <_printf_common+0x96>
 8008b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	3b00      	subs	r3, #0
 8008b44:	bf18      	it	ne
 8008b46:	2301      	movne	r3, #1
 8008b48:	0692      	lsls	r2, r2, #26
 8008b4a:	d42b      	bmi.n	8008ba4 <_printf_common+0xb0>
 8008b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b50:	4641      	mov	r1, r8
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c8      	blx	r9
 8008b56:	3001      	adds	r0, #1
 8008b58:	d01e      	beq.n	8008b98 <_printf_common+0xa4>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	6922      	ldr	r2, [r4, #16]
 8008b5e:	f003 0306 	and.w	r3, r3, #6
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	bf02      	ittt	eq
 8008b66:	68e5      	ldreq	r5, [r4, #12]
 8008b68:	6833      	ldreq	r3, [r6, #0]
 8008b6a:	1aed      	subeq	r5, r5, r3
 8008b6c:	68a3      	ldr	r3, [r4, #8]
 8008b6e:	bf0c      	ite	eq
 8008b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b74:	2500      	movne	r5, #0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bfc4      	itt	gt
 8008b7a:	1a9b      	subgt	r3, r3, r2
 8008b7c:	18ed      	addgt	r5, r5, r3
 8008b7e:	2600      	movs	r6, #0
 8008b80:	341a      	adds	r4, #26
 8008b82:	42b5      	cmp	r5, r6
 8008b84:	d11a      	bne.n	8008bbc <_printf_common+0xc8>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e008      	b.n	8008b9c <_printf_common+0xa8>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4641      	mov	r1, r8
 8008b90:	4638      	mov	r0, r7
 8008b92:	47c8      	blx	r9
 8008b94:	3001      	adds	r0, #1
 8008b96:	d103      	bne.n	8008ba0 <_printf_common+0xac>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	e7c6      	b.n	8008b32 <_printf_common+0x3e>
 8008ba4:	18e1      	adds	r1, r4, r3
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	2030      	movs	r0, #48	@ 0x30
 8008baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bae:	4422      	add	r2, r4
 8008bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bb8:	3302      	adds	r3, #2
 8008bba:	e7c7      	b.n	8008b4c <_printf_common+0x58>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	47c8      	blx	r9
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d0e6      	beq.n	8008b98 <_printf_common+0xa4>
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7d9      	b.n	8008b82 <_printf_common+0x8e>
	...

08008bd0 <_printf_i>:
 8008bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	7e0f      	ldrb	r7, [r1, #24]
 8008bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bd8:	2f78      	cmp	r7, #120	@ 0x78
 8008bda:	4691      	mov	r9, r2
 8008bdc:	4680      	mov	r8, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	469a      	mov	sl, r3
 8008be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008be6:	d807      	bhi.n	8008bf8 <_printf_i+0x28>
 8008be8:	2f62      	cmp	r7, #98	@ 0x62
 8008bea:	d80a      	bhi.n	8008c02 <_printf_i+0x32>
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	f000 80d2 	beq.w	8008d96 <_printf_i+0x1c6>
 8008bf2:	2f58      	cmp	r7, #88	@ 0x58
 8008bf4:	f000 80b9 	beq.w	8008d6a <_printf_i+0x19a>
 8008bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c00:	e03a      	b.n	8008c78 <_printf_i+0xa8>
 8008c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c06:	2b15      	cmp	r3, #21
 8008c08:	d8f6      	bhi.n	8008bf8 <_printf_i+0x28>
 8008c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8008c10 <_printf_i+0x40>)
 8008c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008bf9 	.word	0x08008bf9
 8008c1c:	08008bf9 	.word	0x08008bf9
 8008c20:	08008bf9 	.word	0x08008bf9
 8008c24:	08008bf9 	.word	0x08008bf9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bf9 	.word	0x08008bf9
 8008c30:	08008bf9 	.word	0x08008bf9
 8008c34:	08008bf9 	.word	0x08008bf9
 8008c38:	08008bf9 	.word	0x08008bf9
 8008c3c:	08008d7d 	.word	0x08008d7d
 8008c40:	08008ca7 	.word	0x08008ca7
 8008c44:	08008d37 	.word	0x08008d37
 8008c48:	08008bf9 	.word	0x08008bf9
 8008c4c:	08008bf9 	.word	0x08008bf9
 8008c50:	08008d9f 	.word	0x08008d9f
 8008c54:	08008bf9 	.word	0x08008bf9
 8008c58:	08008ca7 	.word	0x08008ca7
 8008c5c:	08008bf9 	.word	0x08008bf9
 8008c60:	08008bf9 	.word	0x08008bf9
 8008c64:	08008d3f 	.word	0x08008d3f
 8008c68:	6833      	ldr	r3, [r6, #0]
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6032      	str	r2, [r6, #0]
 8008c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e09d      	b.n	8008db8 <_printf_i+0x1e8>
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6031      	str	r1, [r6, #0]
 8008c84:	0606      	lsls	r6, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xbc>
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	e003      	b.n	8008c94 <_printf_i+0xc4>
 8008c8c:	0645      	lsls	r5, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xb8>
 8008c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	da03      	bge.n	8008ca0 <_printf_i+0xd0>
 8008c98:	232d      	movs	r3, #45	@ 0x2d
 8008c9a:	426d      	negs	r5, r5
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ca0:	4859      	ldr	r0, [pc, #356]	@ (8008e08 <_printf_i+0x238>)
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	e011      	b.n	8008cca <_printf_i+0xfa>
 8008ca6:	6821      	ldr	r1, [r4, #0]
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	0608      	lsls	r0, r1, #24
 8008cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cb0:	d402      	bmi.n	8008cb8 <_printf_i+0xe8>
 8008cb2:	0649      	lsls	r1, r1, #25
 8008cb4:	bf48      	it	mi
 8008cb6:	b2ad      	uxthmi	r5, r5
 8008cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cba:	4853      	ldr	r0, [pc, #332]	@ (8008e08 <_printf_i+0x238>)
 8008cbc:	6033      	str	r3, [r6, #0]
 8008cbe:	bf14      	ite	ne
 8008cc0:	230a      	movne	r3, #10
 8008cc2:	2308      	moveq	r3, #8
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cca:	6866      	ldr	r6, [r4, #4]
 8008ccc:	60a6      	str	r6, [r4, #8]
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	bfa2      	ittt	ge
 8008cd2:	6821      	ldrge	r1, [r4, #0]
 8008cd4:	f021 0104 	bicge.w	r1, r1, #4
 8008cd8:	6021      	strge	r1, [r4, #0]
 8008cda:	b90d      	cbnz	r5, 8008ce0 <_printf_i+0x110>
 8008cdc:	2e00      	cmp	r6, #0
 8008cde:	d04b      	beq.n	8008d78 <_printf_i+0x1a8>
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8008cea:	5dc7      	ldrb	r7, [r0, r7]
 8008cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cf0:	462f      	mov	r7, r5
 8008cf2:	42bb      	cmp	r3, r7
 8008cf4:	460d      	mov	r5, r1
 8008cf6:	d9f4      	bls.n	8008ce2 <_printf_i+0x112>
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d10b      	bne.n	8008d14 <_printf_i+0x144>
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	07df      	lsls	r7, r3, #31
 8008d00:	d508      	bpl.n	8008d14 <_printf_i+0x144>
 8008d02:	6923      	ldr	r3, [r4, #16]
 8008d04:	6861      	ldr	r1, [r4, #4]
 8008d06:	4299      	cmp	r1, r3
 8008d08:	bfde      	ittt	le
 8008d0a:	2330      	movle	r3, #48	@ 0x30
 8008d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d14:	1b92      	subs	r2, r2, r6
 8008d16:	6122      	str	r2, [r4, #16]
 8008d18:	f8cd a000 	str.w	sl, [sp]
 8008d1c:	464b      	mov	r3, r9
 8008d1e:	aa03      	add	r2, sp, #12
 8008d20:	4621      	mov	r1, r4
 8008d22:	4640      	mov	r0, r8
 8008d24:	f7ff fee6 	bl	8008af4 <_printf_common>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d14a      	bne.n	8008dc2 <_printf_i+0x1f2>
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	b004      	add	sp, #16
 8008d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	f043 0320 	orr.w	r3, r3, #32
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	4833      	ldr	r0, [pc, #204]	@ (8008e0c <_printf_i+0x23c>)
 8008d40:	2778      	movs	r7, #120	@ 0x78
 8008d42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	6831      	ldr	r1, [r6, #0]
 8008d4a:	061f      	lsls	r7, r3, #24
 8008d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d50:	d402      	bmi.n	8008d58 <_printf_i+0x188>
 8008d52:	065f      	lsls	r7, r3, #25
 8008d54:	bf48      	it	mi
 8008d56:	b2ad      	uxthmi	r5, r5
 8008d58:	6031      	str	r1, [r6, #0]
 8008d5a:	07d9      	lsls	r1, r3, #31
 8008d5c:	bf44      	itt	mi
 8008d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d62:	6023      	strmi	r3, [r4, #0]
 8008d64:	b11d      	cbz	r5, 8008d6e <_printf_i+0x19e>
 8008d66:	2310      	movs	r3, #16
 8008d68:	e7ac      	b.n	8008cc4 <_printf_i+0xf4>
 8008d6a:	4827      	ldr	r0, [pc, #156]	@ (8008e08 <_printf_i+0x238>)
 8008d6c:	e7e9      	b.n	8008d42 <_printf_i+0x172>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	f023 0320 	bic.w	r3, r3, #32
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	e7f6      	b.n	8008d66 <_printf_i+0x196>
 8008d78:	4616      	mov	r6, r2
 8008d7a:	e7bd      	b.n	8008cf8 <_printf_i+0x128>
 8008d7c:	6833      	ldr	r3, [r6, #0]
 8008d7e:	6825      	ldr	r5, [r4, #0]
 8008d80:	6961      	ldr	r1, [r4, #20]
 8008d82:	1d18      	adds	r0, r3, #4
 8008d84:	6030      	str	r0, [r6, #0]
 8008d86:	062e      	lsls	r6, r5, #24
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	d501      	bpl.n	8008d90 <_printf_i+0x1c0>
 8008d8c:	6019      	str	r1, [r3, #0]
 8008d8e:	e002      	b.n	8008d96 <_printf_i+0x1c6>
 8008d90:	0668      	lsls	r0, r5, #25
 8008d92:	d5fb      	bpl.n	8008d8c <_printf_i+0x1bc>
 8008d94:	8019      	strh	r1, [r3, #0]
 8008d96:	2300      	movs	r3, #0
 8008d98:	6123      	str	r3, [r4, #16]
 8008d9a:	4616      	mov	r6, r2
 8008d9c:	e7bc      	b.n	8008d18 <_printf_i+0x148>
 8008d9e:	6833      	ldr	r3, [r6, #0]
 8008da0:	1d1a      	adds	r2, r3, #4
 8008da2:	6032      	str	r2, [r6, #0]
 8008da4:	681e      	ldr	r6, [r3, #0]
 8008da6:	6862      	ldr	r2, [r4, #4]
 8008da8:	2100      	movs	r1, #0
 8008daa:	4630      	mov	r0, r6
 8008dac:	f7f7 fa18 	bl	80001e0 <memchr>
 8008db0:	b108      	cbz	r0, 8008db6 <_printf_i+0x1e6>
 8008db2:	1b80      	subs	r0, r0, r6
 8008db4:	6060      	str	r0, [r4, #4]
 8008db6:	6863      	ldr	r3, [r4, #4]
 8008db8:	6123      	str	r3, [r4, #16]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dc0:	e7aa      	b.n	8008d18 <_printf_i+0x148>
 8008dc2:	6923      	ldr	r3, [r4, #16]
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	4640      	mov	r0, r8
 8008dca:	47d0      	blx	sl
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d0ad      	beq.n	8008d2c <_printf_i+0x15c>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	079b      	lsls	r3, r3, #30
 8008dd4:	d413      	bmi.n	8008dfe <_printf_i+0x22e>
 8008dd6:	68e0      	ldr	r0, [r4, #12]
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	4298      	cmp	r0, r3
 8008ddc:	bfb8      	it	lt
 8008dde:	4618      	movlt	r0, r3
 8008de0:	e7a6      	b.n	8008d30 <_printf_i+0x160>
 8008de2:	2301      	movs	r3, #1
 8008de4:	4632      	mov	r2, r6
 8008de6:	4649      	mov	r1, r9
 8008de8:	4640      	mov	r0, r8
 8008dea:	47d0      	blx	sl
 8008dec:	3001      	adds	r0, #1
 8008dee:	d09d      	beq.n	8008d2c <_printf_i+0x15c>
 8008df0:	3501      	adds	r5, #1
 8008df2:	68e3      	ldr	r3, [r4, #12]
 8008df4:	9903      	ldr	r1, [sp, #12]
 8008df6:	1a5b      	subs	r3, r3, r1
 8008df8:	42ab      	cmp	r3, r5
 8008dfa:	dcf2      	bgt.n	8008de2 <_printf_i+0x212>
 8008dfc:	e7eb      	b.n	8008dd6 <_printf_i+0x206>
 8008dfe:	2500      	movs	r5, #0
 8008e00:	f104 0619 	add.w	r6, r4, #25
 8008e04:	e7f5      	b.n	8008df2 <_printf_i+0x222>
 8008e06:	bf00      	nop
 8008e08:	08012b4f 	.word	0x08012b4f
 8008e0c:	08012b60 	.word	0x08012b60

08008e10 <fiprintf>:
 8008e10:	b40e      	push	{r1, r2, r3}
 8008e12:	b503      	push	{r0, r1, lr}
 8008e14:	4601      	mov	r1, r0
 8008e16:	ab03      	add	r3, sp, #12
 8008e18:	4805      	ldr	r0, [pc, #20]	@ (8008e30 <fiprintf+0x20>)
 8008e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e1e:	6800      	ldr	r0, [r0, #0]
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	f000 f903 	bl	800902c <_vfiprintf_r>
 8008e26:	b002      	add	sp, #8
 8008e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e2c:	b003      	add	sp, #12
 8008e2e:	4770      	bx	lr
 8008e30:	20000220 	.word	0x20000220

08008e34 <__swhatbuf_r>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	b096      	sub	sp, #88	@ 0x58
 8008e40:	4615      	mov	r5, r2
 8008e42:	461e      	mov	r6, r3
 8008e44:	da0d      	bge.n	8008e62 <__swhatbuf_r+0x2e>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	bf14      	ite	ne
 8008e52:	2340      	movne	r3, #64	@ 0x40
 8008e54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e58:	2000      	movs	r0, #0
 8008e5a:	6031      	str	r1, [r6, #0]
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	b016      	add	sp, #88	@ 0x58
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	466a      	mov	r2, sp
 8008e64:	f000 f862 	bl	8008f2c <_fstat_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	dbec      	blt.n	8008e46 <__swhatbuf_r+0x12>
 8008e6c:	9901      	ldr	r1, [sp, #4]
 8008e6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e76:	4259      	negs	r1, r3
 8008e78:	4159      	adcs	r1, r3
 8008e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e7e:	e7eb      	b.n	8008e58 <__swhatbuf_r+0x24>

08008e80 <__smakebuf_r>:
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e84:	079d      	lsls	r5, r3, #30
 8008e86:	4606      	mov	r6, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d507      	bpl.n	8008e9c <__smakebuf_r+0x1c>
 8008e8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2301      	movs	r3, #1
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	b003      	add	sp, #12
 8008e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f7ff ffc8 	bl	8008e34 <__swhatbuf_r>
 8008ea4:	9f00      	ldr	r7, [sp, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7fe ff82 	bl	8007db4 <_malloc_r>
 8008eb0:	b948      	cbnz	r0, 8008ec6 <__smakebuf_r+0x46>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	059a      	lsls	r2, r3, #22
 8008eb8:	d4ee      	bmi.n	8008e98 <__smakebuf_r+0x18>
 8008eba:	f023 0303 	bic.w	r3, r3, #3
 8008ebe:	f043 0302 	orr.w	r3, r3, #2
 8008ec2:	81a3      	strh	r3, [r4, #12]
 8008ec4:	e7e2      	b.n	8008e8c <__smakebuf_r+0xc>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	6020      	str	r0, [r4, #0]
 8008eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ed6:	b15b      	cbz	r3, 8008ef0 <__smakebuf_r+0x70>
 8008ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f837 	bl	8008f50 <_isatty_r>
 8008ee2:	b128      	cbz	r0, 8008ef0 <__smakebuf_r+0x70>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	431d      	orrs	r5, r3
 8008ef4:	81a5      	strh	r5, [r4, #12]
 8008ef6:	e7cf      	b.n	8008e98 <__smakebuf_r+0x18>

08008ef8 <memmove>:
 8008ef8:	4288      	cmp	r0, r1
 8008efa:	b510      	push	{r4, lr}
 8008efc:	eb01 0402 	add.w	r4, r1, r2
 8008f00:	d902      	bls.n	8008f08 <memmove+0x10>
 8008f02:	4284      	cmp	r4, r0
 8008f04:	4623      	mov	r3, r4
 8008f06:	d807      	bhi.n	8008f18 <memmove+0x20>
 8008f08:	1e43      	subs	r3, r0, #1
 8008f0a:	42a1      	cmp	r1, r4
 8008f0c:	d008      	beq.n	8008f20 <memmove+0x28>
 8008f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f16:	e7f8      	b.n	8008f0a <memmove+0x12>
 8008f18:	4402      	add	r2, r0
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	428a      	cmp	r2, r1
 8008f1e:	d100      	bne.n	8008f22 <memmove+0x2a>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f2a:	e7f7      	b.n	8008f1c <memmove+0x24>

08008f2c <_fstat_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d07      	ldr	r5, [pc, #28]	@ (8008f4c <_fstat_r+0x20>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	4611      	mov	r1, r2
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	f7f9 f8d3 	bl	80020e4 <_fstat>
 8008f3e:	1c43      	adds	r3, r0, #1
 8008f40:	d102      	bne.n	8008f48 <_fstat_r+0x1c>
 8008f42:	682b      	ldr	r3, [r5, #0]
 8008f44:	b103      	cbz	r3, 8008f48 <_fstat_r+0x1c>
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	bd38      	pop	{r3, r4, r5, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20014fd0 	.word	0x20014fd0

08008f50 <_isatty_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d06      	ldr	r5, [pc, #24]	@ (8008f6c <_isatty_r+0x1c>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f9 f8d2 	bl	8002104 <_isatty>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_isatty_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_isatty_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	20014fd0 	.word	0x20014fd0

08008f70 <abort>:
 8008f70:	b508      	push	{r3, lr}
 8008f72:	2006      	movs	r0, #6
 8008f74:	f000 fa2e 	bl	80093d4 <raise>
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7f9 f863 	bl	8002044 <_exit>

08008f7e <_realloc_r>:
 8008f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	4680      	mov	r8, r0
 8008f84:	4615      	mov	r5, r2
 8008f86:	460c      	mov	r4, r1
 8008f88:	b921      	cbnz	r1, 8008f94 <_realloc_r+0x16>
 8008f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	4611      	mov	r1, r2
 8008f90:	f7fe bf10 	b.w	8007db4 <_malloc_r>
 8008f94:	b92a      	cbnz	r2, 8008fa2 <_realloc_r+0x24>
 8008f96:	f7ff fc0b 	bl	80087b0 <_free_r>
 8008f9a:	2400      	movs	r4, #0
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa2:	f000 fa33 	bl	800940c <_malloc_usable_size_r>
 8008fa6:	4285      	cmp	r5, r0
 8008fa8:	4606      	mov	r6, r0
 8008faa:	d802      	bhi.n	8008fb2 <_realloc_r+0x34>
 8008fac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fb0:	d8f4      	bhi.n	8008f9c <_realloc_r+0x1e>
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	f7fe fefd 	bl	8007db4 <_malloc_r>
 8008fba:	4607      	mov	r7, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d0ec      	beq.n	8008f9a <_realloc_r+0x1c>
 8008fc0:	42b5      	cmp	r5, r6
 8008fc2:	462a      	mov	r2, r5
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	bf28      	it	cs
 8008fc8:	4632      	movcs	r2, r6
 8008fca:	f7ff fbc4 	bl	8008756 <memcpy>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	f7ff fbed 	bl	80087b0 <_free_r>
 8008fd6:	463c      	mov	r4, r7
 8008fd8:	e7e0      	b.n	8008f9c <_realloc_r+0x1e>

08008fda <__sfputc_r>:
 8008fda:	6893      	ldr	r3, [r2, #8]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	b410      	push	{r4}
 8008fe2:	6093      	str	r3, [r2, #8]
 8008fe4:	da08      	bge.n	8008ff8 <__sfputc_r+0x1e>
 8008fe6:	6994      	ldr	r4, [r2, #24]
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	db01      	blt.n	8008ff0 <__sfputc_r+0x16>
 8008fec:	290a      	cmp	r1, #10
 8008fee:	d103      	bne.n	8008ff8 <__sfputc_r+0x1e>
 8008ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ff4:	f000 b932 	b.w	800925c <__swbuf_r>
 8008ff8:	6813      	ldr	r3, [r2, #0]
 8008ffa:	1c58      	adds	r0, r3, #1
 8008ffc:	6010      	str	r0, [r2, #0]
 8008ffe:	7019      	strb	r1, [r3, #0]
 8009000:	4608      	mov	r0, r1
 8009002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009006:	4770      	bx	lr

08009008 <__sfputs_r>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	4606      	mov	r6, r0
 800900c:	460f      	mov	r7, r1
 800900e:	4614      	mov	r4, r2
 8009010:	18d5      	adds	r5, r2, r3
 8009012:	42ac      	cmp	r4, r5
 8009014:	d101      	bne.n	800901a <__sfputs_r+0x12>
 8009016:	2000      	movs	r0, #0
 8009018:	e007      	b.n	800902a <__sfputs_r+0x22>
 800901a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901e:	463a      	mov	r2, r7
 8009020:	4630      	mov	r0, r6
 8009022:	f7ff ffda 	bl	8008fda <__sfputc_r>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d1f3      	bne.n	8009012 <__sfputs_r+0xa>
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800902c <_vfiprintf_r>:
 800902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009030:	460d      	mov	r5, r1
 8009032:	b09d      	sub	sp, #116	@ 0x74
 8009034:	4614      	mov	r4, r2
 8009036:	4698      	mov	r8, r3
 8009038:	4606      	mov	r6, r0
 800903a:	b118      	cbz	r0, 8009044 <_vfiprintf_r+0x18>
 800903c:	6a03      	ldr	r3, [r0, #32]
 800903e:	b90b      	cbnz	r3, 8009044 <_vfiprintf_r+0x18>
 8009040:	f7ff f978 	bl	8008334 <__sinit>
 8009044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009046:	07d9      	lsls	r1, r3, #31
 8009048:	d405      	bmi.n	8009056 <_vfiprintf_r+0x2a>
 800904a:	89ab      	ldrh	r3, [r5, #12]
 800904c:	059a      	lsls	r2, r3, #22
 800904e:	d402      	bmi.n	8009056 <_vfiprintf_r+0x2a>
 8009050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009052:	f7ff fb7e 	bl	8008752 <__retarget_lock_acquire_recursive>
 8009056:	89ab      	ldrh	r3, [r5, #12]
 8009058:	071b      	lsls	r3, r3, #28
 800905a:	d501      	bpl.n	8009060 <_vfiprintf_r+0x34>
 800905c:	692b      	ldr	r3, [r5, #16]
 800905e:	b99b      	cbnz	r3, 8009088 <_vfiprintf_r+0x5c>
 8009060:	4629      	mov	r1, r5
 8009062:	4630      	mov	r0, r6
 8009064:	f000 f938 	bl	80092d8 <__swsetup_r>
 8009068:	b170      	cbz	r0, 8009088 <_vfiprintf_r+0x5c>
 800906a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800906c:	07dc      	lsls	r4, r3, #31
 800906e:	d504      	bpl.n	800907a <_vfiprintf_r+0x4e>
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	b01d      	add	sp, #116	@ 0x74
 8009076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	0598      	lsls	r0, r3, #22
 800907e:	d4f7      	bmi.n	8009070 <_vfiprintf_r+0x44>
 8009080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009082:	f7ff fb67 	bl	8008754 <__retarget_lock_release_recursive>
 8009086:	e7f3      	b.n	8009070 <_vfiprintf_r+0x44>
 8009088:	2300      	movs	r3, #0
 800908a:	9309      	str	r3, [sp, #36]	@ 0x24
 800908c:	2320      	movs	r3, #32
 800908e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009092:	f8cd 800c 	str.w	r8, [sp, #12]
 8009096:	2330      	movs	r3, #48	@ 0x30
 8009098:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009248 <_vfiprintf_r+0x21c>
 800909c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090a0:	f04f 0901 	mov.w	r9, #1
 80090a4:	4623      	mov	r3, r4
 80090a6:	469a      	mov	sl, r3
 80090a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ac:	b10a      	cbz	r2, 80090b2 <_vfiprintf_r+0x86>
 80090ae:	2a25      	cmp	r2, #37	@ 0x25
 80090b0:	d1f9      	bne.n	80090a6 <_vfiprintf_r+0x7a>
 80090b2:	ebba 0b04 	subs.w	fp, sl, r4
 80090b6:	d00b      	beq.n	80090d0 <_vfiprintf_r+0xa4>
 80090b8:	465b      	mov	r3, fp
 80090ba:	4622      	mov	r2, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ffa2 	bl	8009008 <__sfputs_r>
 80090c4:	3001      	adds	r0, #1
 80090c6:	f000 80a7 	beq.w	8009218 <_vfiprintf_r+0x1ec>
 80090ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090cc:	445a      	add	r2, fp
 80090ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80090d0:	f89a 3000 	ldrb.w	r3, [sl]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 809f 	beq.w	8009218 <_vfiprintf_r+0x1ec>
 80090da:	2300      	movs	r3, #0
 80090dc:	f04f 32ff 	mov.w	r2, #4294967295
 80090e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e4:	f10a 0a01 	add.w	sl, sl, #1
 80090e8:	9304      	str	r3, [sp, #16]
 80090ea:	9307      	str	r3, [sp, #28]
 80090ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80090f2:	4654      	mov	r4, sl
 80090f4:	2205      	movs	r2, #5
 80090f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fa:	4853      	ldr	r0, [pc, #332]	@ (8009248 <_vfiprintf_r+0x21c>)
 80090fc:	f7f7 f870 	bl	80001e0 <memchr>
 8009100:	9a04      	ldr	r2, [sp, #16]
 8009102:	b9d8      	cbnz	r0, 800913c <_vfiprintf_r+0x110>
 8009104:	06d1      	lsls	r1, r2, #27
 8009106:	bf44      	itt	mi
 8009108:	2320      	movmi	r3, #32
 800910a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800910e:	0713      	lsls	r3, r2, #28
 8009110:	bf44      	itt	mi
 8009112:	232b      	movmi	r3, #43	@ 0x2b
 8009114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009118:	f89a 3000 	ldrb.w	r3, [sl]
 800911c:	2b2a      	cmp	r3, #42	@ 0x2a
 800911e:	d015      	beq.n	800914c <_vfiprintf_r+0x120>
 8009120:	9a07      	ldr	r2, [sp, #28]
 8009122:	4654      	mov	r4, sl
 8009124:	2000      	movs	r0, #0
 8009126:	f04f 0c0a 	mov.w	ip, #10
 800912a:	4621      	mov	r1, r4
 800912c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009130:	3b30      	subs	r3, #48	@ 0x30
 8009132:	2b09      	cmp	r3, #9
 8009134:	d94b      	bls.n	80091ce <_vfiprintf_r+0x1a2>
 8009136:	b1b0      	cbz	r0, 8009166 <_vfiprintf_r+0x13a>
 8009138:	9207      	str	r2, [sp, #28]
 800913a:	e014      	b.n	8009166 <_vfiprintf_r+0x13a>
 800913c:	eba0 0308 	sub.w	r3, r0, r8
 8009140:	fa09 f303 	lsl.w	r3, r9, r3
 8009144:	4313      	orrs	r3, r2
 8009146:	9304      	str	r3, [sp, #16]
 8009148:	46a2      	mov	sl, r4
 800914a:	e7d2      	b.n	80090f2 <_vfiprintf_r+0xc6>
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	1d19      	adds	r1, r3, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	9103      	str	r1, [sp, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	bfbb      	ittet	lt
 8009158:	425b      	neglt	r3, r3
 800915a:	f042 0202 	orrlt.w	r2, r2, #2
 800915e:	9307      	strge	r3, [sp, #28]
 8009160:	9307      	strlt	r3, [sp, #28]
 8009162:	bfb8      	it	lt
 8009164:	9204      	strlt	r2, [sp, #16]
 8009166:	7823      	ldrb	r3, [r4, #0]
 8009168:	2b2e      	cmp	r3, #46	@ 0x2e
 800916a:	d10a      	bne.n	8009182 <_vfiprintf_r+0x156>
 800916c:	7863      	ldrb	r3, [r4, #1]
 800916e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009170:	d132      	bne.n	80091d8 <_vfiprintf_r+0x1ac>
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	1d1a      	adds	r2, r3, #4
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	9203      	str	r2, [sp, #12]
 800917a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800917e:	3402      	adds	r4, #2
 8009180:	9305      	str	r3, [sp, #20]
 8009182:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009258 <_vfiprintf_r+0x22c>
 8009186:	7821      	ldrb	r1, [r4, #0]
 8009188:	2203      	movs	r2, #3
 800918a:	4650      	mov	r0, sl
 800918c:	f7f7 f828 	bl	80001e0 <memchr>
 8009190:	b138      	cbz	r0, 80091a2 <_vfiprintf_r+0x176>
 8009192:	9b04      	ldr	r3, [sp, #16]
 8009194:	eba0 000a 	sub.w	r0, r0, sl
 8009198:	2240      	movs	r2, #64	@ 0x40
 800919a:	4082      	lsls	r2, r0
 800919c:	4313      	orrs	r3, r2
 800919e:	3401      	adds	r4, #1
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a6:	4829      	ldr	r0, [pc, #164]	@ (800924c <_vfiprintf_r+0x220>)
 80091a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091ac:	2206      	movs	r2, #6
 80091ae:	f7f7 f817 	bl	80001e0 <memchr>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d03f      	beq.n	8009236 <_vfiprintf_r+0x20a>
 80091b6:	4b26      	ldr	r3, [pc, #152]	@ (8009250 <_vfiprintf_r+0x224>)
 80091b8:	bb1b      	cbnz	r3, 8009202 <_vfiprintf_r+0x1d6>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	3307      	adds	r3, #7
 80091be:	f023 0307 	bic.w	r3, r3, #7
 80091c2:	3308      	adds	r3, #8
 80091c4:	9303      	str	r3, [sp, #12]
 80091c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c8:	443b      	add	r3, r7
 80091ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80091cc:	e76a      	b.n	80090a4 <_vfiprintf_r+0x78>
 80091ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d2:	460c      	mov	r4, r1
 80091d4:	2001      	movs	r0, #1
 80091d6:	e7a8      	b.n	800912a <_vfiprintf_r+0xfe>
 80091d8:	2300      	movs	r3, #0
 80091da:	3401      	adds	r4, #1
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	4619      	mov	r1, r3
 80091e0:	f04f 0c0a 	mov.w	ip, #10
 80091e4:	4620      	mov	r0, r4
 80091e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ea:	3a30      	subs	r2, #48	@ 0x30
 80091ec:	2a09      	cmp	r2, #9
 80091ee:	d903      	bls.n	80091f8 <_vfiprintf_r+0x1cc>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0c6      	beq.n	8009182 <_vfiprintf_r+0x156>
 80091f4:	9105      	str	r1, [sp, #20]
 80091f6:	e7c4      	b.n	8009182 <_vfiprintf_r+0x156>
 80091f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fc:	4604      	mov	r4, r0
 80091fe:	2301      	movs	r3, #1
 8009200:	e7f0      	b.n	80091e4 <_vfiprintf_r+0x1b8>
 8009202:	ab03      	add	r3, sp, #12
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	462a      	mov	r2, r5
 8009208:	4b12      	ldr	r3, [pc, #72]	@ (8009254 <_vfiprintf_r+0x228>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	4630      	mov	r0, r6
 800920e:	f3af 8000 	nop.w
 8009212:	4607      	mov	r7, r0
 8009214:	1c78      	adds	r0, r7, #1
 8009216:	d1d6      	bne.n	80091c6 <_vfiprintf_r+0x19a>
 8009218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800921a:	07d9      	lsls	r1, r3, #31
 800921c:	d405      	bmi.n	800922a <_vfiprintf_r+0x1fe>
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	059a      	lsls	r2, r3, #22
 8009222:	d402      	bmi.n	800922a <_vfiprintf_r+0x1fe>
 8009224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009226:	f7ff fa95 	bl	8008754 <__retarget_lock_release_recursive>
 800922a:	89ab      	ldrh	r3, [r5, #12]
 800922c:	065b      	lsls	r3, r3, #25
 800922e:	f53f af1f 	bmi.w	8009070 <_vfiprintf_r+0x44>
 8009232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009234:	e71e      	b.n	8009074 <_vfiprintf_r+0x48>
 8009236:	ab03      	add	r3, sp, #12
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	462a      	mov	r2, r5
 800923c:	4b05      	ldr	r3, [pc, #20]	@ (8009254 <_vfiprintf_r+0x228>)
 800923e:	a904      	add	r1, sp, #16
 8009240:	4630      	mov	r0, r6
 8009242:	f7ff fcc5 	bl	8008bd0 <_printf_i>
 8009246:	e7e4      	b.n	8009212 <_vfiprintf_r+0x1e6>
 8009248:	08012b3e 	.word	0x08012b3e
 800924c:	08012b48 	.word	0x08012b48
 8009250:	00000000 	.word	0x00000000
 8009254:	08009009 	.word	0x08009009
 8009258:	08012b44 	.word	0x08012b44

0800925c <__swbuf_r>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	460e      	mov	r6, r1
 8009260:	4614      	mov	r4, r2
 8009262:	4605      	mov	r5, r0
 8009264:	b118      	cbz	r0, 800926e <__swbuf_r+0x12>
 8009266:	6a03      	ldr	r3, [r0, #32]
 8009268:	b90b      	cbnz	r3, 800926e <__swbuf_r+0x12>
 800926a:	f7ff f863 	bl	8008334 <__sinit>
 800926e:	69a3      	ldr	r3, [r4, #24]
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	071a      	lsls	r2, r3, #28
 8009276:	d501      	bpl.n	800927c <__swbuf_r+0x20>
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	b943      	cbnz	r3, 800928e <__swbuf_r+0x32>
 800927c:	4621      	mov	r1, r4
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f82a 	bl	80092d8 <__swsetup_r>
 8009284:	b118      	cbz	r0, 800928e <__swbuf_r+0x32>
 8009286:	f04f 37ff 	mov.w	r7, #4294967295
 800928a:	4638      	mov	r0, r7
 800928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	1a98      	subs	r0, r3, r2
 8009294:	6963      	ldr	r3, [r4, #20]
 8009296:	b2f6      	uxtb	r6, r6
 8009298:	4283      	cmp	r3, r0
 800929a:	4637      	mov	r7, r6
 800929c:	dc05      	bgt.n	80092aa <__swbuf_r+0x4e>
 800929e:	4621      	mov	r1, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7fe ff93 	bl	80081cc <_fflush_r>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d1ed      	bne.n	8009286 <__swbuf_r+0x2a>
 80092aa:	68a3      	ldr	r3, [r4, #8]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	60a3      	str	r3, [r4, #8]
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	701e      	strb	r6, [r3, #0]
 80092b8:	6962      	ldr	r2, [r4, #20]
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	429a      	cmp	r2, r3
 80092be:	d004      	beq.n	80092ca <__swbuf_r+0x6e>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	07db      	lsls	r3, r3, #31
 80092c4:	d5e1      	bpl.n	800928a <__swbuf_r+0x2e>
 80092c6:	2e0a      	cmp	r6, #10
 80092c8:	d1df      	bne.n	800928a <__swbuf_r+0x2e>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f7fe ff7d 	bl	80081cc <_fflush_r>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d0d9      	beq.n	800928a <__swbuf_r+0x2e>
 80092d6:	e7d6      	b.n	8009286 <__swbuf_r+0x2a>

080092d8 <__swsetup_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4b29      	ldr	r3, [pc, #164]	@ (8009380 <__swsetup_r+0xa8>)
 80092dc:	4605      	mov	r5, r0
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	460c      	mov	r4, r1
 80092e2:	b118      	cbz	r0, 80092ec <__swsetup_r+0x14>
 80092e4:	6a03      	ldr	r3, [r0, #32]
 80092e6:	b90b      	cbnz	r3, 80092ec <__swsetup_r+0x14>
 80092e8:	f7ff f824 	bl	8008334 <__sinit>
 80092ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f0:	0719      	lsls	r1, r3, #28
 80092f2:	d422      	bmi.n	800933a <__swsetup_r+0x62>
 80092f4:	06da      	lsls	r2, r3, #27
 80092f6:	d407      	bmi.n	8009308 <__swsetup_r+0x30>
 80092f8:	2209      	movs	r2, #9
 80092fa:	602a      	str	r2, [r5, #0]
 80092fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	f04f 30ff 	mov.w	r0, #4294967295
 8009306:	e033      	b.n	8009370 <__swsetup_r+0x98>
 8009308:	0758      	lsls	r0, r3, #29
 800930a:	d512      	bpl.n	8009332 <__swsetup_r+0x5a>
 800930c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800930e:	b141      	cbz	r1, 8009322 <__swsetup_r+0x4a>
 8009310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009314:	4299      	cmp	r1, r3
 8009316:	d002      	beq.n	800931e <__swsetup_r+0x46>
 8009318:	4628      	mov	r0, r5
 800931a:	f7ff fa49 	bl	80087b0 <_free_r>
 800931e:	2300      	movs	r3, #0
 8009320:	6363      	str	r3, [r4, #52]	@ 0x34
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	2300      	movs	r3, #0
 800932c:	6063      	str	r3, [r4, #4]
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f043 0308 	orr.w	r3, r3, #8
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	b94b      	cbnz	r3, 8009352 <__swsetup_r+0x7a>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009348:	d003      	beq.n	8009352 <__swsetup_r+0x7a>
 800934a:	4621      	mov	r1, r4
 800934c:	4628      	mov	r0, r5
 800934e:	f7ff fd97 	bl	8008e80 <__smakebuf_r>
 8009352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009356:	f013 0201 	ands.w	r2, r3, #1
 800935a:	d00a      	beq.n	8009372 <__swsetup_r+0x9a>
 800935c:	2200      	movs	r2, #0
 800935e:	60a2      	str	r2, [r4, #8]
 8009360:	6962      	ldr	r2, [r4, #20]
 8009362:	4252      	negs	r2, r2
 8009364:	61a2      	str	r2, [r4, #24]
 8009366:	6922      	ldr	r2, [r4, #16]
 8009368:	b942      	cbnz	r2, 800937c <__swsetup_r+0xa4>
 800936a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800936e:	d1c5      	bne.n	80092fc <__swsetup_r+0x24>
 8009370:	bd38      	pop	{r3, r4, r5, pc}
 8009372:	0799      	lsls	r1, r3, #30
 8009374:	bf58      	it	pl
 8009376:	6962      	ldrpl	r2, [r4, #20]
 8009378:	60a2      	str	r2, [r4, #8]
 800937a:	e7f4      	b.n	8009366 <__swsetup_r+0x8e>
 800937c:	2000      	movs	r0, #0
 800937e:	e7f7      	b.n	8009370 <__swsetup_r+0x98>
 8009380:	20000220 	.word	0x20000220

08009384 <_raise_r>:
 8009384:	291f      	cmp	r1, #31
 8009386:	b538      	push	{r3, r4, r5, lr}
 8009388:	4605      	mov	r5, r0
 800938a:	460c      	mov	r4, r1
 800938c:	d904      	bls.n	8009398 <_raise_r+0x14>
 800938e:	2316      	movs	r3, #22
 8009390:	6003      	str	r3, [r0, #0]
 8009392:	f04f 30ff 	mov.w	r0, #4294967295
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800939a:	b112      	cbz	r2, 80093a2 <_raise_r+0x1e>
 800939c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093a0:	b94b      	cbnz	r3, 80093b6 <_raise_r+0x32>
 80093a2:	4628      	mov	r0, r5
 80093a4:	f000 f830 	bl	8009408 <_getpid_r>
 80093a8:	4622      	mov	r2, r4
 80093aa:	4601      	mov	r1, r0
 80093ac:	4628      	mov	r0, r5
 80093ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b2:	f000 b817 	b.w	80093e4 <_kill_r>
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d00a      	beq.n	80093d0 <_raise_r+0x4c>
 80093ba:	1c59      	adds	r1, r3, #1
 80093bc:	d103      	bne.n	80093c6 <_raise_r+0x42>
 80093be:	2316      	movs	r3, #22
 80093c0:	6003      	str	r3, [r0, #0]
 80093c2:	2001      	movs	r0, #1
 80093c4:	e7e7      	b.n	8009396 <_raise_r+0x12>
 80093c6:	2100      	movs	r1, #0
 80093c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093cc:	4620      	mov	r0, r4
 80093ce:	4798      	blx	r3
 80093d0:	2000      	movs	r0, #0
 80093d2:	e7e0      	b.n	8009396 <_raise_r+0x12>

080093d4 <raise>:
 80093d4:	4b02      	ldr	r3, [pc, #8]	@ (80093e0 <raise+0xc>)
 80093d6:	4601      	mov	r1, r0
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	f7ff bfd3 	b.w	8009384 <_raise_r>
 80093de:	bf00      	nop
 80093e0:	20000220 	.word	0x20000220

080093e4 <_kill_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d07      	ldr	r5, [pc, #28]	@ (8009404 <_kill_r+0x20>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	4611      	mov	r1, r2
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	f7f8 fe17 	bl	8002024 <_kill>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	d102      	bne.n	8009400 <_kill_r+0x1c>
 80093fa:	682b      	ldr	r3, [r5, #0]
 80093fc:	b103      	cbz	r3, 8009400 <_kill_r+0x1c>
 80093fe:	6023      	str	r3, [r4, #0]
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	20014fd0 	.word	0x20014fd0

08009408 <_getpid_r>:
 8009408:	f7f8 be04 	b.w	8002014 <_getpid>

0800940c <_malloc_usable_size_r>:
 800940c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009410:	1f18      	subs	r0, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	bfbc      	itt	lt
 8009416:	580b      	ldrlt	r3, [r1, r0]
 8009418:	18c0      	addlt	r0, r0, r3
 800941a:	4770      	bx	lr

0800941c <_init>:
 800941c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941e:	bf00      	nop
 8009420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009422:	bc08      	pop	{r3}
 8009424:	469e      	mov	lr, r3
 8009426:	4770      	bx	lr

08009428 <_fini>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	bf00      	nop
 800942c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942e:	bc08      	pop	{r3}
 8009430:	469e      	mov	lr, r3
 8009432:	4770      	bx	lr
