
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008608  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009758  08008798  08008798  00009798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ef0  08011ef0  00013270  2**0
                  CONTENTS
  4 .ARM          00000008  08011ef0  08011ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ef8  08011ef8  00013270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ef8  08011ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011efc  08011efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08011f00  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad20  20000270  08012170  00013270  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000af90  08012170  00013f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013270  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136fd  00000000  00000000  000132a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ab  00000000  00000000  0002699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0002a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1c  00000000  00000000  0002b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002903f  00000000  00000000  0002bc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001656c  00000000  00000000  00054c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edfc1  00000000  00000000  0006b207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001591c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  0015920c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008780 	.word	0x08008780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08008780 	.word	0x08008780

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ring_buffer_setup>:
ring_buffer txRingBuffer;
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];

void ring_buffer_setup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	60da      	str	r2, [r3, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <USART_kbhit>:

uint8_t USART_kbhit(){
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <USART_kbhit+0x20>)
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <USART_kbhit+0x20>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d101      	bne.n	80005d8 <USART_kbhit+0x14>
		return 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <USART_kbhit+0x16>
	}else{
		return 1;
 80005d8:	2301      	movs	r3, #1
	}
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	2000028c 	.word	0x2000028c

080005e8 <USART_getchar>:

int16_t USART_getchar() {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <USART_getchar+0x4c>)
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <USART_getchar+0x4c>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d013      	beq.n	8000622 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <USART_getchar+0x4c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <USART_getchar+0x50>)
 8000600:	5cd3      	ldrb	r3, [r2, r3]
 8000602:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <USART_getchar+0x4c>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <USART_getchar+0x4c>)
 800060c:	68d2      	ldr	r2, [r2, #12]
 800060e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	4a06      	ldr	r2, [pc, #24]	@ (8000634 <USART_getchar+0x4c>)
 800061a:	6053      	str	r3, [r2, #4]
        return tmp;
 800061c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000620:	e001      	b.n	8000626 <USART_getchar+0x3e>
    }
    return -1; // Buffer empty
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000028c 	.word	0x2000028c
 8000638:	20000aac 	.word	0x20000aac

0800063c <USART_fsend>:
        	txRingBuffer.readIndex = idx;
        }

        __enable_irq(); //ponownie aktywujemy przerwania
}
void USART_fsend(char* format,...){
 800063c:	b40f      	push	{r0, r1, r2, r3}
 800063e:	b580      	push	{r7, lr}
 8000640:	b0a4      	sub	sp, #144	@ 0x90
 8000642:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000644:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000648:	607b      	str	r3, [r7, #4]
	  vsprintf(tmp_rs,format,arglist);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000654:	4618      	mov	r0, r3
 8000656:	f007 f863 	bl	8007720 <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <USART_fsend+0xe0>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000666:	e016      	b.n	8000696 <USART_fsend+0x5a>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	f107 010c 	add.w	r1, r7, #12
 800066e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000672:	440a      	add	r2, r1
 8000674:	7811      	ldrb	r1, [r2, #0]
 8000676:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <USART_fsend+0xe4>)
 8000678:	54d1      	strb	r1, [r2, r3]
		  idx++;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3301      	adds	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000686:	db01      	blt.n	800068c <USART_fsend+0x50>
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 800068c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000690:	3301      	adds	r3, #1
 8000692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fda2 	bl	80001e4 <strlen>
 80006a0:	4602      	mov	r2, r0
 80006a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d8de      	bhi.n	8000668 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006aa:	b672      	cpsid	i
}
 80006ac:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <USART_fsend+0xe0>)
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <USART_fsend+0xe0>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d123      	bne.n	8000702 <USART_fsend+0xc6>
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <USART_fsend+0xe8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c4:	2b80      	cmp	r3, #128	@ 0x80
 80006c6:	d11c      	bne.n	8000702 <USART_fsend+0xc6>
		  txRingBuffer.writeIndex=idx;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <USART_fsend+0xe0>)
 80006ce:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <USART_fsend+0xe0>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <USART_fsend+0xe4>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	70fb      	strb	r3, [r7, #3]
		  txRingBuffer.readIndex++;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <USART_fsend+0xe0>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <USART_fsend+0xe0>)
 80006e2:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <USART_fsend+0xe0>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006ec:	d302      	bcc.n	80006f4 <USART_fsend+0xb8>
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <USART_fsend+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006f4:	1cfb      	adds	r3, r7, #3
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	480a      	ldr	r0, [pc, #40]	@ (8000724 <USART_fsend+0xe8>)
 80006fc:	f003 ff0c 	bl	8004518 <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000700:	e003      	b.n	800070a <USART_fsend+0xce>
	  }else{
		  txRingBuffer.writeIndex=idx;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	461a      	mov	r2, r3
 8000706:	4b05      	ldr	r3, [pc, #20]	@ (800071c <USART_fsend+0xe0>)
 8000708:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800070a:	b662      	cpsie	i
}
 800070c:	bf00      	nop
	  }
	  __enable_irq();
}
 800070e:	bf00      	nop
 8000710:	3790      	adds	r7, #144	@ 0x90
 8000712:	46bd      	mov	sp, r7
 8000714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000718:	b004      	add	sp, #16
 800071a:	4770      	bx	lr
 800071c:	2000029c 	.word	0x2000029c
 8000720:	200002ac 	.word	0x200002ac
 8000724:	2000adb8 	.word	0x2000adb8

08000728 <calculate_crc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculate_crc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	@ 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000738:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	e019      	b.n	8000774 <calculate_crc16+0x4c>
        uint8_t byte = data[i];
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 800074a:	8bfb      	ldrh	r3, [r7, #30]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	4053      	eors	r3, r2
 8000756:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000758:	8bfb      	ldrh	r3, [r7, #30]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	490f      	ldr	r1, [pc, #60]	@ (80007a0 <calculate_crc16+0x78>)
 8000762:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4053      	eors	r3, r2
 800076a:	b21b      	sxth	r3, r3
 800076c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	3301      	adds	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3e1      	bcc.n	8000740 <calculate_crc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 800077c:	8bfb      	ldrh	r3, [r7, #30]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	8bfa      	ldrh	r2, [r7, #30]
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	3724      	adds	r7, #36	@ 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000000 	.word	0x20000000

080007a4 <parse_color>:
uint8_t received_char;
Receive_Frame ramka;

//=========================FUNKCJE POMOCNICZE=============================
//TODO do sprawdzenia
bool parse_color(const char* color_name, Color_t* color) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e016      	b.n	80007e2 <parse_color+0x3e>
        if (strcmp(color_name, color_map[i].name) == 0) {
 80007b4:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <parse_color+0x50>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007bc:	4619      	mov	r1, r3
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fd06 	bl	80001d0 <strcmp>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d108      	bne.n	80007dc <parse_color+0x38>
            *color = color_map[i].value;
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <parse_color+0x50>)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	889a      	ldrh	r2, [r3, #4]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	801a      	strh	r2, [r3, #0]
            return true;
 80007d8:	2301      	movs	r3, #1
 80007da:	e006      	b.n	80007ea <parse_color+0x46>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b07      	cmp	r3, #7
 80007e6:	d9e5      	bls.n	80007b4 <parse_color+0x10>
        }
    }
    return false;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08008888 	.word	0x08008888

080007f8 <reset_frame_state>:

static void reset_frame_state() {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
    in_frame = false;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <reset_frame_state+0x20>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <reset_frame_state+0x24>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <reset_frame_state+0x28>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	20000cc0 	.word	0x20000cc0
 800081c:	20000cba 	.word	0x20000cba
 8000820:	20000cbc 	.word	0x20000cbc

08000824 <parse_parameters>:
	case 'F':
		break;
	}
}
*/
bool parse_parameters(const char* data, const char* format, ...) {
 8000824:	b40e      	push	{r1, r2, r3}
 8000826:	b580      	push	{r7, lr}
 8000828:	b093      	sub	sp, #76	@ 0x4c
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
    if (!data || !format) return false;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <parse_parameters+0x16>
 8000834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <parse_parameters+0x1a>
 800083a:	2300      	movs	r3, #0
 800083c:	e09e      	b.n	800097c <parse_parameters+0x158>

    va_list args;
    va_start(args, format);
 800083e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28

    const char* ptr = data;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	647b      	str	r3, [r7, #68]	@ 0x44
    int value = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	@ 0x40
    bool reading_number = false;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    int param_index = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
    char color_name[32] = {0};
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	619a      	str	r2, [r3, #24]
    int color_index = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	@ 0x34

    while (*ptr != '\0') {
 8000872:	e07d      	b.n	8000970 <parse_parameters+0x14c>
        if (*ptr >= '0' && *ptr <= '9') {
 8000874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b2f      	cmp	r3, #47	@ 0x2f
 800087a:	d912      	bls.n	80008a2 <parse_parameters+0x7e>
 800087c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b39      	cmp	r3, #57	@ 0x39
 8000882:	d80e      	bhi.n	80008a2 <parse_parameters+0x7e>
            value = (value * 10) + (*ptr - '0');
 8000884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	461a      	mov	r2, r3
 8000890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	3b30      	subs	r3, #48	@ 0x30
 8000896:	4413      	add	r3, r2
 8000898:	643b      	str	r3, [r7, #64]	@ 0x40
            reading_number = true;
 800089a:	2301      	movs	r3, #1
 800089c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80008a0:	e063      	b.n	800096a <parse_parameters+0x146>
        }
        else if (*ptr == ',' || *(ptr + 1) == '\0') {
 80008a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b2c      	cmp	r3, #44	@ 0x2c
 80008a8:	d004      	beq.n	80008b4 <parse_parameters+0x90>
 80008aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008ac:	3301      	adds	r3, #1
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d143      	bne.n	800093c <parse_parameters+0x118>
            if (reading_number) {
 80008b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d017      	beq.n	80008ec <parse_parameters+0xc8>
                if (format[param_index] == 'u') {
 80008bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b75      	cmp	r3, #117	@ 0x75
 80008c6:	d108      	bne.n	80008da <parse_parameters+0xb6>
                    uint8_t* param = va_arg(args, uint8_t*);
 80008c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ca:	1d1a      	adds	r2, r3, #4
 80008cc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    *param = (uint8_t)value;
 80008d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008d8:	701a      	strb	r2, [r3, #0]
                }
                value = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	643b      	str	r3, [r7, #64]	@ 0x40
                reading_number = false;
 80008de:	2300      	movs	r3, #0
 80008e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                param_index++;
 80008e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008e6:	3301      	adds	r3, #1
 80008e8:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (reading_number) {
 80008ea:	e03d      	b.n	8000968 <parse_parameters+0x144>
            }
            else if (color_index > 0) {
 80008ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dd3a      	ble.n	8000968 <parse_parameters+0x144>
                color_name[color_index] = '\0';
 80008f2:	f107 0208 	add.w	r2, r7, #8
 80008f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f8:	4413      	add	r3, r2
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
                if (format[param_index] == 's') {
 80008fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000900:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b73      	cmp	r3, #115	@ 0x73
 8000908:	d112      	bne.n	8000930 <parse_parameters+0x10c>
                    uint16_t* color_value = va_arg(args, uint16_t*);
 800090a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800090c:	1d1a      	adds	r2, r3, #4
 800090e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	633b      	str	r3, [r7, #48]	@ 0x30
                    if (!parse_color(color_name, color_value)) {
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff42 	bl	80007a4 <parse_color>
 8000920:	4603      	mov	r3, r0
 8000922:	f083 0301 	eor.w	r3, r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <parse_parameters+0x10c>
                        va_end(args);
                        return false;
 800092c:	2300      	movs	r3, #0
 800092e:	e025      	b.n	800097c <parse_parameters+0x158>
                    }
                }
                color_index = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
                param_index++;
 8000934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000936:	3301      	adds	r3, #1
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (reading_number) {
 800093a:	e015      	b.n	8000968 <parse_parameters+0x144>
            }
        }
        else if (*ptr >= 'A' && *ptr <= 'Z') {
 800093c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b40      	cmp	r3, #64	@ 0x40
 8000942:	d912      	bls.n	800096a <parse_parameters+0x146>
 8000944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b5a      	cmp	r3, #90	@ 0x5a
 800094a:	d80e      	bhi.n	800096a <parse_parameters+0x146>
            color_name[color_index++] = *ptr;
 800094c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	637a      	str	r2, [r7, #52]	@ 0x34
 8000952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	3348      	adds	r3, #72	@ 0x48
 8000958:	443b      	add	r3, r7
 800095a:	f803 2c40 	strb.w	r2, [r3, #-64]
            if (color_index >= sizeof(color_name) - 1) {
 800095e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000960:	2b1e      	cmp	r3, #30
 8000962:	d902      	bls.n	800096a <parse_parameters+0x146>
                va_end(args);
                return false;
 8000964:	2300      	movs	r3, #0
 8000966:	e009      	b.n	800097c <parse_parameters+0x158>
            if (reading_number) {
 8000968:	bf00      	nop
            }
        }
        ptr++;
 800096a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800096c:	3301      	adds	r3, #1
 800096e:	647b      	str	r3, [r7, #68]	@ 0x44
    while (*ptr != '\0') {
 8000970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f47f af7d 	bne.w	8000874 <parse_parameters+0x50>
    }

    va_end(args);
    return true;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	374c      	adds	r7, #76	@ 0x4c
 8000980:	46bd      	mov	sp, r7
 8000982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000986:	b003      	add	sp, #12
 8000988:	4770      	bx	lr
	...

0800098c <executeONK>:

//==========================OBSŁUGA KOMEND================================

//TODO nie dzialla
static void executeONK(Receive_Frame *frame)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af04      	add	r7, sp, #16
 8000992:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	2300      	movs	r3, #0
 800099a:	73bb      	strb	r3, [r7, #14]
 800099c:	2300      	movs	r3, #0
 800099e:	737b      	strb	r3, [r7, #13]
 80009a0:	2300      	movs	r3, #0
 80009a2:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	817b      	strh	r3, [r7, #10]
    if (!parse_parameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	1d58      	adds	r0, r3, #5
 80009ac:	f107 010e 	add.w	r1, r7, #14
 80009b0:	f107 020f 	add.w	r2, r7, #15
 80009b4:	f107 030a 	add.w	r3, r7, #10
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	f107 030d 	add.w	r3, r7, #13
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	460b      	mov	r3, r1
 80009c8:	4917      	ldr	r1, [pc, #92]	@ (8000a28 <executeONK+0x9c>)
 80009ca:	f7ff ff2b 	bl	8000824 <parse_parameters>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d009      	beq.n	80009ee <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3305      	adds	r3, #5
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <executeONK+0xa0>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	@ (8000a30 <executeONK+0xa4>)
 80009e4:	2167      	movs	r1, #103	@ 0x67
 80009e6:	2068      	movs	r0, #104	@ 0x68
 80009e8:	f000 fa74 	bl	8000ed4 <prepareFrame>
 80009ec:	e019      	b.n	8000a22 <executeONK+0x96>
        return;
    }
	switch(filling)
 80009ee:	7b3b      	ldrb	r3, [r7, #12]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <executeONK+0x6e>
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d00a      	beq.n	8000a0e <executeONK+0x82>
 80009f8:	e013      	b.n	8000a22 <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	b218      	sxth	r0, r3
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	b219      	sxth	r1, r3
 8000a02:	7b7b      	ldrb	r3, [r7, #13]
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	897b      	ldrh	r3, [r7, #10]
 8000a08:	f005 ffc8 	bl	800699c <hagl_draw_circle>
		break;
 8000a0c:	e009      	b.n	8000a22 <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	b218      	sxth	r0, r3
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	b219      	sxth	r1, r3
 8000a16:	7b7b      	ldrb	r3, [r7, #13]
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	897b      	ldrh	r3, [r7, #10]
 8000a1c:	f006 f8ed 	bl	8006bfa <hagl_fill_circle>
		break;
 8000a20:	bf00      	nop
	}
}
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	080087d4 	.word	0x080087d4
 8000a2c:	080087dc 	.word	0x080087dc
 8000a30:	080087f0 	.word	0x080087f0

08000a34 <executeONP>:


static void executeONP(Receive_Frame *frame)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b089      	sub	sp, #36	@ 0x24
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	2300      	movs	r3, #0
 8000a42:	73bb      	strb	r3, [r7, #14]
 8000a44:	2300      	movs	r3, #0
 8000a46:	737b      	strb	r3, [r7, #13]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	733b      	strb	r3, [r7, #12]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	813b      	strh	r3, [r7, #8]
	if (!parse_parameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	1d58      	adds	r0, r3, #5
 8000a58:	f107 010e 	add.w	r1, r7, #14
 8000a5c:	f107 020f 	add.w	r2, r7, #15
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	9303      	str	r3, [sp, #12]
 8000a66:	f107 030b 	add.w	r3, r7, #11
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	f107 030d 	add.w	r3, r7, #13
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	491c      	ldr	r1, [pc, #112]	@ (8000aec <executeONP+0xb8>)
 8000a7c:	f7ff fed2 	bl	8000824 <parse_parameters>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f083 0301 	eor.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d009      	beq.n	8000aa0 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3305      	adds	r3, #5
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <executeONP+0xbc>)
 8000a94:	4a17      	ldr	r2, [pc, #92]	@ (8000af4 <executeONP+0xc0>)
 8000a96:	2167      	movs	r1, #103	@ 0x67
 8000a98:	2068      	movs	r0, #104	@ 0x68
 8000a9a:	f000 fa1b 	bl	8000ed4 <prepareFrame>
 8000a9e:	e021      	b.n	8000ae4 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <executeONP+0x78>
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d00e      	beq.n	8000ac8 <executeONP+0x94>
 8000aaa:	e01b      	b.n	8000ae4 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	b218      	sxth	r0, r3
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	b219      	sxth	r1, r3
 8000ab4:	7b7b      	ldrb	r3, [r7, #13]
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	7b3b      	ldrb	r3, [r7, #12]
 8000aba:	b21c      	sxth	r4, r3
 8000abc:	893b      	ldrh	r3, [r7, #8]
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	f005 fcbb 	bl	800643c <hagl_draw_rectangle>
		break;
 8000ac6:	e00d      	b.n	8000ae4 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	b218      	sxth	r0, r3
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	b219      	sxth	r1, r3
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	7b3b      	ldrb	r3, [r7, #12]
 8000ad6:	b21c      	sxth	r4, r3
 8000ad8:	893b      	ldrh	r3, [r7, #8]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	4623      	mov	r3, r4
 8000ade:	f005 fd33 	bl	8006548 <hagl_fill_rectangle>
		break;
 8000ae2:	bf00      	nop
	}
}
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	080087f4 	.word	0x080087f4
 8000af0:	080087dc 	.word	0x080087dc
 8000af4:	080087f0 	.word	0x080087f0

08000af8 <executeONT>:


//TODO nie dziala
static void executeONT(Receive_Frame *frame)
{
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	b08d      	sub	sp, #52	@ 0x34
 8000afc:	af06      	add	r7, sp, #24
 8000afe:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	75fb      	strb	r3, [r7, #23]
 8000b04:	2300      	movs	r3, #0
 8000b06:	75bb      	strb	r3, [r7, #22]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	757b      	strb	r3, [r7, #21]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	753b      	strb	r3, [r7, #20]
 8000b10:	2300      	movs	r3, #0
 8000b12:	74fb      	strb	r3, [r7, #19]
 8000b14:	2300      	movs	r3, #0
 8000b16:	74bb      	strb	r3, [r7, #18]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	81fb      	strh	r3, [r7, #14]
    if (!parse_parameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1d58      	adds	r0, r3, #5
 8000b24:	f107 0116 	add.w	r1, r7, #22
 8000b28:	f107 0217 	add.w	r2, r7, #23
 8000b2c:	f107 030e 	add.w	r3, r7, #14
 8000b30:	9305      	str	r3, [sp, #20]
 8000b32:	f107 0311 	add.w	r3, r7, #17
 8000b36:	9304      	str	r3, [sp, #16]
 8000b38:	f107 0312 	add.w	r3, r7, #18
 8000b3c:	9303      	str	r3, [sp, #12]
 8000b3e:	f107 0313 	add.w	r3, r7, #19
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f107 0315 	add.w	r3, r7, #21
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	460b      	mov	r3, r1
 8000b52:	4924      	ldr	r1, [pc, #144]	@ (8000be4 <executeONT+0xec>)
 8000b54:	f7ff fe66 	bl	8000824 <parse_parameters>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d009      	beq.n	8000b78 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3305      	adds	r3, #5
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <executeONT+0xf0>)
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bec <executeONT+0xf4>)
 8000b6e:	2167      	movs	r1, #103	@ 0x67
 8000b70:	2068      	movs	r0, #104	@ 0x68
 8000b72:	f000 f9af 	bl	8000ed4 <prepareFrame>
 8000b76:	e031      	b.n	8000bdc <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000b78:	7c7b      	ldrb	r3, [r7, #17]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <executeONT+0x8c>
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d016      	beq.n	8000bb0 <executeONT+0xb8>
 8000b82:	e02b      	b.n	8000bdc <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	b218      	sxth	r0, r3
 8000b88:	7dbb      	ldrb	r3, [r7, #22]
 8000b8a:	b21c      	sxth	r4, r3
 8000b8c:	7d7b      	ldrb	r3, [r7, #21]
 8000b8e:	b21d      	sxth	r5, r3
 8000b90:	7d3b      	ldrb	r3, [r7, #20]
 8000b92:	b21e      	sxth	r6, r3
 8000b94:	7cfb      	ldrb	r3, [r7, #19]
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	7cba      	ldrb	r2, [r7, #18]
 8000b9a:	b212      	sxth	r2, r2
 8000b9c:	89f9      	ldrh	r1, [r7, #14]
 8000b9e:	9102      	str	r1, [sp, #8]
 8000ba0:	9201      	str	r2, [sp, #4]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4633      	mov	r3, r6
 8000ba6:	462a      	mov	r2, r5
 8000ba8:	4621      	mov	r1, r4
 8000baa:	f006 fab1 	bl	8007110 <hagl_draw_triangle>
            break;
 8000bae:	e015      	b.n	8000bdc <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	b218      	sxth	r0, r3
 8000bb4:	7dbb      	ldrb	r3, [r7, #22]
 8000bb6:	b21c      	sxth	r4, r3
 8000bb8:	7d7b      	ldrb	r3, [r7, #21]
 8000bba:	b21d      	sxth	r5, r3
 8000bbc:	7d3b      	ldrb	r3, [r7, #20]
 8000bbe:	b21e      	sxth	r6, r3
 8000bc0:	7cfb      	ldrb	r3, [r7, #19]
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	7cba      	ldrb	r2, [r7, #18]
 8000bc6:	b212      	sxth	r2, r2
 8000bc8:	89f9      	ldrh	r1, [r7, #14]
 8000bca:	9102      	str	r1, [sp, #8]
 8000bcc:	9201      	str	r2, [sp, #4]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4633      	mov	r3, r6
 8000bd2:	462a      	mov	r2, r5
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f006 fac1 	bl	800715c <hagl_fill_triangle>
            break;
 8000bda:	bf00      	nop
    }
}
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	080087fc 	.word	0x080087fc
 8000be8:	080087dc 	.word	0x080087dc
 8000bec:	080087f0 	.word	0x080087f0

08000bf0 <executeONN>:

//TODO nie dziala, dodac obsluge przewijania tekstu
static void executeONN(Receive_Frame *frame)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b097      	sub	sp, #92	@ 0x5c
 8000bf4:	af04      	add	r7, sp, #16
 8000bf6:	6078      	str	r0, [r7, #4]
    char text[50] ={0};
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	222e      	movs	r2, #46	@ 0x2e
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f006 fd95 	bl	8007734 <memset>
    uint8_t x = 0, y = 0, fontSize = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	74fb      	strb	r3, [r7, #19]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	74bb      	strb	r3, [r7, #18]
 8000c12:	2300      	movs	r3, #0
 8000c14:	747b      	strb	r3, [r7, #17]
    uint16_t color = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	81fb      	strh	r3, [r7, #14]
    if (!parse_parameters(frame->data, "uuust", &x, &y, &fontSize, &color, text)) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1d58      	adds	r0, r3, #5
 8000c1e:	f107 0112 	add.w	r1, r7, #18
 8000c22:	f107 0213 	add.w	r2, r7, #19
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	f107 030e 	add.w	r3, r7, #14
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	f107 0311 	add.w	r3, r7, #17
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4922      	ldr	r1, [pc, #136]	@ (8000cc4 <executeONN+0xd4>)
 8000c3c:	f7ff fdf2 	bl	8000824 <parse_parameters>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d009      	beq.n	8000c60 <executeONN+0x70>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3305      	adds	r3, #5
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <executeONN+0xd8>)
 8000c54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ccc <executeONN+0xdc>)
 8000c56:	2167      	movs	r1, #103	@ 0x67
 8000c58:	2068      	movs	r0, #104	@ 0x68
 8000c5a:	f000 f93b 	bl	8000ed4 <prepareFrame>
 8000c5e:	e02d      	b.n	8000cbc <executeONN+0xcc>
        return;
    }

    switch(fontSize)
 8000c60:	7c7b      	ldrb	r3, [r7, #17]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d01e      	beq.n	8000ca4 <executeONN+0xb4>
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	dc28      	bgt.n	8000cbc <executeONN+0xcc>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d002      	beq.n	8000c74 <executeONN+0x84>
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d00c      	beq.n	8000c8c <executeONN+0x9c>
 8000c72:	e023      	b.n	8000cbc <executeONN+0xcc>
    {
        case 1:
            hagl_put_text((wchar_t*)text, x, y, color, font5x7); //fontSize zmien
 8000c74:	7cfb      	ldrb	r3, [r7, #19]
 8000c76:	b219      	sxth	r1, r3
 8000c78:	7cbb      	ldrb	r3, [r7, #18]
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	f107 0014 	add.w	r0, r7, #20
 8000c82:	4c13      	ldr	r4, [pc, #76]	@ (8000cd0 <executeONN+0xe0>)
 8000c84:	9400      	str	r4, [sp, #0]
 8000c86:	f005 fe01 	bl	800688c <hagl_put_text>
            break;
 8000c8a:	e017      	b.n	8000cbc <executeONN+0xcc>
        case 2:
            hagl_put_text((wchar_t*)text, x, y, color, font5x8); //fontSize zmien
 8000c8c:	7cfb      	ldrb	r3, [r7, #19]
 8000c8e:	b219      	sxth	r1, r3
 8000c90:	7cbb      	ldrb	r3, [r7, #18]
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	f107 0014 	add.w	r0, r7, #20
 8000c9a:	4c0e      	ldr	r4, [pc, #56]	@ (8000cd4 <executeONN+0xe4>)
 8000c9c:	9400      	str	r4, [sp, #0]
 8000c9e:	f005 fdf5 	bl	800688c <hagl_put_text>
            break;
 8000ca2:	e00b      	b.n	8000cbc <executeONN+0xcc>
        case 3:
            hagl_put_text((wchar_t*)text, x, x, color, font6x9); //fontSize zmien
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	b219      	sxth	r1, r3
 8000ca8:	7cfb      	ldrb	r3, [r7, #19]
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	f107 0014 	add.w	r0, r7, #20
 8000cb2:	4c09      	ldr	r4, [pc, #36]	@ (8000cd8 <executeONN+0xe8>)
 8000cb4:	9400      	str	r4, [sp, #0]
 8000cb6:	f005 fde9 	bl	800688c <hagl_put_text>
            break;
 8000cba:	bf00      	nop
    }
}
 8000cbc:	374c      	adds	r7, #76	@ 0x4c
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	08008808 	.word	0x08008808
 8000cc8:	080087dc 	.word	0x080087dc
 8000ccc:	080087f0 	.word	0x080087f0
 8000cd0:	080088c8 	.word	0x080088c8
 8000cd4:	0800bdd0 	.word	0x0800bdd0
 8000cd8:	0800ec74 	.word	0x0800ec74

08000cdc <executeOFF>:



//TODO bład parsowania danych
static void executeOFF(Receive_Frame *frame)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6078      	str	r0, [r7, #4]
	uint8_t state = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	if (!parse_parameters(frame->data, "u", &state)) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3305      	adds	r3, #5
 8000cec:	f107 020f 	add.w	r2, r7, #15
 8000cf0:	4916      	ldr	r1, [pc, #88]	@ (8000d4c <executeOFF+0x70>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fd96 	bl	8000824 <parse_parameters>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <executeOFF+0x3c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3305      	adds	r3, #5
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <executeOFF+0x74>)
 8000d0c:	4a11      	ldr	r2, [pc, #68]	@ (8000d54 <executeOFF+0x78>)
 8000d0e:	2167      	movs	r1, #103	@ 0x67
 8000d10:	2068      	movs	r0, #104	@ 0x68
 8000d12:	f000 f8df 	bl	8000ed4 <prepareFrame>
 8000d16:	e015      	b.n	8000d44 <executeOFF+0x68>
		return;
	}
	switch(state)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <executeOFF+0x48>
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d006      	beq.n	8000d30 <executeOFF+0x54>
 8000d22:	e00f      	b.n	8000d44 <executeOFF+0x68>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2102      	movs	r1, #2
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <executeOFF+0x7c>)
 8000d2a:	f001 fcf1 	bl	8002710 <HAL_GPIO_WritePin>
		break;
 8000d2e:	e009      	b.n	8000d44 <executeOFF+0x68>
	case 1:
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, WHITE);
 8000d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	22a0      	movs	r2, #160	@ 0xa0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f005 fc03 	bl	8006548 <hagl_fill_rectangle>
		break;
 8000d42:	bf00      	nop
	}
}
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08008810 	.word	0x08008810
 8000d50:	080087dc 	.word	0x080087dc
 8000d54:	080087f0 	.word	0x080087f0
 8000d58:	48000400 	.word	0x48000400

08000d5c <is_within_bounds>:


//=======================SPRAWDZANIE KOORDYNATÓW=========================
bool is_within_bounds(int x, int y)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <is_within_bounds+0x26>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d70:	dc07      	bgt.n	8000d82 <is_within_bounds+0x26>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db04      	blt.n	8000d82 <is_within_bounds+0x26>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d7c:	dc01      	bgt.n	8000d82 <is_within_bounds+0x26>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <is_within_bounds+0x28>
 8000d82:	2300      	movs	r3, #0
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <parse_coordinates>:
bool parse_coordinates(const char *data, int *x, int *y)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0a6      	sub	sp, #152	@ 0x98
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE); // Kopiujemy dane wejściowe, bo strtok modyfikuje ciąg
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	68f9      	ldr	r1, [r7, #12]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f006 fcdb 	bl	8007768 <strncpy>

	    token = strtok(data_copy, ","); // Pierwsza współrzędna (jest to funkcja służąca do oddzielania stringów z separatorem)
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4915      	ldr	r1, [pc, #84]	@ (8000e0c <parse_coordinates+0x74>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 fce9 	bl	8007790 <strtok>
 8000dbe:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <parse_coordinates+0x36>
	        return false;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e01a      	b.n	8000e04 <parse_coordinates+0x6c>
	    }
	    *x = atoi(token);
 8000dce:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000dd2:	f006 f9e9 	bl	80071a8 <atoi>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ","); // Druga współrzędna
 8000ddc:	490b      	ldr	r1, [pc, #44]	@ (8000e0c <parse_coordinates+0x74>)
 8000dde:	2000      	movs	r0, #0
 8000de0:	f006 fcd6 	bl	8007790 <strtok>
 8000de4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <parse_coordinates+0x5c>
	        return false;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e007      	b.n	8000e04 <parse_coordinates+0x6c>
	    }
	    *y = atoi(token);
 8000df4:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000df8:	f006 f9d6 	bl	80071a8 <atoi>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]

	    return true;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3798      	adds	r7, #152	@ 0x98
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08008814 	.word	0x08008814

08000e10 <byteStuffing>:
//=======================BYTE STUFFING=========================
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	e04b      	b.n	8000ebe <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e30:	d10e      	bne.n	8000e50 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	617a      	str	r2, [r7, #20]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	227d      	movs	r2, #125	@ 0x7d
 8000e3e:	701a      	strb	r2, [r3, #0]
            output[j++] = ']';
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	617a      	str	r2, [r7, #20]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	225d      	movs	r2, #93	@ 0x5d
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e033      	b.n	8000eb8 <byteStuffing+0xa8>
        } else if (input[i] == '~') {
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e5a:	d10e      	bne.n	8000e7a <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	617a      	str	r2, [r7, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	227d      	movs	r2, #125	@ 0x7d
 8000e68:	701a      	strb	r2, [r3, #0]
            output[j++] = '^';
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	617a      	str	r2, [r7, #20]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	225e      	movs	r2, #94	@ 0x5e
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e01e      	b.n	8000eb8 <byteStuffing+0xa8>
        } else if (input[i] == '`') {
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b60      	cmp	r3, #96	@ 0x60
 8000e84:	d10e      	bne.n	8000ea4 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	617a      	str	r2, [r7, #20]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	227d      	movs	r2, #125	@ 0x7d
 8000e92:	701a      	strb	r2, [r3, #0]
            output[j++] = '&';
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	617a      	str	r2, [r7, #20]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2226      	movs	r2, #38	@ 0x26
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e009      	b.n	8000eb8 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	441a      	add	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	6179      	str	r1, [r7, #20]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	440b      	add	r3, r1
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3af      	bcc.n	8000e26 <byteStuffing+0x16>
        }
    }
    return j;
 8000ec6:	697b      	ldr	r3, [r7, #20]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	371c      	adds	r7, #28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <prepareFrame>:

//=======================OBSŁUGA RAMKI ZWROTNEJ=========================
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8000ed4:	b408      	push	{r3}
 8000ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eda:	f5ad 7d36 	sub.w	sp, sp, #728	@ 0x2d8
 8000ede:	af02      	add	r7, sp, #8
 8000ee0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000ee4:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000eee:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000efa:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8000efe:	460a      	mov	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	466b      	mov	r3, sp
 8000f04:	461e      	mov	r6, r3
    Frame frame = {0};
 8000f06:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8000f0a:	228a      	movs	r2, #138	@ 0x8a
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f006 fc10 	bl	8007734 <memset>
    frame.sender = sender;
 8000f14:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000f18:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    frame.receiver = receiver;
 8000f22:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000f26:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 8000f30:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8000f34:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8000f38:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 8000f3c:	1cd0      	adds	r0, r2, #3
 8000f3e:	2203      	movs	r2, #3
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	f006 fc11 	bl	8007768 <strncpy>

    // Formatowanie danych
    va_list args;
    va_start(args, format);
 8000f46:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000f4a:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    vsnprintf((char *)frame.data, MAX_DATA_SIZE, format, args);
 8000f4e:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8000f52:	1d98      	adds	r0, r3, #6
 8000f54:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000f58:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8000f5c:	2180      	movs	r1, #128	@ 0x80
 8000f5e:	f006 fbbb 	bl	80076d8 <vsniprintf>
    va_end(args);

    // Oblicz długość danych
    size_t data_len = strlen((const char *)frame.data);
 8000f62:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8000f66:	3306      	adds	r3, #6
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff f93b 	bl	80001e4 <strlen>
 8000f6e:	f8c7 02c8 	str.w	r0, [r7, #712]	@ 0x2c8

    // Przygotowanie danych do obliczenia CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 8000f72:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8000f76:	3305      	adds	r3, #5
 8000f78:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
    uint8_t crc_input[crc_input_len];
 8000f7c:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8000f80:	460b      	mov	r3, r1
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8000f88:	2300      	movs	r3, #0
 8000f8a:	6039      	str	r1, [r7, #0]
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	00c3      	lsls	r3, r0, #3
 8000f9a:	6838      	ldr	r0, [r7, #0]
 8000f9c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	00c2      	lsls	r2, r0, #3
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	468a      	mov	sl, r1
 8000fa8:	469b      	mov	fp, r3
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fbe:	1dcb      	adds	r3, r1, #7
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	ebad 0d03 	sub.w	sp, sp, r3
 8000fc8:	ab02      	add	r3, sp, #8
 8000fca:	3300      	adds	r3, #0
 8000fcc:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
    crc_input[0] = frame.sender;
 8000fd0:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8000fd4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8000fd8:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 8000fda:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8000fde:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8000fe2:	705a      	strb	r2, [r3, #1]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 8000fe4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8000fe8:	3302      	adds	r3, #2
 8000fea:	461a      	mov	r2, r3
 8000fec:	f207 2327 	addw	r3, r7, #551	@ 0x227
 8000ff0:	8819      	ldrh	r1, [r3, #0]
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	8011      	strh	r1, [r2, #0]
 8000ff6:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, frame.data, data_len);
 8000ff8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8000ffc:	1d58      	adds	r0, r3, #5
 8000ffe:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8001002:	3306      	adds	r3, #6
 8001004:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 8001008:	4619      	mov	r1, r3
 800100a:	f006 fc90 	bl	800792e <memcpy>

    // Obliczanie CRC
    char crc_output[2]; // Tablica na wynik CRC
    calculate_crc16(crc_input, crc_input_len, crc_output);
 800100e:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001012:	461a      	mov	r2, r3
 8001014:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001018:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 800101c:	f7ff fb84 	bl	8000728 <calculate_crc16>

    // Konwersja CRC na heksadecymalne ciągi znaków
    char crc_hex[5]; // 4 znaki na heksadecymalną reprezentację + 1 na znak null
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 8001020:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 8001024:	461a      	mov	r2, r3
 8001026:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 800102a:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	4a49      	ldr	r2, [pc, #292]	@ (8001158 <prepareFrame+0x284>)
 8001034:	2105      	movs	r1, #5
 8001036:	f006 faad 	bl	8007594 <sniprintf>

    // Przygotowanie do byte-stuffingu
    uint8_t raw_payload[2 + COMMAND_LENGTH + data_len + 4]; // 4 dodatkowe bajty na heksadecymalne CRC
 800103a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 800103e:	f103 0109 	add.w	r1, r3, #9
 8001042:	460b      	mov	r3, r1
 8001044:	3b01      	subs	r3, #1
 8001046:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800104a:	2300      	movs	r3, #0
 800104c:	4688      	mov	r8, r1
 800104e:	4699      	mov	r9, r3
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800105c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001060:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001064:	2300      	movs	r3, #0
 8001066:	460c      	mov	r4, r1
 8001068:	461d      	mov	r5, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	00eb      	lsls	r3, r5, #3
 8001074:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001078:	00e2      	lsls	r2, r4, #3
 800107a:	1dcb      	adds	r3, r1, #7
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	ebad 0d03 	sub.w	sp, sp, r3
 8001084:	ab02      	add	r3, sp, #8
 8001086:	3300      	adds	r3, #0
 8001088:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
    raw_payload[0] = frame.sender;
 800108c:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 8001090:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001094:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 8001096:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 800109a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800109e:	705a      	strb	r2, [r3, #1]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 80010a0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80010a4:	3302      	adds	r3, #2
 80010a6:	461a      	mov	r2, r3
 80010a8:	f207 2327 	addw	r3, r7, #551	@ 0x227
 80010ac:	8819      	ldrh	r1, [r3, #0]
 80010ae:	789b      	ldrb	r3, [r3, #2]
 80010b0:	8011      	strh	r1, [r2, #0]
 80010b2:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, frame.data, data_len);
 80010b4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80010b8:	1d58      	adds	r0, r3, #5
 80010ba:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80010be:	3306      	adds	r3, #6
 80010c0:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80010c4:	4619      	mov	r1, r3
 80010c6:	f006 fc32 	bl	800792e <memcpy>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4); // Dodanie heksadecymalnego CRC
 80010ca:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80010ce:	3305      	adds	r3, #5
 80010d0:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80010d4:	4413      	add	r3, r2
 80010d6:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80010da:	601a      	str	r2, [r3, #0]

    uint8_t stuffed_payload[512];
    size_t stuffed_len = byteStuffing(raw_payload, 2 + COMMAND_LENGTH + data_len + 4, stuffed_payload);
 80010dc:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80010e0:	3309      	adds	r3, #9
 80010e2:	f107 0214 	add.w	r2, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f8d7 02b4 	ldr.w	r0, [r7, #692]	@ 0x2b4
 80010ec:	f7ff fe90 	bl	8000e10 <byteStuffing>
 80010f0:	f8c7 02b0 	str.w	r0, [r7, #688]	@ 0x2b0

    // Wysyłanie ramki
    USART_fsend("%c", FRAME_START); // Wyślij początek ramki
 80010f4:	217e      	movs	r1, #126	@ 0x7e
 80010f6:	4819      	ldr	r0, [pc, #100]	@ (800115c <prepareFrame+0x288>)
 80010f8:	f7ff faa0 	bl	800063c <USART_fsend>
    for (size_t i = 0; i < stuffed_len; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8001102:	e013      	b.n	800112c <prepareFrame+0x258>
        USART_fsend("%c", stuffed_payload[i]); // Wyślij dane po byte-stuffingu
 8001104:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001108:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 800110c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4811      	ldr	r0, [pc, #68]	@ (800115c <prepareFrame+0x288>)
 8001118:	f7ff fa90 	bl	800063c <USART_fsend>
        delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f000 fba1 	bl	8001864 <delay>
    for (size_t i = 0; i < stuffed_len; i++) {
 8001122:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001126:	3301      	adds	r3, #1
 8001128:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 800112c:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8001130:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001134:	429a      	cmp	r2, r3
 8001136:	d3e5      	bcc.n	8001104 <prepareFrame+0x230>
    }
    USART_fsend("%c", FRAME_END); // Wyślij koniec ramki
 8001138:	2160      	movs	r1, #96	@ 0x60
 800113a:	4808      	ldr	r0, [pc, #32]	@ (800115c <prepareFrame+0x288>)
 800113c:	f7ff fa7e 	bl	800063c <USART_fsend>
    USART_fsend("\r\n");
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <prepareFrame+0x28c>)
 8001142:	f7ff fa7b 	bl	800063c <USART_fsend>
 8001146:	46b5      	mov	sp, r6

}
 8001148:	bf00      	nop
 800114a:	f507 7734 	add.w	r7, r7, #720	@ 0x2d0
 800114e:	46bd      	mov	sp, r7
 8001150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	b001      	add	sp, #4
 8001156:	4770      	bx	lr
 8001158:	08008818 	.word	0x08008818
 800115c:	08008824 	.word	0x08008824
 8001160:	08008828 	.word	0x08008828

08001164 <decodeFrame>:

//=======================DEKODOWANIE RAMKI=========================
bool decodeFrame(uint8_t *bx, Receive_Frame *frame, uint8_t len) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	4613      	mov	r3, r2
 8001170:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b06      	cmp	r3, #6
 8001176:	d948      	bls.n	800120a <decodeFrame+0xa6>
            uint8_t k = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	75fa      	strb	r2, [r7, #23]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	75fa      	strb	r2, [r7, #23]
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	1c98      	adds	r0, r3, #2
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	2203      	movs	r2, #3
 80011ac:	4619      	mov	r1, r3
 80011ae:	f006 fbbe 	bl	800792e <memcpy>
            k += COMMAND_LENGTH;
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	3303      	adds	r3, #3
 80011b6:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	3b07      	subs	r3, #7
 80011bc:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1d58      	adds	r0, r3, #5
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	7dba      	ldrb	r2, [r7, #22]
 80011ca:	4619      	mov	r1, r3
 80011cc:	f006 fbaf 	bl	800792e <memcpy>
            k += data_len;
 80011d0:	7dfa      	ldrb	r2, [r7, #23]
 80011d2:	7dbb      	ldrb	r3, [r7, #22]
 80011d4:	4413      	add	r3, r2
 80011d6:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	823b      	strh	r3, [r7, #16]
            calculate_crc16((uint8_t *)frame, k, ownCrc);
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	f107 0214 	add.w	r2, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	68b8      	ldr	r0, [r7, #8]
 80011ee:	f7ff fa9b 	bl	8000728 <calculate_crc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80011f2:	7d3a      	ldrb	r2, [r7, #20]
 80011f4:	7c3b      	ldrb	r3, [r7, #16]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d103      	bne.n	8001202 <decodeFrame+0x9e>
 80011fa:	7d7a      	ldrb	r2, [r7, #21]
 80011fc:	7c7b      	ldrb	r3, [r7, #17]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d001      	beq.n	8001206 <decodeFrame+0xa2>
            	return false;
 8001202:	2300      	movs	r3, #0
 8001204:	e002      	b.n	800120c <decodeFrame+0xa8>
            }
            return true;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <decodeFrame+0xa8>
        }
        return false;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <process_received_char>:



//=======================DETEKCJA RAMKI=========================
void process_received_char(uint8_t received_char) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    if (received_char == '~') {
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b7e      	cmp	r3, #126	@ 0x7e
 8001222:	d113      	bne.n	800124c <process_received_char+0x38>
        if (!in_frame) {
 8001224:	4b4b      	ldr	r3, [pc, #300]	@ (8001354 <process_received_char+0x140>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <process_received_char+0x32>
            in_frame = true;
 8001232:	4b48      	ldr	r3, [pc, #288]	@ (8001354 <process_received_char+0x140>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
            bx_index = 0;
 8001238:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <process_received_char+0x144>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
            escape_detected = false;
 800123e:	4b47      	ldr	r3, [pc, #284]	@ (800135c <process_received_char+0x148>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
        reset_frame_state();
    }
}
 8001244:	e082      	b.n	800134c <process_received_char+0x138>
            reset_frame_state();
 8001246:	f7ff fad7 	bl	80007f8 <reset_frame_state>
}
 800124a:	e07f      	b.n	800134c <process_received_char+0x138>
    } else if (received_char == '`') {
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b60      	cmp	r3, #96	@ 0x60
 8001250:	d12a      	bne.n	80012a8 <process_received_char+0x94>
        if (in_frame) {
 8001252:	4b40      	ldr	r3, [pc, #256]	@ (8001354 <process_received_char+0x140>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d01d      	beq.n	8001296 <process_received_char+0x82>
            if (decodeFrame(bx, &ramka, bx_index)) {
 800125a:	4b3f      	ldr	r3, [pc, #252]	@ (8001358 <process_received_char+0x144>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	493f      	ldr	r1, [pc, #252]	@ (8001360 <process_received_char+0x14c>)
 8001264:	483f      	ldr	r0, [pc, #252]	@ (8001364 <process_received_char+0x150>)
 8001266:	f7ff ff7d 	bl	8001164 <decodeFrame>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <process_received_char+0x70>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 8001270:	4b3d      	ldr	r3, [pc, #244]	@ (8001368 <process_received_char+0x154>)
 8001272:	4a3e      	ldr	r2, [pc, #248]	@ (800136c <process_received_char+0x158>)
 8001274:	2167      	movs	r1, #103	@ 0x67
 8001276:	2068      	movs	r0, #104	@ 0x68
 8001278:	f7ff fe2c 	bl	8000ed4 <prepareFrame>
                handleCommand(&ramka);
 800127c:	4838      	ldr	r0, [pc, #224]	@ (8001360 <process_received_char+0x14c>)
 800127e:	f000 f879 	bl	8001374 <handleCommand>
 8001282:	e005      	b.n	8001290 <process_received_char+0x7c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <process_received_char+0x15c>)
 8001286:	4a39      	ldr	r2, [pc, #228]	@ (800136c <process_received_char+0x158>)
 8001288:	2167      	movs	r1, #103	@ 0x67
 800128a:	2068      	movs	r0, #104	@ 0x68
 800128c:	f7ff fe22 	bl	8000ed4 <prepareFrame>
            reset_frame_state();
 8001290:	f7ff fab2 	bl	80007f8 <reset_frame_state>
}
 8001294:	e05a      	b.n	800134c <process_received_char+0x138>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <process_received_char+0x15c>)
 8001298:	4a34      	ldr	r2, [pc, #208]	@ (800136c <process_received_char+0x158>)
 800129a:	2167      	movs	r1, #103	@ 0x67
 800129c:	2068      	movs	r0, #104	@ 0x68
 800129e:	f7ff fe19 	bl	8000ed4 <prepareFrame>
            reset_frame_state();
 80012a2:	f7ff faa9 	bl	80007f8 <reset_frame_state>
}
 80012a6:	e051      	b.n	800134c <process_received_char+0x138>
    } else if (in_frame) {
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <process_received_char+0x140>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d04b      	beq.n	8001348 <process_received_char+0x134>
        if (escape_detected) {
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <process_received_char+0x148>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d02f      	beq.n	8001318 <process_received_char+0x104>
            if (received_char == '^') {
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b5e      	cmp	r3, #94	@ 0x5e
 80012bc:	d108      	bne.n	80012d0 <process_received_char+0xbc>
                bx[bx_index++] = '~';
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <process_received_char+0x144>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	4924      	ldr	r1, [pc, #144]	@ (8001358 <process_received_char+0x144>)
 80012c6:	600a      	str	r2, [r1, #0]
 80012c8:	4a26      	ldr	r2, [pc, #152]	@ (8001364 <process_received_char+0x150>)
 80012ca:	217e      	movs	r1, #126	@ 0x7e
 80012cc:	54d1      	strb	r1, [r2, r3]
 80012ce:	e01f      	b.n	8001310 <process_received_char+0xfc>
            } else if (received_char == ']') {
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b5d      	cmp	r3, #93	@ 0x5d
 80012d4:	d108      	bne.n	80012e8 <process_received_char+0xd4>
                bx[bx_index++] = '}';
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <process_received_char+0x144>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	491e      	ldr	r1, [pc, #120]	@ (8001358 <process_received_char+0x144>)
 80012de:	600a      	str	r2, [r1, #0]
 80012e0:	4a20      	ldr	r2, [pc, #128]	@ (8001364 <process_received_char+0x150>)
 80012e2:	217d      	movs	r1, #125	@ 0x7d
 80012e4:	54d1      	strb	r1, [r2, r3]
 80012e6:	e013      	b.n	8001310 <process_received_char+0xfc>
            } else if (received_char == '&') {
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b26      	cmp	r3, #38	@ 0x26
 80012ec:	d108      	bne.n	8001300 <process_received_char+0xec>
                bx[bx_index++] = '`';
 80012ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <process_received_char+0x144>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4918      	ldr	r1, [pc, #96]	@ (8001358 <process_received_char+0x144>)
 80012f6:	600a      	str	r2, [r1, #0]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001364 <process_received_char+0x150>)
 80012fa:	2160      	movs	r1, #96	@ 0x60
 80012fc:	54d1      	strb	r1, [r2, r3]
 80012fe:	e007      	b.n	8001310 <process_received_char+0xfc>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <process_received_char+0x15c>)
 8001302:	4a1a      	ldr	r2, [pc, #104]	@ (800136c <process_received_char+0x158>)
 8001304:	2167      	movs	r1, #103	@ 0x67
 8001306:	2068      	movs	r0, #104	@ 0x68
 8001308:	f7ff fde4 	bl	8000ed4 <prepareFrame>
                reset_frame_state();
 800130c:	f7ff fa74 	bl	80007f8 <reset_frame_state>
            escape_detected = false;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <process_received_char+0x148>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
}
 8001316:	e019      	b.n	800134c <process_received_char+0x138>
        } else if (received_char == '}') {
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b7d      	cmp	r3, #125	@ 0x7d
 800131c:	d103      	bne.n	8001326 <process_received_char+0x112>
            escape_detected = true;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <process_received_char+0x148>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
}
 8001324:	e012      	b.n	800134c <process_received_char+0x138>
            if (bx_index < sizeof(bx)) {
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <process_received_char+0x144>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800132e:	d208      	bcs.n	8001342 <process_received_char+0x12e>
                bx[bx_index++] = received_char;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <process_received_char+0x144>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <process_received_char+0x144>)
 8001338:	600a      	str	r2, [r1, #0]
 800133a:	490a      	ldr	r1, [pc, #40]	@ (8001364 <process_received_char+0x150>)
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	54ca      	strb	r2, [r1, r3]
}
 8001340:	e004      	b.n	800134c <process_received_char+0x138>
                reset_frame_state();
 8001342:	f7ff fa59 	bl	80007f8 <reset_frame_state>
}
 8001346:	e001      	b.n	800134c <process_received_char+0x138>
        reset_frame_state();
 8001348:	f7ff fa56 	bl	80007f8 <reset_frame_state>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000cc0 	.word	0x20000cc0
 8001358:	20000cbc 	.word	0x20000cbc
 800135c:	20000cba 	.word	0x20000cba
 8001360:	20000cc4 	.word	0x20000cc4
 8001364:	20000bac 	.word	0x20000bac
 8001368:	0800882c 	.word	0x0800882c
 800136c:	080087f0 	.word	0x080087f0
 8001370:	08008834 	.word	0x08008834

08001374 <handleCommand>:



//=======================ROZPOZNANIE I WYKONANIE KOMENDY=========================
void handleCommand(Receive_Frame *frame)
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b092      	sub	sp, #72	@ 0x48
 8001378:	af02      	add	r7, sp, #8
 800137a:	6078      	str	r0, [r7, #4]
	CommandEntry commandTable[COMMAND_COUNT] = {
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <handleCommand+0xcc>)
 800137e:	f107 0414 	add.w	r4, r7, #20
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001390:	e884 0003 	stmia.w	r4, {r0, r1}
			{"ONP", executeONP},
			{"ONT", executeONT},
			{"ONN", executeONN},
			{"OFF", executeOFF}
	};
	for (int i = 0; i < COMMAND_COUNT; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001398:	e043      	b.n	8001422 <handleCommand+0xae>
	        if (strncmp(frame->command, commandTable[i].command, COMMAND_LENGTH) == 0) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	1c98      	adds	r0, r3, #2
 800139e:	f107 0214 	add.w	r2, r7, #20
 80013a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	2203      	movs	r2, #3
 80013aa:	4619      	mov	r1, r3
 80013ac:	f006 f9ca 	bl	8007744 <strncmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d132      	bne.n	800141c <handleCommand+0xa8>
	            // Parsowanie współrzędnych z `data`
	            int x, y;
	            if (parse_coordinates(frame->data, &x, &y)) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3305      	adds	r3, #5
 80013ba:	f107 020c 	add.w	r2, r7, #12
 80013be:	f107 0110 	add.w	r1, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fce8 	bl	8000d98 <parse_coordinates>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01c      	beq.n	8001408 <handleCommand+0x94>
	                // Sprawdzenie zakresu współrzędnych
	                if (is_within_bounds(x, y)) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fcc1 	bl	8000d5c <is_within_bounds>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00c      	beq.n	80013fa <handleCommand+0x86>
	                    lcd_clear();
 80013e0:	f000 f960 	bl	80016a4 <lcd_clear>
	                    commandTable[i].function(frame); // Wywołaj przypisaną funkcję
 80013e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	3340      	adds	r3, #64	@ 0x40
 80013ea:	443b      	add	r3, r7
 80013ec:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	4798      	blx	r3
	                    lcd_copy();
 80013f4:	f000 f928 	bl	8001648 <lcd_copy>
	                    return;
 80013f8:	e01f      	b.n	800143a <handleCommand+0xc6>
	                } else {
	                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " DISPLAY_AREA");
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <handleCommand+0xd0>)
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <handleCommand+0xd4>)
 80013fe:	2167      	movs	r1, #103	@ 0x67
 8001400:	2068      	movs	r0, #104	@ 0x68
 8001402:	f7ff fd67 	bl	8000ed4 <prepareFrame>
	                    return;
 8001406:	e018      	b.n	800143a <handleCommand+0xc6>
	                }
	            } else {
	                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " NOT_RECOGNIZED%s", frame->data);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3305      	adds	r3, #5
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <handleCommand+0xd8>)
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <handleCommand+0xd4>)
 8001412:	2167      	movs	r1, #103	@ 0x67
 8001414:	2068      	movs	r0, #104	@ 0x68
 8001416:	f7ff fd5d 	bl	8000ed4 <prepareFrame>
	                return;
 800141a:	e00e      	b.n	800143a <handleCommand+0xc6>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 800141c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800141e:	3301      	adds	r3, #1
 8001420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001424:	2b04      	cmp	r3, #4
 8001426:	ddb8      	ble.n	800139a <handleCommand+0x26>
	            }
	        }
	    }
	    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3302      	adds	r3, #2
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <handleCommand+0xdc>)
 8001430:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <handleCommand+0xd4>)
 8001432:	2167      	movs	r1, #103	@ 0x67
 8001434:	2068      	movs	r0, #104	@ 0x68
 8001436:	f7ff fd4d 	bl	8000ed4 <prepareFrame>
}
 800143a:	3740      	adds	r7, #64	@ 0x40
 800143c:	46bd      	mov	sp, r7
 800143e:	bdb0      	pop	{r4, r5, r7, pc}
 8001440:	08008860 	.word	0x08008860
 8001444:	0800883c 	.word	0x0800883c
 8001448:	080087f0 	.word	0x080087f0
 800144c:	0800884c 	.word	0x0800884c
 8001450:	080087dc 	.word	0x080087dc

08001454 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <MX_GPIO_Init+0x90>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <MX_GPIO_Init+0x90>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_GPIO_Init+0x90>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_GPIO_Init+0x90>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <MX_GPIO_Init+0x90>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_GPIO_Init+0x90>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_GPIO_Init+0x90>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a11      	ldr	r2, [pc, #68]	@ (80014e4 <MX_GPIO_Init+0x90>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_GPIO_Init+0x90>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f641 0106 	movw	r1, #6150	@ 0x1806
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <MX_GPIO_Init+0x94>)
 80014ba:	f001 f929 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 80014be:	f641 0306 	movw	r3, #6150	@ 0x1806
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_GPIO_Init+0x94>)
 80014d8:	f000 ff70 	bl	80023bc <HAL_GPIO_Init>

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400

080014ec <lcd_cmd>:
    CMD(0xf6), 0x00,
    CMD(ST7735S_COLMOD), 0x05,
    CMD(ST7735S_MADCTL), 0xa0,
};
static void lcd_cmd(uint8_t cmd)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <lcd_cmd+0x44>)
 80014fe:	f001 f907 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001508:	4809      	ldr	r0, [pc, #36]	@ (8001530 <lcd_cmd+0x44>)
 800150a:	f001 f901 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800150e:	1df9      	adds	r1, r7, #7
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	2201      	movs	r2, #1
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <lcd_cmd+0x48>)
 8001518:	f002 fcd5 	bl	8003ec6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001522:	4803      	ldr	r0, [pc, #12]	@ (8001530 <lcd_cmd+0x44>)
 8001524:	f001 f8f4 	bl	8002710 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	48000400 	.word	0x48000400
 8001534:	2000ad50 	.word	0x2000ad50

08001538 <lcd_data>:
static void lcd_data(uint8_t data)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001548:	480c      	ldr	r0, [pc, #48]	@ (800157c <lcd_data+0x44>)
 800154a:	f001 f8e1 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001554:	4809      	ldr	r0, [pc, #36]	@ (800157c <lcd_data+0x44>)
 8001556:	f001 f8db 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800155a:	1df9      	adds	r1, r7, #7
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2201      	movs	r2, #1
 8001562:	4807      	ldr	r0, [pc, #28]	@ (8001580 <lcd_data+0x48>)
 8001564:	f002 fcaf 	bl	8003ec6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <lcd_data+0x44>)
 8001570:	f001 f8ce 	bl	8002710 <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	48000400 	.word	0x48000400
 8001580:	2000ad50 	.word	0x2000ad50

08001584 <lcd_send>:
static void lcd_send(uint16_t value)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <lcd_send+0x20>
		lcd_cmd(value);
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffa5 	bl	80014ec <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80015a2:	e004      	b.n	80015ae <lcd_send+0x2a>
		lcd_data(value);
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ffc5 	bl	8001538 <lcd_data>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <lcd_data16>:
static void lcd_data16(uint16_t value)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ffb5 	bl	8001538 <lcd_data>
	lcd_data(value);
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffb0 	bl	8001538 <lcd_data>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80015ee:	202a      	movs	r0, #42	@ 0x2a
 80015f0:	f7ff ff7c 	bl	80014ec <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ffda 	bl	80015b6 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	b29a      	uxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ffd1 	bl	80015b6 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001614:	202b      	movs	r0, #43	@ 0x2b
 8001616:	f7ff ff69 	bl	80014ec <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	b29b      	uxth	r3, r3
 800161e:	3302      	adds	r3, #2
 8001620:	b29b      	uxth	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffc7 	bl	80015b6 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	b29a      	uxth	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4413      	add	r3, r2
 8001632:	b29b      	uxth	r3, r3
 8001634:	3301      	adds	r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ffbc 	bl	80015b6 <lcd_data16>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <lcd_copy>:
void lcd_copy(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	22a0      	movs	r2, #160	@ 0xa0
 8001650:	2100      	movs	r1, #0
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff ffc4 	bl	80015e0 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001658:	202c      	movs	r0, #44	@ 0x2c
 800165a:	f7ff ff47 	bl	80014ec <lcd_cmd>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <lcd_copy+0x50>)
 8001666:	f001 f853 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001670:	4809      	ldr	r0, [pc, #36]	@ (8001698 <lcd_copy+0x50>)
 8001672:	f001 f84d 	bl	8002710 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 800167e:	4907      	ldr	r1, [pc, #28]	@ (800169c <lcd_copy+0x54>)
 8001680:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <lcd_copy+0x58>)
 8001682:	f002 fc20 	bl	8003ec6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <lcd_copy+0x50>)
 800168e:	f001 f83f 	bl	8002710 <HAL_GPIO_WritePin>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	48000400 	.word	0x48000400
 800169c:	20000d4c 	.word	0x20000d4c
 80016a0:	2000ad50 	.word	0x2000ad50

080016a4 <lcd_clear>:
void lcd_clear(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
    lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80016aa:	2380      	movs	r3, #128	@ 0x80
 80016ac:	22a0      	movs	r2, #160	@ 0xa0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff ff95 	bl	80015e0 <lcd_set_window>
    lcd_cmd(ST7735S_RAMWR);
 80016b6:	202c      	movs	r0, #44	@ 0x2c
 80016b8:	f7ff ff18 	bl	80014ec <lcd_cmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016c2:	4815      	ldr	r0, [pc, #84]	@ (8001718 <lcd_clear+0x74>)
 80016c4:	f001 f824 	bl	8002710 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ce:	4812      	ldr	r0, [pc, #72]	@ (8001718 <lcd_clear+0x74>)
 80016d0:	f001 f81e 	bl	8002710 <HAL_GPIO_WritePin>

    // Wypełnij bufor ramki kolorem czarnym
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	e007      	b.n	80016ea <lcd_clear+0x46>
        frame_buffer[i] = 0x0000; // Czarny kolor
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <lcd_clear+0x78>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2100      	movs	r1, #0
 80016e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80016f0:	dbf3      	blt.n	80016da <lcd_clear+0x36>
    }

    // Prześlij zaktualizowany bufor ramki do wyświetlacza
    HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80016fa:	4908      	ldr	r1, [pc, #32]	@ (800171c <lcd_clear+0x78>)
 80016fc:	4808      	ldr	r0, [pc, #32]	@ (8001720 <lcd_clear+0x7c>)
 80016fe:	f002 fbe2 	bl	8003ec6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001708:	4803      	ldr	r0, [pc, #12]	@ (8001718 <lcd_clear+0x74>)
 800170a:	f001 f801 	bl	8002710 <HAL_GPIO_WritePin>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	48000400 	.word	0x48000400
 800171c:	20000d4c 	.word	0x20000d4c
 8001720:	2000ad50 	.word	0x2000ad50

08001724 <lcd_init>:


//TODO zrobic zarządzanie podświetleniem
void lcd_init(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2104      	movs	r1, #4
 800172e:	4817      	ldr	r0, [pc, #92]	@ (800178c <lcd_init+0x68>)
 8001730:	f000 ffee 	bl	8002710 <HAL_GPIO_WritePin>
    delay(100);
 8001734:	2064      	movs	r0, #100	@ 0x64
 8001736:	f000 f895 	bl	8001864 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2104      	movs	r1, #4
 800173e:	4813      	ldr	r0, [pc, #76]	@ (800178c <lcd_init+0x68>)
 8001740:	f000 ffe6 	bl	8002710 <HAL_GPIO_WritePin>
    delay(100);
 8001744:	2064      	movs	r0, #100	@ 0x64
 8001746:	f000 f88d 	bl	8001864 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	e009      	b.n	8001764 <lcd_init+0x40>
        lcd_send(init_table[i]);
 8001750:	4a0f      	ldr	r2, [pc, #60]	@ (8001790 <lcd_init+0x6c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff13 	bl	8001584 <lcd_send>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b4b      	cmp	r3, #75	@ 0x4b
 8001768:	d9f2      	bls.n	8001750 <lcd_init+0x2c>
    }
    delay(200);
 800176a:	20c8      	movs	r0, #200	@ 0xc8
 800176c:	f000 f87a 	bl	8001864 <delay>
    lcd_cmd(ST7735S_SLPOUT);
 8001770:	2011      	movs	r0, #17
 8001772:	f7ff febb 	bl	80014ec <lcd_cmd>
    delay(120);
 8001776:	2078      	movs	r0, #120	@ 0x78
 8001778:	f000 f874 	bl	8001864 <delay>
    lcd_cmd(ST7735S_DISPON);
 800177c:	2029      	movs	r0, #41	@ 0x29
 800177e:	f7ff feb5 	bl	80014ec <lcd_cmd>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	48000400 	.word	0x48000400
 8001790:	08011c2c 	.word	0x08011c2c

08001794 <lcd_put_pixel>:
	lcd_cmd(ST7735S_RAMWR);
	for (int i = 0; i < width * height; i++)
		lcd_data16(color);
}
void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	4613      	mov	r3, r2
 80017a0:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	015b      	lsls	r3, r3, #5
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	4905      	ldr	r1, [pc, #20]	@ (80017c8 <lcd_put_pixel+0x34>)
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000d4c 	.word	0x20000d4c

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	@ (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	@ (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f7ff ffc2 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delayMs){
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <delay+0x2c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs)); //niestety blokuje działanie programu ale na szczęście nie przerwań
 8001872:	bf00      	nop
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	441a      	add	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <delay+0x2c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d8f8      	bhi.n	8001874 <delay+0x10>
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	2000ad4c 	.word	0x2000ad4c

08001894 <wait_for_frame>:
void wait_for_frame(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 800189a:	f7fe fe93 	bl	80005c4 <USART_kbhit>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <wait_for_frame+0x20>
	        uint8_t received_char = USART_getchar();
 80018a4:	f7fe fea0 	bl	80005e8 <USART_getchar>
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
	        process_received_char(received_char);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fcb0 	bl	8001214 <process_received_char>
	 }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f000 fb77 	bl	8001fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 f810 	bl	80018e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <main+0x28>)
 80018ca:	f7ff ffa9 	bl	8001820 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ce:	f7ff fdc1 	bl	8001454 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018d2:	f000 fa99 	bl	8001e08 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80018d6:	f000 f85f 	bl	8001998 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80018da:	f7ff ff23 	bl	8001724 <lcd_init>
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
    /* USER CODE END WHILE */
	  wait_for_frame();
 80018de:	f7ff ffd9 	bl	8001894 <wait_for_frame>
 80018e2:	e7fc      	b.n	80018de <main+0x22>
 80018e4:	00013880 	.word	0x00013880

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b096      	sub	sp, #88	@ 0x58
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	2244      	movs	r2, #68	@ 0x44
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 ff1c 	bl	8007734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800190a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800190e:	f000 ff25 	bl	800275c <HAL_PWREx_ControlVoltageScaling>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001918:	f000 f838 	bl	800198c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800191c:	2310      	movs	r3, #16
 800191e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001920:	2301      	movs	r3, #1
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001928:	2360      	movs	r3, #96	@ 0x60
 800192a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192c:	2302      	movs	r3, #2
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001930:	2301      	movs	r3, #1
 8001932:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001938:	2328      	movs	r3, #40	@ 0x28
 800193a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800193c:	2307      	movs	r3, #7
 800193e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001944:	2302      	movs	r3, #2
 8001946:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4618      	mov	r0, r3
 800194e:	f000 ff5b 	bl	8002808 <HAL_RCC_OscConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001958:	f000 f818 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195c:	230f      	movs	r3, #15
 800195e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001960:	2303      	movs	r3, #3
 8001962:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001970:	463b      	mov	r3, r7
 8001972:	2104      	movs	r1, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f001 fb23 	bl	8002fc0 <HAL_RCC_ClockConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001980:	f000 f804 	bl	800198c <Error_Handler>
  }
}
 8001984:	bf00      	nop
 8001986:	3758      	adds	r7, #88	@ 0x58
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <Error_Handler+0x8>

08001998 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <MX_SPI2_Init+0x74>)
 800199e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <MX_SPI2_Init+0x78>)
 80019a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019aa:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b0:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019ce:	2210      	movs	r2, #16
 80019d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019e6:	2207      	movs	r2, #7
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_SPI2_Init+0x74>)
 80019f8:	f002 f9c2 	bl	8003d80 <HAL_SPI_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a02:	f7ff ffc3 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000ad50 	.word	0x2000ad50
 8001a10:	40003800 	.word	0x40003800

08001a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a25      	ldr	r2, [pc, #148]	@ (8001ac8 <HAL_SPI_MspInit+0xb4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d144      	bne.n	8001ac0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a36:	4b25      	ldr	r3, [pc, #148]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a72:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <HAL_SPI_MspInit+0xb8>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001a7e:	2308      	movs	r3, #8
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <HAL_SPI_MspInit+0xbc>)
 8001a9a:	f000 fc8f 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab0:	2305      	movs	r3, #5
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <HAL_SPI_MspInit+0xc0>)
 8001abc:	f000 fc7e 	bl	80023bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	@ 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40003800 	.word	0x40003800
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_MspInit+0x44>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b1c <HAL_MspInit+0x44>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_MspInit+0x44>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_MspInit+0x44>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_MspInit+0x44>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_MspInit+0x44>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <NMI_Handler+0x4>

08001b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <MemManage_Handler+0x4>

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b78:	f000 fa70 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <SysTick_Handler+0x18>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	4a02      	ldr	r2, [pc, #8]	@ (8001b8c <SysTick_Handler+0x18>)
 8001b84:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000ad4c 	.word	0x2000ad4c

08001b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <USART2_IRQHandler+0x10>)
 8001b96:	f002 fd69 	bl	800466c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000adb8 	.word	0x2000adb8

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bbe:	f005 fe89 	bl	80078d4 <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be6:	bf00      	nop
 8001be8:	e7fd      	b.n	8001be6 <_exit+0x12>

08001bea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e00a      	b.n	8001c12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfc:	f3af 8000 	nop.w
 8001c00:	4601      	mov	r1, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbf0      	blt.n	8001bfc <_read+0x12>
  }

  return len;
 8001c1a:	687b      	ldr	r3, [r7, #4]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e009      	b.n	8001c4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dbf1      	blt.n	8001c36 <_write+0x12>
  }
  return len;
 8001c52:	687b      	ldr	r3, [r7, #4]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_close>:

int _close(int file)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c84:	605a      	str	r2, [r3, #4]
  return 0;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_isatty>:

int _isatty(int file)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f005 fdee 	bl	80078d4 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20018000 	.word	0x20018000
 8001d24:	00002000 	.word	0x00002000
 8001d28:	2000adb4 	.word	0x2000adb4
 8001d2c:	2000af90 	.word	0x2000af90

08001d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <SystemInit+0x20>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <SystemInit+0x20>)
 8001d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <HAL_UART_TxCpltCallback>:
extern volatile int USART_TX_Busy;
extern volatile int USART_RX_Empty;
extern volatile int USART_RX_Busy;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a13      	ldr	r2, [pc, #76]	@ (8001dac <HAL_UART_TxCpltCallback+0x58>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d11e      	bne.n	8001da2 <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_UART_TxCpltCallback+0x5c>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_UART_TxCpltCallback+0x5c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d018      	beq.n	8001da2 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <HAL_UART_TxCpltCallback+0x5c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <HAL_UART_TxCpltCallback+0x60>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HAL_UART_TxCpltCallback+0x5c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <HAL_UART_TxCpltCallback+0x5c>)
 8001d82:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_UART_TxCpltCallback+0x5c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d8c:	d302      	bcc.n	8001d94 <HAL_UART_TxCpltCallback+0x40>
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_UART_TxCpltCallback+0x5c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001d94:	f107 030f 	add.w	r3, r7, #15
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4803      	ldr	r0, [pc, #12]	@ (8001dac <HAL_UART_TxCpltCallback+0x58>)
 8001d9e:	f002 fbbb 	bl	8004518 <HAL_UART_Transmit_IT>
	   }
   }
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000adb8 	.word	0x2000adb8
 8001db0:	2000029c 	.word	0x2000029c
 8001db4:	200002ac 	.word	0x200002ac

08001db8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dfc <HAL_UART_RxCpltCallback+0x44>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d114      	bne.n	8001df2 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_UART_RxCpltCallback+0x48>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4a0c      	ldr	r2, [pc, #48]	@ (8001e00 <HAL_UART_RxCpltCallback+0x48>)
 8001dd0:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_UART_RxCpltCallback+0x48>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2bff      	cmp	r3, #255	@ 0xff
 8001dd8:	d902      	bls.n	8001de0 <HAL_UART_RxCpltCallback+0x28>
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_UART_RxCpltCallback+0x48>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <HAL_UART_RxCpltCallback+0x48>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_UART_RxCpltCallback+0x4c>)
 8001de6:	4413      	add	r3, r2
 8001de8:	2201      	movs	r2, #1
 8001dea:	4619      	mov	r1, r3
 8001dec:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <HAL_UART_RxCpltCallback+0x44>)
 8001dee:	f002 fbf1 	bl	80045d4 <HAL_UART_Receive_IT>

	 }
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000adb8 	.word	0x2000adb8
 8001e00:	2000028c 	.word	0x2000028c
 8001e04:	20000aac 	.word	0x20000aac

08001e08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e84 <MX_USART2_UART_Init+0x7c>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4a:	480d      	ldr	r0, [pc, #52]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e4c:	f002 fb16 	bl	800447c <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e56:	f7ff fd99 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ring_buffer_setup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE);
 8001e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e5e:	490a      	ldr	r1, [pc, #40]	@ (8001e88 <MX_USART2_UART_Init+0x80>)
 8001e60:	480a      	ldr	r0, [pc, #40]	@ (8001e8c <MX_USART2_UART_Init+0x84>)
 8001e62:	f7fe fb95 	bl	8000590 <ring_buffer_setup>
  ring_buffer_setup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE);
 8001e66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e6a:	4909      	ldr	r1, [pc, #36]	@ (8001e90 <MX_USART2_UART_Init+0x88>)
 8001e6c:	4809      	ldr	r0, [pc, #36]	@ (8001e94 <MX_USART2_UART_Init+0x8c>)
 8001e6e:	f7fe fb8f 	bl	8000590 <ring_buffer_setup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8001e72:	2201      	movs	r2, #1
 8001e74:	4904      	ldr	r1, [pc, #16]	@ (8001e88 <MX_USART2_UART_Init+0x80>)
 8001e76:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <MX_USART2_UART_Init+0x78>)
 8001e78:	f002 fbac 	bl	80045d4 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000adb8 	.word	0x2000adb8
 8001e84:	40004400 	.word	0x40004400
 8001e88:	20000aac 	.word	0x20000aac
 8001e8c:	2000028c 	.word	0x2000028c
 8001e90:	200002ac 	.word	0x200002ac
 8001e94:	2000029c 	.word	0x2000029c

08001e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0ac      	sub	sp, #176	@ 0xb0
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2288      	movs	r2, #136	@ 0x88
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f005 fc3b 	bl	8007734 <memset>
  if(uartHandle->Instance==USART2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <HAL_UART_MspInit+0xc0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d143      	bne.n	8001f50 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fa97 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ee0:	f7ff fd54 	bl	800198c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <HAL_UART_MspInit+0xc4>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <HAL_UART_MspInit+0xc4>)
 8001eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <HAL_UART_MspInit+0xc4>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <HAL_UART_MspInit+0xc4>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f00:	4a16      	ldr	r2, [pc, #88]	@ (8001f5c <HAL_UART_MspInit+0xc4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_UART_MspInit+0xc4>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f14:	230c      	movs	r3, #12
 8001f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f3c:	f000 fa3e 	bl	80023bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	2026      	movs	r0, #38	@ 0x26
 8001f46:	f000 f984 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f4a:	2026      	movs	r0, #38	@ 0x26
 8001f4c:	f000 f99d 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f50:	bf00      	nop
 8001f52:	37b0      	adds	r7, #176	@ 0xb0
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40004400 	.word	0x40004400
 8001f5c:	40021000 	.word	0x40021000

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f64:	f7ff fee4 	bl	8001d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	@ (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f005 fca7 	bl	80078e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7ff fc93 	bl	80018bc <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8001fa4:	08011f00 	.word	0x08011f00
  ldr r2, =_sbss
 8001fa8:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001fac:	2000af90 	.word	0x2000af90

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>

08001fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f93d 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f80e 	bl	8001fe4 <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	e001      	b.n	8001fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd4:	f7ff fd80 	bl	8001ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ff0:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <HAL_InitTick+0x6c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d023      	beq.n	8002040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_InitTick+0x70>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_InitTick+0x6c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f949 	bl	80022a6 <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d809      	bhi.n	8002034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f913 	bl	8002252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <HAL_InitTick+0x74>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e007      	b.n	8002044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e004      	b.n	8002044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e001      	b.n	8002044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000208 	.word	0x20000208
 8002054:	20000200 	.word	0x20000200
 8002058:	20000204 	.word	0x20000204

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000208 	.word	0x20000208
 8002080:	2000ae40 	.word	0x2000ae40

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2000ae40 	.word	0x2000ae40

0800209c <__NVIC_SetPriorityGrouping>:
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	@ (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff3e 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff8e 	bl	8002190 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff31 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa2 	bl	80021f8 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d008      	beq.n	80022e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e022      	b.n	800232e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 020e 	bic.w	r2, r2, #14
 80022f6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230c:	f003 021c 	and.w	r2, r3, #28
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f202 	lsl.w	r2, r1, r2
 800231a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d005      	beq.n	800235e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2204      	movs	r2, #4
 8002356:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e029      	b.n	80023b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 020e 	bic.w	r2, r2, #14
 800236c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f003 021c 	and.w	r2, r3, #28
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f202 	lsl.w	r2, r1, r2
 8002390:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    }
  }
  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	e17f      	b.n	80026cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8171 	beq.w	80026c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d005      	beq.n	80023fc <HAL_GPIO_Init+0x40>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d130      	bne.n	800245e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002432:	2201      	movs	r2, #1
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	f003 0201 	and.w	r2, r3, #1
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b03      	cmp	r3, #3
 8002468:	d118      	bne.n	800249c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	6939      	ldr	r1, [r7, #16]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80ac 	beq.w	80026c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b5f      	ldr	r3, [pc, #380]	@ (80026ec <HAL_GPIO_Init+0x330>)
 8002570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002572:	4a5e      	ldr	r2, [pc, #376]	@ (80026ec <HAL_GPIO_Init+0x330>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6613      	str	r3, [r2, #96]	@ 0x60
 800257a:	4b5c      	ldr	r3, [pc, #368]	@ (80026ec <HAL_GPIO_Init+0x330>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002586:	4a5a      	ldr	r2, [pc, #360]	@ (80026f0 <HAL_GPIO_Init+0x334>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025b0:	d025      	beq.n	80025fe <HAL_GPIO_Init+0x242>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4f      	ldr	r2, [pc, #316]	@ (80026f4 <HAL_GPIO_Init+0x338>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <HAL_GPIO_Init+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4e      	ldr	r2, [pc, #312]	@ (80026f8 <HAL_GPIO_Init+0x33c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0x23a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4d      	ldr	r2, [pc, #308]	@ (80026fc <HAL_GPIO_Init+0x340>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x236>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002700 <HAL_GPIO_Init+0x344>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x232>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002704 <HAL_GPIO_Init+0x348>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x22e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <HAL_GPIO_Init+0x34c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x22a>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e00c      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025e6:	2307      	movs	r3, #7
 80025e8:	e00a      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e008      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_GPIO_Init+0x244>
 80025fe:	2300      	movs	r3, #0
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	4093      	lsls	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002610:	4937      	ldr	r1, [pc, #220]	@ (80026f0 <HAL_GPIO_Init+0x334>)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800261e:	4b3b      	ldr	r3, [pc, #236]	@ (800270c <HAL_GPIO_Init+0x350>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002642:	4a32      	ldr	r2, [pc, #200]	@ (800270c <HAL_GPIO_Init+0x350>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002648:	4b30      	ldr	r3, [pc, #192]	@ (800270c <HAL_GPIO_Init+0x350>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800266c:	4a27      	ldr	r2, [pc, #156]	@ (800270c <HAL_GPIO_Init+0x350>)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002672:	4b26      	ldr	r3, [pc, #152]	@ (800270c <HAL_GPIO_Init+0x350>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002696:	4a1d      	ldr	r2, [pc, #116]	@ (800270c <HAL_GPIO_Init+0x350>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <HAL_GPIO_Init+0x350>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c0:	4a12      	ldr	r2, [pc, #72]	@ (800270c <HAL_GPIO_Init+0x350>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f47f ae78 	bne.w	80023cc <HAL_GPIO_Init+0x10>
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010000 	.word	0x40010000
 80026f4:	48000400 	.word	0x48000400
 80026f8:	48000800 	.word	0x48000800
 80026fc:	48000c00 	.word	0x48000c00
 8002700:	48001000 	.word	0x48001000
 8002704:	48001400 	.word	0x48001400
 8002708:	48001800 	.word	0x48001800
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800272c:	e002      	b.n	8002734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <HAL_PWREx_GetVoltageRange+0x18>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40007000 	.word	0x40007000

0800275c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800276a:	d130      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800276c:	4b23      	ldr	r3, [pc, #140]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002778:	d038      	beq.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277a:	4b20      	ldr	r3, [pc, #128]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002782:	4a1e      	ldr	r2, [pc, #120]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002784:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2232      	movs	r2, #50	@ 0x32
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	4a1b      	ldr	r2, [pc, #108]	@ (8002804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0c9b      	lsrs	r3, r3, #18
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a0:	e002      	b.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a8:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b4:	d102      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f2      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027bc:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027c8:	d110      	bne.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e00f      	b.n	80027ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ce:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027da:	d007      	beq.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027dc:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027e4:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40007000 	.word	0x40007000
 8002800:	20000200 	.word	0x20000200
 8002804:	431bde83 	.word	0x431bde83

08002808 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e3ca      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281a:	4b97      	ldr	r3, [pc, #604]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002824:	4b94      	ldr	r3, [pc, #592]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80e4 	beq.w	8002a04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_RCC_OscConfig+0x4a>
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b0c      	cmp	r3, #12
 8002846:	f040 808b 	bne.w	8002960 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b01      	cmp	r3, #1
 800284e:	f040 8087 	bne.w	8002960 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002852:	4b89      	ldr	r3, [pc, #548]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e3a2      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	4b82      	ldr	r3, [pc, #520]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_RCC_OscConfig+0x7c>
 800287a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002882:	e005      	b.n	8002890 <HAL_RCC_OscConfig+0x88>
 8002884:	4b7c      	ldr	r3, [pc, #496]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002890:	4293      	cmp	r3, r2
 8002892:	d223      	bcs.n	80028dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fd55 	bl	8003348 <RCC_SetFlashLatencyFromMSIRange>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e383      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a8:	4b73      	ldr	r3, [pc, #460]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a72      	ldr	r2, [pc, #456]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b70      	ldr	r3, [pc, #448]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	496d      	ldr	r1, [pc, #436]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	4968      	ldr	r1, [pc, #416]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
 80028da:	e025      	b.n	8002928 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028dc:	4b66      	ldr	r3, [pc, #408]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a65      	ldr	r2, [pc, #404]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028e2:	f043 0308 	orr.w	r3, r3, #8
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b63      	ldr	r3, [pc, #396]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4960      	ldr	r1, [pc, #384]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	495b      	ldr	r1, [pc, #364]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fd15 	bl	8003348 <RCC_SetFlashLatencyFromMSIRange>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e343      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002928:	f000 fc4a 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b52      	ldr	r3, [pc, #328]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	4950      	ldr	r1, [pc, #320]	@ (8002a7c <HAL_RCC_OscConfig+0x274>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
 8002944:	4a4e      	ldr	r2, [pc, #312]	@ (8002a80 <HAL_RCC_OscConfig+0x278>)
 8002946:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002948:	4b4e      	ldr	r3, [pc, #312]	@ (8002a84 <HAL_RCC_OscConfig+0x27c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fb49 	bl	8001fe4 <HAL_InitTick>
 8002952:	4603      	mov	r3, r0
 8002954:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d052      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	e327      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d032      	beq.n	80029ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002968:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a42      	ldr	r2, [pc, #264]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002974:	f7ff fb86 	bl	8002084 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297c:	f7ff fb82 	bl	8002084 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e310      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800298e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299a:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a36      	ldr	r2, [pc, #216]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4931      	ldr	r1, [pc, #196]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	492c      	ldr	r1, [pc, #176]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
 80029cc:	e01a      	b.n	8002a04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a29      	ldr	r2, [pc, #164]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029da:	f7ff fb53 	bl	8002084 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e2:	f7ff fb4f 	bl	8002084 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e2dd      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029f4:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1da>
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d074      	beq.n	8002afa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d005      	beq.n	8002a22 <HAL_RCC_OscConfig+0x21a>
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d10e      	bne.n	8002a3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d10b      	bne.n	8002a3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d064      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d160      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e2ba      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x24a>
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0b      	ldr	r2, [pc, #44]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e026      	b.n	8002aa0 <HAL_RCC_OscConfig+0x298>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a5a:	d115      	bne.n	8002a88 <HAL_RCC_OscConfig+0x280>
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002a62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a02      	ldr	r2, [pc, #8]	@ (8002a78 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x298>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08011cc4 	.word	0x08011cc4
 8002a80:	20000200 	.word	0x20000200
 8002a84:	20000204 	.word	0x20000204
 8002a88:	4ba0      	ldr	r3, [pc, #640]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a9f      	ldr	r2, [pc, #636]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b9d      	ldr	r3, [pc, #628]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a9c      	ldr	r2, [pc, #624]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7ff faec 	bl	8002084 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff fae8 	bl	8002084 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e276      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac2:	4b92      	ldr	r3, [pc, #584]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2a8>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fad8 	bl	8002084 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff fad4 	bl	8002084 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	@ 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e262      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aea:	4b88      	ldr	r3, [pc, #544]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2d0>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d060      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_OscConfig+0x310>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d119      	bne.n	8002b46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d116      	bne.n	8002b46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b18:	4b7c      	ldr	r3, [pc, #496]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_OscConfig+0x328>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e23f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b76      	ldr	r3, [pc, #472]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	4973      	ldr	r1, [pc, #460]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b44:	e040      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d023      	beq.n	8002b96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7ff fa93 	bl	8002084 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7ff fa8f 	bl	8002084 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e21d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b74:	4b65      	ldr	r3, [pc, #404]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b62      	ldr	r3, [pc, #392]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	495f      	ldr	r1, [pc, #380]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	e018      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b5d      	ldr	r3, [pc, #372]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5c      	ldr	r2, [pc, #368]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff fa6f 	bl	8002084 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff fa6b 	bl	8002084 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1f9      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bbc:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f0      	bne.n	8002baa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d03c      	beq.n	8002c4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be2:	4a4a      	ldr	r2, [pc, #296]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7ff fa4a 	bl	8002084 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7ff fa46 	bl	8002084 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1d4      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c06:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0ef      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x3ec>
 8002c14:	e01b      	b.n	8002c4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c16:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7ff fa2d 	bl	8002084 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7ff fa29 	bl	8002084 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1b7      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c40:	4b32      	ldr	r3, [pc, #200]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ef      	bne.n	8002c2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80a6 	beq.w	8002da8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c60:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b27      	ldr	r3, [pc, #156]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	4a26      	ldr	r2, [pc, #152]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c78:	4b24      	ldr	r3, [pc, #144]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c88:	4b21      	ldr	r3, [pc, #132]	@ (8002d10 <HAL_RCC_OscConfig+0x508>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d118      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c94:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <HAL_RCC_OscConfig+0x508>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <HAL_RCC_OscConfig+0x508>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca0:	f7ff f9f0 	bl	8002084 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7ff f9ec 	bl	8002084 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e17a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <HAL_RCC_OscConfig+0x508>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d108      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x4d8>
 8002cce:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cde:	e029      	b.n	8002d34 <HAL_RCC_OscConfig+0x52c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d115      	bne.n	8002d14 <HAL_RCC_OscConfig+0x50c>
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf8:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	4a03      	ldr	r2, [pc, #12]	@ (8002d0c <HAL_RCC_OscConfig+0x504>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x52c>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
 8002d14:	4b9c      	ldr	r3, [pc, #624]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1a:	4a9b      	ldr	r2, [pc, #620]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d24:	4b98      	ldr	r3, [pc, #608]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	4a97      	ldr	r2, [pc, #604]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d016      	beq.n	8002d6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7ff f9a2 	bl	8002084 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7ff f99e 	bl	8002084 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e12a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ed      	beq.n	8002d44 <HAL_RCC_OscConfig+0x53c>
 8002d68:	e015      	b.n	8002d96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7ff f98b 	bl	8002084 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7ff f987 	bl	8002084 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e113      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d88:	4b7f      	ldr	r3, [pc, #508]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ed      	bne.n	8002d72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d96:	7ffb      	ldrb	r3, [r7, #31]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b7a      	ldr	r3, [pc, #488]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	4a79      	ldr	r2, [pc, #484]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80fe 	beq.w	8002fae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	f040 80d0 	bne.w	8002f5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dbc:	4b72      	ldr	r3, [pc, #456]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d130      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d127      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11f      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dfc:	2a07      	cmp	r2, #7
 8002dfe:	bf14      	ite	ne
 8002e00:	2201      	movne	r2, #1
 8002e02:	2200      	moveq	r2, #0
 8002e04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d113      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d06e      	beq.n	8002f10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d069      	beq.n	8002f0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e38:	4b53      	ldr	r3, [pc, #332]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e44:	4b50      	ldr	r3, [pc, #320]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0ad      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e54:	4b4c      	ldr	r3, [pc, #304]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a4b      	ldr	r2, [pc, #300]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e60:	f7ff f910 	bl	8002084 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7ff f90c 	bl	8002084 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e09a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7a:	4b43      	ldr	r3, [pc, #268]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e86:	4b40      	ldr	r3, [pc, #256]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	4b40      	ldr	r3, [pc, #256]	@ (8002f8c <HAL_RCC_OscConfig+0x784>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e96:	3a01      	subs	r2, #1
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ea0:	0212      	lsls	r2, r2, #8
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ea8:	0852      	lsrs	r2, r2, #1
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	0552      	lsls	r2, r2, #21
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002eb4:	0852      	lsrs	r2, r2, #1
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0652      	lsls	r2, r2, #25
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ec0:	0912      	lsrs	r2, r2, #4
 8002ec2:	0452      	lsls	r2, r2, #17
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	4930      	ldr	r1, [pc, #192]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ee4:	f7ff f8ce 	bl	8002084 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7ff f8ca 	bl	8002084 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e058      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efe:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f0a:	e050      	b.n	8002fae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e04f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f10:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d148      	bne.n	8002fae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f28:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a16      	ldr	r2, [pc, #88]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f34:	f7ff f8a6 	bl	8002084 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7ff f8a2 	bl	8002084 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e030      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x734>
 8002f5a:	e028      	b.n	8002fae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d023      	beq.n	8002faa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a08      	ldr	r2, [pc, #32]	@ (8002f88 <HAL_RCC_OscConfig+0x780>)
 8002f68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7ff f889 	bl	8002084 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f74:	e00c      	b.n	8002f90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f76:	f7ff f885 	bl	8002084 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d905      	bls.n	8002f90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e013      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ec      	bne.n	8002f76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b0>)
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	4905      	ldr	r1, [pc, #20]	@ (8002fb8 <HAL_RCC_OscConfig+0x7b0>)
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_OscConfig+0x7b4>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]
 8002fa8:	e001      	b.n	8002fae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	feeefffc 	.word	0xfeeefffc

08002fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0e7      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b75      	ldr	r3, [pc, #468]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d910      	bls.n	8003004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b72      	ldr	r3, [pc, #456]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	4970      	ldr	r1, [pc, #448]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b6e      	ldr	r3, [pc, #440]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0cf      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b66      	ldr	r3, [pc, #408]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800301c:	429a      	cmp	r2, r3
 800301e:	d908      	bls.n	8003032 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b63      	ldr	r3, [pc, #396]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4960      	ldr	r1, [pc, #384]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d04c      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003046:	4b5a      	ldr	r3, [pc, #360]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d121      	bne.n	8003096 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e0a6      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305e:	4b54      	ldr	r3, [pc, #336]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d115      	bne.n	8003096 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e09a      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003076:	4b4e      	ldr	r3, [pc, #312]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e08e      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003086:	4b4a      	ldr	r3, [pc, #296]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e086      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003096:	4b46      	ldr	r3, [pc, #280]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 0203 	bic.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4943      	ldr	r1, [pc, #268]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a8:	f7fe ffec 	bl	8002084 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe ffe8 	bl	8002084 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e06e      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	4b3a      	ldr	r3, [pc, #232]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 020c 	and.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1eb      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d208      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b2e      	ldr	r3, [pc, #184]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	492b      	ldr	r1, [pc, #172]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003106:	4b29      	ldr	r3, [pc, #164]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d210      	bcs.n	8003136 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003114:	4b25      	ldr	r3, [pc, #148]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 0207 	bic.w	r2, r3, #7
 800311c:	4923      	ldr	r1, [pc, #140]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003124:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <HAL_RCC_ClockConfig+0x1ec>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e036      	b.n	80031a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003142:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4918      	ldr	r1, [pc, #96]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	4313      	orrs	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003160:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4910      	ldr	r1, [pc, #64]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003174:	f000 f824 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <HAL_RCC_ClockConfig+0x1f0>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	490b      	ldr	r1, [pc, #44]	@ (80031b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
 8003190:	4a09      	ldr	r2, [pc, #36]	@ (80031b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003192:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003194:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <HAL_RCC_ClockConfig+0x1fc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe ff23 	bl	8001fe4 <HAL_InitTick>
 800319e:	4603      	mov	r3, r0
 80031a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80031a2:	7afb      	ldrb	r3, [r7, #11]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08011cc4 	.word	0x08011cc4
 80031b8:	20000200 	.word	0x20000200
 80031bc:	20000204 	.word	0x20000204

080031c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ce:	4b3e      	ldr	r3, [pc, #248]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d8:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x34>
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d121      	bne.n	8003232 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d11e      	bne.n	8003232 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031f4:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003200:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e005      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003210:	4b2d      	ldr	r3, [pc, #180]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800321c:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10d      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d102      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	e004      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d101      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003244:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003246:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d134      	bne.n	80032b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800324e:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d003      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0xa6>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d003      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0xac>
 8003264:	e005      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003266:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003268:	617b      	str	r3, [r7, #20]
      break;
 800326a:	e005      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800326c:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800326e:	617b      	str	r3, [r7, #20]
      break;
 8003270:	e002      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	617b      	str	r3, [r7, #20]
      break;
 8003276:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003278:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	3301      	adds	r3, #1
 8003284:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	fb03 f202 	mul.w	r2, r3, r2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	fbb2 f3f3 	udiv	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	0e5b      	lsrs	r3, r3, #25
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	3301      	adds	r3, #1
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032b8:	69bb      	ldr	r3, [r7, #24]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	@ 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	08011cdc 	.word	0x08011cdc
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	007a1200 	.word	0x007a1200

080032d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000200 	.word	0x20000200

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032f4:	f7ff fff0 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4904      	ldr	r1, [pc, #16]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	08011cd4 	.word	0x08011cd4

0800331c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003320:	f7ff ffda 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0adb      	lsrs	r3, r3, #11
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4904      	ldr	r1, [pc, #16]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	08011cd4 	.word	0x08011cd4

08003348 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003354:	4b2a      	ldr	r3, [pc, #168]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003360:	f7ff f9ee 	bl	8002740 <HAL_PWREx_GetVoltageRange>
 8003364:	6178      	str	r0, [r7, #20]
 8003366:	e014      	b.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	4a24      	ldr	r2, [pc, #144]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003372:	6593      	str	r3, [r2, #88]	@ 0x58
 8003374:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003380:	f7ff f9de 	bl	8002740 <HAL_PWREx_GetVoltageRange>
 8003384:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003386:	4b1e      	ldr	r3, [pc, #120]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003390:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003398:	d10b      	bne.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b80      	cmp	r3, #128	@ 0x80
 800339e:	d919      	bls.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80033a4:	d902      	bls.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033a6:	2302      	movs	r3, #2
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	e013      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033ac:	2301      	movs	r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	e010      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b80      	cmp	r3, #128	@ 0x80
 80033b6:	d902      	bls.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033b8:	2303      	movs	r3, #3
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e00a      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b80      	cmp	r3, #128	@ 0x80
 80033c2:	d102      	bne.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c4:	2302      	movs	r3, #2
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e004      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b70      	cmp	r3, #112	@ 0x70
 80033ce:	d101      	bne.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 0207 	bic.w	r2, r3, #7
 80033dc:	4909      	ldr	r1, [pc, #36]	@ (8003404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e4:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	40022000 	.word	0x40022000

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003410:	2300      	movs	r3, #0
 8003412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003414:	2300      	movs	r3, #0
 8003416:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003420:	2b00      	cmp	r3, #0
 8003422:	d041      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003428:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800342c:	d02a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800342e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003432:	d824      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003434:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800343a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800343e:	d81e      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003448:	d010      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800344a:	e018      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800344c:	4b86      	ldr	r3, [pc, #536]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a85      	ldr	r2, [pc, #532]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003456:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003458:	e015      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fabb 	bl	80039dc <RCCEx_PLLSAI1_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3320      	adds	r3, #32
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fba6 	bl	8003bc4 <RCCEx_PLLSAI2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	74fb      	strb	r3, [r7, #19]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800348c:	4b76      	ldr	r3, [pc, #472]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003492:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800349a:	4973      	ldr	r1, [pc, #460]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034a2:	e001      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d041      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034bc:	d02a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034c2:	d824      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034c8:	d008      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034ce:	d81e      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d8:	d010      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034da:	e018      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034dc:	4b62      	ldr	r3, [pc, #392]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a61      	ldr	r2, [pc, #388]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034e8:	e015      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fa73 	bl	80039dc <RCCEx_PLLSAI1_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034fa:	e00c      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3320      	adds	r3, #32
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fb5e 	bl	8003bc4 <RCCEx_PLLSAI2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	74fb      	strb	r3, [r7, #19]
      break;
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800351c:	4b52      	ldr	r3, [pc, #328]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800352a:	494f      	ldr	r1, [pc, #316]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003532:	e001      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a0 	beq.w	8003686 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003546:	2300      	movs	r3, #0
 8003548:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800354a:	4b47      	ldr	r3, [pc, #284]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b41      	ldr	r3, [pc, #260]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003564:	4a40      	ldr	r2, [pc, #256]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356a:	6593      	str	r3, [r2, #88]	@ 0x58
 800356c:	4b3e      	ldr	r3, [pc, #248]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003578:	2301      	movs	r3, #1
 800357a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357c:	4b3b      	ldr	r3, [pc, #236]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a3a      	ldr	r2, [pc, #232]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003588:	f7fe fd7c 	bl	8002084 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800358e:	e009      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003590:	f7fe fd78 	bl	8002084 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d902      	bls.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	74fb      	strb	r3, [r7, #19]
        break;
 80035a2:	e005      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a4:	4b31      	ldr	r3, [pc, #196]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d15c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01f      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d019      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d4:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e0:	4b21      	ldr	r3, [pc, #132]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e6:	4a20      	ldr	r2, [pc, #128]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003600:	4a19      	ldr	r2, [pc, #100]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe fd37 	bl	8002084 <HAL_GetTick>
 8003616:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003618:	e00b      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe fd33 	bl	8002084 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d902      	bls.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	74fb      	strb	r3, [r7, #19]
            break;
 8003630:	e006      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ec      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003656:	4904      	ldr	r1, [pc, #16]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800365e:	e009      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
 8003664:	e006      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003674:	7c7b      	ldrb	r3, [r7, #17]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367a:	4b9e      	ldr	r3, [pc, #632]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367e:	4a9d      	ldr	r2, [pc, #628]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003684:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003692:	4b98      	ldr	r3, [pc, #608]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003698:	f023 0203 	bic.w	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	4994      	ldr	r1, [pc, #592]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b4:	4b8f      	ldr	r3, [pc, #572]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	f023 020c 	bic.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c2:	498c      	ldr	r1, [pc, #560]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036d6:	4b87      	ldr	r3, [pc, #540]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	4983      	ldr	r1, [pc, #524]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036f8:	4b7e      	ldr	r3, [pc, #504]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	497b      	ldr	r1, [pc, #492]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800371a:	4b76      	ldr	r3, [pc, #472]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003720:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003728:	4972      	ldr	r1, [pc, #456]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800373c:	4b6d      	ldr	r3, [pc, #436]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003742:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	496a      	ldr	r1, [pc, #424]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800375e:	4b65      	ldr	r3, [pc, #404]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376c:	4961      	ldr	r1, [pc, #388]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003780:	4b5c      	ldr	r3, [pc, #368]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378e:	4959      	ldr	r1, [pc, #356]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a2:	4b54      	ldr	r3, [pc, #336]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b0:	4950      	ldr	r1, [pc, #320]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c4:	4b4b      	ldr	r3, [pc, #300]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d2:	4948      	ldr	r1, [pc, #288]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037e6:	4b43      	ldr	r3, [pc, #268]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f4:	493f      	ldr	r1, [pc, #252]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d028      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003808:	4b3a      	ldr	r3, [pc, #232]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003816:	4937      	ldr	r1, [pc, #220]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003826:	d106      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003828:	4b32      	ldr	r3, [pc, #200]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a31      	ldr	r2, [pc, #196]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003832:	60d3      	str	r3, [r2, #12]
 8003834:	e011      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800383a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800383e:	d10c      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f8c8 	bl	80039dc <RCCEx_PLLSAI1_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d028      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003866:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	491f      	ldr	r1, [pc, #124]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003884:	d106      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003886:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4a1a      	ldr	r2, [pc, #104]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003890:	60d3      	str	r3, [r2, #12]
 8003892:	e011      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003898:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f899 	bl	80039dc <RCCEx_PLLSAI1_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02b      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d2:	4908      	ldr	r1, [pc, #32]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038e2:	d109      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e4:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a02      	ldr	r2, [pc, #8]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ee:	60d3      	str	r3, [r2, #12]
 80038f0:	e014      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003900:	d10c      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3304      	adds	r3, #4
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f867 	bl	80039dc <RCCEx_PLLSAI1_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d02f      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003928:	4b2b      	ldr	r3, [pc, #172]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003936:	4928      	ldr	r1, [pc, #160]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003946:	d10d      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	2102      	movs	r1, #2
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f844 	bl	80039dc <RCCEx_PLLSAI1_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d014      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	74bb      	strb	r3, [r7, #18]
 8003962:	e011      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800396c:	d10c      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3320      	adds	r3, #32
 8003972:	2102      	movs	r1, #2
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f925 	bl	8003bc4 <RCCEx_PLLSAI2_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800397e:	7cfb      	ldrb	r3, [r7, #19]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003994:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039a2:	490d      	ldr	r1, [pc, #52]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039c6:	4904      	ldr	r1, [pc, #16]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000

080039dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ea:	4b75      	ldr	r3, [pc, #468]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039f6:	4b72      	ldr	r3, [pc, #456]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d10d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
       ||
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d047      	beq.n	8003ab2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	e044      	b.n	8003ab2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d018      	beq.n	8003a62 <RCCEx_PLLSAI1_Config+0x86>
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d825      	bhi.n	8003a80 <RCCEx_PLLSAI1_Config+0xa4>
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d002      	beq.n	8003a3e <RCCEx_PLLSAI1_Config+0x62>
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d009      	beq.n	8003a50 <RCCEx_PLLSAI1_Config+0x74>
 8003a3c:	e020      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a3e:	4b60      	ldr	r3, [pc, #384]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d11d      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4e:	e01a      	b.n	8003a86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a50:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e013      	b.n	8003a8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a62:	4b57      	ldr	r3, [pc, #348]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a6e:	4b54      	ldr	r3, [pc, #336]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a7e:	e006      	b.n	8003a8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      break;
 8003a84:	e004      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a86:	bf00      	nop
 8003a88:	e002      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a96:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	4944      	ldr	r1, [pc, #272]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d17d      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ab8:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a40      	ldr	r2, [pc, #256]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fe fade 	bl	8002084 <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aca:	e009      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003acc:	f7fe fada 	bl	8002084 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d902      	bls.n	8003ae0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ade:	e005      	b.n	8003aec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ae0:	4b37      	ldr	r3, [pc, #220]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ef      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d160      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d111      	bne.n	8003b1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003af8:	4b31      	ldr	r3, [pc, #196]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6892      	ldr	r2, [r2, #8]
 8003b08:	0211      	lsls	r1, r2, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	0912      	lsrs	r2, r2, #4
 8003b10:	0452      	lsls	r2, r2, #17
 8003b12:	430a      	orrs	r2, r1
 8003b14:	492a      	ldr	r1, [pc, #168]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	610b      	str	r3, [r1, #16]
 8003b1a:	e027      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d112      	bne.n	8003b48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b22:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003b2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6892      	ldr	r2, [r2, #8]
 8003b32:	0211      	lsls	r1, r2, #8
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6912      	ldr	r2, [r2, #16]
 8003b38:	0852      	lsrs	r2, r2, #1
 8003b3a:	3a01      	subs	r2, #1
 8003b3c:	0552      	lsls	r2, r2, #21
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	491f      	ldr	r1, [pc, #124]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	610b      	str	r3, [r1, #16]
 8003b46:	e011      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b48:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b50:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6892      	ldr	r2, [r2, #8]
 8003b58:	0211      	lsls	r1, r2, #8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6952      	ldr	r2, [r2, #20]
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0652      	lsls	r2, r2, #25
 8003b64:	430a      	orrs	r2, r1
 8003b66:	4916      	ldr	r1, [pc, #88]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b6c:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a13      	ldr	r2, [pc, #76]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fe fa84 	bl	8002084 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b7e:	e009      	b.n	8003b94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b80:	f7fe fa80 	bl	8002084 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d902      	bls.n	8003b94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	73fb      	strb	r3, [r7, #15]
          break;
 8003b92:	e005      	b.n	8003ba0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ef      	beq.n	8003b80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ba6:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	4904      	ldr	r1, [pc, #16]	@ (8003bc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000

08003bc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d018      	beq.n	8003c10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bde:	4b67      	ldr	r3, [pc, #412]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0203 	and.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d10d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bf6:	4b61      	ldr	r3, [pc, #388]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
       ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d047      	beq.n	8003c9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e044      	b.n	8003c9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d018      	beq.n	8003c4a <RCCEx_PLLSAI2_Config+0x86>
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d825      	bhi.n	8003c68 <RCCEx_PLLSAI2_Config+0xa4>
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d002      	beq.n	8003c26 <RCCEx_PLLSAI2_Config+0x62>
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d009      	beq.n	8003c38 <RCCEx_PLLSAI2_Config+0x74>
 8003c24:	e020      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c26:	4b55      	ldr	r3, [pc, #340]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d11d      	bne.n	8003c6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c36:	e01a      	b.n	8003c6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c38:	4b50      	ldr	r3, [pc, #320]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d116      	bne.n	8003c72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c48:	e013      	b.n	8003c72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c56:	4b49      	ldr	r3, [pc, #292]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c66:	e006      	b.n	8003c76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6c:	e004      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c76:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	430b      	orrs	r3, r1
 8003c94:	4939      	ldr	r1, [pc, #228]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d167      	bne.n	8003d70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ca0:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a35      	ldr	r2, [pc, #212]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cac:	f7fe f9ea 	bl	8002084 <HAL_GetTick>
 8003cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cb2:	e009      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cb4:	f7fe f9e6 	bl	8002084 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d902      	bls.n	8003cc8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cc6:	e005      	b.n	8003cd4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ef      	bne.n	8003cb4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d14a      	bne.n	8003d70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d111      	bne.n	8003d04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ce0:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	0912      	lsrs	r2, r2, #4
 8003cf8:	0452      	lsls	r2, r2, #17
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	491f      	ldr	r1, [pc, #124]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	614b      	str	r3, [r1, #20]
 8003d02:	e011      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	0211      	lsls	r1, r2, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6912      	ldr	r2, [r2, #16]
 8003d1a:	0852      	lsrs	r2, r2, #1
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0652      	lsls	r2, r2, #25
 8003d20:	430a      	orrs	r2, r1
 8003d22:	4916      	ldr	r1, [pc, #88]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d28:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fe f9a6 	bl	8002084 <HAL_GetTick>
 8003d38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d3a:	e009      	b.n	8003d50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d3c:	f7fe f9a2 	bl	8002084 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d902      	bls.n	8003d50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d4e:	e005      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ef      	beq.n	8003d3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d62:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4904      	ldr	r1, [pc, #16]	@ (8003d7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000

08003d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e095      	b.n	8003ebe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003da2:	d009      	beq.n	8003db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	61da      	str	r2, [r3, #28]
 8003daa:	e005      	b.n	8003db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fe1e 	bl	8001a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003df8:	d902      	bls.n	8003e00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e002      	b.n	8003e06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e0e:	d007      	beq.n	8003e20 <HAL_SPI_Init+0xa0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e62:	ea42 0103 	orr.w	r1, r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	f003 0204 	and.w	r2, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b088      	sub	sp, #32
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed6:	f7fe f8d5 	bl	8002084 <HAL_GetTick>
 8003eda:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d001      	beq.n	8003ef0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	e15c      	b.n	80041aa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Transmit+0x36>
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e154      	b.n	80041aa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_SPI_Transmit+0x48>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e14d      	b.n	80041aa <HAL_SPI_Transmit+0x2e4>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	88fa      	ldrh	r2, [r7, #6]
 8003f34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f60:	d10f      	bne.n	8003f82 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d007      	beq.n	8003fa0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fa8:	d952      	bls.n	8004050 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0xf2>
 8003fb2:	8b7b      	ldrh	r3, [r7, #26]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d145      	bne.n	8004044 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	881a      	ldrh	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fdc:	e032      	b.n	8004044 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d112      	bne.n	8004012 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004010:	e018      	b.n	8004044 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004012:	f7fe f837 	bl	8002084 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d803      	bhi.n	800402a <HAL_SPI_Transmit+0x164>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d102      	bne.n	8004030 <HAL_SPI_Transmit+0x16a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d109      	bne.n	8004044 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0b2      	b.n	80041aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1c7      	bne.n	8003fde <HAL_SPI_Transmit+0x118>
 800404e:	e083      	b.n	8004158 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_SPI_Transmit+0x198>
 8004058:	8b7b      	ldrh	r3, [r7, #26]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d177      	bne.n	800414e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d912      	bls.n	800408e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b02      	subs	r3, #2
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800408c:	e05f      	b.n	800414e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	7812      	ldrb	r2, [r2, #0]
 800409a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80040b4:	e04b      	b.n	800414e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d12b      	bne.n	800411c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d912      	bls.n	80040f4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d2:	881a      	ldrh	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	1c9a      	adds	r2, r3, #2
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b02      	subs	r3, #2
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040f2:	e02c      	b.n	800414e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	7812      	ldrb	r2, [r2, #0]
 8004100:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800411a:	e018      	b.n	800414e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411c:	f7fd ffb2 	bl	8002084 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d803      	bhi.n	8004134 <HAL_SPI_Transmit+0x26e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d102      	bne.n	800413a <HAL_SPI_Transmit+0x274>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e02d      	b.n	80041aa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ae      	bne.n	80040b6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f947 	bl	80043f0 <SPI_EndRxTxTransaction>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041c4:	f7fd ff5e 	bl	8002084 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041d4:	f7fd ff56 	bl	8002084 <HAL_GetTick>
 80041d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041da:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	015b      	lsls	r3, r3, #5
 80041e0:	0d1b      	lsrs	r3, r3, #20
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ea:	e054      	b.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d050      	beq.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041f4:	f7fd ff46 	bl	8002084 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	429a      	cmp	r2, r3
 8004202:	d902      	bls.n	800420a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d13d      	bne.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004222:	d111      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422c:	d004      	beq.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004236:	d107      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004250:	d10f      	bne.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e017      	b.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3b01      	subs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4013      	ands	r3, r2
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d19b      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000200 	.word	0x20000200

080042c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	@ 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042d6:	f7fd fed5 	bl	8002084 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80042e6:	f7fd fecd 	bl	8002084 <HAL_GetTick>
 80042ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042f4:	4b3d      	ldr	r3, [pc, #244]	@ (80043ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00da      	lsls	r2, r3, #3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	0d1b      	lsrs	r3, r3, #20
 8004304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800430c:	e060      	b.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004314:	d107      	bne.n	8004326 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004324:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d050      	beq.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800432e:	f7fd fea9 	bl	8002084 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433a:	429a      	cmp	r2, r3
 800433c:	d902      	bls.n	8004344 <SPI_WaitFifoStateUntilTimeout+0x80>
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d13d      	bne.n	80043c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435c:	d111      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004366:	d004      	beq.n	8004372 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d107      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438a:	d10f      	bne.n	80043ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e010      	b.n	80043e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d196      	bne.n	800430e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	@ 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000200 	.word	0x20000200

080043f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff ff5b 	bl	80042c4 <SPI_WaitFifoStateUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e027      	b.n	8004474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	2180      	movs	r1, #128	@ 0x80
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff fec0 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e014      	b.n	8004474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff ff34 	bl	80042c4 <SPI_WaitFifoStateUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e000      	b.n	8004474 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e040      	b.n	8004510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fcfa 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	@ 0x24
 80044a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fea6 	bl	8005214 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fbeb 	bl	8004ca4 <UART_SetConfig>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e01b      	b.n	8004510 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 ff25 	bl	8005358 <UART_CheckIdleState>
 800450e:	4603      	mov	r3, r0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004518:	b480      	push	{r7}
 800451a:	b08b      	sub	sp, #44	@ 0x2c
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	4613      	mov	r3, r2
 8004524:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452a:	2b20      	cmp	r3, #32
 800452c:	d147      	bne.n	80045be <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_UART_Transmit_IT+0x22>
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e040      	b.n	80045c0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2221      	movs	r2, #33	@ 0x21
 8004566:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004570:	d107      	bne.n	8004582 <HAL_UART_Transmit_IT+0x6a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a13      	ldr	r2, [pc, #76]	@ (80045cc <HAL_UART_Transmit_IT+0xb4>)
 800457e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004580:	e002      	b.n	8004588 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a12      	ldr	r2, [pc, #72]	@ (80045d0 <HAL_UART_Transmit_IT+0xb8>)
 8004586:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	613b      	str	r3, [r7, #16]
   return(result);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	69f9      	ldr	r1, [r7, #28]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	372c      	adds	r7, #44	@ 0x2c
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	080058bb 	.word	0x080058bb
 80045d0:	08005805 	.word	0x08005805

080045d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d137      	bne.n	800465c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_UART_Receive_IT+0x24>
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e030      	b.n	800465e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <HAL_UART_Receive_IT+0x94>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d01f      	beq.n	800464c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d018      	beq.n	800464c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	613b      	str	r3, [r7, #16]
   return(result);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	623b      	str	r3, [r7, #32]
 800463a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	69f9      	ldr	r1, [r7, #28]
 800463e:	6a3a      	ldr	r2, [r7, #32]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	61bb      	str	r3, [r7, #24]
   return(result);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	461a      	mov	r2, r3
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 ff96 	bl	8005584 <UART_Start_Receive_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	e000      	b.n	800465e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3728      	adds	r7, #40	@ 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40008000 	.word	0x40008000

0800466c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b0ba      	sub	sp, #232	@ 0xe8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004692:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004696:	f640 030f 	movw	r3, #2063	@ 0x80f
 800469a:	4013      	ands	r3, r2
 800469c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80046a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d115      	bne.n	80046d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00f      	beq.n	80046d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 82ca 	beq.w	8004c5e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
      }
      return;
 80046d2:	e2c4      	b.n	8004c5e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8117 	beq.w	800490c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046ee:	4b85      	ldr	r3, [pc, #532]	@ (8004904 <HAL_UART_IRQHandler+0x298>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 810a 	beq.w	800490c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d011      	beq.n	8004728 <HAL_UART_IRQHandler+0xbc>
 8004704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2201      	movs	r2, #1
 8004716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d011      	beq.n	8004758 <HAL_UART_IRQHandler+0xec>
 8004734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2202      	movs	r2, #2
 8004746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800474e:	f043 0204 	orr.w	r2, r3, #4
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d011      	beq.n	8004788 <HAL_UART_IRQHandler+0x11c>
 8004764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2204      	movs	r2, #4
 8004776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800477e:	f043 0202 	orr.w	r2, r3, #2
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d017      	beq.n	80047c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2208      	movs	r2, #8
 80047b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ba:	f043 0208 	orr.w	r2, r3, #8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d012      	beq.n	80047f6 <HAL_UART_IRQHandler+0x18a>
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ec:	f043 0220 	orr.w	r2, r3, #32
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8230 	beq.w	8004c62 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800480e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004830:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004846:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d04f      	beq.n	80048ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 ff5e 	bl	8005710 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b40      	cmp	r3, #64	@ 0x40
 8004860:	d141      	bne.n	80048e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004878:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800487c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800488e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004892:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800489a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1d9      	bne.n	8004862 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d013      	beq.n	80048de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	4a13      	ldr	r2, [pc, #76]	@ (8004908 <HAL_UART_IRQHandler+0x29c>)
 80048bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fd39 	bl	800233a <HAL_DMA_Abort_IT>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d017      	beq.n	80048fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048d8:	4610      	mov	r0, r2
 80048da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048dc:	e00f      	b.n	80048fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9ca 	bl	8004c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	e00b      	b.n	80048fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9c6 	bl	8004c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	e007      	b.n	80048fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9c2 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80048fc:	e1b1      	b.n	8004c62 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fe:	bf00      	nop
    return;
 8004900:	e1af      	b.n	8004c62 <HAL_UART_IRQHandler+0x5f6>
 8004902:	bf00      	nop
 8004904:	04000120 	.word	0x04000120
 8004908:	080057d9 	.word	0x080057d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004910:	2b01      	cmp	r3, #1
 8004912:	f040 816a 	bne.w	8004bea <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8163 	beq.w	8004bea <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 815c 	beq.w	8004bea <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2210      	movs	r2, #16
 8004938:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b40      	cmp	r3, #64	@ 0x40
 8004946:	f040 80d4 	bne.w	8004af2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004956:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80ad 	beq.w	8004aba <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800496a:	429a      	cmp	r2, r3
 800496c:	f080 80a5 	bcs.w	8004aba <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004976:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 8086 	bne.w	8004a98 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1da      	bne.n	800498c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e1      	bne.n	80049d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3308      	adds	r3, #8
 8004a18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e3      	bne.n	8004a12 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a68:	f023 0310 	bic.w	r3, r3, #16
 8004a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e4      	bne.n	8004a58 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd fc13 	bl	80022be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8ea 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004ab8:	e0d5      	b.n	8004c66 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ac0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	f040 80ce 	bne.w	8004c66 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	f040 80c5 	bne.w	8004c66 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f8ce 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
      return;
 8004af0:	e0b9      	b.n	8004c66 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80ab 	beq.w	8004c6a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a6 	beq.w	8004c6a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e4      	bne.n	8004b1e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	623b      	str	r3, [r7, #32]
   return(result);
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b78:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e3      	bne.n	8004b54 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f023 0310 	bic.w	r3, r3, #16
 8004bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	69b9      	ldr	r1, [r7, #24]
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e4      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f852 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004be8:	e03f      	b.n	8004c6a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00e      	beq.n	8004c14 <HAL_UART_IRQHandler+0x5a8>
 8004bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004c0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f001 f89b 	bl	8005d48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c12:	e02d      	b.n	8004c70 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00e      	beq.n	8004c3e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01c      	beq.n	8004c6e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
    }
    return;
 8004c3c:	e017      	b.n	8004c6e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d012      	beq.n	8004c70 <HAL_UART_IRQHandler+0x604>
 8004c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fe8f 	bl	800597a <UART_EndTransmit_IT>
    return;
 8004c5c:	e008      	b.n	8004c70 <HAL_UART_IRQHandler+0x604>
      return;
 8004c5e:	bf00      	nop
 8004c60:	e006      	b.n	8004c70 <HAL_UART_IRQHandler+0x604>
    return;
 8004c62:	bf00      	nop
 8004c64:	e004      	b.n	8004c70 <HAL_UART_IRQHandler+0x604>
      return;
 8004c66:	bf00      	nop
 8004c68:	e002      	b.n	8004c70 <HAL_UART_IRQHandler+0x604>
      return;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <HAL_UART_IRQHandler+0x604>
    return;
 8004c6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c70:	37e8      	adds	r7, #232	@ 0xe8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop

08004c78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca8:	b08a      	sub	sp, #40	@ 0x28
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4ba4      	ldr	r3, [pc, #656]	@ (8004f64 <UART_SetConfig+0x2c0>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a99      	ldr	r2, [pc, #612]	@ (8004f68 <UART_SetConfig+0x2c4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a90      	ldr	r2, [pc, #576]	@ (8004f6c <UART_SetConfig+0x2c8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d126      	bne.n	8004d7c <UART_SetConfig+0xd8>
 8004d2e:	4b90      	ldr	r3, [pc, #576]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d81b      	bhi.n	8004d74 <UART_SetConfig+0xd0>
 8004d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <UART_SetConfig+0xa0>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	e116      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d62:	e112      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6a:	e10e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d72:	e10a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7a:	e106      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7c      	ldr	r2, [pc, #496]	@ (8004f74 <UART_SetConfig+0x2d0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d138      	bne.n	8004df8 <UART_SetConfig+0x154>
 8004d86:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d82d      	bhi.n	8004df0 <UART_SetConfig+0x14c>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <UART_SetConfig+0xf8>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004df1 	.word	0x08004df1
 8004da8:	08004df1 	.word	0x08004df1
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004df1 	.word	0x08004df1
 8004db8:	08004df1 	.word	0x08004df1
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004df1 	.word	0x08004df1
 8004dc4:	08004df1 	.word	0x08004df1
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004de9 	.word	0x08004de9
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e0d8      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e0d4      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e0d0      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e0cc      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df6:	e0c8      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f78 <UART_SetConfig+0x2d4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d125      	bne.n	8004e4e <UART_SetConfig+0x1aa>
 8004e02:	4b5b      	ldr	r3, [pc, #364]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e0c:	2b30      	cmp	r3, #48	@ 0x30
 8004e0e:	d016      	beq.n	8004e3e <UART_SetConfig+0x19a>
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d818      	bhi.n	8004e46 <UART_SetConfig+0x1a2>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d00a      	beq.n	8004e2e <UART_SetConfig+0x18a>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d814      	bhi.n	8004e46 <UART_SetConfig+0x1a2>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <UART_SetConfig+0x182>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d008      	beq.n	8004e36 <UART_SetConfig+0x192>
 8004e24:	e00f      	b.n	8004e46 <UART_SetConfig+0x1a2>
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2c:	e0ad      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e34:	e0a9      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e36:	2304      	movs	r3, #4
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3c:	e0a5      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e3e:	2308      	movs	r3, #8
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e44:	e0a1      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e46:	2310      	movs	r3, #16
 8004e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4c:	e09d      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a4a      	ldr	r2, [pc, #296]	@ (8004f7c <UART_SetConfig+0x2d8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d125      	bne.n	8004ea4 <UART_SetConfig+0x200>
 8004e58:	4b45      	ldr	r3, [pc, #276]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e64:	d016      	beq.n	8004e94 <UART_SetConfig+0x1f0>
 8004e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e68:	d818      	bhi.n	8004e9c <UART_SetConfig+0x1f8>
 8004e6a:	2b80      	cmp	r3, #128	@ 0x80
 8004e6c:	d00a      	beq.n	8004e84 <UART_SetConfig+0x1e0>
 8004e6e:	2b80      	cmp	r3, #128	@ 0x80
 8004e70:	d814      	bhi.n	8004e9c <UART_SetConfig+0x1f8>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <UART_SetConfig+0x1d8>
 8004e76:	2b40      	cmp	r3, #64	@ 0x40
 8004e78:	d008      	beq.n	8004e8c <UART_SetConfig+0x1e8>
 8004e7a:	e00f      	b.n	8004e9c <UART_SetConfig+0x1f8>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e082      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e07e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e07a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e076      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e072      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a35      	ldr	r2, [pc, #212]	@ (8004f80 <UART_SetConfig+0x2dc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d12a      	bne.n	8004f04 <UART_SetConfig+0x260>
 8004eae:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ebc:	d01a      	beq.n	8004ef4 <UART_SetConfig+0x250>
 8004ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec2:	d81b      	bhi.n	8004efc <UART_SetConfig+0x258>
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec8:	d00c      	beq.n	8004ee4 <UART_SetConfig+0x240>
 8004eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ece:	d815      	bhi.n	8004efc <UART_SetConfig+0x258>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <UART_SetConfig+0x238>
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d008      	beq.n	8004eec <UART_SetConfig+0x248>
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x258>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e052      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eea:	e04e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef2:	e04a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e046      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f02:	e042      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a17      	ldr	r2, [pc, #92]	@ (8004f68 <UART_SetConfig+0x2c4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d13a      	bne.n	8004f84 <UART_SetConfig+0x2e0>
 8004f0e:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f1c:	d01a      	beq.n	8004f54 <UART_SetConfig+0x2b0>
 8004f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f22:	d81b      	bhi.n	8004f5c <UART_SetConfig+0x2b8>
 8004f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f28:	d00c      	beq.n	8004f44 <UART_SetConfig+0x2a0>
 8004f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f2e:	d815      	bhi.n	8004f5c <UART_SetConfig+0x2b8>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <UART_SetConfig+0x298>
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f38:	d008      	beq.n	8004f4c <UART_SetConfig+0x2a8>
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x2b8>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e022      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e01e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e01a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e016      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e012      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f64:	efff69f3 	.word	0xefff69f3
 8004f68:	40008000 	.word	0x40008000
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40004400 	.word	0x40004400
 8004f78:	40004800 	.word	0x40004800
 8004f7c:	40004c00 	.word	0x40004c00
 8004f80:	40005000 	.word	0x40005000
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a9f      	ldr	r2, [pc, #636]	@ (800520c <UART_SetConfig+0x568>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d17a      	bne.n	800508a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d824      	bhi.n	8004fe6 <UART_SetConfig+0x342>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <UART_SetConfig+0x300>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fd7 	.word	0x08004fd7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fe7 	.word	0x08004fe7
 8004fc0:	08004fe7 	.word	0x08004fe7
 8004fc4:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc8:	f7fe f992 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8004fcc:	61f8      	str	r0, [r7, #28]
        break;
 8004fce:	e010      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8005210 <UART_SetConfig+0x56c>)
 8004fd2:	61fb      	str	r3, [r7, #28]
        break;
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fe f8f3 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 8004fda:	61f8      	str	r0, [r7, #28]
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe2:	61fb      	str	r3, [r7, #28]
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80fb 	beq.w	80051f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	429a      	cmp	r2, r3
 8005008:	d305      	bcc.n	8005016 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	429a      	cmp	r2, r3
 8005014:	d903      	bls.n	800501e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800501c:	e0e8      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2200      	movs	r2, #0
 8005022:	461c      	mov	r4, r3
 8005024:	4615      	mov	r5, r2
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	022b      	lsls	r3, r5, #8
 8005030:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005034:	0222      	lsls	r2, r4, #8
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	6849      	ldr	r1, [r1, #4]
 800503a:	0849      	lsrs	r1, r1, #1
 800503c:	2000      	movs	r0, #0
 800503e:	4688      	mov	r8, r1
 8005040:	4681      	mov	r9, r0
 8005042:	eb12 0a08 	adds.w	sl, r2, r8
 8005046:	eb43 0b09 	adc.w	fp, r3, r9
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005058:	4650      	mov	r0, sl
 800505a:	4659      	mov	r1, fp
 800505c:	f7fb f920 	bl	80002a0 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4613      	mov	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506e:	d308      	bcc.n	8005082 <UART_SetConfig+0x3de>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005076:	d204      	bcs.n	8005082 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e0b6      	b.n	80051f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005088:	e0b2      	b.n	80051f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005092:	d15e      	bne.n	8005152 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005098:	2b08      	cmp	r3, #8
 800509a:	d828      	bhi.n	80050ee <UART_SetConfig+0x44a>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <UART_SetConfig+0x400>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050d9 	.word	0x080050d9
 80050b0:	080050ef 	.word	0x080050ef
 80050b4:	080050df 	.word	0x080050df
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	080050ef 	.word	0x080050ef
 80050c0:	080050ef 	.word	0x080050ef
 80050c4:	080050e7 	.word	0x080050e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fe f912 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e014      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d0:	f7fe f924 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 80050d4:	61f8      	str	r0, [r7, #28]
        break;
 80050d6:	e010      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005210 <UART_SetConfig+0x56c>)
 80050da:	61fb      	str	r3, [r7, #28]
        break;
 80050dc:	e00d      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050de:	f7fe f86f 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 80050e2:	61f8      	str	r0, [r7, #28]
        break;
 80050e4:	e009      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	61fb      	str	r3, [r7, #28]
        break;
 80050ec:	e005      	b.n	80050fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d077      	beq.n	80051f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005a      	lsls	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	441a      	add	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b0f      	cmp	r3, #15
 800511a:	d916      	bls.n	800514a <UART_SetConfig+0x4a6>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005122:	d212      	bcs.n	800514a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f023 030f 	bic.w	r3, r3, #15
 800512c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	b29b      	uxth	r3, r3
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	b29a      	uxth	r2, r3
 800513a:	8afb      	ldrh	r3, [r7, #22]
 800513c:	4313      	orrs	r3, r2
 800513e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	8afa      	ldrh	r2, [r7, #22]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e052      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005150:	e04e      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005156:	2b08      	cmp	r3, #8
 8005158:	d827      	bhi.n	80051aa <UART_SetConfig+0x506>
 800515a:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0x4bc>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005185 	.word	0x08005185
 8005164:	0800518d 	.word	0x0800518d
 8005168:	08005195 	.word	0x08005195
 800516c:	080051ab 	.word	0x080051ab
 8005170:	0800519b 	.word	0x0800519b
 8005174:	080051ab 	.word	0x080051ab
 8005178:	080051ab 	.word	0x080051ab
 800517c:	080051ab 	.word	0x080051ab
 8005180:	080051a3 	.word	0x080051a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7fe f8b4 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e014      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800518c:	f7fe f8c6 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 8005190:	61f8      	str	r0, [r7, #28]
        break;
 8005192:	e010      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005194:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <UART_SetConfig+0x56c>)
 8005196:	61fb      	str	r3, [r7, #28]
        break;
 8005198:	e00d      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519a:	f7fe f811 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800519e:	61f8      	str	r0, [r7, #28]
        break;
 80051a0:	e009      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a6:	61fb      	str	r3, [r7, #28]
        break;
 80051a8:	e005      	b.n	80051b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051b4:	bf00      	nop
    }

    if (pclk != 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d019      	beq.n	80051f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	085a      	lsrs	r2, r3, #1
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	d909      	bls.n	80051ea <UART_SetConfig+0x546>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051dc:	d205      	bcs.n	80051ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	e002      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	@ 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	40008000 	.word	0x40008000
 8005210:	00f42400 	.word	0x00f42400

08005214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01a      	beq.n	800532a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005312:	d10a      	bne.n	800532a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	605a      	str	r2, [r3, #4]
  }
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b098      	sub	sp, #96	@ 0x60
 800535c:	af02      	add	r7, sp, #8
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005368:	f7fc fe8c 	bl	8002084 <HAL_GetTick>
 800536c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d12e      	bne.n	80053da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800537c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005384:	2200      	movs	r2, #0
 8005386:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f88c 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e6      	bne.n	8005396 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e062      	b.n	80054a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d149      	bne.n	800547c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f856 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d03c      	beq.n	800547c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	623b      	str	r3, [r7, #32]
   return(result);
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005420:	633b      	str	r3, [r7, #48]	@ 0x30
 8005422:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3308      	adds	r3, #8
 800543a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60fb      	str	r3, [r7, #12]
   return(result);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005454:	61fa      	str	r2, [r7, #28]
 8005456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	69b9      	ldr	r1, [r7, #24]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	617b      	str	r3, [r7, #20]
   return(result);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e011      	b.n	80054a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3758      	adds	r7, #88	@ 0x58
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	e04f      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d04b      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fc fddf 	bl	8002084 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e04e      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d037      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b80      	cmp	r3, #128	@ 0x80
 80054ee:	d034      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d031      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d110      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2208      	movs	r2, #8
 800550a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f8ff 	bl	8005710 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2208      	movs	r2, #8
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e029      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005534:	d111      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800553e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f8e5 	bl	8005710 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e00f      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	429a      	cmp	r2, r3
 8005576:	d0a0      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005584:	b480      	push	{r7}
 8005586:	b097      	sub	sp, #92	@ 0x5c
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b6:	d10e      	bne.n	80055d6 <UART_Start_Receive_IT+0x52>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <UART_Start_Receive_IT+0x48>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80055c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055ca:	e02d      	b.n	8005628 <UART_Start_Receive_IT+0xa4>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	22ff      	movs	r2, #255	@ 0xff
 80055d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055d4:	e028      	b.n	8005628 <UART_Start_Receive_IT+0xa4>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <UART_Start_Receive_IT+0x76>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <UART_Start_Receive_IT+0x6c>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	22ff      	movs	r2, #255	@ 0xff
 80055ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055ee:	e01b      	b.n	8005628 <UART_Start_Receive_IT+0xa4>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	227f      	movs	r2, #127	@ 0x7f
 80055f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055f8:	e016      	b.n	8005628 <UART_Start_Receive_IT+0xa4>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005602:	d10d      	bne.n	8005620 <UART_Start_Receive_IT+0x9c>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <UART_Start_Receive_IT+0x92>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	227f      	movs	r2, #127	@ 0x7f
 8005610:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005614:	e008      	b.n	8005628 <UART_Start_Receive_IT+0xa4>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	223f      	movs	r2, #63	@ 0x3f
 800561a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800561e:	e003      	b.n	8005628 <UART_Start_Receive_IT+0xa4>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2222      	movs	r2, #34	@ 0x22
 8005634:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005658:	64ba      	str	r2, [r7, #72]	@ 0x48
 800565a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800565e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e5      	bne.n	8005638 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005674:	d107      	bne.n	8005686 <UART_Start_Receive_IT+0x102>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a21      	ldr	r2, [pc, #132]	@ (8005708 <UART_Start_Receive_IT+0x184>)
 8005682:	669a      	str	r2, [r3, #104]	@ 0x68
 8005684:	e002      	b.n	800568c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a20      	ldr	r2, [pc, #128]	@ (800570c <UART_Start_Receive_IT+0x188>)
 800568a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d019      	beq.n	80056c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80056a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e6      	bne.n	8005694 <UART_Start_Receive_IT+0x110>
 80056c6:	e018      	b.n	80056fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	613b      	str	r3, [r7, #16]
   return(result);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f043 0320 	orr.w	r3, r3, #32
 80056dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	69f9      	ldr	r1, [r7, #28]
 80056ec:	6a3a      	ldr	r2, [r7, #32]
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e6      	bne.n	80056c8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	375c      	adds	r7, #92	@ 0x5c
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	08005b8d 	.word	0x08005b8d
 800570c:	080059d1 	.word	0x080059d1

08005710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b095      	sub	sp, #84	@ 0x54
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800572c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005736:	643b      	str	r3, [r7, #64]	@ 0x40
 8005738:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800573c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e6      	bne.n	8005718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	61fb      	str	r3, [r7, #28]
   return(result);
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800576a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e5      	bne.n	800574a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005782:	2b01      	cmp	r3, #1
 8005784:	d118      	bne.n	80057b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	60bb      	str	r3, [r7, #8]
   return(result);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 0310 	bic.w	r3, r3, #16
 800579a:	647b      	str	r3, [r7, #68]	@ 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6979      	ldr	r1, [r7, #20]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	613b      	str	r3, [r7, #16]
   return(result);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057cc:	bf00      	nop
 80057ce:	3754      	adds	r7, #84	@ 0x54
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff fa3e 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b08f      	sub	sp, #60	@ 0x3c
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005810:	2b21      	cmp	r3, #33	@ 0x21
 8005812:	d14c      	bne.n	80058ae <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d132      	bne.n	8005886 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	61fb      	str	r3, [r7, #28]
   return(result);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005840:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e6      	bne.n	8005820 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005866:	633b      	str	r3, [r7, #48]	@ 0x30
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6979      	ldr	r1, [r7, #20]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	613b      	str	r3, [r7, #16]
   return(result);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e6      	bne.n	8005852 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005884:	e013      	b.n	80058ae <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80058ae:	bf00      	nop
 80058b0:	373c      	adds	r7, #60	@ 0x3c
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b091      	sub	sp, #68	@ 0x44
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c6:	2b21      	cmp	r3, #33	@ 0x21
 80058c8:	d151      	bne.n	800596e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d132      	bne.n	800593c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	623b      	str	r3, [r7, #32]
   return(result);
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80058f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e6      	bne.n	80058d6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	60fb      	str	r3, [r7, #12]
   return(result);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	69b9      	ldr	r1, [r7, #24]
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	617b      	str	r3, [r7, #20]
   return(result);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e6      	bne.n	8005908 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800593a:	e018      	b.n	800596e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005940:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005944:	881a      	ldrh	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800594e:	b292      	uxth	r2, r2
 8005950:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005956:	1c9a      	adds	r2, r3, #2
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800596e:	bf00      	nop
 8005970:	3744      	adds	r7, #68	@ 0x44
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b088      	sub	sp, #32
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6979      	ldr	r1, [r7, #20]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	613b      	str	r3, [r7, #16]
   return(result);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fc f9c7 	bl	8001d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	bf00      	nop
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b09c      	sub	sp, #112	@ 0x70
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e8:	2b22      	cmp	r3, #34	@ 0x22
 80059ea:	f040 80be 	bne.w	8005b6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80059fc:	b2d9      	uxtb	r1, r3
 80059fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	400a      	ands	r2, r1
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f040 80a3 	bne.w	8005b7e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e6      	bne.n	8005a38 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a34      	ldr	r2, [pc, #208]	@ (8005b88 <UART_RxISR_8BIT+0x1b8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d01f      	beq.n	8005afc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d018      	beq.n	8005afc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ade:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d12e      	bne.n	8005b62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0310 	bic.w	r3, r3, #16
 8005b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	69b9      	ldr	r1, [r7, #24]
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	617b      	str	r3, [r7, #20]
   return(result);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e6      	bne.n	8005b0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d103      	bne.n	8005b52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2210      	movs	r2, #16
 8005b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff f896 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b60:	e00d      	b.n	8005b7e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fc f928 	bl	8001db8 <HAL_UART_RxCpltCallback>
}
 8005b68:	e009      	b.n	8005b7e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	8b1b      	ldrh	r3, [r3, #24]
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	831a      	strh	r2, [r3, #24]
}
 8005b7e:	bf00      	nop
 8005b80:	3770      	adds	r7, #112	@ 0x70
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40008000 	.word	0x40008000

08005b8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b09c      	sub	sp, #112	@ 0x70
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba4:	2b22      	cmp	r3, #34	@ 0x22
 8005ba6:	f040 80be 	bne.w	8005d26 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005bb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005bbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 80a3 	bne.w	8005d3a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c08:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c12:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c14:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e6      	bne.n	8005bf4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c46:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a34      	ldr	r2, [pc, #208]	@ (8005d44 <UART_RxISR_16BIT+0x1b8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d01f      	beq.n	8005cb8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d018      	beq.n	8005cb8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e6      	bne.n	8005c86 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d12e      	bne.n	8005d1e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f023 0310 	bic.w	r3, r3, #16
 8005cda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6979      	ldr	r1, [r7, #20]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e6      	bne.n	8005cc6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d103      	bne.n	8005d0e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2210      	movs	r2, #16
 8005d0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fe ffb8 	bl	8004c8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d1c:	e00d      	b.n	8005d3a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc f84a 	bl	8001db8 <HAL_UART_RxCpltCallback>
}
 8005d24:	e009      	b.n	8005d3a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	8b1b      	ldrh	r3, [r3, #24]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0208 	orr.w	r2, r2, #8
 8005d36:	b292      	uxth	r2, r2
 8005d38:	831a      	strh	r2, [r3, #24]
}
 8005d3a:	bf00      	nop
 8005d3c:	3770      	adds	r7, #112	@ 0x70
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40008000 	.word	0x40008000

08005d48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	7992      	ldrb	r2, [r2, #6]
 8005d6e:	08d2      	lsrs	r2, r2, #3
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	fb13 f302 	smulbb	r3, r3, r2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	889b      	ldrh	r3, [r3, #4]
 8005d80:	461a      	mov	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	885b      	ldrh	r3, [r3, #2]
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	60da      	str	r2, [r3, #12]
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8005da2:	b490      	push	{r4, r7}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	4604      	mov	r4, r0
 8005daa:	4608      	mov	r0, r1
 8005dac:	1d39      	adds	r1, r7, #4
 8005dae:	e881 000c 	stmia.w	r1, {r2, r3}
 8005db2:	4623      	mov	r3, r4
 8005db4:	81fb      	strh	r3, [r7, #14]
 8005db6:	4603      	mov	r3, r0
 8005db8:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8005dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005dc2:	88ba      	ldrh	r2, [r7, #4]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	da04      	bge.n	8005dd2 <code+0x30>
        code |= LEFT;
 8005dc8:	2201      	movs	r2, #1
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	75fb      	strb	r3, [r7, #23]
 8005dd0:	e008      	b.n	8005de4 <code+0x42>
    } else if (x0 > window.x1) {
 8005dd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005dd6:	893a      	ldrh	r2, [r7, #8]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	dd03      	ble.n	8005de4 <code+0x42>
        code |= RIGHT;
 8005ddc:	2202      	movs	r2, #2
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005de4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	4293      	cmp	r3, r2
 8005dec:	da04      	bge.n	8005df8 <code+0x56>
        code |= BOTTOM;
 8005dee:	2204      	movs	r2, #4
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	75fb      	strb	r3, [r7, #23]
 8005df6:	e008      	b.n	8005e0a <code+0x68>
    } else if (y0 > window.y1) {
 8005df8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005dfc:	897a      	ldrh	r2, [r7, #10]
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	dd03      	ble.n	8005e0a <code+0x68>
        code |= TOP;
 8005e02:	2208      	movs	r2, #8
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc90      	pop	{r4, r7}
 8005e14:	4770      	bx	lr

08005e16 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b088      	sub	sp, #32
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005e30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e34:	cb0c      	ldmia	r3, {r2, r3}
 8005e36:	f7ff ffb4 	bl	8005da2 <code>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005e4e:	cb0c      	ldmia	r3, {r2, r3}
 8005e50:	f7ff ffa7 	bl	8005da2 <code>
 8005e54:	4603      	mov	r3, r0
 8005e56:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8005e5c:	7ffa      	ldrb	r2, [r7, #31]
 8005e5e:	7fbb      	ldrb	r3, [r7, #30]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	777b      	strb	r3, [r7, #29]
            break;
 8005e6c:	e0e9      	b.n	8006042 <clip_line+0x22c>
        } else if (code0 & code1) {
 8005e6e:	7ffa      	ldrb	r2, [r7, #31]
 8005e70:	7fbb      	ldrb	r3, [r7, #30]
 8005e72:	4013      	ands	r3, r2
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 80e2 	bne.w	8006040 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <clip_line+0x78>
 8005e8a:	7ffb      	ldrb	r3, [r7, #31]
 8005e8c:	e000      	b.n	8005e90 <clip_line+0x7a>
 8005e8e:	7fbb      	ldrb	r3, [r7, #30]
 8005e90:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005e92:	2208      	movs	r2, #8
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	4013      	ands	r3, r2
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d024      	beq.n	8005ee8 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eac:	4619      	mov	r1, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb4:	1acb      	subs	r3, r1, r3
 8005eb6:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8005eb8:	4608      	mov	r0, r1
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005ec0:	1a41      	subs	r1, r0, r1
 8005ec2:	fb03 f101 	mul.w	r1, r3, r1
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ed4:	1ac3      	subs	r3, r0, r3
 8005ed6:	fb91 f3f3 	sdiv	r3, r1, r3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	4413      	add	r3, r2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005ee2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ee4:	833b      	strh	r3, [r7, #24]
 8005ee6:	e07f      	b.n	8005fe8 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005ee8:	2204      	movs	r2, #4
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	4013      	ands	r3, r2
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d024      	beq.n	8005f3e <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f02:	4619      	mov	r1, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f0a:	1acb      	subs	r3, r1, r3
 8005f0c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005f0e:	4608      	mov	r0, r1
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005f16:	1a41      	subs	r1, r0, r1
 8005f18:	fb03 f101 	mul.w	r1, r3, r1
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f22:	4618      	mov	r0, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f2a:	1ac3      	subs	r3, r0, r3
 8005f2c:	fb91 f3f3 	sdiv	r3, r1, r3
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8005f38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f3a:	833b      	strh	r3, [r7, #24]
 8005f3c:	e054      	b.n	8005fe8 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8005f3e:	2202      	movs	r2, #2
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	4013      	ands	r3, r2
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d024      	beq.n	8005f94 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f60:	1acb      	subs	r3, r1, r3
 8005f62:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8005f64:	4608      	mov	r0, r1
 8005f66:	68f9      	ldr	r1, [r7, #12]
 8005f68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005f6c:	1a41      	subs	r1, r0, r1
 8005f6e:	fb03 f101 	mul.w	r1, r3, r1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f80:	1ac3      	subs	r3, r0, r3
 8005f82:	fb91 f3f3 	sdiv	r3, r1, r3
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8005f8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f90:	837b      	strh	r3, [r7, #26]
 8005f92:	e029      	b.n	8005fe8 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8005f94:	2201      	movs	r2, #1
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d023      	beq.n	8005fe8 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fb6:	1acb      	subs	r3, r1, r3
 8005fb8:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8005fba:	4608      	mov	r0, r1
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005fc2:	1a41      	subs	r1, r0, r1
 8005fc4:	fb03 f101 	mul.w	r1, r3, r1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd6:	1ac3      	subs	r3, r0, r3
 8005fd8:	fb91 f3f3 	sdiv	r3, r1, r3
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8005fe4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005fe6:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8005fe8:	7dfa      	ldrb	r2, [r7, #23]
 8005fea:	7ffb      	ldrb	r3, [r7, #31]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d113      	bne.n	8006018 <clip_line+0x202>
                *x0 = x;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8b7a      	ldrh	r2, [r7, #26]
 8005ff4:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	8b3a      	ldrh	r2, [r7, #24]
 8005ffa:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006008:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800600c:	cb0c      	ldmia	r3, {r2, r3}
 800600e:	f7ff fec8 	bl	8005da2 <code>
 8006012:	4603      	mov	r3, r0
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e721      	b.n	8005e5c <clip_line+0x46>
            } else {
                *x1 = x;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8b7a      	ldrh	r2, [r7, #26]
 800601c:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	8b3a      	ldrh	r2, [r7, #24]
 8006022:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f9b3 0000 	ldrsh.w	r0, [r3]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006030:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006034:	cb0c      	ldmia	r3, {r2, r3}
 8006036:	f7ff feb4 	bl	8005da2 <code>
 800603a:	4603      	mov	r3, r0
 800603c:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800603e:	e70d      	b.n	8005e5c <clip_line+0x46>
            break;
 8006040:	bf00      	nop
            }
        }
    }

    return accept;
 8006042:	7f7b      	ldrb	r3, [r7, #29]
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	3306      	adds	r3, #6
 800605c:	2208      	movs	r2, #8
 800605e:	4619      	mov	r1, r3
 8006060:	f001 fc65 	bl	800792e <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	330e      	adds	r3, #14
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	330f      	adds	r3, #15
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	3310      	adds	r3, #16
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	72da      	strb	r2, [r3, #11]

    return 0;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	@ 0x38
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006098:	f107 0314 	add.w	r3, r7, #20
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ffd4 	bl	800604c <fontx_meta>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 80060aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <fontx_glyph+0x2c>
        return status;
 80060b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	e077      	b.n	80061a8 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80060b8:	7f7a      	ldrb	r2, [r7, #29]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80060be:	7fba      	ldrb	r2, [r7, #30]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80060c4:	7f7b      	ldrb	r3, [r7, #29]
 80060c6:	3307      	adds	r3, #7
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da00      	bge.n	80060ce <fontx_glyph+0x42>
 80060cc:	3307      	adds	r3, #7
 80060ce:	10db      	asrs	r3, r3, #3
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	78da      	ldrb	r2, [r3, #3]
 80060da:	7fbb      	ldrb	r3, [r7, #30]
 80060dc:	fb12 f303 	smulbb	r3, r2, r3
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80060e6:	7ffb      	ldrb	r3, [r7, #31]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10f      	bne.n	800610c <fontx_glyph+0x80>
        if (code < 0x100) {
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2bff      	cmp	r3, #255	@ 0xff
 80060f0:	d859      	bhi.n	80061a6 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	789b      	ldrb	r3, [r3, #2]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
 80060fe:	3311      	adds	r3, #17
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	441a      	add	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e04d      	b.n	80061a8 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3312      	adds	r3, #18
 8006110:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3311      	adds	r3, #17
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 800611e:	e03d      	b.n	800619c <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006128:	3301      	adds	r3, #1
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	4413      	add	r3, r2
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006134:	3302      	adds	r3, #2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613c:	3303      	adds	r3, #3
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	4413      	add	r3, r2
 8006144:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	429a      	cmp	r2, r3
 800614c:	d31c      	bcc.n	8006188 <fontx_glyph+0xfc>
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	429a      	cmp	r2, r3
 8006154:	d818      	bhi.n	8006188 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800615e:	4413      	add	r3, r2
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3311      	adds	r3, #17
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	461a      	mov	r2, r3
                    nc * glyph->size
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	789b      	ldrb	r3, [r3, #2]
 8006170:	4619      	mov	r1, r3
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006174:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006178:	4413      	add	r3, r2
 800617a:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	441a      	add	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e00f      	b.n	80061a8 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006188:	6a3a      	ldr	r2, [r7, #32]
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	1ad2      	subs	r2, r2, r3
 800618e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006190:	4413      	add	r3, r2
 8006192:	3301      	adds	r3, #1
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	3304      	adds	r3, #4
 800619a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	1e5a      	subs	r2, r3, #1
 80061a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1bc      	bne.n	8006120 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80061a6:	2301      	movs	r3, #1
 80061a8:	4618      	mov	r0, r3
 80061aa:	3738      	adds	r7, #56	@ 0x38
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	dd01      	ble.n	80061c6 <min+0x16>
        return b;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	e000      	b.n	80061c8 <min+0x18>
    };
    return a;
 80061c6:	687b      	ldr	r3, [r7, #4]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <max>:

static inline int max(int a, int b) {
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	dd01      	ble.n	80061ea <max+0x16>
        return a;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	e000      	b.n	80061ec <max+0x18>
    }
    return b;
 80061ea:	683b      	ldr	r3, [r7, #0]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	80fb      	strh	r3, [r7, #6]
 8006202:	460b      	mov	r3, r1
 8006204:	80bb      	strh	r3, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800620a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800620e:	4a12      	ldr	r2, [pc, #72]	@ (8006258 <hagl_put_pixel+0x60>)
 8006210:	8812      	ldrh	r2, [r2, #0]
 8006212:	4293      	cmp	r3, r2
 8006214:	db1a      	blt.n	800624c <hagl_put_pixel+0x54>
 8006216:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800621a:	4a0f      	ldr	r2, [pc, #60]	@ (8006258 <hagl_put_pixel+0x60>)
 800621c:	8852      	ldrh	r2, [r2, #2]
 800621e:	4293      	cmp	r3, r2
 8006220:	db14      	blt.n	800624c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006226:	4a0c      	ldr	r2, [pc, #48]	@ (8006258 <hagl_put_pixel+0x60>)
 8006228:	8892      	ldrh	r2, [r2, #4]
 800622a:	4293      	cmp	r3, r2
 800622c:	dc10      	bgt.n	8006250 <hagl_put_pixel+0x58>
 800622e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006232:	4a09      	ldr	r2, [pc, #36]	@ (8006258 <hagl_put_pixel+0x60>)
 8006234:	88d2      	ldrh	r2, [r2, #6]
 8006236:	4293      	cmp	r3, r2
 8006238:	dc0a      	bgt.n	8006250 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800623a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800623e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006242:	887a      	ldrh	r2, [r7, #2]
 8006244:	4618      	mov	r0, r3
 8006246:	f7fb faa5 	bl	8001794 <lcd_put_pixel>
 800624a:	e002      	b.n	8006252 <hagl_put_pixel+0x5a>
        return;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <hagl_put_pixel+0x5a>
        return;
 8006250:	bf00      	nop
}
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	2000020c 	.word	0x2000020c

0800625c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	b085      	sub	sp, #20
 8006260:	af02      	add	r7, sp, #8
 8006262:	4604      	mov	r4, r0
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	4623      	mov	r3, r4
 800626c:	80fb      	strh	r3, [r7, #6]
 800626e:	4603      	mov	r3, r0
 8006270:	80bb      	strh	r3, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	807b      	strh	r3, [r7, #2]
 8006276:	4613      	mov	r3, r2
 8006278:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	887b      	ldrh	r3, [r7, #2]
 800627e:	4413      	add	r3, r2
 8006280:	b29b      	uxth	r3, r3
 8006282:	b21a      	sxth	r2, r3
 8006284:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006288:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800628c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006290:	883b      	ldrh	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	4623      	mov	r3, r4
 8006296:	f000 f827 	bl	80062e8 <hagl_draw_line>
#endif
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd90      	pop	{r4, r7, pc}

080062a2 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 80062a2:	b590      	push	{r4, r7, lr}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af02      	add	r7, sp, #8
 80062a8:	4604      	mov	r4, r0
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	461a      	mov	r2, r3
 80062b0:	4623      	mov	r3, r4
 80062b2:	80fb      	strh	r3, [r7, #6]
 80062b4:	4603      	mov	r3, r0
 80062b6:	80bb      	strh	r3, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
 80062bc:	4613      	mov	r3, r2
 80062be:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80062c0:	88ba      	ldrh	r2, [r7, #4]
 80062c2:	887b      	ldrh	r3, [r7, #2]
 80062c4:	4413      	add	r3, r2
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	b21c      	sxth	r4, r3
 80062ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80062d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80062d6:	883b      	ldrh	r3, [r7, #0]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4623      	mov	r3, r4
 80062dc:	f000 f804 	bl	80062e8 <hagl_draw_line>
#endif
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}

080062e8 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80062e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ea:	b089      	sub	sp, #36	@ 0x24
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4623      	mov	r3, r4
 80062f8:	80fb      	strh	r3, [r7, #6]
 80062fa:	4603      	mov	r3, r0
 80062fc:	80bb      	strh	r3, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	807b      	strh	r3, [r7, #2]
 8006302:	4613      	mov	r3, r2
 8006304:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006306:	463b      	mov	r3, r7
 8006308:	1cba      	adds	r2, r7, #2
 800630a:	1d3d      	adds	r5, r7, #4
 800630c:	1dbc      	adds	r4, r7, #6
 800630e:	494a      	ldr	r1, [pc, #296]	@ (8006438 <hagl_draw_line+0x150>)
 8006310:	466e      	mov	r6, sp
 8006312:	c903      	ldmia	r1, {r0, r1}
 8006314:	e886 0003 	stmia.w	r6, {r0, r1}
 8006318:	4629      	mov	r1, r5
 800631a:	4620      	mov	r0, r4
 800631c:	f7ff fd7b 	bl	8005e16 <clip_line>
 8006320:	4603      	mov	r3, r0
 8006322:	f083 0301 	eor.w	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d17e      	bne.n	800642a <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 800632c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006330:	461a      	mov	r2, r3
 8006332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	bfb8      	it	lt
 800633c:	425b      	neglt	r3, r3
 800633e:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006340:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006344:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006348:	429a      	cmp	r2, r3
 800634a:	da01      	bge.n	8006350 <hagl_draw_line+0x68>
 800634c:	2301      	movs	r3, #1
 800634e:	e001      	b.n	8006354 <hagl_draw_line+0x6c>
 8006350:	f04f 33ff 	mov.w	r3, #4294967295
 8006354:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006356:	f9b7 3000 	ldrsh.w	r3, [r7]
 800635a:	461a      	mov	r2, r3
 800635c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	bfb8      	it	lt
 8006366:	425b      	neglt	r3, r3
 8006368:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800636a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800636e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006372:	429a      	cmp	r2, r3
 8006374:	da01      	bge.n	800637a <hagl_draw_line+0x92>
 8006376:	2301      	movs	r3, #1
 8006378:	e001      	b.n	800637e <hagl_draw_line+0x96>
 800637a:	f04f 33ff 	mov.w	r3, #4294967295
 800637e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006380:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006384:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006388:	429a      	cmp	r2, r3
 800638a:	dd06      	ble.n	800639a <hagl_draw_line+0xb2>
 800638c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006390:	0fda      	lsrs	r2, r3, #31
 8006392:	4413      	add	r3, r2
 8006394:	105b      	asrs	r3, r3, #1
 8006396:	b21b      	sxth	r3, r3
 8006398:	e006      	b.n	80063a8 <hagl_draw_line+0xc0>
 800639a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800639e:	0fda      	lsrs	r2, r3, #31
 80063a0:	4413      	add	r3, r2
 80063a2:	105b      	asrs	r3, r3, #1
 80063a4:	425b      	negs	r3, r3
 80063a6:	b21b      	sxth	r3, r3
 80063a8:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80063aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80063b2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ff1f 	bl	80061f8 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80063ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d105      	bne.n	80063d2 <hagl_draw_line+0xea>
 80063c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80063ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d02d      	beq.n	800642e <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80063d2:	8afb      	ldrh	r3, [r7, #22]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80063da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80063de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80063e2:	425b      	negs	r3, r3
 80063e4:	429a      	cmp	r2, r3
 80063e6:	dd0c      	ble.n	8006402 <hagl_draw_line+0x11a>
            err -= dy;
 80063e8:	8afa      	ldrh	r2, [r7, #22]
 80063ea:	8a3b      	ldrh	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80063f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	8a7b      	ldrh	r3, [r7, #18]
 80063fa:	4413      	add	r3, r2
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	b21b      	sxth	r3, r3
 8006400:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006402:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006406:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800640a:	429a      	cmp	r2, r3
 800640c:	dacd      	bge.n	80063aa <hagl_draw_line+0xc2>
            err += dx;
 800640e:	8afa      	ldrh	r2, [r7, #22]
 8006410:	8abb      	ldrh	r3, [r7, #20]
 8006412:	4413      	add	r3, r2
 8006414:	b29b      	uxth	r3, r3
 8006416:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8006418:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800641c:	b29a      	uxth	r2, r3
 800641e:	89fb      	ldrh	r3, [r7, #14]
 8006420:	4413      	add	r3, r2
 8006422:	b29b      	uxth	r3, r3
 8006424:	b21b      	sxth	r3, r3
 8006426:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8006428:	e7bf      	b.n	80063aa <hagl_draw_line+0xc2>
        return;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <hagl_draw_line+0x148>
            break;
 800642e:	bf00      	nop
        }
    }
}
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006436:	bf00      	nop
 8006438:	2000020c 	.word	0x2000020c

0800643c <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800643c:	b590      	push	{r4, r7, lr}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	461a      	mov	r2, r3
 800644a:	4623      	mov	r3, r4
 800644c:	80fb      	strh	r3, [r7, #6]
 800644e:	4603      	mov	r3, r0
 8006450:	80bb      	strh	r3, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	807b      	strh	r3, [r7, #2]
 8006456:	4613      	mov	r3, r2
 8006458:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800645a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800645e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006462:	429a      	cmp	r2, r3
 8006464:	dd0e      	ble.n	8006484 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	887b      	ldrh	r3, [r7, #2]
 800646a:	4413      	add	r3, r2
 800646c:	b29b      	uxth	r3, r3
 800646e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006470:	88fa      	ldrh	r2, [r7, #6]
 8006472:	887b      	ldrh	r3, [r7, #2]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	b29b      	uxth	r3, r3
 8006478:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	887b      	ldrh	r3, [r7, #2]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	b29b      	uxth	r3, r3
 8006482:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006484:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006488:	f9b7 3000 	ldrsh.w	r3, [r7]
 800648c:	429a      	cmp	r2, r3
 800648e:	dd0e      	ble.n	80064ae <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8006490:	88ba      	ldrh	r2, [r7, #4]
 8006492:	883b      	ldrh	r3, [r7, #0]
 8006494:	4413      	add	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800649a:	88ba      	ldrh	r2, [r7, #4]
 800649c:	883b      	ldrh	r3, [r7, #0]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80064a4:	88ba      	ldrh	r2, [r7, #4]
 80064a6:	883b      	ldrh	r3, [r7, #0]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80064ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064b2:	4a24      	ldr	r2, [pc, #144]	@ (8006544 <hagl_draw_rectangle+0x108>)
 80064b4:	8812      	ldrh	r2, [r2, #0]
 80064b6:	4293      	cmp	r3, r2
 80064b8:	db3e      	blt.n	8006538 <hagl_draw_rectangle+0xfc>
 80064ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80064be:	4a21      	ldr	r2, [pc, #132]	@ (8006544 <hagl_draw_rectangle+0x108>)
 80064c0:	8852      	ldrh	r2, [r2, #2]
 80064c2:	4293      	cmp	r3, r2
 80064c4:	db38      	blt.n	8006538 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80064c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006544 <hagl_draw_rectangle+0x108>)
 80064cc:	8892      	ldrh	r2, [r2, #4]
 80064ce:	4293      	cmp	r3, r2
 80064d0:	dc34      	bgt.n	800653c <hagl_draw_rectangle+0x100>
 80064d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006544 <hagl_draw_rectangle+0x108>)
 80064d8:	88d2      	ldrh	r2, [r2, #6]
 80064da:	4293      	cmp	r3, r2
 80064dc:	dc2e      	bgt.n	800653c <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80064de:	887a      	ldrh	r2, [r7, #2]
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3301      	adds	r3, #1
 80064e8:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80064ea:	883a      	ldrh	r2, [r7, #0]
 80064ec:	88bb      	ldrh	r3, [r7, #4]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3301      	adds	r3, #1
 80064f4:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80064f6:	8c3b      	ldrh	r3, [r7, #32]
 80064f8:	89fa      	ldrh	r2, [r7, #14]
 80064fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80064fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006502:	f7ff feab 	bl	800625c <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8006506:	8c3b      	ldrh	r3, [r7, #32]
 8006508:	89fa      	ldrh	r2, [r7, #14]
 800650a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800650e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006512:	f7ff fea3 	bl	800625c <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8006516:	8c3b      	ldrh	r3, [r7, #32]
 8006518:	89ba      	ldrh	r2, [r7, #12]
 800651a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800651e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006522:	f7ff febe 	bl	80062a2 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8006526:	8c3b      	ldrh	r3, [r7, #32]
 8006528:	89ba      	ldrh	r2, [r7, #12]
 800652a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800652e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006532:	f7ff feb6 	bl	80062a2 <hagl_draw_vline>
 8006536:	e002      	b.n	800653e <hagl_draw_rectangle+0x102>
        return;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <hagl_draw_rectangle+0x102>
        return;
 800653c:	bf00      	nop
}
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	bd90      	pop	{r4, r7, pc}
 8006544:	2000020c 	.word	0x2000020c

08006548 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006548:	b590      	push	{r4, r7, lr}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	461a      	mov	r2, r3
 8006556:	4623      	mov	r3, r4
 8006558:	80fb      	strh	r3, [r7, #6]
 800655a:	4603      	mov	r3, r0
 800655c:	80bb      	strh	r3, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	807b      	strh	r3, [r7, #2]
 8006562:	4613      	mov	r3, r2
 8006564:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8006566:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800656a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800656e:	429a      	cmp	r2, r3
 8006570:	dd0e      	ble.n	8006590 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	887b      	ldrh	r3, [r7, #2]
 8006576:	4413      	add	r3, r2
 8006578:	b29b      	uxth	r3, r3
 800657a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	887b      	ldrh	r3, [r7, #2]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	b29b      	uxth	r3, r3
 8006584:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8006586:	88fa      	ldrh	r2, [r7, #6]
 8006588:	887b      	ldrh	r3, [r7, #2]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	b29b      	uxth	r3, r3
 800658e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006590:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006594:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006598:	429a      	cmp	r2, r3
 800659a:	dd0e      	ble.n	80065ba <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 800659c:	88ba      	ldrh	r2, [r7, #4]
 800659e:	883b      	ldrh	r3, [r7, #0]
 80065a0:	4413      	add	r3, r2
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80065a6:	88ba      	ldrh	r2, [r7, #4]
 80065a8:	883b      	ldrh	r3, [r7, #0]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80065b0:	88ba      	ldrh	r2, [r7, #4]
 80065b2:	883b      	ldrh	r3, [r7, #0]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80065ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065be:	4a33      	ldr	r2, [pc, #204]	@ (800668c <hagl_fill_rectangle+0x144>)
 80065c0:	8812      	ldrh	r2, [r2, #0]
 80065c2:	4293      	cmp	r3, r2
 80065c4:	db5b      	blt.n	800667e <hagl_fill_rectangle+0x136>
 80065c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80065ca:	4a30      	ldr	r2, [pc, #192]	@ (800668c <hagl_fill_rectangle+0x144>)
 80065cc:	8852      	ldrh	r2, [r2, #2]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	db55      	blt.n	800667e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80065d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065d6:	4a2d      	ldr	r2, [pc, #180]	@ (800668c <hagl_fill_rectangle+0x144>)
 80065d8:	8892      	ldrh	r2, [r2, #4]
 80065da:	4293      	cmp	r3, r2
 80065dc:	dc51      	bgt.n	8006682 <hagl_fill_rectangle+0x13a>
 80065de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065e2:	4a2a      	ldr	r2, [pc, #168]	@ (800668c <hagl_fill_rectangle+0x144>)
 80065e4:	88d2      	ldrh	r2, [r2, #6]
 80065e6:	4293      	cmp	r3, r2
 80065e8:	dc4b      	bgt.n	8006682 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80065ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065ee:	4a27      	ldr	r2, [pc, #156]	@ (800668c <hagl_fill_rectangle+0x144>)
 80065f0:	8812      	ldrh	r2, [r2, #0]
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fded 	bl	80061d4 <max>
 80065fa:	4603      	mov	r3, r0
 80065fc:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80065fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006602:	4a22      	ldr	r2, [pc, #136]	@ (800668c <hagl_fill_rectangle+0x144>)
 8006604:	8852      	ldrh	r2, [r2, #2]
 8006606:	4611      	mov	r1, r2
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fde3 	bl	80061d4 <max>
 800660e:	4603      	mov	r3, r0
 8006610:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8006612:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006616:	4a1d      	ldr	r2, [pc, #116]	@ (800668c <hagl_fill_rectangle+0x144>)
 8006618:	8892      	ldrh	r2, [r2, #4]
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fdc7 	bl	80061b0 <min>
 8006622:	4603      	mov	r3, r0
 8006624:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8006626:	f9b7 3000 	ldrsh.w	r3, [r7]
 800662a:	4a18      	ldr	r2, [pc, #96]	@ (800668c <hagl_fill_rectangle+0x144>)
 800662c:	88d2      	ldrh	r2, [r2, #6]
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fdbd 	bl	80061b0 <min>
 8006636:	4603      	mov	r3, r0
 8006638:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	b29b      	uxth	r3, r3
 8006642:	3301      	adds	r3, #1
 8006644:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8006646:	883a      	ldrh	r2, [r7, #0]
 8006648:	88bb      	ldrh	r3, [r7, #4]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	b29b      	uxth	r3, r3
 800664e:	3301      	adds	r3, #1
 8006650:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8006652:	2300      	movs	r3, #0
 8006654:	81fb      	strh	r3, [r7, #14]
 8006656:	e00d      	b.n	8006674 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8006658:	88ba      	ldrh	r2, [r7, #4]
 800665a:	89fb      	ldrh	r3, [r7, #14]
 800665c:	4413      	add	r3, r2
 800665e:	b29b      	uxth	r3, r3
 8006660:	b219      	sxth	r1, r3
 8006662:	8c3b      	ldrh	r3, [r7, #32]
 8006664:	89ba      	ldrh	r2, [r7, #12]
 8006666:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800666a:	f7ff fdf7 	bl	800625c <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800666e:	89fb      	ldrh	r3, [r7, #14]
 8006670:	3301      	adds	r3, #1
 8006672:	81fb      	strh	r3, [r7, #14]
 8006674:	89fa      	ldrh	r2, [r7, #14]
 8006676:	897b      	ldrh	r3, [r7, #10]
 8006678:	429a      	cmp	r2, r3
 800667a:	d3ed      	bcc.n	8006658 <hagl_fill_rectangle+0x110>
 800667c:	e002      	b.n	8006684 <hagl_fill_rectangle+0x13c>
        return;
 800667e:	bf00      	nop
 8006680:	e000      	b.n	8006684 <hagl_fill_rectangle+0x13c>
        return;
 8006682:	bf00      	nop
#endif
    }
}
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bd90      	pop	{r4, r7, pc}
 800668a:	bf00      	nop
 800668c:	2000020c 	.word	0x2000020c

08006690 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800669e:	f844 0c24 	str.w	r0, [r4, #-36]
 80066a2:	460c      	mov	r4, r1
 80066a4:	4610      	mov	r0, r2
 80066a6:	4619      	mov	r1, r3
 80066a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80066ac:	4622      	mov	r2, r4
 80066ae:	f823 2c26 	strh.w	r2, [r3, #-38]
 80066b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80066b6:	4602      	mov	r2, r0
 80066b8:	f823 2c28 	strh.w	r2, [r3, #-40]
 80066bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80066c0:	460a      	mov	r2, r1
 80066c2:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80066c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80066ca:	4619      	mov	r1, r3
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fcd6 	bl	800608c <fontx_glyph>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80066e6:	f102 0209 	add.w	r2, r2, #9
 80066ea:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80066ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80066f0:	f103 0309 	add.w	r3, r3, #9
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <hagl_put_char+0x6e>
        return 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e0c0      	b.n	8006880 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80066fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006702:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006706:	461a      	mov	r2, r3
 8006708:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800670c:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8006710:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006714:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006718:	461a      	mov	r2, r3
 800671a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800671e:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8006722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006726:	2210      	movs	r2, #16
 8006728:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800672c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006730:	3a08      	subs	r2, #8
 8006732:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006736:	3b18      	subs	r3, #24
 8006738:	4611      	mov	r1, r2
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff fb0e 	bl	8005d5c <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8006740:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006744:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8006748:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800674c:	f102 020c 	add.w	r2, r2, #12
 8006750:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8006752:	2300      	movs	r3, #0
 8006754:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006758:	f102 020b 	add.w	r2, r2, #11
 800675c:	7013      	strb	r3, [r2, #0]
 800675e:	e071      	b.n	8006844 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006760:	2300      	movs	r3, #0
 8006762:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006766:	f102 020a 	add.w	r2, r2, #10
 800676a:	7013      	strb	r3, [r2, #0]
 800676c:	e047      	b.n	80067fe <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800676e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006772:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	b25a      	sxtb	r2, r3
 800677a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800677e:	f103 030a 	add.w	r3, r3, #10
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	2180      	movs	r1, #128	@ 0x80
 800678a:	fa41 f303 	asr.w	r3, r1, r3
 800678e:	b25b      	sxtb	r3, r3
 8006790:	4013      	ands	r3, r2
 8006792:	b25b      	sxtb	r3, r3
 8006794:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006798:	f102 0208 	add.w	r2, r2, #8
 800679c:	7013      	strb	r3, [r2, #0]
            if (set) {
 800679e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80067a2:	f103 0308 	add.w	r3, r3, #8
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <hagl_put_char+0x13e>
                *(ptr++) = color;
 80067ac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80067b0:	f103 030c 	add.w	r3, r3, #12
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	1c9a      	adds	r2, r3, #2
 80067b8:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80067bc:	f101 010c 	add.w	r1, r1, #12
 80067c0:	600a      	str	r2, [r1, #0]
 80067c2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80067c6:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	e00c      	b.n	80067e8 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80067ce:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80067d2:	f103 030c 	add.w	r3, r3, #12
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	1c9a      	adds	r2, r3, #2
 80067da:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80067de:	f101 010c 	add.w	r1, r1, #12
 80067e2:	600a      	str	r2, [r1, #0]
 80067e4:	2200      	movs	r2, #0
 80067e6:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80067e8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80067ec:	f103 030a 	add.w	r3, r3, #10
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80067f8:	f102 020a 	add.w	r2, r2, #10
 80067fc:	7013      	strb	r3, [r2, #0]
 80067fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006802:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006806:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800680a:	f102 020a 	add.w	r2, r2, #10
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d3ac      	bcc.n	800676e <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8006814:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006818:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800681c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006820:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8006824:	4413      	add	r3, r2
 8006826:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800682a:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800682e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006832:	f103 030b 	add.w	r3, r3, #11
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800683e:	f102 020b 	add.w	r2, r2, #11
 8006842:	7013      	strb	r3, [r2, #0]
 8006844:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006848:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800684c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8006850:	f102 020b 	add.w	r2, r2, #11
 8006854:	7812      	ldrb	r2, [r2, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d382      	bcc.n	8006760 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800685a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800685e:	3b18      	subs	r3, #24
 8006860:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006864:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8006868:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800686c:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006870:	461a      	mov	r2, r3
 8006872:	f000 f85a 	bl	800692a <hagl_blit>

    return bitmap.width;
 8006876:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800687a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800687e:	b2db      	uxtb	r3, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	bd90      	pop	{r4, r7, pc}

0800688c <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08c      	sub	sp, #48	@ 0x30
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	461a      	mov	r2, r3
 800689a:	4603      	mov	r3, r0
 800689c:	817b      	strh	r3, [r7, #10]
 800689e:	460b      	mov	r3, r1
 80068a0:	813b      	strh	r3, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80068a6:	897b      	ldrh	r3, [r7, #10]
 80068a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80068aa:	f107 0314 	add.w	r3, r7, #20
 80068ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fbcb 	bl	800604c <fontx_meta>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80068bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <hagl_put_text+0x3c>
        return 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	e02c      	b.n	8006922 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	60fa      	str	r2, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2b0d      	cmp	r3, #13
 80068d6:	d002      	beq.n	80068de <hagl_put_text+0x52>
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	2b0a      	cmp	r3, #10
 80068dc:	d108      	bne.n	80068f0 <hagl_put_text+0x64>
            x0 = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80068e2:	7fbb      	ldrb	r3, [r7, #30]
 80068e4:	461a      	mov	r2, r3
 80068e6:	893b      	ldrh	r3, [r7, #8]
 80068e8:	4413      	add	r3, r2
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	813b      	strh	r3, [r7, #8]
 80068ee:	e010      	b.n	8006912 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80068f0:	88f8      	ldrh	r0, [r7, #6]
 80068f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80068f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	4603      	mov	r3, r0
 8006900:	6a38      	ldr	r0, [r7, #32]
 8006902:	f7ff fec5 	bl	8006690 <hagl_put_char>
 8006906:	4603      	mov	r3, r0
 8006908:	461a      	mov	r2, r3
 800690a:	897b      	ldrh	r3, [r7, #10]
 800690c:	4413      	add	r3, r2
 800690e:	b29b      	uxth	r3, r3
 8006910:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1d6      	bne.n	80068c8 <hagl_put_text+0x3c>

    return x0 - original;
 800691a:	897a      	ldrh	r2, [r7, #10]
 800691c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	b29b      	uxth	r3, r3
}
 8006922:	4618      	mov	r0, r3
 8006924:	3728      	adds	r7, #40	@ 0x28
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	4603      	mov	r3, r0
 8006932:	603a      	str	r2, [r7, #0]
 8006934:	80fb      	strh	r3, [r7, #6]
 8006936:	460b      	mov	r3, r1
 8006938:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8006940:	2300      	movs	r3, #0
 8006942:	827b      	strh	r3, [r7, #18]
 8006944:	e020      	b.n	8006988 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8006946:	2300      	movs	r3, #0
 8006948:	823b      	strh	r3, [r7, #16]
 800694a:	e015      	b.n	8006978 <hagl_blit+0x4e>
            color = *(ptr++);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	1c9a      	adds	r2, r3, #2
 8006950:	617a      	str	r2, [r7, #20]
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	8a3b      	ldrh	r3, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	b29b      	uxth	r3, r3
 800695e:	b218      	sxth	r0, r3
 8006960:	88ba      	ldrh	r2, [r7, #4]
 8006962:	8a7b      	ldrh	r3, [r7, #18]
 8006964:	4413      	add	r3, r2
 8006966:	b29b      	uxth	r3, r3
 8006968:	b21b      	sxth	r3, r3
 800696a:	89fa      	ldrh	r2, [r7, #14]
 800696c:	4619      	mov	r1, r3
 800696e:	f7ff fc43 	bl	80061f8 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006972:	8a3b      	ldrh	r3, [r7, #16]
 8006974:	3301      	adds	r3, #1
 8006976:	823b      	strh	r3, [r7, #16]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	8a3a      	ldrh	r2, [r7, #16]
 800697e:	429a      	cmp	r2, r3
 8006980:	d3e4      	bcc.n	800694c <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006982:	8a7b      	ldrh	r3, [r7, #18]
 8006984:	3301      	adds	r3, #1
 8006986:	827b      	strh	r3, [r7, #18]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	885b      	ldrh	r3, [r3, #2]
 800698c:	8a7a      	ldrh	r2, [r7, #18]
 800698e:	429a      	cmp	r2, r3
 8006990:	d3d9      	bcc.n	8006946 <hagl_blit+0x1c>
        }
    }
#endif
};
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <hagl_draw_circle>:
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
        0x00
    );
}

void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	4623      	mov	r3, r4
 80069ac:	80fb      	strh	r3, [r7, #6]
 80069ae:	4603      	mov	r3, r0
 80069b0:	80bb      	strh	r3, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	807b      	strh	r3, [r7, #2]
 80069b6:	4613      	mov	r3, r2
 80069b8:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80069be:	887b      	ldrh	r3, [r7, #2]
 80069c0:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80069c2:	887b      	ldrh	r3, [r7, #2]
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f1c3 0303 	rsb	r3, r3, #3
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 80069d0:	88fa      	ldrh	r2, [r7, #6]
 80069d2:	89fb      	ldrh	r3, [r7, #14]
 80069d4:	4413      	add	r3, r2
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	b218      	sxth	r0, r3
 80069da:	88ba      	ldrh	r2, [r7, #4]
 80069dc:	89bb      	ldrh	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	b21b      	sxth	r3, r3
 80069e4:	883a      	ldrh	r2, [r7, #0]
 80069e6:	4619      	mov	r1, r3
 80069e8:	f7ff fc06 	bl	80061f8 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 80069ec:	88fa      	ldrh	r2, [r7, #6]
 80069ee:	89fb      	ldrh	r3, [r7, #14]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	b218      	sxth	r0, r3
 80069f6:	88ba      	ldrh	r2, [r7, #4]
 80069f8:	89bb      	ldrh	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	b21b      	sxth	r3, r3
 8006a00:	883a      	ldrh	r2, [r7, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	f7ff fbf8 	bl	80061f8 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	89fb      	ldrh	r3, [r7, #14]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	b218      	sxth	r0, r3
 8006a12:	88ba      	ldrh	r2, [r7, #4]
 8006a14:	89bb      	ldrh	r3, [r7, #12]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	b21b      	sxth	r3, r3
 8006a1c:	883a      	ldrh	r2, [r7, #0]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	f7ff fbea 	bl	80061f8 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8006a24:	88fa      	ldrh	r2, [r7, #6]
 8006a26:	89fb      	ldrh	r3, [r7, #14]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	b218      	sxth	r0, r3
 8006a2e:	88ba      	ldrh	r2, [r7, #4]
 8006a30:	89bb      	ldrh	r3, [r7, #12]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	b21b      	sxth	r3, r3
 8006a38:	883a      	ldrh	r2, [r7, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	f7ff fbdc 	bl	80061f8 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	89bb      	ldrh	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	b218      	sxth	r0, r3
 8006a4a:	88ba      	ldrh	r2, [r7, #4]
 8006a4c:	89fb      	ldrh	r3, [r7, #14]
 8006a4e:	4413      	add	r3, r2
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	883a      	ldrh	r2, [r7, #0]
 8006a56:	4619      	mov	r1, r3
 8006a58:	f7ff fbce 	bl	80061f8 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8006a5c:	88fa      	ldrh	r2, [r7, #6]
 8006a5e:	89bb      	ldrh	r3, [r7, #12]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	b218      	sxth	r0, r3
 8006a66:	88ba      	ldrh	r2, [r7, #4]
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	b21b      	sxth	r3, r3
 8006a70:	883a      	ldrh	r2, [r7, #0]
 8006a72:	4619      	mov	r1, r3
 8006a74:	f7ff fbc0 	bl	80061f8 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8006a78:	88fa      	ldrh	r2, [r7, #6]
 8006a7a:	89bb      	ldrh	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	b218      	sxth	r0, r3
 8006a82:	88ba      	ldrh	r2, [r7, #4]
 8006a84:	89fb      	ldrh	r3, [r7, #14]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	b21b      	sxth	r3, r3
 8006a8c:	883a      	ldrh	r2, [r7, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f7ff fbb2 	bl	80061f8 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	89bb      	ldrh	r3, [r7, #12]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	b218      	sxth	r0, r3
 8006a9e:	88ba      	ldrh	r2, [r7, #4]
 8006aa0:	89fb      	ldrh	r3, [r7, #14]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	b21b      	sxth	r3, r3
 8006aa8:	883a      	ldrh	r2, [r7, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f7ff fba4 	bl	80061f8 <hagl_put_pixel>

    while (y >= x) {
 8006ab0:	e097      	b.n	8006be2 <hagl_draw_circle+0x246>
        x++;
 8006ab2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3301      	adds	r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006abe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	dd14      	ble.n	8006af0 <hagl_draw_circle+0x154>
            y--;
 8006ac6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006ad2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006ad6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	330a      	adds	r3, #10
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	817b      	strh	r3, [r7, #10]
 8006aee:	e008      	b.n	8006b02 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	897b      	ldrh	r3, [r7, #10]
 8006af8:	4413      	add	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3306      	adds	r3, #6
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	4413      	add	r3, r2
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	b218      	sxth	r0, r3
 8006b0c:	88ba      	ldrh	r2, [r7, #4]
 8006b0e:	89bb      	ldrh	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b21b      	sxth	r3, r3
 8006b16:	883a      	ldrh	r2, [r7, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f7ff fb6d 	bl	80061f8 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	89fb      	ldrh	r3, [r7, #14]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	b218      	sxth	r0, r3
 8006b28:	88ba      	ldrh	r2, [r7, #4]
 8006b2a:	89bb      	ldrh	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b21b      	sxth	r3, r3
 8006b32:	883a      	ldrh	r2, [r7, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7ff fb5f 	bl	80061f8 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
 8006b3e:	4413      	add	r3, r2
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	b218      	sxth	r0, r3
 8006b44:	88ba      	ldrh	r2, [r7, #4]
 8006b46:	89bb      	ldrh	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	b21b      	sxth	r3, r3
 8006b4e:	883a      	ldrh	r2, [r7, #0]
 8006b50:	4619      	mov	r1, r3
 8006b52:	f7ff fb51 	bl	80061f8 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	89fb      	ldrh	r3, [r7, #14]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	b218      	sxth	r0, r3
 8006b60:	88ba      	ldrh	r2, [r7, #4]
 8006b62:	89bb      	ldrh	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	883a      	ldrh	r2, [r7, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f7ff fb43 	bl	80061f8 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8006b72:	88fa      	ldrh	r2, [r7, #6]
 8006b74:	89bb      	ldrh	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	b218      	sxth	r0, r3
 8006b7c:	88ba      	ldrh	r2, [r7, #4]
 8006b7e:	89fb      	ldrh	r3, [r7, #14]
 8006b80:	4413      	add	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b21b      	sxth	r3, r3
 8006b86:	883a      	ldrh	r2, [r7, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f7ff fb35 	bl	80061f8 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8006b8e:	88fa      	ldrh	r2, [r7, #6]
 8006b90:	89bb      	ldrh	r3, [r7, #12]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	b218      	sxth	r0, r3
 8006b98:	88ba      	ldrh	r2, [r7, #4]
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	b21b      	sxth	r3, r3
 8006ba2:	883a      	ldrh	r2, [r7, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f7ff fb27 	bl	80061f8 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8006baa:	88fa      	ldrh	r2, [r7, #6]
 8006bac:	89bb      	ldrh	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	b218      	sxth	r0, r3
 8006bb4:	88ba      	ldrh	r2, [r7, #4]
 8006bb6:	89fb      	ldrh	r3, [r7, #14]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	b21b      	sxth	r3, r3
 8006bbe:	883a      	ldrh	r2, [r7, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f7ff fb19 	bl	80061f8 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	89bb      	ldrh	r3, [r7, #12]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	b218      	sxth	r0, r3
 8006bd0:	88ba      	ldrh	r2, [r7, #4]
 8006bd2:	89fb      	ldrh	r3, [r7, #14]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	b21b      	sxth	r3, r3
 8006bda:	883a      	ldrh	r2, [r7, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7ff fb0b 	bl	80061f8 <hagl_put_pixel>
    while (y >= x) {
 8006be2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	f6bf af61 	bge.w	8006ab2 <hagl_draw_circle+0x116>
    }
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd90      	pop	{r4, r7, pc}

08006bfa <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8006bfa:	b590      	push	{r4, r7, lr}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	4604      	mov	r4, r0
 8006c02:	4608      	mov	r0, r1
 8006c04:	4611      	mov	r1, r2
 8006c06:	461a      	mov	r2, r3
 8006c08:	4623      	mov	r3, r4
 8006c0a:	80fb      	strh	r3, [r7, #6]
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	80bb      	strh	r3, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
 8006c14:	4613      	mov	r3, r2
 8006c16:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f1c3 0303 	rsb	r3, r3, #3
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8006c2e:	e067      	b.n	8006d00 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	89fb      	ldrh	r3, [r7, #14]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	b218      	sxth	r0, r3
 8006c3a:	88ba      	ldrh	r2, [r7, #4]
 8006c3c:	89bb      	ldrh	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	b219      	sxth	r1, r3
 8006c44:	89fb      	ldrh	r3, [r7, #14]
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	883b      	ldrh	r3, [r7, #0]
 8006c4c:	f7ff fb06 	bl	800625c <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	89fb      	ldrh	r3, [r7, #14]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	b218      	sxth	r0, r3
 8006c5a:	88ba      	ldrh	r2, [r7, #4]
 8006c5c:	89bb      	ldrh	r3, [r7, #12]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	b219      	sxth	r1, r3
 8006c64:	89fb      	ldrh	r3, [r7, #14]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	883b      	ldrh	r3, [r7, #0]
 8006c6c:	f7ff faf6 	bl	800625c <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8006c70:	88fa      	ldrh	r2, [r7, #6]
 8006c72:	89bb      	ldrh	r3, [r7, #12]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	b218      	sxth	r0, r3
 8006c7a:	88ba      	ldrh	r2, [r7, #4]
 8006c7c:	89fb      	ldrh	r3, [r7, #14]
 8006c7e:	4413      	add	r3, r2
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	b219      	sxth	r1, r3
 8006c84:	89bb      	ldrh	r3, [r7, #12]
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	883b      	ldrh	r3, [r7, #0]
 8006c8c:	f7ff fae6 	bl	800625c <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	89bb      	ldrh	r3, [r7, #12]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	b218      	sxth	r0, r3
 8006c9a:	88ba      	ldrh	r2, [r7, #4]
 8006c9c:	89fb      	ldrh	r3, [r7, #14]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	b219      	sxth	r1, r3
 8006ca4:	89bb      	ldrh	r3, [r7, #12]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	883b      	ldrh	r3, [r7, #0]
 8006cac:	f7ff fad6 	bl	800625c <hagl_draw_hline>
        x++;
 8006cb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006cbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dd14      	ble.n	8006cee <hagl_fill_circle+0xf4>
            y--;
 8006cc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006cd0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006cd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	897b      	ldrh	r3, [r7, #10]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	330a      	adds	r3, #10
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	817b      	strh	r3, [r7, #10]
 8006cec:	e008      	b.n	8006d00 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8006cee:	89fb      	ldrh	r3, [r7, #14]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	897b      	ldrh	r3, [r7, #10]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3306      	adds	r3, #6
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8006d00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	da91      	bge.n	8006c30 <hagl_fill_circle+0x36>
        }
    }
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd90      	pop	{r4, r7, pc}

08006d16 <hagl_draw_polygon>:
        hagl_draw_hline(x0 - wx, y0 + wy, wx * 2, color);
    }
}


void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006d16:	b590      	push	{r4, r7, lr}
 8006d18:	b087      	sub	sp, #28
 8006d1a:	af02      	add	r7, sp, #8
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	6039      	str	r1, [r7, #0]
 8006d20:	80fb      	strh	r3, [r7, #6]
 8006d22:	4613      	mov	r3, r2
 8006d24:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8006d26:	2300      	movs	r3, #0
 8006d28:	81fb      	strh	r3, [r7, #14]
 8006d2a:	e02a      	b.n	8006d82 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8006d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	4413      	add	r3, r2
        hagl_draw_line(
 8006d36:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8006d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	3302      	adds	r3, #2
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4413      	add	r3, r2
        hagl_draw_line(
 8006d46:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8006d4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	4413      	add	r3, r2
        hagl_draw_line(
 8006d56:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8006d5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	3306      	adds	r3, #6
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	4413      	add	r3, r2
        hagl_draw_line(
 8006d66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006d6a:	88bb      	ldrh	r3, [r7, #4]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	4622      	mov	r2, r4
 8006d72:	f7ff fab9 	bl	80062e8 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8006d76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	81fb      	strh	r3, [r7, #14]
 8006d82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	dbcd      	blt.n	8006d2c <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	3302      	adds	r3, #2
    hagl_draw_line(
 8006d9a:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8006d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006da2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006da6:	3b01      	subs	r3, #1
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4413      	add	r3, r2
    hagl_draw_line(
 8006dae:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8006db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3b02      	subs	r3, #2
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	4413      	add	r3, r2
    hagl_draw_line(
 8006dbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006dc2:	88bb      	ldrh	r3, [r7, #4]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	4622      	mov	r2, r4
 8006dca:	f7ff fa8d 	bl	80062e8 <hagl_draw_line>
        color
    );
}
 8006dce:	bf00      	nop
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd90      	pop	{r4, r7, pc}

08006dd6 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b0ac      	sub	sp, #176	@ 0xb0
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	4603      	mov	r3, r0
 8006dde:	6039      	str	r1, [r7, #0]
 8006de0:	80fb      	strh	r3, [r7, #6]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8006de6:	2380      	movs	r3, #128	@ 0x80
 8006de8:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8006df2:	2300      	movs	r3, #0
 8006df4:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006df8:	e02e      	b.n	8006e58 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8006dfa:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	3302      	adds	r3, #2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4413      	add	r3, r2
 8006e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e0a:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	dd08      	ble.n	8006e24 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8006e12:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	3302      	adds	r3, #2
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8006e24:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e34:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	da08      	bge.n	8006e4e <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8006e3c:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	3302      	adds	r3, #2
 8006e44:	683a      	ldr	r2, [r7, #0]
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8006e4e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006e52:	3301      	adds	r3, #1
 8006e54:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006e58:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8006e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	dbca      	blt.n	8006dfa <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8006e64:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8006e68:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8006e6c:	e144      	b.n	80070f8 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8006e84:	e0a6      	b.n	8006fd4 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8006e86:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e94:	ee07 3a90 	vmov	s15, r3
 8006e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e9c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8006ea0:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	3302      	adds	r3, #2
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eb8:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8006ebc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8006ed6:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	3302      	adds	r3, #2
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eee:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8006ef2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8006efe:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0a:	d50c      	bpl.n	8006f26 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8006f0c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006f10:	ee07 3a90 	vmov	s15, r3
 8006f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f18:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f24:	da19      	bge.n	8006f5a <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8006f26:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8006f32:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3e:	d53e      	bpl.n	8006fbe <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8006f40:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f4c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f58:	db31      	blt.n	8006fbe <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8006f5a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f66:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8006f6a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f6e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006f72:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8006f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7e:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8006f82:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8006f86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f8e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8006f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f9a:	ee17 3a90 	vmov	r3, s15
 8006f9e:	b21a      	sxth	r2, r3
 8006fa0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	33b0      	adds	r3, #176	@ 0xb0
 8006faa:	443b      	add	r3, r7
 8006fac:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8006fb0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8006fbe:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006fc2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8006fc6:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3301      	adds	r3, #1
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8006fd4:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8006fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	f6ff af52 	blt.w	8006e86 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8006fe8:	e046      	b.n	8007078 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8006fea:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	33b0      	adds	r3, #176	@ 0xb0
 8006ff2:	443b      	add	r3, r7
 8006ff4:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8006ff8:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	33b0      	adds	r3, #176	@ 0xb0
 8007002:	443b      	add	r3, r7
 8007004:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007008:	429a      	cmp	r2, r3
 800700a:	d92e      	bls.n	800706a <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 800700c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	33b0      	adds	r3, #176	@ 0xb0
 8007014:	443b      	add	r3, r7
 8007016:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800701a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 800701e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007022:	3301      	adds	r3, #1
 8007024:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	33b0      	adds	r3, #176	@ 0xb0
 800702c:	443b      	add	r3, r7
 800702e:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007032:	0053      	lsls	r3, r2, #1
 8007034:	33b0      	adds	r3, #176	@ 0xb0
 8007036:	443b      	add	r3, r7
 8007038:	460a      	mov	r2, r1
 800703a:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 800703e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007042:	3301      	adds	r3, #1
 8007044:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	33b0      	adds	r3, #176	@ 0xb0
 800704c:	443b      	add	r3, r7
 800704e:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007052:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <hagl_fill_polygon+0x2a2>
                    i--;
 800705a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29b      	uxth	r3, r3
 8007064:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007068:	e006      	b.n	8007078 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 800706a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800706e:	b29b      	uxth	r3, r3
 8007070:	3301      	adds	r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007078:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 800707c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007080:	3b01      	subs	r3, #1
 8007082:	429a      	cmp	r2, r3
 8007084:	dbb1      	blt.n	8006fea <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007086:	2300      	movs	r3, #0
 8007088:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 800708c:	e027      	b.n	80070de <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 800708e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007092:	3301      	adds	r3, #1
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	33b0      	adds	r3, #176	@ 0xb0
 8007098:	443b      	add	r3, r7
 800709a:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 800709e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	33b0      	adds	r3, #176	@ 0xb0
 80070a6:	443b      	add	r3, r7
 80070a8:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 80070b4:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	33b0      	adds	r3, #176	@ 0xb0
 80070bc:	443b      	add	r3, r7
 80070be:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80070c2:	b218      	sxth	r0, r3
 80070c4:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 80070c8:	88bb      	ldrh	r3, [r7, #4]
 80070ca:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 80070ce:	f7ff f8c5 	bl	800625c <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 80070d2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80070d6:	3302      	adds	r3, #2
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 80070de:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 80070e2:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80070e6:	429a      	cmp	r2, r3
 80070e8:	dbd1      	blt.n	800708e <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 80070ea:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3301      	adds	r3, #1
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 80070f8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80070fc:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007100:	429a      	cmp	r2, r3
 8007102:	f6ff aeb4 	blt.w	8006e6e <hagl_fill_polygon+0x98>
        }
    }
}
 8007106:	bf00      	nop
 8007108:	bf00      	nop
 800710a:	37b0      	adds	r7, #176	@ 0xb0
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	461a      	mov	r2, r3
 800711e:	4623      	mov	r3, r4
 8007120:	80fb      	strh	r3, [r7, #6]
 8007122:	4603      	mov	r3, r0
 8007124:	80bb      	strh	r3, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	807b      	strh	r3, [r7, #2]
 800712a:	4613      	mov	r3, r2
 800712c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	81bb      	strh	r3, [r7, #12]
 8007132:	88bb      	ldrh	r3, [r7, #4]
 8007134:	81fb      	strh	r3, [r7, #14]
 8007136:	887b      	ldrh	r3, [r7, #2]
 8007138:	823b      	strh	r3, [r7, #16]
 800713a:	883b      	ldrh	r3, [r7, #0]
 800713c:	827b      	strh	r3, [r7, #18]
 800713e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007140:	82bb      	strh	r3, [r7, #20]
 8007142:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007144:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007146:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007148:	f107 030c 	add.w	r3, r7, #12
 800714c:	4619      	mov	r1, r3
 800714e:	2003      	movs	r0, #3
 8007150:	f7ff fde1 	bl	8006d16 <hagl_draw_polygon>
};
 8007154:	bf00      	nop
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	bd90      	pop	{r4, r7, pc}

0800715c <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	4611      	mov	r1, r2
 8007168:	461a      	mov	r2, r3
 800716a:	4623      	mov	r3, r4
 800716c:	80fb      	strh	r3, [r7, #6]
 800716e:	4603      	mov	r3, r0
 8007170:	80bb      	strh	r3, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	807b      	strh	r3, [r7, #2]
 8007176:	4613      	mov	r3, r2
 8007178:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	81bb      	strh	r3, [r7, #12]
 800717e:	88bb      	ldrh	r3, [r7, #4]
 8007180:	81fb      	strh	r3, [r7, #14]
 8007182:	887b      	ldrh	r3, [r7, #2]
 8007184:	823b      	strh	r3, [r7, #16]
 8007186:	883b      	ldrh	r3, [r7, #0]
 8007188:	827b      	strh	r3, [r7, #18]
 800718a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800718c:	82bb      	strh	r3, [r7, #20]
 800718e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007190:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007192:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007194:	f107 030c 	add.w	r3, r7, #12
 8007198:	4619      	mov	r1, r3
 800719a:	2003      	movs	r0, #3
 800719c:	f7ff fe1b 	bl	8006dd6 <hagl_fill_polygon>
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd90      	pop	{r4, r7, pc}

080071a8 <atoi>:
 80071a8:	220a      	movs	r2, #10
 80071aa:	2100      	movs	r1, #0
 80071ac:	f000 b87a 	b.w	80072a4 <strtol>

080071b0 <_strtol_l.constprop.0>:
 80071b0:	2b24      	cmp	r3, #36	@ 0x24
 80071b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b6:	4686      	mov	lr, r0
 80071b8:	4690      	mov	r8, r2
 80071ba:	d801      	bhi.n	80071c0 <_strtol_l.constprop.0+0x10>
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d106      	bne.n	80071ce <_strtol_l.constprop.0+0x1e>
 80071c0:	f000 fb88 	bl	80078d4 <__errno>
 80071c4:	2316      	movs	r3, #22
 80071c6:	6003      	str	r3, [r0, #0]
 80071c8:	2000      	movs	r0, #0
 80071ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ce:	4834      	ldr	r0, [pc, #208]	@ (80072a0 <_strtol_l.constprop.0+0xf0>)
 80071d0:	460d      	mov	r5, r1
 80071d2:	462a      	mov	r2, r5
 80071d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071d8:	5d06      	ldrb	r6, [r0, r4]
 80071da:	f016 0608 	ands.w	r6, r6, #8
 80071de:	d1f8      	bne.n	80071d2 <_strtol_l.constprop.0+0x22>
 80071e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80071e2:	d12d      	bne.n	8007240 <_strtol_l.constprop.0+0x90>
 80071e4:	782c      	ldrb	r4, [r5, #0]
 80071e6:	2601      	movs	r6, #1
 80071e8:	1c95      	adds	r5, r2, #2
 80071ea:	f033 0210 	bics.w	r2, r3, #16
 80071ee:	d109      	bne.n	8007204 <_strtol_l.constprop.0+0x54>
 80071f0:	2c30      	cmp	r4, #48	@ 0x30
 80071f2:	d12a      	bne.n	800724a <_strtol_l.constprop.0+0x9a>
 80071f4:	782a      	ldrb	r2, [r5, #0]
 80071f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071fa:	2a58      	cmp	r2, #88	@ 0x58
 80071fc:	d125      	bne.n	800724a <_strtol_l.constprop.0+0x9a>
 80071fe:	786c      	ldrb	r4, [r5, #1]
 8007200:	2310      	movs	r3, #16
 8007202:	3502      	adds	r5, #2
 8007204:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007208:	f10c 3cff 	add.w	ip, ip, #4294967295
 800720c:	2200      	movs	r2, #0
 800720e:	fbbc f9f3 	udiv	r9, ip, r3
 8007212:	4610      	mov	r0, r2
 8007214:	fb03 ca19 	mls	sl, r3, r9, ip
 8007218:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800721c:	2f09      	cmp	r7, #9
 800721e:	d81b      	bhi.n	8007258 <_strtol_l.constprop.0+0xa8>
 8007220:	463c      	mov	r4, r7
 8007222:	42a3      	cmp	r3, r4
 8007224:	dd27      	ble.n	8007276 <_strtol_l.constprop.0+0xc6>
 8007226:	1c57      	adds	r7, r2, #1
 8007228:	d007      	beq.n	800723a <_strtol_l.constprop.0+0x8a>
 800722a:	4581      	cmp	r9, r0
 800722c:	d320      	bcc.n	8007270 <_strtol_l.constprop.0+0xc0>
 800722e:	d101      	bne.n	8007234 <_strtol_l.constprop.0+0x84>
 8007230:	45a2      	cmp	sl, r4
 8007232:	db1d      	blt.n	8007270 <_strtol_l.constprop.0+0xc0>
 8007234:	fb00 4003 	mla	r0, r0, r3, r4
 8007238:	2201      	movs	r2, #1
 800723a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800723e:	e7eb      	b.n	8007218 <_strtol_l.constprop.0+0x68>
 8007240:	2c2b      	cmp	r4, #43	@ 0x2b
 8007242:	bf04      	itt	eq
 8007244:	782c      	ldrbeq	r4, [r5, #0]
 8007246:	1c95      	addeq	r5, r2, #2
 8007248:	e7cf      	b.n	80071ea <_strtol_l.constprop.0+0x3a>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1da      	bne.n	8007204 <_strtol_l.constprop.0+0x54>
 800724e:	2c30      	cmp	r4, #48	@ 0x30
 8007250:	bf0c      	ite	eq
 8007252:	2308      	moveq	r3, #8
 8007254:	230a      	movne	r3, #10
 8007256:	e7d5      	b.n	8007204 <_strtol_l.constprop.0+0x54>
 8007258:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800725c:	2f19      	cmp	r7, #25
 800725e:	d801      	bhi.n	8007264 <_strtol_l.constprop.0+0xb4>
 8007260:	3c37      	subs	r4, #55	@ 0x37
 8007262:	e7de      	b.n	8007222 <_strtol_l.constprop.0+0x72>
 8007264:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007268:	2f19      	cmp	r7, #25
 800726a:	d804      	bhi.n	8007276 <_strtol_l.constprop.0+0xc6>
 800726c:	3c57      	subs	r4, #87	@ 0x57
 800726e:	e7d8      	b.n	8007222 <_strtol_l.constprop.0+0x72>
 8007270:	f04f 32ff 	mov.w	r2, #4294967295
 8007274:	e7e1      	b.n	800723a <_strtol_l.constprop.0+0x8a>
 8007276:	1c53      	adds	r3, r2, #1
 8007278:	d108      	bne.n	800728c <_strtol_l.constprop.0+0xdc>
 800727a:	2322      	movs	r3, #34	@ 0x22
 800727c:	f8ce 3000 	str.w	r3, [lr]
 8007280:	4660      	mov	r0, ip
 8007282:	f1b8 0f00 	cmp.w	r8, #0
 8007286:	d0a0      	beq.n	80071ca <_strtol_l.constprop.0+0x1a>
 8007288:	1e69      	subs	r1, r5, #1
 800728a:	e006      	b.n	800729a <_strtol_l.constprop.0+0xea>
 800728c:	b106      	cbz	r6, 8007290 <_strtol_l.constprop.0+0xe0>
 800728e:	4240      	negs	r0, r0
 8007290:	f1b8 0f00 	cmp.w	r8, #0
 8007294:	d099      	beq.n	80071ca <_strtol_l.constprop.0+0x1a>
 8007296:	2a00      	cmp	r2, #0
 8007298:	d1f6      	bne.n	8007288 <_strtol_l.constprop.0+0xd8>
 800729a:	f8c8 1000 	str.w	r1, [r8]
 800729e:	e794      	b.n	80071ca <_strtol_l.constprop.0+0x1a>
 80072a0:	08011d0d 	.word	0x08011d0d

080072a4 <strtol>:
 80072a4:	4613      	mov	r3, r2
 80072a6:	460a      	mov	r2, r1
 80072a8:	4601      	mov	r1, r0
 80072aa:	4802      	ldr	r0, [pc, #8]	@ (80072b4 <strtol+0x10>)
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f7ff bf7f 	b.w	80071b0 <_strtol_l.constprop.0>
 80072b2:	bf00      	nop
 80072b4:	20000220 	.word	0x20000220

080072b8 <__sflush_r>:
 80072b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c0:	0716      	lsls	r6, r2, #28
 80072c2:	4605      	mov	r5, r0
 80072c4:	460c      	mov	r4, r1
 80072c6:	d454      	bmi.n	8007372 <__sflush_r+0xba>
 80072c8:	684b      	ldr	r3, [r1, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	dc02      	bgt.n	80072d4 <__sflush_r+0x1c>
 80072ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	dd48      	ble.n	8007366 <__sflush_r+0xae>
 80072d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	d045      	beq.n	8007366 <__sflush_r+0xae>
 80072da:	2300      	movs	r3, #0
 80072dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072e0:	682f      	ldr	r7, [r5, #0]
 80072e2:	6a21      	ldr	r1, [r4, #32]
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	d030      	beq.n	800734a <__sflush_r+0x92>
 80072e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	0759      	lsls	r1, r3, #29
 80072ee:	d505      	bpl.n	80072fc <__sflush_r+0x44>
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	1ad2      	subs	r2, r2, r3
 80072f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072f6:	b10b      	cbz	r3, 80072fc <__sflush_r+0x44>
 80072f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072fa:	1ad2      	subs	r2, r2, r3
 80072fc:	2300      	movs	r3, #0
 80072fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007300:	6a21      	ldr	r1, [r4, #32]
 8007302:	4628      	mov	r0, r5
 8007304:	47b0      	blx	r6
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	d106      	bne.n	800731a <__sflush_r+0x62>
 800730c:	6829      	ldr	r1, [r5, #0]
 800730e:	291d      	cmp	r1, #29
 8007310:	d82b      	bhi.n	800736a <__sflush_r+0xb2>
 8007312:	4a2a      	ldr	r2, [pc, #168]	@ (80073bc <__sflush_r+0x104>)
 8007314:	410a      	asrs	r2, r1
 8007316:	07d6      	lsls	r6, r2, #31
 8007318:	d427      	bmi.n	800736a <__sflush_r+0xb2>
 800731a:	2200      	movs	r2, #0
 800731c:	6062      	str	r2, [r4, #4]
 800731e:	04d9      	lsls	r1, r3, #19
 8007320:	6922      	ldr	r2, [r4, #16]
 8007322:	6022      	str	r2, [r4, #0]
 8007324:	d504      	bpl.n	8007330 <__sflush_r+0x78>
 8007326:	1c42      	adds	r2, r0, #1
 8007328:	d101      	bne.n	800732e <__sflush_r+0x76>
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	b903      	cbnz	r3, 8007330 <__sflush_r+0x78>
 800732e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007332:	602f      	str	r7, [r5, #0]
 8007334:	b1b9      	cbz	r1, 8007366 <__sflush_r+0xae>
 8007336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800733a:	4299      	cmp	r1, r3
 800733c:	d002      	beq.n	8007344 <__sflush_r+0x8c>
 800733e:	4628      	mov	r0, r5
 8007340:	f000 fb22 	bl	8007988 <_free_r>
 8007344:	2300      	movs	r3, #0
 8007346:	6363      	str	r3, [r4, #52]	@ 0x34
 8007348:	e00d      	b.n	8007366 <__sflush_r+0xae>
 800734a:	2301      	movs	r3, #1
 800734c:	4628      	mov	r0, r5
 800734e:	47b0      	blx	r6
 8007350:	4602      	mov	r2, r0
 8007352:	1c50      	adds	r0, r2, #1
 8007354:	d1c9      	bne.n	80072ea <__sflush_r+0x32>
 8007356:	682b      	ldr	r3, [r5, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0c6      	beq.n	80072ea <__sflush_r+0x32>
 800735c:	2b1d      	cmp	r3, #29
 800735e:	d001      	beq.n	8007364 <__sflush_r+0xac>
 8007360:	2b16      	cmp	r3, #22
 8007362:	d11e      	bne.n	80073a2 <__sflush_r+0xea>
 8007364:	602f      	str	r7, [r5, #0]
 8007366:	2000      	movs	r0, #0
 8007368:	e022      	b.n	80073b0 <__sflush_r+0xf8>
 800736a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736e:	b21b      	sxth	r3, r3
 8007370:	e01b      	b.n	80073aa <__sflush_r+0xf2>
 8007372:	690f      	ldr	r7, [r1, #16]
 8007374:	2f00      	cmp	r7, #0
 8007376:	d0f6      	beq.n	8007366 <__sflush_r+0xae>
 8007378:	0793      	lsls	r3, r2, #30
 800737a:	680e      	ldr	r6, [r1, #0]
 800737c:	bf08      	it	eq
 800737e:	694b      	ldreq	r3, [r1, #20]
 8007380:	600f      	str	r7, [r1, #0]
 8007382:	bf18      	it	ne
 8007384:	2300      	movne	r3, #0
 8007386:	eba6 0807 	sub.w	r8, r6, r7
 800738a:	608b      	str	r3, [r1, #8]
 800738c:	f1b8 0f00 	cmp.w	r8, #0
 8007390:	dde9      	ble.n	8007366 <__sflush_r+0xae>
 8007392:	6a21      	ldr	r1, [r4, #32]
 8007394:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007396:	4643      	mov	r3, r8
 8007398:	463a      	mov	r2, r7
 800739a:	4628      	mov	r0, r5
 800739c:	47b0      	blx	r6
 800739e:	2800      	cmp	r0, #0
 80073a0:	dc08      	bgt.n	80073b4 <__sflush_r+0xfc>
 80073a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073aa:	81a3      	strh	r3, [r4, #12]
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b4:	4407      	add	r7, r0
 80073b6:	eba8 0800 	sub.w	r8, r8, r0
 80073ba:	e7e7      	b.n	800738c <__sflush_r+0xd4>
 80073bc:	dfbffffe 	.word	0xdfbffffe

080073c0 <_fflush_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	690b      	ldr	r3, [r1, #16]
 80073c4:	4605      	mov	r5, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	b913      	cbnz	r3, 80073d0 <_fflush_r+0x10>
 80073ca:	2500      	movs	r5, #0
 80073cc:	4628      	mov	r0, r5
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	b118      	cbz	r0, 80073da <_fflush_r+0x1a>
 80073d2:	6a03      	ldr	r3, [r0, #32]
 80073d4:	b90b      	cbnz	r3, 80073da <_fflush_r+0x1a>
 80073d6:	f000 f8a7 	bl	8007528 <__sinit>
 80073da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f3      	beq.n	80073ca <_fflush_r+0xa>
 80073e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073e4:	07d0      	lsls	r0, r2, #31
 80073e6:	d404      	bmi.n	80073f2 <_fflush_r+0x32>
 80073e8:	0599      	lsls	r1, r3, #22
 80073ea:	d402      	bmi.n	80073f2 <_fflush_r+0x32>
 80073ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ee:	f000 fa9c 	bl	800792a <__retarget_lock_acquire_recursive>
 80073f2:	4628      	mov	r0, r5
 80073f4:	4621      	mov	r1, r4
 80073f6:	f7ff ff5f 	bl	80072b8 <__sflush_r>
 80073fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073fc:	07da      	lsls	r2, r3, #31
 80073fe:	4605      	mov	r5, r0
 8007400:	d4e4      	bmi.n	80073cc <_fflush_r+0xc>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	059b      	lsls	r3, r3, #22
 8007406:	d4e1      	bmi.n	80073cc <_fflush_r+0xc>
 8007408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800740a:	f000 fa8f 	bl	800792c <__retarget_lock_release_recursive>
 800740e:	e7dd      	b.n	80073cc <_fflush_r+0xc>

08007410 <std>:
 8007410:	2300      	movs	r3, #0
 8007412:	b510      	push	{r4, lr}
 8007414:	4604      	mov	r4, r0
 8007416:	e9c0 3300 	strd	r3, r3, [r0]
 800741a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800741e:	6083      	str	r3, [r0, #8]
 8007420:	8181      	strh	r1, [r0, #12]
 8007422:	6643      	str	r3, [r0, #100]	@ 0x64
 8007424:	81c2      	strh	r2, [r0, #14]
 8007426:	6183      	str	r3, [r0, #24]
 8007428:	4619      	mov	r1, r3
 800742a:	2208      	movs	r2, #8
 800742c:	305c      	adds	r0, #92	@ 0x5c
 800742e:	f000 f981 	bl	8007734 <memset>
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <std+0x58>)
 8007434:	6263      	str	r3, [r4, #36]	@ 0x24
 8007436:	4b0d      	ldr	r3, [pc, #52]	@ (800746c <std+0x5c>)
 8007438:	62a3      	str	r3, [r4, #40]	@ 0x28
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <std+0x60>)
 800743c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800743e:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <std+0x64>)
 8007440:	6323      	str	r3, [r4, #48]	@ 0x30
 8007442:	4b0d      	ldr	r3, [pc, #52]	@ (8007478 <std+0x68>)
 8007444:	6224      	str	r4, [r4, #32]
 8007446:	429c      	cmp	r4, r3
 8007448:	d006      	beq.n	8007458 <std+0x48>
 800744a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800744e:	4294      	cmp	r4, r2
 8007450:	d002      	beq.n	8007458 <std+0x48>
 8007452:	33d0      	adds	r3, #208	@ 0xd0
 8007454:	429c      	cmp	r4, r3
 8007456:	d105      	bne.n	8007464 <std+0x54>
 8007458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007460:	f000 ba62 	b.w	8007928 <__retarget_lock_init_recursive>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	bf00      	nop
 8007468:	080075fd 	.word	0x080075fd
 800746c:	0800761f 	.word	0x0800761f
 8007470:	08007657 	.word	0x08007657
 8007474:	0800767b 	.word	0x0800767b
 8007478:	2000ae44 	.word	0x2000ae44

0800747c <stdio_exit_handler>:
 800747c:	4a02      	ldr	r2, [pc, #8]	@ (8007488 <stdio_exit_handler+0xc>)
 800747e:	4903      	ldr	r1, [pc, #12]	@ (800748c <stdio_exit_handler+0x10>)
 8007480:	4803      	ldr	r0, [pc, #12]	@ (8007490 <stdio_exit_handler+0x14>)
 8007482:	f000 b869 	b.w	8007558 <_fwalk_sglue>
 8007486:	bf00      	nop
 8007488:	20000214 	.word	0x20000214
 800748c:	080073c1 	.word	0x080073c1
 8007490:	20000224 	.word	0x20000224

08007494 <cleanup_stdio>:
 8007494:	6841      	ldr	r1, [r0, #4]
 8007496:	4b0c      	ldr	r3, [pc, #48]	@ (80074c8 <cleanup_stdio+0x34>)
 8007498:	4299      	cmp	r1, r3
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
 800749e:	d001      	beq.n	80074a4 <cleanup_stdio+0x10>
 80074a0:	f7ff ff8e 	bl	80073c0 <_fflush_r>
 80074a4:	68a1      	ldr	r1, [r4, #8]
 80074a6:	4b09      	ldr	r3, [pc, #36]	@ (80074cc <cleanup_stdio+0x38>)
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <cleanup_stdio+0x1e>
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7ff ff87 	bl	80073c0 <_fflush_r>
 80074b2:	68e1      	ldr	r1, [r4, #12]
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <cleanup_stdio+0x3c>)
 80074b6:	4299      	cmp	r1, r3
 80074b8:	d004      	beq.n	80074c4 <cleanup_stdio+0x30>
 80074ba:	4620      	mov	r0, r4
 80074bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074c0:	f7ff bf7e 	b.w	80073c0 <_fflush_r>
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	bf00      	nop
 80074c8:	2000ae44 	.word	0x2000ae44
 80074cc:	2000aeac 	.word	0x2000aeac
 80074d0:	2000af14 	.word	0x2000af14

080074d4 <global_stdio_init.part.0>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007504 <global_stdio_init.part.0+0x30>)
 80074d8:	4c0b      	ldr	r4, [pc, #44]	@ (8007508 <global_stdio_init.part.0+0x34>)
 80074da:	4a0c      	ldr	r2, [pc, #48]	@ (800750c <global_stdio_init.part.0+0x38>)
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	4620      	mov	r0, r4
 80074e0:	2200      	movs	r2, #0
 80074e2:	2104      	movs	r1, #4
 80074e4:	f7ff ff94 	bl	8007410 <std>
 80074e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074ec:	2201      	movs	r2, #1
 80074ee:	2109      	movs	r1, #9
 80074f0:	f7ff ff8e 	bl	8007410 <std>
 80074f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074f8:	2202      	movs	r2, #2
 80074fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074fe:	2112      	movs	r1, #18
 8007500:	f7ff bf86 	b.w	8007410 <std>
 8007504:	2000af7c 	.word	0x2000af7c
 8007508:	2000ae44 	.word	0x2000ae44
 800750c:	0800747d 	.word	0x0800747d

08007510 <__sfp_lock_acquire>:
 8007510:	4801      	ldr	r0, [pc, #4]	@ (8007518 <__sfp_lock_acquire+0x8>)
 8007512:	f000 ba0a 	b.w	800792a <__retarget_lock_acquire_recursive>
 8007516:	bf00      	nop
 8007518:	2000af85 	.word	0x2000af85

0800751c <__sfp_lock_release>:
 800751c:	4801      	ldr	r0, [pc, #4]	@ (8007524 <__sfp_lock_release+0x8>)
 800751e:	f000 ba05 	b.w	800792c <__retarget_lock_release_recursive>
 8007522:	bf00      	nop
 8007524:	2000af85 	.word	0x2000af85

08007528 <__sinit>:
 8007528:	b510      	push	{r4, lr}
 800752a:	4604      	mov	r4, r0
 800752c:	f7ff fff0 	bl	8007510 <__sfp_lock_acquire>
 8007530:	6a23      	ldr	r3, [r4, #32]
 8007532:	b11b      	cbz	r3, 800753c <__sinit+0x14>
 8007534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007538:	f7ff bff0 	b.w	800751c <__sfp_lock_release>
 800753c:	4b04      	ldr	r3, [pc, #16]	@ (8007550 <__sinit+0x28>)
 800753e:	6223      	str	r3, [r4, #32]
 8007540:	4b04      	ldr	r3, [pc, #16]	@ (8007554 <__sinit+0x2c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f5      	bne.n	8007534 <__sinit+0xc>
 8007548:	f7ff ffc4 	bl	80074d4 <global_stdio_init.part.0>
 800754c:	e7f2      	b.n	8007534 <__sinit+0xc>
 800754e:	bf00      	nop
 8007550:	08007495 	.word	0x08007495
 8007554:	2000af7c 	.word	0x2000af7c

08007558 <_fwalk_sglue>:
 8007558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800755c:	4607      	mov	r7, r0
 800755e:	4688      	mov	r8, r1
 8007560:	4614      	mov	r4, r2
 8007562:	2600      	movs	r6, #0
 8007564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007568:	f1b9 0901 	subs.w	r9, r9, #1
 800756c:	d505      	bpl.n	800757a <_fwalk_sglue+0x22>
 800756e:	6824      	ldr	r4, [r4, #0]
 8007570:	2c00      	cmp	r4, #0
 8007572:	d1f7      	bne.n	8007564 <_fwalk_sglue+0xc>
 8007574:	4630      	mov	r0, r6
 8007576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d907      	bls.n	8007590 <_fwalk_sglue+0x38>
 8007580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007584:	3301      	adds	r3, #1
 8007586:	d003      	beq.n	8007590 <_fwalk_sglue+0x38>
 8007588:	4629      	mov	r1, r5
 800758a:	4638      	mov	r0, r7
 800758c:	47c0      	blx	r8
 800758e:	4306      	orrs	r6, r0
 8007590:	3568      	adds	r5, #104	@ 0x68
 8007592:	e7e9      	b.n	8007568 <_fwalk_sglue+0x10>

08007594 <sniprintf>:
 8007594:	b40c      	push	{r2, r3}
 8007596:	b530      	push	{r4, r5, lr}
 8007598:	4b17      	ldr	r3, [pc, #92]	@ (80075f8 <sniprintf+0x64>)
 800759a:	1e0c      	subs	r4, r1, #0
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	b09d      	sub	sp, #116	@ 0x74
 80075a0:	da08      	bge.n	80075b4 <sniprintf+0x20>
 80075a2:	238b      	movs	r3, #139	@ 0x8b
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	b01d      	add	sp, #116	@ 0x74
 80075ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b0:	b002      	add	sp, #8
 80075b2:	4770      	bx	lr
 80075b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075bc:	bf14      	ite	ne
 80075be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075c2:	4623      	moveq	r3, r4
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	9307      	str	r3, [sp, #28]
 80075c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075cc:	9002      	str	r0, [sp, #8]
 80075ce:	9006      	str	r0, [sp, #24]
 80075d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80075d6:	ab21      	add	r3, sp, #132	@ 0x84
 80075d8:	a902      	add	r1, sp, #8
 80075da:	4628      	mov	r0, r5
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	f000 fb2f 	bl	8007c40 <_svfiprintf_r>
 80075e2:	1c43      	adds	r3, r0, #1
 80075e4:	bfbc      	itt	lt
 80075e6:	238b      	movlt	r3, #139	@ 0x8b
 80075e8:	602b      	strlt	r3, [r5, #0]
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	d0dd      	beq.n	80075aa <sniprintf+0x16>
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e7d9      	b.n	80075aa <sniprintf+0x16>
 80075f6:	bf00      	nop
 80075f8:	20000220 	.word	0x20000220

080075fc <__sread>:
 80075fc:	b510      	push	{r4, lr}
 80075fe:	460c      	mov	r4, r1
 8007600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007604:	f000 f942 	bl	800788c <_read_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	bfab      	itete	ge
 800760c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800760e:	89a3      	ldrhlt	r3, [r4, #12]
 8007610:	181b      	addge	r3, r3, r0
 8007612:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007616:	bfac      	ite	ge
 8007618:	6563      	strge	r3, [r4, #84]	@ 0x54
 800761a:	81a3      	strhlt	r3, [r4, #12]
 800761c:	bd10      	pop	{r4, pc}

0800761e <__swrite>:
 800761e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007622:	461f      	mov	r7, r3
 8007624:	898b      	ldrh	r3, [r1, #12]
 8007626:	05db      	lsls	r3, r3, #23
 8007628:	4605      	mov	r5, r0
 800762a:	460c      	mov	r4, r1
 800762c:	4616      	mov	r6, r2
 800762e:	d505      	bpl.n	800763c <__swrite+0x1e>
 8007630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007634:	2302      	movs	r3, #2
 8007636:	2200      	movs	r2, #0
 8007638:	f000 f916 	bl	8007868 <_lseek_r>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007642:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	4632      	mov	r2, r6
 800764a:	463b      	mov	r3, r7
 800764c:	4628      	mov	r0, r5
 800764e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	f000 b92d 	b.w	80078b0 <_write_r>

08007656 <__sseek>:
 8007656:	b510      	push	{r4, lr}
 8007658:	460c      	mov	r4, r1
 800765a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800765e:	f000 f903 	bl	8007868 <_lseek_r>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	bf15      	itete	ne
 8007668:	6560      	strne	r0, [r4, #84]	@ 0x54
 800766a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800766e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007672:	81a3      	strheq	r3, [r4, #12]
 8007674:	bf18      	it	ne
 8007676:	81a3      	strhne	r3, [r4, #12]
 8007678:	bd10      	pop	{r4, pc}

0800767a <__sclose>:
 800767a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800767e:	f000 b8e3 	b.w	8007848 <_close_r>

08007682 <_vsniprintf_r>:
 8007682:	b530      	push	{r4, r5, lr}
 8007684:	4614      	mov	r4, r2
 8007686:	2c00      	cmp	r4, #0
 8007688:	b09b      	sub	sp, #108	@ 0x6c
 800768a:	4605      	mov	r5, r0
 800768c:	461a      	mov	r2, r3
 800768e:	da05      	bge.n	800769c <_vsniprintf_r+0x1a>
 8007690:	238b      	movs	r3, #139	@ 0x8b
 8007692:	6003      	str	r3, [r0, #0]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	b01b      	add	sp, #108	@ 0x6c
 800769a:	bd30      	pop	{r4, r5, pc}
 800769c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80076a4:	bf14      	ite	ne
 80076a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076aa:	4623      	moveq	r3, r4
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	9305      	str	r3, [sp, #20]
 80076b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076b4:	9100      	str	r1, [sp, #0]
 80076b6:	9104      	str	r1, [sp, #16]
 80076b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80076bc:	4669      	mov	r1, sp
 80076be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80076c0:	f000 fabe 	bl	8007c40 <_svfiprintf_r>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	bfbc      	itt	lt
 80076c8:	238b      	movlt	r3, #139	@ 0x8b
 80076ca:	602b      	strlt	r3, [r5, #0]
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	d0e3      	beq.n	8007698 <_vsniprintf_r+0x16>
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e7df      	b.n	8007698 <_vsniprintf_r+0x16>

080076d8 <vsniprintf>:
 80076d8:	b507      	push	{r0, r1, r2, lr}
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	460a      	mov	r2, r1
 80076e0:	4601      	mov	r1, r0
 80076e2:	4803      	ldr	r0, [pc, #12]	@ (80076f0 <vsniprintf+0x18>)
 80076e4:	6800      	ldr	r0, [r0, #0]
 80076e6:	f7ff ffcc 	bl	8007682 <_vsniprintf_r>
 80076ea:	b003      	add	sp, #12
 80076ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80076f0:	20000220 	.word	0x20000220

080076f4 <_vsiprintf_r>:
 80076f4:	b500      	push	{lr}
 80076f6:	b09b      	sub	sp, #108	@ 0x6c
 80076f8:	9100      	str	r1, [sp, #0]
 80076fa:	9104      	str	r1, [sp, #16]
 80076fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007700:	9105      	str	r1, [sp, #20]
 8007702:	9102      	str	r1, [sp, #8]
 8007704:	4905      	ldr	r1, [pc, #20]	@ (800771c <_vsiprintf_r+0x28>)
 8007706:	9103      	str	r1, [sp, #12]
 8007708:	4669      	mov	r1, sp
 800770a:	f000 fa99 	bl	8007c40 <_svfiprintf_r>
 800770e:	9b00      	ldr	r3, [sp, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	b01b      	add	sp, #108	@ 0x6c
 8007716:	f85d fb04 	ldr.w	pc, [sp], #4
 800771a:	bf00      	nop
 800771c:	ffff0208 	.word	0xffff0208

08007720 <vsiprintf>:
 8007720:	4613      	mov	r3, r2
 8007722:	460a      	mov	r2, r1
 8007724:	4601      	mov	r1, r0
 8007726:	4802      	ldr	r0, [pc, #8]	@ (8007730 <vsiprintf+0x10>)
 8007728:	6800      	ldr	r0, [r0, #0]
 800772a:	f7ff bfe3 	b.w	80076f4 <_vsiprintf_r>
 800772e:	bf00      	nop
 8007730:	20000220 	.word	0x20000220

08007734 <memset>:
 8007734:	4402      	add	r2, r0
 8007736:	4603      	mov	r3, r0
 8007738:	4293      	cmp	r3, r2
 800773a:	d100      	bne.n	800773e <memset+0xa>
 800773c:	4770      	bx	lr
 800773e:	f803 1b01 	strb.w	r1, [r3], #1
 8007742:	e7f9      	b.n	8007738 <memset+0x4>

08007744 <strncmp>:
 8007744:	b510      	push	{r4, lr}
 8007746:	b16a      	cbz	r2, 8007764 <strncmp+0x20>
 8007748:	3901      	subs	r1, #1
 800774a:	1884      	adds	r4, r0, r2
 800774c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007750:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007754:	429a      	cmp	r2, r3
 8007756:	d103      	bne.n	8007760 <strncmp+0x1c>
 8007758:	42a0      	cmp	r0, r4
 800775a:	d001      	beq.n	8007760 <strncmp+0x1c>
 800775c:	2a00      	cmp	r2, #0
 800775e:	d1f5      	bne.n	800774c <strncmp+0x8>
 8007760:	1ad0      	subs	r0, r2, r3
 8007762:	bd10      	pop	{r4, pc}
 8007764:	4610      	mov	r0, r2
 8007766:	e7fc      	b.n	8007762 <strncmp+0x1e>

08007768 <strncpy>:
 8007768:	b510      	push	{r4, lr}
 800776a:	3901      	subs	r1, #1
 800776c:	4603      	mov	r3, r0
 800776e:	b132      	cbz	r2, 800777e <strncpy+0x16>
 8007770:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007774:	f803 4b01 	strb.w	r4, [r3], #1
 8007778:	3a01      	subs	r2, #1
 800777a:	2c00      	cmp	r4, #0
 800777c:	d1f7      	bne.n	800776e <strncpy+0x6>
 800777e:	441a      	add	r2, r3
 8007780:	2100      	movs	r1, #0
 8007782:	4293      	cmp	r3, r2
 8007784:	d100      	bne.n	8007788 <strncpy+0x20>
 8007786:	bd10      	pop	{r4, pc}
 8007788:	f803 1b01 	strb.w	r1, [r3], #1
 800778c:	e7f9      	b.n	8007782 <strncpy+0x1a>
	...

08007790 <strtok>:
 8007790:	4b16      	ldr	r3, [pc, #88]	@ (80077ec <strtok+0x5c>)
 8007792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	681f      	ldr	r7, [r3, #0]
 8007798:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800779a:	4605      	mov	r5, r0
 800779c:	460e      	mov	r6, r1
 800779e:	b9ec      	cbnz	r4, 80077dc <strtok+0x4c>
 80077a0:	2050      	movs	r0, #80	@ 0x50
 80077a2:	f000 f93b 	bl	8007a1c <malloc>
 80077a6:	4602      	mov	r2, r0
 80077a8:	6478      	str	r0, [r7, #68]	@ 0x44
 80077aa:	b920      	cbnz	r0, 80077b6 <strtok+0x26>
 80077ac:	4b10      	ldr	r3, [pc, #64]	@ (80077f0 <strtok+0x60>)
 80077ae:	4811      	ldr	r0, [pc, #68]	@ (80077f4 <strtok+0x64>)
 80077b0:	215b      	movs	r1, #91	@ 0x5b
 80077b2:	f000 f8cb 	bl	800794c <__assert_func>
 80077b6:	e9c0 4400 	strd	r4, r4, [r0]
 80077ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80077be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80077c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80077c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80077ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80077ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80077d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80077d6:	6184      	str	r4, [r0, #24]
 80077d8:	7704      	strb	r4, [r0, #28]
 80077da:	6244      	str	r4, [r0, #36]	@ 0x24
 80077dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	2301      	movs	r3, #1
 80077e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	f000 b806 	b.w	80077f8 <__strtok_r>
 80077ec:	20000220 	.word	0x20000220
 80077f0:	08011e0d 	.word	0x08011e0d
 80077f4:	08011e24 	.word	0x08011e24

080077f8 <__strtok_r>:
 80077f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	b908      	cbnz	r0, 8007802 <__strtok_r+0xa>
 80077fe:	6814      	ldr	r4, [r2, #0]
 8007800:	b144      	cbz	r4, 8007814 <__strtok_r+0x1c>
 8007802:	4620      	mov	r0, r4
 8007804:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007808:	460f      	mov	r7, r1
 800780a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800780e:	b91e      	cbnz	r6, 8007818 <__strtok_r+0x20>
 8007810:	b965      	cbnz	r5, 800782c <__strtok_r+0x34>
 8007812:	6015      	str	r5, [r2, #0]
 8007814:	2000      	movs	r0, #0
 8007816:	e005      	b.n	8007824 <__strtok_r+0x2c>
 8007818:	42b5      	cmp	r5, r6
 800781a:	d1f6      	bne.n	800780a <__strtok_r+0x12>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f0      	bne.n	8007802 <__strtok_r+0xa>
 8007820:	6014      	str	r4, [r2, #0]
 8007822:	7003      	strb	r3, [r0, #0]
 8007824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007826:	461c      	mov	r4, r3
 8007828:	e00c      	b.n	8007844 <__strtok_r+0x4c>
 800782a:	b915      	cbnz	r5, 8007832 <__strtok_r+0x3a>
 800782c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007830:	460e      	mov	r6, r1
 8007832:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007836:	42ab      	cmp	r3, r5
 8007838:	d1f7      	bne.n	800782a <__strtok_r+0x32>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f3      	beq.n	8007826 <__strtok_r+0x2e>
 800783e:	2300      	movs	r3, #0
 8007840:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007844:	6014      	str	r4, [r2, #0]
 8007846:	e7ed      	b.n	8007824 <__strtok_r+0x2c>

08007848 <_close_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d06      	ldr	r5, [pc, #24]	@ (8007864 <_close_r+0x1c>)
 800784c:	2300      	movs	r3, #0
 800784e:	4604      	mov	r4, r0
 8007850:	4608      	mov	r0, r1
 8007852:	602b      	str	r3, [r5, #0]
 8007854:	f7fa fa02 	bl	8001c5c <_close>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_close_r+0x1a>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	b103      	cbz	r3, 8007862 <_close_r+0x1a>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	2000af80 	.word	0x2000af80

08007868 <_lseek_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	@ (8007888 <_lseek_r+0x20>)
 800786c:	4604      	mov	r4, r0
 800786e:	4608      	mov	r0, r1
 8007870:	4611      	mov	r1, r2
 8007872:	2200      	movs	r2, #0
 8007874:	602a      	str	r2, [r5, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f7fa fa17 	bl	8001caa <_lseek>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_lseek_r+0x1e>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_lseek_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	2000af80 	.word	0x2000af80

0800788c <_read_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d07      	ldr	r5, [pc, #28]	@ (80078ac <_read_r+0x20>)
 8007890:	4604      	mov	r4, r0
 8007892:	4608      	mov	r0, r1
 8007894:	4611      	mov	r1, r2
 8007896:	2200      	movs	r2, #0
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7fa f9a5 	bl	8001bea <_read>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_read_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_read_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	2000af80 	.word	0x2000af80

080078b0 <_write_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4d07      	ldr	r5, [pc, #28]	@ (80078d0 <_write_r+0x20>)
 80078b4:	4604      	mov	r4, r0
 80078b6:	4608      	mov	r0, r1
 80078b8:	4611      	mov	r1, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7fa f9b0 	bl	8001c24 <_write>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_write_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_write_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	2000af80 	.word	0x2000af80

080078d4 <__errno>:
 80078d4:	4b01      	ldr	r3, [pc, #4]	@ (80078dc <__errno+0x8>)
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20000220 	.word	0x20000220

080078e0 <__libc_init_array>:
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007918 <__libc_init_array+0x38>)
 80078e4:	4c0d      	ldr	r4, [pc, #52]	@ (800791c <__libc_init_array+0x3c>)
 80078e6:	1b64      	subs	r4, r4, r5
 80078e8:	10a4      	asrs	r4, r4, #2
 80078ea:	2600      	movs	r6, #0
 80078ec:	42a6      	cmp	r6, r4
 80078ee:	d109      	bne.n	8007904 <__libc_init_array+0x24>
 80078f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007920 <__libc_init_array+0x40>)
 80078f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007924 <__libc_init_array+0x44>)
 80078f4:	f000 ff44 	bl	8008780 <_init>
 80078f8:	1b64      	subs	r4, r4, r5
 80078fa:	10a4      	asrs	r4, r4, #2
 80078fc:	2600      	movs	r6, #0
 80078fe:	42a6      	cmp	r6, r4
 8007900:	d105      	bne.n	800790e <__libc_init_array+0x2e>
 8007902:	bd70      	pop	{r4, r5, r6, pc}
 8007904:	f855 3b04 	ldr.w	r3, [r5], #4
 8007908:	4798      	blx	r3
 800790a:	3601      	adds	r6, #1
 800790c:	e7ee      	b.n	80078ec <__libc_init_array+0xc>
 800790e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007912:	4798      	blx	r3
 8007914:	3601      	adds	r6, #1
 8007916:	e7f2      	b.n	80078fe <__libc_init_array+0x1e>
 8007918:	08011ef8 	.word	0x08011ef8
 800791c:	08011ef8 	.word	0x08011ef8
 8007920:	08011ef8 	.word	0x08011ef8
 8007924:	08011efc 	.word	0x08011efc

08007928 <__retarget_lock_init_recursive>:
 8007928:	4770      	bx	lr

0800792a <__retarget_lock_acquire_recursive>:
 800792a:	4770      	bx	lr

0800792c <__retarget_lock_release_recursive>:
 800792c:	4770      	bx	lr

0800792e <memcpy>:
 800792e:	440a      	add	r2, r1
 8007930:	4291      	cmp	r1, r2
 8007932:	f100 33ff 	add.w	r3, r0, #4294967295
 8007936:	d100      	bne.n	800793a <memcpy+0xc>
 8007938:	4770      	bx	lr
 800793a:	b510      	push	{r4, lr}
 800793c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007944:	4291      	cmp	r1, r2
 8007946:	d1f9      	bne.n	800793c <memcpy+0xe>
 8007948:	bd10      	pop	{r4, pc}
	...

0800794c <__assert_func>:
 800794c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800794e:	4614      	mov	r4, r2
 8007950:	461a      	mov	r2, r3
 8007952:	4b09      	ldr	r3, [pc, #36]	@ (8007978 <__assert_func+0x2c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4605      	mov	r5, r0
 8007958:	68d8      	ldr	r0, [r3, #12]
 800795a:	b954      	cbnz	r4, 8007972 <__assert_func+0x26>
 800795c:	4b07      	ldr	r3, [pc, #28]	@ (800797c <__assert_func+0x30>)
 800795e:	461c      	mov	r4, r3
 8007960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007964:	9100      	str	r1, [sp, #0]
 8007966:	462b      	mov	r3, r5
 8007968:	4905      	ldr	r1, [pc, #20]	@ (8007980 <__assert_func+0x34>)
 800796a:	f000 fbf3 	bl	8008154 <fiprintf>
 800796e:	f000 fcb1 	bl	80082d4 <abort>
 8007972:	4b04      	ldr	r3, [pc, #16]	@ (8007984 <__assert_func+0x38>)
 8007974:	e7f4      	b.n	8007960 <__assert_func+0x14>
 8007976:	bf00      	nop
 8007978:	20000220 	.word	0x20000220
 800797c:	08011eb9 	.word	0x08011eb9
 8007980:	08011e8b 	.word	0x08011e8b
 8007984:	08011e7e 	.word	0x08011e7e

08007988 <_free_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4605      	mov	r5, r0
 800798c:	2900      	cmp	r1, #0
 800798e:	d041      	beq.n	8007a14 <_free_r+0x8c>
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f0c      	subs	r4, r1, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfb8      	it	lt
 800799a:	18e4      	addlt	r4, r4, r3
 800799c:	f000 f8e8 	bl	8007b70 <__malloc_lock>
 80079a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a18 <_free_r+0x90>)
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	b933      	cbnz	r3, 80079b4 <_free_r+0x2c>
 80079a6:	6063      	str	r3, [r4, #4]
 80079a8:	6014      	str	r4, [r2, #0]
 80079aa:	4628      	mov	r0, r5
 80079ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b0:	f000 b8e4 	b.w	8007b7c <__malloc_unlock>
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d908      	bls.n	80079ca <_free_r+0x42>
 80079b8:	6820      	ldr	r0, [r4, #0]
 80079ba:	1821      	adds	r1, r4, r0
 80079bc:	428b      	cmp	r3, r1
 80079be:	bf01      	itttt	eq
 80079c0:	6819      	ldreq	r1, [r3, #0]
 80079c2:	685b      	ldreq	r3, [r3, #4]
 80079c4:	1809      	addeq	r1, r1, r0
 80079c6:	6021      	streq	r1, [r4, #0]
 80079c8:	e7ed      	b.n	80079a6 <_free_r+0x1e>
 80079ca:	461a      	mov	r2, r3
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	b10b      	cbz	r3, 80079d4 <_free_r+0x4c>
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	d9fa      	bls.n	80079ca <_free_r+0x42>
 80079d4:	6811      	ldr	r1, [r2, #0]
 80079d6:	1850      	adds	r0, r2, r1
 80079d8:	42a0      	cmp	r0, r4
 80079da:	d10b      	bne.n	80079f4 <_free_r+0x6c>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	4401      	add	r1, r0
 80079e0:	1850      	adds	r0, r2, r1
 80079e2:	4283      	cmp	r3, r0
 80079e4:	6011      	str	r1, [r2, #0]
 80079e6:	d1e0      	bne.n	80079aa <_free_r+0x22>
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	6053      	str	r3, [r2, #4]
 80079ee:	4408      	add	r0, r1
 80079f0:	6010      	str	r0, [r2, #0]
 80079f2:	e7da      	b.n	80079aa <_free_r+0x22>
 80079f4:	d902      	bls.n	80079fc <_free_r+0x74>
 80079f6:	230c      	movs	r3, #12
 80079f8:	602b      	str	r3, [r5, #0]
 80079fa:	e7d6      	b.n	80079aa <_free_r+0x22>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	1821      	adds	r1, r4, r0
 8007a00:	428b      	cmp	r3, r1
 8007a02:	bf04      	itt	eq
 8007a04:	6819      	ldreq	r1, [r3, #0]
 8007a06:	685b      	ldreq	r3, [r3, #4]
 8007a08:	6063      	str	r3, [r4, #4]
 8007a0a:	bf04      	itt	eq
 8007a0c:	1809      	addeq	r1, r1, r0
 8007a0e:	6021      	streq	r1, [r4, #0]
 8007a10:	6054      	str	r4, [r2, #4]
 8007a12:	e7ca      	b.n	80079aa <_free_r+0x22>
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	bf00      	nop
 8007a18:	2000af8c 	.word	0x2000af8c

08007a1c <malloc>:
 8007a1c:	4b02      	ldr	r3, [pc, #8]	@ (8007a28 <malloc+0xc>)
 8007a1e:	4601      	mov	r1, r0
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	f000 b825 	b.w	8007a70 <_malloc_r>
 8007a26:	bf00      	nop
 8007a28:	20000220 	.word	0x20000220

08007a2c <sbrk_aligned>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a6c <sbrk_aligned+0x40>)
 8007a30:	460c      	mov	r4, r1
 8007a32:	6831      	ldr	r1, [r6, #0]
 8007a34:	4605      	mov	r5, r0
 8007a36:	b911      	cbnz	r1, 8007a3e <sbrk_aligned+0x12>
 8007a38:	f000 fc3c 	bl	80082b4 <_sbrk_r>
 8007a3c:	6030      	str	r0, [r6, #0]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 fc37 	bl	80082b4 <_sbrk_r>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d103      	bne.n	8007a52 <sbrk_aligned+0x26>
 8007a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a4e:	4620      	mov	r0, r4
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	1cc4      	adds	r4, r0, #3
 8007a54:	f024 0403 	bic.w	r4, r4, #3
 8007a58:	42a0      	cmp	r0, r4
 8007a5a:	d0f8      	beq.n	8007a4e <sbrk_aligned+0x22>
 8007a5c:	1a21      	subs	r1, r4, r0
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 fc28 	bl	80082b4 <_sbrk_r>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d1f2      	bne.n	8007a4e <sbrk_aligned+0x22>
 8007a68:	e7ef      	b.n	8007a4a <sbrk_aligned+0x1e>
 8007a6a:	bf00      	nop
 8007a6c:	2000af88 	.word	0x2000af88

08007a70 <_malloc_r>:
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	1ccd      	adds	r5, r1, #3
 8007a76:	f025 0503 	bic.w	r5, r5, #3
 8007a7a:	3508      	adds	r5, #8
 8007a7c:	2d0c      	cmp	r5, #12
 8007a7e:	bf38      	it	cc
 8007a80:	250c      	movcc	r5, #12
 8007a82:	2d00      	cmp	r5, #0
 8007a84:	4606      	mov	r6, r0
 8007a86:	db01      	blt.n	8007a8c <_malloc_r+0x1c>
 8007a88:	42a9      	cmp	r1, r5
 8007a8a:	d904      	bls.n	8007a96 <_malloc_r+0x26>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	6033      	str	r3, [r6, #0]
 8007a90:	2000      	movs	r0, #0
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b6c <_malloc_r+0xfc>
 8007a9a:	f000 f869 	bl	8007b70 <__malloc_lock>
 8007a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	bb44      	cbnz	r4, 8007af8 <_malloc_r+0x88>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff ffbf 	bl	8007a2c <sbrk_aligned>
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	d158      	bne.n	8007b66 <_malloc_r+0xf6>
 8007ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ab8:	4627      	mov	r7, r4
 8007aba:	2f00      	cmp	r7, #0
 8007abc:	d143      	bne.n	8007b46 <_malloc_r+0xd6>
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	d04b      	beq.n	8007b5a <_malloc_r+0xea>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	eb04 0903 	add.w	r9, r4, r3
 8007acc:	f000 fbf2 	bl	80082b4 <_sbrk_r>
 8007ad0:	4581      	cmp	r9, r0
 8007ad2:	d142      	bne.n	8007b5a <_malloc_r+0xea>
 8007ad4:	6821      	ldr	r1, [r4, #0]
 8007ad6:	1a6d      	subs	r5, r5, r1
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ffa6 	bl	8007a2c <sbrk_aligned>
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d03a      	beq.n	8007b5a <_malloc_r+0xea>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	442b      	add	r3, r5
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	f8d8 3000 	ldr.w	r3, [r8]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	bb62      	cbnz	r2, 8007b4c <_malloc_r+0xdc>
 8007af2:	f8c8 7000 	str.w	r7, [r8]
 8007af6:	e00f      	b.n	8007b18 <_malloc_r+0xa8>
 8007af8:	6822      	ldr	r2, [r4, #0]
 8007afa:	1b52      	subs	r2, r2, r5
 8007afc:	d420      	bmi.n	8007b40 <_malloc_r+0xd0>
 8007afe:	2a0b      	cmp	r2, #11
 8007b00:	d917      	bls.n	8007b32 <_malloc_r+0xc2>
 8007b02:	1961      	adds	r1, r4, r5
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	6025      	str	r5, [r4, #0]
 8007b08:	bf18      	it	ne
 8007b0a:	6059      	strne	r1, [r3, #4]
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	bf08      	it	eq
 8007b10:	f8c8 1000 	streq.w	r1, [r8]
 8007b14:	5162      	str	r2, [r4, r5]
 8007b16:	604b      	str	r3, [r1, #4]
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 f82f 	bl	8007b7c <__malloc_unlock>
 8007b1e:	f104 000b 	add.w	r0, r4, #11
 8007b22:	1d23      	adds	r3, r4, #4
 8007b24:	f020 0007 	bic.w	r0, r0, #7
 8007b28:	1ac2      	subs	r2, r0, r3
 8007b2a:	bf1c      	itt	ne
 8007b2c:	1a1b      	subne	r3, r3, r0
 8007b2e:	50a3      	strne	r3, [r4, r2]
 8007b30:	e7af      	b.n	8007a92 <_malloc_r+0x22>
 8007b32:	6862      	ldr	r2, [r4, #4]
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	bf0c      	ite	eq
 8007b38:	f8c8 2000 	streq.w	r2, [r8]
 8007b3c:	605a      	strne	r2, [r3, #4]
 8007b3e:	e7eb      	b.n	8007b18 <_malloc_r+0xa8>
 8007b40:	4623      	mov	r3, r4
 8007b42:	6864      	ldr	r4, [r4, #4]
 8007b44:	e7ae      	b.n	8007aa4 <_malloc_r+0x34>
 8007b46:	463c      	mov	r4, r7
 8007b48:	687f      	ldr	r7, [r7, #4]
 8007b4a:	e7b6      	b.n	8007aba <_malloc_r+0x4a>
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	d1fb      	bne.n	8007b4c <_malloc_r+0xdc>
 8007b54:	2300      	movs	r3, #0
 8007b56:	6053      	str	r3, [r2, #4]
 8007b58:	e7de      	b.n	8007b18 <_malloc_r+0xa8>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	6033      	str	r3, [r6, #0]
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f000 f80c 	bl	8007b7c <__malloc_unlock>
 8007b64:	e794      	b.n	8007a90 <_malloc_r+0x20>
 8007b66:	6005      	str	r5, [r0, #0]
 8007b68:	e7d6      	b.n	8007b18 <_malloc_r+0xa8>
 8007b6a:	bf00      	nop
 8007b6c:	2000af8c 	.word	0x2000af8c

08007b70 <__malloc_lock>:
 8007b70:	4801      	ldr	r0, [pc, #4]	@ (8007b78 <__malloc_lock+0x8>)
 8007b72:	f7ff beda 	b.w	800792a <__retarget_lock_acquire_recursive>
 8007b76:	bf00      	nop
 8007b78:	2000af84 	.word	0x2000af84

08007b7c <__malloc_unlock>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	@ (8007b84 <__malloc_unlock+0x8>)
 8007b7e:	f7ff bed5 	b.w	800792c <__retarget_lock_release_recursive>
 8007b82:	bf00      	nop
 8007b84:	2000af84 	.word	0x2000af84

08007b88 <__ssputs_r>:
 8007b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8c:	688e      	ldr	r6, [r1, #8]
 8007b8e:	461f      	mov	r7, r3
 8007b90:	42be      	cmp	r6, r7
 8007b92:	680b      	ldr	r3, [r1, #0]
 8007b94:	4682      	mov	sl, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	4690      	mov	r8, r2
 8007b9a:	d82d      	bhi.n	8007bf8 <__ssputs_r+0x70>
 8007b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ba0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ba4:	d026      	beq.n	8007bf4 <__ssputs_r+0x6c>
 8007ba6:	6965      	ldr	r5, [r4, #20]
 8007ba8:	6909      	ldr	r1, [r1, #16]
 8007baa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bae:	eba3 0901 	sub.w	r9, r3, r1
 8007bb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bb6:	1c7b      	adds	r3, r7, #1
 8007bb8:	444b      	add	r3, r9
 8007bba:	106d      	asrs	r5, r5, #1
 8007bbc:	429d      	cmp	r5, r3
 8007bbe:	bf38      	it	cc
 8007bc0:	461d      	movcc	r5, r3
 8007bc2:	0553      	lsls	r3, r2, #21
 8007bc4:	d527      	bpl.n	8007c16 <__ssputs_r+0x8e>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7ff ff52 	bl	8007a70 <_malloc_r>
 8007bcc:	4606      	mov	r6, r0
 8007bce:	b360      	cbz	r0, 8007c2a <__ssputs_r+0xa2>
 8007bd0:	6921      	ldr	r1, [r4, #16]
 8007bd2:	464a      	mov	r2, r9
 8007bd4:	f7ff feab 	bl	800792e <memcpy>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	6126      	str	r6, [r4, #16]
 8007be6:	6165      	str	r5, [r4, #20]
 8007be8:	444e      	add	r6, r9
 8007bea:	eba5 0509 	sub.w	r5, r5, r9
 8007bee:	6026      	str	r6, [r4, #0]
 8007bf0:	60a5      	str	r5, [r4, #8]
 8007bf2:	463e      	mov	r6, r7
 8007bf4:	42be      	cmp	r6, r7
 8007bf6:	d900      	bls.n	8007bfa <__ssputs_r+0x72>
 8007bf8:	463e      	mov	r6, r7
 8007bfa:	6820      	ldr	r0, [r4, #0]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4641      	mov	r1, r8
 8007c00:	f000 fb1c 	bl	800823c <memmove>
 8007c04:	68a3      	ldr	r3, [r4, #8]
 8007c06:	1b9b      	subs	r3, r3, r6
 8007c08:	60a3      	str	r3, [r4, #8]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	4433      	add	r3, r6
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	2000      	movs	r0, #0
 8007c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c16:	462a      	mov	r2, r5
 8007c18:	f000 fb63 	bl	80082e2 <_realloc_r>
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d1e0      	bne.n	8007be4 <__ssputs_r+0x5c>
 8007c22:	6921      	ldr	r1, [r4, #16]
 8007c24:	4650      	mov	r0, sl
 8007c26:	f7ff feaf 	bl	8007988 <_free_r>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	f8ca 3000 	str.w	r3, [sl]
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	e7e9      	b.n	8007c12 <__ssputs_r+0x8a>
	...

08007c40 <_svfiprintf_r>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4698      	mov	r8, r3
 8007c46:	898b      	ldrh	r3, [r1, #12]
 8007c48:	061b      	lsls	r3, r3, #24
 8007c4a:	b09d      	sub	sp, #116	@ 0x74
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	460d      	mov	r5, r1
 8007c50:	4614      	mov	r4, r2
 8007c52:	d510      	bpl.n	8007c76 <_svfiprintf_r+0x36>
 8007c54:	690b      	ldr	r3, [r1, #16]
 8007c56:	b973      	cbnz	r3, 8007c76 <_svfiprintf_r+0x36>
 8007c58:	2140      	movs	r1, #64	@ 0x40
 8007c5a:	f7ff ff09 	bl	8007a70 <_malloc_r>
 8007c5e:	6028      	str	r0, [r5, #0]
 8007c60:	6128      	str	r0, [r5, #16]
 8007c62:	b930      	cbnz	r0, 8007c72 <_svfiprintf_r+0x32>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	b01d      	add	sp, #116	@ 0x74
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	2340      	movs	r3, #64	@ 0x40
 8007c74:	616b      	str	r3, [r5, #20]
 8007c76:	2300      	movs	r3, #0
 8007c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7a:	2320      	movs	r3, #32
 8007c7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c84:	2330      	movs	r3, #48	@ 0x30
 8007c86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e24 <_svfiprintf_r+0x1e4>
 8007c8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c8e:	f04f 0901 	mov.w	r9, #1
 8007c92:	4623      	mov	r3, r4
 8007c94:	469a      	mov	sl, r3
 8007c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c9a:	b10a      	cbz	r2, 8007ca0 <_svfiprintf_r+0x60>
 8007c9c:	2a25      	cmp	r2, #37	@ 0x25
 8007c9e:	d1f9      	bne.n	8007c94 <_svfiprintf_r+0x54>
 8007ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca4:	d00b      	beq.n	8007cbe <_svfiprintf_r+0x7e>
 8007ca6:	465b      	mov	r3, fp
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4629      	mov	r1, r5
 8007cac:	4638      	mov	r0, r7
 8007cae:	f7ff ff6b 	bl	8007b88 <__ssputs_r>
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	f000 80a7 	beq.w	8007e06 <_svfiprintf_r+0x1c6>
 8007cb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cba:	445a      	add	r2, fp
 8007cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 809f 	beq.w	8007e06 <_svfiprintf_r+0x1c6>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295
 8007cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd2:	f10a 0a01 	add.w	sl, sl, #1
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	9307      	str	r3, [sp, #28]
 8007cda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cde:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce0:	4654      	mov	r4, sl
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce8:	484e      	ldr	r0, [pc, #312]	@ (8007e24 <_svfiprintf_r+0x1e4>)
 8007cea:	f7f8 fa89 	bl	8000200 <memchr>
 8007cee:	9a04      	ldr	r2, [sp, #16]
 8007cf0:	b9d8      	cbnz	r0, 8007d2a <_svfiprintf_r+0xea>
 8007cf2:	06d0      	lsls	r0, r2, #27
 8007cf4:	bf44      	itt	mi
 8007cf6:	2320      	movmi	r3, #32
 8007cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cfc:	0711      	lsls	r1, r2, #28
 8007cfe:	bf44      	itt	mi
 8007d00:	232b      	movmi	r3, #43	@ 0x2b
 8007d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d06:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d0c:	d015      	beq.n	8007d3a <_svfiprintf_r+0xfa>
 8007d0e:	9a07      	ldr	r2, [sp, #28]
 8007d10:	4654      	mov	r4, sl
 8007d12:	2000      	movs	r0, #0
 8007d14:	f04f 0c0a 	mov.w	ip, #10
 8007d18:	4621      	mov	r1, r4
 8007d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d1e:	3b30      	subs	r3, #48	@ 0x30
 8007d20:	2b09      	cmp	r3, #9
 8007d22:	d94b      	bls.n	8007dbc <_svfiprintf_r+0x17c>
 8007d24:	b1b0      	cbz	r0, 8007d54 <_svfiprintf_r+0x114>
 8007d26:	9207      	str	r2, [sp, #28]
 8007d28:	e014      	b.n	8007d54 <_svfiprintf_r+0x114>
 8007d2a:	eba0 0308 	sub.w	r3, r0, r8
 8007d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d32:	4313      	orrs	r3, r2
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	46a2      	mov	sl, r4
 8007d38:	e7d2      	b.n	8007ce0 <_svfiprintf_r+0xa0>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	1d19      	adds	r1, r3, #4
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	9103      	str	r1, [sp, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bfbb      	ittet	lt
 8007d46:	425b      	neglt	r3, r3
 8007d48:	f042 0202 	orrlt.w	r2, r2, #2
 8007d4c:	9307      	strge	r3, [sp, #28]
 8007d4e:	9307      	strlt	r3, [sp, #28]
 8007d50:	bfb8      	it	lt
 8007d52:	9204      	strlt	r2, [sp, #16]
 8007d54:	7823      	ldrb	r3, [r4, #0]
 8007d56:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d58:	d10a      	bne.n	8007d70 <_svfiprintf_r+0x130>
 8007d5a:	7863      	ldrb	r3, [r4, #1]
 8007d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d5e:	d132      	bne.n	8007dc6 <_svfiprintf_r+0x186>
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	1d1a      	adds	r2, r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	9203      	str	r2, [sp, #12]
 8007d68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d6c:	3402      	adds	r4, #2
 8007d6e:	9305      	str	r3, [sp, #20]
 8007d70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e34 <_svfiprintf_r+0x1f4>
 8007d74:	7821      	ldrb	r1, [r4, #0]
 8007d76:	2203      	movs	r2, #3
 8007d78:	4650      	mov	r0, sl
 8007d7a:	f7f8 fa41 	bl	8000200 <memchr>
 8007d7e:	b138      	cbz	r0, 8007d90 <_svfiprintf_r+0x150>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	eba0 000a 	sub.w	r0, r0, sl
 8007d86:	2240      	movs	r2, #64	@ 0x40
 8007d88:	4082      	lsls	r2, r0
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	3401      	adds	r4, #1
 8007d8e:	9304      	str	r3, [sp, #16]
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	4824      	ldr	r0, [pc, #144]	@ (8007e28 <_svfiprintf_r+0x1e8>)
 8007d96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d9a:	2206      	movs	r2, #6
 8007d9c:	f7f8 fa30 	bl	8000200 <memchr>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d036      	beq.n	8007e12 <_svfiprintf_r+0x1d2>
 8007da4:	4b21      	ldr	r3, [pc, #132]	@ (8007e2c <_svfiprintf_r+0x1ec>)
 8007da6:	bb1b      	cbnz	r3, 8007df0 <_svfiprintf_r+0x1b0>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	3307      	adds	r3, #7
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	3308      	adds	r3, #8
 8007db2:	9303      	str	r3, [sp, #12]
 8007db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db6:	4433      	add	r3, r6
 8007db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dba:	e76a      	b.n	8007c92 <_svfiprintf_r+0x52>
 8007dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e7a8      	b.n	8007d18 <_svfiprintf_r+0xd8>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	3401      	adds	r4, #1
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f04f 0c0a 	mov.w	ip, #10
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd8:	3a30      	subs	r2, #48	@ 0x30
 8007dda:	2a09      	cmp	r2, #9
 8007ddc:	d903      	bls.n	8007de6 <_svfiprintf_r+0x1a6>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0c6      	beq.n	8007d70 <_svfiprintf_r+0x130>
 8007de2:	9105      	str	r1, [sp, #20]
 8007de4:	e7c4      	b.n	8007d70 <_svfiprintf_r+0x130>
 8007de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dea:	4604      	mov	r4, r0
 8007dec:	2301      	movs	r3, #1
 8007dee:	e7f0      	b.n	8007dd2 <_svfiprintf_r+0x192>
 8007df0:	ab03      	add	r3, sp, #12
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	462a      	mov	r2, r5
 8007df6:	4b0e      	ldr	r3, [pc, #56]	@ (8007e30 <_svfiprintf_r+0x1f0>)
 8007df8:	a904      	add	r1, sp, #16
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	f3af 8000 	nop.w
 8007e00:	1c42      	adds	r2, r0, #1
 8007e02:	4606      	mov	r6, r0
 8007e04:	d1d6      	bne.n	8007db4 <_svfiprintf_r+0x174>
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	065b      	lsls	r3, r3, #25
 8007e0a:	f53f af2d 	bmi.w	8007c68 <_svfiprintf_r+0x28>
 8007e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e10:	e72c      	b.n	8007c6c <_svfiprintf_r+0x2c>
 8007e12:	ab03      	add	r3, sp, #12
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	462a      	mov	r2, r5
 8007e18:	4b05      	ldr	r3, [pc, #20]	@ (8007e30 <_svfiprintf_r+0x1f0>)
 8007e1a:	a904      	add	r1, sp, #16
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f000 f879 	bl	8007f14 <_printf_i>
 8007e22:	e7ed      	b.n	8007e00 <_svfiprintf_r+0x1c0>
 8007e24:	08011eba 	.word	0x08011eba
 8007e28:	08011ec4 	.word	0x08011ec4
 8007e2c:	00000000 	.word	0x00000000
 8007e30:	08007b89 	.word	0x08007b89
 8007e34:	08011ec0 	.word	0x08011ec0

08007e38 <_printf_common>:
 8007e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	4698      	mov	r8, r3
 8007e40:	688a      	ldr	r2, [r1, #8]
 8007e42:	690b      	ldr	r3, [r1, #16]
 8007e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	bfb8      	it	lt
 8007e4c:	4613      	movlt	r3, r2
 8007e4e:	6033      	str	r3, [r6, #0]
 8007e50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e54:	4607      	mov	r7, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	b10a      	cbz	r2, 8007e5e <_printf_common+0x26>
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	6033      	str	r3, [r6, #0]
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	0699      	lsls	r1, r3, #26
 8007e62:	bf42      	ittt	mi
 8007e64:	6833      	ldrmi	r3, [r6, #0]
 8007e66:	3302      	addmi	r3, #2
 8007e68:	6033      	strmi	r3, [r6, #0]
 8007e6a:	6825      	ldr	r5, [r4, #0]
 8007e6c:	f015 0506 	ands.w	r5, r5, #6
 8007e70:	d106      	bne.n	8007e80 <_printf_common+0x48>
 8007e72:	f104 0a19 	add.w	sl, r4, #25
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	6832      	ldr	r2, [r6, #0]
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	42ab      	cmp	r3, r5
 8007e7e:	dc26      	bgt.n	8007ece <_printf_common+0x96>
 8007e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	3b00      	subs	r3, #0
 8007e88:	bf18      	it	ne
 8007e8a:	2301      	movne	r3, #1
 8007e8c:	0692      	lsls	r2, r2, #26
 8007e8e:	d42b      	bmi.n	8007ee8 <_printf_common+0xb0>
 8007e90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e94:	4641      	mov	r1, r8
 8007e96:	4638      	mov	r0, r7
 8007e98:	47c8      	blx	r9
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d01e      	beq.n	8007edc <_printf_common+0xa4>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	6922      	ldr	r2, [r4, #16]
 8007ea2:	f003 0306 	and.w	r3, r3, #6
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	bf02      	ittt	eq
 8007eaa:	68e5      	ldreq	r5, [r4, #12]
 8007eac:	6833      	ldreq	r3, [r6, #0]
 8007eae:	1aed      	subeq	r5, r5, r3
 8007eb0:	68a3      	ldr	r3, [r4, #8]
 8007eb2:	bf0c      	ite	eq
 8007eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb8:	2500      	movne	r5, #0
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	bfc4      	itt	gt
 8007ebe:	1a9b      	subgt	r3, r3, r2
 8007ec0:	18ed      	addgt	r5, r5, r3
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	341a      	adds	r4, #26
 8007ec6:	42b5      	cmp	r5, r6
 8007ec8:	d11a      	bne.n	8007f00 <_printf_common+0xc8>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e008      	b.n	8007ee0 <_printf_common+0xa8>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	4652      	mov	r2, sl
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	47c8      	blx	r9
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d103      	bne.n	8007ee4 <_printf_common+0xac>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	e7c6      	b.n	8007e76 <_printf_common+0x3e>
 8007ee8:	18e1      	adds	r1, r4, r3
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	2030      	movs	r0, #48	@ 0x30
 8007eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ef2:	4422      	add	r2, r4
 8007ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007efc:	3302      	adds	r3, #2
 8007efe:	e7c7      	b.n	8007e90 <_printf_common+0x58>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4622      	mov	r2, r4
 8007f04:	4641      	mov	r1, r8
 8007f06:	4638      	mov	r0, r7
 8007f08:	47c8      	blx	r9
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d0e6      	beq.n	8007edc <_printf_common+0xa4>
 8007f0e:	3601      	adds	r6, #1
 8007f10:	e7d9      	b.n	8007ec6 <_printf_common+0x8e>
	...

08007f14 <_printf_i>:
 8007f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	7e0f      	ldrb	r7, [r1, #24]
 8007f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f1c:	2f78      	cmp	r7, #120	@ 0x78
 8007f1e:	4691      	mov	r9, r2
 8007f20:	4680      	mov	r8, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	469a      	mov	sl, r3
 8007f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f2a:	d807      	bhi.n	8007f3c <_printf_i+0x28>
 8007f2c:	2f62      	cmp	r7, #98	@ 0x62
 8007f2e:	d80a      	bhi.n	8007f46 <_printf_i+0x32>
 8007f30:	2f00      	cmp	r7, #0
 8007f32:	f000 80d2 	beq.w	80080da <_printf_i+0x1c6>
 8007f36:	2f58      	cmp	r7, #88	@ 0x58
 8007f38:	f000 80b9 	beq.w	80080ae <_printf_i+0x19a>
 8007f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f44:	e03a      	b.n	8007fbc <_printf_i+0xa8>
 8007f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f4a:	2b15      	cmp	r3, #21
 8007f4c:	d8f6      	bhi.n	8007f3c <_printf_i+0x28>
 8007f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8007f54 <_printf_i+0x40>)
 8007f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f54:	08007fad 	.word	0x08007fad
 8007f58:	08007fc1 	.word	0x08007fc1
 8007f5c:	08007f3d 	.word	0x08007f3d
 8007f60:	08007f3d 	.word	0x08007f3d
 8007f64:	08007f3d 	.word	0x08007f3d
 8007f68:	08007f3d 	.word	0x08007f3d
 8007f6c:	08007fc1 	.word	0x08007fc1
 8007f70:	08007f3d 	.word	0x08007f3d
 8007f74:	08007f3d 	.word	0x08007f3d
 8007f78:	08007f3d 	.word	0x08007f3d
 8007f7c:	08007f3d 	.word	0x08007f3d
 8007f80:	080080c1 	.word	0x080080c1
 8007f84:	08007feb 	.word	0x08007feb
 8007f88:	0800807b 	.word	0x0800807b
 8007f8c:	08007f3d 	.word	0x08007f3d
 8007f90:	08007f3d 	.word	0x08007f3d
 8007f94:	080080e3 	.word	0x080080e3
 8007f98:	08007f3d 	.word	0x08007f3d
 8007f9c:	08007feb 	.word	0x08007feb
 8007fa0:	08007f3d 	.word	0x08007f3d
 8007fa4:	08007f3d 	.word	0x08007f3d
 8007fa8:	08008083 	.word	0x08008083
 8007fac:	6833      	ldr	r3, [r6, #0]
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6032      	str	r2, [r6, #0]
 8007fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e09d      	b.n	80080fc <_printf_i+0x1e8>
 8007fc0:	6833      	ldr	r3, [r6, #0]
 8007fc2:	6820      	ldr	r0, [r4, #0]
 8007fc4:	1d19      	adds	r1, r3, #4
 8007fc6:	6031      	str	r1, [r6, #0]
 8007fc8:	0606      	lsls	r6, r0, #24
 8007fca:	d501      	bpl.n	8007fd0 <_printf_i+0xbc>
 8007fcc:	681d      	ldr	r5, [r3, #0]
 8007fce:	e003      	b.n	8007fd8 <_printf_i+0xc4>
 8007fd0:	0645      	lsls	r5, r0, #25
 8007fd2:	d5fb      	bpl.n	8007fcc <_printf_i+0xb8>
 8007fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	da03      	bge.n	8007fe4 <_printf_i+0xd0>
 8007fdc:	232d      	movs	r3, #45	@ 0x2d
 8007fde:	426d      	negs	r5, r5
 8007fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fe4:	4859      	ldr	r0, [pc, #356]	@ (800814c <_printf_i+0x238>)
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	e011      	b.n	800800e <_printf_i+0xfa>
 8007fea:	6821      	ldr	r1, [r4, #0]
 8007fec:	6833      	ldr	r3, [r6, #0]
 8007fee:	0608      	lsls	r0, r1, #24
 8007ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ff4:	d402      	bmi.n	8007ffc <_printf_i+0xe8>
 8007ff6:	0649      	lsls	r1, r1, #25
 8007ff8:	bf48      	it	mi
 8007ffa:	b2ad      	uxthmi	r5, r5
 8007ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ffe:	4853      	ldr	r0, [pc, #332]	@ (800814c <_printf_i+0x238>)
 8008000:	6033      	str	r3, [r6, #0]
 8008002:	bf14      	ite	ne
 8008004:	230a      	movne	r3, #10
 8008006:	2308      	moveq	r3, #8
 8008008:	2100      	movs	r1, #0
 800800a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800800e:	6866      	ldr	r6, [r4, #4]
 8008010:	60a6      	str	r6, [r4, #8]
 8008012:	2e00      	cmp	r6, #0
 8008014:	bfa2      	ittt	ge
 8008016:	6821      	ldrge	r1, [r4, #0]
 8008018:	f021 0104 	bicge.w	r1, r1, #4
 800801c:	6021      	strge	r1, [r4, #0]
 800801e:	b90d      	cbnz	r5, 8008024 <_printf_i+0x110>
 8008020:	2e00      	cmp	r6, #0
 8008022:	d04b      	beq.n	80080bc <_printf_i+0x1a8>
 8008024:	4616      	mov	r6, r2
 8008026:	fbb5 f1f3 	udiv	r1, r5, r3
 800802a:	fb03 5711 	mls	r7, r3, r1, r5
 800802e:	5dc7      	ldrb	r7, [r0, r7]
 8008030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008034:	462f      	mov	r7, r5
 8008036:	42bb      	cmp	r3, r7
 8008038:	460d      	mov	r5, r1
 800803a:	d9f4      	bls.n	8008026 <_printf_i+0x112>
 800803c:	2b08      	cmp	r3, #8
 800803e:	d10b      	bne.n	8008058 <_printf_i+0x144>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	07df      	lsls	r7, r3, #31
 8008044:	d508      	bpl.n	8008058 <_printf_i+0x144>
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	6861      	ldr	r1, [r4, #4]
 800804a:	4299      	cmp	r1, r3
 800804c:	bfde      	ittt	le
 800804e:	2330      	movle	r3, #48	@ 0x30
 8008050:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008054:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008058:	1b92      	subs	r2, r2, r6
 800805a:	6122      	str	r2, [r4, #16]
 800805c:	f8cd a000 	str.w	sl, [sp]
 8008060:	464b      	mov	r3, r9
 8008062:	aa03      	add	r2, sp, #12
 8008064:	4621      	mov	r1, r4
 8008066:	4640      	mov	r0, r8
 8008068:	f7ff fee6 	bl	8007e38 <_printf_common>
 800806c:	3001      	adds	r0, #1
 800806e:	d14a      	bne.n	8008106 <_printf_i+0x1f2>
 8008070:	f04f 30ff 	mov.w	r0, #4294967295
 8008074:	b004      	add	sp, #16
 8008076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	f043 0320 	orr.w	r3, r3, #32
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	4833      	ldr	r0, [pc, #204]	@ (8008150 <_printf_i+0x23c>)
 8008084:	2778      	movs	r7, #120	@ 0x78
 8008086:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	6831      	ldr	r1, [r6, #0]
 800808e:	061f      	lsls	r7, r3, #24
 8008090:	f851 5b04 	ldr.w	r5, [r1], #4
 8008094:	d402      	bmi.n	800809c <_printf_i+0x188>
 8008096:	065f      	lsls	r7, r3, #25
 8008098:	bf48      	it	mi
 800809a:	b2ad      	uxthmi	r5, r5
 800809c:	6031      	str	r1, [r6, #0]
 800809e:	07d9      	lsls	r1, r3, #31
 80080a0:	bf44      	itt	mi
 80080a2:	f043 0320 	orrmi.w	r3, r3, #32
 80080a6:	6023      	strmi	r3, [r4, #0]
 80080a8:	b11d      	cbz	r5, 80080b2 <_printf_i+0x19e>
 80080aa:	2310      	movs	r3, #16
 80080ac:	e7ac      	b.n	8008008 <_printf_i+0xf4>
 80080ae:	4827      	ldr	r0, [pc, #156]	@ (800814c <_printf_i+0x238>)
 80080b0:	e7e9      	b.n	8008086 <_printf_i+0x172>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	f023 0320 	bic.w	r3, r3, #32
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	e7f6      	b.n	80080aa <_printf_i+0x196>
 80080bc:	4616      	mov	r6, r2
 80080be:	e7bd      	b.n	800803c <_printf_i+0x128>
 80080c0:	6833      	ldr	r3, [r6, #0]
 80080c2:	6825      	ldr	r5, [r4, #0]
 80080c4:	6961      	ldr	r1, [r4, #20]
 80080c6:	1d18      	adds	r0, r3, #4
 80080c8:	6030      	str	r0, [r6, #0]
 80080ca:	062e      	lsls	r6, r5, #24
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	d501      	bpl.n	80080d4 <_printf_i+0x1c0>
 80080d0:	6019      	str	r1, [r3, #0]
 80080d2:	e002      	b.n	80080da <_printf_i+0x1c6>
 80080d4:	0668      	lsls	r0, r5, #25
 80080d6:	d5fb      	bpl.n	80080d0 <_printf_i+0x1bc>
 80080d8:	8019      	strh	r1, [r3, #0]
 80080da:	2300      	movs	r3, #0
 80080dc:	6123      	str	r3, [r4, #16]
 80080de:	4616      	mov	r6, r2
 80080e0:	e7bc      	b.n	800805c <_printf_i+0x148>
 80080e2:	6833      	ldr	r3, [r6, #0]
 80080e4:	1d1a      	adds	r2, r3, #4
 80080e6:	6032      	str	r2, [r6, #0]
 80080e8:	681e      	ldr	r6, [r3, #0]
 80080ea:	6862      	ldr	r2, [r4, #4]
 80080ec:	2100      	movs	r1, #0
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7f8 f886 	bl	8000200 <memchr>
 80080f4:	b108      	cbz	r0, 80080fa <_printf_i+0x1e6>
 80080f6:	1b80      	subs	r0, r0, r6
 80080f8:	6060      	str	r0, [r4, #4]
 80080fa:	6863      	ldr	r3, [r4, #4]
 80080fc:	6123      	str	r3, [r4, #16]
 80080fe:	2300      	movs	r3, #0
 8008100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008104:	e7aa      	b.n	800805c <_printf_i+0x148>
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	4632      	mov	r2, r6
 800810a:	4649      	mov	r1, r9
 800810c:	4640      	mov	r0, r8
 800810e:	47d0      	blx	sl
 8008110:	3001      	adds	r0, #1
 8008112:	d0ad      	beq.n	8008070 <_printf_i+0x15c>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	079b      	lsls	r3, r3, #30
 8008118:	d413      	bmi.n	8008142 <_printf_i+0x22e>
 800811a:	68e0      	ldr	r0, [r4, #12]
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	4298      	cmp	r0, r3
 8008120:	bfb8      	it	lt
 8008122:	4618      	movlt	r0, r3
 8008124:	e7a6      	b.n	8008074 <_printf_i+0x160>
 8008126:	2301      	movs	r3, #1
 8008128:	4632      	mov	r2, r6
 800812a:	4649      	mov	r1, r9
 800812c:	4640      	mov	r0, r8
 800812e:	47d0      	blx	sl
 8008130:	3001      	adds	r0, #1
 8008132:	d09d      	beq.n	8008070 <_printf_i+0x15c>
 8008134:	3501      	adds	r5, #1
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	9903      	ldr	r1, [sp, #12]
 800813a:	1a5b      	subs	r3, r3, r1
 800813c:	42ab      	cmp	r3, r5
 800813e:	dcf2      	bgt.n	8008126 <_printf_i+0x212>
 8008140:	e7eb      	b.n	800811a <_printf_i+0x206>
 8008142:	2500      	movs	r5, #0
 8008144:	f104 0619 	add.w	r6, r4, #25
 8008148:	e7f5      	b.n	8008136 <_printf_i+0x222>
 800814a:	bf00      	nop
 800814c:	08011ecb 	.word	0x08011ecb
 8008150:	08011edc 	.word	0x08011edc

08008154 <fiprintf>:
 8008154:	b40e      	push	{r1, r2, r3}
 8008156:	b503      	push	{r0, r1, lr}
 8008158:	4601      	mov	r1, r0
 800815a:	ab03      	add	r3, sp, #12
 800815c:	4805      	ldr	r0, [pc, #20]	@ (8008174 <fiprintf+0x20>)
 800815e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008162:	6800      	ldr	r0, [r0, #0]
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	f000 f913 	bl	8008390 <_vfiprintf_r>
 800816a:	b002      	add	sp, #8
 800816c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008170:	b003      	add	sp, #12
 8008172:	4770      	bx	lr
 8008174:	20000220 	.word	0x20000220

08008178 <__swhatbuf_r>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	460c      	mov	r4, r1
 800817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008180:	2900      	cmp	r1, #0
 8008182:	b096      	sub	sp, #88	@ 0x58
 8008184:	4615      	mov	r5, r2
 8008186:	461e      	mov	r6, r3
 8008188:	da0d      	bge.n	80081a6 <__swhatbuf_r+0x2e>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008190:	f04f 0100 	mov.w	r1, #0
 8008194:	bf14      	ite	ne
 8008196:	2340      	movne	r3, #64	@ 0x40
 8008198:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800819c:	2000      	movs	r0, #0
 800819e:	6031      	str	r1, [r6, #0]
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	b016      	add	sp, #88	@ 0x58
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	466a      	mov	r2, sp
 80081a8:	f000 f862 	bl	8008270 <_fstat_r>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	dbec      	blt.n	800818a <__swhatbuf_r+0x12>
 80081b0:	9901      	ldr	r1, [sp, #4]
 80081b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081ba:	4259      	negs	r1, r3
 80081bc:	4159      	adcs	r1, r3
 80081be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081c2:	e7eb      	b.n	800819c <__swhatbuf_r+0x24>

080081c4 <__smakebuf_r>:
 80081c4:	898b      	ldrh	r3, [r1, #12]
 80081c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081c8:	079d      	lsls	r5, r3, #30
 80081ca:	4606      	mov	r6, r0
 80081cc:	460c      	mov	r4, r1
 80081ce:	d507      	bpl.n	80081e0 <__smakebuf_r+0x1c>
 80081d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	2301      	movs	r3, #1
 80081da:	6163      	str	r3, [r4, #20]
 80081dc:	b003      	add	sp, #12
 80081de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e0:	ab01      	add	r3, sp, #4
 80081e2:	466a      	mov	r2, sp
 80081e4:	f7ff ffc8 	bl	8008178 <__swhatbuf_r>
 80081e8:	9f00      	ldr	r7, [sp, #0]
 80081ea:	4605      	mov	r5, r0
 80081ec:	4639      	mov	r1, r7
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff fc3e 	bl	8007a70 <_malloc_r>
 80081f4:	b948      	cbnz	r0, 800820a <__smakebuf_r+0x46>
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	059a      	lsls	r2, r3, #22
 80081fc:	d4ee      	bmi.n	80081dc <__smakebuf_r+0x18>
 80081fe:	f023 0303 	bic.w	r3, r3, #3
 8008202:	f043 0302 	orr.w	r3, r3, #2
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	e7e2      	b.n	80081d0 <__smakebuf_r+0xc>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	6020      	str	r0, [r4, #0]
 800820e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800821a:	b15b      	cbz	r3, 8008234 <__smakebuf_r+0x70>
 800821c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008220:	4630      	mov	r0, r6
 8008222:	f000 f837 	bl	8008294 <_isatty_r>
 8008226:	b128      	cbz	r0, 8008234 <__smakebuf_r+0x70>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	431d      	orrs	r5, r3
 8008238:	81a5      	strh	r5, [r4, #12]
 800823a:	e7cf      	b.n	80081dc <__smakebuf_r+0x18>

0800823c <memmove>:
 800823c:	4288      	cmp	r0, r1
 800823e:	b510      	push	{r4, lr}
 8008240:	eb01 0402 	add.w	r4, r1, r2
 8008244:	d902      	bls.n	800824c <memmove+0x10>
 8008246:	4284      	cmp	r4, r0
 8008248:	4623      	mov	r3, r4
 800824a:	d807      	bhi.n	800825c <memmove+0x20>
 800824c:	1e43      	subs	r3, r0, #1
 800824e:	42a1      	cmp	r1, r4
 8008250:	d008      	beq.n	8008264 <memmove+0x28>
 8008252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800825a:	e7f8      	b.n	800824e <memmove+0x12>
 800825c:	4402      	add	r2, r0
 800825e:	4601      	mov	r1, r0
 8008260:	428a      	cmp	r2, r1
 8008262:	d100      	bne.n	8008266 <memmove+0x2a>
 8008264:	bd10      	pop	{r4, pc}
 8008266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800826a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800826e:	e7f7      	b.n	8008260 <memmove+0x24>

08008270 <_fstat_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	@ (8008290 <_fstat_r+0x20>)
 8008274:	2300      	movs	r3, #0
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	4611      	mov	r1, r2
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	f7f9 fcf9 	bl	8001c74 <_fstat>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d102      	bne.n	800828c <_fstat_r+0x1c>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	b103      	cbz	r3, 800828c <_fstat_r+0x1c>
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	bf00      	nop
 8008290:	2000af80 	.word	0x2000af80

08008294 <_isatty_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d06      	ldr	r5, [pc, #24]	@ (80082b0 <_isatty_r+0x1c>)
 8008298:	2300      	movs	r3, #0
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	f7f9 fcf8 	bl	8001c94 <_isatty>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_isatty_r+0x1a>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_isatty_r+0x1a>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	2000af80 	.word	0x2000af80

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	@ (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f9 fd00 	bl	8001cc4 <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	2000af80 	.word	0x2000af80

080082d4 <abort>:
 80082d4:	b508      	push	{r3, lr}
 80082d6:	2006      	movs	r0, #6
 80082d8:	f000 fa2e 	bl	8008738 <raise>
 80082dc:	2001      	movs	r0, #1
 80082de:	f7f9 fc79 	bl	8001bd4 <_exit>

080082e2 <_realloc_r>:
 80082e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e6:	4680      	mov	r8, r0
 80082e8:	4615      	mov	r5, r2
 80082ea:	460c      	mov	r4, r1
 80082ec:	b921      	cbnz	r1, 80082f8 <_realloc_r+0x16>
 80082ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f2:	4611      	mov	r1, r2
 80082f4:	f7ff bbbc 	b.w	8007a70 <_malloc_r>
 80082f8:	b92a      	cbnz	r2, 8008306 <_realloc_r+0x24>
 80082fa:	f7ff fb45 	bl	8007988 <_free_r>
 80082fe:	2400      	movs	r4, #0
 8008300:	4620      	mov	r0, r4
 8008302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008306:	f000 fa33 	bl	8008770 <_malloc_usable_size_r>
 800830a:	4285      	cmp	r5, r0
 800830c:	4606      	mov	r6, r0
 800830e:	d802      	bhi.n	8008316 <_realloc_r+0x34>
 8008310:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008314:	d8f4      	bhi.n	8008300 <_realloc_r+0x1e>
 8008316:	4629      	mov	r1, r5
 8008318:	4640      	mov	r0, r8
 800831a:	f7ff fba9 	bl	8007a70 <_malloc_r>
 800831e:	4607      	mov	r7, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	d0ec      	beq.n	80082fe <_realloc_r+0x1c>
 8008324:	42b5      	cmp	r5, r6
 8008326:	462a      	mov	r2, r5
 8008328:	4621      	mov	r1, r4
 800832a:	bf28      	it	cs
 800832c:	4632      	movcs	r2, r6
 800832e:	f7ff fafe 	bl	800792e <memcpy>
 8008332:	4621      	mov	r1, r4
 8008334:	4640      	mov	r0, r8
 8008336:	f7ff fb27 	bl	8007988 <_free_r>
 800833a:	463c      	mov	r4, r7
 800833c:	e7e0      	b.n	8008300 <_realloc_r+0x1e>

0800833e <__sfputc_r>:
 800833e:	6893      	ldr	r3, [r2, #8]
 8008340:	3b01      	subs	r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	b410      	push	{r4}
 8008346:	6093      	str	r3, [r2, #8]
 8008348:	da08      	bge.n	800835c <__sfputc_r+0x1e>
 800834a:	6994      	ldr	r4, [r2, #24]
 800834c:	42a3      	cmp	r3, r4
 800834e:	db01      	blt.n	8008354 <__sfputc_r+0x16>
 8008350:	290a      	cmp	r1, #10
 8008352:	d103      	bne.n	800835c <__sfputc_r+0x1e>
 8008354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008358:	f000 b932 	b.w	80085c0 <__swbuf_r>
 800835c:	6813      	ldr	r3, [r2, #0]
 800835e:	1c58      	adds	r0, r3, #1
 8008360:	6010      	str	r0, [r2, #0]
 8008362:	7019      	strb	r1, [r3, #0]
 8008364:	4608      	mov	r0, r1
 8008366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800836a:	4770      	bx	lr

0800836c <__sfputs_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	4614      	mov	r4, r2
 8008374:	18d5      	adds	r5, r2, r3
 8008376:	42ac      	cmp	r4, r5
 8008378:	d101      	bne.n	800837e <__sfputs_r+0x12>
 800837a:	2000      	movs	r0, #0
 800837c:	e007      	b.n	800838e <__sfputs_r+0x22>
 800837e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008382:	463a      	mov	r2, r7
 8008384:	4630      	mov	r0, r6
 8008386:	f7ff ffda 	bl	800833e <__sfputc_r>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d1f3      	bne.n	8008376 <__sfputs_r+0xa>
 800838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008390 <_vfiprintf_r>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	460d      	mov	r5, r1
 8008396:	b09d      	sub	sp, #116	@ 0x74
 8008398:	4614      	mov	r4, r2
 800839a:	4698      	mov	r8, r3
 800839c:	4606      	mov	r6, r0
 800839e:	b118      	cbz	r0, 80083a8 <_vfiprintf_r+0x18>
 80083a0:	6a03      	ldr	r3, [r0, #32]
 80083a2:	b90b      	cbnz	r3, 80083a8 <_vfiprintf_r+0x18>
 80083a4:	f7ff f8c0 	bl	8007528 <__sinit>
 80083a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d405      	bmi.n	80083ba <_vfiprintf_r+0x2a>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_vfiprintf_r+0x2a>
 80083b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083b6:	f7ff fab8 	bl	800792a <__retarget_lock_acquire_recursive>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	071b      	lsls	r3, r3, #28
 80083be:	d501      	bpl.n	80083c4 <_vfiprintf_r+0x34>
 80083c0:	692b      	ldr	r3, [r5, #16]
 80083c2:	b99b      	cbnz	r3, 80083ec <_vfiprintf_r+0x5c>
 80083c4:	4629      	mov	r1, r5
 80083c6:	4630      	mov	r0, r6
 80083c8:	f000 f938 	bl	800863c <__swsetup_r>
 80083cc:	b170      	cbz	r0, 80083ec <_vfiprintf_r+0x5c>
 80083ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d0:	07dc      	lsls	r4, r3, #31
 80083d2:	d504      	bpl.n	80083de <_vfiprintf_r+0x4e>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	b01d      	add	sp, #116	@ 0x74
 80083da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	0598      	lsls	r0, r3, #22
 80083e2:	d4f7      	bmi.n	80083d4 <_vfiprintf_r+0x44>
 80083e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083e6:	f7ff faa1 	bl	800792c <__retarget_lock_release_recursive>
 80083ea:	e7f3      	b.n	80083d4 <_vfiprintf_r+0x44>
 80083ec:	2300      	movs	r3, #0
 80083ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f0:	2320      	movs	r3, #32
 80083f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083fa:	2330      	movs	r3, #48	@ 0x30
 80083fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085ac <_vfiprintf_r+0x21c>
 8008400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008404:	f04f 0901 	mov.w	r9, #1
 8008408:	4623      	mov	r3, r4
 800840a:	469a      	mov	sl, r3
 800840c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008410:	b10a      	cbz	r2, 8008416 <_vfiprintf_r+0x86>
 8008412:	2a25      	cmp	r2, #37	@ 0x25
 8008414:	d1f9      	bne.n	800840a <_vfiprintf_r+0x7a>
 8008416:	ebba 0b04 	subs.w	fp, sl, r4
 800841a:	d00b      	beq.n	8008434 <_vfiprintf_r+0xa4>
 800841c:	465b      	mov	r3, fp
 800841e:	4622      	mov	r2, r4
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ffa2 	bl	800836c <__sfputs_r>
 8008428:	3001      	adds	r0, #1
 800842a:	f000 80a7 	beq.w	800857c <_vfiprintf_r+0x1ec>
 800842e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008430:	445a      	add	r2, fp
 8008432:	9209      	str	r2, [sp, #36]	@ 0x24
 8008434:	f89a 3000 	ldrb.w	r3, [sl]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 809f 	beq.w	800857c <_vfiprintf_r+0x1ec>
 800843e:	2300      	movs	r3, #0
 8008440:	f04f 32ff 	mov.w	r2, #4294967295
 8008444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008448:	f10a 0a01 	add.w	sl, sl, #1
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008454:	931a      	str	r3, [sp, #104]	@ 0x68
 8008456:	4654      	mov	r4, sl
 8008458:	2205      	movs	r2, #5
 800845a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845e:	4853      	ldr	r0, [pc, #332]	@ (80085ac <_vfiprintf_r+0x21c>)
 8008460:	f7f7 fece 	bl	8000200 <memchr>
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	b9d8      	cbnz	r0, 80084a0 <_vfiprintf_r+0x110>
 8008468:	06d1      	lsls	r1, r2, #27
 800846a:	bf44      	itt	mi
 800846c:	2320      	movmi	r3, #32
 800846e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008472:	0713      	lsls	r3, r2, #28
 8008474:	bf44      	itt	mi
 8008476:	232b      	movmi	r3, #43	@ 0x2b
 8008478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800847c:	f89a 3000 	ldrb.w	r3, [sl]
 8008480:	2b2a      	cmp	r3, #42	@ 0x2a
 8008482:	d015      	beq.n	80084b0 <_vfiprintf_r+0x120>
 8008484:	9a07      	ldr	r2, [sp, #28]
 8008486:	4654      	mov	r4, sl
 8008488:	2000      	movs	r0, #0
 800848a:	f04f 0c0a 	mov.w	ip, #10
 800848e:	4621      	mov	r1, r4
 8008490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008494:	3b30      	subs	r3, #48	@ 0x30
 8008496:	2b09      	cmp	r3, #9
 8008498:	d94b      	bls.n	8008532 <_vfiprintf_r+0x1a2>
 800849a:	b1b0      	cbz	r0, 80084ca <_vfiprintf_r+0x13a>
 800849c:	9207      	str	r2, [sp, #28]
 800849e:	e014      	b.n	80084ca <_vfiprintf_r+0x13a>
 80084a0:	eba0 0308 	sub.w	r3, r0, r8
 80084a4:	fa09 f303 	lsl.w	r3, r9, r3
 80084a8:	4313      	orrs	r3, r2
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	46a2      	mov	sl, r4
 80084ae:	e7d2      	b.n	8008456 <_vfiprintf_r+0xc6>
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	1d19      	adds	r1, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	9103      	str	r1, [sp, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	bfbb      	ittet	lt
 80084bc:	425b      	neglt	r3, r3
 80084be:	f042 0202 	orrlt.w	r2, r2, #2
 80084c2:	9307      	strge	r3, [sp, #28]
 80084c4:	9307      	strlt	r3, [sp, #28]
 80084c6:	bfb8      	it	lt
 80084c8:	9204      	strlt	r2, [sp, #16]
 80084ca:	7823      	ldrb	r3, [r4, #0]
 80084cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80084ce:	d10a      	bne.n	80084e6 <_vfiprintf_r+0x156>
 80084d0:	7863      	ldrb	r3, [r4, #1]
 80084d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80084d4:	d132      	bne.n	800853c <_vfiprintf_r+0x1ac>
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	1d1a      	adds	r2, r3, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	9203      	str	r2, [sp, #12]
 80084de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084e2:	3402      	adds	r4, #2
 80084e4:	9305      	str	r3, [sp, #20]
 80084e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085bc <_vfiprintf_r+0x22c>
 80084ea:	7821      	ldrb	r1, [r4, #0]
 80084ec:	2203      	movs	r2, #3
 80084ee:	4650      	mov	r0, sl
 80084f0:	f7f7 fe86 	bl	8000200 <memchr>
 80084f4:	b138      	cbz	r0, 8008506 <_vfiprintf_r+0x176>
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	eba0 000a 	sub.w	r0, r0, sl
 80084fc:	2240      	movs	r2, #64	@ 0x40
 80084fe:	4082      	lsls	r2, r0
 8008500:	4313      	orrs	r3, r2
 8008502:	3401      	adds	r4, #1
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850a:	4829      	ldr	r0, [pc, #164]	@ (80085b0 <_vfiprintf_r+0x220>)
 800850c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008510:	2206      	movs	r2, #6
 8008512:	f7f7 fe75 	bl	8000200 <memchr>
 8008516:	2800      	cmp	r0, #0
 8008518:	d03f      	beq.n	800859a <_vfiprintf_r+0x20a>
 800851a:	4b26      	ldr	r3, [pc, #152]	@ (80085b4 <_vfiprintf_r+0x224>)
 800851c:	bb1b      	cbnz	r3, 8008566 <_vfiprintf_r+0x1d6>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	3307      	adds	r3, #7
 8008522:	f023 0307 	bic.w	r3, r3, #7
 8008526:	3308      	adds	r3, #8
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852c:	443b      	add	r3, r7
 800852e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008530:	e76a      	b.n	8008408 <_vfiprintf_r+0x78>
 8008532:	fb0c 3202 	mla	r2, ip, r2, r3
 8008536:	460c      	mov	r4, r1
 8008538:	2001      	movs	r0, #1
 800853a:	e7a8      	b.n	800848e <_vfiprintf_r+0xfe>
 800853c:	2300      	movs	r3, #0
 800853e:	3401      	adds	r4, #1
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	4619      	mov	r1, r3
 8008544:	f04f 0c0a 	mov.w	ip, #10
 8008548:	4620      	mov	r0, r4
 800854a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800854e:	3a30      	subs	r2, #48	@ 0x30
 8008550:	2a09      	cmp	r2, #9
 8008552:	d903      	bls.n	800855c <_vfiprintf_r+0x1cc>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0c6      	beq.n	80084e6 <_vfiprintf_r+0x156>
 8008558:	9105      	str	r1, [sp, #20]
 800855a:	e7c4      	b.n	80084e6 <_vfiprintf_r+0x156>
 800855c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008560:	4604      	mov	r4, r0
 8008562:	2301      	movs	r3, #1
 8008564:	e7f0      	b.n	8008548 <_vfiprintf_r+0x1b8>
 8008566:	ab03      	add	r3, sp, #12
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	462a      	mov	r2, r5
 800856c:	4b12      	ldr	r3, [pc, #72]	@ (80085b8 <_vfiprintf_r+0x228>)
 800856e:	a904      	add	r1, sp, #16
 8008570:	4630      	mov	r0, r6
 8008572:	f3af 8000 	nop.w
 8008576:	4607      	mov	r7, r0
 8008578:	1c78      	adds	r0, r7, #1
 800857a:	d1d6      	bne.n	800852a <_vfiprintf_r+0x19a>
 800857c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800857e:	07d9      	lsls	r1, r3, #31
 8008580:	d405      	bmi.n	800858e <_vfiprintf_r+0x1fe>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	059a      	lsls	r2, r3, #22
 8008586:	d402      	bmi.n	800858e <_vfiprintf_r+0x1fe>
 8008588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858a:	f7ff f9cf 	bl	800792c <__retarget_lock_release_recursive>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	065b      	lsls	r3, r3, #25
 8008592:	f53f af1f 	bmi.w	80083d4 <_vfiprintf_r+0x44>
 8008596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008598:	e71e      	b.n	80083d8 <_vfiprintf_r+0x48>
 800859a:	ab03      	add	r3, sp, #12
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	462a      	mov	r2, r5
 80085a0:	4b05      	ldr	r3, [pc, #20]	@ (80085b8 <_vfiprintf_r+0x228>)
 80085a2:	a904      	add	r1, sp, #16
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff fcb5 	bl	8007f14 <_printf_i>
 80085aa:	e7e4      	b.n	8008576 <_vfiprintf_r+0x1e6>
 80085ac:	08011eba 	.word	0x08011eba
 80085b0:	08011ec4 	.word	0x08011ec4
 80085b4:	00000000 	.word	0x00000000
 80085b8:	0800836d 	.word	0x0800836d
 80085bc:	08011ec0 	.word	0x08011ec0

080085c0 <__swbuf_r>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	460e      	mov	r6, r1
 80085c4:	4614      	mov	r4, r2
 80085c6:	4605      	mov	r5, r0
 80085c8:	b118      	cbz	r0, 80085d2 <__swbuf_r+0x12>
 80085ca:	6a03      	ldr	r3, [r0, #32]
 80085cc:	b90b      	cbnz	r3, 80085d2 <__swbuf_r+0x12>
 80085ce:	f7fe ffab 	bl	8007528 <__sinit>
 80085d2:	69a3      	ldr	r3, [r4, #24]
 80085d4:	60a3      	str	r3, [r4, #8]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	071a      	lsls	r2, r3, #28
 80085da:	d501      	bpl.n	80085e0 <__swbuf_r+0x20>
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	b943      	cbnz	r3, 80085f2 <__swbuf_r+0x32>
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f82a 	bl	800863c <__swsetup_r>
 80085e8:	b118      	cbz	r0, 80085f2 <__swbuf_r+0x32>
 80085ea:	f04f 37ff 	mov.w	r7, #4294967295
 80085ee:	4638      	mov	r0, r7
 80085f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	6922      	ldr	r2, [r4, #16]
 80085f6:	1a98      	subs	r0, r3, r2
 80085f8:	6963      	ldr	r3, [r4, #20]
 80085fa:	b2f6      	uxtb	r6, r6
 80085fc:	4283      	cmp	r3, r0
 80085fe:	4637      	mov	r7, r6
 8008600:	dc05      	bgt.n	800860e <__swbuf_r+0x4e>
 8008602:	4621      	mov	r1, r4
 8008604:	4628      	mov	r0, r5
 8008606:	f7fe fedb 	bl	80073c0 <_fflush_r>
 800860a:	2800      	cmp	r0, #0
 800860c:	d1ed      	bne.n	80085ea <__swbuf_r+0x2a>
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	3b01      	subs	r3, #1
 8008612:	60a3      	str	r3, [r4, #8]
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	701e      	strb	r6, [r3, #0]
 800861c:	6962      	ldr	r2, [r4, #20]
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	429a      	cmp	r2, r3
 8008622:	d004      	beq.n	800862e <__swbuf_r+0x6e>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	07db      	lsls	r3, r3, #31
 8008628:	d5e1      	bpl.n	80085ee <__swbuf_r+0x2e>
 800862a:	2e0a      	cmp	r6, #10
 800862c:	d1df      	bne.n	80085ee <__swbuf_r+0x2e>
 800862e:	4621      	mov	r1, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f7fe fec5 	bl	80073c0 <_fflush_r>
 8008636:	2800      	cmp	r0, #0
 8008638:	d0d9      	beq.n	80085ee <__swbuf_r+0x2e>
 800863a:	e7d6      	b.n	80085ea <__swbuf_r+0x2a>

0800863c <__swsetup_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4b29      	ldr	r3, [pc, #164]	@ (80086e4 <__swsetup_r+0xa8>)
 8008640:	4605      	mov	r5, r0
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	460c      	mov	r4, r1
 8008646:	b118      	cbz	r0, 8008650 <__swsetup_r+0x14>
 8008648:	6a03      	ldr	r3, [r0, #32]
 800864a:	b90b      	cbnz	r3, 8008650 <__swsetup_r+0x14>
 800864c:	f7fe ff6c 	bl	8007528 <__sinit>
 8008650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008654:	0719      	lsls	r1, r3, #28
 8008656:	d422      	bmi.n	800869e <__swsetup_r+0x62>
 8008658:	06da      	lsls	r2, r3, #27
 800865a:	d407      	bmi.n	800866c <__swsetup_r+0x30>
 800865c:	2209      	movs	r2, #9
 800865e:	602a      	str	r2, [r5, #0]
 8008660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	e033      	b.n	80086d4 <__swsetup_r+0x98>
 800866c:	0758      	lsls	r0, r3, #29
 800866e:	d512      	bpl.n	8008696 <__swsetup_r+0x5a>
 8008670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008672:	b141      	cbz	r1, 8008686 <__swsetup_r+0x4a>
 8008674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008678:	4299      	cmp	r1, r3
 800867a:	d002      	beq.n	8008682 <__swsetup_r+0x46>
 800867c:	4628      	mov	r0, r5
 800867e:	f7ff f983 	bl	8007988 <_free_r>
 8008682:	2300      	movs	r3, #0
 8008684:	6363      	str	r3, [r4, #52]	@ 0x34
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800868c:	81a3      	strh	r3, [r4, #12]
 800868e:	2300      	movs	r3, #0
 8008690:	6063      	str	r3, [r4, #4]
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	f043 0308 	orr.w	r3, r3, #8
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	b94b      	cbnz	r3, 80086b6 <__swsetup_r+0x7a>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ac:	d003      	beq.n	80086b6 <__swsetup_r+0x7a>
 80086ae:	4621      	mov	r1, r4
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7ff fd87 	bl	80081c4 <__smakebuf_r>
 80086b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ba:	f013 0201 	ands.w	r2, r3, #1
 80086be:	d00a      	beq.n	80086d6 <__swsetup_r+0x9a>
 80086c0:	2200      	movs	r2, #0
 80086c2:	60a2      	str	r2, [r4, #8]
 80086c4:	6962      	ldr	r2, [r4, #20]
 80086c6:	4252      	negs	r2, r2
 80086c8:	61a2      	str	r2, [r4, #24]
 80086ca:	6922      	ldr	r2, [r4, #16]
 80086cc:	b942      	cbnz	r2, 80086e0 <__swsetup_r+0xa4>
 80086ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086d2:	d1c5      	bne.n	8008660 <__swsetup_r+0x24>
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	0799      	lsls	r1, r3, #30
 80086d8:	bf58      	it	pl
 80086da:	6962      	ldrpl	r2, [r4, #20]
 80086dc:	60a2      	str	r2, [r4, #8]
 80086de:	e7f4      	b.n	80086ca <__swsetup_r+0x8e>
 80086e0:	2000      	movs	r0, #0
 80086e2:	e7f7      	b.n	80086d4 <__swsetup_r+0x98>
 80086e4:	20000220 	.word	0x20000220

080086e8 <_raise_r>:
 80086e8:	291f      	cmp	r1, #31
 80086ea:	b538      	push	{r3, r4, r5, lr}
 80086ec:	4605      	mov	r5, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	d904      	bls.n	80086fc <_raise_r+0x14>
 80086f2:	2316      	movs	r3, #22
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086fe:	b112      	cbz	r2, 8008706 <_raise_r+0x1e>
 8008700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008704:	b94b      	cbnz	r3, 800871a <_raise_r+0x32>
 8008706:	4628      	mov	r0, r5
 8008708:	f000 f830 	bl	800876c <_getpid_r>
 800870c:	4622      	mov	r2, r4
 800870e:	4601      	mov	r1, r0
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008716:	f000 b817 	b.w	8008748 <_kill_r>
 800871a:	2b01      	cmp	r3, #1
 800871c:	d00a      	beq.n	8008734 <_raise_r+0x4c>
 800871e:	1c59      	adds	r1, r3, #1
 8008720:	d103      	bne.n	800872a <_raise_r+0x42>
 8008722:	2316      	movs	r3, #22
 8008724:	6003      	str	r3, [r0, #0]
 8008726:	2001      	movs	r0, #1
 8008728:	e7e7      	b.n	80086fa <_raise_r+0x12>
 800872a:	2100      	movs	r1, #0
 800872c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008730:	4620      	mov	r0, r4
 8008732:	4798      	blx	r3
 8008734:	2000      	movs	r0, #0
 8008736:	e7e0      	b.n	80086fa <_raise_r+0x12>

08008738 <raise>:
 8008738:	4b02      	ldr	r3, [pc, #8]	@ (8008744 <raise+0xc>)
 800873a:	4601      	mov	r1, r0
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	f7ff bfd3 	b.w	80086e8 <_raise_r>
 8008742:	bf00      	nop
 8008744:	20000220 	.word	0x20000220

08008748 <_kill_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d07      	ldr	r5, [pc, #28]	@ (8008768 <_kill_r+0x20>)
 800874c:	2300      	movs	r3, #0
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	4611      	mov	r1, r2
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	f7f9 fa2d 	bl	8001bb4 <_kill>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d102      	bne.n	8008764 <_kill_r+0x1c>
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	b103      	cbz	r3, 8008764 <_kill_r+0x1c>
 8008762:	6023      	str	r3, [r4, #0]
 8008764:	bd38      	pop	{r3, r4, r5, pc}
 8008766:	bf00      	nop
 8008768:	2000af80 	.word	0x2000af80

0800876c <_getpid_r>:
 800876c:	f7f9 ba1a 	b.w	8001ba4 <_getpid>

08008770 <_malloc_usable_size_r>:
 8008770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008774:	1f18      	subs	r0, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfbc      	itt	lt
 800877a:	580b      	ldrlt	r3, [r1, r0]
 800877c:	18c0      	addlt	r0, r0, r3
 800877e:	4770      	bx	lr

08008780 <_init>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr

0800878c <_fini>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr
