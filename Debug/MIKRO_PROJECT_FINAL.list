
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000973c  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b84  08012b84  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  08012b84  08012b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b8c  08012b8c  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b8c  08012b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b90  08012b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08012b94  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad60  20000270  08012e04  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  2000afd0  08012e04  00014fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013332  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f8  00000000  00000000  000275d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c15  00000000  00000000  0002bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029353  00000000  00000000  0002c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001692d  00000000  00000000  00055c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edc7c  00000000  00000000  0006c555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a1d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b68  00000000  00000000  0015a214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ed7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009430 	.word	0x08009430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08009430 	.word	0x08009430

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	2000028c 	.word	0x2000028c

080005c8 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <USART_getchar+0x4c>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <USART_getchar+0x4c>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d013      	beq.n	8000602 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <USART_getchar+0x4c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <USART_getchar+0x50>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <USART_getchar+0x4c>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <USART_getchar+0x4c>)
 80005ec:	68d2      	ldr	r2, [r2, #12]
 80005ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80005f2:	fb01 f202 	mul.w	r2, r1, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <USART_getchar+0x4c>)
 80005fa:	6053      	str	r3, [r2, #4]
        return tmp;
 80005fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000600:	e001      	b.n	8000606 <USART_getchar+0x3e>
    }
    return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000028c 	.word	0x2000028c
 8000618:	20000aac 	.word	0x20000aac

0800061c <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000626:	4b38      	ldr	r3, [pc, #224]	@ (8000708 <USART_sendFrame+0xec>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 8000630:	4a36      	ldr	r2, [pc, #216]	@ (800070c <USART_sendFrame+0xf0>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	4413      	add	r3, r2
 8000636:	227e      	movs	r2, #126	@ 0x7e
 8000638:	701a      	strb	r2, [r3, #0]
    idx++;
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
    if(idx >= TX_BUFFER_SIZE) idx = 0;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000646:	db01      	blt.n	800064c <USART_sendFrame+0x30>
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	e014      	b.n	800067c <USART_sendFrame+0x60>
        USART_TxBuf[idx] = data[i];
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	4413      	add	r3, r2
 8000658:	7819      	ldrb	r1, [r3, #0]
 800065a:	4a2c      	ldr	r2, [pc, #176]	@ (800070c <USART_sendFrame+0xf0>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
        idx++;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	3301      	adds	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
        if(idx >= TX_BUFFER_SIZE) idx = 0;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000670:	db01      	blt.n	8000676 <USART_sendFrame+0x5a>
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	3301      	adds	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d3e6      	bcc.n	8000652 <USART_sendFrame+0x36>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <USART_sendFrame+0xf0>)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	4413      	add	r3, r2
 800068a:	2260      	movs	r2, #96	@ 0x60
 800068c:	701a      	strb	r2, [r3, #0]
    idx++;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
    if(idx >= TX_BUFFER_SIZE) idx = 0;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800069a:	db01      	blt.n	80006a0 <USART_sendFrame+0x84>
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006a0:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <USART_sendFrame+0xec>)
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <USART_sendFrame+0xec>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d123      	bne.n	80006f4 <USART_sendFrame+0xd8>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <USART_sendFrame+0xf4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006b6:	2b80      	cmp	r3, #128	@ 0x80
 80006b8:	d11c      	bne.n	80006f4 <USART_sendFrame+0xd8>
        txRingBuffer.writeIndex = idx;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <USART_sendFrame+0xec>)
 80006be:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <USART_sendFrame+0xec>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	4a11      	ldr	r2, [pc, #68]	@ (800070c <USART_sendFrame+0xf0>)
 80006c6:	5cd3      	ldrb	r3, [r2, r3]
 80006c8:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex++;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <USART_sendFrame+0xec>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000708 <USART_sendFrame+0xec>)
 80006d2:	6053      	str	r3, [r2, #4]
        if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex = 0;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <USART_sendFrame+0xec>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006dc:	d302      	bcc.n	80006e4 <USART_sendFrame+0xc8>
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <USART_sendFrame+0xec>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006e4:	f107 030f 	add.w	r3, r7, #15
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	4808      	ldr	r0, [pc, #32]	@ (8000710 <USART_sendFrame+0xf4>)
 80006ee:	f004 fd0d 	bl	800510c <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006f2:	e002      	b.n	80006fa <USART_sendFrame+0xde>
    } else {
        txRingBuffer.writeIndex = idx;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <USART_sendFrame+0xec>)
 80006f8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006fa:	b662      	cpsie	i
}
 80006fc:	bf00      	nop
    }

    __enable_irq();
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000029c 	.word	0x2000029c
 800070c:	200002ac 	.word	0x200002ac
 8000710:	2000adf8 	.word	0x2000adf8

08000714 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000714:	b480      	push	{r7}
 8000716:	b089      	sub	sp, #36	@ 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000724:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	e019      	b.n	8000760 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 8000736:	8bfb      	ldrh	r3, [r7, #30]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2da      	uxtb	r2, r3
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	4053      	eors	r3, r2
 8000742:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000744:	8bfb      	ldrh	r3, [r7, #30]
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	b21a      	sxth	r2, r3
 800074a:	7dbb      	ldrb	r3, [r7, #22]
 800074c:	490f      	ldr	r1, [pc, #60]	@ (800078c <calculateCrc16+0x78>)
 800074e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000752:	b21b      	sxth	r3, r3
 8000754:	4053      	eors	r3, r2
 8000756:	b21b      	sxth	r3, r3
 8000758:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	3301      	adds	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69ba      	ldr	r2, [r7, #24]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3e1      	bcc.n	800072c <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 8000768:	8bfb      	ldrh	r3, [r7, #30]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	8bfa      	ldrh	r2, [r7, #30]
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	701a      	strb	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	3724      	adds	r7, #36	@ 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_DMA_Init+0x38>)
 8000798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800079a:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <MX_DMA_Init+0x38>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_DMA_Init+0x38>)
 80007a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	200f      	movs	r0, #15
 80007b4:	f001 fec3 	bl	800253e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007b8:	200f      	movs	r0, #15
 80007ba:	f001 fedc 	bl	8002576 <HAL_NVIC_EnableIRQ>

}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <safeCompare>:
uint8_t received_char;
Frame frame;


static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <safeCompare+0x18>
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d101      	bne.n	80007e8 <safeCompare+0x1c>
	{
		return false;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e00a      	b.n	80007fe <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	68b9      	ldr	r1, [r7, #8]
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f007 fe05 	bl	80083fc <memcmp>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <parseColor+0x16>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <parseColor+0x1a>
        return false;
 800081e:	2300      	movs	r3, #0
 8000820:	e026      	b.n	8000870 <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e01f      	b.n	8000868 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 8000828:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <parseColor+0x70>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fccd 	bl	80001d0 <strlen>
 8000836:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000838:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <parseColor+0x70>)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffc1 	bl	80007cc <safeCompare>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d008      	beq.n	8000862 <parseColor+0x5a>
            *color = color_map[i].value;
 8000850:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <parseColor+0x70>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	4413      	add	r3, r2
 8000858:	889a      	ldrh	r2, [r3, #4]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	801a      	strh	r2, [r3, #0]
            return true;
 800085e:	2301      	movs	r3, #1
 8000860:	e006      	b.n	8000870 <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3301      	adds	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d9dc      	bls.n	8000828 <parseColor+0x20>
        }
    }
    return false;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	0800951c 	.word	0x0800951c

0800087c <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    in_frame = false;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <resetFrameState+0x20>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <resetFrameState+0x24>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <resetFrameState+0x28>)
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	20000cb4 	.word	0x20000cb4
 80008a0:	20000cac 	.word	0x20000cac
 80008a4:	20000cb0 	.word	0x20000cb0

080008a8 <parseParameters>:
*      - Pomija białe znaki
*      - Wyodrębnia token do następnego przecinka
*      - Przetwarza token według odpowiedniego typu
*   4. Zwalnia va_list
************************************************************************/
bool parseParameters(const char* data, const char* format, ...) {
 80008a8:	b40e      	push	{r1, r2, r3}
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b099      	sub	sp, #100	@ 0x64
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <parseParameters+0x16>
 80008b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <parseParameters+0x1a>
        return false;
 80008be:	2300      	movs	r3, #0
 80008c0:	e0b0      	b.n	8000a24 <parseParameters+0x17c>
    }
    va_list args;
    va_start(args, format);
 80008c2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44

    const char* data_ptr = data;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 80008cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    unsigned char token[51];  // Zmieniono na unsigned char
    size_t token_idx;

    while (*fmt_ptr) {
 80008d0:	e09c      	b.n	8000a0c <parseParameters+0x164>

        while (isspace((unsigned char)*data_ptr)) data_ptr++;
 80008d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008d4:	3301      	adds	r3, #1
 80008d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80008d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	4a55      	ldr	r2, [pc, #340]	@ (8000a34 <parseParameters+0x18c>)
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f2      	bne.n	80008d2 <parseParameters+0x2a>

        token_idx = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	657b      	str	r3, [r7, #84]	@ 0x54

        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 80008f0:	e00a      	b.n	8000908 <parseParameters+0x60>
            token[token_idx++] = (unsigned char)*data_ptr++;  // Zmieniono na unsigned char
 80008f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80008f4:	1c53      	adds	r3, r2, #1
 80008f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80008f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80008fa:	1c59      	adds	r1, r3, #1
 80008fc:	6579      	str	r1, [r7, #84]	@ 0x54
 80008fe:	7812      	ldrb	r2, [r2, #0]
 8000900:	3360      	adds	r3, #96	@ 0x60
 8000902:	443b      	add	r3, r7
 8000904:	f803 2c50 	strb.w	r2, [r3, #-80]
        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 8000908:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <parseParameters+0x76>
 8000910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b2c      	cmp	r3, #44	@ 0x2c
 8000916:	d002      	beq.n	800091e <parseParameters+0x76>
 8000918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800091a:	2b30      	cmp	r3, #48	@ 0x30
 800091c:	d9e9      	bls.n	80008f2 <parseParameters+0x4a>
        }
        token[token_idx] = '\0';
 800091e:	f107 0210 	add.w	r2, r7, #16
 8000922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000924:	4413      	add	r3, r2
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

        if (*data_ptr == ',') data_ptr++;
 800092a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000930:	d10c      	bne.n	800094c <parseParameters+0xa4>
 8000932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000934:	3301      	adds	r3, #1
 8000936:	65fb      	str	r3, [r7, #92]	@ 0x5c

        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 8000938:	e008      	b.n	800094c <parseParameters+0xa4>
            token[--token_idx] = '\0';
 800093a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800093c:	3b01      	subs	r3, #1
 800093e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000940:	f107 0210 	add.w	r2, r7, #16
 8000944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 800094c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00d      	beq.n	800096e <parseParameters+0xc6>
 8000952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000954:	3b01      	subs	r3, #1
 8000956:	3360      	adds	r3, #96	@ 0x60
 8000958:	443b      	add	r3, r7
 800095a:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800095e:	3301      	adds	r3, #1
 8000960:	4a34      	ldr	r2, [pc, #208]	@ (8000a34 <parseParameters+0x18c>)
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1e5      	bne.n	800093a <parseParameters+0x92>
        }
        switch (*fmt_ptr) {
 800096e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b75      	cmp	r3, #117	@ 0x75
 8000974:	d006      	beq.n	8000984 <parseParameters+0xdc>
 8000976:	2b75      	cmp	r3, #117	@ 0x75
 8000978:	dc42      	bgt.n	8000a00 <parseParameters+0x158>
 800097a:	2b73      	cmp	r3, #115	@ 0x73
 800097c:	d01c      	beq.n	80009b8 <parseParameters+0x110>
 800097e:	2b74      	cmp	r3, #116	@ 0x74
 8000980:	d02d      	beq.n	80009de <parseParameters+0x136>
 8000982:	e03d      	b.n	8000a00 <parseParameters+0x158>
            case 'u': {
                char* endptr;
                unsigned long val = strtoul((char*)token, &endptr, 10);  // Zmieniono na (char*)
 8000984:	f107 010c 	add.w	r1, r7, #12
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	220a      	movs	r2, #10
 800098e:	4618      	mov	r0, r3
 8000990:	f007 fbb8 	bl	8008104 <strtoul>
 8000994:	6538      	str	r0, [r7, #80]	@ 0x50
                if (*endptr || val > 255) {
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <parseParameters+0xfc>
 800099e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009a0:	2bff      	cmp	r3, #255	@ 0xff
 80009a2:	d901      	bls.n	80009a8 <parseParameters+0x100>
                    va_end(args);
                    return false;
 80009a4:	2300      	movs	r3, #0
 80009a6:	e03d      	b.n	8000a24 <parseParameters+0x17c>
                }
                *va_arg(args, uint8_t*) = (uint8_t)val;
 80009a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009aa:	1d1a      	adds	r2, r3, #4
 80009ac:	647a      	str	r2, [r7, #68]	@ 0x44
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e026      	b.n	8000a06 <parseParameters+0x15e>
                break;
            }
            case 's': {
                Color_t* color_ptr = va_arg(args, Color_t*);
 80009b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009ba:	1d1a      	adds	r2, r3, #4
 80009bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (!parseColor((char*)token, color_ptr)) {  // Zmieniono na (char*)
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff1d 	bl	8000808 <parseColor>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d014      	beq.n	8000a04 <parseParameters+0x15c>
                    va_end(args);
                    return false;
 80009da:	2300      	movs	r3, #0
 80009dc:	e022      	b.n	8000a24 <parseParameters+0x17c>
                }
                break;
            }
            case 't': {
                char* ptr = va_arg(args, char*);
 80009de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009e0:	1d1a      	adds	r2, r3, #4
 80009e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                strncpy(ptr, (char*)token, 50);  // Zmieniono na (char*)
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2232      	movs	r2, #50	@ 0x32
 80009ee:	4619      	mov	r1, r3
 80009f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80009f2:	f007 fd1b 	bl	800842c <strncpy>
                ptr[50] = '\0';
 80009f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009f8:	3332      	adds	r3, #50	@ 0x32
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
                break;
 80009fe:	e002      	b.n	8000a06 <parseParameters+0x15e>
            }
            default:
                va_end(args);
                return false;
 8000a00:	2300      	movs	r3, #0
 8000a02:	e00f      	b.n	8000a24 <parseParameters+0x17c>
                break;
 8000a04:	bf00      	nop
        }
        fmt_ptr++;
 8000a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a08:	3301      	adds	r3, #1
 8000a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000a0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f47f af61 	bne.w	80008d8 <parseParameters+0x30>
    }
    va_end(args);
    return !*data_ptr;
 8000a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2301      	moveq	r3, #1
 8000a20:	2300      	movne	r3, #0
 8000a22:	b2db      	uxtb	r3, r3
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3764      	adds	r7, #100	@ 0x64
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a2e:	b003      	add	sp, #12
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	080129a0 	.word	0x080129a0

08000a38 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00d      	beq.n	8000a62 <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3305      	adds	r3, #5
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 fce4 	bl	800841c <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3302      	adds	r3, #2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f007 fcdd 	bl	800841c <memset>
    }
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73bb      	strb	r3, [r7, #14]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	737b      	strb	r3, [r7, #13]
 8000a80:	2300      	movs	r3, #0
 8000a82:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1d58      	adds	r0, r3, #5
 8000a8c:	f107 010e 	add.w	r1, r7, #14
 8000a90:	f107 020f 	add.w	r2, r7, #15
 8000a94:	f107 030a 	add.w	r3, r7, #10
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 030d 	add.w	r3, r7, #13
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	4917      	ldr	r1, [pc, #92]	@ (8000b08 <executeONK+0x9c>)
 8000aaa:	f7ff fefd 	bl	80008a8 <parseParameters>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d009      	beq.n	8000ace <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3305      	adds	r3, #5
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <executeONK+0xa0>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <executeONK+0xa4>)
 8000ac4:	2167      	movs	r1, #103	@ 0x67
 8000ac6:	2068      	movs	r0, #104	@ 0x68
 8000ac8:	f000 fade 	bl	8001088 <prepareFrame>
 8000acc:	e019      	b.n	8000b02 <executeONK+0x96>
        return;
    }
	switch(filling)
 8000ace:	7b3b      	ldrb	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <executeONK+0x6e>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d00a      	beq.n	8000aee <executeONK+0x82>
 8000ad8:	e013      	b.n	8000b02 <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	b218      	sxth	r0, r3
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	b219      	sxth	r1, r3
 8000ae2:	7b7b      	ldrb	r3, [r7, #13]
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	897b      	ldrh	r3, [r7, #10]
 8000ae8:	f006 fd52 	bl	8007590 <hagl_draw_circle>
		break;
 8000aec:	e009      	b.n	8000b02 <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	b218      	sxth	r0, r3
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	b219      	sxth	r1, r3
 8000af6:	7b7b      	ldrb	r3, [r7, #13]
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	f006 fe77 	bl	80077ee <hagl_fill_circle>
		break;
 8000b00:	bf00      	nop
	}
}
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	08009484 	.word	0x08009484
 8000b0c:	0800948c 	.word	0x0800948c
 8000b10:	080094a0 	.word	0x080094a0

08000b14 <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	2300      	movs	r3, #0
 8000b22:	73bb      	strb	r3, [r7, #14]
 8000b24:	2300      	movs	r3, #0
 8000b26:	737b      	strb	r3, [r7, #13]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	733b      	strb	r3, [r7, #12]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	1d58      	adds	r0, r3, #5
 8000b38:	f107 010e 	add.w	r1, r7, #14
 8000b3c:	f107 020f 	add.w	r2, r7, #15
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	9303      	str	r3, [sp, #12]
 8000b46:	f107 030b 	add.w	r3, r7, #11
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f107 030d 	add.w	r3, r7, #13
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	491c      	ldr	r1, [pc, #112]	@ (8000bcc <executeONP+0xb8>)
 8000b5c:	f7ff fea4 	bl	80008a8 <parseParameters>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f083 0301 	eor.w	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d009      	beq.n	8000b80 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3305      	adds	r3, #5
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <executeONP+0xbc>)
 8000b74:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <executeONP+0xc0>)
 8000b76:	2167      	movs	r1, #103	@ 0x67
 8000b78:	2068      	movs	r0, #104	@ 0x68
 8000b7a:	f000 fa85 	bl	8001088 <prepareFrame>
 8000b7e:	e021      	b.n	8000bc4 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000b80:	7afb      	ldrb	r3, [r7, #11]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <executeONP+0x78>
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d00e      	beq.n	8000ba8 <executeONP+0x94>
 8000b8a:	e01b      	b.n	8000bc4 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	b218      	sxth	r0, r3
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	b219      	sxth	r1, r3
 8000b94:	7b7b      	ldrb	r3, [r7, #13]
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	7b3b      	ldrb	r3, [r7, #12]
 8000b9a:	b21c      	sxth	r4, r3
 8000b9c:	893b      	ldrh	r3, [r7, #8]
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	4623      	mov	r3, r4
 8000ba2:	f006 fa45 	bl	8007030 <hagl_draw_rectangle>
		break;
 8000ba6:	e00d      	b.n	8000bc4 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	b218      	sxth	r0, r3
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	b219      	sxth	r1, r3
 8000bb0:	7b7b      	ldrb	r3, [r7, #13]
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	7b3b      	ldrb	r3, [r7, #12]
 8000bb6:	b21c      	sxth	r4, r3
 8000bb8:	893b      	ldrh	r3, [r7, #8]
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	4623      	mov	r3, r4
 8000bbe:	f006 fabd 	bl	800713c <hagl_fill_rectangle>
		break;
 8000bc2:	bf00      	nop
	}
}
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	080094a4 	.word	0x080094a4
 8000bd0:	0800948c 	.word	0x0800948c
 8000bd4:	080094a0 	.word	0x080094a0

08000bd8 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	b08d      	sub	sp, #52	@ 0x34
 8000bdc:	af06      	add	r7, sp, #24
 8000bde:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]
 8000be4:	2300      	movs	r3, #0
 8000be6:	75bb      	strb	r3, [r7, #22]
 8000be8:	2300      	movs	r3, #0
 8000bea:	757b      	strb	r3, [r7, #21]
 8000bec:	2300      	movs	r3, #0
 8000bee:	753b      	strb	r3, [r7, #20]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	74fb      	strb	r3, [r7, #19]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	74bb      	strb	r3, [r7, #18]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1d58      	adds	r0, r3, #5
 8000c04:	f107 0116 	add.w	r1, r7, #22
 8000c08:	f107 0217 	add.w	r2, r7, #23
 8000c0c:	f107 030e 	add.w	r3, r7, #14
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	f107 0311 	add.w	r3, r7, #17
 8000c16:	9304      	str	r3, [sp, #16]
 8000c18:	f107 0312 	add.w	r3, r7, #18
 8000c1c:	9303      	str	r3, [sp, #12]
 8000c1e:	f107 0313 	add.w	r3, r7, #19
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	f107 0315 	add.w	r3, r7, #21
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	460b      	mov	r3, r1
 8000c32:	4924      	ldr	r1, [pc, #144]	@ (8000cc4 <executeONT+0xec>)
 8000c34:	f7ff fe38 	bl	80008a8 <parseParameters>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d009      	beq.n	8000c58 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3305      	adds	r3, #5
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <executeONT+0xf0>)
 8000c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ccc <executeONT+0xf4>)
 8000c4e:	2167      	movs	r1, #103	@ 0x67
 8000c50:	2068      	movs	r0, #104	@ 0x68
 8000c52:	f000 fa19 	bl	8001088 <prepareFrame>
 8000c56:	e031      	b.n	8000cbc <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000c58:	7c7b      	ldrb	r3, [r7, #17]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <executeONT+0x8c>
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d016      	beq.n	8000c90 <executeONT+0xb8>
 8000c62:	e02b      	b.n	8000cbc <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	b218      	sxth	r0, r3
 8000c68:	7dbb      	ldrb	r3, [r7, #22]
 8000c6a:	b21c      	sxth	r4, r3
 8000c6c:	7d7b      	ldrb	r3, [r7, #21]
 8000c6e:	b21d      	sxth	r5, r3
 8000c70:	7d3b      	ldrb	r3, [r7, #20]
 8000c72:	b21e      	sxth	r6, r3
 8000c74:	7cfb      	ldrb	r3, [r7, #19]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	7cba      	ldrb	r2, [r7, #18]
 8000c7a:	b212      	sxth	r2, r2
 8000c7c:	89f9      	ldrh	r1, [r7, #14]
 8000c7e:	9102      	str	r1, [sp, #8]
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4633      	mov	r3, r6
 8000c86:	462a      	mov	r2, r5
 8000c88:	4621      	mov	r1, r4
 8000c8a:	f007 f83b 	bl	8007d04 <hagl_draw_triangle>
            break;
 8000c8e:	e015      	b.n	8000cbc <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
 8000c92:	b218      	sxth	r0, r3
 8000c94:	7dbb      	ldrb	r3, [r7, #22]
 8000c96:	b21c      	sxth	r4, r3
 8000c98:	7d7b      	ldrb	r3, [r7, #21]
 8000c9a:	b21d      	sxth	r5, r3
 8000c9c:	7d3b      	ldrb	r3, [r7, #20]
 8000c9e:	b21e      	sxth	r6, r3
 8000ca0:	7cfb      	ldrb	r3, [r7, #19]
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	7cba      	ldrb	r2, [r7, #18]
 8000ca6:	b212      	sxth	r2, r2
 8000ca8:	89f9      	ldrh	r1, [r7, #14]
 8000caa:	9102      	str	r1, [sp, #8]
 8000cac:	9201      	str	r2, [sp, #4]
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	4633      	mov	r3, r6
 8000cb2:	462a      	mov	r2, r5
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	f007 f84b 	bl	8007d50 <hagl_fill_triangle>
            break;
 8000cba:	bf00      	nop
    }
}
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	080094ac 	.word	0x080094ac
 8000cc8:	0800948c 	.word	0x0800948c
 8000ccc:	080094a0 	.word	0x080094a0

08000cd0 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b0cb      	sub	sp, #300	@ 0x12c
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cde:	6018      	str	r0, [r3, #0]
    char text[50] = {0};
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000ce6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000cea:	222e      	movs	r2, #46	@ 0x2e
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f007 fb94 	bl	800841c <memset>
    wchar_t wtext[50] = {0};
 8000cf4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	23c8      	movs	r3, #200	@ 0xc8
 8000d00:	461a      	mov	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f007 fb8a 	bl	800841c <memset>
    uint8_t x = 0, y = 0, fontSize = 0, speed = 0;
 8000d08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d0c:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d18:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d24:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
    Color_t color = BLACK;
 8000d38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d3c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000d40:	2200      	movs	r2, #0
 8000d42:	801a      	strh	r2, [r3, #0]

    if (!parseParameters(frame->data, "uuuust", &x, &y, &fontSize, &speed, &color, text)) {
 8000d44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	1d58      	adds	r0, r3, #5
 8000d50:	f107 0112 	add.w	r1, r7, #18
 8000d54:	f107 0213 	add.w	r2, r7, #19
 8000d58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d5c:	9303      	str	r3, [sp, #12]
 8000d5e:	f107 030e 	add.w	r3, r7, #14
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	f107 0311 	add.w	r3, r7, #17
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	460b      	mov	r3, r1
 8000d72:	4951      	ldr	r1, [pc, #324]	@ (8000eb8 <executeONN+0x1e8>)
 8000d74:	f7ff fd98 	bl	80008a8 <parseParameters>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f083 0301 	eor.w	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00d      	beq.n	8000da0 <executeONN+0xd0>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000d84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3305      	adds	r3, #5
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4b4a      	ldr	r3, [pc, #296]	@ (8000ebc <executeONN+0x1ec>)
 8000d94:	4a4a      	ldr	r2, [pc, #296]	@ (8000ec0 <executeONN+0x1f0>)
 8000d96:	2167      	movs	r1, #103	@ 0x67
 8000d98:	2068      	movs	r0, #104	@ 0x68
 8000d9a:	f000 f975 	bl	8001088 <prepareFrame>
 8000d9e:	e087      	b.n	8000eb0 <executeONN+0x1e0>
        return;
    }
    size_t textLen = strlen(text);
 8000da0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa13 	bl	80001d0 <strlen>
 8000daa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    for(size_t i = 0; i < textLen && i < 50; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000db4:	e013      	b.n	8000dde <executeONN+0x10e>
        wtext[i] = (wchar_t)text[i];
 8000db6:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8000dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dcc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(size_t i = 0; i < textLen && i < 50; i++) {
 8000dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dd8:	3301      	adds	r3, #1
 8000dda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000dde:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000de2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d203      	bcs.n	8000df2 <executeONN+0x122>
 8000dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dee:	2b31      	cmp	r3, #49	@ 0x31
 8000df0:	d9e1      	bls.n	8000db6 <executeONN+0xe6>
    }
    wtext[textLen] = L'\0';
 8000df2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000dfa:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    switch(fontSize)
 8000e04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e08:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d036      	beq.n	8000e80 <executeONN+0x1b0>
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	dc4c      	bgt.n	8000eb0 <executeONN+0x1e0>
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d002      	beq.n	8000e20 <executeONN+0x150>
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d018      	beq.n	8000e50 <executeONN+0x180>
 8000e1e:	e047      	b.n	8000eb0 <executeONN+0x1e0>
    {
        case 1:
            hagl_put_text(wtext, x, y, color, font5x7);
 8000e20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e24:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b219      	sxth	r1, r3
 8000e2c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e30:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e3c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	f107 0014 	add.w	r0, r7, #20
 8000e46:	4c1f      	ldr	r4, [pc, #124]	@ (8000ec4 <executeONN+0x1f4>)
 8000e48:	9400      	str	r4, [sp, #0]
 8000e4a:	f006 fb19 	bl	8007480 <hagl_put_text>
            break;
 8000e4e:	e02f      	b.n	8000eb0 <executeONN+0x1e0>
        case 2:
            hagl_put_text(wtext, x, y, color, font5x8);
 8000e50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e54:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b219      	sxth	r1, r3
 8000e5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e60:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e6c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	f107 0014 	add.w	r0, r7, #20
 8000e76:	4c14      	ldr	r4, [pc, #80]	@ (8000ec8 <executeONN+0x1f8>)
 8000e78:	9400      	str	r4, [sp, #0]
 8000e7a:	f006 fb01 	bl	8007480 <hagl_put_text>
            break;
 8000e7e:	e017      	b.n	8000eb0 <executeONN+0x1e0>
        case 3:
            hagl_put_text(wtext, x, y, color, font6x9);
 8000e80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e84:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b219      	sxth	r1, r3
 8000e8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e90:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e9c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	f107 0014 	add.w	r0, r7, #20
 8000ea6:	4c09      	ldr	r4, [pc, #36]	@ (8000ecc <executeONN+0x1fc>)
 8000ea8:	9400      	str	r4, [sp, #0]
 8000eaa:	f006 fae9 	bl	8007480 <hagl_put_text>
            break;
 8000eae:	bf00      	nop
    }
}
 8000eb0:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	080094b8 	.word	0x080094b8
 8000ebc:	0800948c 	.word	0x0800948c
 8000ec0:	080094a0 	.word	0x080094a0
 8000ec4:	0800955c 	.word	0x0800955c
 8000ec8:	0800ca64 	.word	0x0800ca64
 8000ecc:	0800f908 	.word	0x0800f908

08000ed0 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
* TODO naprawic wylaczenie oraz reset
************************************************************************/
static void executeOFF(Frame *frame)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	795b      	ldrb	r3, [r3, #5]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <executeOFF+0x16>
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d006      	beq.n	8000ef2 <executeOFF+0x22>
		break;
	case 1:
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
		break;
	}
}
 8000ee4:	e00e      	b.n	8000f04 <executeOFF+0x34>
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4808      	ldr	r0, [pc, #32]	@ (8000f0c <executeOFF+0x3c>)
 8000eec:	f001 ff7e 	bl	8002dec <HAL_GPIO_WritePin>
		break;
 8000ef0:	e008      	b.n	8000f04 <executeOFF+0x34>
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	22a0      	movs	r2, #160	@ 0xa0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f006 f91d 	bl	800713c <hagl_fill_rectangle>
		break;
 8000f02:	bf00      	nop
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	48000400 	.word	0x48000400

08000f10 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <isWithinBounds+0x26>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f24:	dc07      	bgt.n	8000f36 <isWithinBounds+0x26>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db04      	blt.n	8000f36 <isWithinBounds+0x26>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f30:	dc01      	bgt.n	8000f36 <isWithinBounds+0x26>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <isWithinBounds+0x28>
 8000f36:	2300      	movs	r3, #0
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const char *data, int *x, int *y)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a6      	sub	sp, #152	@ 0x98
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2280      	movs	r2, #128	@ 0x80
 8000f5e:	68f9      	ldr	r1, [r7, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 fa63 	bl	800842c <strncpy>

	    token = strtok(data_copy, ",");
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4915      	ldr	r1, [pc, #84]	@ (8000fc0 <parseCoordinates+0x74>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 fa71 	bl	8008454 <strtok>
 8000f72:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <parseCoordinates+0x36>
	        return false;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e01a      	b.n	8000fb8 <parseCoordinates+0x6c>
	    }
	    *x = atoi(token);
 8000f82:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000f86:	f006 ff09 	bl	8007d9c <atoi>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ",");
 8000f90:	490b      	ldr	r1, [pc, #44]	@ (8000fc0 <parseCoordinates+0x74>)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f007 fa5e 	bl	8008454 <strtok>
 8000f98:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000f9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <parseCoordinates+0x5c>
	        return false;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e007      	b.n	8000fb8 <parseCoordinates+0x6c>
	    }
	    *y = atoi(token);
 8000fa8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000fac:	f006 fef6 	bl	8007d9c <atoi>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]

	    return true;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3798      	adds	r7, #152	@ 0x98
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	080094c0 	.word	0x080094c0

08000fc4 <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	e04b      	b.n	8001072 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fe4:	d10e      	bne.n	8001004 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	617a      	str	r2, [r7, #20]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	227d      	movs	r2, #125	@ 0x7d
 8000ff2:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	617a      	str	r2, [r7, #20]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	225d      	movs	r2, #93	@ 0x5d
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e033      	b.n	800106c <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b7e      	cmp	r3, #126	@ 0x7e
 800100e:	d10e      	bne.n	800102e <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	617a      	str	r2, [r7, #20]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	227d      	movs	r2, #125	@ 0x7d
 800101c:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	617a      	str	r2, [r7, #20]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	225e      	movs	r2, #94	@ 0x5e
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e01e      	b.n	800106c <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b60      	cmp	r3, #96	@ 0x60
 8001038:	d10e      	bne.n	8001058 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	617a      	str	r2, [r7, #20]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	227d      	movs	r2, #125	@ 0x7d
 8001046:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	617a      	str	r2, [r7, #20]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	2226      	movs	r2, #38	@ 0x26
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e009      	b.n	800106c <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	441a      	add	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	1c59      	adds	r1, r3, #1
 8001062:	6179      	str	r1, [r7, #20]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	440b      	add	r3, r1
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	3301      	adds	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	429a      	cmp	r2, r3
 8001078:	d3af      	bcc.n	8000fda <byteStuffing+0x16>
        }
    }
    return j;
 800107a:	697b      	ldr	r3, [r7, #20]
}
 800107c:	4618      	mov	r0, r3
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8001088:	b408      	push	{r3}
 800108a:	b580      	push	{r7, lr}
 800108c:	b0b3      	sub	sp, #204	@ 0xcc
 800108e:	af02      	add	r7, sp, #8
 8001090:	4603      	mov	r3, r0
 8001092:	603a      	str	r2, [r7, #0]
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	460b      	mov	r3, r1
 8001098:	71bb      	strb	r3, [r7, #6]
	Frame frame = {0};
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	2285      	movs	r2, #133	@ 0x85
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f007 f9ba 	bl	800841c <memset>
    frame.sender = sender;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	767b      	strb	r3, [r7, #25]
    frame.receiver = receiver;
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	763b      	strb	r3, [r7, #24]
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	3302      	adds	r3, #2
 80010b6:	2203      	movs	r2, #3
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 f9b6 	bl	800842c <strncpy>

    // Użycie dynamicznej alokacji do przechowywania danych sformatowanych
    char *formatted_data = (char *)malloc(MAX_DATA_SIZE);
 80010c0:	2080      	movs	r0, #128	@ 0x80
 80010c2:	f006 fe6f 	bl	8007da4 <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (formatted_data == NULL) {
 80010cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80c2 	beq.w	800125a <prepareFrame+0x1d2>
        // Obsługa błędu alokacji pamięci
        return;
    }

    va_list args;
    va_start(args, format);
 80010d6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010da:	617b      	str	r3, [r7, #20]
    vsnprintf(formatted_data, MAX_DATA_SIZE, format, args);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80010e2:	2180      	movs	r1, #128	@ 0x80
 80010e4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80010e8:	f007 f97a 	bl	80083e0 <vsniprintf>
    va_end(args);

    size_t data_len = strlen(formatted_data);
 80010ec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80010f0:	f7ff f86e 	bl	80001d0 <strlen>
 80010f4:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    // Użycie dynamicznej alokacji do obliczeń CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 80010f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010fc:	3305      	adds	r3, #5
 80010fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint8_t *crc_input = (uint8_t *)malloc(crc_input_len);
 8001102:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001106:	f006 fe4d 	bl	8007da4 <malloc>
 800110a:	4603      	mov	r3, r0
 800110c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (crc_input == NULL) {
 8001110:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <prepareFrame+0x9a>
        // Obsługa błędu alokacji pamięci
        free(formatted_data);
 8001118:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800111c:	f006 fe4a 	bl	8007db4 <free>
        return;
 8001120:	e09c      	b.n	800125c <prepareFrame+0x1d4>
    }

    crc_input[0] = frame.sender;
 8001122:	7e7a      	ldrb	r2, [r7, #25]
 8001124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001128:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 800112a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800112e:	3301      	adds	r3, #1
 8001130:	7e3a      	ldrb	r2, [r7, #24]
 8001132:	701a      	strb	r2, [r3, #0]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 8001134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001138:	3302      	adds	r3, #2
 800113a:	461a      	mov	r2, r3
 800113c:	f107 031a 	add.w	r3, r7, #26
 8001140:	8819      	ldrh	r1, [r3, #0]
 8001142:	789b      	ldrb	r3, [r3, #2]
 8001144:	8011      	strh	r1, [r2, #0]
 8001146:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, formatted_data, data_len);
 8001148:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800114c:	3305      	adds	r3, #5
 800114e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001152:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001156:	4618      	mov	r0, r3
 8001158:	f007 fa5b 	bl	8008612 <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	461a      	mov	r2, r3
 8001162:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001166:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800116a:	f7ff fad3 	bl	8000714 <calculateCrc16>
    free(crc_input);  // Zwolnienie pamięci po zakończeniu używania
 800116e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001172:	f006 fe1f 	bl	8007db4 <free>

    // Użycie dynamicznej alokacji do przechowywania ramki
    size_t raw_payload_len = 2 + COMMAND_LENGTH + data_len + 4;
 8001176:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800117a:	3309      	adds	r3, #9
 800117c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint8_t *raw_payload = (uint8_t *)malloc(raw_payload_len);
 8001180:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001184:	f006 fe0e 	bl	8007da4 <malloc>
 8001188:	4603      	mov	r3, r0
 800118a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (raw_payload == NULL) {
 800118e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d104      	bne.n	80011a0 <prepareFrame+0x118>
        free(formatted_data);
 8001196:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800119a:	f006 fe0b 	bl	8007db4 <free>
        return;
 800119e:	e05d      	b.n	800125c <prepareFrame+0x1d4>
    }

    raw_payload[0] = frame.sender;
 80011a0:	7e7a      	ldrb	r2, [r7, #25]
 80011a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011a6:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 80011a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011ac:	3301      	adds	r3, #1
 80011ae:	7e3a      	ldrb	r2, [r7, #24]
 80011b0:	701a      	strb	r2, [r3, #0]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 80011b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011b6:	3302      	adds	r3, #2
 80011b8:	461a      	mov	r2, r3
 80011ba:	f107 031a 	add.w	r3, r7, #26
 80011be:	8819      	ldrh	r1, [r3, #0]
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	8011      	strh	r1, [r2, #0]
 80011c4:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, formatted_data, data_len);
 80011c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80011ca:	3305      	adds	r3, #5
 80011cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80011d0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80011d4:	4618      	mov	r0, r3
 80011d6:	f007 fa1c 	bl	8008612 <memcpy>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 80011da:	7c3b      	ldrb	r3, [r7, #16]
 80011dc:	461a      	mov	r2, r3
 80011de:	7c7b      	ldrb	r3, [r7, #17]
 80011e0:	f107 0008 	add.w	r0, r7, #8
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4613      	mov	r3, r2
 80011e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001268 <prepareFrame+0x1e0>)
 80011ea:	2105      	movs	r1, #5
 80011ec:	f007 f856 	bl	800829c <sniprintf>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 80011f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011f4:	3305      	adds	r3, #5
 80011f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80011fa:	4413      	add	r3, r2
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	601a      	str	r2, [r3, #0]
    free(formatted_data);  // Zwolnienie pamięci po zakończeniu używania
 8001200:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001204:	f006 fdd6 	bl	8007db4 <free>

    // Użycie dynamicznej alokacji do przechowywania danych po byte stuffing
    uint8_t *stuffed_payload = (uint8_t *)malloc(512);  // Maksymalny rozmiar bufora
 8001208:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800120c:	f006 fdca 	bl	8007da4 <malloc>
 8001210:	4603      	mov	r3, r0
 8001212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (stuffed_payload == NULL) {
 8001216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800121a:	2b00      	cmp	r3, #0
 800121c:	d104      	bne.n	8001228 <prepareFrame+0x1a0>
        free(raw_payload);
 800121e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001222:	f006 fdc7 	bl	8007db4 <free>
        return;
 8001226:	e019      	b.n	800125c <prepareFrame+0x1d4>
    }

    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 8001228:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800122c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001230:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001234:	f7ff fec6 	bl	8000fc4 <byteStuffing>
 8001238:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    free(raw_payload);  // Zwolnienie pamięci po zakończeniu używania
 800123c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001240:	f006 fdb8 	bl	8007db4 <free>

    // Wysyłanie ramki przez UART
    USART_sendFrame(stuffed_payload, stuffed_len);
 8001244:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001248:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800124c:	f7ff f9e6 	bl	800061c <USART_sendFrame>
    free(stuffed_payload);  // Zwolnienie pamięci po zakończeniu używania
 8001250:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001254:	f006 fdae 	bl	8007db4 <free>
 8001258:	e000      	b.n	800125c <prepareFrame+0x1d4>
        return;
 800125a:	bf00      	nop
}
 800125c:	37c4      	adds	r7, #196	@ 0xc4
 800125e:	46bd      	mov	sp, r7
 8001260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001264:	b001      	add	sp, #4
 8001266:	4770      	bx	lr
 8001268:	080094c4 	.word	0x080094c4

0800126c <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	4613      	mov	r3, r2
 8001278:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b06      	cmp	r3, #6
 800127e:	d948      	bls.n	8001312 <decodeFrame+0xa6>
            uint8_t k = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	75fa      	strb	r2, [r7, #23]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	75fa      	strb	r2, [r7, #23]
 800129c:	461a      	mov	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1c98      	adds	r0, r3, #2
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	2203      	movs	r2, #3
 80012b4:	4619      	mov	r1, r3
 80012b6:	f007 f9ac 	bl	8008612 <memcpy>
            k += COMMAND_LENGTH;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	3303      	adds	r3, #3
 80012be:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3b07      	subs	r3, #7
 80012c4:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1d58      	adds	r0, r3, #5
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	7dba      	ldrb	r2, [r7, #22]
 80012d2:	4619      	mov	r1, r3
 80012d4:	f007 f99d 	bl	8008612 <memcpy>
            k += data_len;
 80012d8:	7dfa      	ldrb	r2, [r7, #23]
 80012da:	7dbb      	ldrb	r3, [r7, #22]
 80012dc:	4413      	add	r3, r2
 80012de:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	823b      	strh	r3, [r7, #16]
            calculateCrc16((uint8_t *)frame, k, ownCrc);
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	f107 0214 	add.w	r2, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f7ff fa0d 	bl	8000714 <calculateCrc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80012fa:	7d3a      	ldrb	r2, [r7, #20]
 80012fc:	7c3b      	ldrb	r3, [r7, #16]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d103      	bne.n	800130a <decodeFrame+0x9e>
 8001302:	7d7a      	ldrb	r2, [r7, #21]
 8001304:	7c7b      	ldrb	r3, [r7, #17]
 8001306:	429a      	cmp	r2, r3
 8001308:	d001      	beq.n	800130e <decodeFrame+0xa2>
            	return false;
 800130a:	2300      	movs	r3, #0
 800130c:	e002      	b.n	8001314 <decodeFrame+0xa8>
            }
            return true;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <decodeFrame+0xa8>
        }
        return false;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <processReceivedChar>:
* Błędy:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b7e      	cmp	r3, #126	@ 0x7e
 800132a:	d11b      	bne.n	8001364 <processReceivedChar+0x48>
        if (!in_frame) {
 800132c:	4b4f      	ldr	r3, [pc, #316]	@ (800146c <processReceivedChar+0x150>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d009      	beq.n	800134e <processReceivedChar+0x32>
            in_frame = true;
 800133a:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <processReceivedChar+0x150>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
            bx_index = 0;
 8001340:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <processReceivedChar+0x154>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
            escape_detected = false;
 8001346:	4b4b      	ldr	r3, [pc, #300]	@ (8001474 <processReceivedChar+0x158>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
    	resetFrameState();
    }
}
 800134c:	e089      	b.n	8001462 <processReceivedChar+0x146>
        } else if(in_frame) {
 800134e:	4b47      	ldr	r3, [pc, #284]	@ (800146c <processReceivedChar+0x150>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8085 	beq.w	8001462 <processReceivedChar+0x146>
            resetFrameState();
 8001358:	f7ff fa90 	bl	800087c <resetFrameState>
            in_frame = true;
 800135c:	4b43      	ldr	r3, [pc, #268]	@ (800146c <processReceivedChar+0x150>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
}
 8001362:	e07e      	b.n	8001462 <processReceivedChar+0x146>
    } else if (received_char == FRAME_END) {
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b60      	cmp	r3, #96	@ 0x60
 8001368:	d12a      	bne.n	80013c0 <processReceivedChar+0xa4>
        if (in_frame) {
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <processReceivedChar+0x150>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01d      	beq.n	80013ae <processReceivedChar+0x92>
            if (decodeFrame(bx, &frame, bx_index)) {
 8001372:	4b3f      	ldr	r3, [pc, #252]	@ (8001470 <processReceivedChar+0x154>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	493f      	ldr	r1, [pc, #252]	@ (8001478 <processReceivedChar+0x15c>)
 800137c:	483f      	ldr	r0, [pc, #252]	@ (800147c <processReceivedChar+0x160>)
 800137e:	f7ff ff75 	bl	800126c <decodeFrame>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d009      	beq.n	800139c <processReceivedChar+0x80>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 8001388:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <processReceivedChar+0x164>)
 800138a:	4a3e      	ldr	r2, [pc, #248]	@ (8001484 <processReceivedChar+0x168>)
 800138c:	2167      	movs	r1, #103	@ 0x67
 800138e:	2068      	movs	r0, #104	@ 0x68
 8001390:	f7ff fe7a 	bl	8001088 <prepareFrame>
                handleCommand(&frame);
 8001394:	4838      	ldr	r0, [pc, #224]	@ (8001478 <processReceivedChar+0x15c>)
 8001396:	f000 f879 	bl	800148c <handleCommand>
 800139a:	e005      	b.n	80013a8 <processReceivedChar+0x8c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <processReceivedChar+0x16c>)
 800139e:	4a39      	ldr	r2, [pc, #228]	@ (8001484 <processReceivedChar+0x168>)
 80013a0:	2167      	movs	r1, #103	@ 0x67
 80013a2:	2068      	movs	r0, #104	@ 0x68
 80013a4:	f7ff fe70 	bl	8001088 <prepareFrame>
            resetFrameState();
 80013a8:	f7ff fa68 	bl	800087c <resetFrameState>
}
 80013ac:	e059      	b.n	8001462 <processReceivedChar+0x146>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80013ae:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <processReceivedChar+0x16c>)
 80013b0:	4a34      	ldr	r2, [pc, #208]	@ (8001484 <processReceivedChar+0x168>)
 80013b2:	2167      	movs	r1, #103	@ 0x67
 80013b4:	2068      	movs	r0, #104	@ 0x68
 80013b6:	f7ff fe67 	bl	8001088 <prepareFrame>
            resetFrameState();
 80013ba:	f7ff fa5f 	bl	800087c <resetFrameState>
}
 80013be:	e050      	b.n	8001462 <processReceivedChar+0x146>
    } else if (in_frame) {
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <processReceivedChar+0x150>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d04a      	beq.n	800145e <processReceivedChar+0x142>
        if (escape_detected) {
 80013c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <processReceivedChar+0x158>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d02f      	beq.n	8001430 <processReceivedChar+0x114>
            if (received_char == FRAME_START_STUFF) {
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b5e      	cmp	r3, #94	@ 0x5e
 80013d4:	d108      	bne.n	80013e8 <processReceivedChar+0xcc>
                bx[bx_index++] = FRAME_START;
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <processReceivedChar+0x154>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4924      	ldr	r1, [pc, #144]	@ (8001470 <processReceivedChar+0x154>)
 80013de:	600a      	str	r2, [r1, #0]
 80013e0:	4a26      	ldr	r2, [pc, #152]	@ (800147c <processReceivedChar+0x160>)
 80013e2:	217e      	movs	r1, #126	@ 0x7e
 80013e4:	54d1      	strb	r1, [r2, r3]
 80013e6:	e01f      	b.n	8001428 <processReceivedChar+0x10c>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b5d      	cmp	r3, #93	@ 0x5d
 80013ec:	d108      	bne.n	8001400 <processReceivedChar+0xe4>
                bx[bx_index++] = ESCAPE_CHAR;
 80013ee:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <processReceivedChar+0x154>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	491e      	ldr	r1, [pc, #120]	@ (8001470 <processReceivedChar+0x154>)
 80013f6:	600a      	str	r2, [r1, #0]
 80013f8:	4a20      	ldr	r2, [pc, #128]	@ (800147c <processReceivedChar+0x160>)
 80013fa:	217d      	movs	r1, #125	@ 0x7d
 80013fc:	54d1      	strb	r1, [r2, r3]
 80013fe:	e013      	b.n	8001428 <processReceivedChar+0x10c>
            } else if (received_char == FRAME_END_STUFF) {
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b26      	cmp	r3, #38	@ 0x26
 8001404:	d108      	bne.n	8001418 <processReceivedChar+0xfc>
                bx[bx_index++] = FRAME_END;
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <processReceivedChar+0x154>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	4918      	ldr	r1, [pc, #96]	@ (8001470 <processReceivedChar+0x154>)
 800140e:	600a      	str	r2, [r1, #0]
 8001410:	4a1a      	ldr	r2, [pc, #104]	@ (800147c <processReceivedChar+0x160>)
 8001412:	2160      	movs	r1, #96	@ 0x60
 8001414:	54d1      	strb	r1, [r2, r3]
 8001416:	e007      	b.n	8001428 <processReceivedChar+0x10c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <processReceivedChar+0x16c>)
 800141a:	4a1a      	ldr	r2, [pc, #104]	@ (8001484 <processReceivedChar+0x168>)
 800141c:	2167      	movs	r1, #103	@ 0x67
 800141e:	2068      	movs	r0, #104	@ 0x68
 8001420:	f7ff fe32 	bl	8001088 <prepareFrame>
                resetFrameState();
 8001424:	f7ff fa2a 	bl	800087c <resetFrameState>
            escape_detected = false;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <processReceivedChar+0x158>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
}
 800142e:	e018      	b.n	8001462 <processReceivedChar+0x146>
        } else if (received_char == ESCAPE_CHAR) {
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b7d      	cmp	r3, #125	@ 0x7d
 8001434:	d103      	bne.n	800143e <processReceivedChar+0x122>
            escape_detected = true;
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <processReceivedChar+0x158>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	e011      	b.n	8001462 <processReceivedChar+0x146>
            if (bx_index < sizeof(bx)) {
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <processReceivedChar+0x154>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2bff      	cmp	r3, #255	@ 0xff
 8001444:	d808      	bhi.n	8001458 <processReceivedChar+0x13c>
                bx[bx_index++] = received_char;
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <processReceivedChar+0x154>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	4908      	ldr	r1, [pc, #32]	@ (8001470 <processReceivedChar+0x154>)
 800144e:	600a      	str	r2, [r1, #0]
 8001450:	490a      	ldr	r1, [pc, #40]	@ (800147c <processReceivedChar+0x160>)
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	54ca      	strb	r2, [r1, r3]
}
 8001456:	e004      	b.n	8001462 <processReceivedChar+0x146>
            	resetFrameState();
 8001458:	f7ff fa10 	bl	800087c <resetFrameState>
}
 800145c:	e001      	b.n	8001462 <processReceivedChar+0x146>
    	resetFrameState();
 800145e:	f7ff fa0d 	bl	800087c <resetFrameState>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000cb4 	.word	0x20000cb4
 8001470:	20000cb0 	.word	0x20000cb0
 8001474:	20000cac 	.word	0x20000cac
 8001478:	20000cb8 	.word	0x20000cb8
 800147c:	20000bac 	.word	0x20000bac
 8001480:	080094d0 	.word	0x080094d0
 8001484:	080094a0 	.word	0x080094a0
 8001488:	080094d8 	.word	0x080094d8

0800148c <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b092      	sub	sp, #72	@ 0x48
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8090 	beq.w	80015bc <handleCommand+0x130>
        return;
    }

    CommandEntry commandTable[COMMAND_COUNT] = {
 800149c:	4b49      	ldr	r3, [pc, #292]	@ (80015c4 <handleCommand+0x138>)
 800149e:	f107 0414 	add.w	r4, r7, #20
 80014a2:	461d      	mov	r5, r3
 80014a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014b0:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };

    for (int i = 0; i < COMMAND_COUNT; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014b8:	e073      	b.n	80015a2 <handleCommand+0x116>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	1c98      	adds	r0, r3, #2
 80014be:	f107 0214 	add.w	r2, r7, #20
 80014c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	2203      	movs	r2, #3
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff f97e 	bl	80007cc <safeCompare>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d062      	beq.n	800159c <handleCommand+0x110>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 80014d6:	f107 0214 	add.w	r2, r7, #20
 80014da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	2203      	movs	r2, #3
 80014e2:	4939      	ldr	r1, [pc, #228]	@ (80015c8 <handleCommand+0x13c>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f971 	bl	80007cc <safeCompare>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d017      	beq.n	8001520 <handleCommand+0x94>
                    lcdClear();
 80014f0:	f000 f9f6 	bl	80018e0 <lcdClear>
                    commandTable[i].function(frame);
 80014f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	3340      	adds	r3, #64	@ 0x40
 80014fa:	443b      	add	r3, r7
 80014fc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
                    if (!lcdIsBusy()) {
 8001504:	f000 fa64 	bl	80019d0 <lcdIsBusy>
 8001508:	4603      	mov	r3, r0
 800150a:	f083 0301 	eor.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <handleCommand+0x8c>
                        lcdCopy();
 8001514:	f000 f9b8 	bl	8001888 <lcdCopy>
                    }
                    clearFrame(frame);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fa8d 	bl	8000a38 <clearFrame>
                    return;
 800151e:	e04e      	b.n	80015be <handleCommand+0x132>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3305      	adds	r3, #5
 8001524:	f107 020c 	add.w	r2, r7, #12
 8001528:	f107 0110 	add.w	r1, r7, #16
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd0d 	bl	8000f4c <parseCoordinates>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d027      	beq.n	8001588 <handleCommand+0xfc>
                    if (isWithinBounds(x, y)) {
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fce6 	bl	8000f10 <isWithinBounds>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d017      	beq.n	800157a <handleCommand+0xee>
                        lcdClear();
 800154a:	f000 f9c9 	bl	80018e0 <lcdClear>
                        commandTable[i].function(frame);
 800154e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	3340      	adds	r3, #64	@ 0x40
 8001554:	443b      	add	r3, r7
 8001556:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
                        if (!lcdIsBusy()) {
 800155e:	f000 fa37 	bl	80019d0 <lcdIsBusy>
 8001562:	4603      	mov	r3, r0
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <handleCommand+0xe6>
                            lcdCopy();
 800156e:	f000 f98b 	bl	8001888 <lcdCopy>
                        }
                        clearFrame(frame);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fa60 	bl	8000a38 <clearFrame>
                        return;
 8001578:	e021      	b.n	80015be <handleCommand+0x132>
                    } else {
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <handleCommand+0x140>)
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <handleCommand+0x144>)
 800157e:	2167      	movs	r1, #103	@ 0x67
 8001580:	2068      	movs	r0, #104	@ 0x68
 8001582:	f7ff fd81 	bl	8001088 <prepareFrame>
                    return;
 8001586:	e01a      	b.n	80015be <handleCommand+0x132>
                }
            } else {
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3305      	adds	r3, #5
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <handleCommand+0x148>)
 8001590:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <handleCommand+0x144>)
 8001592:	2167      	movs	r1, #103	@ 0x67
 8001594:	2068      	movs	r0, #104	@ 0x68
 8001596:	f7ff fd77 	bl	8001088 <prepareFrame>
                return;
 800159a:	e010      	b.n	80015be <handleCommand+0x132>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 800159c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800159e:	3301      	adds	r3, #1
 80015a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	dd88      	ble.n	80014ba <handleCommand+0x2e>
            }
        }
    }
    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3302      	adds	r3, #2
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <handleCommand+0x148>)
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <handleCommand+0x144>)
 80015b2:	2167      	movs	r1, #103	@ 0x67
 80015b4:	2068      	movs	r0, #104	@ 0x68
 80015b6:	f7ff fd67 	bl	8001088 <prepareFrame>
 80015ba:	e000      	b.n	80015be <handleCommand+0x132>
        return;
 80015bc:	bf00      	nop
}
 80015be:	3740      	adds	r7, #64	@ 0x40
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	080094f4 	.word	0x080094f4
 80015c8:	080094e0 	.word	0x080094e0
 80015cc:	080094e4 	.word	0x080094e4
 80015d0:	080094a0 	.word	0x080094a0
 80015d4:	0800948c 	.word	0x0800948c

080015d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001718 <MX_GPIO_Init+0x140>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a49      	ldr	r2, [pc, #292]	@ (8001718 <MX_GPIO_Init+0x140>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <MX_GPIO_Init+0x140>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001606:	4b44      	ldr	r3, [pc, #272]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4a43      	ldr	r2, [pc, #268]	@ (8001718 <MX_GPIO_Init+0x140>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001612:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	4a3d      	ldr	r2, [pc, #244]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162a:	4b3b      	ldr	r3, [pc, #236]	@ (8001718 <MX_GPIO_Init+0x140>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b38      	ldr	r3, [pc, #224]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163a:	4a37      	ldr	r2, [pc, #220]	@ (8001718 <MX_GPIO_Init+0x140>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001642:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a31      	ldr	r2, [pc, #196]	@ (8001718 <MX_GPIO_Init+0x140>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <MX_GPIO_Init+0x140>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f641 0106 	movw	r1, #6150	@ 0x1806
 800166c:	482b      	ldr	r0, [pc, #172]	@ (800171c <MX_GPIO_Init+0x144>)
 800166e:	f001 fbbd 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001672:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8001676:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001678:	2303      	movs	r3, #3
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4826      	ldr	r0, [pc, #152]	@ (8001720 <MX_GPIO_Init+0x148>)
 8001688:	f001 fa06 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800168c:	2303      	movs	r3, #3
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4821      	ldr	r0, [pc, #132]	@ (8001724 <MX_GPIO_Init+0x14c>)
 80016a0:	f001 f9fa 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80016a4:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80016a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016bc:	f001 f9ec 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80016c0:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 80016c4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4811      	ldr	r0, [pc, #68]	@ (800171c <MX_GPIO_Init+0x144>)
 80016d6:	f001 f9df 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 80016da:	f641 0306 	movw	r3, #6150	@ 0x1806
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	480a      	ldr	r0, [pc, #40]	@ (800171c <MX_GPIO_Init+0x144>)
 80016f4:	f001 f9d0 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f8:	2304      	movs	r3, #4
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4807      	ldr	r0, [pc, #28]	@ (8001728 <MX_GPIO_Init+0x150>)
 800170c:	f001 f9c4 	bl	8002a98 <HAL_GPIO_Init>

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800
 8001724:	48001c00 	.word	0x48001c00
 8001728:	48000c00 	.word	0x48000c00

0800172c <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <lcdCmd+0x44>)
 800173e:	f001 fb55 	bl	8002dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001748:	4809      	ldr	r0, [pc, #36]	@ (8001770 <lcdCmd+0x44>)
 800174a:	f001 fb4f 	bl	8002dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800174e:	1df9      	adds	r1, r7, #7
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	2201      	movs	r2, #1
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <lcdCmd+0x48>)
 8001758:	f002 ff23 	bl	80045a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001762:	4803      	ldr	r0, [pc, #12]	@ (8001770 <lcdCmd+0x44>)
 8001764:	f001 fb42 	bl	8002dec <HAL_GPIO_WritePin>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	48000400 	.word	0x48000400
 8001774:	2000ad48 	.word	0x2000ad48

08001778 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <lcdData+0x44>)
 800178a:	f001 fb2f 	bl	8002dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <lcdData+0x44>)
 8001796:	f001 fb29 	bl	8002dec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800179a:	1df9      	adds	r1, r7, #7
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	2201      	movs	r2, #1
 80017a2:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <lcdData+0x48>)
 80017a4:	f002 fefd 	bl	80045a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ae:	4803      	ldr	r0, [pc, #12]	@ (80017bc <lcdData+0x44>)
 80017b0:	f001 fb1c 	bl	8002dec <HAL_GPIO_WritePin>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	48000400 	.word	0x48000400
 80017c0:	2000ad48 	.word	0x2000ad48

080017c4 <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <lcdSend+0x20>
		lcdCmd(value);
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ffa5 	bl	800172c <lcdCmd>
	} else {
		lcdData(value);
	}
}
 80017e2:	e004      	b.n	80017ee <lcdSend+0x2a>
		lcdData(value);
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ffc5 	bl	8001778 <lcdData>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b29b      	uxth	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ffb5 	bl	8001778 <lcdData>
	lcdData(value);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffb0 	bl	8001778 <lcdData>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 800182e:	202a      	movs	r0, #42	@ 0x2a
 8001830:	f7ff ff7c 	bl	800172c <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	b29b      	uxth	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ffda 	bl	80017f6 <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b29a      	uxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ffd1 	bl	80017f6 <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001854:	202b      	movs	r0, #43	@ 0x2b
 8001856:	f7ff ff69 	bl	800172c <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	b29b      	uxth	r3, r3
 800185e:	3302      	adds	r3, #2
 8001860:	b29b      	uxth	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ffc7 	bl	80017f6 <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	b29a      	uxth	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	3301      	adds	r3, #1
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ffbc 	bl	80017f6 <lcdData16>
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 800188c:	f000 f8a0 	bl	80019d0 <lcdIsBusy>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d11b      	bne.n	80018ce <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001896:	2380      	movs	r3, #128	@ 0x80
 8001898:	22a0      	movs	r2, #160	@ 0xa0
 800189a:	2100      	movs	r1, #0
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ffbf 	bl	8001820 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 80018a2:	202c      	movs	r0, #44	@ 0x2c
 80018a4:	f7ff ff42 	bl	800172c <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ae:	4809      	ldr	r0, [pc, #36]	@ (80018d4 <lcdCopy+0x4c>)
 80018b0:	f001 fa9c 	bl	8002dec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <lcdCopy+0x4c>)
 80018bc:	f001 fa96 	bl	8002dec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 80018c0:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80018c4:	4904      	ldr	r1, [pc, #16]	@ (80018d8 <lcdCopy+0x50>)
 80018c6:	4805      	ldr	r0, [pc, #20]	@ (80018dc <lcdCopy+0x54>)
 80018c8:	f002 ffe2 	bl	8004890 <HAL_SPI_Transmit_DMA>
 80018cc:	e000      	b.n	80018d0 <lcdCopy+0x48>
        return;
 80018ce:	bf00      	nop
}
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	48000400 	.word	0x48000400
 80018d8:	20000d40 	.word	0x20000d40
 80018dc:	2000ad48 	.word	0x2000ad48

080018e0 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 80018e4:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80018e8:	2100      	movs	r1, #0
 80018ea:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <lcdClear+0x14>)
 80018ec:	f006 fd96 	bl	800841c <memset>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000d40 	.word	0x20000d40

080018f8 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2104      	movs	r1, #4
 8001902:	481c      	ldr	r0, [pc, #112]	@ (8001974 <lcdInit+0x7c>)
 8001904:	f001 fa72 	bl	8002dec <HAL_GPIO_WritePin>
    delay(100);
 8001908:	2064      	movs	r0, #100	@ 0x64
 800190a:	f000 f8d5 	bl	8001ab8 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	2104      	movs	r1, #4
 8001912:	4818      	ldr	r0, [pc, #96]	@ (8001974 <lcdInit+0x7c>)
 8001914:	f001 fa6a 	bl	8002dec <HAL_GPIO_WritePin>
    delay(100);
 8001918:	2064      	movs	r0, #100	@ 0x64
 800191a:	f000 f8cd 	bl	8001ab8 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	e009      	b.n	8001938 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <lcdInit+0x80>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff49 	bl	80017c4 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3301      	adds	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b4b      	cmp	r3, #75	@ 0x4b
 800193c:	d9f2      	bls.n	8001924 <lcdInit+0x2c>
    }
    delay(200);
 800193e:	20c8      	movs	r0, #200	@ 0xc8
 8001940:	f000 f8ba 	bl	8001ab8 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001944:	2011      	movs	r0, #17
 8001946:	f7ff fef1 	bl	800172c <lcdCmd>
    delay(120);
 800194a:	2078      	movs	r0, #120	@ 0x78
 800194c:	f000 f8b4 	bl	8001ab8 <delay>
    lcdCmd(ST7735S_DISPON);
 8001950:	2029      	movs	r0, #41	@ 0x29
 8001952:	f7ff feeb 	bl	800172c <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2102      	movs	r1, #2
 800195a:	4806      	ldr	r0, [pc, #24]	@ (8001974 <lcdInit+0x7c>)
 800195c:	f001 fa46 	bl	8002dec <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001960:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001964:	2100      	movs	r1, #0
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <lcdInit+0x84>)
 8001968:	f006 fd58 	bl	800841c <memset>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	48000400 	.word	0x48000400
 8001978:	080128c0 	.word	0x080128c0
 800197c:	20000d40 	.word	0x20000d40

08001980 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	4613      	mov	r3, r2
 800198c:	80fb      	strh	r3, [r7, #6]
    if (x >= 0 && x < LCD_WIDTH && y >= 0 && y < LCD_HEIGHT) {
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db14      	blt.n	80019be <lcdPutPixel+0x3e>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b9f      	cmp	r3, #159	@ 0x9f
 8001998:	dc11      	bgt.n	80019be <lcdPutPixel+0x3e>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0e      	blt.n	80019be <lcdPutPixel+0x3e>
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80019a4:	dc0b      	bgt.n	80019be <lcdPutPixel+0x3e>
        frameBuffer[y * LCD_WIDTH + x] = color;
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	015b      	lsls	r3, r3, #5
 80019b0:	461a      	mov	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4413      	add	r3, r2
 80019b6:	4905      	ldr	r1, [pc, #20]	@ (80019cc <lcdPutPixel+0x4c>)
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000d40 	.word	0x20000d40

080019d0 <lcdIsBusy>:
bool lcdIsBusy(void) {
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
    return transferInProgress;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <lcdIsBusy+0x14>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	2000ad40 	.word	0x2000ad40

080019e8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a08      	ldr	r2, [pc, #32]	@ (8001a14 <HAL_SPI_TxCpltCallback+0x2c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d108      	bne.n	8001a0a <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <HAL_SPI_TxCpltCallback+0x30>)
 8001a00:	f001 f9f4 	bl	8002dec <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_SPI_TxCpltCallback+0x34>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
    }
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000ad48 	.word	0x2000ad48
 8001a18:	48000400 	.word	0x48000400
 8001a1c:	2000ad40 	.word	0x2000ad40

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a84:	d301      	bcc.n	8001a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00f      	b.n	8001aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <SysTick_Config+0x40>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a92:	210f      	movs	r1, #15
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f7ff ffc2 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <SysTick_Config+0x40>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa2:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <SysTick_Config+0x40>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	e000e010 	.word	0xe000e010

08001ab8 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <delay+0x2c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001ac6:	bf00      	nop
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	441a      	add	r2, r3
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <delay+0x2c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d8f8      	bhi.n	8001ac8 <delay+0x10>
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	2000ad44 	.word	0x2000ad44

08001ae8 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001aee:	f7fe fd59 	bl	80005a4 <USART_kbhit>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001af8:	f7fe fd66 	bl	80005c8 <USART_getchar>
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fc0a 	bl	800131c <processReceivedChar>
	 }
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f000 fbc3 	bl	800229e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f812 	bl	8001b40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001b1c:	4807      	ldr	r0, [pc, #28]	@ (8001b3c <main+0x2c>)
 8001b1e:	f7ff ffa9 	bl	8001a74 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f7ff fd59 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b26:	f7fe fe33 	bl	8000790 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b2a:	f000 fae3 	bl	80020f4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001b2e:	f000 f85f 	bl	8001bf0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001b32:	f7ff fee1 	bl	80018f8 <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
	  waitForFrame();
 8001b36:	f7ff ffd7 	bl	8001ae8 <waitForFrame>
 8001b3a:	e7fc      	b.n	8001b36 <main+0x26>
 8001b3c:	00013880 	.word	0x00013880

08001b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b096      	sub	sp, #88	@ 0x58
 8001b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	2244      	movs	r2, #68	@ 0x44
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f006 fc64 	bl	800841c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b66:	f001 f967 	bl	8002e38 <HAL_PWREx_ControlVoltageScaling>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b70:	f000 f838 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b74:	2310      	movs	r3, #16
 8001b76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b80:	2360      	movs	r3, #96	@ 0x60
 8001b82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b84:	2302      	movs	r3, #2
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b90:	2328      	movs	r3, #40	@ 0x28
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b94:	2307      	movs	r3, #7
 8001b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 f99d 	bl	8002ee4 <HAL_RCC_OscConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001bb0:	f000 f818 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2104      	movs	r1, #4
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fd65 	bl	800369c <HAL_RCC_ClockConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001bd8:	f000 f804 	bl	8001be4 <Error_Handler>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3758      	adds	r7, #88	@ 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <Error_Handler+0x8>

08001bf0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c68 <MX_SPI2_Init+0x78>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001bfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c08:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c0a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c0e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c10:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c22:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c26:	2210      	movs	r2, #16
 8001c28:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c3e:	2207      	movs	r2, #7
 8001c40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <MX_SPI2_Init+0x74>)
 8001c50:	f002 fc04 	bl	800445c <HAL_SPI_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f7ff ffc3 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000ad48 	.word	0x2000ad48
 8001c68:	40003800 	.word	0x40003800

08001c6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3e      	ldr	r2, [pc, #248]	@ (8001d84 <HAL_SPI_MspInit+0x118>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d175      	bne.n	8001d7a <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	4a3d      	ldr	r2, [pc, #244]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	4a37      	ldr	r2, [pc, #220]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb2:	4b35      	ldr	r3, [pc, #212]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b32      	ldr	r3, [pc, #200]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	4a31      	ldr	r2, [pc, #196]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cca:	4b2f      	ldr	r3, [pc, #188]	@ (8001d88 <HAL_SPI_MspInit+0x11c>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4826      	ldr	r0, [pc, #152]	@ (8001d8c <HAL_SPI_MspInit+0x120>)
 8001cf2:	f000 fed1 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d08:	2305      	movs	r3, #5
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	481f      	ldr	r0, [pc, #124]	@ (8001d90 <HAL_SPI_MspInit+0x124>)
 8001d14:	f000 fec0 	bl	8002a98 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d98 <HAL_SPI_MspInit+0x12c>)
 8001d1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d26:	2210      	movs	r2, #16
 8001d28:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d30:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d32:	2280      	movs	r2, #128	@ 0x80
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001d42:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d4e:	4811      	ldr	r0, [pc, #68]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d50:	f000 fc2c 	bl	80025ac <HAL_DMA_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001d5a:	f7ff ff43 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d64:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_SPI_MspInit+0x128>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2024      	movs	r0, #36	@ 0x24
 8001d70:	f000 fbe5 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d74:	2024      	movs	r0, #36	@ 0x24
 8001d76:	f000 fbfe 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40003800 	.word	0x40003800
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000800 	.word	0x48000800
 8001d90:	48000400 	.word	0x48000400
 8001d94:	2000adac 	.word	0x2000adac
 8001d98:	40020058 	.word	0x40020058

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_MspInit+0x44>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da6:	4a0e      	ldr	r2, [pc, #56]	@ (8001de0 <HAL_MspInit+0x44>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_MspInit+0x44>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_MspInit+0x44>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <NMI_Handler+0x4>

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 fa84 	bl	8002348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <SysTick_Handler+0x18>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a02      	ldr	r2, [pc, #8]	@ (8001e50 <SysTick_Handler+0x18>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000ad44 	.word	0x2000ad44

08001e54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <DMA1_Channel5_IRQHandler+0x10>)
 8001e5a:	f000 fd3e 	bl	80028da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000adac 	.word	0x2000adac

08001e68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <SPI2_IRQHandler+0x10>)
 8001e6e:	f002 fdfd 	bl	8004a6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000ad48 	.word	0x2000ad48

08001e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <USART2_IRQHandler+0x10>)
 8001e82:	f003 f9ed 	bl	8005260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000adf8 	.word	0x2000adf8

08001e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_kill>:

int _kill(int pid, int sig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eaa:	f006 fb85 	bl	80085b8 <__errno>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2216      	movs	r2, #22
 8001eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_exit>:

void _exit (int status)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffe7 	bl	8001ea0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ed2:	bf00      	nop
 8001ed4:	e7fd      	b.n	8001ed2 <_exit+0x12>

08001ed6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e00a      	b.n	8001efe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee8:	f3af 8000 	nop.w
 8001eec:	4601      	mov	r1, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60ba      	str	r2, [r7, #8]
 8001ef4:	b2ca      	uxtb	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dbf0      	blt.n	8001ee8 <_read+0x12>
  }

  return len;
 8001f06:	687b      	ldr	r3, [r7, #4]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e009      	b.n	8001f36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	60ba      	str	r2, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dbf1      	blt.n	8001f22 <_write+0x12>
  }
  return len;
 8001f3e:	687b      	ldr	r3, [r7, #4]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_close>:

int _close(int file)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f70:	605a      	str	r2, [r3, #4]
  return 0;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_isatty>:

int _isatty(int file)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f006 faea 	bl	80085b8 <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20018000 	.word	0x20018000
 8002010:	00001000 	.word	0x00001000
 8002014:	2000adf4 	.word	0x2000adf4
 8002018:	2000afd0 	.word	0x2000afd0

0800201c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <SystemInit+0x20>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <SystemInit+0x20>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <HAL_UART_TxCpltCallback+0x58>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d11e      	bne.n	800208e <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_UART_TxCpltCallback+0x5c>)
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_UART_TxCpltCallback+0x5c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d018      	beq.n	800208e <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_UART_TxCpltCallback+0x5c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <HAL_UART_TxCpltCallback+0x60>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_UART_TxCpltCallback+0x5c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	3301      	adds	r3, #1
 800206c:	4a0b      	ldr	r2, [pc, #44]	@ (800209c <HAL_UART_TxCpltCallback+0x5c>)
 800206e:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_UART_TxCpltCallback+0x5c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002078:	d302      	bcc.n	8002080 <HAL_UART_TxCpltCallback+0x40>
 800207a:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_UART_TxCpltCallback+0x5c>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8002080:	f107 030f 	add.w	r3, r7, #15
 8002084:	2201      	movs	r2, #1
 8002086:	4619      	mov	r1, r3
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <HAL_UART_TxCpltCallback+0x58>)
 800208a:	f003 f83f 	bl	800510c <HAL_UART_Transmit_IT>
	   }
   }
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000adf8 	.word	0x2000adf8
 800209c:	2000029c 	.word	0x2000029c
 80020a0:	200002ac 	.word	0x200002ac

080020a4 <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_UART_RxCpltCallback+0x44>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d114      	bne.n	80020de <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <HAL_UART_RxCpltCallback+0x48>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <HAL_UART_RxCpltCallback+0x48>)
 80020bc:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_UART_RxCpltCallback+0x48>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2bff      	cmp	r3, #255	@ 0xff
 80020c4:	d902      	bls.n	80020cc <HAL_UART_RxCpltCallback+0x28>
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_UART_RxCpltCallback+0x48>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <HAL_UART_RxCpltCallback+0x48>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_UART_RxCpltCallback+0x4c>)
 80020d2:	4413      	add	r3, r2
 80020d4:	2201      	movs	r2, #1
 80020d6:	4619      	mov	r1, r3
 80020d8:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <HAL_UART_RxCpltCallback+0x44>)
 80020da:	f003 f875 	bl	80051c8 <HAL_UART_Receive_IT>

	 }
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000adf8 	.word	0x2000adf8
 80020ec:	2000028c 	.word	0x2000028c
 80020f0:	20000aac 	.word	0x20000aac

080020f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <MX_USART2_UART_Init+0x78>)
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <MX_USART2_UART_Init+0x7c>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b17      	ldr	r3, [pc, #92]	@ (800216c <MX_USART2_UART_Init+0x78>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <MX_USART2_UART_Init+0x78>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b13      	ldr	r3, [pc, #76]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <MX_USART2_UART_Init+0x78>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002132:	2200      	movs	r2, #0
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002136:	480d      	ldr	r0, [pc, #52]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002138:	f002 ff9a 	bl	8005070 <HAL_UART_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002142:	f7ff fd4f 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 8002146:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800214a:	490a      	ldr	r1, [pc, #40]	@ (8002174 <MX_USART2_UART_Init+0x80>)
 800214c:	480a      	ldr	r0, [pc, #40]	@ (8002178 <MX_USART2_UART_Init+0x84>)
 800214e:	f7fe fa0f 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 8002152:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002156:	4909      	ldr	r1, [pc, #36]	@ (800217c <MX_USART2_UART_Init+0x88>)
 8002158:	4809      	ldr	r0, [pc, #36]	@ (8002180 <MX_USART2_UART_Init+0x8c>)
 800215a:	f7fe fa09 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 800215e:	2201      	movs	r2, #1
 8002160:	4904      	ldr	r1, [pc, #16]	@ (8002174 <MX_USART2_UART_Init+0x80>)
 8002162:	4802      	ldr	r0, [pc, #8]	@ (800216c <MX_USART2_UART_Init+0x78>)
 8002164:	f003 f830 	bl	80051c8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000adf8 	.word	0x2000adf8
 8002170:	40004400 	.word	0x40004400
 8002174:	20000aac 	.word	0x20000aac
 8002178:	2000028c 	.word	0x2000028c
 800217c:	200002ac 	.word	0x200002ac
 8002180:	2000029c 	.word	0x2000029c

08002184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0ac      	sub	sp, #176	@ 0xb0
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2288      	movs	r2, #136	@ 0x88
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f006 f939 	bl	800841c <memset>
  if(uartHandle->Instance==USART2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a25      	ldr	r2, [pc, #148]	@ (8002244 <HAL_UART_MspInit+0xc0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d143      	bne.n	800223c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021b8:	2300      	movs	r3, #0
 80021ba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 fc8f 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021cc:	f7ff fd0a 	bl	8001be4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <HAL_UART_MspInit+0xc4>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_UART_MspInit+0xc4>)
 80021d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021da:	6593      	str	r3, [r2, #88]	@ 0x58
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <HAL_UART_MspInit+0xc4>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <HAL_UART_MspInit+0xc4>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ec:	4a16      	ldr	r2, [pc, #88]	@ (8002248 <HAL_UART_MspInit+0xc4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_UART_MspInit+0xc4>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002200:	230c      	movs	r3, #12
 8002202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002218:	2307      	movs	r3, #7
 800221a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002228:	f000 fc36 	bl	8002a98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2026      	movs	r0, #38	@ 0x26
 8002232:	f000 f984 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002236:	2026      	movs	r0, #38	@ 0x26
 8002238:	f000 f99d 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800223c:	bf00      	nop
 800223e:	37b0      	adds	r7, #176	@ 0xb0
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40004400 	.word	0x40004400
 8002248:	40021000 	.word	0x40021000

0800224c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800224c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002284 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002250:	f7ff fee4 	bl	800201c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002254:	480c      	ldr	r0, [pc, #48]	@ (8002288 <LoopForever+0x6>)
  ldr r1, =_edata
 8002256:	490d      	ldr	r1, [pc, #52]	@ (800228c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002258:	4a0d      	ldr	r2, [pc, #52]	@ (8002290 <LoopForever+0xe>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800225c:	e002      	b.n	8002264 <LoopCopyDataInit>

0800225e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002262:	3304      	adds	r3, #4

08002264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002268:	d3f9      	bcc.n	800225e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226a:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800226c:	4c0a      	ldr	r4, [pc, #40]	@ (8002298 <LoopForever+0x16>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002270:	e001      	b.n	8002276 <LoopFillZerobss>

08002272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002274:	3204      	adds	r2, #4

08002276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002278:	d3fb      	bcc.n	8002272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800227a:	f006 f9a3 	bl	80085c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800227e:	f7ff fc47 	bl	8001b10 <main>

08002282 <LoopForever>:

LoopForever:
    b LoopForever
 8002282:	e7fe      	b.n	8002282 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002284:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002290:	08012b94 	.word	0x08012b94
  ldr r2, =_sbss
 8002294:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002298:	2000afd0 	.word	0x2000afd0

0800229c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC1_2_IRQHandler>

0800229e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 f93d 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ae:	200f      	movs	r0, #15
 80022b0:	f000 f80e 	bl	80022d0 <HAL_InitTick>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	e001      	b.n	80022c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c0:	f7ff fd6c 	bl	8001d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022c4:	79fb      	ldrb	r3, [r7, #7]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022dc:	4b17      	ldr	r3, [pc, #92]	@ (800233c <HAL_InitTick+0x6c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d023      	beq.n	800232c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022e4:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <HAL_InitTick+0x70>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b14      	ldr	r3, [pc, #80]	@ (800233c <HAL_InitTick+0x6c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f949 	bl	8002592 <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d809      	bhi.n	8002320 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 f913 	bl	800253e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002318:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <HAL_InitTick+0x74>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e007      	b.n	8002330 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e004      	b.n	8002330 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e001      	b.n	8002330 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000208 	.word	0x20000208
 8002340:	20000200 	.word	0x20000200
 8002344:	20000204 	.word	0x20000204

08002348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_IncTick+0x20>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_IncTick+0x24>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	@ (800236c <HAL_IncTick+0x24>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000208 	.word	0x20000208
 800236c:	2000ae80 	.word	0x2000ae80

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	2000ae80 	.word	0x2000ae80

08002388 <__NVIC_SetPriorityGrouping>:
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	@ (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	@ (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	@ (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	@ 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Config>:
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7ff ff8e 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff29 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff3e 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff8e 	bl	800247c <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff31 	bl	80023ec <__NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffa2 	bl	80024e4 <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e098      	b.n	80026f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <HAL_DMA_Init+0x150>)
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d80f      	bhi.n	80025ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002700 <HAL_DMA_Init+0x154>)
 80025d2:	4413      	add	r3, r2
 80025d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002704 <HAL_DMA_Init+0x158>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	009a      	lsls	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_DMA_Init+0x15c>)
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80025e8:	e00e      	b.n	8002608 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_DMA_Init+0x160>)
 80025f2:	4413      	add	r3, r2
 80025f4:	4a43      	ldr	r2, [pc, #268]	@ (8002704 <HAL_DMA_Init+0x158>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	009a      	lsls	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a42      	ldr	r2, [pc, #264]	@ (8002710 <HAL_DMA_Init+0x164>)
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800261e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002622:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800262c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002662:	d039      	beq.n	80026d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	4a27      	ldr	r2, [pc, #156]	@ (8002708 <HAL_DMA_Init+0x15c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d11a      	bne.n	80026a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800266e:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <HAL_DMA_Init+0x168>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f003 031c 	and.w	r3, r3, #28
 800267a:	210f      	movs	r1, #15
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	4924      	ldr	r1, [pc, #144]	@ (8002714 <HAL_DMA_Init+0x168>)
 8002684:	4013      	ands	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_DMA_Init+0x168>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	f003 031c 	and.w	r3, r3, #28
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	491d      	ldr	r1, [pc, #116]	@ (8002714 <HAL_DMA_Init+0x168>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
 80026a2:	e019      	b.n	80026d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002718 <HAL_DMA_Init+0x16c>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	f003 031c 	and.w	r3, r3, #28
 80026b0:	210f      	movs	r1, #15
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	4917      	ldr	r1, [pc, #92]	@ (8002718 <HAL_DMA_Init+0x16c>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_DMA_Init+0x16c>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f003 031c 	and.w	r3, r3, #28
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	4911      	ldr	r1, [pc, #68]	@ (8002718 <HAL_DMA_Init+0x16c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40020407 	.word	0x40020407
 8002700:	bffdfff8 	.word	0xbffdfff8
 8002704:	cccccccd 	.word	0xcccccccd
 8002708:	40020000 	.word	0x40020000
 800270c:	bffdfbf8 	.word	0xbffdfbf8
 8002710:	40020400 	.word	0x40020400
 8002714:	400200a8 	.word	0x400200a8
 8002718:	400204a8 	.word	0x400204a8

0800271c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_DMA_Start_IT+0x20>
 8002738:	2302      	movs	r3, #2
 800273a:	e04b      	b.n	80027d4 <HAL_DMA_Start_IT+0xb8>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d13a      	bne.n	80027c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f95f 	bl	8002a38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 020e 	orr.w	r2, r2, #14
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e00f      	b.n	80027b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0204 	bic.w	r2, r2, #4
 80027a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 020a 	orr.w	r2, r2, #10
 80027b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e005      	b.n	80027d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2204      	movs	r2, #4
 80027f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e022      	b.n	800284c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 020e 	bic.w	r2, r2, #14
 8002814:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f003 021c 	and.w	r2, r3, #28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d005      	beq.n	800287c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2204      	movs	r2, #4
 8002874:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e029      	b.n	80028d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 020e 	bic.w	r2, r2, #14
 800288a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	f003 021c 	and.w	r2, r3, #28
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	2101      	movs	r1, #1
 80028aa:	fa01 f202 	lsl.w	r2, r1, r2
 80028ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
    }
  }
  return status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f003 031c 	and.w	r3, r3, #28
 80028fa:	2204      	movs	r2, #4
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d026      	beq.n	8002954 <HAL_DMA_IRQHandler+0x7a>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d021      	beq.n	8002954 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0204 	bic.w	r2, r2, #4
 800292c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f003 021c 	and.w	r2, r3, #28
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	2104      	movs	r1, #4
 800293c:	fa01 f202 	lsl.w	r2, r1, r2
 8002940:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	2b00      	cmp	r3, #0
 8002948:	d071      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002952:	e06c      	b.n	8002a2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002958:	f003 031c 	and.w	r3, r3, #28
 800295c:	2202      	movs	r2, #2
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02e      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xec>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d029      	beq.n	80029c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 020a 	bic.w	r2, r2, #10
 800298e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299c:	f003 021c 	and.w	r2, r3, #28
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	2102      	movs	r1, #2
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d038      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80029c4:	e033      	b.n	8002a2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f003 031c 	and.w	r3, r3, #28
 80029ce:	2208      	movs	r2, #8
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d02a      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x156>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d025      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 020e 	bic.w	r2, r2, #14
 80029f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	f003 021c 	and.w	r2, r3, #28
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
}
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	f003 021c 	and.w	r2, r3, #28
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d108      	bne.n	8002a7c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a7a:	e007      	b.n	8002a8c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e17f      	b.n	8002da8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8171 	beq.w	8002da2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d005      	beq.n	8002ad8 <HAL_GPIO_Init+0x40>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d130      	bne.n	8002b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f003 0201 	and.w	r2, r3, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d118      	bne.n	8002b78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	f003 0201 	and.w	r2, r3, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d017      	beq.n	8002bb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d123      	bne.n	8002c08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	6939      	ldr	r1, [r7, #16]
 8002c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80ac 	beq.w	8002da2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c56:	4b5c      	ldr	r3, [pc, #368]	@ (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c62:	4a5a      	ldr	r2, [pc, #360]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_Init+0x242>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd0 <HAL_GPIO_Init+0x338>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_Init+0x23e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd4 <HAL_GPIO_Init+0x33c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x23a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd8 <HAL_GPIO_Init+0x340>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x236>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8002ddc <HAL_GPIO_Init+0x344>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x232>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8002de0 <HAL_GPIO_Init+0x348>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x22e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002de4 <HAL_GPIO_Init+0x34c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x22a>
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	e00c      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	e00a      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	e008      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cca:	2304      	movs	r3, #4
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e004      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x244>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	f002 0203 	and.w	r2, r2, #3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cec:	4937      	ldr	r1, [pc, #220]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d1e:	4a32      	ldr	r2, [pc, #200]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d24:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d48:	4a27      	ldr	r2, [pc, #156]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d4e:	4b26      	ldr	r3, [pc, #152]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d72:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d9c:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <HAL_GPIO_Init+0x350>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f47f ae78 	bne.w	8002aa8 <HAL_GPIO_Init+0x10>
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48001000 	.word	0x48001000
 8002de0:	48001400 	.word	0x48001400
 8002de4:	48001800 	.word	0x48001800
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e20:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40007000 	.word	0x40007000

08002e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e46:	d130      	bne.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e48:	4b23      	ldr	r3, [pc, #140]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e54:	d038      	beq.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e56:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e66:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2232      	movs	r2, #50	@ 0x32
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	0c9b      	lsrs	r3, r3, #18
 8002e78:	3301      	adds	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7c:	e002      	b.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e90:	d102      	bne.n	8002e98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f2      	bne.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea4:	d110      	bne.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e00f      	b.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb6:	d007      	beq.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ec0:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ec6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	20000200 	.word	0x20000200
 8002ee0:	431bde83 	.word	0x431bde83

08002ee4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e3ca      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef6:	4b97      	ldr	r3, [pc, #604]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f00:	4b94      	ldr	r3, [pc, #592]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80e4 	beq.w	80030e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_RCC_OscConfig+0x4a>
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	f040 808b 	bne.w	800303c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	f040 8087 	bne.w	800303c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f2e:	4b89      	ldr	r3, [pc, #548]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x62>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e3a2      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	4b82      	ldr	r3, [pc, #520]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_RCC_OscConfig+0x7c>
 8002f56:	4b7f      	ldr	r3, [pc, #508]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f5e:	e005      	b.n	8002f6c <HAL_RCC_OscConfig+0x88>
 8002f60:	4b7c      	ldr	r3, [pc, #496]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d223      	bcs.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fd55 	bl	8003a24 <RCC_SetFlashLatencyFromMSIRange>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e383      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f84:	4b73      	ldr	r3, [pc, #460]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a72      	ldr	r2, [pc, #456]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	f043 0308 	orr.w	r3, r3, #8
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b70      	ldr	r3, [pc, #448]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	496d      	ldr	r1, [pc, #436]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	4968      	ldr	r1, [pc, #416]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
 8002fb6:	e025      	b.n	8003004 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb8:	4b66      	ldr	r3, [pc, #408]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a65      	ldr	r2, [pc, #404]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b63      	ldr	r3, [pc, #396]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4960      	ldr	r1, [pc, #384]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	495b      	ldr	r1, [pc, #364]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fd15 	bl	8003a24 <RCC_SetFlashLatencyFromMSIRange>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e343      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003004:	f000 fc4a 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b52      	ldr	r3, [pc, #328]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	4950      	ldr	r1, [pc, #320]	@ (8003158 <HAL_RCC_OscConfig+0x274>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	4a4e      	ldr	r2, [pc, #312]	@ (800315c <HAL_RCC_OscConfig+0x278>)
 8003022:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003024:	4b4e      	ldr	r3, [pc, #312]	@ (8003160 <HAL_RCC_OscConfig+0x27c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff f951 	bl	80022d0 <HAL_InitTick>
 800302e:	4603      	mov	r3, r0
 8003030:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d052      	beq.n	80030de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	e327      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d032      	beq.n	80030aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003044:	4b43      	ldr	r3, [pc, #268]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a42      	ldr	r2, [pc, #264]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003050:	f7ff f98e 	bl	8002370 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003058:	f7ff f98a 	bl	8002370 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e310      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800306a:	4b3a      	ldr	r3, [pc, #232]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003076:	4b37      	ldr	r3, [pc, #220]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a36      	ldr	r2, [pc, #216]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4931      	ldr	r1, [pc, #196]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003094:	4b2f      	ldr	r3, [pc, #188]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	492c      	ldr	r1, [pc, #176]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e01a      	b.n	80030e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a29      	ldr	r2, [pc, #164]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030b6:	f7ff f95b 	bl	8002370 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030be:	f7ff f957 	bl	8002370 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e2dd      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030d0:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x1da>
 80030dc:	e000      	b.n	80030e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d074      	beq.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x21a>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d10e      	bne.n	8003116 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d10b      	bne.n	8003116 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fe:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d064      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d160      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e2ba      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x24a>
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0b      	ldr	r2, [pc, #44]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e026      	b.n	800317c <HAL_RCC_OscConfig+0x298>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003136:	d115      	bne.n	8003164 <HAL_RCC_OscConfig+0x280>
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a05      	ldr	r2, [pc, #20]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 800313e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a02      	ldr	r2, [pc, #8]	@ (8003154 <HAL_RCC_OscConfig+0x270>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e014      	b.n	800317c <HAL_RCC_OscConfig+0x298>
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	08012958 	.word	0x08012958
 800315c:	20000200 	.word	0x20000200
 8003160:	20000204 	.word	0x20000204
 8003164:	4ba0      	ldr	r3, [pc, #640]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a9f      	ldr	r2, [pc, #636]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b9d      	ldr	r3, [pc, #628]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a9c      	ldr	r2, [pc, #624]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7ff f8f4 	bl	8002370 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff f8f0 	bl	8002370 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e276      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319e:	4b92      	ldr	r3, [pc, #584]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x2a8>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7ff f8e0 	bl	8002370 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7ff f8dc 	bl	8002370 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	@ 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e262      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031c6:	4b88      	ldr	r3, [pc, #544]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2d0>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d060      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x310>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d119      	bne.n	8003222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d116      	bne.n	8003222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f4:	4b7c      	ldr	r3, [pc, #496]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_OscConfig+0x328>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e23f      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b76      	ldr	r3, [pc, #472]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	4973      	ldr	r1, [pc, #460]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003220:	e040      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322a:	4b6f      	ldr	r3, [pc, #444]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6e      	ldr	r2, [pc, #440]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7ff f89b 	bl	8002370 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7ff f897 	bl	8002370 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e21d      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003250:	4b65      	ldr	r3, [pc, #404]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b62      	ldr	r3, [pc, #392]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	495f      	ldr	r1, [pc, #380]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
 8003270:	e018      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003272:	4b5d      	ldr	r3, [pc, #372]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5c      	ldr	r2, [pc, #368]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7ff f877 	bl	8002370 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7ff f873 	bl	8002370 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e1f9      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003298:	4b53      	ldr	r3, [pc, #332]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03c      	beq.n	800332a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b8:	4b4b      	ldr	r3, [pc, #300]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032be:	4a4a      	ldr	r2, [pc, #296]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7ff f852 	bl	8002370 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7ff f84e 	bl	8002370 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1d4      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e2:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ef      	beq.n	80032d0 <HAL_RCC_OscConfig+0x3ec>
 80032f0:	e01b      	b.n	800332a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f2:	4b3d      	ldr	r3, [pc, #244]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f8:	4a3b      	ldr	r2, [pc, #236]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7ff f835 	bl	8002370 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330a:	f7ff f831 	bl	8002370 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1b7      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800331c:	4b32      	ldr	r3, [pc, #200]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ef      	bne.n	800330a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a6 	beq.w	8003484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800333c:	4b2a      	ldr	r3, [pc, #168]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10d      	bne.n	8003364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b27      	ldr	r3, [pc, #156]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334c:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	@ 0x58
 8003354:	4b24      	ldr	r3, [pc, #144]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003360:	2301      	movs	r3, #1
 8003362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b21      	ldr	r3, [pc, #132]	@ (80033ec <HAL_RCC_OscConfig+0x508>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d118      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_RCC_OscConfig+0x508>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1d      	ldr	r2, [pc, #116]	@ (80033ec <HAL_RCC_OscConfig+0x508>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337c:	f7fe fff8 	bl	8002370 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe fff4 	bl	8002370 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e17a      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_RCC_OscConfig+0x508>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_OscConfig+0x4d8>
 80033aa:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b0:	4a0d      	ldr	r2, [pc, #52]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ba:	e029      	b.n	8003410 <HAL_RCC_OscConfig+0x52c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d115      	bne.n	80033f0 <HAL_RCC_OscConfig+0x50c>
 80033c4:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	4a07      	ldr	r2, [pc, #28]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033da:	4a03      	ldr	r2, [pc, #12]	@ (80033e8 <HAL_RCC_OscConfig+0x504>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x52c>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
 80033f0:	4b9c      	ldr	r3, [pc, #624]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	4a9b      	ldr	r2, [pc, #620]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003400:	4b98      	ldr	r3, [pc, #608]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	4a97      	ldr	r2, [pc, #604]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d016      	beq.n	8003446 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe ffaa 	bl	8002370 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe ffa6 	bl	8002370 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e12a      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	4b8b      	ldr	r3, [pc, #556]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ed      	beq.n	8003420 <HAL_RCC_OscConfig+0x53c>
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe ff93 	bl	8002370 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe ff8f 	bl	8002370 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e113      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003464:	4b7f      	ldr	r3, [pc, #508]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ed      	bne.n	800344e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b7a      	ldr	r3, [pc, #488]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	4a79      	ldr	r2, [pc, #484]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80fe 	beq.w	800368a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	2b02      	cmp	r3, #2
 8003494:	f040 80d0 	bne.w	8003638 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003498:	4b72      	ldr	r3, [pc, #456]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 0203 	and.w	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d130      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	3b01      	subs	r3, #1
 80034b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d127      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d11f      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034d8:	2a07      	cmp	r2, #7
 80034da:	bf14      	ite	ne
 80034dc:	2201      	movne	r2, #1
 80034de:	2200      	moveq	r2, #0
 80034e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d113      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	3b01      	subs	r3, #1
 80034f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d109      	bne.n	800350e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d06e      	beq.n	80035ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d069      	beq.n	80035e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003514:	4b53      	ldr	r3, [pc, #332]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003520:	4b50      	ldr	r3, [pc, #320]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0ad      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003530:	4b4c      	ldr	r3, [pc, #304]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4b      	ldr	r2, [pc, #300]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003536:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800353a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800353c:	f7fe ff18 	bl	8002370 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe ff14 	bl	8002370 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e09a      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003556:	4b43      	ldr	r3, [pc, #268]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003562:	4b40      	ldr	r3, [pc, #256]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	4b40      	ldr	r3, [pc, #256]	@ (8003668 <HAL_RCC_OscConfig+0x784>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003572:	3a01      	subs	r2, #1
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800357c:	0212      	lsls	r2, r2, #8
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003584:	0852      	lsrs	r2, r2, #1
 8003586:	3a01      	subs	r2, #1
 8003588:	0552      	lsls	r2, r2, #21
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003590:	0852      	lsrs	r2, r2, #1
 8003592:	3a01      	subs	r2, #1
 8003594:	0652      	lsls	r2, r2, #25
 8003596:	4311      	orrs	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800359c:	0912      	lsrs	r2, r2, #4
 800359e:	0452      	lsls	r2, r2, #17
 80035a0:	430a      	orrs	r2, r1
 80035a2:	4930      	ldr	r1, [pc, #192]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c0:	f7fe fed6 	bl	8002370 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fed2 	bl	8002370 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e058      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	4b22      	ldr	r3, [pc, #136]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e6:	e050      	b.n	800368a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e04f      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d148      	bne.n	800368a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a19      	ldr	r2, [pc, #100]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003604:	4b17      	ldr	r3, [pc, #92]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003610:	f7fe feae 	bl	8002370 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe feaa 	bl	8002370 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e030      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x734>
 8003636:	e028      	b.n	800368a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d023      	beq.n	8003686 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <HAL_RCC_OscConfig+0x780>)
 8003644:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fe fe91 	bl	8002370 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003650:	e00c      	b.n	800366c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe fe8d 	bl	8002370 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d905      	bls.n	800366c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e013      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
 8003664:	40021000 	.word	0x40021000
 8003668:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <HAL_RCC_OscConfig+0x7b0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ec      	bne.n	8003652 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <HAL_RCC_OscConfig+0x7b0>)
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4905      	ldr	r1, [pc, #20]	@ (8003694 <HAL_RCC_OscConfig+0x7b0>)
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_RCC_OscConfig+0x7b4>)
 8003680:	4013      	ands	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
 8003684:	e001      	b.n	800368a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	feeefffc 	.word	0xfeeefffc

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0e7      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b75      	ldr	r3, [pc, #468]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b72      	ldr	r3, [pc, #456]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 0207 	bic.w	r2, r3, #7
 80036c6:	4970      	ldr	r1, [pc, #448]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0cf      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b66      	ldr	r3, [pc, #408]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d908      	bls.n	800370e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b63      	ldr	r3, [pc, #396]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4960      	ldr	r1, [pc, #384]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d04c      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	4b5a      	ldr	r3, [pc, #360]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d121      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0a6      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800373a:	4b54      	ldr	r3, [pc, #336]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e09a      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003752:	4b4e      	ldr	r3, [pc, #312]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e08e      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003762:	4b4a      	ldr	r3, [pc, #296]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e086      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b46      	ldr	r3, [pc, #280]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4943      	ldr	r1, [pc, #268]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fe fdf4 	bl	8002370 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fe fdf0 	bl	8002370 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e06e      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b3a      	ldr	r3, [pc, #232]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d010      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	4b31      	ldr	r3, [pc, #196]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d208      	bcs.n	80037e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b2e      	ldr	r3, [pc, #184]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	492b      	ldr	r1, [pc, #172]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e2:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d210      	bcs.n	8003812 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f0:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 0207 	bic.w	r2, r3, #7
 80037f8:	4923      	ldr	r1, [pc, #140]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <HAL_RCC_ClockConfig+0x1ec>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e036      	b.n	8003880 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381e:	4b1b      	ldr	r3, [pc, #108]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4918      	ldr	r1, [pc, #96]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4910      	ldr	r1, [pc, #64]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003850:	f000 f824 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	490b      	ldr	r1, [pc, #44]	@ (8003890 <HAL_RCC_ClockConfig+0x1f4>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <HAL_RCC_ClockConfig+0x1f8>)
 800386e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003870:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_ClockConfig+0x1fc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fd2b 	bl	80022d0 <HAL_InitTick>
 800387a:	4603      	mov	r3, r0
 800387c:	72fb      	strb	r3, [r7, #11]

  return status;
 800387e:	7afb      	ldrb	r3, [r7, #11]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40022000 	.word	0x40022000
 800388c:	40021000 	.word	0x40021000
 8003890:	08012958 	.word	0x08012958
 8003894:	20000200 	.word	0x20000200
 8003898:	20000204 	.word	0x20000204

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	@ 0x24
 80038a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038aa:	4b3e      	ldr	r3, [pc, #248]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b4:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d121      	bne.n	800390e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d11e      	bne.n	800390e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038d0:	4b34      	ldr	r3, [pc, #208]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038dc:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	e005      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038ec:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038f8:	4a2b      	ldr	r2, [pc, #172]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003900:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d102      	bne.n	800391a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003914:	4b25      	ldr	r3, [pc, #148]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	e004      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d101      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003920:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003922:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d134      	bne.n	8003994 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800392a:	4b1e      	ldr	r3, [pc, #120]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0xa6>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d003      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0xac>
 8003940:	e005      	b.n	800394e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003944:	617b      	str	r3, [r7, #20]
      break;
 8003946:	e005      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800394a:	617b      	str	r3, [r7, #20]
      break;
 800394c:	e002      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	617b      	str	r3, [r7, #20]
      break;
 8003952:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003954:	4b13      	ldr	r3, [pc, #76]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	3301      	adds	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003962:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	fb03 f202 	mul.w	r2, r3, r2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800397a:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	0e5b      	lsrs	r3, r3, #25
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	3301      	adds	r3, #1
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003994:	69bb      	ldr	r3, [r7, #24]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	@ 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	08012970 	.word	0x08012970
 80039ac:	00f42400 	.word	0x00f42400
 80039b0:	007a1200 	.word	0x007a1200

080039b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b8:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000200 	.word	0x20000200

080039cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039d0:	f7ff fff0 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4904      	ldr	r1, [pc, #16]	@ (80039f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	08012968 	.word	0x08012968

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039fc:	f7ff ffda 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0adb      	lsrs	r3, r3, #11
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4904      	ldr	r1, [pc, #16]	@ (8003a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08012968 	.word	0x08012968

08003a24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a30:	4b2a      	ldr	r3, [pc, #168]	@ (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a3c:	f7ff f9ee 	bl	8002e1c <HAL_PWREx_GetVoltageRange>
 8003a40:	6178      	str	r0, [r7, #20]
 8003a42:	e014      	b.n	8003a6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a50:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a5c:	f7ff f9de 	bl	8002e1c <HAL_PWREx_GetVoltageRange>
 8003a60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a74:	d10b      	bne.n	8003a8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b80      	cmp	r3, #128	@ 0x80
 8003a7a:	d919      	bls.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a80:	d902      	bls.n	8003a88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a82:	2302      	movs	r3, #2
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	e013      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a88:	2301      	movs	r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e010      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b80      	cmp	r3, #128	@ 0x80
 8003a92:	d902      	bls.n	8003a9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a94:	2303      	movs	r3, #3
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	e00a      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b80      	cmp	r3, #128	@ 0x80
 8003a9e:	d102      	bne.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e004      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b70      	cmp	r3, #112	@ 0x70
 8003aaa:	d101      	bne.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aac:	2301      	movs	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 0207 	bic.w	r2, r3, #7
 8003ab8:	4909      	ldr	r1, [pc, #36]	@ (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ac0:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d001      	beq.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40022000 	.word	0x40022000

08003ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d041      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b04:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b08:	d02a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b0e:	d824      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b14:	d008      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b1a:	d81e      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b24:	d010      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b26:	e018      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b28:	4b86      	ldr	r3, [pc, #536]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a85      	ldr	r2, [pc, #532]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b34:	e015      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fabb 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b46:	e00c      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3320      	adds	r3, #32
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fba6 	bl	80042a0 <RCCEx_PLLSAI2_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b68:	4b76      	ldr	r3, [pc, #472]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b76:	4973      	ldr	r1, [pc, #460]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b7e:	e001      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d041      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b98:	d02a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b9e:	d824      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ba6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003baa:	d81e      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bb4:	d010      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bb6:	e018      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb8:	4b62      	ldr	r3, [pc, #392]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4a61      	ldr	r2, [pc, #388]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fa73 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bd6:	e00c      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3320      	adds	r3, #32
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fb5e 	bl	80042a0 <RCCEx_PLLSAI2_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	74fb      	strb	r3, [r7, #19]
      break;
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf8:	4b52      	ldr	r3, [pc, #328]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c06:	494f      	ldr	r1, [pc, #316]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80a0 	beq.w	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c26:	4b47      	ldr	r3, [pc, #284]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3c:	4b41      	ldr	r3, [pc, #260]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c40:	4a40      	ldr	r2, [pc, #256]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c48:	4b3e      	ldr	r3, [pc, #248]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c54:	2301      	movs	r3, #1
 8003c56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c58:	4b3b      	ldr	r3, [pc, #236]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c64:	f7fe fb84 	bl	8002370 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c6a:	e009      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fe fb80 	bl	8002370 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d902      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c7e:	e005      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c80:	4b31      	ldr	r3, [pc, #196]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ef      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d15c      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c92:	4b2c      	ldr	r3, [pc, #176]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d019      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cb0:	4b24      	ldr	r3, [pc, #144]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cbc:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc2:	4a20      	ldr	r2, [pc, #128]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cdc:	4a19      	ldr	r2, [pc, #100]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fe fb3f 	bl	8002370 <HAL_GetTick>
 8003cf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf4:	e00b      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe fb3b 	bl	8002370 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d902      	bls.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ec      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d22:	4b08      	ldr	r3, [pc, #32]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d32:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d3a:	e009      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	74bb      	strb	r3, [r7, #18]
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d50:	7c7b      	ldrb	r3, [r7, #17]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b9e      	ldr	r3, [pc, #632]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	4a9d      	ldr	r2, [pc, #628]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6e:	4b98      	ldr	r3, [pc, #608]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f023 0203 	bic.w	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	4994      	ldr	r1, [pc, #592]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d90:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f023 020c 	bic.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	498c      	ldr	r1, [pc, #560]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003db2:	4b87      	ldr	r3, [pc, #540]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	4983      	ldr	r1, [pc, #524]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	497b      	ldr	r1, [pc, #492]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df6:	4b76      	ldr	r3, [pc, #472]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e04:	4972      	ldr	r1, [pc, #456]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e18:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	496a      	ldr	r1, [pc, #424]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3a:	4b65      	ldr	r3, [pc, #404]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	4961      	ldr	r1, [pc, #388]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6a:	4959      	ldr	r1, [pc, #356]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e7e:	4b54      	ldr	r3, [pc, #336]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8c:	4950      	ldr	r1, [pc, #320]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eae:	4948      	ldr	r1, [pc, #288]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec2:	4b43      	ldr	r3, [pc, #268]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed0:	493f      	ldr	r1, [pc, #252]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d028      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ef2:	4937      	ldr	r1, [pc, #220]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f02:	d106      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f04:	4b32      	ldr	r3, [pc, #200]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a31      	ldr	r2, [pc, #196]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
 8003f10:	e011      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2101      	movs	r1, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f8c8 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d028      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f42:	4b23      	ldr	r3, [pc, #140]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f50:	491f      	ldr	r1, [pc, #124]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f62:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f6c:	60d3      	str	r3, [r2, #12]
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f899 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02b      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fae:	4908      	ldr	r1, [pc, #32]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc0:	4b03      	ldr	r3, [pc, #12]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a02      	ldr	r2, [pc, #8]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fca:	60d3      	str	r3, [r2, #12]
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f867 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02f      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004004:	4b2b      	ldr	r3, [pc, #172]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004012:	4928      	ldr	r1, [pc, #160]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004022:	d10d      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f844 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d014      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	74bb      	strb	r3, [r7, #18]
 800403e:	e011      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3320      	adds	r3, #32
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f925 	bl	80042a0 <RCCEx_PLLSAI2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004070:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800407e:	490d      	ldr	r1, [pc, #52]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004092:	4b08      	ldr	r3, [pc, #32]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004098:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040a2:	4904      	ldr	r1, [pc, #16]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000

080040b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040c6:	4b75      	ldr	r3, [pc, #468]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040d2:	4b72      	ldr	r3, [pc, #456]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0203 	and.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d10d      	bne.n	80040fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
       ||
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040ea:	4b6c      	ldr	r3, [pc, #432]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
       ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d047      	beq.n	800418e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e044      	b.n	800418e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d018      	beq.n	800413e <RCCEx_PLLSAI1_Config+0x86>
 800410c:	2b03      	cmp	r3, #3
 800410e:	d825      	bhi.n	800415c <RCCEx_PLLSAI1_Config+0xa4>
 8004110:	2b01      	cmp	r3, #1
 8004112:	d002      	beq.n	800411a <RCCEx_PLLSAI1_Config+0x62>
 8004114:	2b02      	cmp	r3, #2
 8004116:	d009      	beq.n	800412c <RCCEx_PLLSAI1_Config+0x74>
 8004118:	e020      	b.n	800415c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800411a:	4b60      	ldr	r3, [pc, #384]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11d      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412a:	e01a      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800412c:	4b5b      	ldr	r3, [pc, #364]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d116      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e013      	b.n	8004166 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800413e:	4b57      	ldr	r3, [pc, #348]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800414a:	4b54      	ldr	r3, [pc, #336]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800415a:	e006      	b.n	800416a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e004      	b.n	800416c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800416a:	bf00      	nop
    }

    if(status == HAL_OK)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004172:	4b4a      	ldr	r3, [pc, #296]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	430b      	orrs	r3, r1
 8004188:	4944      	ldr	r1, [pc, #272]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	4313      	orrs	r3, r2
 800418c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d17d      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004194:	4b41      	ldr	r3, [pc, #260]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a40      	ldr	r2, [pc, #256]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800419a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800419e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fe f8e6 	bl	8002370 <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a6:	e009      	b.n	80041bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a8:	f7fe f8e2 	bl	8002370 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ba:	e005      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041bc:	4b37      	ldr	r3, [pc, #220]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ef      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d160      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d111      	bne.n	80041f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d4:	4b31      	ldr	r3, [pc, #196]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	0211      	lsls	r1, r2, #8
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	0912      	lsrs	r2, r2, #4
 80041ec:	0452      	lsls	r2, r2, #17
 80041ee:	430a      	orrs	r2, r1
 80041f0:	492a      	ldr	r1, [pc, #168]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	610b      	str	r3, [r1, #16]
 80041f6:	e027      	b.n	8004248 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d112      	bne.n	8004224 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041fe:	4b27      	ldr	r3, [pc, #156]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004206:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6892      	ldr	r2, [r2, #8]
 800420e:	0211      	lsls	r1, r2, #8
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6912      	ldr	r2, [r2, #16]
 8004214:	0852      	lsrs	r2, r2, #1
 8004216:	3a01      	subs	r2, #1
 8004218:	0552      	lsls	r2, r2, #21
 800421a:	430a      	orrs	r2, r1
 800421c:	491f      	ldr	r1, [pc, #124]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	610b      	str	r3, [r1, #16]
 8004222:	e011      	b.n	8004248 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004224:	4b1d      	ldr	r3, [pc, #116]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800422c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6892      	ldr	r2, [r2, #8]
 8004234:	0211      	lsls	r1, r2, #8
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6952      	ldr	r2, [r2, #20]
 800423a:	0852      	lsrs	r2, r2, #1
 800423c:	3a01      	subs	r2, #1
 800423e:	0652      	lsls	r2, r2, #25
 8004240:	430a      	orrs	r2, r1
 8004242:	4916      	ldr	r1, [pc, #88]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	4313      	orrs	r3, r2
 8004246:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004248:	4b14      	ldr	r3, [pc, #80]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a13      	ldr	r2, [pc, #76]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fe f88c 	bl	8002370 <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800425a:	e009      	b.n	8004270 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800425c:	f7fe f888 	bl	8002370 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d902      	bls.n	8004270 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	73fb      	strb	r3, [r7, #15]
          break;
 800426e:	e005      	b.n	800427c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004270:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ef      	beq.n	800425c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004282:	4b06      	ldr	r3, [pc, #24]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	4904      	ldr	r1, [pc, #16]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000

080042a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ba:	4b67      	ldr	r3, [pc, #412]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d10d      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
       ||
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042d2:	4b61      	ldr	r3, [pc, #388]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
       ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d047      	beq.n	8004376 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	e044      	b.n	8004376 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d018      	beq.n	8004326 <RCCEx_PLLSAI2_Config+0x86>
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d825      	bhi.n	8004344 <RCCEx_PLLSAI2_Config+0xa4>
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d002      	beq.n	8004302 <RCCEx_PLLSAI2_Config+0x62>
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d009      	beq.n	8004314 <RCCEx_PLLSAI2_Config+0x74>
 8004300:	e020      	b.n	8004344 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004302:	4b55      	ldr	r3, [pc, #340]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11d      	bne.n	800434a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004312:	e01a      	b.n	800434a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004314:	4b50      	ldr	r3, [pc, #320]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d116      	bne.n	800434e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004324:	e013      	b.n	800434e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004326:	4b4c      	ldr	r3, [pc, #304]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004332:	4b49      	ldr	r3, [pc, #292]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004342:	e006      	b.n	8004352 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      break;
 8004348:	e004      	b.n	8004354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004352:	bf00      	nop
    }

    if(status == HAL_OK)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800435a:	4b3f      	ldr	r3, [pc, #252]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	3b01      	subs	r3, #1
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	430b      	orrs	r3, r1
 8004370:	4939      	ldr	r1, [pc, #228]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d167      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800437c:	4b36      	ldr	r3, [pc, #216]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004388:	f7fd fff2 	bl	8002370 <HAL_GetTick>
 800438c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800438e:	e009      	b.n	80043a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004390:	f7fd ffee 	bl	8002370 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	73fb      	strb	r3, [r7, #15]
        break;
 80043a2:	e005      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1ef      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d14a      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d111      	bne.n	80043e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043bc:	4b26      	ldr	r3, [pc, #152]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	0211      	lsls	r1, r2, #8
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68d2      	ldr	r2, [r2, #12]
 80043d2:	0912      	lsrs	r2, r2, #4
 80043d4:	0452      	lsls	r2, r2, #17
 80043d6:	430a      	orrs	r2, r1
 80043d8:	491f      	ldr	r1, [pc, #124]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	614b      	str	r3, [r1, #20]
 80043de:	e011      	b.n	8004404 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6892      	ldr	r2, [r2, #8]
 80043f0:	0211      	lsls	r1, r2, #8
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6912      	ldr	r2, [r2, #16]
 80043f6:	0852      	lsrs	r2, r2, #1
 80043f8:	3a01      	subs	r2, #1
 80043fa:	0652      	lsls	r2, r2, #25
 80043fc:	430a      	orrs	r2, r1
 80043fe:	4916      	ldr	r1, [pc, #88]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004404:	4b14      	ldr	r3, [pc, #80]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a13      	ldr	r2, [pc, #76]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fd ffae 	bl	8002370 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004416:	e009      	b.n	800442c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004418:	f7fd ffaa 	bl	8002370 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d902      	bls.n	800442c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	73fb      	strb	r3, [r7, #15]
          break;
 800442a:	e005      	b.n	8004438 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800442c:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ef      	beq.n	8004418 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800443e:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	4904      	ldr	r1, [pc, #16]	@ (8004458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004448:	4313      	orrs	r3, r2
 800444a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e095      	b.n	800459a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800447e:	d009      	beq.n	8004494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	e005      	b.n	8004494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fbdc 	bl	8001c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044d4:	d902      	bls.n	80044dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e002      	b.n	80044e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044ea:	d007      	beq.n	80044fc <HAL_SPI_Init+0xa0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453e:	ea42 0103 	orr.w	r1, r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f003 0204 	and.w	r2, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004578:	ea42 0103 	orr.w	r1, r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b2:	f7fd fedd 	bl	8002370 <HAL_GetTick>
 80045b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d001      	beq.n	80045cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	e15c      	b.n	8004886 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_Transmit+0x36>
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e154      	b.n	8004886 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Transmit+0x48>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e14d      	b.n	8004886 <HAL_SPI_Transmit+0x2e4>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2203      	movs	r2, #3
 80045f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800463c:	d10f      	bne.n	800465e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800464c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800465c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	d007      	beq.n	800467c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800467a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004684:	d952      	bls.n	800472c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_SPI_Transmit+0xf2>
 800468e:	8b7b      	ldrh	r3, [r7, #26]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d145      	bne.n	8004720 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046b8:	e032      	b.n	8004720 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d112      	bne.n	80046ee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	881a      	ldrh	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	1c9a      	adds	r2, r3, #2
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046ec:	e018      	b.n	8004720 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ee:	f7fd fe3f 	bl	8002370 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d803      	bhi.n	8004706 <HAL_SPI_Transmit+0x164>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d102      	bne.n	800470c <HAL_SPI_Transmit+0x16a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0b2      	b.n	8004886 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1c7      	bne.n	80046ba <HAL_SPI_Transmit+0x118>
 800472a:	e083      	b.n	8004834 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_SPI_Transmit+0x198>
 8004734:	8b7b      	ldrh	r3, [r7, #26]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d177      	bne.n	800482a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d912      	bls.n	800476a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	881a      	ldrh	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004754:	1c9a      	adds	r2, r3, #2
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b02      	subs	r3, #2
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004768:	e05f      	b.n	800482a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004790:	e04b      	b.n	800482a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d12b      	bne.n	80047f8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d912      	bls.n	80047d0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	881a      	ldrh	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	1c9a      	adds	r2, r3, #2
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b02      	subs	r3, #2
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ce:	e02c      	b.n	800482a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	7812      	ldrb	r2, [r2, #0]
 80047dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047f6:	e018      	b.n	800482a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f8:	f7fd fdba 	bl	8002370 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d803      	bhi.n	8004810 <HAL_SPI_Transmit+0x26e>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d102      	bne.n	8004816 <HAL_SPI_Transmit+0x274>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e02d      	b.n	8004886 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ae      	bne.n	8004792 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fbd3 	bl	8004fe4 <SPI_EndRxTxTransaction>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004884:	2300      	movs	r3, #0
  }
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d001      	beq.n	80048ae <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0d4      	b.n	8004a58 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit_DMA+0x2a>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e0cc      	b.n	8004a58 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_SPI_Transmit_DMA+0x3c>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e0c5      	b.n	8004a58 <HAL_SPI_Transmit_DMA+0x1c8>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2203      	movs	r2, #3
 80048d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800491e:	d10f      	bne.n	8004940 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800492e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800493e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004944:	4a46      	ldr	r2, [pc, #280]	@ (8004a60 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	4a45      	ldr	r2, [pc, #276]	@ (8004a64 <HAL_SPI_Transmit_DMA+0x1d4>)
 800494e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	4a44      	ldr	r2, [pc, #272]	@ (8004a68 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004956:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	2200      	movs	r2, #0
 800495e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800496e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004978:	d82d      	bhi.n	80049d6 <HAL_SPI_Transmit_DMA+0x146>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004984:	d127      	bne.n	80049d6 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10f      	bne.n	80049b4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049a2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049b2:	e010      	b.n	80049d6 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3301      	adds	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	4619      	mov	r1, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049ee:	f7fd fe95 	bl	800271c <HAL_DMA_Start_IT>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fc:	f043 0210 	orr.w	r2, r3, #16
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e023      	b.n	8004a58 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1a:	2b40      	cmp	r3, #64	@ 0x40
 8004a1c:	d007      	beq.n	8004a2e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a2c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0220 	orr.w	r2, r2, #32
 8004a44:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0202 	orr.w	r2, r2, #2
 8004a54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	08004d23 	.word	0x08004d23
 8004a64:	08004c7d 	.word	0x08004c7d
 8004a68:	08004d3f 	.word	0x08004d3f

08004a6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10e      	bne.n	8004aac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
    return;
 8004aaa:	e0ce      	b.n	8004c4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_SPI_IRQHandler+0x5e>
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
    return;
 8004ac8:	e0bf      	b.n	8004c4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <HAL_SPI_IRQHandler+0x7e>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80b0 	beq.w	8004c4a <HAL_SPI_IRQHandler+0x1de>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80aa 	beq.w	8004c4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d023      	beq.n	8004b48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d011      	beq.n	8004b30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b10:	f043 0204 	orr.w	r2, r3, #4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	e00b      	b.n	8004b48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
        return;
 8004b46:	e080      	b.n	8004c4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d014      	beq.n	8004b7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b56:	f043 0201 	orr.w	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8a:	f043 0208 	orr.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d04f      	beq.n	8004c48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_SPI_IRQHandler+0x168>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d034      	beq.n	8004c3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0203 	bic.w	r2, r2, #3
 8004be2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d011      	beq.n	8004c10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <HAL_SPI_IRQHandler+0x1e4>)
 8004bf2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fd fe2d 	bl	8002858 <HAL_DMA_Abort_IT>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d016      	beq.n	8004c46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c50 <HAL_SPI_IRQHandler+0x1e4>)
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fe17 	bl	8002858 <HAL_DMA_Abort_IT>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004c3c:	e003      	b.n	8004c46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f812 	bl	8004c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c44:	e000      	b.n	8004c48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004c46:	bf00      	nop
    return;
 8004c48:	bf00      	nop
  }
}
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	08004d7f 	.word	0x08004d7f

08004c54 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c8a:	f7fd fb71 	bl	8002370 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d03b      	beq.n	8004d16 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0220 	bic.w	r2, r2, #32
 8004cac:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0202 	bic.w	r2, r2, #2
 8004cbc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	2164      	movs	r1, #100	@ 0x64
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f000 f98e 	bl	8004fe4 <SPI_EndRxTxTransaction>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	f7ff ffaa 	bl	8004c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d14:	e002      	b.n	8004d1c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7fc fe66 	bl	80019e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff ff8f 	bl	8004c54 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0203 	bic.w	r2, r2, #3
 8004d5a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d60:	f043 0210 	orr.w	r2, r3, #16
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ff79 	bl	8004c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ff64 	bl	8004c68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004db8:	f7fd fada 	bl	8002370 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dc8:	f7fd fad2 	bl	8002370 <HAL_GetTick>
 8004dcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dce:	4b39      	ldr	r3, [pc, #228]	@ (8004eb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	015b      	lsls	r3, r3, #5
 8004dd4:	0d1b      	lsrs	r3, r3, #20
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dde:	e054      	b.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d050      	beq.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004de8:	f7fd fac2 	bl	8002370 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d902      	bls.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d13d      	bne.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e16:	d111      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e20:	d004      	beq.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2a:	d107      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e44:	d10f      	bne.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e017      	b.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4013      	ands	r3, r2
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d19b      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000200 	.word	0x20000200

08004eb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	@ 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eca:	f7fd fa51 	bl	8002370 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004eda:	f7fd fa49 	bl	8002370 <HAL_GetTick>
 8004ede:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00da      	lsls	r2, r3, #3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	0d1b      	lsrs	r3, r3, #20
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f00:	e060      	b.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f08:	d107      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d050      	beq.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f22:	f7fd fa25 	bl	8002370 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d902      	bls.n	8004f38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d13d      	bne.n	8004fb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f50:	d111      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f5a:	d004      	beq.n	8004f66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f64:	d107      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f7e:	d10f      	bne.n	8004fa0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e010      	b.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d196      	bne.n	8004f02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	@ 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000200 	.word	0x20000200

08004fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ff5b 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e027      	b.n	8005068 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	2180      	movs	r1, #128	@ 0x80
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff fec0 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e014      	b.n	8005068 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff ff34 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d007      	beq.n	8005066 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e000      	b.n	8005068 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e040      	b.n	8005104 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fd f876 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2224      	movs	r2, #36	@ 0x24
 800509c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fea6 	bl	8005e08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fbeb 	bl	8005898 <UART_SetConfig>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e01b      	b.n	8005104 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 ff25 	bl	8005f4c <UART_CheckIdleState>
 8005102:	4603      	mov	r3, r0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800510c:	b480      	push	{r7}
 800510e:	b08b      	sub	sp, #44	@ 0x2c
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800511e:	2b20      	cmp	r3, #32
 8005120:	d147      	bne.n	80051b2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Transmit_IT+0x22>
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e040      	b.n	80051b4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2221      	movs	r2, #33	@ 0x21
 800515a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005164:	d107      	bne.n	8005176 <HAL_UART_Transmit_IT+0x6a>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <HAL_UART_Transmit_IT+0xb4>)
 8005172:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005174:	e002      	b.n	800517c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a12      	ldr	r2, [pc, #72]	@ (80051c4 <HAL_UART_Transmit_IT+0xb8>)
 800517a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	613b      	str	r3, [r7, #16]
   return(result);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	69f9      	ldr	r1, [r7, #28]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e6      	bne.n	800517c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	372c      	adds	r7, #44	@ 0x2c
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	080064af 	.word	0x080064af
 80051c4:	080063f9 	.word	0x080063f9

080051c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	@ 0x28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d137      	bne.n	8005250 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_UART_Receive_IT+0x24>
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e030      	b.n	8005252 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a18      	ldr	r2, [pc, #96]	@ (800525c <HAL_UART_Receive_IT+0x94>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d01f      	beq.n	8005240 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d018      	beq.n	8005240 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	613b      	str	r3, [r7, #16]
   return(result);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	623b      	str	r3, [r7, #32]
 800522e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	69f9      	ldr	r1, [r7, #28]
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	61bb      	str	r3, [r7, #24]
   return(result);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e6      	bne.n	800520e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	461a      	mov	r2, r3
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 ff96 	bl	8006178 <UART_Start_Receive_IT>
 800524c:	4603      	mov	r3, r0
 800524e:	e000      	b.n	8005252 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3728      	adds	r7, #40	@ 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40008000 	.word	0x40008000

08005260 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b0ba      	sub	sp, #232	@ 0xe8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005286:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800528a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800528e:	4013      	ands	r3, r2
 8005290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d115      	bne.n	80052c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 82ca 	beq.w	8005852 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
      }
      return;
 80052c6:	e2c4      	b.n	8005852 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80052c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8117 	beq.w	8005500 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052e2:	4b85      	ldr	r3, [pc, #532]	@ (80054f8 <HAL_UART_IRQHandler+0x298>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 810a 	beq.w	8005500 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d011      	beq.n	800531c <HAL_UART_IRQHandler+0xbc>
 80052f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2201      	movs	r2, #1
 800530a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d011      	beq.n	800534c <HAL_UART_IRQHandler+0xec>
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2202      	movs	r2, #2
 800533a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005342:	f043 0204 	orr.w	r2, r3, #4
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d011      	beq.n	800537c <HAL_UART_IRQHandler+0x11c>
 8005358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2204      	movs	r2, #4
 800536a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005372:	f043 0202 	orr.w	r2, r3, #2
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d017      	beq.n	80053b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005398:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2208      	movs	r2, #8
 80053a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ae:	f043 0208 	orr.w	r2, r3, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d012      	beq.n	80053ea <HAL_UART_IRQHandler+0x18a>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8230 	beq.w	8005856 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005424:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005432:	2b40      	cmp	r3, #64	@ 0x40
 8005434:	d005      	beq.n	8005442 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800543a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800543e:	2b00      	cmp	r3, #0
 8005440:	d04f      	beq.n	80054e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 ff5e 	bl	8006304 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d141      	bne.n	80054da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800546c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3308      	adds	r3, #8
 800547e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005482:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005486:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800548e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800549a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1d9      	bne.n	8005456 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d013      	beq.n	80054d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ae:	4a13      	ldr	r2, [pc, #76]	@ (80054fc <HAL_UART_IRQHandler+0x29c>)
 80054b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fd f9ce 	bl	8002858 <HAL_DMA_Abort_IT>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d017      	beq.n	80054f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054cc:	4610      	mov	r0, r2
 80054ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	e00f      	b.n	80054f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f9ca 	bl	800586c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	e00b      	b.n	80054f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9c6 	bl	800586c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	e007      	b.n	80054f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9c2 	bl	800586c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80054f0:	e1b1      	b.n	8005856 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f2:	bf00      	nop
    return;
 80054f4:	e1af      	b.n	8005856 <HAL_UART_IRQHandler+0x5f6>
 80054f6:	bf00      	nop
 80054f8:	04000120 	.word	0x04000120
 80054fc:	080063cd 	.word	0x080063cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 816a 	bne.w	80057de <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8163 	beq.w	80057de <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 815c 	beq.w	80057de <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2210      	movs	r2, #16
 800552c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	f040 80d4 	bne.w	80056e6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800554a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80ad 	beq.w	80056ae <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800555a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800555e:	429a      	cmp	r2, r3
 8005560:	f080 80a5 	bcs.w	80056ae <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800556a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 8086 	bne.w	800568c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800559c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1da      	bne.n	8005580 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e1      	bne.n	80055ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800562a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800562c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005630:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e3      	bne.n	8005606 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800565a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800565c:	f023 0310 	bic.w	r3, r3, #16
 8005660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800566e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005670:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005674:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800567c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e4      	bne.n	800564c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005686:	4618      	mov	r0, r3
 8005688:	f7fd f8a8 	bl	80027dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8ea 	bl	8005880 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056ac:	e0d5      	b.n	800585a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056b8:	429a      	cmp	r2, r3
 80056ba:	f040 80ce 	bne.w	800585a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	f040 80c5 	bne.w	800585a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8ce 	bl	8005880 <HAL_UARTEx_RxEventCallback>
      return;
 80056e4:	e0b9      	b.n	800585a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80ab 	beq.w	800585e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80a6 	beq.w	800585e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005722:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005726:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005734:	647b      	str	r3, [r7, #68]	@ 0x44
 8005736:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800573a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e4      	bne.n	8005712 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3308      	adds	r3, #8
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	623b      	str	r3, [r7, #32]
   return(result);
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800576c:	633a      	str	r2, [r7, #48]	@ 0x30
 800576e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e3      	bne.n	8005748 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	69b9      	ldr	r1, [r7, #24]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	617b      	str	r3, [r7, #20]
   return(result);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e4      	bne.n	8005794 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f852 	bl	8005880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057dc:	e03f      	b.n	800585e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <HAL_UART_IRQHandler+0x5a8>
 80057ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80057fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 f89b 	bl	800693c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005806:	e02d      	b.n	8005864 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01c      	beq.n	8005862 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
    }
    return;
 8005830:	e017      	b.n	8005862 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d012      	beq.n	8005864 <HAL_UART_IRQHandler+0x604>
 800583e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00c      	beq.n	8005864 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fe8f 	bl	800656e <UART_EndTransmit_IT>
    return;
 8005850:	e008      	b.n	8005864 <HAL_UART_IRQHandler+0x604>
      return;
 8005852:	bf00      	nop
 8005854:	e006      	b.n	8005864 <HAL_UART_IRQHandler+0x604>
    return;
 8005856:	bf00      	nop
 8005858:	e004      	b.n	8005864 <HAL_UART_IRQHandler+0x604>
      return;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <HAL_UART_IRQHandler+0x604>
      return;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <HAL_UART_IRQHandler+0x604>
    return;
 8005862:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005864:	37e8      	adds	r7, #232	@ 0xe8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop

0800586c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800589c:	b08a      	sub	sp, #40	@ 0x28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	4313      	orrs	r3, r2
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4ba4      	ldr	r3, [pc, #656]	@ (8005b58 <UART_SetConfig+0x2c0>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a99      	ldr	r2, [pc, #612]	@ (8005b5c <UART_SetConfig+0x2c4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005900:	4313      	orrs	r3, r2
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005914:	430a      	orrs	r2, r1
 8005916:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a90      	ldr	r2, [pc, #576]	@ (8005b60 <UART_SetConfig+0x2c8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d126      	bne.n	8005970 <UART_SetConfig+0xd8>
 8005922:	4b90      	ldr	r3, [pc, #576]	@ (8005b64 <UART_SetConfig+0x2cc>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	2b03      	cmp	r3, #3
 800592e:	d81b      	bhi.n	8005968 <UART_SetConfig+0xd0>
 8005930:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <UART_SetConfig+0xa0>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	08005949 	.word	0x08005949
 800593c:	08005959 	.word	0x08005959
 8005940:	08005951 	.word	0x08005951
 8005944:	08005961 	.word	0x08005961
 8005948:	2301      	movs	r3, #1
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594e:	e116      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005956:	e112      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595e:	e10e      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005966:	e10a      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596e:	e106      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a7c      	ldr	r2, [pc, #496]	@ (8005b68 <UART_SetConfig+0x2d0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d138      	bne.n	80059ec <UART_SetConfig+0x154>
 800597a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b64 <UART_SetConfig+0x2cc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b0c      	cmp	r3, #12
 8005986:	d82d      	bhi.n	80059e4 <UART_SetConfig+0x14c>
 8005988:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <UART_SetConfig+0xf8>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059c5 	.word	0x080059c5
 8005994:	080059e5 	.word	0x080059e5
 8005998:	080059e5 	.word	0x080059e5
 800599c:	080059e5 	.word	0x080059e5
 80059a0:	080059d5 	.word	0x080059d5
 80059a4:	080059e5 	.word	0x080059e5
 80059a8:	080059e5 	.word	0x080059e5
 80059ac:	080059e5 	.word	0x080059e5
 80059b0:	080059cd 	.word	0x080059cd
 80059b4:	080059e5 	.word	0x080059e5
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059e5 	.word	0x080059e5
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ca:	e0d8      	b.n	8005b7e <UART_SetConfig+0x2e6>
 80059cc:	2302      	movs	r3, #2
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d2:	e0d4      	b.n	8005b7e <UART_SetConfig+0x2e6>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059da:	e0d0      	b.n	8005b7e <UART_SetConfig+0x2e6>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e2:	e0cc      	b.n	8005b7e <UART_SetConfig+0x2e6>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ea:	e0c8      	b.n	8005b7e <UART_SetConfig+0x2e6>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b6c <UART_SetConfig+0x2d4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d125      	bne.n	8005a42 <UART_SetConfig+0x1aa>
 80059f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b64 <UART_SetConfig+0x2cc>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a00:	2b30      	cmp	r3, #48	@ 0x30
 8005a02:	d016      	beq.n	8005a32 <UART_SetConfig+0x19a>
 8005a04:	2b30      	cmp	r3, #48	@ 0x30
 8005a06:	d818      	bhi.n	8005a3a <UART_SetConfig+0x1a2>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d00a      	beq.n	8005a22 <UART_SetConfig+0x18a>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d814      	bhi.n	8005a3a <UART_SetConfig+0x1a2>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <UART_SetConfig+0x182>
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d008      	beq.n	8005a2a <UART_SetConfig+0x192>
 8005a18:	e00f      	b.n	8005a3a <UART_SetConfig+0x1a2>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a20:	e0ad      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a22:	2302      	movs	r3, #2
 8005a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a28:	e0a9      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a30:	e0a5      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a32:	2308      	movs	r3, #8
 8005a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a38:	e0a1      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a40:	e09d      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4a      	ldr	r2, [pc, #296]	@ (8005b70 <UART_SetConfig+0x2d8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d125      	bne.n	8005a98 <UART_SetConfig+0x200>
 8005a4c:	4b45      	ldr	r3, [pc, #276]	@ (8005b64 <UART_SetConfig+0x2cc>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a58:	d016      	beq.n	8005a88 <UART_SetConfig+0x1f0>
 8005a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a5c:	d818      	bhi.n	8005a90 <UART_SetConfig+0x1f8>
 8005a5e:	2b80      	cmp	r3, #128	@ 0x80
 8005a60:	d00a      	beq.n	8005a78 <UART_SetConfig+0x1e0>
 8005a62:	2b80      	cmp	r3, #128	@ 0x80
 8005a64:	d814      	bhi.n	8005a90 <UART_SetConfig+0x1f8>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <UART_SetConfig+0x1d8>
 8005a6a:	2b40      	cmp	r3, #64	@ 0x40
 8005a6c:	d008      	beq.n	8005a80 <UART_SetConfig+0x1e8>
 8005a6e:	e00f      	b.n	8005a90 <UART_SetConfig+0x1f8>
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a76:	e082      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7e:	e07e      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a86:	e07a      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a8e:	e076      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a96:	e072      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a35      	ldr	r2, [pc, #212]	@ (8005b74 <UART_SetConfig+0x2dc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d12a      	bne.n	8005af8 <UART_SetConfig+0x260>
 8005aa2:	4b30      	ldr	r3, [pc, #192]	@ (8005b64 <UART_SetConfig+0x2cc>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab0:	d01a      	beq.n	8005ae8 <UART_SetConfig+0x250>
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab6:	d81b      	bhi.n	8005af0 <UART_SetConfig+0x258>
 8005ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005abc:	d00c      	beq.n	8005ad8 <UART_SetConfig+0x240>
 8005abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac2:	d815      	bhi.n	8005af0 <UART_SetConfig+0x258>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <UART_SetConfig+0x238>
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005acc:	d008      	beq.n	8005ae0 <UART_SetConfig+0x248>
 8005ace:	e00f      	b.n	8005af0 <UART_SetConfig+0x258>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad6:	e052      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ade:	e04e      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae6:	e04a      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aee:	e046      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005af6:	e042      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <UART_SetConfig+0x2c4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d13a      	bne.n	8005b78 <UART_SetConfig+0x2e0>
 8005b02:	4b18      	ldr	r3, [pc, #96]	@ (8005b64 <UART_SetConfig+0x2cc>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b10:	d01a      	beq.n	8005b48 <UART_SetConfig+0x2b0>
 8005b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b16:	d81b      	bhi.n	8005b50 <UART_SetConfig+0x2b8>
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1c:	d00c      	beq.n	8005b38 <UART_SetConfig+0x2a0>
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b22:	d815      	bhi.n	8005b50 <UART_SetConfig+0x2b8>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <UART_SetConfig+0x298>
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2c:	d008      	beq.n	8005b40 <UART_SetConfig+0x2a8>
 8005b2e:	e00f      	b.n	8005b50 <UART_SetConfig+0x2b8>
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b36:	e022      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3e:	e01e      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b46:	e01a      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4e:	e016      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b56:	e012      	b.n	8005b7e <UART_SetConfig+0x2e6>
 8005b58:	efff69f3 	.word	0xefff69f3
 8005b5c:	40008000 	.word	0x40008000
 8005b60:	40013800 	.word	0x40013800
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40004400 	.word	0x40004400
 8005b6c:	40004800 	.word	0x40004800
 8005b70:	40004c00 	.word	0x40004c00
 8005b74:	40005000 	.word	0x40005000
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a9f      	ldr	r2, [pc, #636]	@ (8005e00 <UART_SetConfig+0x568>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d17a      	bne.n	8005c7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d824      	bhi.n	8005bda <UART_SetConfig+0x342>
 8005b90:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <UART_SetConfig+0x300>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bdb 	.word	0x08005bdb
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bdb 	.word	0x08005bdb
 8005ba8:	08005bcb 	.word	0x08005bcb
 8005bac:	08005bdb 	.word	0x08005bdb
 8005bb0:	08005bdb 	.word	0x08005bdb
 8005bb4:	08005bdb 	.word	0x08005bdb
 8005bb8:	08005bd3 	.word	0x08005bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7fd ff06 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8005bc0:	61f8      	str	r0, [r7, #28]
        break;
 8005bc2:	e010      	b.n	8005be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8005e04 <UART_SetConfig+0x56c>)
 8005bc6:	61fb      	str	r3, [r7, #28]
        break;
 8005bc8:	e00d      	b.n	8005be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bca:	f7fd fe67 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8005bce:	61f8      	str	r0, [r7, #28]
        break;
 8005bd0:	e009      	b.n	8005be6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd6:	61fb      	str	r3, [r7, #28]
        break;
 8005bd8:	e005      	b.n	8005be6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80fb 	beq.w	8005de4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d305      	bcc.n	8005c0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d903      	bls.n	8005c12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c10:	e0e8      	b.n	8005de4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	2200      	movs	r2, #0
 8005c16:	461c      	mov	r4, r3
 8005c18:	4615      	mov	r5, r2
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	022b      	lsls	r3, r5, #8
 8005c24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c28:	0222      	lsls	r2, r4, #8
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	6849      	ldr	r1, [r1, #4]
 8005c2e:	0849      	lsrs	r1, r1, #1
 8005c30:	2000      	movs	r0, #0
 8005c32:	4688      	mov	r8, r1
 8005c34:	4681      	mov	r9, r0
 8005c36:	eb12 0a08 	adds.w	sl, r2, r8
 8005c3a:	eb43 0b09 	adc.w	fp, r3, r9
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	4659      	mov	r1, fp
 8005c50:	f7fa fb16 	bl	8000280 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4613      	mov	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c62:	d308      	bcc.n	8005c76 <UART_SetConfig+0x3de>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c6a:	d204      	bcs.n	8005c76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	e0b6      	b.n	8005de4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c7c:	e0b2      	b.n	8005de4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c86:	d15e      	bne.n	8005d46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d828      	bhi.n	8005ce2 <UART_SetConfig+0x44a>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <UART_SetConfig+0x400>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cc5 	.word	0x08005cc5
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005ce3 	.word	0x08005ce3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005ce3 	.word	0x08005ce3
 8005cb0:	08005ce3 	.word	0x08005ce3
 8005cb4:	08005ce3 	.word	0x08005ce3
 8005cb8:	08005cdb 	.word	0x08005cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cbc:	f7fd fe86 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8005cc0:	61f8      	str	r0, [r7, #28]
        break;
 8005cc2:	e014      	b.n	8005cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc4:	f7fd fe98 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8005cc8:	61f8      	str	r0, [r7, #28]
        break;
 8005cca:	e010      	b.n	8005cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8005e04 <UART_SetConfig+0x56c>)
 8005cce:	61fb      	str	r3, [r7, #28]
        break;
 8005cd0:	e00d      	b.n	8005cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd2:	f7fd fde3 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8005cd6:	61f8      	str	r0, [r7, #28]
        break;
 8005cd8:	e009      	b.n	8005cee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cde:	61fb      	str	r3, [r7, #28]
        break;
 8005ce0:	e005      	b.n	8005cee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d077      	beq.n	8005de4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	005a      	lsls	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	441a      	add	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b0f      	cmp	r3, #15
 8005d0e:	d916      	bls.n	8005d3e <UART_SetConfig+0x4a6>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d16:	d212      	bcs.n	8005d3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f023 030f 	bic.w	r3, r3, #15
 8005d20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	8afb      	ldrh	r3, [r7, #22]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	8afa      	ldrh	r2, [r7, #22]
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	e052      	b.n	8005de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d44:	e04e      	b.n	8005de4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d827      	bhi.n	8005d9e <UART_SetConfig+0x506>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <UART_SetConfig+0x4bc>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	08005d9f 	.word	0x08005d9f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d9f 	.word	0x08005d9f
 8005d6c:	08005d9f 	.word	0x08005d9f
 8005d70:	08005d9f 	.word	0x08005d9f
 8005d74:	08005d97 	.word	0x08005d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d78:	f7fd fe28 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 8005d7c:	61f8      	str	r0, [r7, #28]
        break;
 8005d7e:	e014      	b.n	8005daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fd fe3a 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8005d84:	61f8      	str	r0, [r7, #28]
        break;
 8005d86:	e010      	b.n	8005daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d88:	4b1e      	ldr	r3, [pc, #120]	@ (8005e04 <UART_SetConfig+0x56c>)
 8005d8a:	61fb      	str	r3, [r7, #28]
        break;
 8005d8c:	e00d      	b.n	8005daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8e:	f7fd fd85 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8005d92:	61f8      	str	r0, [r7, #28]
        break;
 8005d94:	e009      	b.n	8005daa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d9a:	61fb      	str	r3, [r7, #28]
        break;
 8005d9c:	e005      	b.n	8005daa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005da8:	bf00      	nop
    }

    if (pclk != 0U)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d019      	beq.n	8005de4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	085a      	lsrs	r2, r3, #1
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	441a      	add	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b0f      	cmp	r3, #15
 8005dc8:	d909      	bls.n	8005dde <UART_SetConfig+0x546>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d205      	bcs.n	8005dde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60da      	str	r2, [r3, #12]
 8005ddc:	e002      	b.n	8005de4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005df0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3728      	adds	r7, #40	@ 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfe:	bf00      	nop
 8005e00:	40008000 	.word	0x40008000
 8005e04:	00f42400 	.word	0x00f42400

08005e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01a      	beq.n	8005f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f06:	d10a      	bne.n	8005f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b098      	sub	sp, #96	@ 0x60
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f5c:	f7fc fa08 	bl	8002370 <HAL_GetTick>
 8005f60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d12e      	bne.n	8005fce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f88c 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d021      	beq.n	8005fce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005faa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e062      	b.n	8006094 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d149      	bne.n	8006070 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f856 	bl	800609c <UART_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d03c      	beq.n	8006070 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	623b      	str	r3, [r7, #32]
   return(result);
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800600a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006014:	633b      	str	r3, [r7, #48]	@ 0x30
 8006016:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800601a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60fb      	str	r3, [r7, #12]
   return(result);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006048:	61fa      	str	r2, [r7, #28]
 800604a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	617b      	str	r3, [r7, #20]
   return(result);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e011      	b.n	8006094 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3758      	adds	r7, #88	@ 0x58
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	e04f      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b4:	d04b      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fc f95b 	bl	8002370 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <UART_WaitOnFlagUntilTimeout+0x30>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e04e      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d037      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xb2>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b80      	cmp	r3, #128	@ 0x80
 80060e2:	d034      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xb2>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b40      	cmp	r3, #64	@ 0x40
 80060e8:	d031      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d110      	bne.n	800611a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2208      	movs	r2, #8
 80060fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f8ff 	bl	8006304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2208      	movs	r2, #8
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e029      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006128:	d111      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f8e5 	bl	8006304 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e00f      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d0a0      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006178:	b480      	push	{r7}
 800617a:	b097      	sub	sp, #92	@ 0x5c
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061aa:	d10e      	bne.n	80061ca <UART_Start_Receive_IT+0x52>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <UART_Start_Receive_IT+0x48>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80061ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061be:	e02d      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	22ff      	movs	r2, #255	@ 0xff
 80061c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061c8:	e028      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10d      	bne.n	80061ee <UART_Start_Receive_IT+0x76>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d104      	bne.n	80061e4 <UART_Start_Receive_IT+0x6c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	@ 0xff
 80061de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061e2:	e01b      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	227f      	movs	r2, #127	@ 0x7f
 80061e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061ec:	e016      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061f6:	d10d      	bne.n	8006214 <UART_Start_Receive_IT+0x9c>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <UART_Start_Receive_IT+0x92>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	227f      	movs	r2, #127	@ 0x7f
 8006204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006208:	e008      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	223f      	movs	r2, #63	@ 0x3f
 800620e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006212:	e003      	b.n	800621c <UART_Start_Receive_IT+0xa4>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2222      	movs	r2, #34	@ 0x22
 8006228:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	657b      	str	r3, [r7, #84]	@ 0x54
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800624c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800624e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006252:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800625a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006268:	d107      	bne.n	800627a <UART_Start_Receive_IT+0x102>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <UART_Start_Receive_IT+0x184>)
 8006276:	669a      	str	r2, [r3, #104]	@ 0x68
 8006278:	e002      	b.n	8006280 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a20      	ldr	r2, [pc, #128]	@ (8006300 <UART_Start_Receive_IT+0x188>)
 800627e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d019      	beq.n	80062bc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800629c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e6      	bne.n	8006288 <UART_Start_Receive_IT+0x110>
 80062ba:	e018      	b.n	80062ee <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f043 0320 	orr.w	r3, r3, #32
 80062d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062da:	623b      	str	r3, [r7, #32]
 80062dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	69f9      	ldr	r1, [r7, #28]
 80062e0:	6a3a      	ldr	r2, [r7, #32]
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e6      	bne.n	80062bc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	375c      	adds	r7, #92	@ 0x5c
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	08006781 	.word	0x08006781
 8006300:	080065c5 	.word	0x080065c5

08006304 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b095      	sub	sp, #84	@ 0x54
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800632a:	643b      	str	r3, [r7, #64]	@ 0x40
 800632c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006330:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e6      	bne.n	800630c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	61fb      	str	r3, [r7, #28]
   return(result);
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800635e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006376:	2b01      	cmp	r3, #1
 8006378:	d118      	bne.n	80063ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	60bb      	str	r3, [r7, #8]
   return(result);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f023 0310 	bic.w	r3, r3, #16
 800638e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6979      	ldr	r1, [r7, #20]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	613b      	str	r3, [r7, #16]
   return(result);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e6      	bne.n	800637a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063c0:	bf00      	nop
 80063c2:	3754      	adds	r7, #84	@ 0x54
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff fa3e 	bl	800586c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b08f      	sub	sp, #60	@ 0x3c
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006404:	2b21      	cmp	r3, #33	@ 0x21
 8006406:	d14c      	bne.n	80064a2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d132      	bne.n	800647a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	61fb      	str	r3, [r7, #28]
   return(result);
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006434:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	60bb      	str	r3, [r7, #8]
   return(result);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800645a:	633b      	str	r3, [r7, #48]	@ 0x30
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6979      	ldr	r1, [r7, #20]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	613b      	str	r3, [r7, #16]
   return(result);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e6      	bne.n	8006446 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006478:	e013      	b.n	80064a2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800647e:	781a      	ldrb	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80064a2:	bf00      	nop
 80064a4:	373c      	adds	r7, #60	@ 0x3c
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b091      	sub	sp, #68	@ 0x44
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064ba:	2b21      	cmp	r3, #33	@ 0x21
 80064bc:	d151      	bne.n	8006562 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d132      	bne.n	8006530 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	623b      	str	r3, [r7, #32]
   return(result);
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e6      	bne.n	80064ca <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	60fb      	str	r3, [r7, #12]
   return(result);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	69b9      	ldr	r1, [r7, #24]
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	617b      	str	r3, [r7, #20]
   return(result);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e6      	bne.n	80064fc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800652e:	e018      	b.n	8006562 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006534:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006538:	881a      	ldrh	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006542:	b292      	uxth	r2, r2
 8006544:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800654a:	1c9a      	adds	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006562:	bf00      	nop
 8006564:	3744      	adds	r7, #68	@ 0x44
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b088      	sub	sp, #32
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	60bb      	str	r3, [r7, #8]
   return(result);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6979      	ldr	r1, [r7, #20]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	613b      	str	r3, [r7, #16]
   return(result);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fb fd43 	bl	8002040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ba:	bf00      	nop
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b09c      	sub	sp, #112	@ 0x70
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065dc:	2b22      	cmp	r3, #34	@ 0x22
 80065de:	f040 80be 	bne.w	800675e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80065e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065f0:	b2d9      	uxtb	r1, r3
 80065f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fc:	400a      	ands	r2, r1
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 80a3 	bne.w	8006772 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800663a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800663c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006640:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800664a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800664c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006650:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800666e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	667b      	str	r3, [r7, #100]	@ 0x64
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800667e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800668c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e5      	bne.n	800665e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a34      	ldr	r2, [pc, #208]	@ (800677c <UART_RxISR_8BIT+0x1b8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d01f      	beq.n	80066f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	623b      	str	r3, [r7, #32]
   return(result);
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e6      	bne.n	80066be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d12e      	bne.n	8006756 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60fb      	str	r3, [r7, #12]
   return(result);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0310 	bic.w	r3, r3, #16
 8006712:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	69b9      	ldr	r1, [r7, #24]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	617b      	str	r3, [r7, #20]
   return(result);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b10      	cmp	r3, #16
 800673c:	d103      	bne.n	8006746 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2210      	movs	r2, #16
 8006744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff f896 	bl	8005880 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006754:	e00d      	b.n	8006772 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fb fca4 	bl	80020a4 <HAL_UART_RxCpltCallback>
}
 800675c:	e009      	b.n	8006772 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	8b1b      	ldrh	r3, [r3, #24]
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0208 	orr.w	r2, r2, #8
 800676e:	b292      	uxth	r2, r2
 8006770:	831a      	strh	r2, [r3, #24]
}
 8006772:	bf00      	nop
 8006774:	3770      	adds	r7, #112	@ 0x70
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40008000 	.word	0x40008000

08006780 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b09c      	sub	sp, #112	@ 0x70
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800678e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006798:	2b22      	cmp	r3, #34	@ 0x22
 800679a:	f040 80be 	bne.w	800691a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067b6:	4013      	ands	r3, r2
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c2:	1c9a      	adds	r2, r3, #2
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 80a3 	bne.w	800692e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006806:	657b      	str	r3, [r7, #84]	@ 0x54
 8006808:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800680c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e6      	bne.n	80067e8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	f023 0301 	bic.w	r3, r3, #1
 8006830:	663b      	str	r3, [r7, #96]	@ 0x60
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800683a:	643a      	str	r2, [r7, #64]	@ 0x40
 800683c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a34      	ldr	r2, [pc, #208]	@ (8006938 <UART_RxISR_16BIT+0x1b8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d01f      	beq.n	80068ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d018      	beq.n	80068ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	61fb      	str	r3, [r7, #28]
   return(result);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800688e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800689e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e6      	bne.n	800687a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d12e      	bne.n	8006912 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	613b      	str	r3, [r7, #16]
   return(result);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	2b10      	cmp	r3, #16
 80068f8:	d103      	bne.n	8006902 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2210      	movs	r2, #16
 8006900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe ffb8 	bl	8005880 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006910:	e00d      	b.n	800692e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fb fbc6 	bl	80020a4 <HAL_UART_RxCpltCallback>
}
 8006918:	e009      	b.n	800692e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	8b1b      	ldrh	r3, [r3, #24]
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0208 	orr.w	r2, r2, #8
 800692a:	b292      	uxth	r2, r2
 800692c:	831a      	strh	r2, [r3, #24]
}
 800692e:	bf00      	nop
 8006930:	3770      	adds	r7, #112	@ 0x70
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40008000 	.word	0x40008000

0800693c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	7992      	ldrb	r2, [r2, #6]
 8006962:	08d2      	lsrs	r2, r2, #3
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	fb13 f302 	smulbb	r3, r3, r2
 800696a:	b29a      	uxth	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	889b      	ldrh	r3, [r3, #4]
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	885b      	ldrh	r3, [r3, #2]
 800697a:	fb02 f303 	mul.w	r3, r2, r3
 800697e:	461a      	mov	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	60da      	str	r2, [r3, #12]
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006996:	b490      	push	{r4, r7}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	4604      	mov	r4, r0
 800699e:	4608      	mov	r0, r1
 80069a0:	1d39      	adds	r1, r7, #4
 80069a2:	e881 000c 	stmia.w	r1, {r2, r3}
 80069a6:	4623      	mov	r3, r4
 80069a8:	81fb      	strh	r3, [r7, #14]
 80069aa:	4603      	mov	r3, r0
 80069ac:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80069b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069b6:	88ba      	ldrh	r2, [r7, #4]
 80069b8:	4293      	cmp	r3, r2
 80069ba:	da04      	bge.n	80069c6 <code+0x30>
        code |= LEFT;
 80069bc:	2201      	movs	r2, #1
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	75fb      	strb	r3, [r7, #23]
 80069c4:	e008      	b.n	80069d8 <code+0x42>
    } else if (x0 > window.x1) {
 80069c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069ca:	893a      	ldrh	r2, [r7, #8]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	dd03      	ble.n	80069d8 <code+0x42>
        code |= RIGHT;
 80069d0:	2202      	movs	r2, #2
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80069d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069dc:	88fa      	ldrh	r2, [r7, #6]
 80069de:	4293      	cmp	r3, r2
 80069e0:	da04      	bge.n	80069ec <code+0x56>
        code |= BOTTOM;
 80069e2:	2204      	movs	r2, #4
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	75fb      	strb	r3, [r7, #23]
 80069ea:	e008      	b.n	80069fe <code+0x68>
    } else if (y0 > window.y1) {
 80069ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069f0:	897a      	ldrh	r2, [r7, #10]
 80069f2:	4293      	cmp	r3, r2
 80069f4:	dd03      	ble.n	80069fe <code+0x68>
        code |= TOP;
 80069f6:	2208      	movs	r2, #8
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc90      	pop	{r4, r7}
 8006a08:	4770      	bx	lr

08006a0a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b088      	sub	sp, #32
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a28:	cb0c      	ldmia	r3, {r2, r3}
 8006a2a:	f7ff ffb4 	bl	8006996 <code>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a42:	cb0c      	ldmia	r3, {r2, r3}
 8006a44:	f7ff ffa7 	bl	8006996 <code>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006a50:	7ffa      	ldrb	r2, [r7, #31]
 8006a52:	7fbb      	ldrb	r3, [r7, #30]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	777b      	strb	r3, [r7, #29]
            break;
 8006a60:	e0e9      	b.n	8006c36 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006a62:	7ffa      	ldrb	r2, [r7, #31]
 8006a64:	7fbb      	ldrb	r3, [r7, #30]
 8006a66:	4013      	ands	r3, r2
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 80e2 	bne.w	8006c34 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006a78:	7ffb      	ldrb	r3, [r7, #31]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <clip_line+0x78>
 8006a7e:	7ffb      	ldrb	r3, [r7, #31]
 8006a80:	e000      	b.n	8006a84 <clip_line+0x7a>
 8006a82:	7fbb      	ldrb	r3, [r7, #30]
 8006a84:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006a86:	2208      	movs	r2, #8
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d024      	beq.n	8006adc <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aa8:	1acb      	subs	r3, r1, r3
 8006aaa:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006aac:	4608      	mov	r0, r1
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ab4:	1a41      	subs	r1, r0, r1
 8006ab6:	fb03 f101 	mul.w	r1, r3, r1
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac8:	1ac3      	subs	r3, r0, r3
 8006aca:	fb91 f3f3 	sdiv	r3, r1, r3
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006ad6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ad8:	833b      	strh	r3, [r7, #24]
 8006ada:	e07f      	b.n	8006bdc <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006adc:	2204      	movs	r2, #4
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d024      	beq.n	8006b32 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af6:	4619      	mov	r1, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006afe:	1acb      	subs	r3, r1, r3
 8006b00:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006b02:	4608      	mov	r0, r1
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b0a:	1a41      	subs	r1, r0, r1
 8006b0c:	fb03 f101 	mul.w	r1, r3, r1
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b16:	4618      	mov	r0, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b1e:	1ac3      	subs	r3, r0, r3
 8006b20:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006b2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b2e:	833b      	strh	r3, [r7, #24]
 8006b30:	e054      	b.n	8006bdc <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006b32:	2202      	movs	r2, #2
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	4013      	ands	r3, r2
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d024      	beq.n	8006b88 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b54:	1acb      	subs	r3, r1, r3
 8006b56:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006b58:	4608      	mov	r0, r1
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b60:	1a41      	subs	r1, r0, r1
 8006b62:	fb03 f101 	mul.w	r1, r3, r1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b74:	1ac3      	subs	r3, r0, r3
 8006b76:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006b82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b84:	837b      	strh	r3, [r7, #26]
 8006b86:	e029      	b.n	8006bdc <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006b88:	2201      	movs	r2, #1
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d023      	beq.n	8006bdc <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006baa:	1acb      	subs	r3, r1, r3
 8006bac:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006bae:	4608      	mov	r0, r1
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006bb6:	1a41      	subs	r1, r0, r1
 8006bb8:	fb03 f101 	mul.w	r1, r3, r1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bca:	1ac3      	subs	r3, r0, r3
 8006bcc:	fb91 f3f3 	sdiv	r3, r1, r3
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006bd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006bda:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006bdc:	7dfa      	ldrb	r2, [r7, #23]
 8006bde:	7ffb      	ldrb	r3, [r7, #31]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d113      	bne.n	8006c0c <clip_line+0x202>
                *x0 = x;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8b7a      	ldrh	r2, [r7, #26]
 8006be8:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	8b3a      	ldrh	r2, [r7, #24]
 8006bee:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006bfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c00:	cb0c      	ldmia	r3, {r2, r3}
 8006c02:	f7ff fec8 	bl	8006996 <code>
 8006c06:	4603      	mov	r3, r0
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e721      	b.n	8006a50 <clip_line+0x46>
            } else {
                *x1 = x;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8b7a      	ldrh	r2, [r7, #26]
 8006c10:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	8b3a      	ldrh	r2, [r7, #24]
 8006c16:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c28:	cb0c      	ldmia	r3, {r2, r3}
 8006c2a:	f7ff feb4 	bl	8006996 <code>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006c32:	e70d      	b.n	8006a50 <clip_line+0x46>
            break;
 8006c34:	bf00      	nop
            }
        }
    }

    return accept;
 8006c36:	7f7b      	ldrb	r3, [r7, #29]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	3306      	adds	r3, #6
 8006c50:	2208      	movs	r2, #8
 8006c52:	4619      	mov	r1, r3
 8006c54:	f001 fcdd 	bl	8008612 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	330e      	adds	r3, #14
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	330f      	adds	r3, #15
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	3310      	adds	r3, #16
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	72da      	strb	r2, [r3, #11]

    return 0;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08e      	sub	sp, #56	@ 0x38
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ffd4 	bl	8006c40 <fontx_meta>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <fontx_glyph+0x2c>
        return status;
 8006ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	e077      	b.n	8006d9c <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006cac:	7f7a      	ldrb	r2, [r7, #29]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006cb2:	7fba      	ldrb	r2, [r7, #30]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006cb8:	7f7b      	ldrb	r3, [r7, #29]
 8006cba:	3307      	adds	r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	da00      	bge.n	8006cc2 <fontx_glyph+0x42>
 8006cc0:	3307      	adds	r3, #7
 8006cc2:	10db      	asrs	r3, r3, #3
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	78da      	ldrb	r2, [r3, #3]
 8006cce:	7fbb      	ldrb	r3, [r7, #30]
 8006cd0:	fb12 f303 	smulbb	r3, r2, r3
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006cda:	7ffb      	ldrb	r3, [r7, #31]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2bff      	cmp	r3, #255	@ 0xff
 8006ce4:	d859      	bhi.n	8006d9a <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	789b      	ldrb	r3, [r3, #2]
 8006cea:	461a      	mov	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	3311      	adds	r3, #17
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	441a      	add	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e04d      	b.n	8006d9c <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3312      	adds	r3, #18
 8006d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3311      	adds	r3, #17
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006d12:	e03d      	b.n	8006d90 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	4413      	add	r3, r2
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d28:	3302      	adds	r3, #2
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d30:	3303      	adds	r3, #3
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	4413      	add	r3, r2
 8006d38:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d31c      	bcc.n	8006d7c <fontx_glyph+0xfc>
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d818      	bhi.n	8006d7c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d52:	4413      	add	r3, r2
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3311      	adds	r3, #17
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	461a      	mov	r2, r3
                    nc * glyph->size
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	789b      	ldrb	r3, [r3, #2]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	441a      	add	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e00f      	b.n	8006d9c <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006d7c:	6a3a      	ldr	r2, [r7, #32]
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d84:	4413      	add	r3, r2
 8006d86:	3301      	adds	r3, #1
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	1e5a      	subs	r2, r3, #1
 8006d94:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1bc      	bne.n	8006d14 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3738      	adds	r7, #56	@ 0x38
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	dd01      	ble.n	8006dba <min+0x16>
        return b;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	e000      	b.n	8006dbc <min+0x18>
    };
    return a;
 8006dba:	687b      	ldr	r3, [r7, #4]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <max>:

static inline int max(int a, int b) {
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	dd01      	ble.n	8006dde <max+0x16>
        return a;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	e000      	b.n	8006de0 <max+0x18>
    }
    return b;
 8006dde:	683b      	ldr	r3, [r7, #0]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	80fb      	strh	r3, [r7, #6]
 8006df6:	460b      	mov	r3, r1
 8006df8:	80bb      	strh	r3, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e02:	4a12      	ldr	r2, [pc, #72]	@ (8006e4c <hagl_put_pixel+0x60>)
 8006e04:	8812      	ldrh	r2, [r2, #0]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	db1a      	blt.n	8006e40 <hagl_put_pixel+0x54>
 8006e0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8006e4c <hagl_put_pixel+0x60>)
 8006e10:	8852      	ldrh	r2, [r2, #2]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	db14      	blt.n	8006e40 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e4c <hagl_put_pixel+0x60>)
 8006e1c:	8892      	ldrh	r2, [r2, #4]
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	dc10      	bgt.n	8006e44 <hagl_put_pixel+0x58>
 8006e22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e26:	4a09      	ldr	r2, [pc, #36]	@ (8006e4c <hagl_put_pixel+0x60>)
 8006e28:	88d2      	ldrh	r2, [r2, #6]
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	dc0a      	bgt.n	8006e44 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e36:	887a      	ldrh	r2, [r7, #2]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fa fda1 	bl	8001980 <lcdPutPixel>
 8006e3e:	e002      	b.n	8006e46 <hagl_put_pixel+0x5a>
        return;
 8006e40:	bf00      	nop
 8006e42:	e000      	b.n	8006e46 <hagl_put_pixel+0x5a>
        return;
 8006e44:	bf00      	nop
}
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	2000020c 	.word	0x2000020c

08006e50 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4623      	mov	r3, r4
 8006e60:	80fb      	strh	r3, [r7, #6]
 8006e62:	4603      	mov	r3, r0
 8006e64:	80bb      	strh	r3, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	807b      	strh	r3, [r7, #2]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	4413      	add	r3, r2
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	b21a      	sxth	r2, r3
 8006e78:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006e7c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e80:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006e84:	883b      	ldrh	r3, [r7, #0]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	4623      	mov	r3, r4
 8006e8a:	f000 f827 	bl	8006edc <hagl_draw_line>
#endif
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd90      	pop	{r4, r7, pc}

08006e96 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006e96:	b590      	push	{r4, r7, lr}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af02      	add	r7, sp, #8
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	4608      	mov	r0, r1
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	80fb      	strh	r3, [r7, #6]
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	80bb      	strh	r3, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	807b      	strh	r3, [r7, #2]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006eb4:	88ba      	ldrh	r2, [r7, #4]
 8006eb6:	887b      	ldrh	r3, [r7, #2]
 8006eb8:	4413      	add	r3, r2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	b21c      	sxth	r4, r3
 8006ebe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ec2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006ec6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006eca:	883b      	ldrh	r3, [r7, #0]
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	4623      	mov	r3, r4
 8006ed0:	f000 f804 	bl	8006edc <hagl_draw_line>
#endif
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd90      	pop	{r4, r7, pc}

08006edc <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ede:	b089      	sub	sp, #36	@ 0x24
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4623      	mov	r3, r4
 8006eec:	80fb      	strh	r3, [r7, #6]
 8006eee:	4603      	mov	r3, r0
 8006ef0:	80bb      	strh	r3, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	807b      	strh	r3, [r7, #2]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006efa:	463b      	mov	r3, r7
 8006efc:	1cba      	adds	r2, r7, #2
 8006efe:	1d3d      	adds	r5, r7, #4
 8006f00:	1dbc      	adds	r4, r7, #6
 8006f02:	494a      	ldr	r1, [pc, #296]	@ (800702c <hagl_draw_line+0x150>)
 8006f04:	466e      	mov	r6, sp
 8006f06:	c903      	ldmia	r1, {r0, r1}
 8006f08:	e886 0003 	stmia.w	r6, {r0, r1}
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7ff fd7b 	bl	8006a0a <clip_line>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f083 0301 	eor.w	r3, r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d17e      	bne.n	800701e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006f20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	bfb8      	it	lt
 8006f30:	425b      	neglt	r3, r3
 8006f32:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006f34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	da01      	bge.n	8006f44 <hagl_draw_line+0x68>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e001      	b.n	8006f48 <hagl_draw_line+0x6c>
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295
 8006f48:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006f4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bfb8      	it	lt
 8006f5a:	425b      	neglt	r3, r3
 8006f5c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006f5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f62:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	da01      	bge.n	8006f6e <hagl_draw_line+0x92>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e001      	b.n	8006f72 <hagl_draw_line+0x96>
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f72:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006f74:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006f78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	dd06      	ble.n	8006f8e <hagl_draw_line+0xb2>
 8006f80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f84:	0fda      	lsrs	r2, r3, #31
 8006f86:	4413      	add	r3, r2
 8006f88:	105b      	asrs	r3, r3, #1
 8006f8a:	b21b      	sxth	r3, r3
 8006f8c:	e006      	b.n	8006f9c <hagl_draw_line+0xc0>
 8006f8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f92:	0fda      	lsrs	r2, r3, #31
 8006f94:	4413      	add	r3, r2
 8006f96:	105b      	asrs	r3, r3, #1
 8006f98:	425b      	negs	r3, r3
 8006f9a:	b21b      	sxth	r3, r3
 8006f9c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8006f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fa2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006fa6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff ff1f 	bl	8006dec <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8006fae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d105      	bne.n	8006fc6 <hagl_draw_line+0xea>
 8006fba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006fbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d02d      	beq.n	8007022 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006fc6:	8afb      	ldrh	r3, [r7, #22]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8006fce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006fd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006fd6:	425b      	negs	r3, r3
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	dd0c      	ble.n	8006ff6 <hagl_draw_line+0x11a>
            err -= dy;
 8006fdc:	8afa      	ldrh	r2, [r7, #22]
 8006fde:	8a3b      	ldrh	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	8a7b      	ldrh	r3, [r7, #18]
 8006fee:	4413      	add	r3, r2
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	b21b      	sxth	r3, r3
 8006ff4:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006ff6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006ffa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	dacd      	bge.n	8006f9e <hagl_draw_line+0xc2>
            err += dx;
 8007002:	8afa      	ldrh	r2, [r7, #22]
 8007004:	8abb      	ldrh	r3, [r7, #20]
 8007006:	4413      	add	r3, r2
 8007008:	b29b      	uxth	r3, r3
 800700a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800700c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007010:	b29a      	uxth	r2, r3
 8007012:	89fb      	ldrh	r3, [r7, #14]
 8007014:	4413      	add	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	b21b      	sxth	r3, r3
 800701a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800701c:	e7bf      	b.n	8006f9e <hagl_draw_line+0xc2>
        return;
 800701e:	bf00      	nop
 8007020:	e000      	b.n	8007024 <hagl_draw_line+0x148>
            break;
 8007022:	bf00      	nop
        }
    }
}
 8007024:	371c      	adds	r7, #28
 8007026:	46bd      	mov	sp, r7
 8007028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702a:	bf00      	nop
 800702c:	2000020c 	.word	0x2000020c

08007030 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007030:	b590      	push	{r4, r7, lr}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	4611      	mov	r1, r2
 800703c:	461a      	mov	r2, r3
 800703e:	4623      	mov	r3, r4
 8007040:	80fb      	strh	r3, [r7, #6]
 8007042:	4603      	mov	r3, r0
 8007044:	80bb      	strh	r3, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	807b      	strh	r3, [r7, #2]
 800704a:	4613      	mov	r3, r2
 800704c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800704e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007056:	429a      	cmp	r2, r3
 8007058:	dd0e      	ble.n	8007078 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	887b      	ldrh	r3, [r7, #2]
 800705e:	4413      	add	r3, r2
 8007060:	b29b      	uxth	r3, r3
 8007062:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007064:	88fa      	ldrh	r2, [r7, #6]
 8007066:	887b      	ldrh	r3, [r7, #2]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	b29b      	uxth	r3, r3
 800706c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800706e:	88fa      	ldrh	r2, [r7, #6]
 8007070:	887b      	ldrh	r3, [r7, #2]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	b29b      	uxth	r3, r3
 8007076:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007078:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800707c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007080:	429a      	cmp	r2, r3
 8007082:	dd0e      	ble.n	80070a2 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8007084:	88ba      	ldrh	r2, [r7, #4]
 8007086:	883b      	ldrh	r3, [r7, #0]
 8007088:	4413      	add	r3, r2
 800708a:	b29b      	uxth	r3, r3
 800708c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800708e:	88ba      	ldrh	r2, [r7, #4]
 8007090:	883b      	ldrh	r3, [r7, #0]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	b29b      	uxth	r3, r3
 8007096:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007098:	88ba      	ldrh	r2, [r7, #4]
 800709a:	883b      	ldrh	r3, [r7, #0]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80070a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070a6:	4a24      	ldr	r2, [pc, #144]	@ (8007138 <hagl_draw_rectangle+0x108>)
 80070a8:	8812      	ldrh	r2, [r2, #0]
 80070aa:	4293      	cmp	r3, r2
 80070ac:	db3e      	blt.n	800712c <hagl_draw_rectangle+0xfc>
 80070ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070b2:	4a21      	ldr	r2, [pc, #132]	@ (8007138 <hagl_draw_rectangle+0x108>)
 80070b4:	8852      	ldrh	r2, [r2, #2]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	db38      	blt.n	800712c <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80070ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070be:	4a1e      	ldr	r2, [pc, #120]	@ (8007138 <hagl_draw_rectangle+0x108>)
 80070c0:	8892      	ldrh	r2, [r2, #4]
 80070c2:	4293      	cmp	r3, r2
 80070c4:	dc34      	bgt.n	8007130 <hagl_draw_rectangle+0x100>
 80070c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80070ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007138 <hagl_draw_rectangle+0x108>)
 80070cc:	88d2      	ldrh	r2, [r2, #6]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	dc2e      	bgt.n	8007130 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80070d2:	887a      	ldrh	r2, [r7, #2]
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3301      	adds	r3, #1
 80070dc:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80070de:	883a      	ldrh	r2, [r7, #0]
 80070e0:	88bb      	ldrh	r3, [r7, #4]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3301      	adds	r3, #1
 80070e8:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80070ea:	8c3b      	ldrh	r3, [r7, #32]
 80070ec:	89fa      	ldrh	r2, [r7, #14]
 80070ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80070f6:	f7ff feab 	bl	8006e50 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 80070fa:	8c3b      	ldrh	r3, [r7, #32]
 80070fc:	89fa      	ldrh	r2, [r7, #14]
 80070fe:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007102:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007106:	f7ff fea3 	bl	8006e50 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800710a:	8c3b      	ldrh	r3, [r7, #32]
 800710c:	89ba      	ldrh	r2, [r7, #12]
 800710e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007112:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007116:	f7ff febe 	bl	8006e96 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800711a:	8c3b      	ldrh	r3, [r7, #32]
 800711c:	89ba      	ldrh	r2, [r7, #12]
 800711e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007122:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007126:	f7ff feb6 	bl	8006e96 <hagl_draw_vline>
 800712a:	e002      	b.n	8007132 <hagl_draw_rectangle+0x102>
        return;
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <hagl_draw_rectangle+0x102>
        return;
 8007130:	bf00      	nop
}
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	bd90      	pop	{r4, r7, pc}
 8007138:	2000020c 	.word	0x2000020c

0800713c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	461a      	mov	r2, r3
 800714a:	4623      	mov	r3, r4
 800714c:	80fb      	strh	r3, [r7, #6]
 800714e:	4603      	mov	r3, r0
 8007150:	80bb      	strh	r3, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	807b      	strh	r3, [r7, #2]
 8007156:	4613      	mov	r3, r2
 8007158:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800715a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800715e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007162:	429a      	cmp	r2, r3
 8007164:	dd0e      	ble.n	8007184 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	887b      	ldrh	r3, [r7, #2]
 800716a:	4413      	add	r3, r2
 800716c:	b29b      	uxth	r3, r3
 800716e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007170:	88fa      	ldrh	r2, [r7, #6]
 8007172:	887b      	ldrh	r3, [r7, #2]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	b29b      	uxth	r3, r3
 8007178:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	887b      	ldrh	r3, [r7, #2]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	b29b      	uxth	r3, r3
 8007182:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007184:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007188:	f9b7 3000 	ldrsh.w	r3, [r7]
 800718c:	429a      	cmp	r2, r3
 800718e:	dd0e      	ble.n	80071ae <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007190:	88ba      	ldrh	r2, [r7, #4]
 8007192:	883b      	ldrh	r3, [r7, #0]
 8007194:	4413      	add	r3, r2
 8007196:	b29b      	uxth	r3, r3
 8007198:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800719a:	88ba      	ldrh	r2, [r7, #4]
 800719c:	883b      	ldrh	r3, [r7, #0]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80071a4:	88ba      	ldrh	r2, [r7, #4]
 80071a6:	883b      	ldrh	r3, [r7, #0]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80071ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071b2:	4a33      	ldr	r2, [pc, #204]	@ (8007280 <hagl_fill_rectangle+0x144>)
 80071b4:	8812      	ldrh	r2, [r2, #0]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	db5b      	blt.n	8007272 <hagl_fill_rectangle+0x136>
 80071ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071be:	4a30      	ldr	r2, [pc, #192]	@ (8007280 <hagl_fill_rectangle+0x144>)
 80071c0:	8852      	ldrh	r2, [r2, #2]
 80071c2:	4293      	cmp	r3, r2
 80071c4:	db55      	blt.n	8007272 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80071c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007280 <hagl_fill_rectangle+0x144>)
 80071cc:	8892      	ldrh	r2, [r2, #4]
 80071ce:	4293      	cmp	r3, r2
 80071d0:	dc51      	bgt.n	8007276 <hagl_fill_rectangle+0x13a>
 80071d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007280 <hagl_fill_rectangle+0x144>)
 80071d8:	88d2      	ldrh	r2, [r2, #6]
 80071da:	4293      	cmp	r3, r2
 80071dc:	dc4b      	bgt.n	8007276 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80071de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071e2:	4a27      	ldr	r2, [pc, #156]	@ (8007280 <hagl_fill_rectangle+0x144>)
 80071e4:	8812      	ldrh	r2, [r2, #0]
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fded 	bl	8006dc8 <max>
 80071ee:	4603      	mov	r3, r0
 80071f0:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80071f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071f6:	4a22      	ldr	r2, [pc, #136]	@ (8007280 <hagl_fill_rectangle+0x144>)
 80071f8:	8852      	ldrh	r2, [r2, #2]
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fde3 	bl	8006dc8 <max>
 8007202:	4603      	mov	r3, r0
 8007204:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8007206:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800720a:	4a1d      	ldr	r2, [pc, #116]	@ (8007280 <hagl_fill_rectangle+0x144>)
 800720c:	8892      	ldrh	r2, [r2, #4]
 800720e:	4611      	mov	r1, r2
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fdc7 	bl	8006da4 <min>
 8007216:	4603      	mov	r3, r0
 8007218:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800721a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800721e:	4a18      	ldr	r2, [pc, #96]	@ (8007280 <hagl_fill_rectangle+0x144>)
 8007220:	88d2      	ldrh	r2, [r2, #6]
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff fdbd 	bl	8006da4 <min>
 800722a:	4603      	mov	r3, r0
 800722c:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800722e:	887a      	ldrh	r2, [r7, #2]
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	b29b      	uxth	r3, r3
 8007236:	3301      	adds	r3, #1
 8007238:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800723a:	883a      	ldrh	r2, [r7, #0]
 800723c:	88bb      	ldrh	r3, [r7, #4]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	b29b      	uxth	r3, r3
 8007242:	3301      	adds	r3, #1
 8007244:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007246:	2300      	movs	r3, #0
 8007248:	81fb      	strh	r3, [r7, #14]
 800724a:	e00d      	b.n	8007268 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800724c:	88ba      	ldrh	r2, [r7, #4]
 800724e:	89fb      	ldrh	r3, [r7, #14]
 8007250:	4413      	add	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	b219      	sxth	r1, r3
 8007256:	8c3b      	ldrh	r3, [r7, #32]
 8007258:	89ba      	ldrh	r2, [r7, #12]
 800725a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800725e:	f7ff fdf7 	bl	8006e50 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007262:	89fb      	ldrh	r3, [r7, #14]
 8007264:	3301      	adds	r3, #1
 8007266:	81fb      	strh	r3, [r7, #14]
 8007268:	89fa      	ldrh	r2, [r7, #14]
 800726a:	897b      	ldrh	r3, [r7, #10]
 800726c:	429a      	cmp	r2, r3
 800726e:	d3ed      	bcc.n	800724c <hagl_fill_rectangle+0x110>
 8007270:	e002      	b.n	8007278 <hagl_fill_rectangle+0x13c>
        return;
 8007272:	bf00      	nop
 8007274:	e000      	b.n	8007278 <hagl_fill_rectangle+0x13c>
        return;
 8007276:	bf00      	nop
#endif
    }
}
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	bd90      	pop	{r4, r7, pc}
 800727e:	bf00      	nop
 8007280:	2000020c 	.word	0x2000020c

08007284 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007284:	b590      	push	{r4, r7, lr}
 8007286:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8007292:	f844 0c24 	str.w	r0, [r4, #-36]
 8007296:	460c      	mov	r4, r1
 8007298:	4610      	mov	r0, r2
 800729a:	4619      	mov	r1, r3
 800729c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072a0:	4622      	mov	r2, r4
 80072a2:	f823 2c26 	strh.w	r2, [r3, #-38]
 80072a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072aa:	4602      	mov	r2, r0
 80072ac:	f823 2c28 	strh.w	r2, [r3, #-40]
 80072b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072b4:	460a      	mov	r2, r1
 80072b6:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80072ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072be:	4619      	mov	r1, r3
 80072c0:	f107 0310 	add.w	r3, r7, #16
 80072c4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fcd6 	bl	8006c80 <fontx_glyph>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80072da:	f102 0209 	add.w	r2, r2, #9
 80072de:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80072e0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80072e4:	f103 0309 	add.w	r3, r3, #9
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <hagl_put_char+0x6e>
        return 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e0c0      	b.n	8007474 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80072f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007300:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8007304:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007308:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800730c:	461a      	mov	r2, r3
 800730e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007312:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8007316:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800731a:	2210      	movs	r2, #16
 800731c:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007320:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007324:	3a08      	subs	r2, #8
 8007326:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800732a:	3b18      	subs	r3, #24
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fb0e 	bl	8006950 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8007334:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007338:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800733c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007340:	f102 020c 	add.w	r2, r2, #12
 8007344:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8007346:	2300      	movs	r3, #0
 8007348:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800734c:	f102 020b 	add.w	r2, r2, #11
 8007350:	7013      	strb	r3, [r2, #0]
 8007352:	e071      	b.n	8007438 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007354:	2300      	movs	r3, #0
 8007356:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800735a:	f102 020a 	add.w	r2, r2, #10
 800735e:	7013      	strb	r3, [r2, #0]
 8007360:	e047      	b.n	80073f2 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007362:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007366:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b25a      	sxtb	r2, r3
 800736e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007372:	f103 030a 	add.w	r3, r3, #10
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	2180      	movs	r1, #128	@ 0x80
 800737e:	fa41 f303 	asr.w	r3, r1, r3
 8007382:	b25b      	sxtb	r3, r3
 8007384:	4013      	ands	r3, r2
 8007386:	b25b      	sxtb	r3, r3
 8007388:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800738c:	f102 0208 	add.w	r2, r2, #8
 8007390:	7013      	strb	r3, [r2, #0]
            if (set) {
 8007392:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007396:	f103 0308 	add.w	r3, r3, #8
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <hagl_put_char+0x13e>
                *(ptr++) = color;
 80073a0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073a4:	f103 030c 	add.w	r3, r3, #12
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	1c9a      	adds	r2, r3, #2
 80073ac:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80073b0:	f101 010c 	add.w	r1, r1, #12
 80073b4:	600a      	str	r2, [r1, #0]
 80073b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80073ba:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	e00c      	b.n	80073dc <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80073c2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073c6:	f103 030c 	add.w	r3, r3, #12
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	1c9a      	adds	r2, r3, #2
 80073ce:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80073d2:	f101 010c 	add.w	r1, r1, #12
 80073d6:	600a      	str	r2, [r1, #0]
 80073d8:	2200      	movs	r2, #0
 80073da:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80073dc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073e0:	f103 030a 	add.w	r3, r3, #10
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	3301      	adds	r3, #1
 80073e8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073ec:	f102 020a 	add.w	r2, r2, #10
 80073f0:	7013      	strb	r3, [r2, #0]
 80073f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80073fa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073fe:	f102 020a 	add.w	r2, r2, #10
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d3ac      	bcc.n	8007362 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8007408:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800740c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007410:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007414:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8007418:	4413      	add	r3, r2
 800741a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800741e:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8007422:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007426:	f103 030b 	add.w	r3, r3, #11
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007432:	f102 020b 	add.w	r2, r2, #11
 8007436:	7013      	strb	r3, [r2, #0]
 8007438:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800743c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007440:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007444:	f102 020b 	add.w	r2, r2, #11
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d382      	bcc.n	8007354 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800744e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007452:	3b18      	subs	r3, #24
 8007454:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007458:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800745c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007460:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007464:	461a      	mov	r2, r3
 8007466:	f000 f85a 	bl	800751e <hagl_blit>

    return bitmap.width;
 800746a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800746e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007472:	b2db      	uxtb	r3, r3
}
 8007474:	4618      	mov	r0, r3
 8007476:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bd90      	pop	{r4, r7, pc}

08007480 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08c      	sub	sp, #48	@ 0x30
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	4608      	mov	r0, r1
 800748a:	4611      	mov	r1, r2
 800748c:	461a      	mov	r2, r3
 800748e:	4603      	mov	r3, r0
 8007490:	817b      	strh	r3, [r7, #10]
 8007492:	460b      	mov	r3, r1
 8007494:	813b      	strh	r3, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 800749a:	897b      	ldrh	r3, [r7, #10]
 800749c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800749e:	f107 0314 	add.w	r3, r7, #20
 80074a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff fbcb 	bl	8006c40 <fontx_meta>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80074b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <hagl_put_text+0x3c>
        return 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e02c      	b.n	8007516 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	60fa      	str	r2, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	2b0d      	cmp	r3, #13
 80074ca:	d002      	beq.n	80074d2 <hagl_put_text+0x52>
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	2b0a      	cmp	r3, #10
 80074d0:	d108      	bne.n	80074e4 <hagl_put_text+0x64>
            x0 = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80074d6:	7fbb      	ldrb	r3, [r7, #30]
 80074d8:	461a      	mov	r2, r3
 80074da:	893b      	ldrh	r3, [r7, #8]
 80074dc:	4413      	add	r3, r2
 80074de:	b29b      	uxth	r3, r3
 80074e0:	813b      	strh	r3, [r7, #8]
 80074e2:	e010      	b.n	8007506 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80074e4:	88f8      	ldrh	r0, [r7, #6]
 80074e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80074ea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	4603      	mov	r3, r0
 80074f4:	6a38      	ldr	r0, [r7, #32]
 80074f6:	f7ff fec5 	bl	8007284 <hagl_put_char>
 80074fa:	4603      	mov	r3, r0
 80074fc:	461a      	mov	r2, r3
 80074fe:	897b      	ldrh	r3, [r7, #10]
 8007500:	4413      	add	r3, r2
 8007502:	b29b      	uxth	r3, r3
 8007504:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1d6      	bne.n	80074bc <hagl_put_text+0x3c>

    return x0 - original;
 800750e:	897a      	ldrh	r2, [r7, #10]
 8007510:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	b29b      	uxth	r3, r3
}
 8007516:	4618      	mov	r0, r3
 8007518:	3728      	adds	r7, #40	@ 0x28
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	4603      	mov	r3, r0
 8007526:	603a      	str	r2, [r7, #0]
 8007528:	80fb      	strh	r3, [r7, #6]
 800752a:	460b      	mov	r3, r1
 800752c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007534:	2300      	movs	r3, #0
 8007536:	827b      	strh	r3, [r7, #18]
 8007538:	e020      	b.n	800757c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800753a:	2300      	movs	r3, #0
 800753c:	823b      	strh	r3, [r7, #16]
 800753e:	e015      	b.n	800756c <hagl_blit+0x4e>
            color = *(ptr++);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	1c9a      	adds	r2, r3, #2
 8007544:	617a      	str	r2, [r7, #20]
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	8a3b      	ldrh	r3, [r7, #16]
 800754e:	4413      	add	r3, r2
 8007550:	b29b      	uxth	r3, r3
 8007552:	b218      	sxth	r0, r3
 8007554:	88ba      	ldrh	r2, [r7, #4]
 8007556:	8a7b      	ldrh	r3, [r7, #18]
 8007558:	4413      	add	r3, r2
 800755a:	b29b      	uxth	r3, r3
 800755c:	b21b      	sxth	r3, r3
 800755e:	89fa      	ldrh	r2, [r7, #14]
 8007560:	4619      	mov	r1, r3
 8007562:	f7ff fc43 	bl	8006dec <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007566:	8a3b      	ldrh	r3, [r7, #16]
 8007568:	3301      	adds	r3, #1
 800756a:	823b      	strh	r3, [r7, #16]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	8a3a      	ldrh	r2, [r7, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	d3e4      	bcc.n	8007540 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007576:	8a7b      	ldrh	r3, [r7, #18]
 8007578:	3301      	adds	r3, #1
 800757a:	827b      	strh	r3, [r7, #18]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	885b      	ldrh	r3, [r3, #2]
 8007580:	8a7a      	ldrh	r2, [r7, #18]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3d9      	bcc.n	800753a <hagl_blit+0x1c>
        }
    }
#endif
};
 8007586:	bf00      	nop
 8007588:	bf00      	nop
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	461a      	mov	r2, r3
 800759e:	4623      	mov	r3, r4
 80075a0:	80fb      	strh	r3, [r7, #6]
 80075a2:	4603      	mov	r3, r0
 80075a4:	80bb      	strh	r3, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	807b      	strh	r3, [r7, #2]
 80075aa:	4613      	mov	r3, r2
 80075ac:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80075b2:	887b      	ldrh	r3, [r7, #2]
 80075b4:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80075b6:	887b      	ldrh	r3, [r7, #2]
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f1c3 0303 	rsb	r3, r3, #3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	89fb      	ldrh	r3, [r7, #14]
 80075c8:	4413      	add	r3, r2
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	b218      	sxth	r0, r3
 80075ce:	88ba      	ldrh	r2, [r7, #4]
 80075d0:	89bb      	ldrh	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	b21b      	sxth	r3, r3
 80075d8:	883a      	ldrh	r2, [r7, #0]
 80075da:	4619      	mov	r1, r3
 80075dc:	f7ff fc06 	bl	8006dec <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	89fb      	ldrh	r3, [r7, #14]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	b218      	sxth	r0, r3
 80075ea:	88ba      	ldrh	r2, [r7, #4]
 80075ec:	89bb      	ldrh	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	b21b      	sxth	r3, r3
 80075f4:	883a      	ldrh	r2, [r7, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	f7ff fbf8 	bl	8006dec <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	89fb      	ldrh	r3, [r7, #14]
 8007600:	4413      	add	r3, r2
 8007602:	b29b      	uxth	r3, r3
 8007604:	b218      	sxth	r0, r3
 8007606:	88ba      	ldrh	r2, [r7, #4]
 8007608:	89bb      	ldrh	r3, [r7, #12]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	b29b      	uxth	r3, r3
 800760e:	b21b      	sxth	r3, r3
 8007610:	883a      	ldrh	r2, [r7, #0]
 8007612:	4619      	mov	r1, r3
 8007614:	f7ff fbea 	bl	8006dec <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	89fb      	ldrh	r3, [r7, #14]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	b29b      	uxth	r3, r3
 8007620:	b218      	sxth	r0, r3
 8007622:	88ba      	ldrh	r2, [r7, #4]
 8007624:	89bb      	ldrh	r3, [r7, #12]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	b29b      	uxth	r3, r3
 800762a:	b21b      	sxth	r3, r3
 800762c:	883a      	ldrh	r2, [r7, #0]
 800762e:	4619      	mov	r1, r3
 8007630:	f7ff fbdc 	bl	8006dec <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8007634:	88fa      	ldrh	r2, [r7, #6]
 8007636:	89bb      	ldrh	r3, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	b29b      	uxth	r3, r3
 800763c:	b218      	sxth	r0, r3
 800763e:	88ba      	ldrh	r2, [r7, #4]
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	4413      	add	r3, r2
 8007644:	b29b      	uxth	r3, r3
 8007646:	b21b      	sxth	r3, r3
 8007648:	883a      	ldrh	r2, [r7, #0]
 800764a:	4619      	mov	r1, r3
 800764c:	f7ff fbce 	bl	8006dec <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8007650:	88fa      	ldrh	r2, [r7, #6]
 8007652:	89bb      	ldrh	r3, [r7, #12]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	b29b      	uxth	r3, r3
 8007658:	b218      	sxth	r0, r3
 800765a:	88ba      	ldrh	r2, [r7, #4]
 800765c:	89fb      	ldrh	r3, [r7, #14]
 800765e:	4413      	add	r3, r2
 8007660:	b29b      	uxth	r3, r3
 8007662:	b21b      	sxth	r3, r3
 8007664:	883a      	ldrh	r2, [r7, #0]
 8007666:	4619      	mov	r1, r3
 8007668:	f7ff fbc0 	bl	8006dec <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 800766c:	88fa      	ldrh	r2, [r7, #6]
 800766e:	89bb      	ldrh	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	b29b      	uxth	r3, r3
 8007674:	b218      	sxth	r0, r3
 8007676:	88ba      	ldrh	r2, [r7, #4]
 8007678:	89fb      	ldrh	r3, [r7, #14]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	b29b      	uxth	r3, r3
 800767e:	b21b      	sxth	r3, r3
 8007680:	883a      	ldrh	r2, [r7, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	f7ff fbb2 	bl	8006dec <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	89bb      	ldrh	r3, [r7, #12]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	b29b      	uxth	r3, r3
 8007690:	b218      	sxth	r0, r3
 8007692:	88ba      	ldrh	r2, [r7, #4]
 8007694:	89fb      	ldrh	r3, [r7, #14]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	b29b      	uxth	r3, r3
 800769a:	b21b      	sxth	r3, r3
 800769c:	883a      	ldrh	r2, [r7, #0]
 800769e:	4619      	mov	r1, r3
 80076a0:	f7ff fba4 	bl	8006dec <hagl_put_pixel>

    while (y >= x) {
 80076a4:	e097      	b.n	80077d6 <hagl_draw_circle+0x246>
        x++;
 80076a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3301      	adds	r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80076b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dd14      	ble.n	80076e4 <hagl_draw_circle+0x154>
            y--;
 80076ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80076c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80076ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	897b      	ldrh	r3, [r7, #10]
 80076d8:	4413      	add	r3, r2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	330a      	adds	r3, #10
 80076de:	b29b      	uxth	r3, r3
 80076e0:	817b      	strh	r3, [r7, #10]
 80076e2:	e008      	b.n	80076f6 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 80076e4:	89fb      	ldrh	r3, [r7, #14]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	897b      	ldrh	r3, [r7, #10]
 80076ec:	4413      	add	r3, r2
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3306      	adds	r3, #6
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 80076f6:	88fa      	ldrh	r2, [r7, #6]
 80076f8:	89fb      	ldrh	r3, [r7, #14]
 80076fa:	4413      	add	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	b218      	sxth	r0, r3
 8007700:	88ba      	ldrh	r2, [r7, #4]
 8007702:	89bb      	ldrh	r3, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	b29b      	uxth	r3, r3
 8007708:	b21b      	sxth	r3, r3
 800770a:	883a      	ldrh	r2, [r7, #0]
 800770c:	4619      	mov	r1, r3
 800770e:	f7ff fb6d 	bl	8006dec <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	b29b      	uxth	r3, r3
 800771a:	b218      	sxth	r0, r3
 800771c:	88ba      	ldrh	r2, [r7, #4]
 800771e:	89bb      	ldrh	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	b21b      	sxth	r3, r3
 8007726:	883a      	ldrh	r2, [r7, #0]
 8007728:	4619      	mov	r1, r3
 800772a:	f7ff fb5f 	bl	8006dec <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 800772e:	88fa      	ldrh	r2, [r7, #6]
 8007730:	89fb      	ldrh	r3, [r7, #14]
 8007732:	4413      	add	r3, r2
 8007734:	b29b      	uxth	r3, r3
 8007736:	b218      	sxth	r0, r3
 8007738:	88ba      	ldrh	r2, [r7, #4]
 800773a:	89bb      	ldrh	r3, [r7, #12]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	b21b      	sxth	r3, r3
 8007742:	883a      	ldrh	r2, [r7, #0]
 8007744:	4619      	mov	r1, r3
 8007746:	f7ff fb51 	bl	8006dec <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	89fb      	ldrh	r3, [r7, #14]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	b29b      	uxth	r3, r3
 8007752:	b218      	sxth	r0, r3
 8007754:	88ba      	ldrh	r2, [r7, #4]
 8007756:	89bb      	ldrh	r3, [r7, #12]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	b29b      	uxth	r3, r3
 800775c:	b21b      	sxth	r3, r3
 800775e:	883a      	ldrh	r2, [r7, #0]
 8007760:	4619      	mov	r1, r3
 8007762:	f7ff fb43 	bl	8006dec <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007766:	88fa      	ldrh	r2, [r7, #6]
 8007768:	89bb      	ldrh	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	b29b      	uxth	r3, r3
 800776e:	b218      	sxth	r0, r3
 8007770:	88ba      	ldrh	r2, [r7, #4]
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	4413      	add	r3, r2
 8007776:	b29b      	uxth	r3, r3
 8007778:	b21b      	sxth	r3, r3
 800777a:	883a      	ldrh	r2, [r7, #0]
 800777c:	4619      	mov	r1, r3
 800777e:	f7ff fb35 	bl	8006dec <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8007782:	88fa      	ldrh	r2, [r7, #6]
 8007784:	89bb      	ldrh	r3, [r7, #12]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	b29b      	uxth	r3, r3
 800778a:	b218      	sxth	r0, r3
 800778c:	88ba      	ldrh	r2, [r7, #4]
 800778e:	89fb      	ldrh	r3, [r7, #14]
 8007790:	4413      	add	r3, r2
 8007792:	b29b      	uxth	r3, r3
 8007794:	b21b      	sxth	r3, r3
 8007796:	883a      	ldrh	r2, [r7, #0]
 8007798:	4619      	mov	r1, r3
 800779a:	f7ff fb27 	bl	8006dec <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	89bb      	ldrh	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	b218      	sxth	r0, r3
 80077a8:	88ba      	ldrh	r2, [r7, #4]
 80077aa:	89fb      	ldrh	r3, [r7, #14]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	b21b      	sxth	r3, r3
 80077b2:	883a      	ldrh	r2, [r7, #0]
 80077b4:	4619      	mov	r1, r3
 80077b6:	f7ff fb19 	bl	8006dec <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	89bb      	ldrh	r3, [r7, #12]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b218      	sxth	r0, r3
 80077c4:	88ba      	ldrh	r2, [r7, #4]
 80077c6:	89fb      	ldrh	r3, [r7, #14]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	b21b      	sxth	r3, r3
 80077ce:	883a      	ldrh	r2, [r7, #0]
 80077d0:	4619      	mov	r1, r3
 80077d2:	f7ff fb0b 	bl	8006dec <hagl_put_pixel>
    while (y >= x) {
 80077d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80077da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077de:	429a      	cmp	r2, r3
 80077e0:	f6bf af61 	bge.w	80076a6 <hagl_draw_circle+0x116>
    }
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd90      	pop	{r4, r7, pc}

080077ee <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 80077ee:	b590      	push	{r4, r7, lr}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	4604      	mov	r4, r0
 80077f6:	4608      	mov	r0, r1
 80077f8:	4611      	mov	r1, r2
 80077fa:	461a      	mov	r2, r3
 80077fc:	4623      	mov	r3, r4
 80077fe:	80fb      	strh	r3, [r7, #6]
 8007800:	4603      	mov	r3, r0
 8007802:	80bb      	strh	r3, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	807b      	strh	r3, [r7, #2]
 8007808:	4613      	mov	r3, r2
 800780a:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007810:	887b      	ldrh	r3, [r7, #2]
 8007812:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007814:	887b      	ldrh	r3, [r7, #2]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	b29b      	uxth	r3, r3
 800781a:	f1c3 0303 	rsb	r3, r3, #3
 800781e:	b29b      	uxth	r3, r3
 8007820:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007822:	e067      	b.n	80078f4 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	89fb      	ldrh	r3, [r7, #14]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	b29b      	uxth	r3, r3
 800782c:	b218      	sxth	r0, r3
 800782e:	88ba      	ldrh	r2, [r7, #4]
 8007830:	89bb      	ldrh	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	b29b      	uxth	r3, r3
 8007836:	b219      	sxth	r1, r3
 8007838:	89fb      	ldrh	r3, [r7, #14]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	883b      	ldrh	r3, [r7, #0]
 8007840:	f7ff fb06 	bl	8006e50 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007844:	88fa      	ldrh	r2, [r7, #6]
 8007846:	89fb      	ldrh	r3, [r7, #14]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	b29b      	uxth	r3, r3
 800784c:	b218      	sxth	r0, r3
 800784e:	88ba      	ldrh	r2, [r7, #4]
 8007850:	89bb      	ldrh	r3, [r7, #12]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	b29b      	uxth	r3, r3
 8007856:	b219      	sxth	r1, r3
 8007858:	89fb      	ldrh	r3, [r7, #14]
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	883b      	ldrh	r3, [r7, #0]
 8007860:	f7ff faf6 	bl	8006e50 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007864:	88fa      	ldrh	r2, [r7, #6]
 8007866:	89bb      	ldrh	r3, [r7, #12]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	b29b      	uxth	r3, r3
 800786c:	b218      	sxth	r0, r3
 800786e:	88ba      	ldrh	r2, [r7, #4]
 8007870:	89fb      	ldrh	r3, [r7, #14]
 8007872:	4413      	add	r3, r2
 8007874:	b29b      	uxth	r3, r3
 8007876:	b219      	sxth	r1, r3
 8007878:	89bb      	ldrh	r3, [r7, #12]
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	b29a      	uxth	r2, r3
 800787e:	883b      	ldrh	r3, [r7, #0]
 8007880:	f7ff fae6 	bl	8006e50 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	89bb      	ldrh	r3, [r7, #12]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	b218      	sxth	r0, r3
 800788e:	88ba      	ldrh	r2, [r7, #4]
 8007890:	89fb      	ldrh	r3, [r7, #14]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	b29b      	uxth	r3, r3
 8007896:	b219      	sxth	r1, r3
 8007898:	89bb      	ldrh	r3, [r7, #12]
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	883b      	ldrh	r3, [r7, #0]
 80078a0:	f7ff fad6 	bl	8006e50 <hagl_draw_hline>
        x++;
 80078a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3301      	adds	r3, #1
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80078b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	dd14      	ble.n	80078e2 <hagl_fill_circle+0xf4>
            y--;
 80078b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80078c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80078c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	897b      	ldrh	r3, [r7, #10]
 80078d6:	4413      	add	r3, r2
 80078d8:	b29b      	uxth	r3, r3
 80078da:	330a      	adds	r3, #10
 80078dc:	b29b      	uxth	r3, r3
 80078de:	817b      	strh	r3, [r7, #10]
 80078e0:	e008      	b.n	80078f4 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 80078e2:	89fb      	ldrh	r3, [r7, #14]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	897b      	ldrh	r3, [r7, #10]
 80078ea:	4413      	add	r3, r2
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3306      	adds	r3, #6
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 80078f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80078f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	da91      	bge.n	8007824 <hagl_fill_circle+0x36>
        }
    }
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	bd90      	pop	{r4, r7, pc}

0800790a <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 800790a:	b590      	push	{r4, r7, lr}
 800790c:	b087      	sub	sp, #28
 800790e:	af02      	add	r7, sp, #8
 8007910:	4603      	mov	r3, r0
 8007912:	6039      	str	r1, [r7, #0]
 8007914:	80fb      	strh	r3, [r7, #6]
 8007916:	4613      	mov	r3, r2
 8007918:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 800791a:	2300      	movs	r3, #0
 800791c:	81fb      	strh	r3, [r7, #14]
 800791e:	e02a      	b.n	8007976 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4413      	add	r3, r2
        hagl_draw_line(
 800792a:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 800792e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	3302      	adds	r3, #2
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	4413      	add	r3, r2
        hagl_draw_line(
 800793a:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 800793e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007942:	3301      	adds	r3, #1
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	4413      	add	r3, r2
        hagl_draw_line(
 800794a:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 800794e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	3306      	adds	r3, #6
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4413      	add	r3, r2
        hagl_draw_line(
 800795a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800795e:	88bb      	ldrh	r3, [r7, #4]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	4622      	mov	r2, r4
 8007966:	f7ff fab9 	bl	8006edc <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 800796a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800796e:	b29b      	uxth	r3, r3
 8007970:	3301      	adds	r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	81fb      	strh	r3, [r7, #14]
 8007976:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800797a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800797e:	3b01      	subs	r3, #1
 8007980:	429a      	cmp	r2, r3
 8007982:	dbcd      	blt.n	8007920 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	3302      	adds	r3, #2
    hagl_draw_line(
 800798e:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007996:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800799a:	3b01      	subs	r3, #1
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4413      	add	r3, r2
    hagl_draw_line(
 80079a2:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 80079a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	3b02      	subs	r3, #2
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4413      	add	r3, r2
    hagl_draw_line(
 80079b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80079b6:	88bb      	ldrh	r3, [r7, #4]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4613      	mov	r3, r2
 80079bc:	4622      	mov	r2, r4
 80079be:	f7ff fa8d 	bl	8006edc <hagl_draw_line>
        color
    );
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd90      	pop	{r4, r7, pc}

080079ca <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b0ac      	sub	sp, #176	@ 0xb0
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	4603      	mov	r3, r0
 80079d2:	6039      	str	r1, [r7, #0]
 80079d4:	80fb      	strh	r3, [r7, #6]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 80079da:	2380      	movs	r3, #128	@ 0x80
 80079dc:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80079ec:	e02e      	b.n	8007a4c <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 80079ee:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	3302      	adds	r3, #2
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4413      	add	r3, r2
 80079fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079fe:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007a02:	429a      	cmp	r2, r3
 8007a04:	dd08      	ble.n	8007a18 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007a06:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007a18:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	3302      	adds	r3, #2
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	4413      	add	r3, r2
 8007a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a28:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	da08      	bge.n	8007a42 <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007a30:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	3302      	adds	r3, #2
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007a42:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a46:	3301      	adds	r3, #1
 8007a48:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007a4c:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	dbca      	blt.n	80079ee <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007a58:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007a5c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007a60:	e144      	b.n	8007cec <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007a72:	2300      	movs	r3, #0
 8007a74:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007a78:	e0a6      	b.n	8007bc8 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007a7a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	4413      	add	r3, r2
 8007a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a88:	ee07 3a90 	vmov	s15, r3
 8007a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a90:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007a94:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	3302      	adds	r3, #2
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aa4:	ee07 3a90 	vmov	s15, r3
 8007aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aac:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007ab0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ac6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007aca:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ae2:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007ae6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007af2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afe:	d50c      	bpl.n	8007b1a <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007b00:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b04:	ee07 3a90 	vmov	s15, r3
 8007b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b0c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b18:	da19      	bge.n	8007b4e <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007b1a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007b26:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b32:	d53e      	bpl.n	8007bb2 <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007b34:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b38:	ee07 3a90 	vmov	s15, r3
 8007b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b40:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4c:	db31      	blt.n	8007bb2 <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007b4e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b5a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007b5e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b62:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007b66:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b72:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007b76:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007b7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b82:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b8e:	ee17 3a90 	vmov	r3, s15
 8007b92:	b21a      	sxth	r2, r3
 8007b94:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	33b0      	adds	r3, #176	@ 0xb0
 8007b9e:	443b      	add	r3, r7
 8007ba0:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007ba4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3301      	adds	r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007bb2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007bb6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007bba:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007bc8:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	f6ff af52 	blt.w	8007a7a <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007bdc:	e046      	b.n	8007c6c <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007bde:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	33b0      	adds	r3, #176	@ 0xb0
 8007be6:	443b      	add	r3, r7
 8007be8:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007bec:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	33b0      	adds	r3, #176	@ 0xb0
 8007bf6:	443b      	add	r3, r7
 8007bf8:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d92e      	bls.n	8007c5e <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007c00:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	33b0      	adds	r3, #176	@ 0xb0
 8007c08:	443b      	add	r3, r7
 8007c0a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007c0e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007c12:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c16:	3301      	adds	r3, #1
 8007c18:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	33b0      	adds	r3, #176	@ 0xb0
 8007c20:	443b      	add	r3, r7
 8007c22:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007c26:	0053      	lsls	r3, r2, #1
 8007c28:	33b0      	adds	r3, #176	@ 0xb0
 8007c2a:	443b      	add	r3, r7
 8007c2c:	460a      	mov	r2, r1
 8007c2e:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007c32:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c36:	3301      	adds	r3, #1
 8007c38:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	33b0      	adds	r3, #176	@ 0xb0
 8007c40:	443b      	add	r3, r7
 8007c42:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007c46:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00e      	beq.n	8007c6c <hagl_fill_polygon+0x2a2>
                    i--;
 8007c4e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007c5c:	e006      	b.n	8007c6c <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007c5e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3301      	adds	r3, #1
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007c6c:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007c70:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007c74:	3b01      	subs	r3, #1
 8007c76:	429a      	cmp	r2, r3
 8007c78:	dbb1      	blt.n	8007bde <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007c80:	e027      	b.n	8007cd2 <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007c82:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007c86:	3301      	adds	r3, #1
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	33b0      	adds	r3, #176	@ 0xb0
 8007c8c:	443b      	add	r3, r7
 8007c8e:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007c92:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	33b0      	adds	r3, #176	@ 0xb0
 8007c9a:	443b      	add	r3, r7
 8007c9c:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007ca8:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	33b0      	adds	r3, #176	@ 0xb0
 8007cb0:	443b      	add	r3, r7
 8007cb2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007cb6:	b218      	sxth	r0, r3
 8007cb8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007cbc:	88bb      	ldrh	r3, [r7, #4]
 8007cbe:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007cc2:	f7ff f8c5 	bl	8006e50 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007cc6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007cca:	3302      	adds	r3, #2
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007cd2:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007cd6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	dbd1      	blt.n	8007c82 <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007cde:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007cec:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007cf0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	f6ff aeb4 	blt.w	8007a62 <hagl_fill_polygon+0x98>
        }
    }
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	37b0      	adds	r7, #176	@ 0xb0
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	461a      	mov	r2, r3
 8007d12:	4623      	mov	r3, r4
 8007d14:	80fb      	strh	r3, [r7, #6]
 8007d16:	4603      	mov	r3, r0
 8007d18:	80bb      	strh	r3, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	807b      	strh	r3, [r7, #2]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007d22:	88fb      	ldrh	r3, [r7, #6]
 8007d24:	81bb      	strh	r3, [r7, #12]
 8007d26:	88bb      	ldrh	r3, [r7, #4]
 8007d28:	81fb      	strh	r3, [r7, #14]
 8007d2a:	887b      	ldrh	r3, [r7, #2]
 8007d2c:	823b      	strh	r3, [r7, #16]
 8007d2e:	883b      	ldrh	r3, [r7, #0]
 8007d30:	827b      	strh	r3, [r7, #18]
 8007d32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d34:	82bb      	strh	r3, [r7, #20]
 8007d36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d38:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007d3a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007d3c:	f107 030c 	add.w	r3, r7, #12
 8007d40:	4619      	mov	r1, r3
 8007d42:	2003      	movs	r0, #3
 8007d44:	f7ff fde1 	bl	800790a <hagl_draw_polygon>
};
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd90      	pop	{r4, r7, pc}

08007d50 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007d50:	b590      	push	{r4, r7, lr}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4623      	mov	r3, r4
 8007d60:	80fb      	strh	r3, [r7, #6]
 8007d62:	4603      	mov	r3, r0
 8007d64:	80bb      	strh	r3, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	807b      	strh	r3, [r7, #2]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	81bb      	strh	r3, [r7, #12]
 8007d72:	88bb      	ldrh	r3, [r7, #4]
 8007d74:	81fb      	strh	r3, [r7, #14]
 8007d76:	887b      	ldrh	r3, [r7, #2]
 8007d78:	823b      	strh	r3, [r7, #16]
 8007d7a:	883b      	ldrh	r3, [r7, #0]
 8007d7c:	827b      	strh	r3, [r7, #18]
 8007d7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d80:	82bb      	strh	r3, [r7, #20]
 8007d82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d84:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007d86:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007d88:	f107 030c 	add.w	r3, r7, #12
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	2003      	movs	r0, #3
 8007d90:	f7ff fe1b 	bl	80079ca <hagl_fill_polygon>
}
 8007d94:	bf00      	nop
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd90      	pop	{r4, r7, pc}

08007d9c <atoi>:
 8007d9c:	220a      	movs	r2, #10
 8007d9e:	2100      	movs	r1, #0
 8007da0:	f000 b938 	b.w	8008014 <strtol>

08007da4 <malloc>:
 8007da4:	4b02      	ldr	r3, [pc, #8]	@ (8007db0 <malloc+0xc>)
 8007da6:	4601      	mov	r1, r0
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	f000 b82d 	b.w	8007e08 <_malloc_r>
 8007dae:	bf00      	nop
 8007db0:	20000220 	.word	0x20000220

08007db4 <free>:
 8007db4:	4b02      	ldr	r3, [pc, #8]	@ (8007dc0 <free+0xc>)
 8007db6:	4601      	mov	r1, r0
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	f000 bc57 	b.w	800866c <_free_r>
 8007dbe:	bf00      	nop
 8007dc0:	20000220 	.word	0x20000220

08007dc4 <sbrk_aligned>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e04 <sbrk_aligned+0x40>)
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	b911      	cbnz	r1, 8007dd6 <sbrk_aligned+0x12>
 8007dd0:	f000 fbd0 	bl	8008574 <_sbrk_r>
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 fbcb 	bl	8008574 <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d103      	bne.n	8007dea <sbrk_aligned+0x26>
 8007de2:	f04f 34ff 	mov.w	r4, #4294967295
 8007de6:	4620      	mov	r0, r4
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	1cc4      	adds	r4, r0, #3
 8007dec:	f024 0403 	bic.w	r4, r4, #3
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d0f8      	beq.n	8007de6 <sbrk_aligned+0x22>
 8007df4:	1a21      	subs	r1, r4, r0
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 fbbc 	bl	8008574 <_sbrk_r>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d1f2      	bne.n	8007de6 <sbrk_aligned+0x22>
 8007e00:	e7ef      	b.n	8007de2 <sbrk_aligned+0x1e>
 8007e02:	bf00      	nop
 8007e04:	2000ae84 	.word	0x2000ae84

08007e08 <_malloc_r>:
 8007e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	1ccd      	adds	r5, r1, #3
 8007e0e:	f025 0503 	bic.w	r5, r5, #3
 8007e12:	3508      	adds	r5, #8
 8007e14:	2d0c      	cmp	r5, #12
 8007e16:	bf38      	it	cc
 8007e18:	250c      	movcc	r5, #12
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	db01      	blt.n	8007e24 <_malloc_r+0x1c>
 8007e20:	42a9      	cmp	r1, r5
 8007e22:	d904      	bls.n	8007e2e <_malloc_r+0x26>
 8007e24:	230c      	movs	r3, #12
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f04 <_malloc_r+0xfc>
 8007e32:	f000 f869 	bl	8007f08 <__malloc_lock>
 8007e36:	f8d8 3000 	ldr.w	r3, [r8]
 8007e3a:	461c      	mov	r4, r3
 8007e3c:	bb44      	cbnz	r4, 8007e90 <_malloc_r+0x88>
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff ffbf 	bl	8007dc4 <sbrk_aligned>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	4604      	mov	r4, r0
 8007e4a:	d158      	bne.n	8007efe <_malloc_r+0xf6>
 8007e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e50:	4627      	mov	r7, r4
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d143      	bne.n	8007ede <_malloc_r+0xd6>
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d04b      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4630      	mov	r0, r6
 8007e60:	eb04 0903 	add.w	r9, r4, r3
 8007e64:	f000 fb86 	bl	8008574 <_sbrk_r>
 8007e68:	4581      	cmp	r9, r0
 8007e6a:	d142      	bne.n	8007ef2 <_malloc_r+0xea>
 8007e6c:	6821      	ldr	r1, [r4, #0]
 8007e6e:	1a6d      	subs	r5, r5, r1
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ffa6 	bl	8007dc4 <sbrk_aligned>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d03a      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	442b      	add	r3, r5
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	f8d8 3000 	ldr.w	r3, [r8]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	bb62      	cbnz	r2, 8007ee4 <_malloc_r+0xdc>
 8007e8a:	f8c8 7000 	str.w	r7, [r8]
 8007e8e:	e00f      	b.n	8007eb0 <_malloc_r+0xa8>
 8007e90:	6822      	ldr	r2, [r4, #0]
 8007e92:	1b52      	subs	r2, r2, r5
 8007e94:	d420      	bmi.n	8007ed8 <_malloc_r+0xd0>
 8007e96:	2a0b      	cmp	r2, #11
 8007e98:	d917      	bls.n	8007eca <_malloc_r+0xc2>
 8007e9a:	1961      	adds	r1, r4, r5
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	6059      	strne	r1, [r3, #4]
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	bf08      	it	eq
 8007ea8:	f8c8 1000 	streq.w	r1, [r8]
 8007eac:	5162      	str	r2, [r4, r5]
 8007eae:	604b      	str	r3, [r1, #4]
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 f82f 	bl	8007f14 <__malloc_unlock>
 8007eb6:	f104 000b 	add.w	r0, r4, #11
 8007eba:	1d23      	adds	r3, r4, #4
 8007ebc:	f020 0007 	bic.w	r0, r0, #7
 8007ec0:	1ac2      	subs	r2, r0, r3
 8007ec2:	bf1c      	itt	ne
 8007ec4:	1a1b      	subne	r3, r3, r0
 8007ec6:	50a3      	strne	r3, [r4, r2]
 8007ec8:	e7af      	b.n	8007e2a <_malloc_r+0x22>
 8007eca:	6862      	ldr	r2, [r4, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	bf0c      	ite	eq
 8007ed0:	f8c8 2000 	streq.w	r2, [r8]
 8007ed4:	605a      	strne	r2, [r3, #4]
 8007ed6:	e7eb      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ed8:	4623      	mov	r3, r4
 8007eda:	6864      	ldr	r4, [r4, #4]
 8007edc:	e7ae      	b.n	8007e3c <_malloc_r+0x34>
 8007ede:	463c      	mov	r4, r7
 8007ee0:	687f      	ldr	r7, [r7, #4]
 8007ee2:	e7b6      	b.n	8007e52 <_malloc_r+0x4a>
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d1fb      	bne.n	8007ee4 <_malloc_r+0xdc>
 8007eec:	2300      	movs	r3, #0
 8007eee:	6053      	str	r3, [r2, #4]
 8007ef0:	e7de      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f000 f80c 	bl	8007f14 <__malloc_unlock>
 8007efc:	e794      	b.n	8007e28 <_malloc_r+0x20>
 8007efe:	6005      	str	r5, [r0, #0]
 8007f00:	e7d6      	b.n	8007eb0 <_malloc_r+0xa8>
 8007f02:	bf00      	nop
 8007f04:	2000ae88 	.word	0x2000ae88

08007f08 <__malloc_lock>:
 8007f08:	4801      	ldr	r0, [pc, #4]	@ (8007f10 <__malloc_lock+0x8>)
 8007f0a:	f000 bb80 	b.w	800860e <__retarget_lock_acquire_recursive>
 8007f0e:	bf00      	nop
 8007f10:	2000afcc 	.word	0x2000afcc

08007f14 <__malloc_unlock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	@ (8007f1c <__malloc_unlock+0x8>)
 8007f16:	f000 bb7b 	b.w	8008610 <__retarget_lock_release_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	2000afcc 	.word	0x2000afcc

08007f20 <_strtol_l.constprop.0>:
 8007f20:	2b24      	cmp	r3, #36	@ 0x24
 8007f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f26:	4686      	mov	lr, r0
 8007f28:	4690      	mov	r8, r2
 8007f2a:	d801      	bhi.n	8007f30 <_strtol_l.constprop.0+0x10>
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d106      	bne.n	8007f3e <_strtol_l.constprop.0+0x1e>
 8007f30:	f000 fb42 	bl	80085b8 <__errno>
 8007f34:	2316      	movs	r3, #22
 8007f36:	6003      	str	r3, [r0, #0]
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	4834      	ldr	r0, [pc, #208]	@ (8008010 <_strtol_l.constprop.0+0xf0>)
 8007f40:	460d      	mov	r5, r1
 8007f42:	462a      	mov	r2, r5
 8007f44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f48:	5d06      	ldrb	r6, [r0, r4]
 8007f4a:	f016 0608 	ands.w	r6, r6, #8
 8007f4e:	d1f8      	bne.n	8007f42 <_strtol_l.constprop.0+0x22>
 8007f50:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f52:	d12d      	bne.n	8007fb0 <_strtol_l.constprop.0+0x90>
 8007f54:	782c      	ldrb	r4, [r5, #0]
 8007f56:	2601      	movs	r6, #1
 8007f58:	1c95      	adds	r5, r2, #2
 8007f5a:	f033 0210 	bics.w	r2, r3, #16
 8007f5e:	d109      	bne.n	8007f74 <_strtol_l.constprop.0+0x54>
 8007f60:	2c30      	cmp	r4, #48	@ 0x30
 8007f62:	d12a      	bne.n	8007fba <_strtol_l.constprop.0+0x9a>
 8007f64:	782a      	ldrb	r2, [r5, #0]
 8007f66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f6a:	2a58      	cmp	r2, #88	@ 0x58
 8007f6c:	d125      	bne.n	8007fba <_strtol_l.constprop.0+0x9a>
 8007f6e:	786c      	ldrb	r4, [r5, #1]
 8007f70:	2310      	movs	r3, #16
 8007f72:	3502      	adds	r5, #2
 8007f74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	fbbc f9f3 	udiv	r9, ip, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f8c:	2f09      	cmp	r7, #9
 8007f8e:	d81b      	bhi.n	8007fc8 <_strtol_l.constprop.0+0xa8>
 8007f90:	463c      	mov	r4, r7
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	dd27      	ble.n	8007fe6 <_strtol_l.constprop.0+0xc6>
 8007f96:	1c57      	adds	r7, r2, #1
 8007f98:	d007      	beq.n	8007faa <_strtol_l.constprop.0+0x8a>
 8007f9a:	4581      	cmp	r9, r0
 8007f9c:	d320      	bcc.n	8007fe0 <_strtol_l.constprop.0+0xc0>
 8007f9e:	d101      	bne.n	8007fa4 <_strtol_l.constprop.0+0x84>
 8007fa0:	45a2      	cmp	sl, r4
 8007fa2:	db1d      	blt.n	8007fe0 <_strtol_l.constprop.0+0xc0>
 8007fa4:	fb00 4003 	mla	r0, r0, r3, r4
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fae:	e7eb      	b.n	8007f88 <_strtol_l.constprop.0+0x68>
 8007fb0:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fb2:	bf04      	itt	eq
 8007fb4:	782c      	ldrbeq	r4, [r5, #0]
 8007fb6:	1c95      	addeq	r5, r2, #2
 8007fb8:	e7cf      	b.n	8007f5a <_strtol_l.constprop.0+0x3a>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1da      	bne.n	8007f74 <_strtol_l.constprop.0+0x54>
 8007fbe:	2c30      	cmp	r4, #48	@ 0x30
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2308      	moveq	r3, #8
 8007fc4:	230a      	movne	r3, #10
 8007fc6:	e7d5      	b.n	8007f74 <_strtol_l.constprop.0+0x54>
 8007fc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fcc:	2f19      	cmp	r7, #25
 8007fce:	d801      	bhi.n	8007fd4 <_strtol_l.constprop.0+0xb4>
 8007fd0:	3c37      	subs	r4, #55	@ 0x37
 8007fd2:	e7de      	b.n	8007f92 <_strtol_l.constprop.0+0x72>
 8007fd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fd8:	2f19      	cmp	r7, #25
 8007fda:	d804      	bhi.n	8007fe6 <_strtol_l.constprop.0+0xc6>
 8007fdc:	3c57      	subs	r4, #87	@ 0x57
 8007fde:	e7d8      	b.n	8007f92 <_strtol_l.constprop.0+0x72>
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe4:	e7e1      	b.n	8007faa <_strtol_l.constprop.0+0x8a>
 8007fe6:	1c53      	adds	r3, r2, #1
 8007fe8:	d108      	bne.n	8007ffc <_strtol_l.constprop.0+0xdc>
 8007fea:	2322      	movs	r3, #34	@ 0x22
 8007fec:	f8ce 3000 	str.w	r3, [lr]
 8007ff0:	4660      	mov	r0, ip
 8007ff2:	f1b8 0f00 	cmp.w	r8, #0
 8007ff6:	d0a0      	beq.n	8007f3a <_strtol_l.constprop.0+0x1a>
 8007ff8:	1e69      	subs	r1, r5, #1
 8007ffa:	e006      	b.n	800800a <_strtol_l.constprop.0+0xea>
 8007ffc:	b106      	cbz	r6, 8008000 <_strtol_l.constprop.0+0xe0>
 8007ffe:	4240      	negs	r0, r0
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d099      	beq.n	8007f3a <_strtol_l.constprop.0+0x1a>
 8008006:	2a00      	cmp	r2, #0
 8008008:	d1f6      	bne.n	8007ff8 <_strtol_l.constprop.0+0xd8>
 800800a:	f8c8 1000 	str.w	r1, [r8]
 800800e:	e794      	b.n	8007f3a <_strtol_l.constprop.0+0x1a>
 8008010:	080129a1 	.word	0x080129a1

08008014 <strtol>:
 8008014:	4613      	mov	r3, r2
 8008016:	460a      	mov	r2, r1
 8008018:	4601      	mov	r1, r0
 800801a:	4802      	ldr	r0, [pc, #8]	@ (8008024 <strtol+0x10>)
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f7ff bf7f 	b.w	8007f20 <_strtol_l.constprop.0>
 8008022:	bf00      	nop
 8008024:	20000220 	.word	0x20000220

08008028 <_strtoul_l.constprop.0>:
 8008028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800802c:	4e34      	ldr	r6, [pc, #208]	@ (8008100 <_strtoul_l.constprop.0+0xd8>)
 800802e:	4686      	mov	lr, r0
 8008030:	460d      	mov	r5, r1
 8008032:	4628      	mov	r0, r5
 8008034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008038:	5d37      	ldrb	r7, [r6, r4]
 800803a:	f017 0708 	ands.w	r7, r7, #8
 800803e:	d1f8      	bne.n	8008032 <_strtoul_l.constprop.0+0xa>
 8008040:	2c2d      	cmp	r4, #45	@ 0x2d
 8008042:	d12f      	bne.n	80080a4 <_strtoul_l.constprop.0+0x7c>
 8008044:	782c      	ldrb	r4, [r5, #0]
 8008046:	2701      	movs	r7, #1
 8008048:	1c85      	adds	r5, r0, #2
 800804a:	f033 0010 	bics.w	r0, r3, #16
 800804e:	d109      	bne.n	8008064 <_strtoul_l.constprop.0+0x3c>
 8008050:	2c30      	cmp	r4, #48	@ 0x30
 8008052:	d12c      	bne.n	80080ae <_strtoul_l.constprop.0+0x86>
 8008054:	7828      	ldrb	r0, [r5, #0]
 8008056:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800805a:	2858      	cmp	r0, #88	@ 0x58
 800805c:	d127      	bne.n	80080ae <_strtoul_l.constprop.0+0x86>
 800805e:	786c      	ldrb	r4, [r5, #1]
 8008060:	2310      	movs	r3, #16
 8008062:	3502      	adds	r5, #2
 8008064:	f04f 38ff 	mov.w	r8, #4294967295
 8008068:	2600      	movs	r6, #0
 800806a:	fbb8 f8f3 	udiv	r8, r8, r3
 800806e:	fb03 f908 	mul.w	r9, r3, r8
 8008072:	ea6f 0909 	mvn.w	r9, r9
 8008076:	4630      	mov	r0, r6
 8008078:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800807c:	f1bc 0f09 	cmp.w	ip, #9
 8008080:	d81c      	bhi.n	80080bc <_strtoul_l.constprop.0+0x94>
 8008082:	4664      	mov	r4, ip
 8008084:	42a3      	cmp	r3, r4
 8008086:	dd2a      	ble.n	80080de <_strtoul_l.constprop.0+0xb6>
 8008088:	f1b6 3fff 	cmp.w	r6, #4294967295
 800808c:	d007      	beq.n	800809e <_strtoul_l.constprop.0+0x76>
 800808e:	4580      	cmp	r8, r0
 8008090:	d322      	bcc.n	80080d8 <_strtoul_l.constprop.0+0xb0>
 8008092:	d101      	bne.n	8008098 <_strtoul_l.constprop.0+0x70>
 8008094:	45a1      	cmp	r9, r4
 8008096:	db1f      	blt.n	80080d8 <_strtoul_l.constprop.0+0xb0>
 8008098:	fb00 4003 	mla	r0, r0, r3, r4
 800809c:	2601      	movs	r6, #1
 800809e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080a2:	e7e9      	b.n	8008078 <_strtoul_l.constprop.0+0x50>
 80080a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80080a6:	bf04      	itt	eq
 80080a8:	782c      	ldrbeq	r4, [r5, #0]
 80080aa:	1c85      	addeq	r5, r0, #2
 80080ac:	e7cd      	b.n	800804a <_strtoul_l.constprop.0+0x22>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1d8      	bne.n	8008064 <_strtoul_l.constprop.0+0x3c>
 80080b2:	2c30      	cmp	r4, #48	@ 0x30
 80080b4:	bf0c      	ite	eq
 80080b6:	2308      	moveq	r3, #8
 80080b8:	230a      	movne	r3, #10
 80080ba:	e7d3      	b.n	8008064 <_strtoul_l.constprop.0+0x3c>
 80080bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80080c0:	f1bc 0f19 	cmp.w	ip, #25
 80080c4:	d801      	bhi.n	80080ca <_strtoul_l.constprop.0+0xa2>
 80080c6:	3c37      	subs	r4, #55	@ 0x37
 80080c8:	e7dc      	b.n	8008084 <_strtoul_l.constprop.0+0x5c>
 80080ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80080ce:	f1bc 0f19 	cmp.w	ip, #25
 80080d2:	d804      	bhi.n	80080de <_strtoul_l.constprop.0+0xb6>
 80080d4:	3c57      	subs	r4, #87	@ 0x57
 80080d6:	e7d5      	b.n	8008084 <_strtoul_l.constprop.0+0x5c>
 80080d8:	f04f 36ff 	mov.w	r6, #4294967295
 80080dc:	e7df      	b.n	800809e <_strtoul_l.constprop.0+0x76>
 80080de:	1c73      	adds	r3, r6, #1
 80080e0:	d106      	bne.n	80080f0 <_strtoul_l.constprop.0+0xc8>
 80080e2:	2322      	movs	r3, #34	@ 0x22
 80080e4:	f8ce 3000 	str.w	r3, [lr]
 80080e8:	4630      	mov	r0, r6
 80080ea:	b932      	cbnz	r2, 80080fa <_strtoul_l.constprop.0+0xd2>
 80080ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080f0:	b107      	cbz	r7, 80080f4 <_strtoul_l.constprop.0+0xcc>
 80080f2:	4240      	negs	r0, r0
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	d0f9      	beq.n	80080ec <_strtoul_l.constprop.0+0xc4>
 80080f8:	b106      	cbz	r6, 80080fc <_strtoul_l.constprop.0+0xd4>
 80080fa:	1e69      	subs	r1, r5, #1
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	e7f5      	b.n	80080ec <_strtoul_l.constprop.0+0xc4>
 8008100:	080129a1 	.word	0x080129a1

08008104 <strtoul>:
 8008104:	4613      	mov	r3, r2
 8008106:	460a      	mov	r2, r1
 8008108:	4601      	mov	r1, r0
 800810a:	4802      	ldr	r0, [pc, #8]	@ (8008114 <strtoul+0x10>)
 800810c:	6800      	ldr	r0, [r0, #0]
 800810e:	f7ff bf8b 	b.w	8008028 <_strtoul_l.constprop.0>
 8008112:	bf00      	nop
 8008114:	20000220 	.word	0x20000220

08008118 <std>:
 8008118:	2300      	movs	r3, #0
 800811a:	b510      	push	{r4, lr}
 800811c:	4604      	mov	r4, r0
 800811e:	e9c0 3300 	strd	r3, r3, [r0]
 8008122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008126:	6083      	str	r3, [r0, #8]
 8008128:	8181      	strh	r1, [r0, #12]
 800812a:	6643      	str	r3, [r0, #100]	@ 0x64
 800812c:	81c2      	strh	r2, [r0, #14]
 800812e:	6183      	str	r3, [r0, #24]
 8008130:	4619      	mov	r1, r3
 8008132:	2208      	movs	r2, #8
 8008134:	305c      	adds	r0, #92	@ 0x5c
 8008136:	f000 f971 	bl	800841c <memset>
 800813a:	4b0d      	ldr	r3, [pc, #52]	@ (8008170 <std+0x58>)
 800813c:	6263      	str	r3, [r4, #36]	@ 0x24
 800813e:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <std+0x5c>)
 8008140:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008142:	4b0d      	ldr	r3, [pc, #52]	@ (8008178 <std+0x60>)
 8008144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008146:	4b0d      	ldr	r3, [pc, #52]	@ (800817c <std+0x64>)
 8008148:	6323      	str	r3, [r4, #48]	@ 0x30
 800814a:	4b0d      	ldr	r3, [pc, #52]	@ (8008180 <std+0x68>)
 800814c:	6224      	str	r4, [r4, #32]
 800814e:	429c      	cmp	r4, r3
 8008150:	d006      	beq.n	8008160 <std+0x48>
 8008152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008156:	4294      	cmp	r4, r2
 8008158:	d002      	beq.n	8008160 <std+0x48>
 800815a:	33d0      	adds	r3, #208	@ 0xd0
 800815c:	429c      	cmp	r4, r3
 800815e:	d105      	bne.n	800816c <std+0x54>
 8008160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008168:	f000 ba50 	b.w	800860c <__retarget_lock_init_recursive>
 800816c:	bd10      	pop	{r4, pc}
 800816e:	bf00      	nop
 8008170:	08008305 	.word	0x08008305
 8008174:	08008327 	.word	0x08008327
 8008178:	0800835f 	.word	0x0800835f
 800817c:	08008383 	.word	0x08008383
 8008180:	2000ae8c 	.word	0x2000ae8c

08008184 <stdio_exit_handler>:
 8008184:	4a02      	ldr	r2, [pc, #8]	@ (8008190 <stdio_exit_handler+0xc>)
 8008186:	4903      	ldr	r1, [pc, #12]	@ (8008194 <stdio_exit_handler+0x10>)
 8008188:	4803      	ldr	r0, [pc, #12]	@ (8008198 <stdio_exit_handler+0x14>)
 800818a:	f000 b869 	b.w	8008260 <_fwalk_sglue>
 800818e:	bf00      	nop
 8008190:	20000214 	.word	0x20000214
 8008194:	08008dd5 	.word	0x08008dd5
 8008198:	20000224 	.word	0x20000224

0800819c <cleanup_stdio>:
 800819c:	6841      	ldr	r1, [r0, #4]
 800819e:	4b0c      	ldr	r3, [pc, #48]	@ (80081d0 <cleanup_stdio+0x34>)
 80081a0:	4299      	cmp	r1, r3
 80081a2:	b510      	push	{r4, lr}
 80081a4:	4604      	mov	r4, r0
 80081a6:	d001      	beq.n	80081ac <cleanup_stdio+0x10>
 80081a8:	f000 fe14 	bl	8008dd4 <_fflush_r>
 80081ac:	68a1      	ldr	r1, [r4, #8]
 80081ae:	4b09      	ldr	r3, [pc, #36]	@ (80081d4 <cleanup_stdio+0x38>)
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <cleanup_stdio+0x1e>
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 fe0d 	bl	8008dd4 <_fflush_r>
 80081ba:	68e1      	ldr	r1, [r4, #12]
 80081bc:	4b06      	ldr	r3, [pc, #24]	@ (80081d8 <cleanup_stdio+0x3c>)
 80081be:	4299      	cmp	r1, r3
 80081c0:	d004      	beq.n	80081cc <cleanup_stdio+0x30>
 80081c2:	4620      	mov	r0, r4
 80081c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c8:	f000 be04 	b.w	8008dd4 <_fflush_r>
 80081cc:	bd10      	pop	{r4, pc}
 80081ce:	bf00      	nop
 80081d0:	2000ae8c 	.word	0x2000ae8c
 80081d4:	2000aef4 	.word	0x2000aef4
 80081d8:	2000af5c 	.word	0x2000af5c

080081dc <global_stdio_init.part.0>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	4b0b      	ldr	r3, [pc, #44]	@ (800820c <global_stdio_init.part.0+0x30>)
 80081e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008210 <global_stdio_init.part.0+0x34>)
 80081e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008214 <global_stdio_init.part.0+0x38>)
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	4620      	mov	r0, r4
 80081e8:	2200      	movs	r2, #0
 80081ea:	2104      	movs	r1, #4
 80081ec:	f7ff ff94 	bl	8008118 <std>
 80081f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081f4:	2201      	movs	r2, #1
 80081f6:	2109      	movs	r1, #9
 80081f8:	f7ff ff8e 	bl	8008118 <std>
 80081fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008200:	2202      	movs	r2, #2
 8008202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008206:	2112      	movs	r1, #18
 8008208:	f7ff bf86 	b.w	8008118 <std>
 800820c:	2000afc4 	.word	0x2000afc4
 8008210:	2000ae8c 	.word	0x2000ae8c
 8008214:	08008185 	.word	0x08008185

08008218 <__sfp_lock_acquire>:
 8008218:	4801      	ldr	r0, [pc, #4]	@ (8008220 <__sfp_lock_acquire+0x8>)
 800821a:	f000 b9f8 	b.w	800860e <__retarget_lock_acquire_recursive>
 800821e:	bf00      	nop
 8008220:	2000afcd 	.word	0x2000afcd

08008224 <__sfp_lock_release>:
 8008224:	4801      	ldr	r0, [pc, #4]	@ (800822c <__sfp_lock_release+0x8>)
 8008226:	f000 b9f3 	b.w	8008610 <__retarget_lock_release_recursive>
 800822a:	bf00      	nop
 800822c:	2000afcd 	.word	0x2000afcd

08008230 <__sinit>:
 8008230:	b510      	push	{r4, lr}
 8008232:	4604      	mov	r4, r0
 8008234:	f7ff fff0 	bl	8008218 <__sfp_lock_acquire>
 8008238:	6a23      	ldr	r3, [r4, #32]
 800823a:	b11b      	cbz	r3, 8008244 <__sinit+0x14>
 800823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008240:	f7ff bff0 	b.w	8008224 <__sfp_lock_release>
 8008244:	4b04      	ldr	r3, [pc, #16]	@ (8008258 <__sinit+0x28>)
 8008246:	6223      	str	r3, [r4, #32]
 8008248:	4b04      	ldr	r3, [pc, #16]	@ (800825c <__sinit+0x2c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1f5      	bne.n	800823c <__sinit+0xc>
 8008250:	f7ff ffc4 	bl	80081dc <global_stdio_init.part.0>
 8008254:	e7f2      	b.n	800823c <__sinit+0xc>
 8008256:	bf00      	nop
 8008258:	0800819d 	.word	0x0800819d
 800825c:	2000afc4 	.word	0x2000afc4

08008260 <_fwalk_sglue>:
 8008260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008264:	4607      	mov	r7, r0
 8008266:	4688      	mov	r8, r1
 8008268:	4614      	mov	r4, r2
 800826a:	2600      	movs	r6, #0
 800826c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008270:	f1b9 0901 	subs.w	r9, r9, #1
 8008274:	d505      	bpl.n	8008282 <_fwalk_sglue+0x22>
 8008276:	6824      	ldr	r4, [r4, #0]
 8008278:	2c00      	cmp	r4, #0
 800827a:	d1f7      	bne.n	800826c <_fwalk_sglue+0xc>
 800827c:	4630      	mov	r0, r6
 800827e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008282:	89ab      	ldrh	r3, [r5, #12]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d907      	bls.n	8008298 <_fwalk_sglue+0x38>
 8008288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800828c:	3301      	adds	r3, #1
 800828e:	d003      	beq.n	8008298 <_fwalk_sglue+0x38>
 8008290:	4629      	mov	r1, r5
 8008292:	4638      	mov	r0, r7
 8008294:	47c0      	blx	r8
 8008296:	4306      	orrs	r6, r0
 8008298:	3568      	adds	r5, #104	@ 0x68
 800829a:	e7e9      	b.n	8008270 <_fwalk_sglue+0x10>

0800829c <sniprintf>:
 800829c:	b40c      	push	{r2, r3}
 800829e:	b530      	push	{r4, r5, lr}
 80082a0:	4b17      	ldr	r3, [pc, #92]	@ (8008300 <sniprintf+0x64>)
 80082a2:	1e0c      	subs	r4, r1, #0
 80082a4:	681d      	ldr	r5, [r3, #0]
 80082a6:	b09d      	sub	sp, #116	@ 0x74
 80082a8:	da08      	bge.n	80082bc <sniprintf+0x20>
 80082aa:	238b      	movs	r3, #139	@ 0x8b
 80082ac:	602b      	str	r3, [r5, #0]
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	b01d      	add	sp, #116	@ 0x74
 80082b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082b8:	b002      	add	sp, #8
 80082ba:	4770      	bx	lr
 80082bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082c4:	bf14      	ite	ne
 80082c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082ca:	4623      	moveq	r3, r4
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	9307      	str	r3, [sp, #28]
 80082d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082d4:	9002      	str	r0, [sp, #8]
 80082d6:	9006      	str	r0, [sp, #24]
 80082d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082de:	ab21      	add	r3, sp, #132	@ 0x84
 80082e0:	a902      	add	r1, sp, #8
 80082e2:	4628      	mov	r0, r5
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	f000 fa67 	bl	80087b8 <_svfiprintf_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	bfbc      	itt	lt
 80082ee:	238b      	movlt	r3, #139	@ 0x8b
 80082f0:	602b      	strlt	r3, [r5, #0]
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d0dd      	beq.n	80082b2 <sniprintf+0x16>
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e7d9      	b.n	80082b2 <sniprintf+0x16>
 80082fe:	bf00      	nop
 8008300:	20000220 	.word	0x20000220

08008304 <__sread>:
 8008304:	b510      	push	{r4, lr}
 8008306:	460c      	mov	r4, r1
 8008308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830c:	f000 f920 	bl	8008550 <_read_r>
 8008310:	2800      	cmp	r0, #0
 8008312:	bfab      	itete	ge
 8008314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008316:	89a3      	ldrhlt	r3, [r4, #12]
 8008318:	181b      	addge	r3, r3, r0
 800831a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800831e:	bfac      	ite	ge
 8008320:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008322:	81a3      	strhlt	r3, [r4, #12]
 8008324:	bd10      	pop	{r4, pc}

08008326 <__swrite>:
 8008326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800832a:	461f      	mov	r7, r3
 800832c:	898b      	ldrh	r3, [r1, #12]
 800832e:	05db      	lsls	r3, r3, #23
 8008330:	4605      	mov	r5, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4616      	mov	r6, r2
 8008336:	d505      	bpl.n	8008344 <__swrite+0x1e>
 8008338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833c:	2302      	movs	r3, #2
 800833e:	2200      	movs	r2, #0
 8008340:	f000 f8f4 	bl	800852c <_lseek_r>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800834a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	4632      	mov	r2, r6
 8008352:	463b      	mov	r3, r7
 8008354:	4628      	mov	r0, r5
 8008356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	f000 b91b 	b.w	8008594 <_write_r>

0800835e <__sseek>:
 800835e:	b510      	push	{r4, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008366:	f000 f8e1 	bl	800852c <_lseek_r>
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	bf15      	itete	ne
 8008370:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800837a:	81a3      	strheq	r3, [r4, #12]
 800837c:	bf18      	it	ne
 800837e:	81a3      	strhne	r3, [r4, #12]
 8008380:	bd10      	pop	{r4, pc}

08008382 <__sclose>:
 8008382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008386:	f000 b8c1 	b.w	800850c <_close_r>

0800838a <_vsniprintf_r>:
 800838a:	b530      	push	{r4, r5, lr}
 800838c:	4614      	mov	r4, r2
 800838e:	2c00      	cmp	r4, #0
 8008390:	b09b      	sub	sp, #108	@ 0x6c
 8008392:	4605      	mov	r5, r0
 8008394:	461a      	mov	r2, r3
 8008396:	da05      	bge.n	80083a4 <_vsniprintf_r+0x1a>
 8008398:	238b      	movs	r3, #139	@ 0x8b
 800839a:	6003      	str	r3, [r0, #0]
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	b01b      	add	sp, #108	@ 0x6c
 80083a2:	bd30      	pop	{r4, r5, pc}
 80083a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80083ac:	bf14      	ite	ne
 80083ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083b2:	4623      	moveq	r3, r4
 80083b4:	9302      	str	r3, [sp, #8]
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083bc:	9100      	str	r1, [sp, #0]
 80083be:	9104      	str	r1, [sp, #16]
 80083c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80083c4:	4669      	mov	r1, sp
 80083c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80083c8:	f000 f9f6 	bl	80087b8 <_svfiprintf_r>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	bfbc      	itt	lt
 80083d0:	238b      	movlt	r3, #139	@ 0x8b
 80083d2:	602b      	strlt	r3, [r5, #0]
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	d0e3      	beq.n	80083a0 <_vsniprintf_r+0x16>
 80083d8:	9b00      	ldr	r3, [sp, #0]
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e7df      	b.n	80083a0 <_vsniprintf_r+0x16>

080083e0 <vsniprintf>:
 80083e0:	b507      	push	{r0, r1, r2, lr}
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	4613      	mov	r3, r2
 80083e6:	460a      	mov	r2, r1
 80083e8:	4601      	mov	r1, r0
 80083ea:	4803      	ldr	r0, [pc, #12]	@ (80083f8 <vsniprintf+0x18>)
 80083ec:	6800      	ldr	r0, [r0, #0]
 80083ee:	f7ff ffcc 	bl	800838a <_vsniprintf_r>
 80083f2:	b003      	add	sp, #12
 80083f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80083f8:	20000220 	.word	0x20000220

080083fc <memcmp>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	3901      	subs	r1, #1
 8008400:	4402      	add	r2, r0
 8008402:	4290      	cmp	r0, r2
 8008404:	d101      	bne.n	800840a <memcmp+0xe>
 8008406:	2000      	movs	r0, #0
 8008408:	e005      	b.n	8008416 <memcmp+0x1a>
 800840a:	7803      	ldrb	r3, [r0, #0]
 800840c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008410:	42a3      	cmp	r3, r4
 8008412:	d001      	beq.n	8008418 <memcmp+0x1c>
 8008414:	1b18      	subs	r0, r3, r4
 8008416:	bd10      	pop	{r4, pc}
 8008418:	3001      	adds	r0, #1
 800841a:	e7f2      	b.n	8008402 <memcmp+0x6>

0800841c <memset>:
 800841c:	4402      	add	r2, r0
 800841e:	4603      	mov	r3, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	d100      	bne.n	8008426 <memset+0xa>
 8008424:	4770      	bx	lr
 8008426:	f803 1b01 	strb.w	r1, [r3], #1
 800842a:	e7f9      	b.n	8008420 <memset+0x4>

0800842c <strncpy>:
 800842c:	b510      	push	{r4, lr}
 800842e:	3901      	subs	r1, #1
 8008430:	4603      	mov	r3, r0
 8008432:	b132      	cbz	r2, 8008442 <strncpy+0x16>
 8008434:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008438:	f803 4b01 	strb.w	r4, [r3], #1
 800843c:	3a01      	subs	r2, #1
 800843e:	2c00      	cmp	r4, #0
 8008440:	d1f7      	bne.n	8008432 <strncpy+0x6>
 8008442:	441a      	add	r2, r3
 8008444:	2100      	movs	r1, #0
 8008446:	4293      	cmp	r3, r2
 8008448:	d100      	bne.n	800844c <strncpy+0x20>
 800844a:	bd10      	pop	{r4, pc}
 800844c:	f803 1b01 	strb.w	r1, [r3], #1
 8008450:	e7f9      	b.n	8008446 <strncpy+0x1a>
	...

08008454 <strtok>:
 8008454:	4b16      	ldr	r3, [pc, #88]	@ (80084b0 <strtok+0x5c>)
 8008456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845a:	681f      	ldr	r7, [r3, #0]
 800845c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800845e:	4605      	mov	r5, r0
 8008460:	460e      	mov	r6, r1
 8008462:	b9ec      	cbnz	r4, 80084a0 <strtok+0x4c>
 8008464:	2050      	movs	r0, #80	@ 0x50
 8008466:	f7ff fc9d 	bl	8007da4 <malloc>
 800846a:	4602      	mov	r2, r0
 800846c:	6478      	str	r0, [r7, #68]	@ 0x44
 800846e:	b920      	cbnz	r0, 800847a <strtok+0x26>
 8008470:	4b10      	ldr	r3, [pc, #64]	@ (80084b4 <strtok+0x60>)
 8008472:	4811      	ldr	r0, [pc, #68]	@ (80084b8 <strtok+0x64>)
 8008474:	215b      	movs	r1, #91	@ 0x5b
 8008476:	f000 f8db 	bl	8008630 <__assert_func>
 800847a:	e9c0 4400 	strd	r4, r4, [r0]
 800847e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008482:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008486:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800848a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800848e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008492:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008496:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800849a:	6184      	str	r4, [r0, #24]
 800849c:	7704      	strb	r4, [r0, #28]
 800849e:	6244      	str	r4, [r0, #36]	@ 0x24
 80084a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084a2:	4631      	mov	r1, r6
 80084a4:	4628      	mov	r0, r5
 80084a6:	2301      	movs	r3, #1
 80084a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ac:	f000 b806 	b.w	80084bc <__strtok_r>
 80084b0:	20000220 	.word	0x20000220
 80084b4:	08012aa1 	.word	0x08012aa1
 80084b8:	08012ab8 	.word	0x08012ab8

080084bc <__strtok_r>:
 80084bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084be:	4604      	mov	r4, r0
 80084c0:	b908      	cbnz	r0, 80084c6 <__strtok_r+0xa>
 80084c2:	6814      	ldr	r4, [r2, #0]
 80084c4:	b144      	cbz	r4, 80084d8 <__strtok_r+0x1c>
 80084c6:	4620      	mov	r0, r4
 80084c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80084cc:	460f      	mov	r7, r1
 80084ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80084d2:	b91e      	cbnz	r6, 80084dc <__strtok_r+0x20>
 80084d4:	b965      	cbnz	r5, 80084f0 <__strtok_r+0x34>
 80084d6:	6015      	str	r5, [r2, #0]
 80084d8:	2000      	movs	r0, #0
 80084da:	e005      	b.n	80084e8 <__strtok_r+0x2c>
 80084dc:	42b5      	cmp	r5, r6
 80084de:	d1f6      	bne.n	80084ce <__strtok_r+0x12>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1f0      	bne.n	80084c6 <__strtok_r+0xa>
 80084e4:	6014      	str	r4, [r2, #0]
 80084e6:	7003      	strb	r3, [r0, #0]
 80084e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ea:	461c      	mov	r4, r3
 80084ec:	e00c      	b.n	8008508 <__strtok_r+0x4c>
 80084ee:	b915      	cbnz	r5, 80084f6 <__strtok_r+0x3a>
 80084f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084f4:	460e      	mov	r6, r1
 80084f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80084fa:	42ab      	cmp	r3, r5
 80084fc:	d1f7      	bne.n	80084ee <__strtok_r+0x32>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f3      	beq.n	80084ea <__strtok_r+0x2e>
 8008502:	2300      	movs	r3, #0
 8008504:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008508:	6014      	str	r4, [r2, #0]
 800850a:	e7ed      	b.n	80084e8 <__strtok_r+0x2c>

0800850c <_close_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d06      	ldr	r5, [pc, #24]	@ (8008528 <_close_r+0x1c>)
 8008510:	2300      	movs	r3, #0
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	602b      	str	r3, [r5, #0]
 8008518:	f7f9 fd16 	bl	8001f48 <_close>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d102      	bne.n	8008526 <_close_r+0x1a>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	b103      	cbz	r3, 8008526 <_close_r+0x1a>
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	2000afc8 	.word	0x2000afc8

0800852c <_lseek_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d07      	ldr	r5, [pc, #28]	@ (800854c <_lseek_r+0x20>)
 8008530:	4604      	mov	r4, r0
 8008532:	4608      	mov	r0, r1
 8008534:	4611      	mov	r1, r2
 8008536:	2200      	movs	r2, #0
 8008538:	602a      	str	r2, [r5, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	f7f9 fd2b 	bl	8001f96 <_lseek>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d102      	bne.n	800854a <_lseek_r+0x1e>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	b103      	cbz	r3, 800854a <_lseek_r+0x1e>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	2000afc8 	.word	0x2000afc8

08008550 <_read_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d07      	ldr	r5, [pc, #28]	@ (8008570 <_read_r+0x20>)
 8008554:	4604      	mov	r4, r0
 8008556:	4608      	mov	r0, r1
 8008558:	4611      	mov	r1, r2
 800855a:	2200      	movs	r2, #0
 800855c:	602a      	str	r2, [r5, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	f7f9 fcb9 	bl	8001ed6 <_read>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_read_r+0x1e>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_read_r+0x1e>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	2000afc8 	.word	0x2000afc8

08008574 <_sbrk_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d06      	ldr	r5, [pc, #24]	@ (8008590 <_sbrk_r+0x1c>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	602b      	str	r3, [r5, #0]
 8008580:	f7f9 fd16 	bl	8001fb0 <_sbrk>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_sbrk_r+0x1a>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_sbrk_r+0x1a>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	2000afc8 	.word	0x2000afc8

08008594 <_write_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d07      	ldr	r5, [pc, #28]	@ (80085b4 <_write_r+0x20>)
 8008598:	4604      	mov	r4, r0
 800859a:	4608      	mov	r0, r1
 800859c:	4611      	mov	r1, r2
 800859e:	2200      	movs	r2, #0
 80085a0:	602a      	str	r2, [r5, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	f7f9 fcb4 	bl	8001f10 <_write>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_write_r+0x1e>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_write_r+0x1e>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	2000afc8 	.word	0x2000afc8

080085b8 <__errno>:
 80085b8:	4b01      	ldr	r3, [pc, #4]	@ (80085c0 <__errno+0x8>)
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	20000220 	.word	0x20000220

080085c4 <__libc_init_array>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	4d0d      	ldr	r5, [pc, #52]	@ (80085fc <__libc_init_array+0x38>)
 80085c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008600 <__libc_init_array+0x3c>)
 80085ca:	1b64      	subs	r4, r4, r5
 80085cc:	10a4      	asrs	r4, r4, #2
 80085ce:	2600      	movs	r6, #0
 80085d0:	42a6      	cmp	r6, r4
 80085d2:	d109      	bne.n	80085e8 <__libc_init_array+0x24>
 80085d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008604 <__libc_init_array+0x40>)
 80085d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008608 <__libc_init_array+0x44>)
 80085d8:	f000 ff2a 	bl	8009430 <_init>
 80085dc:	1b64      	subs	r4, r4, r5
 80085de:	10a4      	asrs	r4, r4, #2
 80085e0:	2600      	movs	r6, #0
 80085e2:	42a6      	cmp	r6, r4
 80085e4:	d105      	bne.n	80085f2 <__libc_init_array+0x2e>
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ec:	4798      	blx	r3
 80085ee:	3601      	adds	r6, #1
 80085f0:	e7ee      	b.n	80085d0 <__libc_init_array+0xc>
 80085f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f6:	4798      	blx	r3
 80085f8:	3601      	adds	r6, #1
 80085fa:	e7f2      	b.n	80085e2 <__libc_init_array+0x1e>
 80085fc:	08012b8c 	.word	0x08012b8c
 8008600:	08012b8c 	.word	0x08012b8c
 8008604:	08012b8c 	.word	0x08012b8c
 8008608:	08012b90 	.word	0x08012b90

0800860c <__retarget_lock_init_recursive>:
 800860c:	4770      	bx	lr

0800860e <__retarget_lock_acquire_recursive>:
 800860e:	4770      	bx	lr

08008610 <__retarget_lock_release_recursive>:
 8008610:	4770      	bx	lr

08008612 <memcpy>:
 8008612:	440a      	add	r2, r1
 8008614:	4291      	cmp	r1, r2
 8008616:	f100 33ff 	add.w	r3, r0, #4294967295
 800861a:	d100      	bne.n	800861e <memcpy+0xc>
 800861c:	4770      	bx	lr
 800861e:	b510      	push	{r4, lr}
 8008620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008628:	4291      	cmp	r1, r2
 800862a:	d1f9      	bne.n	8008620 <memcpy+0xe>
 800862c:	bd10      	pop	{r4, pc}
	...

08008630 <__assert_func>:
 8008630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008632:	4614      	mov	r4, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4b09      	ldr	r3, [pc, #36]	@ (800865c <__assert_func+0x2c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4605      	mov	r5, r0
 800863c:	68d8      	ldr	r0, [r3, #12]
 800863e:	b954      	cbnz	r4, 8008656 <__assert_func+0x26>
 8008640:	4b07      	ldr	r3, [pc, #28]	@ (8008660 <__assert_func+0x30>)
 8008642:	461c      	mov	r4, r3
 8008644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008648:	9100      	str	r1, [sp, #0]
 800864a:	462b      	mov	r3, r5
 800864c:	4905      	ldr	r1, [pc, #20]	@ (8008664 <__assert_func+0x34>)
 800864e:	f000 fbe9 	bl	8008e24 <fiprintf>
 8008652:	f000 fc13 	bl	8008e7c <abort>
 8008656:	4b04      	ldr	r3, [pc, #16]	@ (8008668 <__assert_func+0x38>)
 8008658:	e7f4      	b.n	8008644 <__assert_func+0x14>
 800865a:	bf00      	nop
 800865c:	20000220 	.word	0x20000220
 8008660:	08012b4d 	.word	0x08012b4d
 8008664:	08012b1f 	.word	0x08012b1f
 8008668:	08012b12 	.word	0x08012b12

0800866c <_free_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4605      	mov	r5, r0
 8008670:	2900      	cmp	r1, #0
 8008672:	d041      	beq.n	80086f8 <_free_r+0x8c>
 8008674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008678:	1f0c      	subs	r4, r1, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	bfb8      	it	lt
 800867e:	18e4      	addlt	r4, r4, r3
 8008680:	f7ff fc42 	bl	8007f08 <__malloc_lock>
 8008684:	4a1d      	ldr	r2, [pc, #116]	@ (80086fc <_free_r+0x90>)
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	b933      	cbnz	r3, 8008698 <_free_r+0x2c>
 800868a:	6063      	str	r3, [r4, #4]
 800868c:	6014      	str	r4, [r2, #0]
 800868e:	4628      	mov	r0, r5
 8008690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008694:	f7ff bc3e 	b.w	8007f14 <__malloc_unlock>
 8008698:	42a3      	cmp	r3, r4
 800869a:	d908      	bls.n	80086ae <_free_r+0x42>
 800869c:	6820      	ldr	r0, [r4, #0]
 800869e:	1821      	adds	r1, r4, r0
 80086a0:	428b      	cmp	r3, r1
 80086a2:	bf01      	itttt	eq
 80086a4:	6819      	ldreq	r1, [r3, #0]
 80086a6:	685b      	ldreq	r3, [r3, #4]
 80086a8:	1809      	addeq	r1, r1, r0
 80086aa:	6021      	streq	r1, [r4, #0]
 80086ac:	e7ed      	b.n	800868a <_free_r+0x1e>
 80086ae:	461a      	mov	r2, r3
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	b10b      	cbz	r3, 80086b8 <_free_r+0x4c>
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	d9fa      	bls.n	80086ae <_free_r+0x42>
 80086b8:	6811      	ldr	r1, [r2, #0]
 80086ba:	1850      	adds	r0, r2, r1
 80086bc:	42a0      	cmp	r0, r4
 80086be:	d10b      	bne.n	80086d8 <_free_r+0x6c>
 80086c0:	6820      	ldr	r0, [r4, #0]
 80086c2:	4401      	add	r1, r0
 80086c4:	1850      	adds	r0, r2, r1
 80086c6:	4283      	cmp	r3, r0
 80086c8:	6011      	str	r1, [r2, #0]
 80086ca:	d1e0      	bne.n	800868e <_free_r+0x22>
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	6053      	str	r3, [r2, #4]
 80086d2:	4408      	add	r0, r1
 80086d4:	6010      	str	r0, [r2, #0]
 80086d6:	e7da      	b.n	800868e <_free_r+0x22>
 80086d8:	d902      	bls.n	80086e0 <_free_r+0x74>
 80086da:	230c      	movs	r3, #12
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	e7d6      	b.n	800868e <_free_r+0x22>
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	1821      	adds	r1, r4, r0
 80086e4:	428b      	cmp	r3, r1
 80086e6:	bf04      	itt	eq
 80086e8:	6819      	ldreq	r1, [r3, #0]
 80086ea:	685b      	ldreq	r3, [r3, #4]
 80086ec:	6063      	str	r3, [r4, #4]
 80086ee:	bf04      	itt	eq
 80086f0:	1809      	addeq	r1, r1, r0
 80086f2:	6021      	streq	r1, [r4, #0]
 80086f4:	6054      	str	r4, [r2, #4]
 80086f6:	e7ca      	b.n	800868e <_free_r+0x22>
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
 80086fa:	bf00      	nop
 80086fc:	2000ae88 	.word	0x2000ae88

08008700 <__ssputs_r>:
 8008700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	688e      	ldr	r6, [r1, #8]
 8008706:	461f      	mov	r7, r3
 8008708:	42be      	cmp	r6, r7
 800870a:	680b      	ldr	r3, [r1, #0]
 800870c:	4682      	mov	sl, r0
 800870e:	460c      	mov	r4, r1
 8008710:	4690      	mov	r8, r2
 8008712:	d82d      	bhi.n	8008770 <__ssputs_r+0x70>
 8008714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800871c:	d026      	beq.n	800876c <__ssputs_r+0x6c>
 800871e:	6965      	ldr	r5, [r4, #20]
 8008720:	6909      	ldr	r1, [r1, #16]
 8008722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008726:	eba3 0901 	sub.w	r9, r3, r1
 800872a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800872e:	1c7b      	adds	r3, r7, #1
 8008730:	444b      	add	r3, r9
 8008732:	106d      	asrs	r5, r5, #1
 8008734:	429d      	cmp	r5, r3
 8008736:	bf38      	it	cc
 8008738:	461d      	movcc	r5, r3
 800873a:	0553      	lsls	r3, r2, #21
 800873c:	d527      	bpl.n	800878e <__ssputs_r+0x8e>
 800873e:	4629      	mov	r1, r5
 8008740:	f7ff fb62 	bl	8007e08 <_malloc_r>
 8008744:	4606      	mov	r6, r0
 8008746:	b360      	cbz	r0, 80087a2 <__ssputs_r+0xa2>
 8008748:	6921      	ldr	r1, [r4, #16]
 800874a:	464a      	mov	r2, r9
 800874c:	f7ff ff61 	bl	8008612 <memcpy>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	6126      	str	r6, [r4, #16]
 800875e:	6165      	str	r5, [r4, #20]
 8008760:	444e      	add	r6, r9
 8008762:	eba5 0509 	sub.w	r5, r5, r9
 8008766:	6026      	str	r6, [r4, #0]
 8008768:	60a5      	str	r5, [r4, #8]
 800876a:	463e      	mov	r6, r7
 800876c:	42be      	cmp	r6, r7
 800876e:	d900      	bls.n	8008772 <__ssputs_r+0x72>
 8008770:	463e      	mov	r6, r7
 8008772:	6820      	ldr	r0, [r4, #0]
 8008774:	4632      	mov	r2, r6
 8008776:	4641      	mov	r1, r8
 8008778:	f000 fb66 	bl	8008e48 <memmove>
 800877c:	68a3      	ldr	r3, [r4, #8]
 800877e:	1b9b      	subs	r3, r3, r6
 8008780:	60a3      	str	r3, [r4, #8]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	4433      	add	r3, r6
 8008786:	6023      	str	r3, [r4, #0]
 8008788:	2000      	movs	r0, #0
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878e:	462a      	mov	r2, r5
 8008790:	f000 fb7b 	bl	8008e8a <_realloc_r>
 8008794:	4606      	mov	r6, r0
 8008796:	2800      	cmp	r0, #0
 8008798:	d1e0      	bne.n	800875c <__ssputs_r+0x5c>
 800879a:	6921      	ldr	r1, [r4, #16]
 800879c:	4650      	mov	r0, sl
 800879e:	f7ff ff65 	bl	800866c <_free_r>
 80087a2:	230c      	movs	r3, #12
 80087a4:	f8ca 3000 	str.w	r3, [sl]
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	e7e9      	b.n	800878a <__ssputs_r+0x8a>
	...

080087b8 <_svfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4698      	mov	r8, r3
 80087be:	898b      	ldrh	r3, [r1, #12]
 80087c0:	061b      	lsls	r3, r3, #24
 80087c2:	b09d      	sub	sp, #116	@ 0x74
 80087c4:	4607      	mov	r7, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	4614      	mov	r4, r2
 80087ca:	d510      	bpl.n	80087ee <_svfiprintf_r+0x36>
 80087cc:	690b      	ldr	r3, [r1, #16]
 80087ce:	b973      	cbnz	r3, 80087ee <_svfiprintf_r+0x36>
 80087d0:	2140      	movs	r1, #64	@ 0x40
 80087d2:	f7ff fb19 	bl	8007e08 <_malloc_r>
 80087d6:	6028      	str	r0, [r5, #0]
 80087d8:	6128      	str	r0, [r5, #16]
 80087da:	b930      	cbnz	r0, 80087ea <_svfiprintf_r+0x32>
 80087dc:	230c      	movs	r3, #12
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	f04f 30ff 	mov.w	r0, #4294967295
 80087e4:	b01d      	add	sp, #116	@ 0x74
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ea:	2340      	movs	r3, #64	@ 0x40
 80087ec:	616b      	str	r3, [r5, #20]
 80087ee:	2300      	movs	r3, #0
 80087f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087f2:	2320      	movs	r3, #32
 80087f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087fc:	2330      	movs	r3, #48	@ 0x30
 80087fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800899c <_svfiprintf_r+0x1e4>
 8008802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008806:	f04f 0901 	mov.w	r9, #1
 800880a:	4623      	mov	r3, r4
 800880c:	469a      	mov	sl, r3
 800880e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008812:	b10a      	cbz	r2, 8008818 <_svfiprintf_r+0x60>
 8008814:	2a25      	cmp	r2, #37	@ 0x25
 8008816:	d1f9      	bne.n	800880c <_svfiprintf_r+0x54>
 8008818:	ebba 0b04 	subs.w	fp, sl, r4
 800881c:	d00b      	beq.n	8008836 <_svfiprintf_r+0x7e>
 800881e:	465b      	mov	r3, fp
 8008820:	4622      	mov	r2, r4
 8008822:	4629      	mov	r1, r5
 8008824:	4638      	mov	r0, r7
 8008826:	f7ff ff6b 	bl	8008700 <__ssputs_r>
 800882a:	3001      	adds	r0, #1
 800882c:	f000 80a7 	beq.w	800897e <_svfiprintf_r+0x1c6>
 8008830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008832:	445a      	add	r2, fp
 8008834:	9209      	str	r2, [sp, #36]	@ 0x24
 8008836:	f89a 3000 	ldrb.w	r3, [sl]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 809f 	beq.w	800897e <_svfiprintf_r+0x1c6>
 8008840:	2300      	movs	r3, #0
 8008842:	f04f 32ff 	mov.w	r2, #4294967295
 8008846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800884a:	f10a 0a01 	add.w	sl, sl, #1
 800884e:	9304      	str	r3, [sp, #16]
 8008850:	9307      	str	r3, [sp, #28]
 8008852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008856:	931a      	str	r3, [sp, #104]	@ 0x68
 8008858:	4654      	mov	r4, sl
 800885a:	2205      	movs	r2, #5
 800885c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008860:	484e      	ldr	r0, [pc, #312]	@ (800899c <_svfiprintf_r+0x1e4>)
 8008862:	f7f7 fcbd 	bl	80001e0 <memchr>
 8008866:	9a04      	ldr	r2, [sp, #16]
 8008868:	b9d8      	cbnz	r0, 80088a2 <_svfiprintf_r+0xea>
 800886a:	06d0      	lsls	r0, r2, #27
 800886c:	bf44      	itt	mi
 800886e:	2320      	movmi	r3, #32
 8008870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008874:	0711      	lsls	r1, r2, #28
 8008876:	bf44      	itt	mi
 8008878:	232b      	movmi	r3, #43	@ 0x2b
 800887a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800887e:	f89a 3000 	ldrb.w	r3, [sl]
 8008882:	2b2a      	cmp	r3, #42	@ 0x2a
 8008884:	d015      	beq.n	80088b2 <_svfiprintf_r+0xfa>
 8008886:	9a07      	ldr	r2, [sp, #28]
 8008888:	4654      	mov	r4, sl
 800888a:	2000      	movs	r0, #0
 800888c:	f04f 0c0a 	mov.w	ip, #10
 8008890:	4621      	mov	r1, r4
 8008892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008896:	3b30      	subs	r3, #48	@ 0x30
 8008898:	2b09      	cmp	r3, #9
 800889a:	d94b      	bls.n	8008934 <_svfiprintf_r+0x17c>
 800889c:	b1b0      	cbz	r0, 80088cc <_svfiprintf_r+0x114>
 800889e:	9207      	str	r2, [sp, #28]
 80088a0:	e014      	b.n	80088cc <_svfiprintf_r+0x114>
 80088a2:	eba0 0308 	sub.w	r3, r0, r8
 80088a6:	fa09 f303 	lsl.w	r3, r9, r3
 80088aa:	4313      	orrs	r3, r2
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	46a2      	mov	sl, r4
 80088b0:	e7d2      	b.n	8008858 <_svfiprintf_r+0xa0>
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	1d19      	adds	r1, r3, #4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	9103      	str	r1, [sp, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bfbb      	ittet	lt
 80088be:	425b      	neglt	r3, r3
 80088c0:	f042 0202 	orrlt.w	r2, r2, #2
 80088c4:	9307      	strge	r3, [sp, #28]
 80088c6:	9307      	strlt	r3, [sp, #28]
 80088c8:	bfb8      	it	lt
 80088ca:	9204      	strlt	r2, [sp, #16]
 80088cc:	7823      	ldrb	r3, [r4, #0]
 80088ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80088d0:	d10a      	bne.n	80088e8 <_svfiprintf_r+0x130>
 80088d2:	7863      	ldrb	r3, [r4, #1]
 80088d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088d6:	d132      	bne.n	800893e <_svfiprintf_r+0x186>
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	1d1a      	adds	r2, r3, #4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	9203      	str	r2, [sp, #12]
 80088e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088e4:	3402      	adds	r4, #2
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089ac <_svfiprintf_r+0x1f4>
 80088ec:	7821      	ldrb	r1, [r4, #0]
 80088ee:	2203      	movs	r2, #3
 80088f0:	4650      	mov	r0, sl
 80088f2:	f7f7 fc75 	bl	80001e0 <memchr>
 80088f6:	b138      	cbz	r0, 8008908 <_svfiprintf_r+0x150>
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	eba0 000a 	sub.w	r0, r0, sl
 80088fe:	2240      	movs	r2, #64	@ 0x40
 8008900:	4082      	lsls	r2, r0
 8008902:	4313      	orrs	r3, r2
 8008904:	3401      	adds	r4, #1
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890c:	4824      	ldr	r0, [pc, #144]	@ (80089a0 <_svfiprintf_r+0x1e8>)
 800890e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008912:	2206      	movs	r2, #6
 8008914:	f7f7 fc64 	bl	80001e0 <memchr>
 8008918:	2800      	cmp	r0, #0
 800891a:	d036      	beq.n	800898a <_svfiprintf_r+0x1d2>
 800891c:	4b21      	ldr	r3, [pc, #132]	@ (80089a4 <_svfiprintf_r+0x1ec>)
 800891e:	bb1b      	cbnz	r3, 8008968 <_svfiprintf_r+0x1b0>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	3307      	adds	r3, #7
 8008924:	f023 0307 	bic.w	r3, r3, #7
 8008928:	3308      	adds	r3, #8
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800892e:	4433      	add	r3, r6
 8008930:	9309      	str	r3, [sp, #36]	@ 0x24
 8008932:	e76a      	b.n	800880a <_svfiprintf_r+0x52>
 8008934:	fb0c 3202 	mla	r2, ip, r2, r3
 8008938:	460c      	mov	r4, r1
 800893a:	2001      	movs	r0, #1
 800893c:	e7a8      	b.n	8008890 <_svfiprintf_r+0xd8>
 800893e:	2300      	movs	r3, #0
 8008940:	3401      	adds	r4, #1
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	4619      	mov	r1, r3
 8008946:	f04f 0c0a 	mov.w	ip, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008950:	3a30      	subs	r2, #48	@ 0x30
 8008952:	2a09      	cmp	r2, #9
 8008954:	d903      	bls.n	800895e <_svfiprintf_r+0x1a6>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0c6      	beq.n	80088e8 <_svfiprintf_r+0x130>
 800895a:	9105      	str	r1, [sp, #20]
 800895c:	e7c4      	b.n	80088e8 <_svfiprintf_r+0x130>
 800895e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008962:	4604      	mov	r4, r0
 8008964:	2301      	movs	r3, #1
 8008966:	e7f0      	b.n	800894a <_svfiprintf_r+0x192>
 8008968:	ab03      	add	r3, sp, #12
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	462a      	mov	r2, r5
 800896e:	4b0e      	ldr	r3, [pc, #56]	@ (80089a8 <_svfiprintf_r+0x1f0>)
 8008970:	a904      	add	r1, sp, #16
 8008972:	4638      	mov	r0, r7
 8008974:	f3af 8000 	nop.w
 8008978:	1c42      	adds	r2, r0, #1
 800897a:	4606      	mov	r6, r0
 800897c:	d1d6      	bne.n	800892c <_svfiprintf_r+0x174>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	065b      	lsls	r3, r3, #25
 8008982:	f53f af2d 	bmi.w	80087e0 <_svfiprintf_r+0x28>
 8008986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008988:	e72c      	b.n	80087e4 <_svfiprintf_r+0x2c>
 800898a:	ab03      	add	r3, sp, #12
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	462a      	mov	r2, r5
 8008990:	4b05      	ldr	r3, [pc, #20]	@ (80089a8 <_svfiprintf_r+0x1f0>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	4638      	mov	r0, r7
 8008996:	f000 f879 	bl	8008a8c <_printf_i>
 800899a:	e7ed      	b.n	8008978 <_svfiprintf_r+0x1c0>
 800899c:	08012b4e 	.word	0x08012b4e
 80089a0:	08012b58 	.word	0x08012b58
 80089a4:	00000000 	.word	0x00000000
 80089a8:	08008701 	.word	0x08008701
 80089ac:	08012b54 	.word	0x08012b54

080089b0 <_printf_common>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	4616      	mov	r6, r2
 80089b6:	4698      	mov	r8, r3
 80089b8:	688a      	ldr	r2, [r1, #8]
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bfb8      	it	lt
 80089c4:	4613      	movlt	r3, r2
 80089c6:	6033      	str	r3, [r6, #0]
 80089c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089cc:	4607      	mov	r7, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	b10a      	cbz	r2, 80089d6 <_printf_common+0x26>
 80089d2:	3301      	adds	r3, #1
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	0699      	lsls	r1, r3, #26
 80089da:	bf42      	ittt	mi
 80089dc:	6833      	ldrmi	r3, [r6, #0]
 80089de:	3302      	addmi	r3, #2
 80089e0:	6033      	strmi	r3, [r6, #0]
 80089e2:	6825      	ldr	r5, [r4, #0]
 80089e4:	f015 0506 	ands.w	r5, r5, #6
 80089e8:	d106      	bne.n	80089f8 <_printf_common+0x48>
 80089ea:	f104 0a19 	add.w	sl, r4, #25
 80089ee:	68e3      	ldr	r3, [r4, #12]
 80089f0:	6832      	ldr	r2, [r6, #0]
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	42ab      	cmp	r3, r5
 80089f6:	dc26      	bgt.n	8008a46 <_printf_common+0x96>
 80089f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	3b00      	subs	r3, #0
 8008a00:	bf18      	it	ne
 8008a02:	2301      	movne	r3, #1
 8008a04:	0692      	lsls	r2, r2, #26
 8008a06:	d42b      	bmi.n	8008a60 <_printf_common+0xb0>
 8008a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	4638      	mov	r0, r7
 8008a10:	47c8      	blx	r9
 8008a12:	3001      	adds	r0, #1
 8008a14:	d01e      	beq.n	8008a54 <_printf_common+0xa4>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	6922      	ldr	r2, [r4, #16]
 8008a1a:	f003 0306 	and.w	r3, r3, #6
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	bf02      	ittt	eq
 8008a22:	68e5      	ldreq	r5, [r4, #12]
 8008a24:	6833      	ldreq	r3, [r6, #0]
 8008a26:	1aed      	subeq	r5, r5, r3
 8008a28:	68a3      	ldr	r3, [r4, #8]
 8008a2a:	bf0c      	ite	eq
 8008a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a30:	2500      	movne	r5, #0
 8008a32:	4293      	cmp	r3, r2
 8008a34:	bfc4      	itt	gt
 8008a36:	1a9b      	subgt	r3, r3, r2
 8008a38:	18ed      	addgt	r5, r5, r3
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	341a      	adds	r4, #26
 8008a3e:	42b5      	cmp	r5, r6
 8008a40:	d11a      	bne.n	8008a78 <_printf_common+0xc8>
 8008a42:	2000      	movs	r0, #0
 8008a44:	e008      	b.n	8008a58 <_printf_common+0xa8>
 8008a46:	2301      	movs	r3, #1
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	47c8      	blx	r9
 8008a50:	3001      	adds	r0, #1
 8008a52:	d103      	bne.n	8008a5c <_printf_common+0xac>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	e7c6      	b.n	80089ee <_printf_common+0x3e>
 8008a60:	18e1      	adds	r1, r4, r3
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	2030      	movs	r0, #48	@ 0x30
 8008a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a6a:	4422      	add	r2, r4
 8008a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a74:	3302      	adds	r3, #2
 8008a76:	e7c7      	b.n	8008a08 <_printf_common+0x58>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4641      	mov	r1, r8
 8008a7e:	4638      	mov	r0, r7
 8008a80:	47c8      	blx	r9
 8008a82:	3001      	adds	r0, #1
 8008a84:	d0e6      	beq.n	8008a54 <_printf_common+0xa4>
 8008a86:	3601      	adds	r6, #1
 8008a88:	e7d9      	b.n	8008a3e <_printf_common+0x8e>
	...

08008a8c <_printf_i>:
 8008a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	7e0f      	ldrb	r7, [r1, #24]
 8008a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a94:	2f78      	cmp	r7, #120	@ 0x78
 8008a96:	4691      	mov	r9, r2
 8008a98:	4680      	mov	r8, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	469a      	mov	sl, r3
 8008a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aa2:	d807      	bhi.n	8008ab4 <_printf_i+0x28>
 8008aa4:	2f62      	cmp	r7, #98	@ 0x62
 8008aa6:	d80a      	bhi.n	8008abe <_printf_i+0x32>
 8008aa8:	2f00      	cmp	r7, #0
 8008aaa:	f000 80d2 	beq.w	8008c52 <_printf_i+0x1c6>
 8008aae:	2f58      	cmp	r7, #88	@ 0x58
 8008ab0:	f000 80b9 	beq.w	8008c26 <_printf_i+0x19a>
 8008ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008abc:	e03a      	b.n	8008b34 <_printf_i+0xa8>
 8008abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ac2:	2b15      	cmp	r3, #21
 8008ac4:	d8f6      	bhi.n	8008ab4 <_printf_i+0x28>
 8008ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8008acc <_printf_i+0x40>)
 8008ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008acc:	08008b25 	.word	0x08008b25
 8008ad0:	08008b39 	.word	0x08008b39
 8008ad4:	08008ab5 	.word	0x08008ab5
 8008ad8:	08008ab5 	.word	0x08008ab5
 8008adc:	08008ab5 	.word	0x08008ab5
 8008ae0:	08008ab5 	.word	0x08008ab5
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008ab5 	.word	0x08008ab5
 8008aec:	08008ab5 	.word	0x08008ab5
 8008af0:	08008ab5 	.word	0x08008ab5
 8008af4:	08008ab5 	.word	0x08008ab5
 8008af8:	08008c39 	.word	0x08008c39
 8008afc:	08008b63 	.word	0x08008b63
 8008b00:	08008bf3 	.word	0x08008bf3
 8008b04:	08008ab5 	.word	0x08008ab5
 8008b08:	08008ab5 	.word	0x08008ab5
 8008b0c:	08008c5b 	.word	0x08008c5b
 8008b10:	08008ab5 	.word	0x08008ab5
 8008b14:	08008b63 	.word	0x08008b63
 8008b18:	08008ab5 	.word	0x08008ab5
 8008b1c:	08008ab5 	.word	0x08008ab5
 8008b20:	08008bfb 	.word	0x08008bfb
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6032      	str	r2, [r6, #0]
 8008b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b34:	2301      	movs	r3, #1
 8008b36:	e09d      	b.n	8008c74 <_printf_i+0x1e8>
 8008b38:	6833      	ldr	r3, [r6, #0]
 8008b3a:	6820      	ldr	r0, [r4, #0]
 8008b3c:	1d19      	adds	r1, r3, #4
 8008b3e:	6031      	str	r1, [r6, #0]
 8008b40:	0606      	lsls	r6, r0, #24
 8008b42:	d501      	bpl.n	8008b48 <_printf_i+0xbc>
 8008b44:	681d      	ldr	r5, [r3, #0]
 8008b46:	e003      	b.n	8008b50 <_printf_i+0xc4>
 8008b48:	0645      	lsls	r5, r0, #25
 8008b4a:	d5fb      	bpl.n	8008b44 <_printf_i+0xb8>
 8008b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	da03      	bge.n	8008b5c <_printf_i+0xd0>
 8008b54:	232d      	movs	r3, #45	@ 0x2d
 8008b56:	426d      	negs	r5, r5
 8008b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b5c:	4859      	ldr	r0, [pc, #356]	@ (8008cc4 <_printf_i+0x238>)
 8008b5e:	230a      	movs	r3, #10
 8008b60:	e011      	b.n	8008b86 <_printf_i+0xfa>
 8008b62:	6821      	ldr	r1, [r4, #0]
 8008b64:	6833      	ldr	r3, [r6, #0]
 8008b66:	0608      	lsls	r0, r1, #24
 8008b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b6c:	d402      	bmi.n	8008b74 <_printf_i+0xe8>
 8008b6e:	0649      	lsls	r1, r1, #25
 8008b70:	bf48      	it	mi
 8008b72:	b2ad      	uxthmi	r5, r5
 8008b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b76:	4853      	ldr	r0, [pc, #332]	@ (8008cc4 <_printf_i+0x238>)
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	bf14      	ite	ne
 8008b7c:	230a      	movne	r3, #10
 8008b7e:	2308      	moveq	r3, #8
 8008b80:	2100      	movs	r1, #0
 8008b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b86:	6866      	ldr	r6, [r4, #4]
 8008b88:	60a6      	str	r6, [r4, #8]
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	bfa2      	ittt	ge
 8008b8e:	6821      	ldrge	r1, [r4, #0]
 8008b90:	f021 0104 	bicge.w	r1, r1, #4
 8008b94:	6021      	strge	r1, [r4, #0]
 8008b96:	b90d      	cbnz	r5, 8008b9c <_printf_i+0x110>
 8008b98:	2e00      	cmp	r6, #0
 8008b9a:	d04b      	beq.n	8008c34 <_printf_i+0x1a8>
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8008ba6:	5dc7      	ldrb	r7, [r0, r7]
 8008ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bac:	462f      	mov	r7, r5
 8008bae:	42bb      	cmp	r3, r7
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	d9f4      	bls.n	8008b9e <_printf_i+0x112>
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	d10b      	bne.n	8008bd0 <_printf_i+0x144>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	07df      	lsls	r7, r3, #31
 8008bbc:	d508      	bpl.n	8008bd0 <_printf_i+0x144>
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	6861      	ldr	r1, [r4, #4]
 8008bc2:	4299      	cmp	r1, r3
 8008bc4:	bfde      	ittt	le
 8008bc6:	2330      	movle	r3, #48	@ 0x30
 8008bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bd0:	1b92      	subs	r2, r2, r6
 8008bd2:	6122      	str	r2, [r4, #16]
 8008bd4:	f8cd a000 	str.w	sl, [sp]
 8008bd8:	464b      	mov	r3, r9
 8008bda:	aa03      	add	r2, sp, #12
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4640      	mov	r0, r8
 8008be0:	f7ff fee6 	bl	80089b0 <_printf_common>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d14a      	bne.n	8008c7e <_printf_i+0x1f2>
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	b004      	add	sp, #16
 8008bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	f043 0320 	orr.w	r3, r3, #32
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	4833      	ldr	r0, [pc, #204]	@ (8008cc8 <_printf_i+0x23c>)
 8008bfc:	2778      	movs	r7, #120	@ 0x78
 8008bfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	6831      	ldr	r1, [r6, #0]
 8008c06:	061f      	lsls	r7, r3, #24
 8008c08:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c0c:	d402      	bmi.n	8008c14 <_printf_i+0x188>
 8008c0e:	065f      	lsls	r7, r3, #25
 8008c10:	bf48      	it	mi
 8008c12:	b2ad      	uxthmi	r5, r5
 8008c14:	6031      	str	r1, [r6, #0]
 8008c16:	07d9      	lsls	r1, r3, #31
 8008c18:	bf44      	itt	mi
 8008c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c1e:	6023      	strmi	r3, [r4, #0]
 8008c20:	b11d      	cbz	r5, 8008c2a <_printf_i+0x19e>
 8008c22:	2310      	movs	r3, #16
 8008c24:	e7ac      	b.n	8008b80 <_printf_i+0xf4>
 8008c26:	4827      	ldr	r0, [pc, #156]	@ (8008cc4 <_printf_i+0x238>)
 8008c28:	e7e9      	b.n	8008bfe <_printf_i+0x172>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	f023 0320 	bic.w	r3, r3, #32
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	e7f6      	b.n	8008c22 <_printf_i+0x196>
 8008c34:	4616      	mov	r6, r2
 8008c36:	e7bd      	b.n	8008bb4 <_printf_i+0x128>
 8008c38:	6833      	ldr	r3, [r6, #0]
 8008c3a:	6825      	ldr	r5, [r4, #0]
 8008c3c:	6961      	ldr	r1, [r4, #20]
 8008c3e:	1d18      	adds	r0, r3, #4
 8008c40:	6030      	str	r0, [r6, #0]
 8008c42:	062e      	lsls	r6, r5, #24
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	d501      	bpl.n	8008c4c <_printf_i+0x1c0>
 8008c48:	6019      	str	r1, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <_printf_i+0x1c6>
 8008c4c:	0668      	lsls	r0, r5, #25
 8008c4e:	d5fb      	bpl.n	8008c48 <_printf_i+0x1bc>
 8008c50:	8019      	strh	r1, [r3, #0]
 8008c52:	2300      	movs	r3, #0
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	4616      	mov	r6, r2
 8008c58:	e7bc      	b.n	8008bd4 <_printf_i+0x148>
 8008c5a:	6833      	ldr	r3, [r6, #0]
 8008c5c:	1d1a      	adds	r2, r3, #4
 8008c5e:	6032      	str	r2, [r6, #0]
 8008c60:	681e      	ldr	r6, [r3, #0]
 8008c62:	6862      	ldr	r2, [r4, #4]
 8008c64:	2100      	movs	r1, #0
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7f7 faba 	bl	80001e0 <memchr>
 8008c6c:	b108      	cbz	r0, 8008c72 <_printf_i+0x1e6>
 8008c6e:	1b80      	subs	r0, r0, r6
 8008c70:	6060      	str	r0, [r4, #4]
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	2300      	movs	r3, #0
 8008c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c7c:	e7aa      	b.n	8008bd4 <_printf_i+0x148>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	4632      	mov	r2, r6
 8008c82:	4649      	mov	r1, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	47d0      	blx	sl
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d0ad      	beq.n	8008be8 <_printf_i+0x15c>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	079b      	lsls	r3, r3, #30
 8008c90:	d413      	bmi.n	8008cba <_printf_i+0x22e>
 8008c92:	68e0      	ldr	r0, [r4, #12]
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	4298      	cmp	r0, r3
 8008c98:	bfb8      	it	lt
 8008c9a:	4618      	movlt	r0, r3
 8008c9c:	e7a6      	b.n	8008bec <_printf_i+0x160>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	47d0      	blx	sl
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d09d      	beq.n	8008be8 <_printf_i+0x15c>
 8008cac:	3501      	adds	r5, #1
 8008cae:	68e3      	ldr	r3, [r4, #12]
 8008cb0:	9903      	ldr	r1, [sp, #12]
 8008cb2:	1a5b      	subs	r3, r3, r1
 8008cb4:	42ab      	cmp	r3, r5
 8008cb6:	dcf2      	bgt.n	8008c9e <_printf_i+0x212>
 8008cb8:	e7eb      	b.n	8008c92 <_printf_i+0x206>
 8008cba:	2500      	movs	r5, #0
 8008cbc:	f104 0619 	add.w	r6, r4, #25
 8008cc0:	e7f5      	b.n	8008cae <_printf_i+0x222>
 8008cc2:	bf00      	nop
 8008cc4:	08012b5f 	.word	0x08012b5f
 8008cc8:	08012b70 	.word	0x08012b70

08008ccc <__sflush_r>:
 8008ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd4:	0716      	lsls	r6, r2, #28
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	d454      	bmi.n	8008d86 <__sflush_r+0xba>
 8008cdc:	684b      	ldr	r3, [r1, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dc02      	bgt.n	8008ce8 <__sflush_r+0x1c>
 8008ce2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	dd48      	ble.n	8008d7a <__sflush_r+0xae>
 8008ce8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cea:	2e00      	cmp	r6, #0
 8008cec:	d045      	beq.n	8008d7a <__sflush_r+0xae>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cf4:	682f      	ldr	r7, [r5, #0]
 8008cf6:	6a21      	ldr	r1, [r4, #32]
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	d030      	beq.n	8008d5e <__sflush_r+0x92>
 8008cfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	0759      	lsls	r1, r3, #29
 8008d02:	d505      	bpl.n	8008d10 <__sflush_r+0x44>
 8008d04:	6863      	ldr	r3, [r4, #4]
 8008d06:	1ad2      	subs	r2, r2, r3
 8008d08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d0a:	b10b      	cbz	r3, 8008d10 <__sflush_r+0x44>
 8008d0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	2300      	movs	r3, #0
 8008d12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d14:	6a21      	ldr	r1, [r4, #32]
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b0      	blx	r6
 8008d1a:	1c43      	adds	r3, r0, #1
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	d106      	bne.n	8008d2e <__sflush_r+0x62>
 8008d20:	6829      	ldr	r1, [r5, #0]
 8008d22:	291d      	cmp	r1, #29
 8008d24:	d82b      	bhi.n	8008d7e <__sflush_r+0xb2>
 8008d26:	4a2a      	ldr	r2, [pc, #168]	@ (8008dd0 <__sflush_r+0x104>)
 8008d28:	410a      	asrs	r2, r1
 8008d2a:	07d6      	lsls	r6, r2, #31
 8008d2c:	d427      	bmi.n	8008d7e <__sflush_r+0xb2>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	6062      	str	r2, [r4, #4]
 8008d32:	04d9      	lsls	r1, r3, #19
 8008d34:	6922      	ldr	r2, [r4, #16]
 8008d36:	6022      	str	r2, [r4, #0]
 8008d38:	d504      	bpl.n	8008d44 <__sflush_r+0x78>
 8008d3a:	1c42      	adds	r2, r0, #1
 8008d3c:	d101      	bne.n	8008d42 <__sflush_r+0x76>
 8008d3e:	682b      	ldr	r3, [r5, #0]
 8008d40:	b903      	cbnz	r3, 8008d44 <__sflush_r+0x78>
 8008d42:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d46:	602f      	str	r7, [r5, #0]
 8008d48:	b1b9      	cbz	r1, 8008d7a <__sflush_r+0xae>
 8008d4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d4e:	4299      	cmp	r1, r3
 8008d50:	d002      	beq.n	8008d58 <__sflush_r+0x8c>
 8008d52:	4628      	mov	r0, r5
 8008d54:	f7ff fc8a 	bl	800866c <_free_r>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d5c:	e00d      	b.n	8008d7a <__sflush_r+0xae>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4628      	mov	r0, r5
 8008d62:	47b0      	blx	r6
 8008d64:	4602      	mov	r2, r0
 8008d66:	1c50      	adds	r0, r2, #1
 8008d68:	d1c9      	bne.n	8008cfe <__sflush_r+0x32>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0c6      	beq.n	8008cfe <__sflush_r+0x32>
 8008d70:	2b1d      	cmp	r3, #29
 8008d72:	d001      	beq.n	8008d78 <__sflush_r+0xac>
 8008d74:	2b16      	cmp	r3, #22
 8008d76:	d11e      	bne.n	8008db6 <__sflush_r+0xea>
 8008d78:	602f      	str	r7, [r5, #0]
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e022      	b.n	8008dc4 <__sflush_r+0xf8>
 8008d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d82:	b21b      	sxth	r3, r3
 8008d84:	e01b      	b.n	8008dbe <__sflush_r+0xf2>
 8008d86:	690f      	ldr	r7, [r1, #16]
 8008d88:	2f00      	cmp	r7, #0
 8008d8a:	d0f6      	beq.n	8008d7a <__sflush_r+0xae>
 8008d8c:	0793      	lsls	r3, r2, #30
 8008d8e:	680e      	ldr	r6, [r1, #0]
 8008d90:	bf08      	it	eq
 8008d92:	694b      	ldreq	r3, [r1, #20]
 8008d94:	600f      	str	r7, [r1, #0]
 8008d96:	bf18      	it	ne
 8008d98:	2300      	movne	r3, #0
 8008d9a:	eba6 0807 	sub.w	r8, r6, r7
 8008d9e:	608b      	str	r3, [r1, #8]
 8008da0:	f1b8 0f00 	cmp.w	r8, #0
 8008da4:	dde9      	ble.n	8008d7a <__sflush_r+0xae>
 8008da6:	6a21      	ldr	r1, [r4, #32]
 8008da8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008daa:	4643      	mov	r3, r8
 8008dac:	463a      	mov	r2, r7
 8008dae:	4628      	mov	r0, r5
 8008db0:	47b0      	blx	r6
 8008db2:	2800      	cmp	r0, #0
 8008db4:	dc08      	bgt.n	8008dc8 <__sflush_r+0xfc>
 8008db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dbe:	81a3      	strh	r3, [r4, #12]
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc8:	4407      	add	r7, r0
 8008dca:	eba8 0800 	sub.w	r8, r8, r0
 8008dce:	e7e7      	b.n	8008da0 <__sflush_r+0xd4>
 8008dd0:	dfbffffe 	.word	0xdfbffffe

08008dd4 <_fflush_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	690b      	ldr	r3, [r1, #16]
 8008dd8:	4605      	mov	r5, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b913      	cbnz	r3, 8008de4 <_fflush_r+0x10>
 8008dde:	2500      	movs	r5, #0
 8008de0:	4628      	mov	r0, r5
 8008de2:	bd38      	pop	{r3, r4, r5, pc}
 8008de4:	b118      	cbz	r0, 8008dee <_fflush_r+0x1a>
 8008de6:	6a03      	ldr	r3, [r0, #32]
 8008de8:	b90b      	cbnz	r3, 8008dee <_fflush_r+0x1a>
 8008dea:	f7ff fa21 	bl	8008230 <__sinit>
 8008dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0f3      	beq.n	8008dde <_fflush_r+0xa>
 8008df6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008df8:	07d0      	lsls	r0, r2, #31
 8008dfa:	d404      	bmi.n	8008e06 <_fflush_r+0x32>
 8008dfc:	0599      	lsls	r1, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_fflush_r+0x32>
 8008e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e02:	f7ff fc04 	bl	800860e <__retarget_lock_acquire_recursive>
 8008e06:	4628      	mov	r0, r5
 8008e08:	4621      	mov	r1, r4
 8008e0a:	f7ff ff5f 	bl	8008ccc <__sflush_r>
 8008e0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e10:	07da      	lsls	r2, r3, #31
 8008e12:	4605      	mov	r5, r0
 8008e14:	d4e4      	bmi.n	8008de0 <_fflush_r+0xc>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	059b      	lsls	r3, r3, #22
 8008e1a:	d4e1      	bmi.n	8008de0 <_fflush_r+0xc>
 8008e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e1e:	f7ff fbf7 	bl	8008610 <__retarget_lock_release_recursive>
 8008e22:	e7dd      	b.n	8008de0 <_fflush_r+0xc>

08008e24 <fiprintf>:
 8008e24:	b40e      	push	{r1, r2, r3}
 8008e26:	b503      	push	{r0, r1, lr}
 8008e28:	4601      	mov	r1, r0
 8008e2a:	ab03      	add	r3, sp, #12
 8008e2c:	4805      	ldr	r0, [pc, #20]	@ (8008e44 <fiprintf+0x20>)
 8008e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e32:	6800      	ldr	r0, [r0, #0]
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	f000 f87f 	bl	8008f38 <_vfiprintf_r>
 8008e3a:	b002      	add	sp, #8
 8008e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e40:	b003      	add	sp, #12
 8008e42:	4770      	bx	lr
 8008e44:	20000220 	.word	0x20000220

08008e48 <memmove>:
 8008e48:	4288      	cmp	r0, r1
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	eb01 0402 	add.w	r4, r1, r2
 8008e50:	d902      	bls.n	8008e58 <memmove+0x10>
 8008e52:	4284      	cmp	r4, r0
 8008e54:	4623      	mov	r3, r4
 8008e56:	d807      	bhi.n	8008e68 <memmove+0x20>
 8008e58:	1e43      	subs	r3, r0, #1
 8008e5a:	42a1      	cmp	r1, r4
 8008e5c:	d008      	beq.n	8008e70 <memmove+0x28>
 8008e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e66:	e7f8      	b.n	8008e5a <memmove+0x12>
 8008e68:	4402      	add	r2, r0
 8008e6a:	4601      	mov	r1, r0
 8008e6c:	428a      	cmp	r2, r1
 8008e6e:	d100      	bne.n	8008e72 <memmove+0x2a>
 8008e70:	bd10      	pop	{r4, pc}
 8008e72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e7a:	e7f7      	b.n	8008e6c <memmove+0x24>

08008e7c <abort>:
 8008e7c:	b508      	push	{r3, lr}
 8008e7e:	2006      	movs	r0, #6
 8008e80:	f000 fa2e 	bl	80092e0 <raise>
 8008e84:	2001      	movs	r0, #1
 8008e86:	f7f9 f81b 	bl	8001ec0 <_exit>

08008e8a <_realloc_r>:
 8008e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4615      	mov	r5, r2
 8008e92:	460c      	mov	r4, r1
 8008e94:	b921      	cbnz	r1, 8008ea0 <_realloc_r+0x16>
 8008e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	f7fe bfb4 	b.w	8007e08 <_malloc_r>
 8008ea0:	b92a      	cbnz	r2, 8008eae <_realloc_r+0x24>
 8008ea2:	f7ff fbe3 	bl	800866c <_free_r>
 8008ea6:	2400      	movs	r4, #0
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eae:	f000 fa33 	bl	8009318 <_malloc_usable_size_r>
 8008eb2:	4285      	cmp	r5, r0
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	d802      	bhi.n	8008ebe <_realloc_r+0x34>
 8008eb8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ebc:	d8f4      	bhi.n	8008ea8 <_realloc_r+0x1e>
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	f7fe ffa1 	bl	8007e08 <_malloc_r>
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d0ec      	beq.n	8008ea6 <_realloc_r+0x1c>
 8008ecc:	42b5      	cmp	r5, r6
 8008ece:	462a      	mov	r2, r5
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	bf28      	it	cs
 8008ed4:	4632      	movcs	r2, r6
 8008ed6:	f7ff fb9c 	bl	8008612 <memcpy>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4640      	mov	r0, r8
 8008ede:	f7ff fbc5 	bl	800866c <_free_r>
 8008ee2:	463c      	mov	r4, r7
 8008ee4:	e7e0      	b.n	8008ea8 <_realloc_r+0x1e>

08008ee6 <__sfputc_r>:
 8008ee6:	6893      	ldr	r3, [r2, #8]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	b410      	push	{r4}
 8008eee:	6093      	str	r3, [r2, #8]
 8008ef0:	da08      	bge.n	8008f04 <__sfputc_r+0x1e>
 8008ef2:	6994      	ldr	r4, [r2, #24]
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	db01      	blt.n	8008efc <__sfputc_r+0x16>
 8008ef8:	290a      	cmp	r1, #10
 8008efa:	d103      	bne.n	8008f04 <__sfputc_r+0x1e>
 8008efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f00:	f000 b932 	b.w	8009168 <__swbuf_r>
 8008f04:	6813      	ldr	r3, [r2, #0]
 8008f06:	1c58      	adds	r0, r3, #1
 8008f08:	6010      	str	r0, [r2, #0]
 8008f0a:	7019      	strb	r1, [r3, #0]
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <__sfputs_r>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	4614      	mov	r4, r2
 8008f1c:	18d5      	adds	r5, r2, r3
 8008f1e:	42ac      	cmp	r4, r5
 8008f20:	d101      	bne.n	8008f26 <__sfputs_r+0x12>
 8008f22:	2000      	movs	r0, #0
 8008f24:	e007      	b.n	8008f36 <__sfputs_r+0x22>
 8008f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2a:	463a      	mov	r2, r7
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff ffda 	bl	8008ee6 <__sfputc_r>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d1f3      	bne.n	8008f1e <__sfputs_r+0xa>
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f38 <_vfiprintf_r>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	b09d      	sub	sp, #116	@ 0x74
 8008f40:	4614      	mov	r4, r2
 8008f42:	4698      	mov	r8, r3
 8008f44:	4606      	mov	r6, r0
 8008f46:	b118      	cbz	r0, 8008f50 <_vfiprintf_r+0x18>
 8008f48:	6a03      	ldr	r3, [r0, #32]
 8008f4a:	b90b      	cbnz	r3, 8008f50 <_vfiprintf_r+0x18>
 8008f4c:	f7ff f970 	bl	8008230 <__sinit>
 8008f50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f52:	07d9      	lsls	r1, r3, #31
 8008f54:	d405      	bmi.n	8008f62 <_vfiprintf_r+0x2a>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	059a      	lsls	r2, r3, #22
 8008f5a:	d402      	bmi.n	8008f62 <_vfiprintf_r+0x2a>
 8008f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f5e:	f7ff fb56 	bl	800860e <__retarget_lock_acquire_recursive>
 8008f62:	89ab      	ldrh	r3, [r5, #12]
 8008f64:	071b      	lsls	r3, r3, #28
 8008f66:	d501      	bpl.n	8008f6c <_vfiprintf_r+0x34>
 8008f68:	692b      	ldr	r3, [r5, #16]
 8008f6a:	b99b      	cbnz	r3, 8008f94 <_vfiprintf_r+0x5c>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f000 f938 	bl	80091e4 <__swsetup_r>
 8008f74:	b170      	cbz	r0, 8008f94 <_vfiprintf_r+0x5c>
 8008f76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f78:	07dc      	lsls	r4, r3, #31
 8008f7a:	d504      	bpl.n	8008f86 <_vfiprintf_r+0x4e>
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	b01d      	add	sp, #116	@ 0x74
 8008f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	0598      	lsls	r0, r3, #22
 8008f8a:	d4f7      	bmi.n	8008f7c <_vfiprintf_r+0x44>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f8e:	f7ff fb3f 	bl	8008610 <__retarget_lock_release_recursive>
 8008f92:	e7f3      	b.n	8008f7c <_vfiprintf_r+0x44>
 8008f94:	2300      	movs	r3, #0
 8008f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f98:	2320      	movs	r3, #32
 8008f9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fa2:	2330      	movs	r3, #48	@ 0x30
 8008fa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009154 <_vfiprintf_r+0x21c>
 8008fa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fac:	f04f 0901 	mov.w	r9, #1
 8008fb0:	4623      	mov	r3, r4
 8008fb2:	469a      	mov	sl, r3
 8008fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb8:	b10a      	cbz	r2, 8008fbe <_vfiprintf_r+0x86>
 8008fba:	2a25      	cmp	r2, #37	@ 0x25
 8008fbc:	d1f9      	bne.n	8008fb2 <_vfiprintf_r+0x7a>
 8008fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8008fc2:	d00b      	beq.n	8008fdc <_vfiprintf_r+0xa4>
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ffa2 	bl	8008f14 <__sfputs_r>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f000 80a7 	beq.w	8009124 <_vfiprintf_r+0x1ec>
 8008fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd8:	445a      	add	r2, fp
 8008fda:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 809f 	beq.w	8009124 <_vfiprintf_r+0x1ec>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ff0:	f10a 0a01 	add.w	sl, sl, #1
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ffc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ffe:	4654      	mov	r4, sl
 8009000:	2205      	movs	r2, #5
 8009002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009006:	4853      	ldr	r0, [pc, #332]	@ (8009154 <_vfiprintf_r+0x21c>)
 8009008:	f7f7 f8ea 	bl	80001e0 <memchr>
 800900c:	9a04      	ldr	r2, [sp, #16]
 800900e:	b9d8      	cbnz	r0, 8009048 <_vfiprintf_r+0x110>
 8009010:	06d1      	lsls	r1, r2, #27
 8009012:	bf44      	itt	mi
 8009014:	2320      	movmi	r3, #32
 8009016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800901a:	0713      	lsls	r3, r2, #28
 800901c:	bf44      	itt	mi
 800901e:	232b      	movmi	r3, #43	@ 0x2b
 8009020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009024:	f89a 3000 	ldrb.w	r3, [sl]
 8009028:	2b2a      	cmp	r3, #42	@ 0x2a
 800902a:	d015      	beq.n	8009058 <_vfiprintf_r+0x120>
 800902c:	9a07      	ldr	r2, [sp, #28]
 800902e:	4654      	mov	r4, sl
 8009030:	2000      	movs	r0, #0
 8009032:	f04f 0c0a 	mov.w	ip, #10
 8009036:	4621      	mov	r1, r4
 8009038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800903c:	3b30      	subs	r3, #48	@ 0x30
 800903e:	2b09      	cmp	r3, #9
 8009040:	d94b      	bls.n	80090da <_vfiprintf_r+0x1a2>
 8009042:	b1b0      	cbz	r0, 8009072 <_vfiprintf_r+0x13a>
 8009044:	9207      	str	r2, [sp, #28]
 8009046:	e014      	b.n	8009072 <_vfiprintf_r+0x13a>
 8009048:	eba0 0308 	sub.w	r3, r0, r8
 800904c:	fa09 f303 	lsl.w	r3, r9, r3
 8009050:	4313      	orrs	r3, r2
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	46a2      	mov	sl, r4
 8009056:	e7d2      	b.n	8008ffe <_vfiprintf_r+0xc6>
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	1d19      	adds	r1, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	9103      	str	r1, [sp, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbb      	ittet	lt
 8009064:	425b      	neglt	r3, r3
 8009066:	f042 0202 	orrlt.w	r2, r2, #2
 800906a:	9307      	strge	r3, [sp, #28]
 800906c:	9307      	strlt	r3, [sp, #28]
 800906e:	bfb8      	it	lt
 8009070:	9204      	strlt	r2, [sp, #16]
 8009072:	7823      	ldrb	r3, [r4, #0]
 8009074:	2b2e      	cmp	r3, #46	@ 0x2e
 8009076:	d10a      	bne.n	800908e <_vfiprintf_r+0x156>
 8009078:	7863      	ldrb	r3, [r4, #1]
 800907a:	2b2a      	cmp	r3, #42	@ 0x2a
 800907c:	d132      	bne.n	80090e4 <_vfiprintf_r+0x1ac>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	1d1a      	adds	r2, r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	9203      	str	r2, [sp, #12]
 8009086:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800908a:	3402      	adds	r4, #2
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009164 <_vfiprintf_r+0x22c>
 8009092:	7821      	ldrb	r1, [r4, #0]
 8009094:	2203      	movs	r2, #3
 8009096:	4650      	mov	r0, sl
 8009098:	f7f7 f8a2 	bl	80001e0 <memchr>
 800909c:	b138      	cbz	r0, 80090ae <_vfiprintf_r+0x176>
 800909e:	9b04      	ldr	r3, [sp, #16]
 80090a0:	eba0 000a 	sub.w	r0, r0, sl
 80090a4:	2240      	movs	r2, #64	@ 0x40
 80090a6:	4082      	lsls	r2, r0
 80090a8:	4313      	orrs	r3, r2
 80090aa:	3401      	adds	r4, #1
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b2:	4829      	ldr	r0, [pc, #164]	@ (8009158 <_vfiprintf_r+0x220>)
 80090b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090b8:	2206      	movs	r2, #6
 80090ba:	f7f7 f891 	bl	80001e0 <memchr>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d03f      	beq.n	8009142 <_vfiprintf_r+0x20a>
 80090c2:	4b26      	ldr	r3, [pc, #152]	@ (800915c <_vfiprintf_r+0x224>)
 80090c4:	bb1b      	cbnz	r3, 800910e <_vfiprintf_r+0x1d6>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	3307      	adds	r3, #7
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	3308      	adds	r3, #8
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d4:	443b      	add	r3, r7
 80090d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090d8:	e76a      	b.n	8008fb0 <_vfiprintf_r+0x78>
 80090da:	fb0c 3202 	mla	r2, ip, r2, r3
 80090de:	460c      	mov	r4, r1
 80090e0:	2001      	movs	r0, #1
 80090e2:	e7a8      	b.n	8009036 <_vfiprintf_r+0xfe>
 80090e4:	2300      	movs	r3, #0
 80090e6:	3401      	adds	r4, #1
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	4619      	mov	r1, r3
 80090ec:	f04f 0c0a 	mov.w	ip, #10
 80090f0:	4620      	mov	r0, r4
 80090f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f6:	3a30      	subs	r2, #48	@ 0x30
 80090f8:	2a09      	cmp	r2, #9
 80090fa:	d903      	bls.n	8009104 <_vfiprintf_r+0x1cc>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0c6      	beq.n	800908e <_vfiprintf_r+0x156>
 8009100:	9105      	str	r1, [sp, #20]
 8009102:	e7c4      	b.n	800908e <_vfiprintf_r+0x156>
 8009104:	fb0c 2101 	mla	r1, ip, r1, r2
 8009108:	4604      	mov	r4, r0
 800910a:	2301      	movs	r3, #1
 800910c:	e7f0      	b.n	80090f0 <_vfiprintf_r+0x1b8>
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <_vfiprintf_r+0x228>)
 8009116:	a904      	add	r1, sp, #16
 8009118:	4630      	mov	r0, r6
 800911a:	f3af 8000 	nop.w
 800911e:	4607      	mov	r7, r0
 8009120:	1c78      	adds	r0, r7, #1
 8009122:	d1d6      	bne.n	80090d2 <_vfiprintf_r+0x19a>
 8009124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009126:	07d9      	lsls	r1, r3, #31
 8009128:	d405      	bmi.n	8009136 <_vfiprintf_r+0x1fe>
 800912a:	89ab      	ldrh	r3, [r5, #12]
 800912c:	059a      	lsls	r2, r3, #22
 800912e:	d402      	bmi.n	8009136 <_vfiprintf_r+0x1fe>
 8009130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009132:	f7ff fa6d 	bl	8008610 <__retarget_lock_release_recursive>
 8009136:	89ab      	ldrh	r3, [r5, #12]
 8009138:	065b      	lsls	r3, r3, #25
 800913a:	f53f af1f 	bmi.w	8008f7c <_vfiprintf_r+0x44>
 800913e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009140:	e71e      	b.n	8008f80 <_vfiprintf_r+0x48>
 8009142:	ab03      	add	r3, sp, #12
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	462a      	mov	r2, r5
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <_vfiprintf_r+0x228>)
 800914a:	a904      	add	r1, sp, #16
 800914c:	4630      	mov	r0, r6
 800914e:	f7ff fc9d 	bl	8008a8c <_printf_i>
 8009152:	e7e4      	b.n	800911e <_vfiprintf_r+0x1e6>
 8009154:	08012b4e 	.word	0x08012b4e
 8009158:	08012b58 	.word	0x08012b58
 800915c:	00000000 	.word	0x00000000
 8009160:	08008f15 	.word	0x08008f15
 8009164:	08012b54 	.word	0x08012b54

08009168 <__swbuf_r>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	460e      	mov	r6, r1
 800916c:	4614      	mov	r4, r2
 800916e:	4605      	mov	r5, r0
 8009170:	b118      	cbz	r0, 800917a <__swbuf_r+0x12>
 8009172:	6a03      	ldr	r3, [r0, #32]
 8009174:	b90b      	cbnz	r3, 800917a <__swbuf_r+0x12>
 8009176:	f7ff f85b 	bl	8008230 <__sinit>
 800917a:	69a3      	ldr	r3, [r4, #24]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	071a      	lsls	r2, r3, #28
 8009182:	d501      	bpl.n	8009188 <__swbuf_r+0x20>
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	b943      	cbnz	r3, 800919a <__swbuf_r+0x32>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f82a 	bl	80091e4 <__swsetup_r>
 8009190:	b118      	cbz	r0, 800919a <__swbuf_r+0x32>
 8009192:	f04f 37ff 	mov.w	r7, #4294967295
 8009196:	4638      	mov	r0, r7
 8009198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	1a98      	subs	r0, r3, r2
 80091a0:	6963      	ldr	r3, [r4, #20]
 80091a2:	b2f6      	uxtb	r6, r6
 80091a4:	4283      	cmp	r3, r0
 80091a6:	4637      	mov	r7, r6
 80091a8:	dc05      	bgt.n	80091b6 <__swbuf_r+0x4e>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7ff fe11 	bl	8008dd4 <_fflush_r>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1ed      	bne.n	8009192 <__swbuf_r+0x2a>
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	6022      	str	r2, [r4, #0]
 80091c2:	701e      	strb	r6, [r3, #0]
 80091c4:	6962      	ldr	r2, [r4, #20]
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d004      	beq.n	80091d6 <__swbuf_r+0x6e>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	07db      	lsls	r3, r3, #31
 80091d0:	d5e1      	bpl.n	8009196 <__swbuf_r+0x2e>
 80091d2:	2e0a      	cmp	r6, #10
 80091d4:	d1df      	bne.n	8009196 <__swbuf_r+0x2e>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f7ff fdfb 	bl	8008dd4 <_fflush_r>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0d9      	beq.n	8009196 <__swbuf_r+0x2e>
 80091e2:	e7d6      	b.n	8009192 <__swbuf_r+0x2a>

080091e4 <__swsetup_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4b29      	ldr	r3, [pc, #164]	@ (800928c <__swsetup_r+0xa8>)
 80091e8:	4605      	mov	r5, r0
 80091ea:	6818      	ldr	r0, [r3, #0]
 80091ec:	460c      	mov	r4, r1
 80091ee:	b118      	cbz	r0, 80091f8 <__swsetup_r+0x14>
 80091f0:	6a03      	ldr	r3, [r0, #32]
 80091f2:	b90b      	cbnz	r3, 80091f8 <__swsetup_r+0x14>
 80091f4:	f7ff f81c 	bl	8008230 <__sinit>
 80091f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fc:	0719      	lsls	r1, r3, #28
 80091fe:	d422      	bmi.n	8009246 <__swsetup_r+0x62>
 8009200:	06da      	lsls	r2, r3, #27
 8009202:	d407      	bmi.n	8009214 <__swsetup_r+0x30>
 8009204:	2209      	movs	r2, #9
 8009206:	602a      	str	r2, [r5, #0]
 8009208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	e033      	b.n	800927c <__swsetup_r+0x98>
 8009214:	0758      	lsls	r0, r3, #29
 8009216:	d512      	bpl.n	800923e <__swsetup_r+0x5a>
 8009218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800921a:	b141      	cbz	r1, 800922e <__swsetup_r+0x4a>
 800921c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009220:	4299      	cmp	r1, r3
 8009222:	d002      	beq.n	800922a <__swsetup_r+0x46>
 8009224:	4628      	mov	r0, r5
 8009226:	f7ff fa21 	bl	800866c <_free_r>
 800922a:	2300      	movs	r3, #0
 800922c:	6363      	str	r3, [r4, #52]	@ 0x34
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	2300      	movs	r3, #0
 8009238:	6063      	str	r3, [r4, #4]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f043 0308 	orr.w	r3, r3, #8
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	b94b      	cbnz	r3, 800925e <__swsetup_r+0x7a>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009254:	d003      	beq.n	800925e <__swsetup_r+0x7a>
 8009256:	4621      	mov	r1, r4
 8009258:	4628      	mov	r0, r5
 800925a:	f000 f88b 	bl	8009374 <__smakebuf_r>
 800925e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009262:	f013 0201 	ands.w	r2, r3, #1
 8009266:	d00a      	beq.n	800927e <__swsetup_r+0x9a>
 8009268:	2200      	movs	r2, #0
 800926a:	60a2      	str	r2, [r4, #8]
 800926c:	6962      	ldr	r2, [r4, #20]
 800926e:	4252      	negs	r2, r2
 8009270:	61a2      	str	r2, [r4, #24]
 8009272:	6922      	ldr	r2, [r4, #16]
 8009274:	b942      	cbnz	r2, 8009288 <__swsetup_r+0xa4>
 8009276:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800927a:	d1c5      	bne.n	8009208 <__swsetup_r+0x24>
 800927c:	bd38      	pop	{r3, r4, r5, pc}
 800927e:	0799      	lsls	r1, r3, #30
 8009280:	bf58      	it	pl
 8009282:	6962      	ldrpl	r2, [r4, #20]
 8009284:	60a2      	str	r2, [r4, #8]
 8009286:	e7f4      	b.n	8009272 <__swsetup_r+0x8e>
 8009288:	2000      	movs	r0, #0
 800928a:	e7f7      	b.n	800927c <__swsetup_r+0x98>
 800928c:	20000220 	.word	0x20000220

08009290 <_raise_r>:
 8009290:	291f      	cmp	r1, #31
 8009292:	b538      	push	{r3, r4, r5, lr}
 8009294:	4605      	mov	r5, r0
 8009296:	460c      	mov	r4, r1
 8009298:	d904      	bls.n	80092a4 <_raise_r+0x14>
 800929a:	2316      	movs	r3, #22
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092a6:	b112      	cbz	r2, 80092ae <_raise_r+0x1e>
 80092a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ac:	b94b      	cbnz	r3, 80092c2 <_raise_r+0x32>
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 f830 	bl	8009314 <_getpid_r>
 80092b4:	4622      	mov	r2, r4
 80092b6:	4601      	mov	r1, r0
 80092b8:	4628      	mov	r0, r5
 80092ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092be:	f000 b817 	b.w	80092f0 <_kill_r>
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d00a      	beq.n	80092dc <_raise_r+0x4c>
 80092c6:	1c59      	adds	r1, r3, #1
 80092c8:	d103      	bne.n	80092d2 <_raise_r+0x42>
 80092ca:	2316      	movs	r3, #22
 80092cc:	6003      	str	r3, [r0, #0]
 80092ce:	2001      	movs	r0, #1
 80092d0:	e7e7      	b.n	80092a2 <_raise_r+0x12>
 80092d2:	2100      	movs	r1, #0
 80092d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092d8:	4620      	mov	r0, r4
 80092da:	4798      	blx	r3
 80092dc:	2000      	movs	r0, #0
 80092de:	e7e0      	b.n	80092a2 <_raise_r+0x12>

080092e0 <raise>:
 80092e0:	4b02      	ldr	r3, [pc, #8]	@ (80092ec <raise+0xc>)
 80092e2:	4601      	mov	r1, r0
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	f7ff bfd3 	b.w	8009290 <_raise_r>
 80092ea:	bf00      	nop
 80092ec:	20000220 	.word	0x20000220

080092f0 <_kill_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d07      	ldr	r5, [pc, #28]	@ (8009310 <_kill_r+0x20>)
 80092f4:	2300      	movs	r3, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	f7f8 fdcf 	bl	8001ea0 <_kill>
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	d102      	bne.n	800930c <_kill_r+0x1c>
 8009306:	682b      	ldr	r3, [r5, #0]
 8009308:	b103      	cbz	r3, 800930c <_kill_r+0x1c>
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	bf00      	nop
 8009310:	2000afc8 	.word	0x2000afc8

08009314 <_getpid_r>:
 8009314:	f7f8 bdbc 	b.w	8001e90 <_getpid>

08009318 <_malloc_usable_size_r>:
 8009318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931c:	1f18      	subs	r0, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfbc      	itt	lt
 8009322:	580b      	ldrlt	r3, [r1, r0]
 8009324:	18c0      	addlt	r0, r0, r3
 8009326:	4770      	bx	lr

08009328 <__swhatbuf_r>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	460c      	mov	r4, r1
 800932c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009330:	2900      	cmp	r1, #0
 8009332:	b096      	sub	sp, #88	@ 0x58
 8009334:	4615      	mov	r5, r2
 8009336:	461e      	mov	r6, r3
 8009338:	da0d      	bge.n	8009356 <__swhatbuf_r+0x2e>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009340:	f04f 0100 	mov.w	r1, #0
 8009344:	bf14      	ite	ne
 8009346:	2340      	movne	r3, #64	@ 0x40
 8009348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800934c:	2000      	movs	r0, #0
 800934e:	6031      	str	r1, [r6, #0]
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	b016      	add	sp, #88	@ 0x58
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	466a      	mov	r2, sp
 8009358:	f000 f848 	bl	80093ec <_fstat_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	dbec      	blt.n	800933a <__swhatbuf_r+0x12>
 8009360:	9901      	ldr	r1, [sp, #4]
 8009362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800936a:	4259      	negs	r1, r3
 800936c:	4159      	adcs	r1, r3
 800936e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009372:	e7eb      	b.n	800934c <__swhatbuf_r+0x24>

08009374 <__smakebuf_r>:
 8009374:	898b      	ldrh	r3, [r1, #12]
 8009376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009378:	079d      	lsls	r5, r3, #30
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	d507      	bpl.n	8009390 <__smakebuf_r+0x1c>
 8009380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	2301      	movs	r3, #1
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	b003      	add	sp, #12
 800938e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009390:	ab01      	add	r3, sp, #4
 8009392:	466a      	mov	r2, sp
 8009394:	f7ff ffc8 	bl	8009328 <__swhatbuf_r>
 8009398:	9f00      	ldr	r7, [sp, #0]
 800939a:	4605      	mov	r5, r0
 800939c:	4639      	mov	r1, r7
 800939e:	4630      	mov	r0, r6
 80093a0:	f7fe fd32 	bl	8007e08 <_malloc_r>
 80093a4:	b948      	cbnz	r0, 80093ba <__smakebuf_r+0x46>
 80093a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093aa:	059a      	lsls	r2, r3, #22
 80093ac:	d4ee      	bmi.n	800938c <__smakebuf_r+0x18>
 80093ae:	f023 0303 	bic.w	r3, r3, #3
 80093b2:	f043 0302 	orr.w	r3, r3, #2
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	e7e2      	b.n	8009380 <__smakebuf_r+0xc>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	6020      	str	r0, [r4, #0]
 80093be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	9b01      	ldr	r3, [sp, #4]
 80093c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093ca:	b15b      	cbz	r3, 80093e4 <__smakebuf_r+0x70>
 80093cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d0:	4630      	mov	r0, r6
 80093d2:	f000 f81d 	bl	8009410 <_isatty_r>
 80093d6:	b128      	cbz	r0, 80093e4 <__smakebuf_r+0x70>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	f023 0303 	bic.w	r3, r3, #3
 80093de:	f043 0301 	orr.w	r3, r3, #1
 80093e2:	81a3      	strh	r3, [r4, #12]
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	431d      	orrs	r5, r3
 80093e8:	81a5      	strh	r5, [r4, #12]
 80093ea:	e7cf      	b.n	800938c <__smakebuf_r+0x18>

080093ec <_fstat_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4d07      	ldr	r5, [pc, #28]	@ (800940c <_fstat_r+0x20>)
 80093f0:	2300      	movs	r3, #0
 80093f2:	4604      	mov	r4, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	f7f8 fdb1 	bl	8001f60 <_fstat>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	d102      	bne.n	8009408 <_fstat_r+0x1c>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	b103      	cbz	r3, 8009408 <_fstat_r+0x1c>
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	bf00      	nop
 800940c:	2000afc8 	.word	0x2000afc8

08009410 <_isatty_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	@ (800942c <_isatty_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f8 fdb0 	bl	8001f80 <_isatty>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_isatty_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_isatty_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	2000afc8 	.word	0x2000afc8

08009430 <_init>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr

0800943c <_fini>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr
