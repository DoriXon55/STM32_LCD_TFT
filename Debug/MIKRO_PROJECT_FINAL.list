
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009600  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f60  08011f60  00013264  2**0
                  CONTENTS
  4 .ARM          00000008  08011f60  08011f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f68  08011f68  00013264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f68  08011f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f6c  08011f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08011f70  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adb8  20000264  080121d4  00013264  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  2000b01c  080121d4  0001401c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013059  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003560  00000000  00000000  000262ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00029850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc7  00000000  00000000  0002a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289f1  00000000  00000000  0002b37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016416  00000000  00000000  00053d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec2fc  00000000  00000000  0006a186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  001564c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008948 	.word	0x08008948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	08008948 	.word	0x08008948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];
//=========================================================

void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	60da      	str	r2, [r3, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <USART_kbhit>:

uint8_t USART_kbhit(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <USART_kbhit+0x20>)
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <USART_kbhit+0x20>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d101      	bne.n	80005b4 <USART_kbhit+0x14>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <USART_kbhit+0x16>
	}else{
		return 1;
 80005b4:	2301      	movs	r3, #1
	}
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000280 	.word	0x20000280

080005c4 <USART_getchar>:

int16_t USART_getchar() {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <USART_getchar+0x4c>)
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <USART_getchar+0x4c>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d013      	beq.n	80005fe <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <USART_getchar+0x4c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <USART_getchar+0x50>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <USART_getchar+0x4c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <USART_getchar+0x4c>)
 80005e8:	68d2      	ldr	r2, [r2, #12]
 80005ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80005ee:	fb01 f202 	mul.w	r2, r1, r2
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <USART_getchar+0x4c>)
 80005f6:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fc:	e001      	b.n	8000602 <USART_getchar+0x3e>
    }
    return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000280 	.word	0x20000280
 8000614:	20000a04 	.word	0x20000a04

08000618 <USART_sendFrame>:

void USART_sendFrame(const uint8_t* data, size_t length) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000622:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <USART_sendFrame+0xb4>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop

    __disable_irq();
    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	e016      	b.n	8000660 <USART_sendFrame+0x48>
        USART_TxBuf[idx] = data[i];
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	4413      	add	r3, r2
 8000638:	7819      	ldrb	r1, [r3, #0]
 800063a:	4a25      	ldr	r2, [pc, #148]	@ (80006d0 <USART_sendFrame+0xb8>)
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	4413      	add	r3, r2
 8000640:	460a      	mov	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) % txRingBuffer.mask;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	3301      	adds	r3, #1
 8000648:	461a      	mov	r2, r3
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <USART_sendFrame+0xb4>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000652:	fb01 f303 	mul.w	r3, r1, r3
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	3301      	adds	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d3e4      	bcc.n	8000632 <USART_sendFrame+0x1a>
    }

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <USART_sendFrame+0xb4>)
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <USART_sendFrame+0xb4>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	429a      	cmp	r2, r3
 8000672:	d122      	bne.n	80006ba <USART_sendFrame+0xa2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <USART_sendFrame+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800067e:	2b80      	cmp	r3, #128	@ 0x80
 8000680:	d11b      	bne.n	80006ba <USART_sendFrame+0xa2>
        txRingBuffer.writeIndex = idx;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <USART_sendFrame+0xb4>)
 8000686:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <USART_sendFrame+0xb4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <USART_sendFrame+0xb8>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <USART_sendFrame+0xb4>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <USART_sendFrame+0xb4>)
 800069a:	68d2      	ldr	r2, [r2, #12]
 800069c:	fbb3 f1f2 	udiv	r1, r3, r2
 80006a0:	fb01 f202 	mul.w	r2, r1, r2
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	4a09      	ldr	r2, [pc, #36]	@ (80006cc <USART_sendFrame+0xb4>)
 80006a8:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006aa:	f107 030f 	add.w	r3, r7, #15
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <USART_sendFrame+0xbc>)
 80006b4:	f004 fd6c 	bl	8005190 <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006b8:	e002      	b.n	80006c0 <USART_sendFrame+0xa8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4a03      	ldr	r2, [pc, #12]	@ (80006cc <USART_sendFrame+0xb4>)
 80006be:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006c0:	b662      	cpsie	i
}
 80006c2:	bf00      	nop
    }

    __enable_irq();
}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000290 	.word	0x20000290
 80006d0:	200002a0 	.word	0x200002a0
 80006d4:	2000ae48 	.word	0x2000ae48

080006d8 <calculateCrc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculateCrc16(uint8_t *data, size_t length, uint8_t crc_out[2]) {
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 80006e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e8:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	e019      	b.n	8000724 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 80006fa:	8bfb      	ldrh	r3, [r7, #30]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2da      	uxtb	r2, r3
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	4053      	eors	r3, r2
 8000706:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 8000708:	8bfb      	ldrh	r3, [r7, #30]
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	b21a      	sxth	r2, r3
 800070e:	7dbb      	ldrb	r3, [r7, #22]
 8000710:	490f      	ldr	r1, [pc, #60]	@ (8000750 <calculateCrc16+0x78>)
 8000712:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4053      	eors	r3, r2
 800071a:	b21b      	sxth	r3, r3
 800071c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	3301      	adds	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3e1      	bcc.n	80006f0 <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 800072c:	8bfb      	ldrh	r3, [r7, #30]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	b29b      	uxth	r3, r3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	8bfa      	ldrh	r2, [r7, #30]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_DMA_Init+0x38>)
 800075c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800075e:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <MX_DMA_Init+0x38>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6493      	str	r3, [r2, #72]	@ 0x48
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_DMA_Init+0x38>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	200f      	movs	r0, #15
 8000778:	f001 ff23 	bl	80025c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800077c:	200f      	movs	r0, #15
 800077e:	f001 ff3c 	bl	80025fa <HAL_NVIC_EnableIRQ>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <resetFrameState>:
ScrollingTextState text = {0};
//======================================================================


//======================FUNKCJE POMOCNICZE==============================
static void resetFrameState() {
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	inFrame = false;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <resetFrameState+0x20>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
	escapeDetected = false;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <resetFrameState+0x24>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
    bxIndex = 0;
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <resetFrameState+0x28>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000c28 	.word	0x20000c28
 80007b4:	20000c22 	.word	0x20000c22
 80007b8:	20000c24 	.word	0x20000c24

080007bc <stopAnimation>:

static void stopAnimation(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <stopAnimation+0x18>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000cb4 	.word	0x20000cb4

080007d8 <isWithinBounds>:

static bool isWithinBounds(int x, int y)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <isWithinBounds+0x26>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b9f      	cmp	r3, #159	@ 0x9f
 80007ec:	dc07      	bgt.n	80007fe <isWithinBounds+0x26>
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db04      	blt.n	80007fe <isWithinBounds+0x26>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007f8:	dc01      	bgt.n	80007fe <isWithinBounds+0x26>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <isWithinBounds+0x28>
 80007fe:	2300      	movs	r3, #0
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <safeCompare>:


static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <safeCompare+0x18>
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <safeCompare+0x1c>
	{
		return false;
 800082a:	2300      	movs	r3, #0
 800082c:	e00a      	b.n	8000844 <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f007 fbe4 	bl	8008000 <memcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf0c      	ite	eq
 800083e:	2301      	moveq	r3, #1
 8000840:	2300      	movne	r3, #0
 8000842:	b2db      	uxtb	r3, r3
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <isValidTriangle>:



static bool isValidTriangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3) {
 800084c:	b490      	push	{r4, r7}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	4604      	mov	r4, r0
 8000854:	4608      	mov	r0, r1
 8000856:	4611      	mov	r1, r2
 8000858:	461a      	mov	r2, r3
 800085a:	4623      	mov	r3, r4
 800085c:	80fb      	strh	r3, [r7, #6]
 800085e:	4603      	mov	r3, r0
 8000860:	80bb      	strh	r3, [r7, #4]
 8000862:	460b      	mov	r3, r1
 8000864:	807b      	strh	r3, [r7, #2]
 8000866:	4613      	mov	r3, r2
 8000868:	803b      	strh	r3, [r7, #0]
    int32_t a2 = (int32_t)(x2 - x1) * (x2 - x1) + (int32_t)(y2 - y1) * (y2 - y1);
 800086a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000878:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800087c:	1a8a      	subs	r2, r1, r2
 800087e:	fb03 f202 	mul.w	r2, r3, r2
 8000882:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	f9b7 0000 	ldrsh.w	r0, [r7]
 8000890:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000894:	1a41      	subs	r1, r0, r1
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
    int32_t b2 = (int32_t)(x3 - x2) * (x3 - x2) + (int32_t)(y3 - y2) * (y3 - y2);
 800089e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80008ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008b0:	1a8a      	subs	r2, r1, r2
 80008b2:	fb03 f202 	mul.w	r2, r3, r2
 80008b6:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 80008c4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80008c8:	1a41      	subs	r1, r0, r1
 80008ca:	fb01 f303 	mul.w	r3, r1, r3
 80008ce:	4413      	add	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
    int32_t c2 = (int32_t)(x1 - x3) * (x1 - x3) + (int32_t)(y1 - y3) * (y1 - y3);
 80008d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80008e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008e4:	1a8a      	subs	r2, r1, r2
 80008e6:	fb03 f202 	mul.w	r2, r3, r2
 80008ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008ee:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80008f2:	1acb      	subs	r3, r1, r3
 80008f4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80008f8:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008fc:	1a41      	subs	r1, r0, r1
 80008fe:	fb01 f303 	mul.w	r3, r1, r3
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]

    if (a2 + b2 <= c2 || b2 + c2 <= a2 || c2 + a2 <= b2) {
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4413      	add	r3, r2
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	da0b      	bge.n	800092a <isValidTriangle+0xde>
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	429a      	cmp	r2, r3
 800091c:	da05      	bge.n	800092a <isValidTriangle+0xde>
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	4413      	add	r3, r2
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	429a      	cmp	r2, r3
 8000928:	db01      	blt.n	800092e <isValidTriangle+0xe2>
        return false;
 800092a:	2300      	movs	r3, #0
 800092c:	e01f      	b.n	800096e <isValidTriangle+0x122>
    }

    int32_t cross = (int32_t)(x2 - x1) * (y3 - y1) - (int32_t)(y2 - y1) * (x3 - x1);
 800092e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 800093c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	fb03 f202 	mul.w	r2, r3, r2
 8000946:	f9b7 1000 	ldrsh.w	r1, [r7]
 800094a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000954:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000958:	1a41      	subs	r1, r0, r1
 800095a:	fb01 f303 	mul.w	r3, r1, r3
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	60bb      	str	r3, [r7, #8]
    if (cross == 0) {
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d101      	bne.n	800096c <isValidTriangle+0x120>
        return false;
 8000968:	2300      	movs	r3, #0
 800096a:	e000      	b.n	800096e <isValidTriangle+0x122>
    }

    return true;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc90      	pop	{r4, r7}
 8000976:	4770      	bx	lr

08000978 <sendStatus>:



static void sendStatus(StatusCode_t status) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af02      	add	r7, sp, #8
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
    if(status < STATUS_COUNT) {
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b09      	cmp	r3, #9
 8000986:	d80a      	bhi.n	800099e <sendStatus+0x26>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "%s", STATUS_MESSAGES[status]);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <sendStatus+0x30>)
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <sendStatus+0x34>)
 8000994:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <sendStatus+0x38>)
 8000996:	2167      	movs	r1, #103	@ 0x67
 8000998:	2068      	movs	r0, #104	@ 0x68
 800099a:	f000 fc0b 	bl	80011b4 <prepareFrame>
    }
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08008a80 	.word	0x08008a80
 80009ac:	08008a28 	.word	0x08008a28
 80009b0:	08008a2c 	.word	0x08008a2c

080009b4 <clearFrame>:

static void clearFrame(Frame* frame) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    if (frame) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00d      	beq.n	80009de <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3305      	adds	r3, #5
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f007 fb28 	bl	8008020 <memset>
        memset(frame->command, 0, sizeof(frame->command));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3302      	adds	r3, #2
 80009d4:	2203      	movs	r2, #3
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f007 fb21 	bl	8008020 <memset>
    }
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <parseCoordinates>:

static bool parseCoordinates(const uint8_t* data, int* x, int* y)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
	 *x = data[0];  // Pierwszy bajt to x
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	601a      	str	r2, [r3, #0]
	 *y = data[2];  // Drugi bajt to y
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3302      	adds	r3, #2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
    return true;
 8000a08:	2301      	movs	r3, #1
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <parseColor>:

static bool parseColor(const char* color_name, Color_t* color) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <parseColor+0x16>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <parseColor+0x1a>
        return false;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e026      	b.n	8000a80 <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e01f      	b.n	8000a78 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name);
 8000a38:	4a13      	ldr	r2, [pc, #76]	@ (8000a88 <parseColor+0x70>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbc5 	bl	80001d0 <strlen>
 8000a46:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000a48:	4a0f      	ldr	r2, [pc, #60]	@ (8000a88 <parseColor+0x70>)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	4619      	mov	r1, r3
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fedc 	bl	8000812 <safeCompare>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <parseColor+0x5a>
            *color = color_map[i].value;
 8000a60:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <parseColor+0x70>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4413      	add	r3, r2
 8000a68:	889a      	ldrh	r2, [r3, #4]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	801a      	strh	r2, [r3, #0]
            return true;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e006      	b.n	8000a80 <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b07      	cmp	r3, #7
 8000a7c:	d9dc      	bls.n	8000a38 <parseColor+0x20>
        }
    }
    return false;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	08008aa8 	.word	0x08008aa8

08000a8c <parseParameters>:


static bool parseParameters(const uint8_t* data, const char* format, ...) {
 8000a8c:	b40e      	push	{r1, r2, r3}
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b099      	sub	sp, #100	@ 0x64
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <parseParameters+0x16>
 8000a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <parseParameters+0x1a>
        return false;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e0b0      	b.n	8000c08 <parseParameters+0x17c>
    }
    va_list args;
    va_start(args, format);
 8000aa6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const uint8_t* data_ptr = data;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 8000ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t token[51];
    size_t token_idx = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	657b      	str	r3, [r7, #84]	@ 0x54

    uint8_t scrollSpeed = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    bool hasScrollSpeed = false;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

    while (*fmt_ptr) {
 8000ac4:	e09a      	b.n	8000bfc <parseParameters+0x170>
        switch (*fmt_ptr) {
 8000ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b75      	cmp	r3, #117	@ 0x75
 8000acc:	d007      	beq.n	8000ade <parseParameters+0x52>
 8000ace:	2b75      	cmp	r3, #117	@ 0x75
 8000ad0:	f300 808c 	bgt.w	8000bec <parseParameters+0x160>
 8000ad4:	2b73      	cmp	r3, #115	@ 0x73
 8000ad6:	d023      	beq.n	8000b20 <parseParameters+0x94>
 8000ad8:	2b74      	cmp	r3, #116	@ 0x74
 8000ada:	d054      	beq.n	8000b86 <parseParameters+0xfa>
 8000adc:	e086      	b.n	8000bec <parseParameters+0x160>
            case 'u': {
                uint8_t* value_ptr = va_arg(args, uint8_t*);
 8000ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ae0:	1d1a      	adds	r2, r3, #4
 8000ae2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                *value_ptr = *data_ptr++;
 8000ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000af2:	701a      	strb	r2, [r3, #0]

                if (!hasScrollSpeed) {
 8000af4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000af8:	f083 0301 	eor.w	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <parseParameters+0x84>
                    scrollSpeed = *value_ptr;
 8000b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                    hasScrollSpeed = true;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                }

                if (*data_ptr == ',') {
 8000b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b16:	d16b      	bne.n	8000bf0 <parseParameters+0x164>
                    data_ptr++;
 8000b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
                break;
 8000b1e:	e067      	b.n	8000bf0 <parseParameters+0x164>
            }
            case 's': {
                token_idx = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && *data_ptr != ',' && token_idx <= 10) {
 8000b24:	e00a      	b.n	8000b3c <parseParameters+0xb0>
                    token[token_idx++] = *data_ptr++;
 8000b26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000b28:	1c53      	adds	r3, r2, #1
 8000b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b2e:	1c59      	adds	r1, r3, #1
 8000b30:	6579      	str	r1, [r7, #84]	@ 0x54
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	3360      	adds	r3, #96	@ 0x60
 8000b36:	443b      	add	r3, r7
 8000b38:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && *data_ptr != ',' && token_idx <= 10) {
 8000b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <parseParameters+0xc6>
 8000b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b4a:	d002      	beq.n	8000b52 <parseParameters+0xc6>
 8000b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b4e:	2b0a      	cmp	r3, #10
 8000b50:	d9e9      	bls.n	8000b26 <parseParameters+0x9a>
                }
                if (*data_ptr == ',') data_ptr++;
 8000b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b58:	d102      	bne.n	8000b60 <parseParameters+0xd4>
 8000b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c

                Color_t* color_ptr = va_arg(args, Color_t*);
 8000b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b62:	1d1a      	adds	r2, r3, #4
 8000b64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	643b      	str	r3, [r7, #64]	@ 0x40
                if (!parseColor((char*)token, color_ptr)) {
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff51 	bl	8000a18 <parseColor>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f083 0301 	eor.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d038      	beq.n	8000bf4 <parseParameters+0x168>
                    va_end(args);
                    return false;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e040      	b.n	8000c08 <parseParameters+0x17c>
                }
                break;
            }
            case 't': {
                token_idx = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && token_idx < 50) {
 8000b8a:	e00a      	b.n	8000ba2 <parseParameters+0x116>
                    token[token_idx++] = *data_ptr++;
 8000b8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000b8e:	1c53      	adds	r3, r2, #1
 8000b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b94:	1c59      	adds	r1, r3, #1
 8000b96:	6579      	str	r1, [r7, #84]	@ 0x54
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	3360      	adds	r3, #96	@ 0x60
 8000b9c:	443b      	add	r3, r7
 8000b9e:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && token_idx < 50) {
 8000ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <parseParameters+0x124>
 8000baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bac:	2b31      	cmp	r3, #49	@ 0x31
 8000bae:	d9ed      	bls.n	8000b8c <parseParameters+0x100>
                }

                size_t maxLength = (scrollSpeed == 0) ? 25 : 50;
 8000bb0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <parseParameters+0x130>
 8000bb8:	2319      	movs	r3, #25
 8000bba:	e000      	b.n	8000bbe <parseParameters+0x132>
 8000bbc:	2332      	movs	r3, #50	@ 0x32
 8000bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (token_idx > maxLength) {
 8000bc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d904      	bls.n	8000bd2 <parseParameters+0x146>
                    va_end(args);
                    sendStatus(ERR_TOO_MUCH_TEXT);
 8000bc8:	2008      	movs	r0, #8
 8000bca:	f7ff fed5 	bl	8000978 <sendStatus>
                    return false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e01a      	b.n	8000c08 <parseParameters+0x17c>
                }

                char* text_ptr = va_arg(args, char*);
 8000bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bd4:	1d1a      	adds	r2, r3, #4
 8000bd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	647b      	str	r3, [r7, #68]	@ 0x44
                memcpy(text_ptr, token, token_idx);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000be2:	4619      	mov	r1, r3
 8000be4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000be6:	f007 fa63 	bl	80080b0 <memcpy>
                break;
 8000bea:	e004      	b.n	8000bf6 <parseParameters+0x16a>
            }
            default:
                va_end(args);
                return false;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e00b      	b.n	8000c08 <parseParameters+0x17c>
                break;
 8000bf0:	bf00      	nop
 8000bf2:	e000      	b.n	8000bf6 <parseParameters+0x16a>
                break;
 8000bf4:	bf00      	nop
        }
        fmt_ptr++;
 8000bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f47f af60 	bne.w	8000ac6 <parseParameters+0x3a>
    }

    va_end(args);
    return true;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3764      	adds	r7, #100	@ 0x64
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c12:	b003      	add	sp, #12
 8000c14:	4770      	bx	lr

08000c16 <decodeFrame>:


static bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71fb      	strb	r3, [r7, #7]
    uint8_t ownCrc[2];
    uint8_t incCrc[2];

    if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_WITHOUT_STUFFING) {
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d957      	bls.n	8000cda <decodeFrame+0xc4>
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b87      	cmp	r3, #135	@ 0x87
 8000c2e:	d854      	bhi.n	8000cda <decodeFrame+0xc4>
        uint8_t k = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	75fb      	strb	r3, [r7, #23]
        frame->sender = bx[k++];
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	75fa      	strb	r2, [r7, #23]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	701a      	strb	r2, [r3, #0]
        frame->receiver = bx[k++];
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	75fa      	strb	r2, [r7, #23]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	705a      	strb	r2, [r3, #1]
        if(frame->sender != PC_ADDR)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b67      	cmp	r3, #103	@ 0x67
 8000c5e:	d004      	beq.n	8000c6a <decodeFrame+0x54>
        {
        	sendStatus(ERR_WRONG_SENDER);
 8000c60:	2002      	movs	r0, #2
 8000c62:	f7ff fe89 	bl	8000978 <sendStatus>
        	return false;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e038      	b.n	8000cdc <decodeFrame+0xc6>
        }

        memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1c98      	adds	r0, r3, #2
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	4619      	mov	r1, r3
 8000c78:	f007 fa1a 	bl	80080b0 <memcpy>
        k += COMMAND_LENGTH;
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	3303      	adds	r3, #3
 8000c80:	75fb      	strb	r3, [r7, #23]

        uint8_t dataLen = len - MIN_DECODED_FRAME_LEN; //to sprawdzic
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	3b07      	subs	r3, #7
 8000c86:	75bb      	strb	r3, [r7, #22]
        memcpy(frame->data, &bx[k], dataLen);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1d58      	adds	r0, r3, #5
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	7dba      	ldrb	r2, [r7, #22]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f007 fa0b 	bl	80080b0 <memcpy>
        k += dataLen;
 8000c9a:	7dfa      	ldrb	r2, [r7, #23]
 8000c9c:	7dbb      	ldrb	r3, [r7, #22]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	75fb      	strb	r3, [r7, #23]

        memcpy(incCrc, &bx[k], 2);
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	823b      	strh	r3, [r7, #16]
        calculateCrc16((uint8_t *)frame, k, ownCrc);
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	f107 0214 	add.w	r2, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	68b8      	ldr	r0, [r7, #8]
 8000cb8:	f7ff fd0e 	bl	80006d8 <calculateCrc16>
        if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 8000cbc:	7d3a      	ldrb	r2, [r7, #20]
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d103      	bne.n	8000ccc <decodeFrame+0xb6>
 8000cc4:	7d7a      	ldrb	r2, [r7, #21]
 8000cc6:	7c7b      	ldrb	r3, [r7, #17]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d004      	beq.n	8000cd6 <decodeFrame+0xc0>
        	sendStatus(ERR_WRONG_CRC);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f7ff fe53 	bl	8000978 <sendStatus>
            return false;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e002      	b.n	8000cdc <decodeFrame+0xc6>
        }
        return true;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <decodeFrame+0xc6>
    }
    return false;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <byteStuffing>:

static size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	e04b      	b.n	8000d92 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4413      	add	r3, r2
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b7d      	cmp	r3, #125	@ 0x7d
 8000d04:	d10e      	bne.n	8000d24 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	617a      	str	r2, [r7, #20]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	227d      	movs	r2, #125	@ 0x7d
 8000d12:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	617a      	str	r2, [r7, #20]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	225d      	movs	r2, #93	@ 0x5d
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e033      	b.n	8000d8c <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d2e:	d10e      	bne.n	8000d4e <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	617a      	str	r2, [r7, #20]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	227d      	movs	r2, #125	@ 0x7d
 8000d3c:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	617a      	str	r2, [r7, #20]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	225e      	movs	r2, #94	@ 0x5e
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e01e      	b.n	8000d8c <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b60      	cmp	r3, #96	@ 0x60
 8000d58:	d10e      	bne.n	8000d78 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	617a      	str	r2, [r7, #20]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	227d      	movs	r2, #125	@ 0x7d
 8000d66:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	617a      	str	r2, [r7, #20]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	2226      	movs	r2, #38	@ 0x26
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e009      	b.n	8000d8c <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	441a      	add	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	1c59      	adds	r1, r3, #1
 8000d82:	6179      	str	r1, [r7, #20]
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	440b      	add	r3, r1
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3af      	bcc.n	8000cfa <byteStuffing+0x16>
        }
    }
    return j;
 8000d9a:	697b      	ldr	r3, [r7, #20]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <executeONK>:
//======================================================================


//==================FUNCKJE DLA WYŚWIETLACZA===================================
static void executeONK(Frame *frame)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	2300      	movs	r3, #0
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	2300      	movs	r3, #0
 8000dba:	737b      	strb	r3, [r7, #13]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	1d58      	adds	r0, r3, #5
 8000dc8:	f107 010e 	add.w	r1, r7, #14
 8000dcc:	f107 020f 	add.w	r2, r7, #15
 8000dd0:	f107 030a 	add.w	r3, r7, #10
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	9301      	str	r3, [sp, #4]
 8000ddc:	f107 030d 	add.w	r3, r7, #13
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	460b      	mov	r3, r1
 8000de4:	4914      	ldr	r1, [pc, #80]	@ (8000e38 <executeONK+0x90>)
 8000de6:	f7ff fe51 	bl	8000a8c <parseParameters>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f083 0301 	eor.w	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <executeONK+0x56>
    {
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000df6:	2009      	movs	r0, #9
 8000df8:	f7ff fdbe 	bl	8000978 <sendStatus>
 8000dfc:	e019      	b.n	8000e32 <executeONK+0x8a>
        return;
    }
	switch(filling)
 8000dfe:	7b3b      	ldrb	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <executeONK+0x62>
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d00a      	beq.n	8000e1e <executeONK+0x76>
 8000e08:	e013      	b.n	8000e32 <executeONK+0x8a>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	b218      	sxth	r0, r3
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	b219      	sxth	r1, r3
 8000e12:	7b7b      	ldrb	r3, [r7, #13]
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	897b      	ldrh	r3, [r7, #10]
 8000e18:	f006 fcb2 	bl	8007780 <hagl_draw_circle>
		break;
 8000e1c:	e009      	b.n	8000e32 <executeONK+0x8a>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	b218      	sxth	r0, r3
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	b219      	sxth	r1, r3
 8000e26:	7b7b      	ldrb	r3, [r7, #13]
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	897b      	ldrh	r3, [r7, #10]
 8000e2c:	f006 fdd7 	bl	80079de <hagl_fill_circle>
		break;
 8000e30:	bf00      	nop
	}
}
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	08008a30 	.word	0x08008a30

08000e3c <executeONP>:

static void executeONP(Frame *frame)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af04      	add	r7, sp, #16
 8000e42:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73bb      	strb	r3, [r7, #14]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	737b      	strb	r3, [r7, #13]
 8000e50:	2300      	movs	r3, #0
 8000e52:	733b      	strb	r3, [r7, #12]
 8000e54:	2300      	movs	r3, #0
 8000e56:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	1d58      	adds	r0, r3, #5
 8000e60:	f107 010e 	add.w	r1, r7, #14
 8000e64:	f107 020f 	add.w	r2, r7, #15
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	9303      	str	r3, [sp, #12]
 8000e6e:	f107 030b 	add.w	r3, r7, #11
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	f107 030d 	add.w	r3, r7, #13
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	460b      	mov	r3, r1
 8000e82:	4919      	ldr	r1, [pc, #100]	@ (8000ee8 <executeONP+0xac>)
 8000e84:	f7ff fe02 	bl	8000a8c <parseParameters>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f083 0301 	eor.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <executeONP+0x60>
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000e94:	2009      	movs	r0, #9
 8000e96:	f7ff fd6f 	bl	8000978 <sendStatus>
 8000e9a:	e021      	b.n	8000ee0 <executeONP+0xa4>
		return;
	}

	switch(filling)
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <executeONP+0x6c>
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d00e      	beq.n	8000ec4 <executeONP+0x88>
 8000ea6:	e01b      	b.n	8000ee0 <executeONP+0xa4>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	b218      	sxth	r0, r3
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	b219      	sxth	r1, r3
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	7b3b      	ldrb	r3, [r7, #12]
 8000eb6:	b21c      	sxth	r4, r3
 8000eb8:	893b      	ldrh	r3, [r7, #8]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	4623      	mov	r3, r4
 8000ebe:	f006 f8f9 	bl	80070b4 <hagl_draw_rectangle>
		break;
 8000ec2:	e00d      	b.n	8000ee0 <executeONP+0xa4>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	b218      	sxth	r0, r3
 8000ec8:	7bbb      	ldrb	r3, [r7, #14]
 8000eca:	b219      	sxth	r1, r3
 8000ecc:	7b7b      	ldrb	r3, [r7, #13]
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	7b3b      	ldrb	r3, [r7, #12]
 8000ed2:	b21c      	sxth	r4, r3
 8000ed4:	893b      	ldrh	r3, [r7, #8]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4623      	mov	r3, r4
 8000eda:	f006 f971 	bl	80071c0 <hagl_fill_rectangle>
		break;
 8000ede:	bf00      	nop
	}
}
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08008a38 	.word	0x08008a38

08000eec <executeONT>:


static void executeONT(Frame *frame)
{
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	b08d      	sub	sp, #52	@ 0x34
 8000ef0:	af06      	add	r7, sp, #24
 8000ef2:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75fb      	strb	r3, [r7, #23]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	75bb      	strb	r3, [r7, #22]
 8000efc:	2300      	movs	r3, #0
 8000efe:	757b      	strb	r3, [r7, #21]
 8000f00:	2300      	movs	r3, #0
 8000f02:	753b      	strb	r3, [r7, #20]
 8000f04:	2300      	movs	r3, #0
 8000f06:	74fb      	strb	r3, [r7, #19]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	74bb      	strb	r3, [r7, #18]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1d58      	adds	r0, r3, #5
 8000f18:	f107 0116 	add.w	r1, r7, #22
 8000f1c:	f107 0217 	add.w	r2, r7, #23
 8000f20:	f107 030e 	add.w	r3, r7, #14
 8000f24:	9305      	str	r3, [sp, #20]
 8000f26:	f107 0311 	add.w	r3, r7, #17
 8000f2a:	9304      	str	r3, [sp, #16]
 8000f2c:	f107 0312 	add.w	r3, r7, #18
 8000f30:	9303      	str	r3, [sp, #12]
 8000f32:	f107 0313 	add.w	r3, r7, #19
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	f107 0315 	add.w	r3, r7, #21
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	460b      	mov	r3, r1
 8000f46:	492f      	ldr	r1, [pc, #188]	@ (8001004 <executeONT+0x118>)
 8000f48:	f7ff fda0 	bl	8000a8c <parseParameters>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <executeONT+0x74>
    {
    	sendStatus(ERR_NOT_RECOGNIZED);
 8000f58:	2009      	movs	r0, #9
 8000f5a:	f7ff fd0d 	bl	8000978 <sendStatus>
        return;
 8000f5e:	e04d      	b.n	8000ffc <executeONT+0x110>
    }
    if (!isValidTriangle(x1, y1, x2, y2, x3, y3)) {
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	b218      	sxth	r0, r3
 8000f64:	7dbb      	ldrb	r3, [r7, #22]
 8000f66:	b219      	sxth	r1, r3
 8000f68:	7d7b      	ldrb	r3, [r7, #21]
 8000f6a:	b21c      	sxth	r4, r3
 8000f6c:	7d3b      	ldrb	r3, [r7, #20]
 8000f6e:	b21d      	sxth	r5, r3
 8000f70:	7cfb      	ldrb	r3, [r7, #19]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	7cba      	ldrb	r2, [r7, #18]
 8000f76:	b212      	sxth	r2, r2
 8000f78:	9201      	str	r2, [sp, #4]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	462b      	mov	r3, r5
 8000f7e:	4622      	mov	r2, r4
 8000f80:	f7ff fc64 	bl	800084c <isValidTriangle>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <executeONT+0xac>
    	sendStatus(ERR_INVALID_TRIANGLE);
 8000f90:	2007      	movs	r0, #7
 8000f92:	f7ff fcf1 	bl	8000978 <sendStatus>
            return;
 8000f96:	e031      	b.n	8000ffc <executeONT+0x110>
    }
    switch(filling)
 8000f98:	7c7b      	ldrb	r3, [r7, #17]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <executeONT+0xb8>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d016      	beq.n	8000fd0 <executeONT+0xe4>
 8000fa2:	e02b      	b.n	8000ffc <executeONT+0x110>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	b218      	sxth	r0, r3
 8000fa8:	7dbb      	ldrb	r3, [r7, #22]
 8000faa:	b21c      	sxth	r4, r3
 8000fac:	7d7b      	ldrb	r3, [r7, #21]
 8000fae:	b21d      	sxth	r5, r3
 8000fb0:	7d3b      	ldrb	r3, [r7, #20]
 8000fb2:	b21e      	sxth	r6, r3
 8000fb4:	7cfb      	ldrb	r3, [r7, #19]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	7cba      	ldrb	r2, [r7, #18]
 8000fba:	b212      	sxth	r2, r2
 8000fbc:	89f9      	ldrh	r1, [r7, #14]
 8000fbe:	9102      	str	r1, [sp, #8]
 8000fc0:	9201      	str	r2, [sp, #4]
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4633      	mov	r3, r6
 8000fc6:	462a      	mov	r2, r5
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f006 ff93 	bl	8007ef4 <hagl_draw_triangle>
            break;
 8000fce:	e015      	b.n	8000ffc <executeONT+0x110>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	b218      	sxth	r0, r3
 8000fd4:	7dbb      	ldrb	r3, [r7, #22]
 8000fd6:	b21c      	sxth	r4, r3
 8000fd8:	7d7b      	ldrb	r3, [r7, #21]
 8000fda:	b21d      	sxth	r5, r3
 8000fdc:	7d3b      	ldrb	r3, [r7, #20]
 8000fde:	b21e      	sxth	r6, r3
 8000fe0:	7cfb      	ldrb	r3, [r7, #19]
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	7cba      	ldrb	r2, [r7, #18]
 8000fe6:	b212      	sxth	r2, r2
 8000fe8:	89f9      	ldrh	r1, [r7, #14]
 8000fea:	9102      	str	r1, [sp, #8]
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	4633      	mov	r3, r6
 8000ff2:	462a      	mov	r2, r5
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	f006 ffa3 	bl	8007f40 <hagl_fill_triangle>
            break;
 8000ffa:	bf00      	nop
    }
}
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001002:	bf00      	nop
 8001004:	08008a40 	.word	0x08008a40

08001008 <executeONN>:

static void executeONN(Frame *frame)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	@ 0x50
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
    const char charText[50] = {0};
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	222e      	movs	r2, #46	@ 0x2e
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f006 ffff 	bl	8008020 <memset>
    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	1d58      	adds	r0, r3, #5
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	9303      	str	r3, [sp, #12]
 800102c:	4b48      	ldr	r3, [pc, #288]	@ (8001150 <executeONN+0x148>)
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	4b48      	ldr	r3, [pc, #288]	@ (8001154 <executeONN+0x14c>)
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <executeONN+0x150>)
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4b48      	ldr	r3, [pc, #288]	@ (800115c <executeONN+0x154>)
 800103a:	4a49      	ldr	r2, [pc, #292]	@ (8001160 <executeONN+0x158>)
 800103c:	4949      	ldr	r1, [pc, #292]	@ (8001164 <executeONN+0x15c>)
 800103e:	f7ff fd25 	bl	8000a8c <parseParameters>
 8001042:	4603      	mov	r3, r0
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <executeONN+0x4e>
    	sendStatus(ERR_NOT_RECOGNIZED);
 800104e:	2009      	movs	r0, #9
 8001050:	f7ff fc92 	bl	8000978 <sendStatus>
 8001054:	e079      	b.n	800114a <executeONN+0x142>
        return;
    }

    // Zapisz początkowe pozycje
    memset(text.displayText, 0, sizeof(text.displayText));
 8001056:	22c8      	movs	r2, #200	@ 0xc8
 8001058:	2100      	movs	r1, #0
 800105a:	4843      	ldr	r0, [pc, #268]	@ (8001168 <executeONN+0x160>)
 800105c:	f006 ffe0 	bl	8008020 <memset>
    text.startX = text.x;
 8001060:	4b41      	ldr	r3, [pc, #260]	@ (8001168 <executeONN+0x160>)
 8001062:	f9b3 20c8 	ldrsh.w	r2, [r3, #200]	@ 0xc8
 8001066:	4b40      	ldr	r3, [pc, #256]	@ (8001168 <executeONN+0x160>)
 8001068:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    text.startY = text.y;  // Ta wartość będzie używana do stałej pozycji Y
 800106c:	4b3e      	ldr	r3, [pc, #248]	@ (8001168 <executeONN+0x160>)
 800106e:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8001072:	4b3d      	ldr	r3, [pc, #244]	@ (8001168 <executeONN+0x160>)
 8001074:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
    text.textLength = 0;
 8001078:	4b3b      	ldr	r3, [pc, #236]	@ (8001168 <executeONN+0x160>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    text.firstIteration = true;
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <executeONN+0x160>)
 8001082:	2201      	movs	r2, #1
 8001084:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8001088:	e015      	b.n	80010b6 <executeONN+0xae>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 800108a:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <executeONN+0x160>)
 800108c:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8001090:	3340      	adds	r3, #64	@ 0x40
 8001092:	443b      	add	r3, r7
 8001094:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8001098:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <executeONN+0x160>)
 800109a:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800109e:	461a      	mov	r2, r3
 80010a0:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <executeONN+0x160>)
 80010a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <executeONN+0x160>)
 80010a8:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80010ac:	3301      	adds	r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001168 <executeONN+0x160>)
 80010b2:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    while (charText[text.textLength] && text.textLength < 50) {
 80010b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <executeONN+0x160>)
 80010b8:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80010bc:	3340      	adds	r3, #64	@ 0x40
 80010be:	443b      	add	r3, r7
 80010c0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <executeONN+0xca>
 80010c8:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <executeONN+0x160>)
 80010ca:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80010ce:	2b31      	cmp	r3, #49	@ 0x31
 80010d0:	d9db      	bls.n	800108a <executeONN+0x82>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <executeONN+0x160>)
 80010d4:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf14      	ite	ne
 80010dc:	2301      	movne	r3, #1
 80010de:	2300      	moveq	r3, #0
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <executeONN+0x160>)
 80010e4:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    text.lastUpdate = HAL_GetTick();
 80010e8:	f001 f984 	bl	80023f4 <HAL_GetTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001168 <executeONN+0x160>)
 80010f0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    const uint8_t* font;
    switch(text.fontSize) {
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <executeONN+0x160>)
 80010f6:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d00c      	beq.n	8001118 <executeONN+0x110>
 80010fe:	2b03      	cmp	r3, #3
 8001100:	dc0d      	bgt.n	800111e <executeONN+0x116>
 8001102:	2b01      	cmp	r3, #1
 8001104:	d002      	beq.n	800110c <executeONN+0x104>
 8001106:	2b02      	cmp	r3, #2
 8001108:	d003      	beq.n	8001112 <executeONN+0x10a>
 800110a:	e008      	b.n	800111e <executeONN+0x116>
        case 1: font = font5x7; break;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <executeONN+0x164>)
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001110:	e007      	b.n	8001122 <executeONN+0x11a>
        case 2: font = font5x8; break;
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <executeONN+0x168>)
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001116:	e004      	b.n	8001122 <executeONN+0x11a>
        case 3: font = font6x9; break;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <executeONN+0x16c>)
 800111a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800111c:	e001      	b.n	8001122 <executeONN+0x11a>
        default: font = font5x7;
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <executeONN+0x164>)
 8001120:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <executeONN+0x160>)
 8001124:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10e      	bne.n	800114a <executeONN+0x142>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <executeONN+0x160>)
 800112e:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <executeONN+0x160>)
 8001134:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <executeONN+0x160>)
 800113a:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 800113e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4603      	mov	r3, r0
 8001144:	4808      	ldr	r0, [pc, #32]	@ (8001168 <executeONN+0x160>)
 8001146:	f006 facc 	bl	80076e2 <hagl_put_text>
    }
}
 800114a:	3740      	adds	r7, #64	@ 0x40
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000d86 	.word	0x20000d86
 8001154:	20000d85 	.word	0x20000d85
 8001158:	20000d84 	.word	0x20000d84
 800115c:	20000d7e 	.word	0x20000d7e
 8001160:	20000d7c 	.word	0x20000d7c
 8001164:	08008a4c 	.word	0x08008a4c
 8001168:	20000cb4 	.word	0x20000cb4
 800116c:	08008ae8 	.word	0x08008ae8
 8001170:	0800bff0 	.word	0x0800bff0
 8001174:	0800ee94 	.word	0x0800ee94

08001178 <executeOFF>:

static void executeOFF(Frame *frame)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	795b      	ldrb	r3, [r3, #5]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <executeOFF+0x16>
 8001188:	2b01      	cmp	r3, #1
 800118a:	d006      	beq.n	800119a <executeOFF+0x22>
 800118c:	e008      	b.n	80011a0 <executeOFF+0x28>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2102      	movs	r1, #2
 8001192:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <executeOFF+0x38>)
 8001194:	f001 fe6c 	bl	8002e70 <HAL_GPIO_WritePin>
		break;
 8001198:	e006      	b.n	80011a8 <executeOFF+0x30>
	case 1:
		lcdClear();
 800119a:	f000 fc8b 	bl	8001ab4 <lcdClear>
		break;
 800119e:	e003      	b.n	80011a8 <executeOFF+0x30>
	default:
    	sendStatus(ERR_WRONG_OFF_DATA);
 80011a0:	2005      	movs	r0, #5
 80011a2:	f7ff fbe9 	bl	8000978 <sendStatus>
	}
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	48000400 	.word	0x48000400

080011b4 <prepareFrame>:

//=====================================================================


void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 80011b4:	b408      	push	{r3}
 80011b6:	b580      	push	{r7, lr}
 80011b8:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 80011bc:	af00      	add	r7, sp, #0
 80011be:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011c2:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011cc:	f2a3 33c9 	subw	r3, r3, #969	@ 0x3c9
 80011d0:	4602      	mov	r2, r0
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011d8:	f2a3 33ca 	subw	r3, r3, #970	@ 0x3ca
 80011dc:	460a      	mov	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]
    Frame frame = {0};
 80011e0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80011e4:	2285      	movs	r2, #133	@ 0x85
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 ff19 	bl	8008020 <memset>
    frame.sender = sender;
 80011ee:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011f2:	f2a3 33c9 	subw	r3, r3, #969	@ 0x3c9
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f887 3338 	strb.w	r3, [r7, #824]	@ 0x338
    frame.receiver = receiver;
 80011fc:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001200:	f2a3 33ca 	subw	r3, r3, #970	@ 0x3ca
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	f887 3339 	strb.w	r3, [r7, #825]	@ 0x339
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 800120a:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800120e:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8001212:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001216:	1c90      	adds	r0, r2, #2
 8001218:	2203      	movs	r2, #3
 800121a:	6819      	ldr	r1, [r3, #0]
 800121c:	f006 ff08 	bl	8008030 <strncpy>

    uint8_t formatted_data[MAX_DATA_SIZE] = {0};  // Zainicjalizowane zerami
 8001220:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001224:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	3304      	adds	r3, #4
 800122e:	227c      	movs	r2, #124	@ 0x7c
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f006 fef4 	bl	8008020 <memset>
    va_list args;
    va_start(args, format);
 8001238:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 800123c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001240:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001244:	601a      	str	r2, [r3, #0]
    int data_len = vsnprintf((char *)formatted_data, MAX_DATA_SIZE, format, args);
 8001246:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800124a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800124e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8001258:	2180      	movs	r1, #128	@ 0x80
 800125a:	f006 fec3 	bl	8007fe4 <vsniprintf>
 800125e:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
    va_end(args);

    uint8_t raw_payload[MAX_FRAME_WITHOUT_STUFFING] = {0};
 8001262:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001266:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	2283      	movs	r2, #131	@ 0x83
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f006 fed3 	bl	8008020 <memset>
    size_t raw_payload_len = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

    raw_payload[raw_payload_len++] = frame.sender;
 8001280:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 800128a:	f897 1338 	ldrb.w	r1, [r7, #824]	@ 0x338
 800128e:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001292:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001296:	54d1      	strb	r1, [r2, r3]
    raw_payload[raw_payload_len++] = frame.receiver;
 8001298:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 80012a2:	f897 1339 	ldrb.w	r1, [r7, #825]	@ 0x339
 80012a6:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80012aa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012ae:	54d1      	strb	r1, [r2, r3]
    memcpy(raw_payload + raw_payload_len, frame.command, COMMAND_LENGTH);
 80012b0:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 80012b4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80012b8:	4413      	add	r3, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	f207 333a 	addw	r3, r7, #826	@ 0x33a
 80012c0:	8819      	ldrh	r1, [r3, #0]
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	8011      	strh	r1, [r2, #0]
 80012c6:	7093      	strb	r3, [r2, #2]
    raw_payload_len += COMMAND_LENGTH;
 80012c8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80012cc:	3303      	adds	r3, #3
 80012ce:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

    if(data_len > 0) {
 80012d2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dd12      	ble.n	8001300 <prepareFrame+0x14c>
        memcpy(raw_payload + raw_payload_len, formatted_data, data_len);
 80012da:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 80012de:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80012e2:	4413      	add	r3, r2
 80012e4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	@ 0x3c8
 80012e8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fedf 	bl	80080b0 <memcpy>
        raw_payload_len += data_len;
 80012f2:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80012f6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80012fa:	4413      	add	r3, r2
 80012fc:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    }

    uint8_t crc_output[2];
    calculateCrc16(raw_payload, raw_payload_len, crc_output);
 8001300:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 8001304:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8001308:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f9e3 	bl	80006d8 <calculateCrc16>
    raw_payload[raw_payload_len++] = crc_output[0];
 8001312:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 800131c:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001320:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001324:	7811      	ldrb	r1, [r2, #0]
 8001326:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 800132a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800132e:	54d1      	strb	r1, [r2, r3]
    raw_payload[raw_payload_len++] = crc_output[1];
 8001330:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 800133a:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 800133e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001342:	7851      	ldrb	r1, [r2, #1]
 8001344:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001348:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800134c:	54d1      	strb	r1, [r2, r3]

    uint8_t stuffed_payload[MAX_FRAME_LEN];
    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 800134e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001352:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8001356:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fcc2 	bl	8000ce4 <byteStuffing>
 8001360:	f8c7 03c4 	str.w	r0, [r7, #964]	@ 0x3c4

    uint8_t final_frame[MAX_FRAME_LEN + 2];
    size_t final_len = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    final_frame[final_len++] = FRAME_START;
 800136a:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001374:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001378:	f5a2 7272 	sub.w	r2, r2, #968	@ 0x3c8
 800137c:	217e      	movs	r1, #126	@ 0x7e
 800137e:	54d1      	strb	r1, [r2, r3]
    memcpy(final_frame + final_len, stuffed_payload, stuffed_len);
 8001380:	f107 0208 	add.w	r2, r7, #8
 8001384:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001388:	4413      	add	r3, r2
 800138a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800138e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fe8c 	bl	80080b0 <memcpy>
    final_len += stuffed_len;
 8001398:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 800139c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80013a0:	4413      	add	r3, r2
 80013a2:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
    final_frame[final_len++] = FRAME_END;
 80013a6:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 80013b0:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80013b4:	f5a2 7272 	sub.w	r2, r2, #968	@ 0x3c8
 80013b8:	2160      	movs	r1, #96	@ 0x60
 80013ba:	54d1      	strb	r1, [r2, r3]

    USART_sendFrame(final_frame, final_len);
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	f8d7 13c0 	ldr.w	r1, [r7, #960]	@ 0x3c0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f927 	bl	8000618 <USART_sendFrame>
}
 80013ca:	bf00      	nop
 80013cc:	f507 7775 	add.w	r7, r7, #980	@ 0x3d4
 80013d0:	46bd      	mov	sp, r7
 80013d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d6:	b001      	add	sp, #4
 80013d8:	4770      	bx	lr
	...

080013dc <processReceivedChar>:

void processReceivedChar(uint8_t receivedChar) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
    if (receivedChar == FRAME_START) {
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80013ea:	d105      	bne.n	80013f8 <processReceivedChar+0x1c>
    	resetFrameState();
 80013ec:	f7ff f9d0 	bl	8000790 <resetFrameState>
    	inFrame = true;
 80013f0:	4b3c      	ldr	r3, [pc, #240]	@ (80014e4 <processReceivedChar+0x108>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e072      	b.n	80014de <processReceivedChar+0x102>
    } else if (receivedChar == FRAME_END && escapeDetected == false) {
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b60      	cmp	r3, #96	@ 0x60
 80013fc:	d124      	bne.n	8001448 <processReceivedChar+0x6c>
 80013fe:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <processReceivedChar+0x10c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01d      	beq.n	8001448 <processReceivedChar+0x6c>
        if (inFrame) {
 800140c:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <processReceivedChar+0x108>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d064      	beq.n	80014de <processReceivedChar+0x102>
        	if (decodeFrame(bx, &frame, bxIndex)) {
 8001414:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <processReceivedChar+0x110>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4934      	ldr	r1, [pc, #208]	@ (80014f0 <processReceivedChar+0x114>)
 800141e:	4835      	ldr	r0, [pc, #212]	@ (80014f4 <processReceivedChar+0x118>)
 8001420:	f7ff fbf9 	bl	8000c16 <decodeFrame>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <processReceivedChar+0x60>
            	stopAnimation();
 800142a:	f7ff f9c7 	bl	80007bc <stopAnimation>
            	sendStatus(ERR_GOOD);
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff faa2 	bl	8000978 <sendStatus>
                handleCommand(&frame);
 8001434:	482e      	ldr	r0, [pc, #184]	@ (80014f0 <processReceivedChar+0x114>)
 8001436:	f000 f85f 	bl	80014f8 <handleCommand>
 800143a:	e002      	b.n	8001442 <processReceivedChar+0x66>
            } else {
            	sendStatus(ERR_FAIL);
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fa9b 	bl	8000978 <sendStatus>
            }
        	resetFrameState();
 8001442:	f7ff f9a5 	bl	8000790 <resetFrameState>
        	return;
 8001446:	e04a      	b.n	80014de <processReceivedChar+0x102>
        }
    } else if (inFrame) {
 8001448:	4b26      	ldr	r3, [pc, #152]	@ (80014e4 <processReceivedChar+0x108>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d046      	beq.n	80014de <processReceivedChar+0x102>
    	if(bxIndex <= MAX_FRAME_WITHOUT_STUFFING){
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <processReceivedChar+0x110>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b87      	cmp	r3, #135	@ 0x87
 8001456:	dc40      	bgt.n	80014da <processReceivedChar+0xfe>
        if (escapeDetected) {
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <processReceivedChar+0x10c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d02c      	beq.n	80014ba <processReceivedChar+0xde>
            if (receivedChar == FRAME_START_STUFF) {
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b5e      	cmp	r3, #94	@ 0x5e
 8001464:	d108      	bne.n	8001478 <processReceivedChar+0x9c>
                bx[bxIndex++] = FRAME_START;
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <processReceivedChar+0x110>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	491f      	ldr	r1, [pc, #124]	@ (80014ec <processReceivedChar+0x110>)
 800146e:	600a      	str	r2, [r1, #0]
 8001470:	4a20      	ldr	r2, [pc, #128]	@ (80014f4 <processReceivedChar+0x118>)
 8001472:	217e      	movs	r1, #126	@ 0x7e
 8001474:	54d1      	strb	r1, [r2, r3]
 8001476:	e01c      	b.n	80014b2 <processReceivedChar+0xd6>
            } else if (receivedChar == ESCAPE_CHAR_STUFF) {
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b5d      	cmp	r3, #93	@ 0x5d
 800147c:	d108      	bne.n	8001490 <processReceivedChar+0xb4>
                bx[bxIndex++] = ESCAPE_CHAR;
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <processReceivedChar+0x110>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	4919      	ldr	r1, [pc, #100]	@ (80014ec <processReceivedChar+0x110>)
 8001486:	600a      	str	r2, [r1, #0]
 8001488:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <processReceivedChar+0x118>)
 800148a:	217d      	movs	r1, #125	@ 0x7d
 800148c:	54d1      	strb	r1, [r2, r3]
 800148e:	e010      	b.n	80014b2 <processReceivedChar+0xd6>
            } else if (receivedChar == FRAME_END_STUFF) {
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b26      	cmp	r3, #38	@ 0x26
 8001494:	d108      	bne.n	80014a8 <processReceivedChar+0xcc>
                bx[bxIndex++] = FRAME_END;
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <processReceivedChar+0x110>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	4913      	ldr	r1, [pc, #76]	@ (80014ec <processReceivedChar+0x110>)
 800149e:	600a      	str	r2, [r1, #0]
 80014a0:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <processReceivedChar+0x118>)
 80014a2:	2160      	movs	r1, #96	@ 0x60
 80014a4:	54d1      	strb	r1, [r2, r3]
 80014a6:	e004      	b.n	80014b2 <processReceivedChar+0xd6>
            } else {
            	sendStatus(ERR_FAIL);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fa65 	bl	8000978 <sendStatus>
                resetFrameState();
 80014ae:	f7ff f96f 	bl	8000790 <resetFrameState>
            }
            escapeDetected = false;
 80014b2:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <processReceivedChar+0x10c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e011      	b.n	80014de <processReceivedChar+0x102>
        } else if (receivedChar == ESCAPE_CHAR) {
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b7d      	cmp	r3, #125	@ 0x7d
 80014be:	d103      	bne.n	80014c8 <processReceivedChar+0xec>
        	escapeDetected = true;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <processReceivedChar+0x10c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	e00a      	b.n	80014de <processReceivedChar+0x102>
        } else {
        	bx[bxIndex++] = receivedChar;
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <processReceivedChar+0x110>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	4907      	ldr	r1, [pc, #28]	@ (80014ec <processReceivedChar+0x110>)
 80014d0:	600a      	str	r2, [r1, #0]
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <processReceivedChar+0x118>)
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	54ca      	strb	r2, [r1, r3]
 80014d8:	e001      	b.n	80014de <processReceivedChar+0x102>
        }
    } else {
    	resetFrameState();
 80014da:	f7ff f959 	bl	8000790 <resetFrameState>
    }
    }
}
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000c28 	.word	0x20000c28
 80014e8:	20000c22 	.word	0x20000c22
 80014ec:	20000c24 	.word	0x20000c24
 80014f0:	20000c2c 	.word	0x20000c2c
 80014f4:	20000b14 	.word	0x20000b14

080014f8 <handleCommand>:

void handleCommand(Frame *frame) {
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b090      	sub	sp, #64	@ 0x40
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d076      	beq.n	80015f4 <handleCommand+0xfc>
        return;
    }
    CommandEntry commandTable[COMMAND_COUNT] = {
 8001506:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <handleCommand+0x104>)
 8001508:	f107 0414 	add.w	r4, r7, #20
 800150c:	461d      	mov	r5, r3
 800150e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001516:	e895 0003 	ldmia.w	r5, {r0, r1}
 800151a:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONP", executeONP},
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2102      	movs	r1, #2
 8001522:	4837      	ldr	r0, [pc, #220]	@ (8001600 <handleCommand+0x108>)
 8001524:	f001 fca4 	bl	8002e70 <HAL_GPIO_WritePin>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800152c:	e05e      	b.n	80015ec <handleCommand+0xf4>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1c98      	adds	r0, r3, #2
 8001532:	f107 0214 	add.w	r2, r7, #20
 8001536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	2203      	movs	r2, #3
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff f967 	bl	8000812 <safeCompare>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d04d      	beq.n	80015e6 <handleCommand+0xee>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 800154a:	f107 0214 	add.w	r2, r7, #20
 800154e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	2203      	movs	r2, #3
 8001556:	492b      	ldr	r1, [pc, #172]	@ (8001604 <handleCommand+0x10c>)
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f95a 	bl	8000812 <safeCompare>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00f      	beq.n	8001584 <handleCommand+0x8c>
                    lcdClear();
 8001564:	f000 faa6 	bl	8001ab4 <lcdClear>
                    commandTable[i].function(frame);
 8001568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	3340      	adds	r3, #64	@ 0x40
 800156e:	443b      	add	r3, r7
 8001570:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
                    lcdCopy();
 8001578:	f000 fa70 	bl	8001a5c <lcdCopy>
                    clearFrame(frame);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fa19 	bl	80009b4 <clearFrame>
                    return;
 8001582:	e038      	b.n	80015f6 <handleCommand+0xfe>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3305      	adds	r3, #5
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	f107 0110 	add.w	r1, r7, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fa28 	bl	80009e6 <parseCoordinates>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01c      	beq.n	80015d6 <handleCommand+0xde>
                    if (isWithinBounds(x, y)) {
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f918 	bl	80007d8 <isWithinBounds>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00f      	beq.n	80015ce <handleCommand+0xd6>
                        lcdClear();
 80015ae:	f000 fa81 	bl	8001ab4 <lcdClear>
                        commandTable[i].function(frame);
 80015b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	3340      	adds	r3, #64	@ 0x40
 80015b8:	443b      	add	r3, r7
 80015ba:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
                        lcdCopy();
 80015c2:	f000 fa4b 	bl	8001a5c <lcdCopy>
                        clearFrame(frame);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff f9f4 	bl	80009b4 <clearFrame>
                        return;
 80015cc:	e013      	b.n	80015f6 <handleCommand+0xfe>
                    } else {
                    sendStatus(ERR_DISPLAY_AREA);
 80015ce:	2004      	movs	r0, #4
 80015d0:	f7ff f9d2 	bl	8000978 <sendStatus>
                    return;
 80015d4:	e00f      	b.n	80015f6 <handleCommand+0xfe>
                }
            } else {
            	lcdClear();
 80015d6:	f000 fa6d 	bl	8001ab4 <lcdClear>
            	lcdCopy();
 80015da:	f000 fa3f 	bl	8001a5c <lcdCopy>
            	sendStatus(ERR_NOT_RECOGNIZED);
 80015de:	2009      	movs	r0, #9
 80015e0:	f7ff f9ca 	bl	8000978 <sendStatus>
            	return;
 80015e4:	e007      	b.n	80015f6 <handleCommand+0xfe>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 80015e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e8:	3301      	adds	r3, #1
 80015ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	dd9d      	ble.n	800152e <handleCommand+0x36>
 80015f2:	e000      	b.n	80015f6 <handleCommand+0xfe>
        return;
 80015f4:	bf00      	nop
            }
        }
    }
}
 80015f6:	3740      	adds	r7, #64	@ 0x40
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	08008a58 	.word	0x08008a58
 8001600:	48000400 	.word	0x48000400
 8001604:	08008a54 	.word	0x08008a54

08001608 <updateScrollingText>:

void updateScrollingText(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af02      	add	r7, sp, #8
    if (!text.isScrolling || text.scrollSpeed == 0) {
 800160e:	4b5d      	ldr	r3, [pc, #372]	@ (8001784 <updateScrollingText+0x17c>)
 8001610:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 80ae 	bne.w	800177c <updateScrollingText+0x174>
 8001620:	4b58      	ldr	r3, [pc, #352]	@ (8001784 <updateScrollingText+0x17c>)
 8001622:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80a8 	beq.w	800177c <updateScrollingText+0x174>
        return;
    }

    uint32_t currentTime = HAL_GetTick();
 800162c:	f000 fee2 	bl	80023f4 <HAL_GetTick>
 8001630:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 8001632:	4b54      	ldr	r3, [pc, #336]	@ (8001784 <updateScrollingText+0x17c>)
 8001634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a51      	ldr	r2, [pc, #324]	@ (8001784 <updateScrollingText+0x17c>)
 800163e:	f892 20d1 	ldrb.w	r2, [r2, #209]	@ 0xd1
 8001642:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8001646:	4293      	cmp	r3, r2
 8001648:	f0c0 8099 	bcc.w	800177e <updateScrollingText+0x176>
        text.lastUpdate = currentTime;
 800164c:	4a4d      	ldr	r2, [pc, #308]	@ (8001784 <updateScrollingText+0x17c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 8001654:	4b4b      	ldr	r3, [pc, #300]	@ (8001784 <updateScrollingText+0x17c>)
 8001656:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800165a:	2b03      	cmp	r3, #3
 800165c:	d014      	beq.n	8001688 <updateScrollingText+0x80>
 800165e:	2b03      	cmp	r3, #3
 8001660:	dc19      	bgt.n	8001696 <updateScrollingText+0x8e>
 8001662:	2b01      	cmp	r3, #1
 8001664:	d002      	beq.n	800166c <updateScrollingText+0x64>
 8001666:	2b02      	cmp	r3, #2
 8001668:	d007      	beq.n	800167a <updateScrollingText+0x72>
 800166a:	e014      	b.n	8001696 <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 800166c:	2305      	movs	r3, #5
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	2307      	movs	r3, #7
 8001672:	73bb      	strb	r3, [r7, #14]
 8001674:	4b44      	ldr	r3, [pc, #272]	@ (8001788 <updateScrollingText+0x180>)
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	e014      	b.n	80016a4 <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 800167a:	2305      	movs	r3, #5
 800167c:	73fb      	strb	r3, [r7, #15]
 800167e:	2308      	movs	r3, #8
 8001680:	73bb      	strb	r3, [r7, #14]
 8001682:	4b42      	ldr	r3, [pc, #264]	@ (800178c <updateScrollingText+0x184>)
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	e00d      	b.n	80016a4 <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9; break;
 8001688:	2306      	movs	r3, #6
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	2309      	movs	r3, #9
 800168e:	73bb      	strb	r3, [r7, #14]
 8001690:	4b3f      	ldr	r3, [pc, #252]	@ (8001790 <updateScrollingText+0x188>)
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e006      	b.n	80016a4 <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 8001696:	2305      	movs	r3, #5
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	2307      	movs	r3, #7
 800169c:	73bb      	strb	r3, [r7, #14]
 800169e:	4b3a      	ldr	r3, [pc, #232]	@ (8001788 <updateScrollingText+0x180>)
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	bf00      	nop
        }

        // Oblicz całkowitą szerokość tekstu
        int16_t textWidth = text.textLength * charWidth;
 80016a4:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <updateScrollingText+0x17c>)
 80016a6:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80016aa:	461a      	mov	r2, r3
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	fb12 f303 	smulbb	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	807b      	strh	r3, [r7, #2]

        // Przewijanie od lewej do prawej
        if (!text.firstIteration) {
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <updateScrollingText+0x17c>)
 80016ba:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 80016be:	f083 0301 	eor.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d034      	beq.n	8001732 <updateScrollingText+0x12a>
            text.x+=text.textLength;  // Przesuwamy w prawo
 80016c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <updateScrollingText+0x17c>)
 80016ca:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001784 <updateScrollingText+0x17c>)
 80016d2:	f892 20d4 	ldrb.w	r2, [r2, #212]	@ 0xd4
 80016d6:	4413      	add	r3, r2
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b21a      	sxth	r2, r3
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <updateScrollingText+0x17c>)
 80016de:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8

            // Jeśli tekst całkowicie wyszedł z prawej strony
            if (text.x > LCD_WIDTH) {
 80016e2:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <updateScrollingText+0x17c>)
 80016e4:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 80016e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80016ea:	dd33      	ble.n	8001754 <updateScrollingText+0x14c>
                text.x = -textWidth; // Wróć na lewą stronę
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	425b      	negs	r3, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <updateScrollingText+0x17c>)
 80016f6:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
                text.y += charHeight; // Przejdź do następnej linii
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <updateScrollingText+0x17c>)
 80016fc:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8001700:	b29a      	uxth	r2, r3
 8001702:	7bbb      	ldrb	r3, [r7, #14]
 8001704:	b29b      	uxth	r3, r3
 8001706:	4413      	add	r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	b21a      	sxth	r2, r3
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <updateScrollingText+0x17c>)
 800170e:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca

                // Jeśli doszliśmy do dołu ekranu
                if (text.y >= LCD_HEIGHT - charHeight) {
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <updateScrollingText+0x17c>)
 8001714:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 8001718:	461a      	mov	r2, r3
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001720:	429a      	cmp	r2, r3
 8001722:	db17      	blt.n	8001754 <updateScrollingText+0x14c>
                    text.y = text.startY; // Wróć na początkową wysokość
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <updateScrollingText+0x17c>)
 8001726:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <updateScrollingText+0x17c>)
 800172c:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
 8001730:	e010      	b.n	8001754 <updateScrollingText+0x14c>
                }
            }
        } else {
            // Pierwsza iteracja - start z lewej strony
            text.x = -textWidth;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	425b      	negs	r3, r3
 8001736:	b29b      	uxth	r3, r3
 8001738:	b21a      	sxth	r2, r3
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <updateScrollingText+0x17c>)
 800173c:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
            text.y = text.startY;
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <updateScrollingText+0x17c>)
 8001742:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 8001746:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <updateScrollingText+0x17c>)
 8001748:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
            text.firstIteration = false;
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <updateScrollingText+0x17c>)
 800174e:	2200      	movs	r2, #0
 8001750:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
        }
            lcdClear();
 8001754:	f000 f9ae 	bl	8001ab4 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <updateScrollingText+0x17c>)
 800175a:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <updateScrollingText+0x17c>)
 8001760:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <updateScrollingText+0x17c>)
 8001766:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4603      	mov	r3, r0
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <updateScrollingText+0x17c>)
 8001772:	f005 ffb6 	bl	80076e2 <hagl_put_text>
            lcdCopy();
 8001776:	f000 f971 	bl	8001a5c <lcdCopy>
 800177a:	e000      	b.n	800177e <updateScrollingText+0x176>
        return;
 800177c:	bf00      	nop
    }
}
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000cb4 	.word	0x20000cb4
 8001788:	08008ae8 	.word	0x08008ae8
 800178c:	0800bff0 	.word	0x0800bff0
 8001790:	0800ee94 	.word	0x0800ee94

08001794 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a49      	ldr	r2, [pc, #292]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a43      	ldr	r2, [pc, #268]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a3d      	ldr	r2, [pc, #244]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <MX_GPIO_Init+0x140>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fe:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <MX_GPIO_Init+0x140>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800180a:	4b32      	ldr	r3, [pc, #200]	@ (80018d4 <MX_GPIO_Init+0x140>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4a31      	ldr	r2, [pc, #196]	@ (80018d4 <MX_GPIO_Init+0x140>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001816:	4b2f      	ldr	r3, [pc, #188]	@ (80018d4 <MX_GPIO_Init+0x140>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001828:	482b      	ldr	r0, [pc, #172]	@ (80018d8 <MX_GPIO_Init+0x144>)
 800182a:	f001 fb21 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800182e:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8001832:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001834:	2303      	movs	r3, #3
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4826      	ldr	r0, [pc, #152]	@ (80018dc <MX_GPIO_Init+0x148>)
 8001844:	f001 f96a 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001848:	2303      	movs	r3, #3
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	2303      	movs	r3, #3
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4821      	ldr	r0, [pc, #132]	@ (80018e0 <MX_GPIO_Init+0x14c>)
 800185c:	f001 f95e 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001860:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001864:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001866:	2303      	movs	r3, #3
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001878:	f001 f950 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800187c:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001880:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001882:	2303      	movs	r3, #3
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4811      	ldr	r0, [pc, #68]	@ (80018d8 <MX_GPIO_Init+0x144>)
 8001892:	f001 f943 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001896:	f641 0306 	movw	r3, #6150	@ 0x1806
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	480a      	ldr	r0, [pc, #40]	@ (80018d8 <MX_GPIO_Init+0x144>)
 80018b0:	f001 f934 	bl	8002b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b8:	2303      	movs	r3, #3
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <MX_GPIO_Init+0x150>)
 80018c8:	f001 f928 	bl	8002b1c <HAL_GPIO_Init>

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	@ 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000800 	.word	0x48000800
 80018e0:	48001c00 	.word	0x48001c00
 80018e4:	48000c00 	.word	0x48000c00

080018e8 <lcdCmd>:
//========================================================================


//================================STATIC===================================
static void lcdCmd(uint8_t cmd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <lcdCmd+0x44>)
 80018fa:	f001 fab9 	bl	8002e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <lcdCmd+0x44>)
 8001906:	f001 fab3 	bl	8002e70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800190a:	1df9      	adds	r1, r7, #7
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2201      	movs	r2, #1
 8001912:	4807      	ldr	r0, [pc, #28]	@ (8001930 <lcdCmd+0x48>)
 8001914:	f002 fe87 	bl	8004626 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800191e:	4803      	ldr	r0, [pc, #12]	@ (800192c <lcdCmd+0x44>)
 8001920:	f001 faa6 	bl	8002e70 <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	48000400 	.word	0x48000400
 8001930:	2000ad98 	.word	0x2000ad98

08001934 <lcdData>:

static void lcdData(uint8_t data)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <lcdData+0x44>)
 8001946:	f001 fa93 	bl	8002e70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001950:	4809      	ldr	r0, [pc, #36]	@ (8001978 <lcdData+0x44>)
 8001952:	f001 fa8d 	bl	8002e70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001956:	1df9      	adds	r1, r7, #7
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	2201      	movs	r2, #1
 800195e:	4807      	ldr	r0, [pc, #28]	@ (800197c <lcdData+0x48>)
 8001960:	f002 fe61 	bl	8004626 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196a:	4803      	ldr	r0, [pc, #12]	@ (8001978 <lcdData+0x44>)
 800196c:	f001 fa80 	bl	8002e70 <HAL_GPIO_WritePin>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	48000400 	.word	0x48000400
 800197c:	2000ad98 	.word	0x2000ad98

08001980 <lcdSend>:

static void lcdSend(uint16_t value)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <lcdSend+0x20>
		lcdCmd(value);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ffa5 	bl	80018e8 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 800199e:	e004      	b.n	80019aa <lcdSend+0x2a>
		lcdData(value);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ffc5 	bl	8001934 <lcdData>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <lcdData16>:

static void lcdData16(uint16_t value)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffb5 	bl	8001934 <lcdData>
	lcdData(value);
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ffb0 	bl	8001934 <lcdData>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <lcdSetWindow>:

static void lcdSetWindow(int x, int y, int width, int height)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 80019ea:	202a      	movs	r0, #42	@ 0x2a
 80019ec:	f7ff ff7c 	bl	80018e8 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ffda 	bl	80019b2 <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ffd1 	bl	80019b2 <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001a10:	202b      	movs	r0, #43	@ 0x2b
 8001a12:	f7ff ff69 	bl	80018e8 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ffc7 	bl	80019b2 <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ffbc 	bl	80019b2 <lcdData16>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <lcdIsBusy>:
static bool lcdIsBusy(void) {
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <lcdIsBusy+0x14>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	2000ad90 	.word	0x2000ad90

08001a5c <lcdCopy>:
//=======================================================================

void lcdCopy(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) return;
 8001a60:	f7ff fff0 	bl	8001a44 <lcdIsBusy>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11b      	bne.n	8001aa2 <lcdCopy+0x46>
    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	22a0      	movs	r2, #160	@ 0xa0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ffb3 	bl	80019dc <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001a76:	202c      	movs	r0, #44	@ 0x2c
 8001a78:	f7ff ff36 	bl	80018e8 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a82:	4809      	ldr	r0, [pc, #36]	@ (8001aa8 <lcdCopy+0x4c>)
 8001a84:	f001 f9f4 	bl	8002e70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <lcdCopy+0x4c>)
 8001a90:	f001 f9ee 	bl	8002e70 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001a94:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a98:	4904      	ldr	r1, [pc, #16]	@ (8001aac <lcdCopy+0x50>)
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <lcdCopy+0x54>)
 8001a9c:	f002 ff3a 	bl	8004914 <HAL_SPI_Transmit_DMA>
 8001aa0:	e000      	b.n	8001aa4 <lcdCopy+0x48>
    if (lcdIsBusy()) return;
 8001aa2:	bf00      	nop
}
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	20000d90 	.word	0x20000d90
 8001ab0:	2000ad98 	.word	0x2000ad98

08001ab4 <lcdClear>:

void lcdClear(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001ab8:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001abc:	2100      	movs	r1, #0
 8001abe:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <lcdClear+0x14>)
 8001ac0:	f006 faae 	bl	8008020 <memset>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000d90 	.word	0x20000d90

08001acc <lcdInit>:

void lcdInit(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	481c      	ldr	r0, [pc, #112]	@ (8001b48 <lcdInit+0x7c>)
 8001ad8:	f001 f9ca 	bl	8002e70 <HAL_GPIO_WritePin>
    delay(100);
 8001adc:	2064      	movs	r0, #100	@ 0x64
 8001ade:	f000 f8d1 	bl	8001c84 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	4818      	ldr	r0, [pc, #96]	@ (8001b48 <lcdInit+0x7c>)
 8001ae8:	f001 f9c2 	bl	8002e70 <HAL_GPIO_WritePin>
    delay(100);
 8001aec:	2064      	movs	r0, #100	@ 0x64
 8001aee:	f000 f8c9 	bl	8001c84 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	e009      	b.n	8001b0c <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001af8:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <lcdInit+0x80>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff3d 	bl	8001980 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b4b      	cmp	r3, #75	@ 0x4b
 8001b10:	d9f2      	bls.n	8001af8 <lcdInit+0x2c>
    }
    delay(200);
 8001b12:	20c8      	movs	r0, #200	@ 0xc8
 8001b14:	f000 f8b6 	bl	8001c84 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001b18:	2011      	movs	r0, #17
 8001b1a:	f7ff fee5 	bl	80018e8 <lcdCmd>
    delay(120);
 8001b1e:	2078      	movs	r0, #120	@ 0x78
 8001b20:	f000 f8b0 	bl	8001c84 <delay>
    lcdCmd(ST7735S_DISPON);
 8001b24:	2029      	movs	r0, #41	@ 0x29
 8001b26:	f7ff fedf 	bl	80018e8 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <lcdInit+0x7c>)
 8001b30:	f001 f99e 	bl	8002e70 <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001b34:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <lcdInit+0x84>)
 8001b3c:	f006 fa70 	bl	8008020 <memset>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	08011e4c 	.word	0x08011e4c
 8001b50:	20000d90 	.word	0x20000d90

08001b54 <lcdPutPixel>:

void lcdPutPixel(int x, int y, uint16_t color)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	015b      	lsls	r3, r3, #5
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	4905      	ldr	r1, [pc, #20]	@ (8001b88 <lcdPutPixel+0x34>)
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000d90 	.word	0x20000d90

08001b8c <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <HAL_SPI_TxCpltCallback+0x2c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ba2:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <HAL_SPI_TxCpltCallback+0x30>)
 8001ba4:	f001 f964 	bl	8002e70 <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_SPI_TxCpltCallback+0x34>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
    }
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000ad98 	.word	0x2000ad98
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	2000ad90 	.word	0x2000ad90

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ffc2 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <waitForFrame>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void waitForFrame(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001c62:	f7fe fc9d 	bl	80005a0 <USART_kbhit>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <waitForFrame+0x20>
	        uint8_t receivedChar = USART_getchar();
 8001c6c:	f7fe fcaa 	bl	80005c4 <USART_getchar>
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(receivedChar);
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fbb0 	bl	80013dc <processReceivedChar>
	 }
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <delay>:
void delay(uint32_t delayMs){
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <delay+0x2c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001c92:	bf00      	nop
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	441a      	add	r2, r3
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <delay+0x2c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d8f8      	bhi.n	8001c94 <delay+0x10>
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	2000ad94 	.word	0x2000ad94

08001cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb8:	f000 fb33 	bl	8002322 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cbc:	f000 f810 	bl	8001ce0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001cc0:	4806      	ldr	r0, [pc, #24]	@ (8001cdc <main+0x28>)
 8001cc2:	f7ff ffa9 	bl	8001c18 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc6:	f7ff fd65 	bl	8001794 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cca:	f7fe fd43 	bl	8000754 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001cce:	f000 fa53 	bl	8002178 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001cd2:	f000 f85d 	bl	8001d90 <MX_SPI2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  waitForFrame();
 8001cd6:	f7ff ffc1 	bl	8001c5c <waitForFrame>
 8001cda:	e7fc      	b.n	8001cd6 <main+0x22>
 8001cdc:	00013880 	.word	0x00013880

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b096      	sub	sp, #88	@ 0x58
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	2244      	movs	r2, #68	@ 0x44
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 f996 	bl	8008020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d06:	f001 f8d9 	bl	8002ebc <HAL_PWREx_ControlVoltageScaling>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d10:	f000 f838 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d14:	2310      	movs	r3, #16
 8001d16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d20:	2360      	movs	r3, #96	@ 0x60
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d24:	2302      	movs	r3, #2
 8001d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d30:	2328      	movs	r3, #40	@ 0x28
 8001d32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d34:	2307      	movs	r3, #7
 8001d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 f90f 	bl	8002f68 <HAL_RCC_OscConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001d50:	f000 f818 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d54:	230f      	movs	r3, #15
 8001d56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 fcd7 	bl	8003720 <HAL_RCC_ClockConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d78:	f000 f804 	bl	8001d84 <Error_Handler>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3758      	adds	r7, #88	@ 0x58
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <Error_Handler+0x8>

08001d90 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001d96:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <MX_SPI2_Init+0x7c>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001d9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001da0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da8:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001daa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001dde:	2207      	movs	r2, #7
 8001de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001dee:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <MX_SPI2_Init+0x78>)
 8001df0:	f002 fb76 	bl	80044e0 <HAL_SPI_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001dfa:	f7ff ffc3 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  lcdInit();
 8001dfe:	f7ff fe65 	bl	8001acc <lcdInit>
  /* USER CODE END SPI2_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000ad98 	.word	0x2000ad98
 8001e0c:	40003800 	.word	0x40003800

08001e10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f28 <HAL_SPI_MspInit+0x118>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d175      	bne.n	8001f1e <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e32:	4b3e      	ldr	r3, [pc, #248]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	4a3d      	ldr	r2, [pc, #244]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b38      	ldr	r3, [pc, #224]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	4a37      	ldr	r2, [pc, #220]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e56:	4b35      	ldr	r3, [pc, #212]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	4a31      	ldr	r2, [pc, #196]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <HAL_SPI_MspInit+0x11c>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4826      	ldr	r0, [pc, #152]	@ (8001f30 <HAL_SPI_MspInit+0x120>)
 8001e96:	f000 fe41 	bl	8002b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eac:	2305      	movs	r3, #5
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481f      	ldr	r0, [pc, #124]	@ (8001f34 <HAL_SPI_MspInit+0x124>)
 8001eb8:	f000 fe30 	bl	8002b1c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <HAL_SPI_MspInit+0x12c>)
 8001ec0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001eca:	2210      	movs	r2, #16
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ef2:	4811      	ldr	r0, [pc, #68]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001ef4:	f000 fb9c 	bl	8002630 <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001efe:	f7ff ff41 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001f06:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f08:	4a0b      	ldr	r2, [pc, #44]	@ (8001f38 <HAL_SPI_MspInit+0x128>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	2024      	movs	r0, #36	@ 0x24
 8001f14:	f000 fb55 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f18:	2024      	movs	r0, #36	@ 0x24
 8001f1a:	f000 fb6e 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40003800 	.word	0x40003800
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000400 	.word	0x48000400
 8001f38:	2000adfc 	.word	0x2000adfc
 8001f3c:	40020058 	.word	0x40020058

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_MspInit+0x44>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <HAL_MspInit+0x44>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_MspInit+0x44>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_MspInit+0x44>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <HAL_MspInit+0x44>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_MspInit+0x44>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <NMI_Handler+0x4>

08001f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <MemManage_Handler+0x4>

08001fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <UsageFault_Handler+0x4>

08001fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f9f4 	bl	80023cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <SysTick_Handler+0x1c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a03      	ldr	r2, [pc, #12]	@ (8001ff8 <SysTick_Handler+0x1c>)
 8001fec:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 8001fee:	f7ff fb0b 	bl	8001608 <updateScrollingText>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000ad94 	.word	0x2000ad94

08001ffc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <DMA1_Channel5_IRQHandler+0x10>)
 8002002:	f000 fcac 	bl	800295e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000adfc 	.word	0x2000adfc

08002010 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <SPI2_IRQHandler+0x10>)
 8002016:	f002 fd6b 	bl	8004af0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000ad98 	.word	0x2000ad98

08002024 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <USART2_IRQHandler+0x10>)
 800202a:	f003 f95b 	bl	80052e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000ae48 	.word	0x2000ae48

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f005 fff6 	bl	8008058 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20018000 	.word	0x20018000
 8002098:	00001000 	.word	0x00001000
 800209c:	2000ae44 	.word	0x2000ae44
 80020a0:	2000b020 	.word	0x2000b020

080020a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <HAL_UART_TxCpltCallback>:
extern ring_buffer txRingBuffer;
extern uint8_t USART_RxBuf[];
extern uint8_t USART_TxBuf[];


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_UART_TxCpltCallback+0x54>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d11d      	bne.n	8002114 <HAL_UART_TxCpltCallback+0x4c>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <HAL_UART_TxCpltCallback+0x58>)
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_UART_TxCpltCallback+0x58>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d017      	beq.n	8002114 <HAL_UART_TxCpltCallback+0x4c>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_UART_TxCpltCallback+0x58>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002124 <HAL_UART_TxCpltCallback+0x5c>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 80020ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <HAL_UART_TxCpltCallback+0x58>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <HAL_UART_TxCpltCallback+0x58>)
 80020f6:	68d2      	ldr	r2, [r2, #12]
 80020f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80020fc:	fb01 f202 	mul.w	r2, r1, r2
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <HAL_UART_TxCpltCallback+0x58>)
 8002104:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8002106:	f107 030f 	add.w	r3, r7, #15
 800210a:	2201      	movs	r2, #1
 800210c:	4619      	mov	r1, r3
 800210e:	4803      	ldr	r0, [pc, #12]	@ (800211c <HAL_UART_TxCpltCallback+0x54>)
 8002110:	f003 f83e 	bl	8005190 <HAL_UART_Transmit_IT>
	   }
   }
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	2000ae48 	.word	0x2000ae48
 8002120:	20000290 	.word	0x20000290
 8002124:	200002a0 	.word	0x200002a0

08002128 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0e      	ldr	r2, [pc, #56]	@ (800216c <HAL_UART_RxCpltCallback+0x44>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d114      	bne.n	8002162 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) % rxRingBuffer.mask;
 8002138:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_UART_RxCpltCallback+0x48>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	3301      	adds	r3, #1
 800213e:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <HAL_UART_RxCpltCallback+0x48>)
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	fbb3 f1f2 	udiv	r1, r3, r2
 8002146:	fb01 f202 	mul.w	r2, r1, r2
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_UART_RxCpltCallback+0x48>)
 800214e:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8002150:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <HAL_UART_RxCpltCallback+0x48>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_UART_RxCpltCallback+0x4c>)
 8002156:	4413      	add	r3, r2
 8002158:	2201      	movs	r2, #1
 800215a:	4619      	mov	r1, r3
 800215c:	4803      	ldr	r0, [pc, #12]	@ (800216c <HAL_UART_RxCpltCallback+0x44>)
 800215e:	f003 f875 	bl	800524c <HAL_UART_Receive_IT>

	 }
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000ae48 	.word	0x2000ae48
 8002170:	20000280 	.word	0x20000280
 8002174:	20000a04 	.word	0x20000a04

08002178 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800217c:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 800217e:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <MX_USART2_UART_Init+0x7c>)
 8002180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 8002184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002196:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ba:	480d      	ldr	r0, [pc, #52]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 80021bc:	f002 ff9a 	bl	80050f4 <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021c6:	f7ff fddd 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 80021ca:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80021ce:	490a      	ldr	r1, [pc, #40]	@ (80021f8 <MX_USART2_UART_Init+0x80>)
 80021d0:	480a      	ldr	r0, [pc, #40]	@ (80021fc <MX_USART2_UART_Init+0x84>)
 80021d2:	f7fe f9cd 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 80021d6:	f240 7262 	movw	r2, #1890	@ 0x762
 80021da:	4909      	ldr	r1, [pc, #36]	@ (8002200 <MX_USART2_UART_Init+0x88>)
 80021dc:	4809      	ldr	r0, [pc, #36]	@ (8002204 <MX_USART2_UART_Init+0x8c>)
 80021de:	f7fe f9c7 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 80021e2:	2201      	movs	r2, #1
 80021e4:	4904      	ldr	r1, [pc, #16]	@ (80021f8 <MX_USART2_UART_Init+0x80>)
 80021e6:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <MX_USART2_UART_Init+0x78>)
 80021e8:	f003 f830 	bl	800524c <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000ae48 	.word	0x2000ae48
 80021f4:	40004400 	.word	0x40004400
 80021f8:	20000a04 	.word	0x20000a04
 80021fc:	20000280 	.word	0x20000280
 8002200:	200002a0 	.word	0x200002a0
 8002204:	20000290 	.word	0x20000290

08002208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0ac      	sub	sp, #176	@ 0xb0
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2288      	movs	r2, #136	@ 0x88
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f005 fef9 	bl	8008020 <memset>
  if(uartHandle->Instance==USART2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a25      	ldr	r2, [pc, #148]	@ (80022c8 <HAL_UART_MspInit+0xc0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d143      	bne.n	80022c0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002238:	2302      	movs	r3, #2
 800223a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800223c:	2300      	movs	r3, #0
 800223e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fc8f 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002250:	f7ff fd98 	bl	8001d84 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002254:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HAL_UART_MspInit+0xc4>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <HAL_UART_MspInit+0xc4>)
 800225a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002260:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <HAL_UART_MspInit+0xc4>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226c:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <HAL_UART_MspInit+0xc4>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002270:	4a16      	ldr	r2, [pc, #88]	@ (80022cc <HAL_UART_MspInit+0xc4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002278:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <HAL_UART_MspInit+0xc4>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002284:	230c      	movs	r3, #12
 8002286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800229c:	2307      	movs	r3, #7
 800229e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ac:	f000 fc36 	bl	8002b1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2101      	movs	r1, #1
 80022b4:	2026      	movs	r0, #38	@ 0x26
 80022b6:	f000 f984 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022ba:	2026      	movs	r0, #38	@ 0x26
 80022bc:	f000 f99d 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022c0:	bf00      	nop
 80022c2:	37b0      	adds	r7, #176	@ 0xb0
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40004400 	.word	0x40004400
 80022cc:	40021000 	.word	0x40021000

080022d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002308 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff fee6 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	@ (800230c <LoopForever+0x6>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <LoopForever+0xe>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	@ (800231c <LoopForever+0x16>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f005 feb1 	bl	8008064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002302:	f7ff fcd7 	bl	8001cb4 <main>

08002306 <LoopForever>:

LoopForever:
    b LoopForever
 8002306:	e7fe      	b.n	8002306 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002308:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002314:	08011f70 	.word	0x08011f70
  ldr r2, =_sbss
 8002318:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 800231c:	2000b01c 	.word	0x2000b01c

08002320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_2_IRQHandler>

08002322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 f93d 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002332:	200f      	movs	r0, #15
 8002334:	f000 f80e 	bl	8002354 <HAL_InitTick>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	e001      	b.n	8002348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002344:	f7ff fdfc 	bl	8001f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002348:	79fb      	ldrb	r3, [r7, #7]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002360:	4b17      	ldr	r3, [pc, #92]	@ (80023c0 <HAL_InitTick+0x6c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002368:	4b16      	ldr	r3, [pc, #88]	@ (80023c4 <HAL_InitTick+0x70>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_InitTick+0x6c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002376:	fbb3 f3f1 	udiv	r3, r3, r1
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f949 	bl	8002616 <HAL_SYSTICK_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10f      	bne.n	80023aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d809      	bhi.n	80023a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f000 f913 	bl	80025c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239c:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <HAL_InitTick+0x74>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e007      	b.n	80023b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e004      	b.n	80023b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e001      	b.n	80023b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000208 	.word	0x20000208
 80023c4:	20000200 	.word	0x20000200
 80023c8:	20000204 	.word	0x20000204

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	@ (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000208 	.word	0x20000208
 80023f0:	2000aed0 	.word	0x2000aed0

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	2000aed0 	.word	0x2000aed0

0800240c <__NVIC_SetPriorityGrouping>:
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	@ (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	@ (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <SysTick_Config>:
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f7ff ff8e 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff29 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff3e 	bl	8002454 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff8e 	bl	8002500 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5d 	bl	80024ac <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff31 	bl	8002470 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa2 	bl	8002568 <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e098      	b.n	8002774 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4b4d      	ldr	r3, [pc, #308]	@ (8002780 <HAL_DMA_Init+0x150>)
 800264a:	429a      	cmp	r2, r3
 800264c:	d80f      	bhi.n	800266e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4b4b      	ldr	r3, [pc, #300]	@ (8002784 <HAL_DMA_Init+0x154>)
 8002656:	4413      	add	r3, r2
 8002658:	4a4b      	ldr	r2, [pc, #300]	@ (8002788 <HAL_DMA_Init+0x158>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	009a      	lsls	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a48      	ldr	r2, [pc, #288]	@ (800278c <HAL_DMA_Init+0x15c>)
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40
 800266c:	e00e      	b.n	800268c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b46      	ldr	r3, [pc, #280]	@ (8002790 <HAL_DMA_Init+0x160>)
 8002676:	4413      	add	r3, r2
 8002678:	4a43      	ldr	r2, [pc, #268]	@ (8002788 <HAL_DMA_Init+0x158>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	009a      	lsls	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a42      	ldr	r2, [pc, #264]	@ (8002794 <HAL_DMA_Init+0x164>)
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e6:	d039      	beq.n	800275c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	4a27      	ldr	r2, [pc, #156]	@ (800278c <HAL_DMA_Init+0x15c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d11a      	bne.n	8002728 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026f2:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <HAL_DMA_Init+0x168>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f003 031c 	and.w	r3, r3, #28
 80026fe:	210f      	movs	r1, #15
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	4924      	ldr	r1, [pc, #144]	@ (8002798 <HAL_DMA_Init+0x168>)
 8002708:	4013      	ands	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800270c:	4b22      	ldr	r3, [pc, #136]	@ (8002798 <HAL_DMA_Init+0x168>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002718:	f003 031c 	and.w	r3, r3, #28
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	491d      	ldr	r1, [pc, #116]	@ (8002798 <HAL_DMA_Init+0x168>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
 8002726:	e019      	b.n	800275c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002728:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <HAL_DMA_Init+0x16c>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	210f      	movs	r1, #15
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	4917      	ldr	r1, [pc, #92]	@ (800279c <HAL_DMA_Init+0x16c>)
 800273e:	4013      	ands	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002742:	4b16      	ldr	r3, [pc, #88]	@ (800279c <HAL_DMA_Init+0x16c>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f003 031c 	and.w	r3, r3, #28
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	4911      	ldr	r1, [pc, #68]	@ (800279c <HAL_DMA_Init+0x16c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40020407 	.word	0x40020407
 8002784:	bffdfff8 	.word	0xbffdfff8
 8002788:	cccccccd 	.word	0xcccccccd
 800278c:	40020000 	.word	0x40020000
 8002790:	bffdfbf8 	.word	0xbffdfbf8
 8002794:	40020400 	.word	0x40020400
 8002798:	400200a8 	.word	0x400200a8
 800279c:	400204a8 	.word	0x400204a8

080027a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Start_IT+0x20>
 80027bc:	2302      	movs	r3, #2
 80027be:	e04b      	b.n	8002858 <HAL_DMA_Start_IT+0xb8>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d13a      	bne.n	800284a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f95f 	bl	8002abc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 020e 	orr.w	r2, r2, #14
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	e00f      	b.n	8002838 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 020a 	orr.w	r2, r2, #10
 8002836:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e005      	b.n	8002856 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002852:	2302      	movs	r3, #2
 8002854:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002856:	7dfb      	ldrb	r3, [r7, #23]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e022      	b.n	80028d0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 020e 	bic.w	r2, r2, #14
 8002898:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f003 021c 	and.w	r2, r3, #28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d005      	beq.n	8002900 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2204      	movs	r2, #4
 80028f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e029      	b.n	8002954 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 020e 	bic.w	r2, r2, #14
 800290e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002924:	f003 021c 	and.w	r2, r3, #28
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
    }
  }
  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	f003 031c 	and.w	r3, r3, #28
 800297e:	2204      	movs	r2, #4
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d026      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x7a>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d021      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0204 	bic.w	r2, r2, #4
 80029b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f003 021c 	and.w	r2, r3, #28
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2104      	movs	r1, #4
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d071      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029d6:	e06c      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	f003 031c 	and.w	r3, r3, #28
 80029e0:	2202      	movs	r2, #2
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02e      	beq.n	8002a4a <HAL_DMA_IRQHandler+0xec>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d029      	beq.n	8002a4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 020a 	bic.w	r2, r2, #10
 8002a12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a20:	f003 021c 	and.w	r2, r3, #28
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	2102      	movs	r1, #2
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d038      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a48:	e033      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	f003 031c 	and.w	r3, r3, #28
 8002a52:	2208      	movs	r2, #8
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x156>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d025      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 020e 	bic.w	r2, r2, #14
 8002a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f003 021c 	and.w	r2, r3, #28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ab2:	bf00      	nop
 8002ab4:	bf00      	nop
}
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f003 021c 	and.w	r2, r3, #28
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d108      	bne.n	8002b00 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002afe:	e007      	b.n	8002b10 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2a:	e17f      	b.n	8002e2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8171 	beq.w	8002e26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d005      	beq.n	8002b5c <HAL_GPIO_Init+0x40>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d130      	bne.n	8002bbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b92:	2201      	movs	r2, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 0201 	and.w	r2, r3, #1
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d118      	bne.n	8002bfc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	f003 0201 	and.w	r2, r3, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d017      	beq.n	8002c38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d123      	bne.n	8002c8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	6939      	ldr	r1, [r7, #16]
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80ac 	beq.w	8002e26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	4b5f      	ldr	r3, [pc, #380]	@ (8002e4c <HAL_GPIO_Init+0x330>)
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e4c <HAL_GPIO_Init+0x330>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cda:	4b5c      	ldr	r3, [pc, #368]	@ (8002e4c <HAL_GPIO_Init+0x330>)
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e50 <HAL_GPIO_Init+0x334>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d10:	d025      	beq.n	8002d5e <HAL_GPIO_Init+0x242>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4f      	ldr	r2, [pc, #316]	@ (8002e54 <HAL_GPIO_Init+0x338>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01f      	beq.n	8002d5a <HAL_GPIO_Init+0x23e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e58 <HAL_GPIO_Init+0x33c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d019      	beq.n	8002d56 <HAL_GPIO_Init+0x23a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4d      	ldr	r2, [pc, #308]	@ (8002e5c <HAL_GPIO_Init+0x340>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0x236>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002e60 <HAL_GPIO_Init+0x344>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00d      	beq.n	8002d4e <HAL_GPIO_Init+0x232>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4b      	ldr	r2, [pc, #300]	@ (8002e64 <HAL_GPIO_Init+0x348>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d007      	beq.n	8002d4a <HAL_GPIO_Init+0x22e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e68 <HAL_GPIO_Init+0x34c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_GPIO_Init+0x22a>
 8002d42:	2306      	movs	r3, #6
 8002d44:	e00c      	b.n	8002d60 <HAL_GPIO_Init+0x244>
 8002d46:	2307      	movs	r3, #7
 8002d48:	e00a      	b.n	8002d60 <HAL_GPIO_Init+0x244>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x244>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x244>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x244>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x244>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x244>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d70:	4937      	ldr	r1, [pc, #220]	@ (8002e50 <HAL_GPIO_Init+0x334>)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da2:	4a32      	ldr	r2, [pc, #200]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002da8:	4b30      	ldr	r3, [pc, #192]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dcc:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dd2:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002df6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e20:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <HAL_GPIO_Init+0x350>)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f47f ae78 	bne.w	8002b2c <HAL_GPIO_Init+0x10>
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40010000 	.word	0x40010000
 8002e54:	48000400 	.word	0x48000400
 8002e58:	48000800 	.word	0x48000800
 8002e5c:	48000c00 	.word	0x48000c00
 8002e60:	48001000 	.word	0x48001000
 8002e64:	48001400 	.word	0x48001400
 8002e68:	48001800 	.word	0x48001800
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e80:	787b      	ldrb	r3, [r7, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e8c:	e002      	b.n	8002e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40007000 	.word	0x40007000

08002ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eca:	d130      	bne.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ecc:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed8:	d038      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eda:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eea:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2232      	movs	r2, #50	@ 0x32
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f00:	e002      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f08:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f14:	d102      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f2      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f28:	d110      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e00f      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3a:	d007      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f44:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	20000200 	.word	0x20000200
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e3ca      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b97      	ldr	r3, [pc, #604]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4b94      	ldr	r3, [pc, #592]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80e4 	beq.w	8003164 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x4a>
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	f040 808b 	bne.w	80030c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	f040 8087 	bne.w	80030c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb2:	4b89      	ldr	r3, [pc, #548]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x62>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e3a2      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	4b82      	ldr	r3, [pc, #520]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x7c>
 8002fda:	4b7f      	ldr	r3, [pc, #508]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_OscConfig+0x88>
 8002fe4:	4b7c      	ldr	r3, [pc, #496]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d223      	bcs.n	800303c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fd55 	bl	8003aa8 <RCC_SetFlashLatencyFromMSIRange>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e383      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4b73      	ldr	r3, [pc, #460]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a72      	ldr	r2, [pc, #456]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b70      	ldr	r3, [pc, #448]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	496d      	ldr	r1, [pc, #436]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003026:	4b6c      	ldr	r3, [pc, #432]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	4968      	ldr	r1, [pc, #416]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
 800303a:	e025      	b.n	8003088 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b66      	ldr	r3, [pc, #408]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a65      	ldr	r2, [pc, #404]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b63      	ldr	r3, [pc, #396]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4960      	ldr	r1, [pc, #384]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b5f      	ldr	r3, [pc, #380]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	495b      	ldr	r1, [pc, #364]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fd15 	bl	8003aa8 <RCC_SetFlashLatencyFromMSIRange>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e343      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003088:	f000 fc4a 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b52      	ldr	r3, [pc, #328]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	4950      	ldr	r1, [pc, #320]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	4a4e      	ldr	r2, [pc, #312]	@ (80031e0 <HAL_RCC_OscConfig+0x278>)
 80030a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030a8:	4b4e      	ldr	r3, [pc, #312]	@ (80031e4 <HAL_RCC_OscConfig+0x27c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f951 	bl	8002354 <HAL_InitTick>
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d052      	beq.n	8003162 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	e327      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d032      	beq.n	800312e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030c8:	4b43      	ldr	r3, [pc, #268]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a42      	ldr	r2, [pc, #264]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d4:	f7ff f98e 	bl	80023f4 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030dc:	f7ff f98a 	bl	80023f4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e310      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ee:	4b3a      	ldr	r3, [pc, #232]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fa:	4b37      	ldr	r3, [pc, #220]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a36      	ldr	r2, [pc, #216]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b34      	ldr	r3, [pc, #208]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4931      	ldr	r1, [pc, #196]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003118:	4b2f      	ldr	r3, [pc, #188]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	492c      	ldr	r1, [pc, #176]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e01a      	b.n	8003164 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800312e:	4b2a      	ldr	r3, [pc, #168]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a29      	ldr	r2, [pc, #164]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313a:	f7ff f95b 	bl	80023f4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003142:	f7ff f957 	bl	80023f4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e2dd      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003154:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x1da>
 8003160:	e000      	b.n	8003164 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003162:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d074      	beq.n	800325a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x21a>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d10e      	bne.n	800319a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d10b      	bne.n	800319a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d064      	beq.n	8003258 <HAL_RCC_OscConfig+0x2f0>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d160      	bne.n	8003258 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e2ba      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x24a>
 80031a4:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	e026      	b.n	8003200 <HAL_RCC_OscConfig+0x298>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ba:	d115      	bne.n	80031e8 <HAL_RCC_OscConfig+0x280>
 80031bc:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a02      	ldr	r2, [pc, #8]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e014      	b.n	8003200 <HAL_RCC_OscConfig+0x298>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08011ee4 	.word	0x08011ee4
 80031e0:	20000200 	.word	0x20000200
 80031e4:	20000204 	.word	0x20000204
 80031e8:	4ba0      	ldr	r3, [pc, #640]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a9f      	ldr	r2, [pc, #636]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b9d      	ldr	r3, [pc, #628]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a9c      	ldr	r2, [pc, #624]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7ff f8f4 	bl	80023f4 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7ff f8f0 	bl	80023f4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e276      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4b92      	ldr	r3, [pc, #584]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x2a8>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7ff f8e0 	bl	80023f4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7ff f8dc 	bl	80023f4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e262      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x2d0>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d060      	beq.n	8003328 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x310>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d116      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	4b7c      	ldr	r3, [pc, #496]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_OscConfig+0x328>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e23f      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b76      	ldr	r3, [pc, #472]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	4973      	ldr	r1, [pc, #460]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a4:	e040      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d023      	beq.n	80032f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6e      	ldr	r2, [pc, #440]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7ff f89b 	bl	80023f4 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7ff f897 	bl	80023f4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e21d      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	4b65      	ldr	r3, [pc, #404]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b62      	ldr	r3, [pc, #392]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	495f      	ldr	r1, [pc, #380]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e018      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5c      	ldr	r2, [pc, #368]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff f877 	bl	80023f4 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7ff f873 	bl	80023f4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1f9      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d03c      	beq.n	80033ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333c:	4b4b      	ldr	r3, [pc, #300]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003342:	4a4a      	ldr	r2, [pc, #296]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7ff f852 	bl	80023f4 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7ff f84e 	bl	80023f4 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1d4      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCC_OscConfig+0x3ec>
 8003374:	e01b      	b.n	80033ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b3d      	ldr	r3, [pc, #244]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337c:	4a3b      	ldr	r2, [pc, #236]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7ff f835 	bl	80023f4 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338e:	f7ff f831 	bl	80023f4 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1b7      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	4b32      	ldr	r3, [pc, #200]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ef      	bne.n	800338e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033c0:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b27      	ldr	r3, [pc, #156]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	4a26      	ldr	r2, [pc, #152]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d8:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	4b21      	ldr	r3, [pc, #132]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003400:	f7fe fff8 	bl	80023f4 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003408:	f7fe fff4 	bl	80023f4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e17a      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x4d8>
 800342e:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003434:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800343e:	e029      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d115      	bne.n	8003474 <HAL_RCC_OscConfig+0x50c>
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	4a07      	ldr	r2, [pc, #28]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003458:	4b04      	ldr	r3, [pc, #16]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345e:	4a03      	ldr	r2, [pc, #12]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003468:	e014      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	40007000 	.word	0x40007000
 8003474:	4b9c      	ldr	r3, [pc, #624]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	4a9b      	ldr	r2, [pc, #620]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003484:	4b98      	ldr	r3, [pc, #608]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348a:	4a97      	ldr	r2, [pc, #604]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d016      	beq.n	80034ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe ffaa 	bl	80023f4 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe ffa6 	bl	80023f4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e12a      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	4b8b      	ldr	r3, [pc, #556]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ed      	beq.n	80034a4 <HAL_RCC_OscConfig+0x53c>
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7fe ff93 	bl	80023f4 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe ff8f 	bl	80023f4 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e113      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e8:	4b7f      	ldr	r3, [pc, #508]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ed      	bne.n	80034d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b7a      	ldr	r3, [pc, #488]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a79      	ldr	r2, [pc, #484]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80fe 	beq.w	800370e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	2b02      	cmp	r3, #2
 8003518:	f040 80d0 	bne.w	80036bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800351c:	4b72      	ldr	r3, [pc, #456]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0203 	and.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	429a      	cmp	r2, r3
 800352e:	d130      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	3b01      	subs	r3, #1
 800353c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d127      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d11f      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800355c:	2a07      	cmp	r2, #7
 800355e:	bf14      	ite	ne
 8003560:	2201      	movne	r2, #1
 8003562:	2200      	moveq	r2, #0
 8003564:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003566:	4293      	cmp	r3, r2
 8003568:	d113      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d109      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d06e      	beq.n	8003670 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d069      	beq.n	800366c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003598:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035a4:	4b50      	ldr	r3, [pc, #320]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0ad      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035b4:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c0:	f7fe ff18 	bl	80023f4 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe ff14 	bl	80023f4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e09a      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035da:	4b43      	ldr	r3, [pc, #268]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	4b40      	ldr	r3, [pc, #256]	@ (80036ec <HAL_RCC_OscConfig+0x784>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035f6:	3a01      	subs	r2, #1
 80035f8:	0112      	lsls	r2, r2, #4
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003600:	0212      	lsls	r2, r2, #8
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003608:	0852      	lsrs	r2, r2, #1
 800360a:	3a01      	subs	r2, #1
 800360c:	0552      	lsls	r2, r2, #21
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003614:	0852      	lsrs	r2, r2, #1
 8003616:	3a01      	subs	r2, #1
 8003618:	0652      	lsls	r2, r2, #25
 800361a:	4311      	orrs	r1, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003620:	0912      	lsrs	r2, r2, #4
 8003622:	0452      	lsls	r2, r2, #17
 8003624:	430a      	orrs	r2, r1
 8003626:	4930      	ldr	r1, [pc, #192]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003628:	4313      	orrs	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800362c:	4b2e      	ldr	r3, [pc, #184]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2d      	ldr	r2, [pc, #180]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a2a      	ldr	r2, [pc, #168]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003642:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003644:	f7fe fed6 	bl	80023f4 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fed2 	bl	80023f4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e058      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366a:	e050      	b.n	800370e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e04f      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d148      	bne.n	800370e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800367c:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003688:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a16      	ldr	r2, [pc, #88]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003692:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003694:	f7fe feae 	bl	80023f4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe feaa 	bl	80023f4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e030      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x734>
 80036ba:	e028      	b.n	800370e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d023      	beq.n	800370a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a08      	ldr	r2, [pc, #32]	@ (80036e8 <HAL_RCC_OscConfig+0x780>)
 80036c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe fe91 	bl	80023f4 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d4:	e00c      	b.n	80036f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe fe8d 	bl	80023f4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d905      	bls.n	80036f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e013      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_RCC_OscConfig+0x7b0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ec      	bne.n	80036d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_RCC_OscConfig+0x7b0>)
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4905      	ldr	r1, [pc, #20]	@ (8003718 <HAL_RCC_OscConfig+0x7b0>)
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_RCC_OscConfig+0x7b4>)
 8003704:	4013      	ands	r3, r2
 8003706:	60cb      	str	r3, [r1, #12]
 8003708:	e001      	b.n	800370e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	feeefffc 	.word	0xfeeefffc

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0e7      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b75      	ldr	r3, [pc, #468]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d910      	bls.n	8003764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b72      	ldr	r3, [pc, #456]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4970      	ldr	r1, [pc, #448]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b6e      	ldr	r3, [pc, #440]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0cf      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b66      	ldr	r3, [pc, #408]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800377c:	429a      	cmp	r2, r3
 800377e:	d908      	bls.n	8003792 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b63      	ldr	r3, [pc, #396]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4960      	ldr	r1, [pc, #384]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d04c      	beq.n	8003838 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d121      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e0a6      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037be:	4b54      	ldr	r3, [pc, #336]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d115      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e09a      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e08e      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e086      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b46      	ldr	r3, [pc, #280]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4943      	ldr	r1, [pc, #268]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003808:	f7fe fdf4 	bl	80023f4 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fe fdf0 	bl	80023f4 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e06e      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	4b3a      	ldr	r3, [pc, #232]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 020c 	and.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d1eb      	bne.n	8003810 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003850:	429a      	cmp	r2, r3
 8003852:	d208      	bcs.n	8003866 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b2e      	ldr	r3, [pc, #184]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	492b      	ldr	r1, [pc, #172]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003866:	4b29      	ldr	r3, [pc, #164]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d210      	bcs.n	8003896 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003874:	4b25      	ldr	r3, [pc, #148]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 0207 	bic.w	r2, r3, #7
 800387c:	4923      	ldr	r1, [pc, #140]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003884:	4b21      	ldr	r3, [pc, #132]	@ (800390c <HAL_RCC_ClockConfig+0x1ec>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d001      	beq.n	8003896 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e036      	b.n	8003904 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4918      	ldr	r1, [pc, #96]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4910      	ldr	r1, [pc, #64]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038d4:	f000 f824 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	490b      	ldr	r1, [pc, #44]	@ (8003914 <HAL_RCC_ClockConfig+0x1f4>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	4a09      	ldr	r2, [pc, #36]	@ (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80038f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038f4:	4b09      	ldr	r3, [pc, #36]	@ (800391c <HAL_RCC_ClockConfig+0x1fc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fd2b 	bl	8002354 <HAL_InitTick>
 80038fe:	4603      	mov	r3, r0
 8003900:	72fb      	strb	r3, [r7, #11]

  return status;
 8003902:	7afb      	ldrb	r3, [r7, #11]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40022000 	.word	0x40022000
 8003910:	40021000 	.word	0x40021000
 8003914:	08011ee4 	.word	0x08011ee4
 8003918:	20000200 	.word	0x20000200
 800391c:	20000204 	.word	0x20000204

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	@ 0x24
 8003924:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003938:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x34>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	d121      	bne.n	8003992 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d11e      	bne.n	8003992 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003954:	4b34      	ldr	r3, [pc, #208]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003960:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	e005      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003970:	4b2d      	ldr	r3, [pc, #180]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800397c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x10c>)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003984:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10d      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d102      	bne.n	800399e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003998:	4b25      	ldr	r3, [pc, #148]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x110>)
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e004      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039a4:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80039a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d134      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d003      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0xac>
 80039c4:	e005      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a30 <HAL_RCC_GetSysClockFreq+0x110>)
 80039c8:	617b      	str	r3, [r7, #20]
      break;
 80039ca:	e005      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039cc:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ce:	617b      	str	r3, [r7, #20]
      break;
 80039d0:	e002      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	617b      	str	r3, [r7, #20]
      break;
 80039d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d8:	4b13      	ldr	r3, [pc, #76]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	3301      	adds	r3, #1
 80039e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039e6:	4b10      	ldr	r3, [pc, #64]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	fb03 f202 	mul.w	r2, r3, r2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	0e5b      	lsrs	r3, r3, #25
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a18:	69bb      	ldr	r3, [r7, #24]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	@ 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08011efc 	.word	0x08011efc
 8003a30:	00f42400 	.word	0x00f42400
 8003a34:	007a1200 	.word	0x007a1200

08003a38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a3c:	4b03      	ldr	r3, [pc, #12]	@ (8003a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000200 	.word	0x20000200

08003a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a54:	f7ff fff0 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4904      	ldr	r1, [pc, #16]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	08011ef4 	.word	0x08011ef4

08003a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a80:	f7ff ffda 	bl	8003a38 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0adb      	lsrs	r3, r3, #11
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4904      	ldr	r1, [pc, #16]	@ (8003aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08011ef4 	.word	0x08011ef4

08003aa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ac0:	f7ff f9ee 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003ac4:	6178      	str	r0, [r7, #20]
 8003ac6:	e014      	b.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	4a24      	ldr	r2, [pc, #144]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad4:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ae0:	f7ff f9de 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003ae4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003af8:	d10b      	bne.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b80      	cmp	r3, #128	@ 0x80
 8003afe:	d919      	bls.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b04:	d902      	bls.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b06:	2302      	movs	r3, #2
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	e013      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e010      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b80      	cmp	r3, #128	@ 0x80
 8003b16:	d902      	bls.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b18:	2303      	movs	r3, #3
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e00a      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d102      	bne.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b24:	2302      	movs	r3, #2
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e004      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b70      	cmp	r3, #112	@ 0x70
 8003b2e:	d101      	bne.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b30:	2301      	movs	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 0207 	bic.w	r2, r3, #7
 8003b3c:	4909      	ldr	r1, [pc, #36]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b44:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d001      	beq.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40022000 	.word	0x40022000

08003b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b70:	2300      	movs	r3, #0
 8003b72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d041      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b8c:	d02a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b92:	d824      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b98:	d008      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b9e:	d81e      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba8:	d010      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003baa:	e018      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bac:	4b86      	ldr	r3, [pc, #536]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a85      	ldr	r2, [pc, #532]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb8:	e015      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fabb 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bca:	e00c      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3320      	adds	r3, #32
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fba6 	bl	8004324 <RCCEx_PLLSAI2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bdc:	e003      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	74fb      	strb	r3, [r7, #19]
      break;
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bec:	4b76      	ldr	r3, [pc, #472]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bfa:	4973      	ldr	r1, [pc, #460]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c02:	e001      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d041      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c1c:	d02a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c22:	d824      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c28:	d008      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c2e:	d81e      	bhi.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c38:	d010      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c3a:	e018      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c3c:	4b62      	ldr	r3, [pc, #392]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a61      	ldr	r2, [pc, #388]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c48:	e015      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fa73 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5a:	e00c      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3320      	adds	r3, #32
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fb5e 	bl	8004324 <RCCEx_PLLSAI2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	74fb      	strb	r3, [r7, #19]
      break;
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c7c:	4b52      	ldr	r3, [pc, #328]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c8a:	494f      	ldr	r1, [pc, #316]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c92:	e001      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a0 	beq.w	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003caa:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00d      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc0:	4b41      	ldr	r3, [pc, #260]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc4:	4a40      	ldr	r2, [pc, #256]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce8:	f7fe fb84 	bl	80023f4 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cee:	e009      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf0:	f7fe fb80 	bl	80023f4 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d902      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	74fb      	strb	r3, [r7, #19]
        break;
 8003d02:	e005      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d04:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ef      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d15c      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d16:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01f      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d019      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d34:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d40:	4b21      	ldr	r3, [pc, #132]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	4a20      	ldr	r2, [pc, #128]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d50:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d60:	4a19      	ldr	r2, [pc, #100]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d016      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe fb3f 	bl	80023f4 <HAL_GetTick>
 8003d76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d78:	e00b      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fe fb3b 	bl	80023f4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d902      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ec      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da6:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db6:	4904      	ldr	r1, [pc, #16]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd4:	7c7b      	ldrb	r3, [r7, #17]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b9e      	ldr	r3, [pc, #632]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	4a9d      	ldr	r2, [pc, #628]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003df2:	4b98      	ldr	r3, [pc, #608]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df8:	f023 0203 	bic.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e00:	4994      	ldr	r1, [pc, #592]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e14:	4b8f      	ldr	r3, [pc, #572]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	f023 020c 	bic.w	r2, r3, #12
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	498c      	ldr	r1, [pc, #560]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e36:	4b87      	ldr	r3, [pc, #540]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	4983      	ldr	r1, [pc, #524]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e58:	4b7e      	ldr	r3, [pc, #504]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	497b      	ldr	r1, [pc, #492]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e7a:	4b76      	ldr	r3, [pc, #472]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e88:	4972      	ldr	r1, [pc, #456]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e9c:	4b6d      	ldr	r3, [pc, #436]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	496a      	ldr	r1, [pc, #424]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ebe:	4b65      	ldr	r3, [pc, #404]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ecc:	4961      	ldr	r1, [pc, #388]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eee:	4959      	ldr	r1, [pc, #356]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f02:	4b54      	ldr	r3, [pc, #336]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f10:	4950      	ldr	r1, [pc, #320]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f24:	4b4b      	ldr	r3, [pc, #300]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f32:	4948      	ldr	r1, [pc, #288]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f46:	4b43      	ldr	r3, [pc, #268]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	493f      	ldr	r1, [pc, #252]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d028      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f68:	4b3a      	ldr	r3, [pc, #232]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f76:	4937      	ldr	r1, [pc, #220]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f86:	d106      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f88:	4b32      	ldr	r3, [pc, #200]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a31      	ldr	r2, [pc, #196]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f92:	60d3      	str	r3, [r2, #12]
 8003f94:	e011      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8c8 	bl	800413c <RCCEx_PLLSAI1_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d028      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc6:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fcc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	491f      	ldr	r1, [pc, #124]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff0:	60d3      	str	r3, [r2, #12]
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f899 	bl	800413c <RCCEx_PLLSAI1_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d02b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004024:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004032:	4908      	ldr	r1, [pc, #32]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800403e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004042:	d109      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004044:	4b03      	ldr	r3, [pc, #12]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a02      	ldr	r2, [pc, #8]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800404e:	60d3      	str	r3, [r2, #12]
 8004050:	e014      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f867 	bl	800413c <RCCEx_PLLSAI1_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02f      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004088:	4b2b      	ldr	r3, [pc, #172]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004096:	4928      	ldr	r1, [pc, #160]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a6:	d10d      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f844 	bl	800413c <RCCEx_PLLSAI1_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d014      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	74bb      	strb	r3, [r7, #18]
 80040c2:	e011      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3320      	adds	r3, #32
 80040d2:	2102      	movs	r1, #2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f925 	bl	8004324 <RCCEx_PLLSAI2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040f4:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004102:	490d      	ldr	r1, [pc, #52]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004126:	4904      	ldr	r1, [pc, #16]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800412e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000

0800413c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800414a:	4b75      	ldr	r3, [pc, #468]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004156:	4b72      	ldr	r3, [pc, #456]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d10d      	bne.n	8004182 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
       ||
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800416e:	4b6c      	ldr	r3, [pc, #432]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
       ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d047      	beq.n	8004212 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	e044      	b.n	8004212 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d018      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0x86>
 8004190:	2b03      	cmp	r3, #3
 8004192:	d825      	bhi.n	80041e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d002      	beq.n	800419e <RCCEx_PLLSAI1_Config+0x62>
 8004198:	2b02      	cmp	r3, #2
 800419a:	d009      	beq.n	80041b0 <RCCEx_PLLSAI1_Config+0x74>
 800419c:	e020      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800419e:	4b60      	ldr	r3, [pc, #384]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11d      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ae:	e01a      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d116      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e013      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c2:	4b57      	ldr	r3, [pc, #348]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ce:	4b54      	ldr	r3, [pc, #336]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041de:	e006      	b.n	80041ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e004      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	430b      	orrs	r3, r1
 800420c:	4944      	ldr	r1, [pc, #272]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d17d      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004218:	4b41      	ldr	r3, [pc, #260]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a40      	ldr	r2, [pc, #256]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fe f8e6 	bl	80023f4 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800422a:	e009      	b.n	8004240 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800422c:	f7fe f8e2 	bl	80023f4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	73fb      	strb	r3, [r7, #15]
        break;
 800423e:	e005      	b.n	800424c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004240:	4b37      	ldr	r3, [pc, #220]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ef      	bne.n	800422c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d160      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d111      	bne.n	800427c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004258:	4b31      	ldr	r3, [pc, #196]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	0912      	lsrs	r2, r2, #4
 8004270:	0452      	lsls	r2, r2, #17
 8004272:	430a      	orrs	r2, r1
 8004274:	492a      	ldr	r1, [pc, #168]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]
 800427a:	e027      	b.n	80042cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d112      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004282:	4b27      	ldr	r3, [pc, #156]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800428a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6892      	ldr	r2, [r2, #8]
 8004292:	0211      	lsls	r1, r2, #8
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6912      	ldr	r2, [r2, #16]
 8004298:	0852      	lsrs	r2, r2, #1
 800429a:	3a01      	subs	r2, #1
 800429c:	0552      	lsls	r2, r2, #21
 800429e:	430a      	orrs	r2, r1
 80042a0:	491f      	ldr	r1, [pc, #124]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	610b      	str	r3, [r1, #16]
 80042a6:	e011      	b.n	80042cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6892      	ldr	r2, [r2, #8]
 80042b8:	0211      	lsls	r1, r2, #8
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6952      	ldr	r2, [r2, #20]
 80042be:	0852      	lsrs	r2, r2, #1
 80042c0:	3a01      	subs	r2, #1
 80042c2:	0652      	lsls	r2, r2, #25
 80042c4:	430a      	orrs	r2, r1
 80042c6:	4916      	ldr	r1, [pc, #88]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042cc:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a13      	ldr	r2, [pc, #76]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d8:	f7fe f88c 	bl	80023f4 <HAL_GetTick>
 80042dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042de:	e009      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e0:	f7fe f888 	bl	80023f4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d902      	bls.n	80042f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	73fb      	strb	r3, [r7, #15]
          break;
 80042f2:	e005      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ef      	beq.n	80042e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	4904      	ldr	r1, [pc, #16]	@ (8004320 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000

08004324 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004332:	4b6a      	ldr	r3, [pc, #424]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d018      	beq.n	8004370 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800433e:	4b67      	ldr	r3, [pc, #412]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0203 	and.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d10d      	bne.n	800436a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
       ||
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004356:	4b61      	ldr	r3, [pc, #388]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
       ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d047      	beq.n	80043fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e044      	b.n	80043fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d018      	beq.n	80043aa <RCCEx_PLLSAI2_Config+0x86>
 8004378:	2b03      	cmp	r3, #3
 800437a:	d825      	bhi.n	80043c8 <RCCEx_PLLSAI2_Config+0xa4>
 800437c:	2b01      	cmp	r3, #1
 800437e:	d002      	beq.n	8004386 <RCCEx_PLLSAI2_Config+0x62>
 8004380:	2b02      	cmp	r3, #2
 8004382:	d009      	beq.n	8004398 <RCCEx_PLLSAI2_Config+0x74>
 8004384:	e020      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004386:	4b55      	ldr	r3, [pc, #340]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d11d      	bne.n	80043ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004396:	e01a      	b.n	80043ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004398:	4b50      	ldr	r3, [pc, #320]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a8:	e013      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043aa:	4b4c      	ldr	r3, [pc, #304]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043b6:	4b49      	ldr	r3, [pc, #292]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043c6:	e006      	b.n	80043d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      break;
 80043cc:	e004      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10d      	bne.n	80043fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043de:	4b3f      	ldr	r3, [pc, #252]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	430b      	orrs	r3, r1
 80043f4:	4939      	ldr	r1, [pc, #228]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d167      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004400:	4b36      	ldr	r3, [pc, #216]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a35      	ldr	r2, [pc, #212]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800440a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440c:	f7fd fff2 	bl	80023f4 <HAL_GetTick>
 8004410:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004412:	e009      	b.n	8004428 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004414:	f7fd ffee 	bl	80023f4 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d902      	bls.n	8004428 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	73fb      	strb	r3, [r7, #15]
        break;
 8004426:	e005      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004428:	4b2c      	ldr	r3, [pc, #176]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ef      	bne.n	8004414 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d14a      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d111      	bne.n	8004464 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004440:	4b26      	ldr	r3, [pc, #152]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6892      	ldr	r2, [r2, #8]
 8004450:	0211      	lsls	r1, r2, #8
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	0912      	lsrs	r2, r2, #4
 8004458:	0452      	lsls	r2, r2, #17
 800445a:	430a      	orrs	r2, r1
 800445c:	491f      	ldr	r1, [pc, #124]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	614b      	str	r3, [r1, #20]
 8004462:	e011      	b.n	8004488 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004464:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800446c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6892      	ldr	r2, [r2, #8]
 8004474:	0211      	lsls	r1, r2, #8
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6912      	ldr	r2, [r2, #16]
 800447a:	0852      	lsrs	r2, r2, #1
 800447c:	3a01      	subs	r2, #1
 800447e:	0652      	lsls	r2, r2, #25
 8004480:	430a      	orrs	r2, r1
 8004482:	4916      	ldr	r1, [pc, #88]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004484:	4313      	orrs	r3, r2
 8004486:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004488:	4b14      	ldr	r3, [pc, #80]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a13      	ldr	r2, [pc, #76]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004492:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fd ffae 	bl	80023f4 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800449a:	e009      	b.n	80044b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800449c:	f7fd ffaa 	bl	80023f4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d902      	bls.n	80044b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	73fb      	strb	r3, [r7, #15]
          break;
 80044ae:	e005      	b.n	80044bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ef      	beq.n	800449c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4904      	ldr	r1, [pc, #16]	@ (80044dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000

080044e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e095      	b.n	800461e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004502:	d009      	beq.n	8004518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	61da      	str	r2, [r3, #28]
 800450a:	e005      	b.n	8004518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fd fc6c 	bl	8001e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800454e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004558:	d902      	bls.n	8004560 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e002      	b.n	8004566 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004564:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800456e:	d007      	beq.n	8004580 <HAL_SPI_Init+0xa0>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004578:	d002      	beq.n	8004580 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c2:	ea42 0103 	orr.w	r1, r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	f003 0204 	and.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045fc:	ea42 0103 	orr.w	r1, r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b088      	sub	sp, #32
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004636:	f7fd fedd 	bl	80023f4 <HAL_GetTick>
 800463a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d001      	beq.n	8004650 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
 800464e:	e15c      	b.n	800490a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_SPI_Transmit+0x36>
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e154      	b.n	800490a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_SPI_Transmit+0x48>
 800466a:	2302      	movs	r3, #2
 800466c:	e14d      	b.n	800490a <HAL_SPI_Transmit+0x2e4>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2203      	movs	r2, #3
 800467a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	88fa      	ldrh	r2, [r7, #6]
 800468e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c0:	d10f      	bne.n	80046e2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ec:	2b40      	cmp	r3, #64	@ 0x40
 80046ee:	d007      	beq.n	8004700 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004708:	d952      	bls.n	80047b0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_SPI_Transmit+0xf2>
 8004712:	8b7b      	ldrh	r3, [r7, #26]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d145      	bne.n	80047a4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471c:	881a      	ldrh	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	1c9a      	adds	r2, r3, #2
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800473c:	e032      	b.n	80047a4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d112      	bne.n	8004772 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	1c9a      	adds	r2, r3, #2
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004770:	e018      	b.n	80047a4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004772:	f7fd fe3f 	bl	80023f4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d803      	bhi.n	800478a <HAL_SPI_Transmit+0x164>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d102      	bne.n	8004790 <HAL_SPI_Transmit+0x16a>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0b2      	b.n	800490a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1c7      	bne.n	800473e <HAL_SPI_Transmit+0x118>
 80047ae:	e083      	b.n	80048b8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_SPI_Transmit+0x198>
 80047b8:	8b7b      	ldrh	r3, [r7, #26]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d177      	bne.n	80048ae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d912      	bls.n	80047ee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b02      	subs	r3, #2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ec:	e05f      	b.n	80048ae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	7812      	ldrb	r2, [r2, #0]
 80047fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004814:	e04b      	b.n	80048ae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d12b      	bne.n	800487c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d912      	bls.n	8004854 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	881a      	ldrh	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	1c9a      	adds	r2, r3, #2
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b02      	subs	r3, #2
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004852:	e02c      	b.n	80048ae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800487a:	e018      	b.n	80048ae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800487c:	f7fd fdba 	bl	80023f4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d803      	bhi.n	8004894 <HAL_SPI_Transmit+0x26e>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004892:	d102      	bne.n	800489a <HAL_SPI_Transmit+0x274>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e02d      	b.n	800490a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ae      	bne.n	8004816 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 fbd3 	bl	8005068 <SPI_EndRxTxTransaction>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004908:	2300      	movs	r3, #0
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
 8004930:	e0d4      	b.n	8004adc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_SPI_Transmit_DMA+0x2a>
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0cc      	b.n	8004adc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_SPI_Transmit_DMA+0x3c>
 800494c:	2302      	movs	r3, #2
 800494e:	e0c5      	b.n	8004adc <HAL_SPI_Transmit_DMA+0x1c8>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2203      	movs	r2, #3
 800495c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a2:	d10f      	bne.n	80049c4 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	4a46      	ldr	r2, [pc, #280]	@ (8004ae4 <HAL_SPI_Transmit_DMA+0x1d0>)
 80049ca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	4a45      	ldr	r2, [pc, #276]	@ (8004ae8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	4a44      	ldr	r2, [pc, #272]	@ (8004aec <HAL_SPI_Transmit_DMA+0x1d8>)
 80049da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e0:	2200      	movs	r2, #0
 80049e2:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049f2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049fc:	d82d      	bhi.n	8004a5a <HAL_SPI_Transmit_DMA+0x146>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a08:	d127      	bne.n	8004a5a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10f      	bne.n	8004a38 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a26:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a36:	e010      	b.n	8004a5a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a46:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3301      	adds	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	4619      	mov	r1, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a72:	f7fd fe95 	bl	80027a0 <HAL_DMA_Start_IT>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a80:	f043 0210 	orr.w	r2, r3, #16
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e023      	b.n	8004adc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9e:	2b40      	cmp	r3, #64	@ 0x40
 8004aa0:	d007      	beq.n	8004ab2 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0220 	orr.w	r2, r2, #32
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0202 	orr.w	r2, r2, #2
 8004ad8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	08004da7 	.word	0x08004da7
 8004ae8:	08004d01 	.word	0x08004d01
 8004aec:	08004dc3 	.word	0x08004dc3

08004af0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10e      	bne.n	8004b30 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
    return;
 8004b2e:	e0ce      	b.n	8004cce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_SPI_IRQHandler+0x5e>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
    return;
 8004b4c:	e0bf      	b.n	8004cce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <HAL_SPI_IRQHandler+0x7e>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80b0 	beq.w	8004cce <HAL_SPI_IRQHandler+0x1de>
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80aa 	beq.w	8004cce <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d023      	beq.n	8004bcc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d011      	beq.n	8004bb4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b94:	f043 0204 	orr.w	r2, r3, #4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	e00b      	b.n	8004bcc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
        return;
 8004bca:	e080      	b.n	8004cce <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0e:	f043 0208 	orr.w	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c16:	2300      	movs	r3, #0
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d04f      	beq.n	8004ccc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c3a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_SPI_IRQHandler+0x168>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d034      	beq.n	8004cc2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0203 	bic.w	r2, r2, #3
 8004c66:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d011      	beq.n	8004c94 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c74:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <HAL_SPI_IRQHandler+0x1e4>)
 8004c76:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fd fe2d 	bl	80028dc <HAL_DMA_Abort_IT>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d016      	beq.n	8004cca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd4 <HAL_SPI_IRQHandler+0x1e4>)
 8004ca2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fd fe17 	bl	80028dc <HAL_DMA_Abort_IT>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004cc0:	e003      	b.n	8004cca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f812 	bl	8004cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cc8:	e000      	b.n	8004ccc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004cca:	bf00      	nop
    return;
 8004ccc:	bf00      	nop
  }
}
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	08004e03 	.word	0x08004e03

08004cd8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d0e:	f7fd fb71 	bl	80023f4 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d03b      	beq.n	8004d9a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0220 	bic.w	r2, r2, #32
 8004d30:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0202 	bic.w	r2, r2, #2
 8004d40:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	2164      	movs	r1, #100	@ 0x64
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	f000 f98e 	bl	8005068 <SPI_EndRxTxTransaction>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d92:	6978      	ldr	r0, [r7, #20]
 8004d94:	f7ff ffaa 	bl	8004cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d98:	e002      	b.n	8004da0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7fc fef6 	bl	8001b8c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff ff8f 	bl	8004cd8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0203 	bic.w	r2, r2, #3
 8004dde:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de4:	f043 0210 	orr.w	r2, r3, #16
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff ff79 	bl	8004cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff ff64 	bl	8004cec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e3c:	f7fd fada 	bl	80023f4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e4c:	f7fd fad2 	bl	80023f4 <HAL_GetTick>
 8004e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e52:	4b39      	ldr	r3, [pc, #228]	@ (8004f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	015b      	lsls	r3, r3, #5
 8004e58:	0d1b      	lsrs	r3, r3, #20
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e62:	e054      	b.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d050      	beq.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e6c:	f7fd fac2 	bl	80023f4 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d902      	bls.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d13d      	bne.n	8004efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e9a:	d111      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea4:	d004      	beq.n	8004eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eae:	d107      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec8:	d10f      	bne.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e017      	b.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4013      	ands	r3, r2
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d19b      	bne.n	8004e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000200 	.word	0x20000200

08004f3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	@ 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f4e:	f7fd fa51 	bl	80023f4 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f5e:	f7fd fa49 	bl	80023f4 <HAL_GetTick>
 8004f62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8005064 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00da      	lsls	r2, r3, #3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	0d1b      	lsrs	r3, r3, #20
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f84:	e060      	b.n	8005048 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f8c:	d107      	bne.n	8004f9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d050      	beq.n	8005048 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa6:	f7fd fa25 	bl	80023f4 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d902      	bls.n	8004fbc <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d13d      	bne.n	8005038 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fd4:	d111      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fde:	d004      	beq.n	8004fea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe8:	d107      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005002:	d10f      	bne.n	8005024 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e010      	b.n	800505a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	3b01      	subs	r3, #1
 8005046:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d196      	bne.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3728      	adds	r7, #40	@ 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000200 	.word	0x20000200

08005068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff ff5b 	bl	8004f3c <SPI_WaitFifoStateUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e027      	b.n	80050ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2180      	movs	r1, #128	@ 0x80
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff fec0 	bl	8004e2c <SPI_WaitFlagStateUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e014      	b.n	80050ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff ff34 	bl	8004f3c <SPI_WaitFifoStateUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e000      	b.n	80050ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e040      	b.n	8005188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fd f876 	bl	8002208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	@ 0x24
 8005120:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fea6 	bl	8005e8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fbeb 	bl	800591c <UART_SetConfig>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e01b      	b.n	8005188 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800515e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800516e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 ff25 	bl	8005fd0 <UART_CheckIdleState>
 8005186:	4603      	mov	r3, r0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005190:	b480      	push	{r7}
 8005192:	b08b      	sub	sp, #44	@ 0x2c
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d147      	bne.n	8005236 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_UART_Transmit_IT+0x22>
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e040      	b.n	8005238 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2221      	movs	r2, #33	@ 0x21
 80051de:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e8:	d107      	bne.n	80051fa <HAL_UART_Transmit_IT+0x6a>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4a13      	ldr	r2, [pc, #76]	@ (8005244 <HAL_UART_Transmit_IT+0xb4>)
 80051f6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80051f8:	e002      	b.n	8005200 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4a12      	ldr	r2, [pc, #72]	@ (8005248 <HAL_UART_Transmit_IT+0xb8>)
 80051fe:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	613b      	str	r3, [r7, #16]
   return(result);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	623b      	str	r3, [r7, #32]
 8005220:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	69f9      	ldr	r1, [r7, #28]
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	61bb      	str	r3, [r7, #24]
   return(result);
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e6      	bne.n	8005200 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	372c      	adds	r7, #44	@ 0x2c
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	08006533 	.word	0x08006533
 8005248:	0800647d 	.word	0x0800647d

0800524c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	@ 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005260:	2b20      	cmp	r3, #32
 8005262:	d137      	bne.n	80052d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_UART_Receive_IT+0x24>
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e030      	b.n	80052d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a18      	ldr	r2, [pc, #96]	@ (80052e0 <HAL_UART_Receive_IT+0x94>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d01f      	beq.n	80052c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d018      	beq.n	80052c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	613b      	str	r3, [r7, #16]
   return(result);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e6      	bne.n	8005292 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	461a      	mov	r2, r3
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 ff96 	bl	80061fc <UART_Start_Receive_IT>
 80052d0:	4603      	mov	r3, r0
 80052d2:	e000      	b.n	80052d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3728      	adds	r7, #40	@ 0x28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40008000 	.word	0x40008000

080052e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b0ba      	sub	sp, #232	@ 0xe8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800530a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800530e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005312:	4013      	ands	r3, r2
 8005314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d115      	bne.n	800534c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00f      	beq.n	800534c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 82ca 	beq.w	80058d6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
      }
      return;
 800534a:	e2c4      	b.n	80058d6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800534c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8117 	beq.w	8005584 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005366:	4b85      	ldr	r3, [pc, #532]	@ (800557c <HAL_UART_IRQHandler+0x298>)
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 810a 	beq.w	8005584 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <HAL_UART_IRQHandler+0xbc>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2201      	movs	r2, #1
 800538e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005396:	f043 0201 	orr.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <HAL_UART_IRQHandler+0xec>
 80053ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2202      	movs	r2, #2
 80053be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c6:	f043 0204 	orr.w	r2, r3, #4
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d011      	beq.n	8005400 <HAL_UART_IRQHandler+0x11c>
 80053dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2204      	movs	r2, #4
 80053ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f6:	f043 0202 	orr.w	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800540c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800541c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2208      	movs	r2, #8
 800542a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005432:	f043 0208 	orr.w	r2, r3, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005444:	2b00      	cmp	r3, #0
 8005446:	d012      	beq.n	800546e <HAL_UART_IRQHandler+0x18a>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00c      	beq.n	800546e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800545c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8230 	beq.w	80058da <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b6:	2b40      	cmp	r3, #64	@ 0x40
 80054b8:	d005      	beq.n	80054c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d04f      	beq.n	8005566 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 ff5e 	bl	8006388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d6:	2b40      	cmp	r3, #64	@ 0x40
 80054d8:	d141      	bne.n	800555e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005506:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800550a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800551e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1d9      	bne.n	80054da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800552a:	2b00      	cmp	r3, #0
 800552c:	d013      	beq.n	8005556 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005532:	4a13      	ldr	r2, [pc, #76]	@ (8005580 <HAL_UART_IRQHandler+0x29c>)
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800553a:	4618      	mov	r0, r3
 800553c:	f7fd f9ce 	bl	80028dc <HAL_DMA_Abort_IT>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d017      	beq.n	8005576 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005550:	4610      	mov	r0, r2
 8005552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	e00f      	b.n	8005576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9ca 	bl	80058f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555c:	e00b      	b.n	8005576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9c6 	bl	80058f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	e007      	b.n	8005576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9c2 	bl	80058f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005574:	e1b1      	b.n	80058da <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005576:	bf00      	nop
    return;
 8005578:	e1af      	b.n	80058da <HAL_UART_IRQHandler+0x5f6>
 800557a:	bf00      	nop
 800557c:	04000120 	.word	0x04000120
 8005580:	08006451 	.word	0x08006451

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005588:	2b01      	cmp	r3, #1
 800558a:	f040 816a 	bne.w	8005862 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8163 	beq.w	8005862 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800559c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 815c 	beq.w	8005862 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2210      	movs	r2, #16
 80055b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	f040 80d4 	bne.w	800576a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80ad 	beq.w	8005732 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f080 80a5 	bcs.w	8005732 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f040 8086 	bne.w	8005710 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800561c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800562e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005632:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800563a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1da      	bne.n	8005604 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800565e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005672:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005676:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800567a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e1      	bne.n	800564e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800569a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800569c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e3      	bne.n	800568a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e0:	f023 0310 	bic.w	r3, r3, #16
 80056e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e4      	bne.n	80056d0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd f8a8 	bl	8002860 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005722:	b29b      	uxth	r3, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	b29b      	uxth	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f8ea 	bl	8005904 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005730:	e0d5      	b.n	80058de <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005738:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800573c:	429a      	cmp	r2, r3
 800573e:	f040 80ce 	bne.w	80058de <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b20      	cmp	r3, #32
 8005750:	f040 80c5 	bne.w	80058de <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f8ce 	bl	8005904 <HAL_UARTEx_RxEventCallback>
      return;
 8005768:	e0b9      	b.n	80058de <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005776:	b29b      	uxth	r3, r3
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 80ab 	beq.w	80058e2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800578c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80a6 	beq.w	80058e2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e4      	bne.n	8005796 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	623b      	str	r3, [r7, #32]
   return(result);
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80057f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e3      	bne.n	80057cc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	60fb      	str	r3, [r7, #12]
   return(result);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f023 0310 	bic.w	r3, r3, #16
 800582c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	617b      	str	r3, [r7, #20]
   return(result);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e4      	bne.n	8005818 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f852 	bl	8005904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005860:	e03f      	b.n	80058e2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <HAL_UART_IRQHandler+0x5a8>
 800586e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 f89b 	bl	80069c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800588a:	e02d      	b.n	80058e8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800588c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800589c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01c      	beq.n	80058e6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	4798      	blx	r3
    }
    return;
 80058b4:	e017      	b.n	80058e6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d012      	beq.n	80058e8 <HAL_UART_IRQHandler+0x604>
 80058c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00c      	beq.n	80058e8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fe8f 	bl	80065f2 <UART_EndTransmit_IT>
    return;
 80058d4:	e008      	b.n	80058e8 <HAL_UART_IRQHandler+0x604>
      return;
 80058d6:	bf00      	nop
 80058d8:	e006      	b.n	80058e8 <HAL_UART_IRQHandler+0x604>
    return;
 80058da:	bf00      	nop
 80058dc:	e004      	b.n	80058e8 <HAL_UART_IRQHandler+0x604>
      return;
 80058de:	bf00      	nop
 80058e0:	e002      	b.n	80058e8 <HAL_UART_IRQHandler+0x604>
      return;
 80058e2:	bf00      	nop
 80058e4:	e000      	b.n	80058e8 <HAL_UART_IRQHandler+0x604>
    return;
 80058e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058e8:	37e8      	adds	r7, #232	@ 0xe8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop

080058f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800591c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005920:	b08a      	sub	sp, #40	@ 0x28
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	431a      	orrs	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	431a      	orrs	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4313      	orrs	r3, r2
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4ba4      	ldr	r3, [pc, #656]	@ (8005bdc <UART_SetConfig+0x2c0>)
 800594c:	4013      	ands	r3, r2
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005954:	430b      	orrs	r3, r1
 8005956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a99      	ldr	r2, [pc, #612]	@ (8005be0 <UART_SetConfig+0x2c4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005984:	4313      	orrs	r3, r2
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005998:	430a      	orrs	r2, r1
 800599a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a90      	ldr	r2, [pc, #576]	@ (8005be4 <UART_SetConfig+0x2c8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d126      	bne.n	80059f4 <UART_SetConfig+0xd8>
 80059a6:	4b90      	ldr	r3, [pc, #576]	@ (8005be8 <UART_SetConfig+0x2cc>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d81b      	bhi.n	80059ec <UART_SetConfig+0xd0>
 80059b4:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <UART_SetConfig+0xa0>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059cd 	.word	0x080059cd
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d2:	e116      	b.n	8005c02 <UART_SetConfig+0x2e6>
 80059d4:	2302      	movs	r3, #2
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059da:	e112      	b.n	8005c02 <UART_SetConfig+0x2e6>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e2:	e10e      	b.n	8005c02 <UART_SetConfig+0x2e6>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ea:	e10a      	b.n	8005c02 <UART_SetConfig+0x2e6>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059f2:	e106      	b.n	8005c02 <UART_SetConfig+0x2e6>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a7c      	ldr	r2, [pc, #496]	@ (8005bec <UART_SetConfig+0x2d0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d138      	bne.n	8005a70 <UART_SetConfig+0x154>
 80059fe:	4b7a      	ldr	r3, [pc, #488]	@ (8005be8 <UART_SetConfig+0x2cc>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	d82d      	bhi.n	8005a68 <UART_SetConfig+0x14c>
 8005a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <UART_SetConfig+0xf8>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a49 	.word	0x08005a49
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a69 	.word	0x08005a69
 8005a24:	08005a59 	.word	0x08005a59
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a69 	.word	0x08005a69
 8005a30:	08005a69 	.word	0x08005a69
 8005a34:	08005a51 	.word	0x08005a51
 8005a38:	08005a69 	.word	0x08005a69
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a61 	.word	0x08005a61
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4e:	e0d8      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005a50:	2302      	movs	r3, #2
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a56:	e0d4      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5e:	e0d0      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a66:	e0cc      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6e:	e0c8      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5e      	ldr	r2, [pc, #376]	@ (8005bf0 <UART_SetConfig+0x2d4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d125      	bne.n	8005ac6 <UART_SetConfig+0x1aa>
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005be8 <UART_SetConfig+0x2cc>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a84:	2b30      	cmp	r3, #48	@ 0x30
 8005a86:	d016      	beq.n	8005ab6 <UART_SetConfig+0x19a>
 8005a88:	2b30      	cmp	r3, #48	@ 0x30
 8005a8a:	d818      	bhi.n	8005abe <UART_SetConfig+0x1a2>
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d00a      	beq.n	8005aa6 <UART_SetConfig+0x18a>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d814      	bhi.n	8005abe <UART_SetConfig+0x1a2>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <UART_SetConfig+0x182>
 8005a98:	2b10      	cmp	r3, #16
 8005a9a:	d008      	beq.n	8005aae <UART_SetConfig+0x192>
 8005a9c:	e00f      	b.n	8005abe <UART_SetConfig+0x1a2>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aa4:	e0ad      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aac:	e0a9      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005aae:	2304      	movs	r3, #4
 8005ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab4:	e0a5      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005abc:	e0a1      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005abe:	2310      	movs	r3, #16
 8005ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac4:	e09d      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a4a      	ldr	r2, [pc, #296]	@ (8005bf4 <UART_SetConfig+0x2d8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d125      	bne.n	8005b1c <UART_SetConfig+0x200>
 8005ad0:	4b45      	ldr	r3, [pc, #276]	@ (8005be8 <UART_SetConfig+0x2cc>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8005adc:	d016      	beq.n	8005b0c <UART_SetConfig+0x1f0>
 8005ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ae0:	d818      	bhi.n	8005b14 <UART_SetConfig+0x1f8>
 8005ae2:	2b80      	cmp	r3, #128	@ 0x80
 8005ae4:	d00a      	beq.n	8005afc <UART_SetConfig+0x1e0>
 8005ae6:	2b80      	cmp	r3, #128	@ 0x80
 8005ae8:	d814      	bhi.n	8005b14 <UART_SetConfig+0x1f8>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <UART_SetConfig+0x1d8>
 8005aee:	2b40      	cmp	r3, #64	@ 0x40
 8005af0:	d008      	beq.n	8005b04 <UART_SetConfig+0x1e8>
 8005af2:	e00f      	b.n	8005b14 <UART_SetConfig+0x1f8>
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afa:	e082      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b02:	e07e      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0a:	e07a      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b12:	e076      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1a:	e072      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a35      	ldr	r2, [pc, #212]	@ (8005bf8 <UART_SetConfig+0x2dc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d12a      	bne.n	8005b7c <UART_SetConfig+0x260>
 8005b26:	4b30      	ldr	r3, [pc, #192]	@ (8005be8 <UART_SetConfig+0x2cc>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b34:	d01a      	beq.n	8005b6c <UART_SetConfig+0x250>
 8005b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b3a:	d81b      	bhi.n	8005b74 <UART_SetConfig+0x258>
 8005b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b40:	d00c      	beq.n	8005b5c <UART_SetConfig+0x240>
 8005b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b46:	d815      	bhi.n	8005b74 <UART_SetConfig+0x258>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <UART_SetConfig+0x238>
 8005b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b50:	d008      	beq.n	8005b64 <UART_SetConfig+0x248>
 8005b52:	e00f      	b.n	8005b74 <UART_SetConfig+0x258>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5a:	e052      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b62:	e04e      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b64:	2304      	movs	r3, #4
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6a:	e04a      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b72:	e046      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b74:	2310      	movs	r3, #16
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7a:	e042      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a17      	ldr	r2, [pc, #92]	@ (8005be0 <UART_SetConfig+0x2c4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d13a      	bne.n	8005bfc <UART_SetConfig+0x2e0>
 8005b86:	4b18      	ldr	r3, [pc, #96]	@ (8005be8 <UART_SetConfig+0x2cc>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b94:	d01a      	beq.n	8005bcc <UART_SetConfig+0x2b0>
 8005b96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b9a:	d81b      	bhi.n	8005bd4 <UART_SetConfig+0x2b8>
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba0:	d00c      	beq.n	8005bbc <UART_SetConfig+0x2a0>
 8005ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba6:	d815      	bhi.n	8005bd4 <UART_SetConfig+0x2b8>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <UART_SetConfig+0x298>
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb0:	d008      	beq.n	8005bc4 <UART_SetConfig+0x2a8>
 8005bb2:	e00f      	b.n	8005bd4 <UART_SetConfig+0x2b8>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bba:	e022      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e01e      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e01a      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd2:	e016      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bda:	e012      	b.n	8005c02 <UART_SetConfig+0x2e6>
 8005bdc:	efff69f3 	.word	0xefff69f3
 8005be0:	40008000 	.word	0x40008000
 8005be4:	40013800 	.word	0x40013800
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40004400 	.word	0x40004400
 8005bf0:	40004800 	.word	0x40004800
 8005bf4:	40004c00 	.word	0x40004c00
 8005bf8:	40005000 	.word	0x40005000
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a9f      	ldr	r2, [pc, #636]	@ (8005e84 <UART_SetConfig+0x568>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d17a      	bne.n	8005d02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d824      	bhi.n	8005c5e <UART_SetConfig+0x342>
 8005c14:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x300>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c5f 	.word	0x08005c5f
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c5f 	.word	0x08005c5f
 8005c2c:	08005c4f 	.word	0x08005c4f
 8005c30:	08005c5f 	.word	0x08005c5f
 8005c34:	08005c5f 	.word	0x08005c5f
 8005c38:	08005c5f 	.word	0x08005c5f
 8005c3c:	08005c57 	.word	0x08005c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c40:	f7fd ff06 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 8005c44:	61f8      	str	r0, [r7, #28]
        break;
 8005c46:	e010      	b.n	8005c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c48:	4b8f      	ldr	r3, [pc, #572]	@ (8005e88 <UART_SetConfig+0x56c>)
 8005c4a:	61fb      	str	r3, [r7, #28]
        break;
 8005c4c:	e00d      	b.n	8005c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c4e:	f7fd fe67 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8005c52:	61f8      	str	r0, [r7, #28]
        break;
 8005c54:	e009      	b.n	8005c6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5a:	61fb      	str	r3, [r7, #28]
        break;
 8005c5c:	e005      	b.n	8005c6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80fb 	beq.w	8005e68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	4413      	add	r3, r2
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d305      	bcc.n	8005c8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d903      	bls.n	8005c96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c94:	e0e8      	b.n	8005e68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	461c      	mov	r4, r3
 8005c9c:	4615      	mov	r5, r2
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	022b      	lsls	r3, r5, #8
 8005ca8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005cac:	0222      	lsls	r2, r4, #8
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	6849      	ldr	r1, [r1, #4]
 8005cb2:	0849      	lsrs	r1, r1, #1
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	4688      	mov	r8, r1
 8005cb8:	4681      	mov	r9, r0
 8005cba:	eb12 0a08 	adds.w	sl, r2, r8
 8005cbe:	eb43 0b09 	adc.w	fp, r3, r9
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	f7fa fad4 	bl	8000280 <__aeabi_uldivmod>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4613      	mov	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ce6:	d308      	bcc.n	8005cfa <UART_SetConfig+0x3de>
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cee:	d204      	bcs.n	8005cfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	e0b6      	b.n	8005e68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d00:	e0b2      	b.n	8005e68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d0a:	d15e      	bne.n	8005dca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d828      	bhi.n	8005d66 <UART_SetConfig+0x44a>
 8005d14:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <UART_SetConfig+0x400>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d51 	.word	0x08005d51
 8005d28:	08005d67 	.word	0x08005d67
 8005d2c:	08005d57 	.word	0x08005d57
 8005d30:	08005d67 	.word	0x08005d67
 8005d34:	08005d67 	.word	0x08005d67
 8005d38:	08005d67 	.word	0x08005d67
 8005d3c:	08005d5f 	.word	0x08005d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d40:	f7fd fe86 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 8005d44:	61f8      	str	r0, [r7, #28]
        break;
 8005d46:	e014      	b.n	8005d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fd fe98 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8005d4c:	61f8      	str	r0, [r7, #28]
        break;
 8005d4e:	e010      	b.n	8005d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d50:	4b4d      	ldr	r3, [pc, #308]	@ (8005e88 <UART_SetConfig+0x56c>)
 8005d52:	61fb      	str	r3, [r7, #28]
        break;
 8005d54:	e00d      	b.n	8005d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d56:	f7fd fde3 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8005d5a:	61f8      	str	r0, [r7, #28]
        break;
 8005d5c:	e009      	b.n	8005d72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d62:	61fb      	str	r3, [r7, #28]
        break;
 8005d64:	e005      	b.n	8005d72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d077      	beq.n	8005e68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	005a      	lsls	r2, r3, #1
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	441a      	add	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b0f      	cmp	r3, #15
 8005d92:	d916      	bls.n	8005dc2 <UART_SetConfig+0x4a6>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d9a:	d212      	bcs.n	8005dc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f023 030f 	bic.w	r3, r3, #15
 8005da4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	8afb      	ldrh	r3, [r7, #22]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	8afa      	ldrh	r2, [r7, #22]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e052      	b.n	8005e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005dc8:	e04e      	b.n	8005e68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d827      	bhi.n	8005e22 <UART_SetConfig+0x506>
 8005dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <UART_SetConfig+0x4bc>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	08005e23 	.word	0x08005e23
 8005de8:	08005e13 	.word	0x08005e13
 8005dec:	08005e23 	.word	0x08005e23
 8005df0:	08005e23 	.word	0x08005e23
 8005df4:	08005e23 	.word	0x08005e23
 8005df8:	08005e1b 	.word	0x08005e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dfc:	f7fd fe28 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 8005e00:	61f8      	str	r0, [r7, #28]
        break;
 8005e02:	e014      	b.n	8005e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e04:	f7fd fe3a 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8005e08:	61f8      	str	r0, [r7, #28]
        break;
 8005e0a:	e010      	b.n	8005e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8005e88 <UART_SetConfig+0x56c>)
 8005e0e:	61fb      	str	r3, [r7, #28]
        break;
 8005e10:	e00d      	b.n	8005e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e12:	f7fd fd85 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8005e16:	61f8      	str	r0, [r7, #28]
        break;
 8005e18:	e009      	b.n	8005e2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e1e:	61fb      	str	r3, [r7, #28]
        break;
 8005e20:	e005      	b.n	8005e2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d019      	beq.n	8005e68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	085a      	lsrs	r2, r3, #1
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	441a      	add	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b0f      	cmp	r3, #15
 8005e4c:	d909      	bls.n	8005e62 <UART_SetConfig+0x546>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e54:	d205      	bcs.n	8005e62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	e002      	b.n	8005e68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3728      	adds	r7, #40	@ 0x28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e82:	bf00      	nop
 8005e84:	40008000 	.word	0x40008000
 8005e88:	00f42400 	.word	0x00f42400

08005e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8a:	d10a      	bne.n	8005fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b098      	sub	sp, #96	@ 0x60
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe0:	f7fc fa08 	bl	80023f4 <HAL_GetTick>
 8005fe4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d12e      	bne.n	8006052 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f88c 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d021      	beq.n	8006052 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800601c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006022:	653b      	str	r3, [r7, #80]	@ 0x50
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602c:	647b      	str	r3, [r7, #68]	@ 0x44
 800602e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800603a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e6      	bne.n	800600e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e062      	b.n	8006118 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b04      	cmp	r3, #4
 800605e:	d149      	bne.n	80060f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006068:	2200      	movs	r2, #0
 800606a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f856 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d03c      	beq.n	80060f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	623b      	str	r3, [r7, #32]
   return(result);
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800608e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006098:	633b      	str	r3, [r7, #48]	@ 0x30
 800609a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800609e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e6      	bne.n	800607a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3308      	adds	r3, #8
 80060b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3308      	adds	r3, #8
 80060ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060cc:	61fa      	str	r2, [r7, #28]
 80060ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e011      	b.n	8006118 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3758      	adds	r7, #88	@ 0x58
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006130:	e04f      	b.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d04b      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fc f95b 	bl	80023f4 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <UART_WaitOnFlagUntilTimeout+0x30>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e04e      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d037      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b80      	cmp	r3, #128	@ 0x80
 8006166:	d034      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b40      	cmp	r3, #64	@ 0x40
 800616c:	d031      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b08      	cmp	r3, #8
 800617a:	d110      	bne.n	800619e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2208      	movs	r2, #8
 8006182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f8ff 	bl	8006388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2208      	movs	r2, #8
 800618e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e029      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ac:	d111      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f8e5 	bl	8006388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e00f      	b.n	80061f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4013      	ands	r3, r2
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	bf0c      	ite	eq
 80061e2:	2301      	moveq	r3, #1
 80061e4:	2300      	movne	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d0a0      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b097      	sub	sp, #92	@ 0x5c
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	88fa      	ldrh	r2, [r7, #6]
 8006214:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	88fa      	ldrh	r2, [r7, #6]
 800621c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622e:	d10e      	bne.n	800624e <UART_Start_Receive_IT+0x52>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <UART_Start_Receive_IT+0x48>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800623e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006242:	e02d      	b.n	80062a0 <UART_Start_Receive_IT+0xa4>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	22ff      	movs	r2, #255	@ 0xff
 8006248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800624c:	e028      	b.n	80062a0 <UART_Start_Receive_IT+0xa4>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10d      	bne.n	8006272 <UART_Start_Receive_IT+0x76>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <UART_Start_Receive_IT+0x6c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	22ff      	movs	r2, #255	@ 0xff
 8006262:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006266:	e01b      	b.n	80062a0 <UART_Start_Receive_IT+0xa4>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	227f      	movs	r2, #127	@ 0x7f
 800626c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006270:	e016      	b.n	80062a0 <UART_Start_Receive_IT+0xa4>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800627a:	d10d      	bne.n	8006298 <UART_Start_Receive_IT+0x9c>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <UART_Start_Receive_IT+0x92>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	227f      	movs	r2, #127	@ 0x7f
 8006288:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800628c:	e008      	b.n	80062a0 <UART_Start_Receive_IT+0xa4>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	223f      	movs	r2, #63	@ 0x3f
 8006292:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006296:	e003      	b.n	80062a0 <UART_Start_Receive_IT+0xa4>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2222      	movs	r2, #34	@ 0x22
 80062ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3308      	adds	r3, #8
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80062d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80062de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e5      	bne.n	80062b0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ec:	d107      	bne.n	80062fe <UART_Start_Receive_IT+0x102>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a21      	ldr	r2, [pc, #132]	@ (8006380 <UART_Start_Receive_IT+0x184>)
 80062fa:	669a      	str	r2, [r3, #104]	@ 0x68
 80062fc:	e002      	b.n	8006304 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4a20      	ldr	r2, [pc, #128]	@ (8006384 <UART_Start_Receive_IT+0x188>)
 8006302:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d019      	beq.n	8006340 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800632a:	637b      	str	r3, [r7, #52]	@ 0x34
 800632c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006330:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e6      	bne.n	800630c <UART_Start_Receive_IT+0x110>
 800633e:	e018      	b.n	8006372 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	613b      	str	r3, [r7, #16]
   return(result);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f043 0320 	orr.w	r3, r3, #32
 8006354:	653b      	str	r3, [r7, #80]	@ 0x50
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	69f9      	ldr	r1, [r7, #28]
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	61bb      	str	r3, [r7, #24]
   return(result);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e6      	bne.n	8006340 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	375c      	adds	r7, #92	@ 0x5c
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	08006805 	.word	0x08006805
 8006384:	08006649 	.word	0x08006649

08006388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006388:	b480      	push	{r7}
 800638a:	b095      	sub	sp, #84	@ 0x54
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80063b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e6      	bne.n	8006390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3308      	adds	r3, #8
 80063c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e5      	bne.n	80063c2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d118      	bne.n	8006430 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	60bb      	str	r3, [r7, #8]
   return(result);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f023 0310 	bic.w	r3, r3, #16
 8006412:	647b      	str	r3, [r7, #68]	@ 0x44
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6979      	ldr	r1, [r7, #20]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	613b      	str	r3, [r7, #16]
   return(result);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006444:	bf00      	nop
 8006446:	3754      	adds	r7, #84	@ 0x54
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff fa3e 	bl	80058f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b08f      	sub	sp, #60	@ 0x3c
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006488:	2b21      	cmp	r3, #33	@ 0x21
 800648a:	d14c      	bne.n	8006526 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d132      	bne.n	80064fe <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e6      	bne.n	8006498 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064de:	633b      	str	r3, [r7, #48]	@ 0x30
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6979      	ldr	r1, [r7, #20]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	613b      	str	r3, [r7, #16]
   return(result);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e6      	bne.n	80064ca <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80064fc:	e013      	b.n	8006526 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006526:	bf00      	nop
 8006528:	373c      	adds	r7, #60	@ 0x3c
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006532:	b480      	push	{r7}
 8006534:	b091      	sub	sp, #68	@ 0x44
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800653e:	2b21      	cmp	r3, #33	@ 0x21
 8006540:	d151      	bne.n	80065e6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d132      	bne.n	80065b4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	623b      	str	r3, [r7, #32]
   return(result);
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006562:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656c:	633b      	str	r3, [r7, #48]	@ 0x30
 800656e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	60fb      	str	r3, [r7, #12]
   return(result);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006594:	637b      	str	r3, [r7, #52]	@ 0x34
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	69b9      	ldr	r1, [r7, #24]
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	617b      	str	r3, [r7, #20]
   return(result);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e6      	bne.n	8006580 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80065b2:	e018      	b.n	80065e6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80065ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065bc:	881a      	ldrh	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c6:	b292      	uxth	r2, r2
 80065c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ce:	1c9a      	adds	r2, r3, #2
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80065e6:	bf00      	nop
 80065e8:	3744      	adds	r7, #68	@ 0x44
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b088      	sub	sp, #32
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60bb      	str	r3, [r7, #8]
   return(result);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	613b      	str	r3, [r7, #16]
   return(result);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fb fd45 	bl	80020c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800663e:	bf00      	nop
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b09c      	sub	sp, #112	@ 0x70
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006656:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006660:	2b22      	cmp	r3, #34	@ 0x22
 8006662:	f040 80be 	bne.w	80067e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800666c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006670:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006674:	b2d9      	uxtb	r1, r3
 8006676:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800667a:	b2da      	uxtb	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006680:	400a      	ands	r2, r1
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 80a3 	bne.w	80067f6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e6      	bne.n	80066b0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006702:	647a      	str	r2, [r7, #68]	@ 0x44
 8006704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a34      	ldr	r2, [pc, #208]	@ (8006800 <UART_RxISR_8BIT+0x1b8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d01f      	beq.n	8006774 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d018      	beq.n	8006774 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	623b      	str	r3, [r7, #32]
   return(result);
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006756:	663b      	str	r3, [r7, #96]	@ 0x60
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006760:	633b      	str	r3, [r7, #48]	@ 0x30
 8006762:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800676e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006778:	2b01      	cmp	r3, #1
 800677a:	d12e      	bne.n	80067da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0310 	bic.w	r3, r3, #16
 8006796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	69b9      	ldr	r1, [r7, #24]
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	617b      	str	r3, [r7, #20]
   return(result);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e6      	bne.n	8006782 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b10      	cmp	r3, #16
 80067c0:	d103      	bne.n	80067ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2210      	movs	r2, #16
 80067c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff f896 	bl	8005904 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067d8:	e00d      	b.n	80067f6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fb fca4 	bl	8002128 <HAL_UART_RxCpltCallback>
}
 80067e0:	e009      	b.n	80067f6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	8b1b      	ldrh	r3, [r3, #24]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0208 	orr.w	r2, r2, #8
 80067f2:	b292      	uxth	r2, r2
 80067f4:	831a      	strh	r2, [r3, #24]
}
 80067f6:	bf00      	nop
 80067f8:	3770      	adds	r7, #112	@ 0x70
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40008000 	.word	0x40008000

08006804 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b09c      	sub	sp, #112	@ 0x70
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006812:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800681c:	2b22      	cmp	r3, #34	@ 0x22
 800681e:	f040 80be 	bne.w	800699e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006828:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006830:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006832:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006836:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800683a:	4013      	ands	r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006840:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	1c9a      	adds	r2, r3, #2
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	f040 80a3 	bne.w	80069b2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800687a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800687c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006880:	667b      	str	r3, [r7, #100]	@ 0x64
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800688a:	657b      	str	r3, [r7, #84]	@ 0x54
 800688c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006890:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e6      	bne.n	800686c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068be:	643a      	str	r2, [r7, #64]	@ 0x40
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e5      	bne.n	800689e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a34      	ldr	r2, [pc, #208]	@ (80069bc <UART_RxISR_16BIT+0x1b8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01f      	beq.n	8006930 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d018      	beq.n	8006930 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	61fb      	str	r3, [r7, #28]
   return(result);
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006912:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800691c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800691e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e6      	bne.n	80068fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006934:	2b01      	cmp	r3, #1
 8006936:	d12e      	bne.n	8006996 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	60bb      	str	r3, [r7, #8]
   return(result);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f023 0310 	bic.w	r3, r3, #16
 8006952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6979      	ldr	r1, [r7, #20]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	613b      	str	r3, [r7, #16]
   return(result);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e6      	bne.n	800693e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b10      	cmp	r3, #16
 800697c:	d103      	bne.n	8006986 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2210      	movs	r2, #16
 8006984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe ffb8 	bl	8005904 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006994:	e00d      	b.n	80069b2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fb fbc6 	bl	8002128 <HAL_UART_RxCpltCallback>
}
 800699c:	e009      	b.n	80069b2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	8b1b      	ldrh	r3, [r3, #24]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0208 	orr.w	r2, r2, #8
 80069ae:	b292      	uxth	r2, r2
 80069b0:	831a      	strh	r2, [r3, #24]
}
 80069b2:	bf00      	nop
 80069b4:	3770      	adds	r7, #112	@ 0x70
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40008000 	.word	0x40008000

080069c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	7992      	ldrb	r2, [r2, #6]
 80069e6:	08d2      	lsrs	r2, r2, #3
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	fb13 f302 	smulbb	r3, r3, r2
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	889b      	ldrh	r3, [r3, #4]
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	885b      	ldrh	r3, [r3, #2]
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	60da      	str	r2, [r3, #12]
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006a1a:	b490      	push	{r4, r7}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	4604      	mov	r4, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	1d39      	adds	r1, r7, #4
 8006a26:	e881 000c 	stmia.w	r1, {r2, r3}
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	81fb      	strh	r3, [r7, #14]
 8006a2e:	4603      	mov	r3, r0
 8006a30:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a3a:	88ba      	ldrh	r2, [r7, #4]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	da04      	bge.n	8006a4a <code+0x30>
        code |= LEFT;
 8006a40:	2201      	movs	r2, #1
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	75fb      	strb	r3, [r7, #23]
 8006a48:	e008      	b.n	8006a5c <code+0x42>
    } else if (x0 > window.x1) {
 8006a4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a4e:	893a      	ldrh	r2, [r7, #8]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	dd03      	ble.n	8006a5c <code+0x42>
        code |= RIGHT;
 8006a54:	2202      	movs	r2, #2
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006a5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a60:	88fa      	ldrh	r2, [r7, #6]
 8006a62:	4293      	cmp	r3, r2
 8006a64:	da04      	bge.n	8006a70 <code+0x56>
        code |= BOTTOM;
 8006a66:	2204      	movs	r2, #4
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	75fb      	strb	r3, [r7, #23]
 8006a6e:	e008      	b.n	8006a82 <code+0x68>
    } else if (y0 > window.y1) {
 8006a70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a74:	897a      	ldrh	r2, [r7, #10]
 8006a76:	4293      	cmp	r3, r2
 8006a78:	dd03      	ble.n	8006a82 <code+0x68>
        code |= TOP;
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc90      	pop	{r4, r7}
 8006a8c:	4770      	bx	lr

08006a8e <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b088      	sub	sp, #32
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006aa8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006aac:	cb0c      	ldmia	r3, {r2, r3}
 8006aae:	f7ff ffb4 	bl	8006a1a <code>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006ac6:	cb0c      	ldmia	r3, {r2, r3}
 8006ac8:	f7ff ffa7 	bl	8006a1a <code>
 8006acc:	4603      	mov	r3, r0
 8006ace:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006ad4:	7ffa      	ldrb	r2, [r7, #31]
 8006ad6:	7fbb      	ldrb	r3, [r7, #30]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	777b      	strb	r3, [r7, #29]
            break;
 8006ae4:	e0e9      	b.n	8006cba <clip_line+0x22c>
        } else if (code0 & code1) {
 8006ae6:	7ffa      	ldrb	r2, [r7, #31]
 8006ae8:	7fbb      	ldrb	r3, [r7, #30]
 8006aea:	4013      	ands	r3, r2
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 80e2 	bne.w	8006cb8 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006afc:	7ffb      	ldrb	r3, [r7, #31]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <clip_line+0x78>
 8006b02:	7ffb      	ldrb	r3, [r7, #31]
 8006b04:	e000      	b.n	8006b08 <clip_line+0x7a>
 8006b06:	7fbb      	ldrb	r3, [r7, #30]
 8006b08:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d024      	beq.n	8006b60 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b24:	4619      	mov	r1, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b2c:	1acb      	subs	r3, r1, r3
 8006b2e:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006b30:	4608      	mov	r0, r1
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b38:	1a41      	subs	r1, r0, r1
 8006b3a:	fb03 f101 	mul.w	r1, r3, r1
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b44:	4618      	mov	r0, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b4c:	1ac3      	subs	r3, r0, r3
 8006b4e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4413      	add	r3, r2
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006b5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b5c:	833b      	strh	r3, [r7, #24]
 8006b5e:	e07f      	b.n	8006c60 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006b60:	2204      	movs	r2, #4
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	4013      	ands	r3, r2
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d024      	beq.n	8006bb6 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b82:	1acb      	subs	r3, r1, r3
 8006b84:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006b86:	4608      	mov	r0, r1
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b8e:	1a41      	subs	r1, r0, r1
 8006b90:	fb03 f101 	mul.w	r1, r3, r1
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba2:	1ac3      	subs	r3, r0, r3
 8006ba4:	fb91 f3f3 	sdiv	r3, r1, r3
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006bb0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006bb2:	833b      	strh	r3, [r7, #24]
 8006bb4:	e054      	b.n	8006c60 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d024      	beq.n	8006c0c <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd8:	1acb      	subs	r3, r1, r3
 8006bda:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006bdc:	4608      	mov	r0, r1
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006be4:	1a41      	subs	r1, r0, r1
 8006be6:	fb03 f101 	mul.w	r1, r3, r1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf8:	1ac3      	subs	r3, r0, r3
 8006bfa:	fb91 f3f3 	sdiv	r3, r1, r3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006c06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c08:	837b      	strh	r3, [r7, #26]
 8006c0a:	e029      	b.n	8006c60 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	4013      	ands	r3, r2
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d023      	beq.n	8006c60 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c26:	4619      	mov	r1, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c2e:	1acb      	subs	r3, r1, r3
 8006c30:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006c32:	4608      	mov	r0, r1
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c3a:	1a41      	subs	r1, r0, r1
 8006c3c:	fb03 f101 	mul.w	r1, r3, r1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c46:	4618      	mov	r0, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c4e:	1ac3      	subs	r3, r0, r3
 8006c50:	fb91 f3f3 	sdiv	r3, r1, r3
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006c5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c5e:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006c60:	7dfa      	ldrb	r2, [r7, #23]
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d113      	bne.n	8006c90 <clip_line+0x202>
                *x0 = x;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8b7a      	ldrh	r2, [r7, #26]
 8006c6c:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	8b3a      	ldrh	r2, [r7, #24]
 8006c72:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c84:	cb0c      	ldmia	r3, {r2, r3}
 8006c86:	f7ff fec8 	bl	8006a1a <code>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	77fb      	strb	r3, [r7, #31]
 8006c8e:	e721      	b.n	8006ad4 <clip_line+0x46>
            } else {
                *x1 = x;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8b7a      	ldrh	r2, [r7, #26]
 8006c94:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	8b3a      	ldrh	r2, [r7, #24]
 8006c9a:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006cac:	cb0c      	ldmia	r3, {r2, r3}
 8006cae:	f7ff feb4 	bl	8006a1a <code>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006cb6:	e70d      	b.n	8006ad4 <clip_line+0x46>
            break;
 8006cb8:	bf00      	nop
            }
        }
    }

    return accept;
 8006cba:	7f7b      	ldrb	r3, [r7, #29]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3720      	adds	r7, #32
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	3306      	adds	r3, #6
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	f001 f9ea 	bl	80080b0 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	330e      	adds	r3, #14
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	330f      	adds	r3, #15
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	3310      	adds	r3, #16
 8006cf4:	781a      	ldrb	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	72da      	strb	r2, [r3, #11]

    return 0;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	@ 0x38
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006d10:	f107 0314 	add.w	r3, r7, #20
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff ffd4 	bl	8006cc4 <fontx_meta>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006d22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <fontx_glyph+0x2c>
        return status;
 8006d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d2e:	e077      	b.n	8006e20 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006d30:	7f7a      	ldrb	r2, [r7, #29]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006d36:	7fba      	ldrb	r2, [r7, #30]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006d3c:	7f7b      	ldrb	r3, [r7, #29]
 8006d3e:	3307      	adds	r3, #7
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da00      	bge.n	8006d46 <fontx_glyph+0x42>
 8006d44:	3307      	adds	r3, #7
 8006d46:	10db      	asrs	r3, r3, #3
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	78da      	ldrb	r2, [r3, #3]
 8006d52:	7fbb      	ldrb	r3, [r7, #30]
 8006d54:	fb12 f303 	smulbb	r3, r2, r3
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006d5e:	7ffb      	ldrb	r3, [r7, #31]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10f      	bne.n	8006d84 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2bff      	cmp	r3, #255	@ 0xff
 8006d68:	d859      	bhi.n	8006e1e <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	789b      	ldrb	r3, [r3, #2]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	fb02 f303 	mul.w	r3, r2, r3
 8006d76:	3311      	adds	r3, #17
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e04d      	b.n	8006e20 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3312      	adds	r3, #18
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3311      	adds	r3, #17
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006d96:	e03d      	b.n	8006e14 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da0:	3301      	adds	r3, #1
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	4413      	add	r3, r2
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dac:	3302      	adds	r3, #2
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db4:	3303      	adds	r3, #3
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	4413      	add	r3, r2
 8006dbc:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d31c      	bcc.n	8006e00 <fontx_glyph+0xfc>
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d818      	bhi.n	8006e00 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dd6:	4413      	add	r3, r2
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3311      	adds	r3, #17
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	461a      	mov	r2, r3
                    nc * glyph->size
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	789b      	ldrb	r3, [r3, #2]
 8006de8:	4619      	mov	r1, r3
 8006dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006df0:	4413      	add	r3, r2
 8006df2:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	441a      	add	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e00f      	b.n	8006e20 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006e00:	6a3a      	ldr	r2, [r7, #32]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e08:	4413      	add	r3, r2
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	3304      	adds	r3, #4
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	1e5a      	subs	r2, r3, #1
 8006e18:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1bc      	bne.n	8006d98 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4618      	mov	r0, r3
 8006e22:	3738      	adds	r7, #56	@ 0x38
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	dd01      	ble.n	8006e3e <min+0x16>
        return b;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	e000      	b.n	8006e40 <min+0x18>
    };
    return a;
 8006e3e:	687b      	ldr	r3, [r7, #4]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <max>:

static inline int max(int a, int b) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	dd01      	ble.n	8006e62 <max+0x16>
        return a;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	e000      	b.n	8006e64 <max+0x18>
    }
    return b;
 8006e62:	683b      	ldr	r3, [r7, #0]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	80fb      	strh	r3, [r7, #6]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	80bb      	strh	r3, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e86:	4a12      	ldr	r2, [pc, #72]	@ (8006ed0 <hagl_put_pixel+0x60>)
 8006e88:	8812      	ldrh	r2, [r2, #0]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	db1a      	blt.n	8006ec4 <hagl_put_pixel+0x54>
 8006e8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e92:	4a0f      	ldr	r2, [pc, #60]	@ (8006ed0 <hagl_put_pixel+0x60>)
 8006e94:	8852      	ldrh	r2, [r2, #2]
 8006e96:	4293      	cmp	r3, r2
 8006e98:	db14      	blt.n	8006ec4 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed0 <hagl_put_pixel+0x60>)
 8006ea0:	8892      	ldrh	r2, [r2, #4]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	dc10      	bgt.n	8006ec8 <hagl_put_pixel+0x58>
 8006ea6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006eaa:	4a09      	ldr	r2, [pc, #36]	@ (8006ed0 <hagl_put_pixel+0x60>)
 8006eac:	88d2      	ldrh	r2, [r2, #6]
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	dc0a      	bgt.n	8006ec8 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006eba:	887a      	ldrh	r2, [r7, #2]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fa fe49 	bl	8001b54 <lcdPutPixel>
 8006ec2:	e002      	b.n	8006eca <hagl_put_pixel+0x5a>
        return;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <hagl_put_pixel+0x5a>
        return;
 8006ec8:	bf00      	nop
}
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	2000020c 	.word	0x2000020c

08006ed4 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	4604      	mov	r4, r0
 8006edc:	4608      	mov	r0, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4623      	mov	r3, r4
 8006ee4:	80fb      	strh	r3, [r7, #6]
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	80bb      	strh	r3, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	807b      	strh	r3, [r7, #2]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	887b      	ldrh	r3, [r7, #2]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	b21a      	sxth	r2, r3
 8006efc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006f00:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f04:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006f08:	883b      	ldrh	r3, [r7, #0]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	f000 f827 	bl	8006f60 <hagl_draw_line>
#endif
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd90      	pop	{r4, r7, pc}

08006f1a <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006f1a:	b590      	push	{r4, r7, lr}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af02      	add	r7, sp, #8
 8006f20:	4604      	mov	r4, r0
 8006f22:	4608      	mov	r0, r1
 8006f24:	4611      	mov	r1, r2
 8006f26:	461a      	mov	r2, r3
 8006f28:	4623      	mov	r3, r4
 8006f2a:	80fb      	strh	r3, [r7, #6]
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	80bb      	strh	r3, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
 8006f34:	4613      	mov	r3, r2
 8006f36:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006f38:	88ba      	ldrh	r2, [r7, #4]
 8006f3a:	887b      	ldrh	r3, [r7, #2]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	b21c      	sxth	r4, r3
 8006f42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006f4e:	883b      	ldrh	r3, [r7, #0]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	4623      	mov	r3, r4
 8006f54:	f000 f804 	bl	8006f60 <hagl_draw_line>
#endif
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}

08006f60 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	b089      	sub	sp, #36	@ 0x24
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	4604      	mov	r4, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4623      	mov	r3, r4
 8006f70:	80fb      	strh	r3, [r7, #6]
 8006f72:	4603      	mov	r3, r0
 8006f74:	80bb      	strh	r3, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	807b      	strh	r3, [r7, #2]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006f7e:	463b      	mov	r3, r7
 8006f80:	1cba      	adds	r2, r7, #2
 8006f82:	1d3d      	adds	r5, r7, #4
 8006f84:	1dbc      	adds	r4, r7, #6
 8006f86:	494a      	ldr	r1, [pc, #296]	@ (80070b0 <hagl_draw_line+0x150>)
 8006f88:	466e      	mov	r6, sp
 8006f8a:	c903      	ldmia	r1, {r0, r1}
 8006f8c:	e886 0003 	stmia.w	r6, {r0, r1}
 8006f90:	4629      	mov	r1, r5
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fd7b 	bl	8006a8e <clip_line>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f083 0301 	eor.w	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d17e      	bne.n	80070a2 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006fa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bfb8      	it	lt
 8006fb4:	425b      	neglt	r3, r3
 8006fb6:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006fb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	da01      	bge.n	8006fc8 <hagl_draw_line+0x68>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e001      	b.n	8006fcc <hagl_draw_line+0x6c>
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006fce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfb8      	it	lt
 8006fde:	425b      	neglt	r3, r3
 8006fe0:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006fe2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006fe6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	da01      	bge.n	8006ff2 <hagl_draw_line+0x92>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e001      	b.n	8006ff6 <hagl_draw_line+0x96>
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006ff8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006ffc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	dd06      	ble.n	8007012 <hagl_draw_line+0xb2>
 8007004:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007008:	0fda      	lsrs	r2, r3, #31
 800700a:	4413      	add	r3, r2
 800700c:	105b      	asrs	r3, r3, #1
 800700e:	b21b      	sxth	r3, r3
 8007010:	e006      	b.n	8007020 <hagl_draw_line+0xc0>
 8007012:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007016:	0fda      	lsrs	r2, r3, #31
 8007018:	4413      	add	r3, r2
 800701a:	105b      	asrs	r3, r3, #1
 800701c:	425b      	negs	r3, r3
 800701e:	b21b      	sxth	r3, r3
 8007020:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8007022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007026:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800702a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff ff1f 	bl	8006e70 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8007032:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800703a:	429a      	cmp	r2, r3
 800703c:	d105      	bne.n	800704a <hagl_draw_line+0xea>
 800703e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007042:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007046:	429a      	cmp	r2, r3
 8007048:	d02d      	beq.n	80070a6 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 800704a:	8afb      	ldrh	r3, [r7, #22]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	b29b      	uxth	r3, r3
 8007050:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8007052:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007056:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800705a:	425b      	negs	r3, r3
 800705c:	429a      	cmp	r2, r3
 800705e:	dd0c      	ble.n	800707a <hagl_draw_line+0x11a>
            err -= dy;
 8007060:	8afa      	ldrh	r2, [r7, #22]
 8007062:	8a3b      	ldrh	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	b29b      	uxth	r3, r3
 8007068:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 800706a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800706e:	b29a      	uxth	r2, r3
 8007070:	8a7b      	ldrh	r3, [r7, #18]
 8007072:	4413      	add	r3, r2
 8007074:	b29b      	uxth	r3, r3
 8007076:	b21b      	sxth	r3, r3
 8007078:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800707a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800707e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007082:	429a      	cmp	r2, r3
 8007084:	dacd      	bge.n	8007022 <hagl_draw_line+0xc2>
            err += dx;
 8007086:	8afa      	ldrh	r2, [r7, #22]
 8007088:	8abb      	ldrh	r3, [r7, #20]
 800708a:	4413      	add	r3, r2
 800708c:	b29b      	uxth	r3, r3
 800708e:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8007090:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007094:	b29a      	uxth	r2, r3
 8007096:	89fb      	ldrh	r3, [r7, #14]
 8007098:	4413      	add	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	b21b      	sxth	r3, r3
 800709e:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80070a0:	e7bf      	b.n	8007022 <hagl_draw_line+0xc2>
        return;
 80070a2:	bf00      	nop
 80070a4:	e000      	b.n	80070a8 <hagl_draw_line+0x148>
            break;
 80070a6:	bf00      	nop
        }
    }
}
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2000020c 	.word	0x2000020c

080070b4 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80070b4:	b590      	push	{r4, r7, lr}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	4623      	mov	r3, r4
 80070c4:	80fb      	strh	r3, [r7, #6]
 80070c6:	4603      	mov	r3, r0
 80070c8:	80bb      	strh	r3, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	807b      	strh	r3, [r7, #2]
 80070ce:	4613      	mov	r3, r2
 80070d0:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80070d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070da:	429a      	cmp	r2, r3
 80070dc:	dd0e      	ble.n	80070fc <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	887b      	ldrh	r3, [r7, #2]
 80070e2:	4413      	add	r3, r2
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 80070e8:	88fa      	ldrh	r2, [r7, #6]
 80070ea:	887b      	ldrh	r3, [r7, #2]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	887b      	ldrh	r3, [r7, #2]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80070fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007100:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007104:	429a      	cmp	r2, r3
 8007106:	dd0e      	ble.n	8007126 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8007108:	88ba      	ldrh	r2, [r7, #4]
 800710a:	883b      	ldrh	r3, [r7, #0]
 800710c:	4413      	add	r3, r2
 800710e:	b29b      	uxth	r3, r3
 8007110:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007112:	88ba      	ldrh	r2, [r7, #4]
 8007114:	883b      	ldrh	r3, [r7, #0]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	b29b      	uxth	r3, r3
 800711a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800711c:	88ba      	ldrh	r2, [r7, #4]
 800711e:	883b      	ldrh	r3, [r7, #0]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	b29b      	uxth	r3, r3
 8007124:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007126:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800712a:	4a24      	ldr	r2, [pc, #144]	@ (80071bc <hagl_draw_rectangle+0x108>)
 800712c:	8812      	ldrh	r2, [r2, #0]
 800712e:	4293      	cmp	r3, r2
 8007130:	db3e      	blt.n	80071b0 <hagl_draw_rectangle+0xfc>
 8007132:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007136:	4a21      	ldr	r2, [pc, #132]	@ (80071bc <hagl_draw_rectangle+0x108>)
 8007138:	8852      	ldrh	r2, [r2, #2]
 800713a:	4293      	cmp	r3, r2
 800713c:	db38      	blt.n	80071b0 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800713e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007142:	4a1e      	ldr	r2, [pc, #120]	@ (80071bc <hagl_draw_rectangle+0x108>)
 8007144:	8892      	ldrh	r2, [r2, #4]
 8007146:	4293      	cmp	r3, r2
 8007148:	dc34      	bgt.n	80071b4 <hagl_draw_rectangle+0x100>
 800714a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800714e:	4a1b      	ldr	r2, [pc, #108]	@ (80071bc <hagl_draw_rectangle+0x108>)
 8007150:	88d2      	ldrh	r2, [r2, #6]
 8007152:	4293      	cmp	r3, r2
 8007154:	dc2e      	bgt.n	80071b4 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8007156:	887a      	ldrh	r2, [r7, #2]
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	b29b      	uxth	r3, r3
 800715e:	3301      	adds	r3, #1
 8007160:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 8007162:	883a      	ldrh	r2, [r7, #0]
 8007164:	88bb      	ldrh	r3, [r7, #4]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	b29b      	uxth	r3, r3
 800716a:	3301      	adds	r3, #1
 800716c:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800716e:	8c3b      	ldrh	r3, [r7, #32]
 8007170:	89fa      	ldrh	r2, [r7, #14]
 8007172:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007176:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800717a:	f7ff feab 	bl	8006ed4 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800717e:	8c3b      	ldrh	r3, [r7, #32]
 8007180:	89fa      	ldrh	r2, [r7, #14]
 8007182:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007186:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800718a:	f7ff fea3 	bl	8006ed4 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800718e:	8c3b      	ldrh	r3, [r7, #32]
 8007190:	89ba      	ldrh	r2, [r7, #12]
 8007192:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007196:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800719a:	f7ff febe 	bl	8006f1a <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800719e:	8c3b      	ldrh	r3, [r7, #32]
 80071a0:	89ba      	ldrh	r2, [r7, #12]
 80071a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071a6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80071aa:	f7ff feb6 	bl	8006f1a <hagl_draw_vline>
 80071ae:	e002      	b.n	80071b6 <hagl_draw_rectangle+0x102>
        return;
 80071b0:	bf00      	nop
 80071b2:	e000      	b.n	80071b6 <hagl_draw_rectangle+0x102>
        return;
 80071b4:	bf00      	nop
}
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd90      	pop	{r4, r7, pc}
 80071bc:	2000020c 	.word	0x2000020c

080071c0 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	4623      	mov	r3, r4
 80071d0:	80fb      	strh	r3, [r7, #6]
 80071d2:	4603      	mov	r3, r0
 80071d4:	80bb      	strh	r3, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	807b      	strh	r3, [r7, #2]
 80071da:	4613      	mov	r3, r2
 80071dc:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80071de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80071e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	dd0e      	ble.n	8007208 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 80071ea:	88fa      	ldrh	r2, [r7, #6]
 80071ec:	887b      	ldrh	r3, [r7, #2]
 80071ee:	4413      	add	r3, r2
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 80071f4:	88fa      	ldrh	r2, [r7, #6]
 80071f6:	887b      	ldrh	r3, [r7, #2]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	887b      	ldrh	r3, [r7, #2]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	b29b      	uxth	r3, r3
 8007206:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007208:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800720c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007210:	429a      	cmp	r2, r3
 8007212:	dd0e      	ble.n	8007232 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007214:	88ba      	ldrh	r2, [r7, #4]
 8007216:	883b      	ldrh	r3, [r7, #0]
 8007218:	4413      	add	r3, r2
 800721a:	b29b      	uxth	r3, r3
 800721c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800721e:	88ba      	ldrh	r2, [r7, #4]
 8007220:	883b      	ldrh	r3, [r7, #0]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	b29b      	uxth	r3, r3
 8007226:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007228:	88ba      	ldrh	r2, [r7, #4]
 800722a:	883b      	ldrh	r3, [r7, #0]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	b29b      	uxth	r3, r3
 8007230:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007232:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007236:	4a33      	ldr	r2, [pc, #204]	@ (8007304 <hagl_fill_rectangle+0x144>)
 8007238:	8812      	ldrh	r2, [r2, #0]
 800723a:	4293      	cmp	r3, r2
 800723c:	db5b      	blt.n	80072f6 <hagl_fill_rectangle+0x136>
 800723e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007242:	4a30      	ldr	r2, [pc, #192]	@ (8007304 <hagl_fill_rectangle+0x144>)
 8007244:	8852      	ldrh	r2, [r2, #2]
 8007246:	4293      	cmp	r3, r2
 8007248:	db55      	blt.n	80072f6 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800724a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800724e:	4a2d      	ldr	r2, [pc, #180]	@ (8007304 <hagl_fill_rectangle+0x144>)
 8007250:	8892      	ldrh	r2, [r2, #4]
 8007252:	4293      	cmp	r3, r2
 8007254:	dc51      	bgt.n	80072fa <hagl_fill_rectangle+0x13a>
 8007256:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800725a:	4a2a      	ldr	r2, [pc, #168]	@ (8007304 <hagl_fill_rectangle+0x144>)
 800725c:	88d2      	ldrh	r2, [r2, #6]
 800725e:	4293      	cmp	r3, r2
 8007260:	dc4b      	bgt.n	80072fa <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8007262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007266:	4a27      	ldr	r2, [pc, #156]	@ (8007304 <hagl_fill_rectangle+0x144>)
 8007268:	8812      	ldrh	r2, [r2, #0]
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fded 	bl	8006e4c <max>
 8007272:	4603      	mov	r3, r0
 8007274:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8007276:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800727a:	4a22      	ldr	r2, [pc, #136]	@ (8007304 <hagl_fill_rectangle+0x144>)
 800727c:	8852      	ldrh	r2, [r2, #2]
 800727e:	4611      	mov	r1, r2
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff fde3 	bl	8006e4c <max>
 8007286:	4603      	mov	r3, r0
 8007288:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800728a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800728e:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <hagl_fill_rectangle+0x144>)
 8007290:	8892      	ldrh	r2, [r2, #4]
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fdc7 	bl	8006e28 <min>
 800729a:	4603      	mov	r3, r0
 800729c:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800729e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072a2:	4a18      	ldr	r2, [pc, #96]	@ (8007304 <hagl_fill_rectangle+0x144>)
 80072a4:	88d2      	ldrh	r2, [r2, #6]
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff fdbd 	bl	8006e28 <min>
 80072ae:	4603      	mov	r3, r0
 80072b0:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80072b2:	887a      	ldrh	r2, [r7, #2]
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3301      	adds	r3, #1
 80072bc:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80072be:	883a      	ldrh	r2, [r7, #0]
 80072c0:	88bb      	ldrh	r3, [r7, #4]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3301      	adds	r3, #1
 80072c8:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80072ca:	2300      	movs	r3, #0
 80072cc:	81fb      	strh	r3, [r7, #14]
 80072ce:	e00d      	b.n	80072ec <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80072d0:	88ba      	ldrh	r2, [r7, #4]
 80072d2:	89fb      	ldrh	r3, [r7, #14]
 80072d4:	4413      	add	r3, r2
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	b219      	sxth	r1, r3
 80072da:	8c3b      	ldrh	r3, [r7, #32]
 80072dc:	89ba      	ldrh	r2, [r7, #12]
 80072de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072e2:	f7ff fdf7 	bl	8006ed4 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 80072e6:	89fb      	ldrh	r3, [r7, #14]
 80072e8:	3301      	adds	r3, #1
 80072ea:	81fb      	strh	r3, [r7, #14]
 80072ec:	89fa      	ldrh	r2, [r7, #14]
 80072ee:	897b      	ldrh	r3, [r7, #10]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d3ed      	bcc.n	80072d0 <hagl_fill_rectangle+0x110>
 80072f4:	e002      	b.n	80072fc <hagl_fill_rectangle+0x13c>
        return;
 80072f6:	bf00      	nop
 80072f8:	e000      	b.n	80072fc <hagl_fill_rectangle+0x13c>
        return;
 80072fa:	bf00      	nop
#endif
    }
}
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd90      	pop	{r4, r7, pc}
 8007302:	bf00      	nop
 8007304:	2000020c 	.word	0x2000020c

08007308 <hagl_put_char>:
    }

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font) {
 8007308:	b590      	push	{r4, r7, lr}
 800730a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800730e:	b081      	sub	sp, #4
 8007310:	af00      	add	r7, sp, #0
 8007312:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8007316:	f844 0c34 	str.w	r0, [r4, #-52]
 800731a:	460c      	mov	r4, r1
 800731c:	4610      	mov	r0, r2
 800731e:	4619      	mov	r1, r3
 8007320:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007324:	4622      	mov	r2, r4
 8007326:	f823 2c36 	strh.w	r2, [r3, #-54]
 800732a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800732e:	4602      	mov	r2, r0
 8007330:	f823 2c38 	strh.w	r2, [r3, #-56]
 8007334:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007338:	460a      	mov	r2, r1
 800733a:	f823 2c3a 	strh.w	r2, [r3, #-58]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800733e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007342:	4619      	mov	r1, r3
 8007344:	f107 0320 	add.w	r3, r7, #32
 8007348:	3b10      	subs	r3, #16
 800734a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800734e:	f102 0210 	add.w	r2, r2, #16
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	f851 1c34 	ldr.w	r1, [r1, #-52]
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fcd3 	bl	8006d04 <fontx_glyph>
 800735e:	4603      	mov	r3, r0
 8007360:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007364:	f102 0215 	add.w	r2, r2, #21
 8007368:	7013      	strb	r3, [r2, #0]
    if (0 != status) {
 800736a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800736e:	f103 0315 	add.w	r3, r3, #21
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <hagl_put_char+0x74>
        return 0;
 8007378:	2300      	movs	r3, #0
 800737a:	e1ac      	b.n	80076d6 <hagl_put_char+0x3ce>
    }

    bitmap.width = glyph.width;
 800737c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007380:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007384:	461a      	mov	r2, r3
 8007386:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800738a:	f823 2c28 	strh.w	r2, [r3, #-40]
    bitmap.height = glyph.height;
 800738e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007392:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8007396:	461a      	mov	r2, r3
 8007398:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800739c:	f823 2c26 	strh.w	r2, [r3, #-38]
    bitmap.depth = DISPLAY_DEPTH;
 80073a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073a4:	2210      	movs	r2, #16
 80073a6:	f803 2c22 	strb.w	r2, [r3, #-34]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80073aa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80073ae:	3a18      	subs	r2, #24
 80073b0:	f107 0320 	add.w	r3, r7, #32
 80073b4:	3b08      	subs	r3, #8
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fb0b 	bl	80069d4 <bitmap_init>
    color_t *ptr = (color_t *) bitmap.buffer;
 80073be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073c2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80073c6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073ca:	f102 021c 	add.w	r2, r2, #28
 80073ce:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80073d0:	2300      	movs	r3, #0
 80073d2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073d6:	f102 021b 	add.w	r2, r2, #27
 80073da:	7013      	strb	r3, [r2, #0]
 80073dc:	e071      	b.n	80074c2 <hagl_put_char+0x1ba>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80073de:	2300      	movs	r3, #0
 80073e0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073e4:	f102 021a 	add.w	r2, r2, #26
 80073e8:	7013      	strb	r3, [r2, #0]
 80073ea:	e047      	b.n	800747c <hagl_put_char+0x174>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 80073ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b25a      	sxtb	r2, r3
 80073f8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073fc:	f103 031a 	add.w	r3, r3, #26
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2180      	movs	r1, #128	@ 0x80
 8007408:	fa41 f303 	asr.w	r3, r1, r3
 800740c:	b25b      	sxtb	r3, r3
 800740e:	4013      	ands	r3, r2
 8007410:	b25b      	sxtb	r3, r3
 8007412:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007416:	f102 0209 	add.w	r2, r2, #9
 800741a:	7013      	strb	r3, [r2, #0]
            if (set) {
 800741c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007420:	f103 0309 	add.w	r3, r3, #9
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d010      	beq.n	800744c <hagl_put_char+0x144>
                *(ptr++) = color;
 800742a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800742e:	f103 031c 	add.w	r3, r3, #28
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800743a:	f101 011c 	add.w	r1, r1, #28
 800743e:	600a      	str	r2, [r1, #0]
 8007440:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007444:	f832 2c3a 	ldrh.w	r2, [r2, #-58]
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e00c      	b.n	8007466 <hagl_put_char+0x15e>
            } else {
                *(ptr++) = 0x0000;
 800744c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007450:	f103 031c 	add.w	r3, r3, #28
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	1c9a      	adds	r2, r3, #2
 8007458:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800745c:	f101 011c 	add.w	r1, r1, #28
 8007460:	600a      	str	r2, [r1, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007466:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800746a:	f103 031a 	add.w	r3, r3, #26
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007476:	f102 021a 	add.w	r2, r2, #26
 800747a:	7013      	strb	r3, [r2, #0]
 800747c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007480:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007484:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007488:	f102 021a 	add.w	r2, r2, #26
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d3ac      	bcc.n	80073ec <hagl_put_char+0xe4>
            }
        }
        glyph.buffer += glyph.pitch;
 8007492:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007496:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800749a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800749e:	f812 2c2d 	ldrb.w	r2, [r2, #-45]
 80074a2:	4413      	add	r3, r2
 80074a4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80074a8:	f842 3c2c 	str.w	r3, [r2, #-44]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80074ac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074b0:	f103 031b 	add.w	r3, r3, #27
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074bc:	f102 021b 	add.w	r2, r2, #27
 80074c0:	7013      	strb	r3, [r2, #0]
 80074c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074c6:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 80074ca:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074ce:	f102 021b 	add.w	r2, r2, #27
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d382      	bcc.n	80073de <hagl_put_char+0xd6>
    }

    // Modyfikacja: obsługa częściowego wyświetlania znaku
    int16_t start_x = max(0, -x0);
 80074d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074dc:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 80074e0:	425b      	negs	r3, r3
 80074e2:	4619      	mov	r1, r3
 80074e4:	2000      	movs	r0, #0
 80074e6:	f7ff fcb1 	bl	8006e4c <max>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074f0:	f102 0212 	add.w	r2, r2, #18
 80074f4:	8013      	strh	r3, [r2, #0]
    int16_t start_y = max(0, -y0);
 80074f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074fa:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80074fe:	425b      	negs	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	2000      	movs	r0, #0
 8007504:	f7ff fca2 	bl	8006e4c <max>
 8007508:	4603      	mov	r3, r0
 800750a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800750e:	f102 0210 	add.w	r2, r2, #16
 8007512:	8013      	strh	r3, [r2, #0]
    int16_t end_x = min(bitmap.width, LCD_WIDTH - x0);
 8007514:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007518:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 800751c:	461a      	mov	r2, r3
 800751e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007522:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 8007526:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f7ff fc7b 	bl	8006e28 <min>
 8007532:	4603      	mov	r3, r0
 8007534:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007538:	f102 020e 	add.w	r2, r2, #14
 800753c:	8013      	strh	r3, [r2, #0]
    int16_t end_y = min(bitmap.height, LCD_HEIGHT - y0);
 800753e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007542:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 8007546:	461a      	mov	r2, r3
 8007548:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800754c:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8007550:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f7ff fc66 	bl	8006e28 <min>
 800755c:	4603      	mov	r3, r0
 800755e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007562:	f102 020c 	add.w	r2, r2, #12
 8007566:	8013      	strh	r3, [r2, #0]

    if (start_x < end_x && start_y < end_y) {
 8007568:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800756c:	f103 0312 	add.w	r3, r3, #18
 8007570:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007574:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007578:	f103 030e 	add.w	r3, r3, #14
 800757c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007580:	429a      	cmp	r2, r3
 8007582:	f280 80a3 	bge.w	80076cc <hagl_put_char+0x3c4>
 8007586:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800758a:	f103 0310 	add.w	r3, r3, #16
 800758e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007592:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007596:	f103 030c 	add.w	r3, r3, #12
 800759a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800759e:	429a      	cmp	r2, r3
 80075a0:	f280 8094 	bge.w	80076cc <hagl_put_char+0x3c4>
        for (int16_t y = start_y; y < end_y; y++) {
 80075a4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075a8:	f103 0310 	add.w	r3, r3, #16
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80075b2:	f102 0218 	add.w	r2, r2, #24
 80075b6:	8013      	strh	r3, [r2, #0]
 80075b8:	e079      	b.n	80076ae <hagl_put_char+0x3a6>
            for (int16_t x = start_x; x < end_x; x++) {
 80075ba:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075be:	f103 0312 	add.w	r3, r3, #18
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80075c8:	f102 0216 	add.w	r2, r2, #22
 80075cc:	8013      	strh	r3, [r2, #0]
 80075ce:	e052      	b.n	8007676 <hagl_put_char+0x36e>
                color_t pixel = buffer[y * bitmap.width + x];
 80075d0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075d4:	f103 0318 	add.w	r3, r3, #24
 80075d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075dc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80075e0:	f832 2c28 	ldrh.w	r2, [r2, #-40]
 80075e4:	fb03 f202 	mul.w	r2, r3, r2
 80075e8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075ec:	f103 0316 	add.w	r3, r3, #22
 80075f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075f4:	4413      	add	r3, r2
 80075f6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007602:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007606:	f102 020a 	add.w	r2, r2, #10
 800760a:	8013      	strh	r3, [r2, #0]
                if (pixel != 0x0000) { // tylko nieprzezroczyste piksele
 800760c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007610:	f103 030a 	add.w	r3, r3, #10
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01f      	beq.n	800765a <hagl_put_char+0x352>
                    hagl_put_pixel(x0 + x, y0 + y, pixel);
 800761a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800761e:	f833 2c36 	ldrh.w	r2, [r3, #-54]
 8007622:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007626:	f103 0316 	add.w	r3, r3, #22
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	4413      	add	r3, r2
 800762e:	b29b      	uxth	r3, r3
 8007630:	b218      	sxth	r0, r3
 8007632:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007636:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 800763a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800763e:	f103 0318 	add.w	r3, r3, #24
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	4413      	add	r3, r2
 8007646:	b29b      	uxth	r3, r3
 8007648:	b21b      	sxth	r3, r3
 800764a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800764e:	f102 020a 	add.w	r2, r2, #10
 8007652:	8812      	ldrh	r2, [r2, #0]
 8007654:	4619      	mov	r1, r3
 8007656:	f7ff fc0b 	bl	8006e70 <hagl_put_pixel>
            for (int16_t x = start_x; x < end_x; x++) {
 800765a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800765e:	f103 0316 	add.w	r3, r3, #22
 8007662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007666:	b29b      	uxth	r3, r3
 8007668:	3301      	adds	r3, #1
 800766a:	b29b      	uxth	r3, r3
 800766c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007670:	f102 0216 	add.w	r2, r2, #22
 8007674:	8013      	strh	r3, [r2, #0]
 8007676:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800767a:	f103 0316 	add.w	r3, r3, #22
 800767e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007682:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007686:	f103 030e 	add.w	r3, r3, #14
 800768a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800768e:	429a      	cmp	r2, r3
 8007690:	db9e      	blt.n	80075d0 <hagl_put_char+0x2c8>
        for (int16_t y = start_y; y < end_y; y++) {
 8007692:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007696:	f103 0318 	add.w	r3, r3, #24
 800769a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3301      	adds	r3, #1
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076a8:	f102 0218 	add.w	r2, r2, #24
 80076ac:	8013      	strh	r3, [r2, #0]
 80076ae:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076b2:	f103 0318 	add.w	r3, r3, #24
 80076b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80076ba:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076be:	f103 030c 	add.w	r3, r3, #12
 80076c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	f6ff af77 	blt.w	80075ba <hagl_put_char+0x2b2>
                }
            }
        }
    }

    return bitmap.width;
 80076cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80076d0:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80076d4:	b2db      	uxtb	r3, r3
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80076dc:	3704      	adds	r7, #4
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd90      	pop	{r4, r7, pc}

080076e2 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b08c      	sub	sp, #48	@ 0x30
 80076e6:	af02      	add	r7, sp, #8
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	4608      	mov	r0, r1
 80076ec:	4611      	mov	r1, r2
 80076ee:	461a      	mov	r2, r3
 80076f0:	4603      	mov	r3, r0
 80076f2:	817b      	strh	r3, [r7, #10]
 80076f4:	460b      	mov	r3, r1
 80076f6:	813b      	strh	r3, [r7, #8]
 80076f8:	4613      	mov	r3, r2
 80076fa:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80076fc:	897b      	ldrh	r3, [r7, #10]
 80076fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007700:	f107 0314 	add.w	r3, r7, #20
 8007704:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fadc 	bl	8006cc4 <fontx_meta>
 800770c:	4603      	mov	r3, r0
 800770e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8007712:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <hagl_put_text+0x3c>
        return 0;
 800771a:	2300      	movs	r3, #0
 800771c:	e02c      	b.n	8007778 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	60fa      	str	r2, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	2b0d      	cmp	r3, #13
 800772c:	d002      	beq.n	8007734 <hagl_put_text+0x52>
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	2b0a      	cmp	r3, #10
 8007732:	d108      	bne.n	8007746 <hagl_put_text+0x64>
            x0 = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8007738:	7fbb      	ldrb	r3, [r7, #30]
 800773a:	461a      	mov	r2, r3
 800773c:	893b      	ldrh	r3, [r7, #8]
 800773e:	4413      	add	r3, r2
 8007740:	b29b      	uxth	r3, r3
 8007742:	813b      	strh	r3, [r7, #8]
 8007744:	e010      	b.n	8007768 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8007746:	88f8      	ldrh	r0, [r7, #6]
 8007748:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800774c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	4603      	mov	r3, r0
 8007756:	6a38      	ldr	r0, [r7, #32]
 8007758:	f7ff fdd6 	bl	8007308 <hagl_put_char>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	897b      	ldrh	r3, [r7, #10]
 8007762:	4413      	add	r3, r2
 8007764:	b29b      	uxth	r3, r3
 8007766:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1d6      	bne.n	800771e <hagl_put_text+0x3c>

    return x0 - original;
 8007770:	897a      	ldrh	r2, [r7, #10]
 8007772:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	b29b      	uxth	r3, r3
}
 8007778:	4618      	mov	r0, r3
 800777a:	3728      	adds	r7, #40	@ 0x28
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8007780:	b590      	push	{r4, r7, lr}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	461a      	mov	r2, r3
 800778e:	4623      	mov	r3, r4
 8007790:	80fb      	strh	r3, [r7, #6]
 8007792:	4603      	mov	r3, r0
 8007794:	80bb      	strh	r3, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	807b      	strh	r3, [r7, #2]
 800779a:	4613      	mov	r3, r2
 800779c:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80077a2:	887b      	ldrh	r3, [r7, #2]
 80077a4:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80077a6:	887b      	ldrh	r3, [r7, #2]
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f1c3 0303 	rsb	r3, r3, #3
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	89fb      	ldrh	r3, [r7, #14]
 80077b8:	4413      	add	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	b218      	sxth	r0, r3
 80077be:	88ba      	ldrh	r2, [r7, #4]
 80077c0:	89bb      	ldrh	r3, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	883a      	ldrh	r2, [r7, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	f7ff fb50 	bl	8006e70 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	89fb      	ldrh	r3, [r7, #14]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	b218      	sxth	r0, r3
 80077da:	88ba      	ldrh	r2, [r7, #4]
 80077dc:	89bb      	ldrh	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	b21b      	sxth	r3, r3
 80077e4:	883a      	ldrh	r2, [r7, #0]
 80077e6:	4619      	mov	r1, r3
 80077e8:	f7ff fb42 	bl	8006e70 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	89fb      	ldrh	r3, [r7, #14]
 80077f0:	4413      	add	r3, r2
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	b218      	sxth	r0, r3
 80077f6:	88ba      	ldrh	r2, [r7, #4]
 80077f8:	89bb      	ldrh	r3, [r7, #12]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	b21b      	sxth	r3, r3
 8007800:	883a      	ldrh	r2, [r7, #0]
 8007802:	4619      	mov	r1, r3
 8007804:	f7ff fb34 	bl	8006e70 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	89fb      	ldrh	r3, [r7, #14]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	b29b      	uxth	r3, r3
 8007810:	b218      	sxth	r0, r3
 8007812:	88ba      	ldrh	r2, [r7, #4]
 8007814:	89bb      	ldrh	r3, [r7, #12]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	b29b      	uxth	r3, r3
 800781a:	b21b      	sxth	r3, r3
 800781c:	883a      	ldrh	r2, [r7, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	f7ff fb26 	bl	8006e70 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	89bb      	ldrh	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	b218      	sxth	r0, r3
 800782e:	88ba      	ldrh	r2, [r7, #4]
 8007830:	89fb      	ldrh	r3, [r7, #14]
 8007832:	4413      	add	r3, r2
 8007834:	b29b      	uxth	r3, r3
 8007836:	b21b      	sxth	r3, r3
 8007838:	883a      	ldrh	r2, [r7, #0]
 800783a:	4619      	mov	r1, r3
 800783c:	f7ff fb18 	bl	8006e70 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	89bb      	ldrh	r3, [r7, #12]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	b29b      	uxth	r3, r3
 8007848:	b218      	sxth	r0, r3
 800784a:	88ba      	ldrh	r2, [r7, #4]
 800784c:	89fb      	ldrh	r3, [r7, #14]
 800784e:	4413      	add	r3, r2
 8007850:	b29b      	uxth	r3, r3
 8007852:	b21b      	sxth	r3, r3
 8007854:	883a      	ldrh	r2, [r7, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	f7ff fb0a 	bl	8006e70 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 800785c:	88fa      	ldrh	r2, [r7, #6]
 800785e:	89bb      	ldrh	r3, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	b29b      	uxth	r3, r3
 8007864:	b218      	sxth	r0, r3
 8007866:	88ba      	ldrh	r2, [r7, #4]
 8007868:	89fb      	ldrh	r3, [r7, #14]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	b29b      	uxth	r3, r3
 800786e:	b21b      	sxth	r3, r3
 8007870:	883a      	ldrh	r2, [r7, #0]
 8007872:	4619      	mov	r1, r3
 8007874:	f7ff fafc 	bl	8006e70 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007878:	88fa      	ldrh	r2, [r7, #6]
 800787a:	89bb      	ldrh	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	b29b      	uxth	r3, r3
 8007880:	b218      	sxth	r0, r3
 8007882:	88ba      	ldrh	r2, [r7, #4]
 8007884:	89fb      	ldrh	r3, [r7, #14]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	b29b      	uxth	r3, r3
 800788a:	b21b      	sxth	r3, r3
 800788c:	883a      	ldrh	r2, [r7, #0]
 800788e:	4619      	mov	r1, r3
 8007890:	f7ff faee 	bl	8006e70 <hagl_put_pixel>

    while (y >= x) {
 8007894:	e097      	b.n	80079c6 <hagl_draw_circle+0x246>
        x++;
 8007896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800789a:	b29b      	uxth	r3, r3
 800789c:	3301      	adds	r3, #1
 800789e:	b29b      	uxth	r3, r3
 80078a0:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80078a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd14      	ble.n	80078d4 <hagl_draw_circle+0x154>
            y--;
 80078aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80078b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80078ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	897b      	ldrh	r3, [r7, #10]
 80078c8:	4413      	add	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	330a      	adds	r3, #10
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	817b      	strh	r3, [r7, #10]
 80078d2:	e008      	b.n	80078e6 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 80078d4:	89fb      	ldrh	r3, [r7, #14]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	b29a      	uxth	r2, r3
 80078da:	897b      	ldrh	r3, [r7, #10]
 80078dc:	4413      	add	r3, r2
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3306      	adds	r3, #6
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	89fb      	ldrh	r3, [r7, #14]
 80078ea:	4413      	add	r3, r2
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	b218      	sxth	r0, r3
 80078f0:	88ba      	ldrh	r2, [r7, #4]
 80078f2:	89bb      	ldrh	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	883a      	ldrh	r2, [r7, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	f7ff fab7 	bl	8006e70 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8007902:	88fa      	ldrh	r2, [r7, #6]
 8007904:	89fb      	ldrh	r3, [r7, #14]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	b29b      	uxth	r3, r3
 800790a:	b218      	sxth	r0, r3
 800790c:	88ba      	ldrh	r2, [r7, #4]
 800790e:	89bb      	ldrh	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	b21b      	sxth	r3, r3
 8007916:	883a      	ldrh	r2, [r7, #0]
 8007918:	4619      	mov	r1, r3
 800791a:	f7ff faa9 	bl	8006e70 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	89fb      	ldrh	r3, [r7, #14]
 8007922:	4413      	add	r3, r2
 8007924:	b29b      	uxth	r3, r3
 8007926:	b218      	sxth	r0, r3
 8007928:	88ba      	ldrh	r2, [r7, #4]
 800792a:	89bb      	ldrh	r3, [r7, #12]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	b29b      	uxth	r3, r3
 8007930:	b21b      	sxth	r3, r3
 8007932:	883a      	ldrh	r2, [r7, #0]
 8007934:	4619      	mov	r1, r3
 8007936:	f7ff fa9b 	bl	8006e70 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	89fb      	ldrh	r3, [r7, #14]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	b29b      	uxth	r3, r3
 8007942:	b218      	sxth	r0, r3
 8007944:	88ba      	ldrh	r2, [r7, #4]
 8007946:	89bb      	ldrh	r3, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	b29b      	uxth	r3, r3
 800794c:	b21b      	sxth	r3, r3
 800794e:	883a      	ldrh	r2, [r7, #0]
 8007950:	4619      	mov	r1, r3
 8007952:	f7ff fa8d 	bl	8006e70 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	89bb      	ldrh	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	b29b      	uxth	r3, r3
 800795e:	b218      	sxth	r0, r3
 8007960:	88ba      	ldrh	r2, [r7, #4]
 8007962:	89fb      	ldrh	r3, [r7, #14]
 8007964:	4413      	add	r3, r2
 8007966:	b29b      	uxth	r3, r3
 8007968:	b21b      	sxth	r3, r3
 800796a:	883a      	ldrh	r2, [r7, #0]
 800796c:	4619      	mov	r1, r3
 800796e:	f7ff fa7f 	bl	8006e70 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8007972:	88fa      	ldrh	r2, [r7, #6]
 8007974:	89bb      	ldrh	r3, [r7, #12]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	b29b      	uxth	r3, r3
 800797a:	b218      	sxth	r0, r3
 800797c:	88ba      	ldrh	r2, [r7, #4]
 800797e:	89fb      	ldrh	r3, [r7, #14]
 8007980:	4413      	add	r3, r2
 8007982:	b29b      	uxth	r3, r3
 8007984:	b21b      	sxth	r3, r3
 8007986:	883a      	ldrh	r2, [r7, #0]
 8007988:	4619      	mov	r1, r3
 800798a:	f7ff fa71 	bl	8006e70 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	89bb      	ldrh	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	b29b      	uxth	r3, r3
 8007996:	b218      	sxth	r0, r3
 8007998:	88ba      	ldrh	r2, [r7, #4]
 800799a:	89fb      	ldrh	r3, [r7, #14]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	b29b      	uxth	r3, r3
 80079a0:	b21b      	sxth	r3, r3
 80079a2:	883a      	ldrh	r2, [r7, #0]
 80079a4:	4619      	mov	r1, r3
 80079a6:	f7ff fa63 	bl	8006e70 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	89bb      	ldrh	r3, [r7, #12]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	b218      	sxth	r0, r3
 80079b4:	88ba      	ldrh	r2, [r7, #4]
 80079b6:	89fb      	ldrh	r3, [r7, #14]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	b21b      	sxth	r3, r3
 80079be:	883a      	ldrh	r2, [r7, #0]
 80079c0:	4619      	mov	r1, r3
 80079c2:	f7ff fa55 	bl	8006e70 <hagl_put_pixel>
    while (y >= x) {
 80079c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80079ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	f6bf af61 	bge.w	8007896 <hagl_draw_circle+0x116>
    }
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd90      	pop	{r4, r7, pc}

080079de <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 80079de:	b590      	push	{r4, r7, lr}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	4604      	mov	r4, r0
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	461a      	mov	r2, r3
 80079ec:	4623      	mov	r3, r4
 80079ee:	80fb      	strh	r3, [r7, #6]
 80079f0:	4603      	mov	r3, r0
 80079f2:	80bb      	strh	r3, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	807b      	strh	r3, [r7, #2]
 80079f8:	4613      	mov	r3, r2
 80079fa:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007a00:	887b      	ldrh	r3, [r7, #2]
 8007a02:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007a04:	887b      	ldrh	r3, [r7, #2]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f1c3 0303 	rsb	r3, r3, #3
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007a12:	e067      	b.n	8007ae4 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007a14:	88fa      	ldrh	r2, [r7, #6]
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	b218      	sxth	r0, r3
 8007a1e:	88ba      	ldrh	r2, [r7, #4]
 8007a20:	89bb      	ldrh	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	b219      	sxth	r1, r3
 8007a28:	89fb      	ldrh	r3, [r7, #14]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	883b      	ldrh	r3, [r7, #0]
 8007a30:	f7ff fa50 	bl	8006ed4 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007a34:	88fa      	ldrh	r2, [r7, #6]
 8007a36:	89fb      	ldrh	r3, [r7, #14]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	b218      	sxth	r0, r3
 8007a3e:	88ba      	ldrh	r2, [r7, #4]
 8007a40:	89bb      	ldrh	r3, [r7, #12]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	b219      	sxth	r1, r3
 8007a48:	89fb      	ldrh	r3, [r7, #14]
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	883b      	ldrh	r3, [r7, #0]
 8007a50:	f7ff fa40 	bl	8006ed4 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007a54:	88fa      	ldrh	r2, [r7, #6]
 8007a56:	89bb      	ldrh	r3, [r7, #12]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	b218      	sxth	r0, r3
 8007a5e:	88ba      	ldrh	r2, [r7, #4]
 8007a60:	89fb      	ldrh	r3, [r7, #14]
 8007a62:	4413      	add	r3, r2
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	b219      	sxth	r1, r3
 8007a68:	89bb      	ldrh	r3, [r7, #12]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	883b      	ldrh	r3, [r7, #0]
 8007a70:	f7ff fa30 	bl	8006ed4 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	89bb      	ldrh	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	b218      	sxth	r0, r3
 8007a7e:	88ba      	ldrh	r2, [r7, #4]
 8007a80:	89fb      	ldrh	r3, [r7, #14]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	b219      	sxth	r1, r3
 8007a88:	89bb      	ldrh	r3, [r7, #12]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	883b      	ldrh	r3, [r7, #0]
 8007a90:	f7ff fa20 	bl	8006ed4 <hagl_draw_hline>
        x++;
 8007a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007aa0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dd14      	ble.n	8007ad2 <hagl_fill_circle+0xf4>
            y--;
 8007aa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007ab4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007ab8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	897b      	ldrh	r3, [r7, #10]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	330a      	adds	r3, #10
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	817b      	strh	r3, [r7, #10]
 8007ad0:	e008      	b.n	8007ae4 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007ad2:	89fb      	ldrh	r3, [r7, #14]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	897b      	ldrh	r3, [r7, #10]
 8007ada:	4413      	add	r3, r2
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3306      	adds	r3, #6
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007ae4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	da91      	bge.n	8007a14 <hagl_fill_circle+0x36>
        }
    }
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd90      	pop	{r4, r7, pc}

08007afa <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007afa:	b590      	push	{r4, r7, lr}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af02      	add	r7, sp, #8
 8007b00:	4603      	mov	r3, r0
 8007b02:	6039      	str	r1, [r7, #0]
 8007b04:	80fb      	strh	r3, [r7, #6]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	81fb      	strh	r3, [r7, #14]
 8007b0e:	e02a      	b.n	8007b66 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	4413      	add	r3, r2
        hagl_draw_line(
 8007b1a:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	3302      	adds	r3, #2
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4413      	add	r3, r2
        hagl_draw_line(
 8007b2a:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b32:	3301      	adds	r3, #1
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	4413      	add	r3, r2
        hagl_draw_line(
 8007b3a:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3306      	adds	r3, #6
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4413      	add	r3, r2
        hagl_draw_line(
 8007b4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007b4e:	88bb      	ldrh	r3, [r7, #4]
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	4613      	mov	r3, r2
 8007b54:	4622      	mov	r2, r4
 8007b56:	f7ff fa03 	bl	8006f60 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3301      	adds	r3, #1
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	81fb      	strh	r3, [r7, #14]
 8007b66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	429a      	cmp	r2, r3
 8007b72:	dbcd      	blt.n	8007b10 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	3302      	adds	r3, #2
    hagl_draw_line(
 8007b7e:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4413      	add	r3, r2
    hagl_draw_line(
 8007b92:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	3b02      	subs	r3, #2
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4413      	add	r3, r2
    hagl_draw_line(
 8007ba2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007ba6:	88bb      	ldrh	r3, [r7, #4]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4613      	mov	r3, r2
 8007bac:	4622      	mov	r2, r4
 8007bae:	f7ff f9d7 	bl	8006f60 <hagl_draw_line>
        color
    );
}
 8007bb2:	bf00      	nop
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd90      	pop	{r4, r7, pc}

08007bba <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b0ac      	sub	sp, #176	@ 0xb0
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	6039      	str	r1, [r7, #0]
 8007bc4:	80fb      	strh	r3, [r7, #6]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007bca:	2380      	movs	r3, #128	@ 0x80
 8007bcc:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007bdc:	e02e      	b.n	8007c3c <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007bde:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	3302      	adds	r3, #2
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4413      	add	r3, r2
 8007bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bee:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	dd08      	ble.n	8007c08 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007bf6:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007c08:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	3302      	adds	r3, #2
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	4413      	add	r3, r2
 8007c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c18:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	da08      	bge.n	8007c32 <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007c20:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	3302      	adds	r3, #2
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007c32:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007c36:	3301      	adds	r3, #1
 8007c38:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007c3c:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	dbca      	blt.n	8007bde <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007c48:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007c4c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007c50:	e144      	b.n	8007edc <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007c62:	2300      	movs	r3, #0
 8007c64:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007c68:	e0a6      	b.n	8007db8 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007c6a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	4413      	add	r3, r2
 8007c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c80:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007c84:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c9c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007ca0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cb6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007cba:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cd2:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007cd6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007ce2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cee:	d50c      	bpl.n	8007d0a <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007cf0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007cf4:	ee07 3a90 	vmov	s15, r3
 8007cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cfc:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d08:	da19      	bge.n	8007d3e <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007d0a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007d16:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d22:	d53e      	bpl.n	8007da2 <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007d24:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d28:	ee07 3a90 	vmov	s15, r3
 8007d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d30:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d3c:	db31      	blt.n	8007da2 <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007d3e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d4a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007d4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007d52:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007d56:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d62:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007d66:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007d6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d72:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d7e:	ee17 3a90 	vmov	r3, s15
 8007d82:	b21a      	sxth	r2, r3
 8007d84:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007d88:	b292      	uxth	r2, r2
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	33b0      	adds	r3, #176	@ 0xb0
 8007d8e:	443b      	add	r3, r7
 8007d90:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007d94:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007da2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007da6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007daa:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3301      	adds	r3, #1
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007db8:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	f6ff af52 	blt.w	8007c6a <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007dcc:	e046      	b.n	8007e5c <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007dce:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	33b0      	adds	r3, #176	@ 0xb0
 8007dd6:	443b      	add	r3, r7
 8007dd8:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007ddc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007de0:	3301      	adds	r3, #1
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	33b0      	adds	r3, #176	@ 0xb0
 8007de6:	443b      	add	r3, r7
 8007de8:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d92e      	bls.n	8007e4e <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007df0:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	33b0      	adds	r3, #176	@ 0xb0
 8007df8:	443b      	add	r3, r7
 8007dfa:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007dfe:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007e02:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e06:	3301      	adds	r3, #1
 8007e08:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	33b0      	adds	r3, #176	@ 0xb0
 8007e10:	443b      	add	r3, r7
 8007e12:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007e16:	0053      	lsls	r3, r2, #1
 8007e18:	33b0      	adds	r3, #176	@ 0xb0
 8007e1a:	443b      	add	r3, r7
 8007e1c:	460a      	mov	r2, r1
 8007e1e:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007e22:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e26:	3301      	adds	r3, #1
 8007e28:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	33b0      	adds	r3, #176	@ 0xb0
 8007e30:	443b      	add	r3, r7
 8007e32:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007e36:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00e      	beq.n	8007e5c <hagl_fill_polygon+0x2a2>
                    i--;
 8007e3e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007e4c:	e006      	b.n	8007e5c <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007e4e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	3301      	adds	r3, #1
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007e5c:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007e60:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007e64:	3b01      	subs	r3, #1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	dbb1      	blt.n	8007dce <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007e70:	e027      	b.n	8007ec2 <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007e72:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007e76:	3301      	adds	r3, #1
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	33b0      	adds	r3, #176	@ 0xb0
 8007e7c:	443b      	add	r3, r7
 8007e7e:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007e82:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	33b0      	adds	r3, #176	@ 0xb0
 8007e8a:	443b      	add	r3, r7
 8007e8c:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007e98:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	33b0      	adds	r3, #176	@ 0xb0
 8007ea0:	443b      	add	r3, r7
 8007ea2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007ea6:	b218      	sxth	r0, r3
 8007ea8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007eac:	88bb      	ldrh	r3, [r7, #4]
 8007eae:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007eb2:	f7ff f80f 	bl	8006ed4 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007eb6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007eba:	3302      	adds	r3, #2
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007ec2:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007ec6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	dbd1      	blt.n	8007e72 <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007ece:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007edc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007ee0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	f6ff aeb4 	blt.w	8007c52 <hagl_fill_polygon+0x98>
        }
    }
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	37b0      	adds	r7, #176	@ 0xb0
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007ef4:	b590      	push	{r4, r7, lr}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4604      	mov	r4, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	4623      	mov	r3, r4
 8007f04:	80fb      	strh	r3, [r7, #6]
 8007f06:	4603      	mov	r3, r0
 8007f08:	80bb      	strh	r3, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	807b      	strh	r3, [r7, #2]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007f12:	88fb      	ldrh	r3, [r7, #6]
 8007f14:	81bb      	strh	r3, [r7, #12]
 8007f16:	88bb      	ldrh	r3, [r7, #4]
 8007f18:	81fb      	strh	r3, [r7, #14]
 8007f1a:	887b      	ldrh	r3, [r7, #2]
 8007f1c:	823b      	strh	r3, [r7, #16]
 8007f1e:	883b      	ldrh	r3, [r7, #0]
 8007f20:	827b      	strh	r3, [r7, #18]
 8007f22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f24:	82bb      	strh	r3, [r7, #20]
 8007f26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007f28:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007f2a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007f2c:	f107 030c 	add.w	r3, r7, #12
 8007f30:	4619      	mov	r1, r3
 8007f32:	2003      	movs	r0, #3
 8007f34:	f7ff fde1 	bl	8007afa <hagl_draw_polygon>
};
 8007f38:	bf00      	nop
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}

08007f40 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4623      	mov	r3, r4
 8007f50:	80fb      	strh	r3, [r7, #6]
 8007f52:	4603      	mov	r3, r0
 8007f54:	80bb      	strh	r3, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	807b      	strh	r3, [r7, #2]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007f5e:	88fb      	ldrh	r3, [r7, #6]
 8007f60:	81bb      	strh	r3, [r7, #12]
 8007f62:	88bb      	ldrh	r3, [r7, #4]
 8007f64:	81fb      	strh	r3, [r7, #14]
 8007f66:	887b      	ldrh	r3, [r7, #2]
 8007f68:	823b      	strh	r3, [r7, #16]
 8007f6a:	883b      	ldrh	r3, [r7, #0]
 8007f6c:	827b      	strh	r3, [r7, #18]
 8007f6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f70:	82bb      	strh	r3, [r7, #20]
 8007f72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007f74:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007f76:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007f78:	f107 030c 	add.w	r3, r7, #12
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	2003      	movs	r0, #3
 8007f80:	f7ff fe1b 	bl	8007bba <hagl_fill_polygon>
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd90      	pop	{r4, r7, pc}

08007f8c <_vsniprintf_r>:
 8007f8c:	b530      	push	{r4, r5, lr}
 8007f8e:	4614      	mov	r4, r2
 8007f90:	2c00      	cmp	r4, #0
 8007f92:	b09b      	sub	sp, #108	@ 0x6c
 8007f94:	4605      	mov	r5, r0
 8007f96:	461a      	mov	r2, r3
 8007f98:	da05      	bge.n	8007fa6 <_vsniprintf_r+0x1a>
 8007f9a:	238b      	movs	r3, #139	@ 0x8b
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa2:	b01b      	add	sp, #108	@ 0x6c
 8007fa4:	bd30      	pop	{r4, r5, pc}
 8007fa6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007faa:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007fae:	bf14      	ite	ne
 8007fb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fb4:	4623      	moveq	r3, r4
 8007fb6:	9302      	str	r3, [sp, #8]
 8007fb8:	9305      	str	r3, [sp, #20]
 8007fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fbe:	9100      	str	r1, [sp, #0]
 8007fc0:	9104      	str	r1, [sp, #16]
 8007fc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007fc6:	4669      	mov	r1, sp
 8007fc8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007fca:	f000 f9d3 	bl	8008374 <_svfiprintf_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	bfbc      	itt	lt
 8007fd2:	238b      	movlt	r3, #139	@ 0x8b
 8007fd4:	602b      	strlt	r3, [r5, #0]
 8007fd6:	2c00      	cmp	r4, #0
 8007fd8:	d0e3      	beq.n	8007fa2 <_vsniprintf_r+0x16>
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
 8007fe0:	e7df      	b.n	8007fa2 <_vsniprintf_r+0x16>
	...

08007fe4 <vsniprintf>:
 8007fe4:	b507      	push	{r0, r1, r2, lr}
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	460a      	mov	r2, r1
 8007fec:	4601      	mov	r1, r0
 8007fee:	4803      	ldr	r0, [pc, #12]	@ (8007ffc <vsniprintf+0x18>)
 8007ff0:	6800      	ldr	r0, [r0, #0]
 8007ff2:	f7ff ffcb 	bl	8007f8c <_vsniprintf_r>
 8007ff6:	b003      	add	sp, #12
 8007ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ffc:	20000214 	.word	0x20000214

08008000 <memcmp>:
 8008000:	b510      	push	{r4, lr}
 8008002:	3901      	subs	r1, #1
 8008004:	4402      	add	r2, r0
 8008006:	4290      	cmp	r0, r2
 8008008:	d101      	bne.n	800800e <memcmp+0xe>
 800800a:	2000      	movs	r0, #0
 800800c:	e005      	b.n	800801a <memcmp+0x1a>
 800800e:	7803      	ldrb	r3, [r0, #0]
 8008010:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008014:	42a3      	cmp	r3, r4
 8008016:	d001      	beq.n	800801c <memcmp+0x1c>
 8008018:	1b18      	subs	r0, r3, r4
 800801a:	bd10      	pop	{r4, pc}
 800801c:	3001      	adds	r0, #1
 800801e:	e7f2      	b.n	8008006 <memcmp+0x6>

08008020 <memset>:
 8008020:	4402      	add	r2, r0
 8008022:	4603      	mov	r3, r0
 8008024:	4293      	cmp	r3, r2
 8008026:	d100      	bne.n	800802a <memset+0xa>
 8008028:	4770      	bx	lr
 800802a:	f803 1b01 	strb.w	r1, [r3], #1
 800802e:	e7f9      	b.n	8008024 <memset+0x4>

08008030 <strncpy>:
 8008030:	b510      	push	{r4, lr}
 8008032:	3901      	subs	r1, #1
 8008034:	4603      	mov	r3, r0
 8008036:	b132      	cbz	r2, 8008046 <strncpy+0x16>
 8008038:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800803c:	f803 4b01 	strb.w	r4, [r3], #1
 8008040:	3a01      	subs	r2, #1
 8008042:	2c00      	cmp	r4, #0
 8008044:	d1f7      	bne.n	8008036 <strncpy+0x6>
 8008046:	441a      	add	r2, r3
 8008048:	2100      	movs	r1, #0
 800804a:	4293      	cmp	r3, r2
 800804c:	d100      	bne.n	8008050 <strncpy+0x20>
 800804e:	bd10      	pop	{r4, pc}
 8008050:	f803 1b01 	strb.w	r1, [r3], #1
 8008054:	e7f9      	b.n	800804a <strncpy+0x1a>
	...

08008058 <__errno>:
 8008058:	4b01      	ldr	r3, [pc, #4]	@ (8008060 <__errno+0x8>)
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	20000214 	.word	0x20000214

08008064 <__libc_init_array>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4d0d      	ldr	r5, [pc, #52]	@ (800809c <__libc_init_array+0x38>)
 8008068:	4c0d      	ldr	r4, [pc, #52]	@ (80080a0 <__libc_init_array+0x3c>)
 800806a:	1b64      	subs	r4, r4, r5
 800806c:	10a4      	asrs	r4, r4, #2
 800806e:	2600      	movs	r6, #0
 8008070:	42a6      	cmp	r6, r4
 8008072:	d109      	bne.n	8008088 <__libc_init_array+0x24>
 8008074:	4d0b      	ldr	r5, [pc, #44]	@ (80080a4 <__libc_init_array+0x40>)
 8008076:	4c0c      	ldr	r4, [pc, #48]	@ (80080a8 <__libc_init_array+0x44>)
 8008078:	f000 fc66 	bl	8008948 <_init>
 800807c:	1b64      	subs	r4, r4, r5
 800807e:	10a4      	asrs	r4, r4, #2
 8008080:	2600      	movs	r6, #0
 8008082:	42a6      	cmp	r6, r4
 8008084:	d105      	bne.n	8008092 <__libc_init_array+0x2e>
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	f855 3b04 	ldr.w	r3, [r5], #4
 800808c:	4798      	blx	r3
 800808e:	3601      	adds	r6, #1
 8008090:	e7ee      	b.n	8008070 <__libc_init_array+0xc>
 8008092:	f855 3b04 	ldr.w	r3, [r5], #4
 8008096:	4798      	blx	r3
 8008098:	3601      	adds	r6, #1
 800809a:	e7f2      	b.n	8008082 <__libc_init_array+0x1e>
 800809c:	08011f68 	.word	0x08011f68
 80080a0:	08011f68 	.word	0x08011f68
 80080a4:	08011f68 	.word	0x08011f68
 80080a8:	08011f6c 	.word	0x08011f6c

080080ac <__retarget_lock_acquire_recursive>:
 80080ac:	4770      	bx	lr

080080ae <__retarget_lock_release_recursive>:
 80080ae:	4770      	bx	lr

080080b0 <memcpy>:
 80080b0:	440a      	add	r2, r1
 80080b2:	4291      	cmp	r1, r2
 80080b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080b8:	d100      	bne.n	80080bc <memcpy+0xc>
 80080ba:	4770      	bx	lr
 80080bc:	b510      	push	{r4, lr}
 80080be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080c6:	4291      	cmp	r1, r2
 80080c8:	d1f9      	bne.n	80080be <memcpy+0xe>
 80080ca:	bd10      	pop	{r4, pc}

080080cc <_free_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4605      	mov	r5, r0
 80080d0:	2900      	cmp	r1, #0
 80080d2:	d041      	beq.n	8008158 <_free_r+0x8c>
 80080d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d8:	1f0c      	subs	r4, r1, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfb8      	it	lt
 80080de:	18e4      	addlt	r4, r4, r3
 80080e0:	f000 f8e0 	bl	80082a4 <__malloc_lock>
 80080e4:	4a1d      	ldr	r2, [pc, #116]	@ (800815c <_free_r+0x90>)
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	b933      	cbnz	r3, 80080f8 <_free_r+0x2c>
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6014      	str	r4, [r2, #0]
 80080ee:	4628      	mov	r0, r5
 80080f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f4:	f000 b8dc 	b.w	80082b0 <__malloc_unlock>
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d908      	bls.n	800810e <_free_r+0x42>
 80080fc:	6820      	ldr	r0, [r4, #0]
 80080fe:	1821      	adds	r1, r4, r0
 8008100:	428b      	cmp	r3, r1
 8008102:	bf01      	itttt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	1809      	addeq	r1, r1, r0
 800810a:	6021      	streq	r1, [r4, #0]
 800810c:	e7ed      	b.n	80080ea <_free_r+0x1e>
 800810e:	461a      	mov	r2, r3
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	b10b      	cbz	r3, 8008118 <_free_r+0x4c>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d9fa      	bls.n	800810e <_free_r+0x42>
 8008118:	6811      	ldr	r1, [r2, #0]
 800811a:	1850      	adds	r0, r2, r1
 800811c:	42a0      	cmp	r0, r4
 800811e:	d10b      	bne.n	8008138 <_free_r+0x6c>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	4401      	add	r1, r0
 8008124:	1850      	adds	r0, r2, r1
 8008126:	4283      	cmp	r3, r0
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	d1e0      	bne.n	80080ee <_free_r+0x22>
 800812c:	6818      	ldr	r0, [r3, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	6053      	str	r3, [r2, #4]
 8008132:	4408      	add	r0, r1
 8008134:	6010      	str	r0, [r2, #0]
 8008136:	e7da      	b.n	80080ee <_free_r+0x22>
 8008138:	d902      	bls.n	8008140 <_free_r+0x74>
 800813a:	230c      	movs	r3, #12
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	e7d6      	b.n	80080ee <_free_r+0x22>
 8008140:	6820      	ldr	r0, [r4, #0]
 8008142:	1821      	adds	r1, r4, r0
 8008144:	428b      	cmp	r3, r1
 8008146:	bf04      	itt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	bf04      	itt	eq
 8008150:	1809      	addeq	r1, r1, r0
 8008152:	6021      	streq	r1, [r4, #0]
 8008154:	6054      	str	r4, [r2, #4]
 8008156:	e7ca      	b.n	80080ee <_free_r+0x22>
 8008158:	bd38      	pop	{r3, r4, r5, pc}
 800815a:	bf00      	nop
 800815c:	2000b018 	.word	0x2000b018

08008160 <sbrk_aligned>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	4e0f      	ldr	r6, [pc, #60]	@ (80081a0 <sbrk_aligned+0x40>)
 8008164:	460c      	mov	r4, r1
 8008166:	6831      	ldr	r1, [r6, #0]
 8008168:	4605      	mov	r5, r0
 800816a:	b911      	cbnz	r1, 8008172 <sbrk_aligned+0x12>
 800816c:	f000 fba6 	bl	80088bc <_sbrk_r>
 8008170:	6030      	str	r0, [r6, #0]
 8008172:	4621      	mov	r1, r4
 8008174:	4628      	mov	r0, r5
 8008176:	f000 fba1 	bl	80088bc <_sbrk_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d103      	bne.n	8008186 <sbrk_aligned+0x26>
 800817e:	f04f 34ff 	mov.w	r4, #4294967295
 8008182:	4620      	mov	r0, r4
 8008184:	bd70      	pop	{r4, r5, r6, pc}
 8008186:	1cc4      	adds	r4, r0, #3
 8008188:	f024 0403 	bic.w	r4, r4, #3
 800818c:	42a0      	cmp	r0, r4
 800818e:	d0f8      	beq.n	8008182 <sbrk_aligned+0x22>
 8008190:	1a21      	subs	r1, r4, r0
 8008192:	4628      	mov	r0, r5
 8008194:	f000 fb92 	bl	80088bc <_sbrk_r>
 8008198:	3001      	adds	r0, #1
 800819a:	d1f2      	bne.n	8008182 <sbrk_aligned+0x22>
 800819c:	e7ef      	b.n	800817e <sbrk_aligned+0x1e>
 800819e:	bf00      	nop
 80081a0:	2000b014 	.word	0x2000b014

080081a4 <_malloc_r>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	1ccd      	adds	r5, r1, #3
 80081aa:	f025 0503 	bic.w	r5, r5, #3
 80081ae:	3508      	adds	r5, #8
 80081b0:	2d0c      	cmp	r5, #12
 80081b2:	bf38      	it	cc
 80081b4:	250c      	movcc	r5, #12
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	4606      	mov	r6, r0
 80081ba:	db01      	blt.n	80081c0 <_malloc_r+0x1c>
 80081bc:	42a9      	cmp	r1, r5
 80081be:	d904      	bls.n	80081ca <_malloc_r+0x26>
 80081c0:	230c      	movs	r3, #12
 80081c2:	6033      	str	r3, [r6, #0]
 80081c4:	2000      	movs	r0, #0
 80081c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082a0 <_malloc_r+0xfc>
 80081ce:	f000 f869 	bl	80082a4 <__malloc_lock>
 80081d2:	f8d8 3000 	ldr.w	r3, [r8]
 80081d6:	461c      	mov	r4, r3
 80081d8:	bb44      	cbnz	r4, 800822c <_malloc_r+0x88>
 80081da:	4629      	mov	r1, r5
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff ffbf 	bl	8008160 <sbrk_aligned>
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	4604      	mov	r4, r0
 80081e6:	d158      	bne.n	800829a <_malloc_r+0xf6>
 80081e8:	f8d8 4000 	ldr.w	r4, [r8]
 80081ec:	4627      	mov	r7, r4
 80081ee:	2f00      	cmp	r7, #0
 80081f0:	d143      	bne.n	800827a <_malloc_r+0xd6>
 80081f2:	2c00      	cmp	r4, #0
 80081f4:	d04b      	beq.n	800828e <_malloc_r+0xea>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	4639      	mov	r1, r7
 80081fa:	4630      	mov	r0, r6
 80081fc:	eb04 0903 	add.w	r9, r4, r3
 8008200:	f000 fb5c 	bl	80088bc <_sbrk_r>
 8008204:	4581      	cmp	r9, r0
 8008206:	d142      	bne.n	800828e <_malloc_r+0xea>
 8008208:	6821      	ldr	r1, [r4, #0]
 800820a:	1a6d      	subs	r5, r5, r1
 800820c:	4629      	mov	r1, r5
 800820e:	4630      	mov	r0, r6
 8008210:	f7ff ffa6 	bl	8008160 <sbrk_aligned>
 8008214:	3001      	adds	r0, #1
 8008216:	d03a      	beq.n	800828e <_malloc_r+0xea>
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	442b      	add	r3, r5
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	f8d8 3000 	ldr.w	r3, [r8]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	bb62      	cbnz	r2, 8008280 <_malloc_r+0xdc>
 8008226:	f8c8 7000 	str.w	r7, [r8]
 800822a:	e00f      	b.n	800824c <_malloc_r+0xa8>
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	1b52      	subs	r2, r2, r5
 8008230:	d420      	bmi.n	8008274 <_malloc_r+0xd0>
 8008232:	2a0b      	cmp	r2, #11
 8008234:	d917      	bls.n	8008266 <_malloc_r+0xc2>
 8008236:	1961      	adds	r1, r4, r5
 8008238:	42a3      	cmp	r3, r4
 800823a:	6025      	str	r5, [r4, #0]
 800823c:	bf18      	it	ne
 800823e:	6059      	strne	r1, [r3, #4]
 8008240:	6863      	ldr	r3, [r4, #4]
 8008242:	bf08      	it	eq
 8008244:	f8c8 1000 	streq.w	r1, [r8]
 8008248:	5162      	str	r2, [r4, r5]
 800824a:	604b      	str	r3, [r1, #4]
 800824c:	4630      	mov	r0, r6
 800824e:	f000 f82f 	bl	80082b0 <__malloc_unlock>
 8008252:	f104 000b 	add.w	r0, r4, #11
 8008256:	1d23      	adds	r3, r4, #4
 8008258:	f020 0007 	bic.w	r0, r0, #7
 800825c:	1ac2      	subs	r2, r0, r3
 800825e:	bf1c      	itt	ne
 8008260:	1a1b      	subne	r3, r3, r0
 8008262:	50a3      	strne	r3, [r4, r2]
 8008264:	e7af      	b.n	80081c6 <_malloc_r+0x22>
 8008266:	6862      	ldr	r2, [r4, #4]
 8008268:	42a3      	cmp	r3, r4
 800826a:	bf0c      	ite	eq
 800826c:	f8c8 2000 	streq.w	r2, [r8]
 8008270:	605a      	strne	r2, [r3, #4]
 8008272:	e7eb      	b.n	800824c <_malloc_r+0xa8>
 8008274:	4623      	mov	r3, r4
 8008276:	6864      	ldr	r4, [r4, #4]
 8008278:	e7ae      	b.n	80081d8 <_malloc_r+0x34>
 800827a:	463c      	mov	r4, r7
 800827c:	687f      	ldr	r7, [r7, #4]
 800827e:	e7b6      	b.n	80081ee <_malloc_r+0x4a>
 8008280:	461a      	mov	r2, r3
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	42a3      	cmp	r3, r4
 8008286:	d1fb      	bne.n	8008280 <_malloc_r+0xdc>
 8008288:	2300      	movs	r3, #0
 800828a:	6053      	str	r3, [r2, #4]
 800828c:	e7de      	b.n	800824c <_malloc_r+0xa8>
 800828e:	230c      	movs	r3, #12
 8008290:	6033      	str	r3, [r6, #0]
 8008292:	4630      	mov	r0, r6
 8008294:	f000 f80c 	bl	80082b0 <__malloc_unlock>
 8008298:	e794      	b.n	80081c4 <_malloc_r+0x20>
 800829a:	6005      	str	r5, [r0, #0]
 800829c:	e7d6      	b.n	800824c <_malloc_r+0xa8>
 800829e:	bf00      	nop
 80082a0:	2000b018 	.word	0x2000b018

080082a4 <__malloc_lock>:
 80082a4:	4801      	ldr	r0, [pc, #4]	@ (80082ac <__malloc_lock+0x8>)
 80082a6:	f7ff bf01 	b.w	80080ac <__retarget_lock_acquire_recursive>
 80082aa:	bf00      	nop
 80082ac:	2000b010 	.word	0x2000b010

080082b0 <__malloc_unlock>:
 80082b0:	4801      	ldr	r0, [pc, #4]	@ (80082b8 <__malloc_unlock+0x8>)
 80082b2:	f7ff befc 	b.w	80080ae <__retarget_lock_release_recursive>
 80082b6:	bf00      	nop
 80082b8:	2000b010 	.word	0x2000b010

080082bc <__ssputs_r>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	688e      	ldr	r6, [r1, #8]
 80082c2:	461f      	mov	r7, r3
 80082c4:	42be      	cmp	r6, r7
 80082c6:	680b      	ldr	r3, [r1, #0]
 80082c8:	4682      	mov	sl, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	4690      	mov	r8, r2
 80082ce:	d82d      	bhi.n	800832c <__ssputs_r+0x70>
 80082d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082d8:	d026      	beq.n	8008328 <__ssputs_r+0x6c>
 80082da:	6965      	ldr	r5, [r4, #20]
 80082dc:	6909      	ldr	r1, [r1, #16]
 80082de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082e2:	eba3 0901 	sub.w	r9, r3, r1
 80082e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ea:	1c7b      	adds	r3, r7, #1
 80082ec:	444b      	add	r3, r9
 80082ee:	106d      	asrs	r5, r5, #1
 80082f0:	429d      	cmp	r5, r3
 80082f2:	bf38      	it	cc
 80082f4:	461d      	movcc	r5, r3
 80082f6:	0553      	lsls	r3, r2, #21
 80082f8:	d527      	bpl.n	800834a <__ssputs_r+0x8e>
 80082fa:	4629      	mov	r1, r5
 80082fc:	f7ff ff52 	bl	80081a4 <_malloc_r>
 8008300:	4606      	mov	r6, r0
 8008302:	b360      	cbz	r0, 800835e <__ssputs_r+0xa2>
 8008304:	6921      	ldr	r1, [r4, #16]
 8008306:	464a      	mov	r2, r9
 8008308:	f7ff fed2 	bl	80080b0 <memcpy>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	6126      	str	r6, [r4, #16]
 800831a:	6165      	str	r5, [r4, #20]
 800831c:	444e      	add	r6, r9
 800831e:	eba5 0509 	sub.w	r5, r5, r9
 8008322:	6026      	str	r6, [r4, #0]
 8008324:	60a5      	str	r5, [r4, #8]
 8008326:	463e      	mov	r6, r7
 8008328:	42be      	cmp	r6, r7
 800832a:	d900      	bls.n	800832e <__ssputs_r+0x72>
 800832c:	463e      	mov	r6, r7
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	4632      	mov	r2, r6
 8008332:	4641      	mov	r1, r8
 8008334:	f000 faa8 	bl	8008888 <memmove>
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	1b9b      	subs	r3, r3, r6
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	4433      	add	r3, r6
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	2000      	movs	r0, #0
 8008346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834a:	462a      	mov	r2, r5
 800834c:	f000 fac6 	bl	80088dc <_realloc_r>
 8008350:	4606      	mov	r6, r0
 8008352:	2800      	cmp	r0, #0
 8008354:	d1e0      	bne.n	8008318 <__ssputs_r+0x5c>
 8008356:	6921      	ldr	r1, [r4, #16]
 8008358:	4650      	mov	r0, sl
 800835a:	f7ff feb7 	bl	80080cc <_free_r>
 800835e:	230c      	movs	r3, #12
 8008360:	f8ca 3000 	str.w	r3, [sl]
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	e7e9      	b.n	8008346 <__ssputs_r+0x8a>
	...

08008374 <_svfiprintf_r>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	4698      	mov	r8, r3
 800837a:	898b      	ldrh	r3, [r1, #12]
 800837c:	061b      	lsls	r3, r3, #24
 800837e:	b09d      	sub	sp, #116	@ 0x74
 8008380:	4607      	mov	r7, r0
 8008382:	460d      	mov	r5, r1
 8008384:	4614      	mov	r4, r2
 8008386:	d510      	bpl.n	80083aa <_svfiprintf_r+0x36>
 8008388:	690b      	ldr	r3, [r1, #16]
 800838a:	b973      	cbnz	r3, 80083aa <_svfiprintf_r+0x36>
 800838c:	2140      	movs	r1, #64	@ 0x40
 800838e:	f7ff ff09 	bl	80081a4 <_malloc_r>
 8008392:	6028      	str	r0, [r5, #0]
 8008394:	6128      	str	r0, [r5, #16]
 8008396:	b930      	cbnz	r0, 80083a6 <_svfiprintf_r+0x32>
 8008398:	230c      	movs	r3, #12
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	b01d      	add	sp, #116	@ 0x74
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	2340      	movs	r3, #64	@ 0x40
 80083a8:	616b      	str	r3, [r5, #20]
 80083aa:	2300      	movs	r3, #0
 80083ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ae:	2320      	movs	r3, #32
 80083b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80083b8:	2330      	movs	r3, #48	@ 0x30
 80083ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008558 <_svfiprintf_r+0x1e4>
 80083be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083c2:	f04f 0901 	mov.w	r9, #1
 80083c6:	4623      	mov	r3, r4
 80083c8:	469a      	mov	sl, r3
 80083ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ce:	b10a      	cbz	r2, 80083d4 <_svfiprintf_r+0x60>
 80083d0:	2a25      	cmp	r2, #37	@ 0x25
 80083d2:	d1f9      	bne.n	80083c8 <_svfiprintf_r+0x54>
 80083d4:	ebba 0b04 	subs.w	fp, sl, r4
 80083d8:	d00b      	beq.n	80083f2 <_svfiprintf_r+0x7e>
 80083da:	465b      	mov	r3, fp
 80083dc:	4622      	mov	r2, r4
 80083de:	4629      	mov	r1, r5
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff ff6b 	bl	80082bc <__ssputs_r>
 80083e6:	3001      	adds	r0, #1
 80083e8:	f000 80a7 	beq.w	800853a <_svfiprintf_r+0x1c6>
 80083ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ee:	445a      	add	r2, fp
 80083f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083f2:	f89a 3000 	ldrb.w	r3, [sl]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 809f 	beq.w	800853a <_svfiprintf_r+0x1c6>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008406:	f10a 0a01 	add.w	sl, sl, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	9307      	str	r3, [sp, #28]
 800840e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008412:	931a      	str	r3, [sp, #104]	@ 0x68
 8008414:	4654      	mov	r4, sl
 8008416:	2205      	movs	r2, #5
 8008418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841c:	484e      	ldr	r0, [pc, #312]	@ (8008558 <_svfiprintf_r+0x1e4>)
 800841e:	f7f7 fedf 	bl	80001e0 <memchr>
 8008422:	9a04      	ldr	r2, [sp, #16]
 8008424:	b9d8      	cbnz	r0, 800845e <_svfiprintf_r+0xea>
 8008426:	06d0      	lsls	r0, r2, #27
 8008428:	bf44      	itt	mi
 800842a:	2320      	movmi	r3, #32
 800842c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008430:	0711      	lsls	r1, r2, #28
 8008432:	bf44      	itt	mi
 8008434:	232b      	movmi	r3, #43	@ 0x2b
 8008436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800843a:	f89a 3000 	ldrb.w	r3, [sl]
 800843e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008440:	d015      	beq.n	800846e <_svfiprintf_r+0xfa>
 8008442:	9a07      	ldr	r2, [sp, #28]
 8008444:	4654      	mov	r4, sl
 8008446:	2000      	movs	r0, #0
 8008448:	f04f 0c0a 	mov.w	ip, #10
 800844c:	4621      	mov	r1, r4
 800844e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008452:	3b30      	subs	r3, #48	@ 0x30
 8008454:	2b09      	cmp	r3, #9
 8008456:	d94b      	bls.n	80084f0 <_svfiprintf_r+0x17c>
 8008458:	b1b0      	cbz	r0, 8008488 <_svfiprintf_r+0x114>
 800845a:	9207      	str	r2, [sp, #28]
 800845c:	e014      	b.n	8008488 <_svfiprintf_r+0x114>
 800845e:	eba0 0308 	sub.w	r3, r0, r8
 8008462:	fa09 f303 	lsl.w	r3, r9, r3
 8008466:	4313      	orrs	r3, r2
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	46a2      	mov	sl, r4
 800846c:	e7d2      	b.n	8008414 <_svfiprintf_r+0xa0>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	1d19      	adds	r1, r3, #4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	9103      	str	r1, [sp, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfbb      	ittet	lt
 800847a:	425b      	neglt	r3, r3
 800847c:	f042 0202 	orrlt.w	r2, r2, #2
 8008480:	9307      	strge	r3, [sp, #28]
 8008482:	9307      	strlt	r3, [sp, #28]
 8008484:	bfb8      	it	lt
 8008486:	9204      	strlt	r2, [sp, #16]
 8008488:	7823      	ldrb	r3, [r4, #0]
 800848a:	2b2e      	cmp	r3, #46	@ 0x2e
 800848c:	d10a      	bne.n	80084a4 <_svfiprintf_r+0x130>
 800848e:	7863      	ldrb	r3, [r4, #1]
 8008490:	2b2a      	cmp	r3, #42	@ 0x2a
 8008492:	d132      	bne.n	80084fa <_svfiprintf_r+0x186>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9203      	str	r2, [sp, #12]
 800849c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084a0:	3402      	adds	r4, #2
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008568 <_svfiprintf_r+0x1f4>
 80084a8:	7821      	ldrb	r1, [r4, #0]
 80084aa:	2203      	movs	r2, #3
 80084ac:	4650      	mov	r0, sl
 80084ae:	f7f7 fe97 	bl	80001e0 <memchr>
 80084b2:	b138      	cbz	r0, 80084c4 <_svfiprintf_r+0x150>
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	eba0 000a 	sub.w	r0, r0, sl
 80084ba:	2240      	movs	r2, #64	@ 0x40
 80084bc:	4082      	lsls	r2, r0
 80084be:	4313      	orrs	r3, r2
 80084c0:	3401      	adds	r4, #1
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c8:	4824      	ldr	r0, [pc, #144]	@ (800855c <_svfiprintf_r+0x1e8>)
 80084ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084ce:	2206      	movs	r2, #6
 80084d0:	f7f7 fe86 	bl	80001e0 <memchr>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d036      	beq.n	8008546 <_svfiprintf_r+0x1d2>
 80084d8:	4b21      	ldr	r3, [pc, #132]	@ (8008560 <_svfiprintf_r+0x1ec>)
 80084da:	bb1b      	cbnz	r3, 8008524 <_svfiprintf_r+0x1b0>
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	3307      	adds	r3, #7
 80084e0:	f023 0307 	bic.w	r3, r3, #7
 80084e4:	3308      	adds	r3, #8
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ea:	4433      	add	r3, r6
 80084ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ee:	e76a      	b.n	80083c6 <_svfiprintf_r+0x52>
 80084f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f4:	460c      	mov	r4, r1
 80084f6:	2001      	movs	r0, #1
 80084f8:	e7a8      	b.n	800844c <_svfiprintf_r+0xd8>
 80084fa:	2300      	movs	r3, #0
 80084fc:	3401      	adds	r4, #1
 80084fe:	9305      	str	r3, [sp, #20]
 8008500:	4619      	mov	r1, r3
 8008502:	f04f 0c0a 	mov.w	ip, #10
 8008506:	4620      	mov	r0, r4
 8008508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800850c:	3a30      	subs	r2, #48	@ 0x30
 800850e:	2a09      	cmp	r2, #9
 8008510:	d903      	bls.n	800851a <_svfiprintf_r+0x1a6>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0c6      	beq.n	80084a4 <_svfiprintf_r+0x130>
 8008516:	9105      	str	r1, [sp, #20]
 8008518:	e7c4      	b.n	80084a4 <_svfiprintf_r+0x130>
 800851a:	fb0c 2101 	mla	r1, ip, r1, r2
 800851e:	4604      	mov	r4, r0
 8008520:	2301      	movs	r3, #1
 8008522:	e7f0      	b.n	8008506 <_svfiprintf_r+0x192>
 8008524:	ab03      	add	r3, sp, #12
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	462a      	mov	r2, r5
 800852a:	4b0e      	ldr	r3, [pc, #56]	@ (8008564 <_svfiprintf_r+0x1f0>)
 800852c:	a904      	add	r1, sp, #16
 800852e:	4638      	mov	r0, r7
 8008530:	f3af 8000 	nop.w
 8008534:	1c42      	adds	r2, r0, #1
 8008536:	4606      	mov	r6, r0
 8008538:	d1d6      	bne.n	80084e8 <_svfiprintf_r+0x174>
 800853a:	89ab      	ldrh	r3, [r5, #12]
 800853c:	065b      	lsls	r3, r3, #25
 800853e:	f53f af2d 	bmi.w	800839c <_svfiprintf_r+0x28>
 8008542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008544:	e72c      	b.n	80083a0 <_svfiprintf_r+0x2c>
 8008546:	ab03      	add	r3, sp, #12
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	462a      	mov	r2, r5
 800854c:	4b05      	ldr	r3, [pc, #20]	@ (8008564 <_svfiprintf_r+0x1f0>)
 800854e:	a904      	add	r1, sp, #16
 8008550:	4638      	mov	r0, r7
 8008552:	f000 f879 	bl	8008648 <_printf_i>
 8008556:	e7ed      	b.n	8008534 <_svfiprintf_r+0x1c0>
 8008558:	08011f2c 	.word	0x08011f2c
 800855c:	08011f36 	.word	0x08011f36
 8008560:	00000000 	.word	0x00000000
 8008564:	080082bd 	.word	0x080082bd
 8008568:	08011f32 	.word	0x08011f32

0800856c <_printf_common>:
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	4616      	mov	r6, r2
 8008572:	4698      	mov	r8, r3
 8008574:	688a      	ldr	r2, [r1, #8]
 8008576:	690b      	ldr	r3, [r1, #16]
 8008578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800857c:	4293      	cmp	r3, r2
 800857e:	bfb8      	it	lt
 8008580:	4613      	movlt	r3, r2
 8008582:	6033      	str	r3, [r6, #0]
 8008584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008588:	4607      	mov	r7, r0
 800858a:	460c      	mov	r4, r1
 800858c:	b10a      	cbz	r2, 8008592 <_printf_common+0x26>
 800858e:	3301      	adds	r3, #1
 8008590:	6033      	str	r3, [r6, #0]
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	0699      	lsls	r1, r3, #26
 8008596:	bf42      	ittt	mi
 8008598:	6833      	ldrmi	r3, [r6, #0]
 800859a:	3302      	addmi	r3, #2
 800859c:	6033      	strmi	r3, [r6, #0]
 800859e:	6825      	ldr	r5, [r4, #0]
 80085a0:	f015 0506 	ands.w	r5, r5, #6
 80085a4:	d106      	bne.n	80085b4 <_printf_common+0x48>
 80085a6:	f104 0a19 	add.w	sl, r4, #25
 80085aa:	68e3      	ldr	r3, [r4, #12]
 80085ac:	6832      	ldr	r2, [r6, #0]
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	dc26      	bgt.n	8008602 <_printf_common+0x96>
 80085b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085b8:	6822      	ldr	r2, [r4, #0]
 80085ba:	3b00      	subs	r3, #0
 80085bc:	bf18      	it	ne
 80085be:	2301      	movne	r3, #1
 80085c0:	0692      	lsls	r2, r2, #26
 80085c2:	d42b      	bmi.n	800861c <_printf_common+0xb0>
 80085c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085c8:	4641      	mov	r1, r8
 80085ca:	4638      	mov	r0, r7
 80085cc:	47c8      	blx	r9
 80085ce:	3001      	adds	r0, #1
 80085d0:	d01e      	beq.n	8008610 <_printf_common+0xa4>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	6922      	ldr	r2, [r4, #16]
 80085d6:	f003 0306 	and.w	r3, r3, #6
 80085da:	2b04      	cmp	r3, #4
 80085dc:	bf02      	ittt	eq
 80085de:	68e5      	ldreq	r5, [r4, #12]
 80085e0:	6833      	ldreq	r3, [r6, #0]
 80085e2:	1aed      	subeq	r5, r5, r3
 80085e4:	68a3      	ldr	r3, [r4, #8]
 80085e6:	bf0c      	ite	eq
 80085e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085ec:	2500      	movne	r5, #0
 80085ee:	4293      	cmp	r3, r2
 80085f0:	bfc4      	itt	gt
 80085f2:	1a9b      	subgt	r3, r3, r2
 80085f4:	18ed      	addgt	r5, r5, r3
 80085f6:	2600      	movs	r6, #0
 80085f8:	341a      	adds	r4, #26
 80085fa:	42b5      	cmp	r5, r6
 80085fc:	d11a      	bne.n	8008634 <_printf_common+0xc8>
 80085fe:	2000      	movs	r0, #0
 8008600:	e008      	b.n	8008614 <_printf_common+0xa8>
 8008602:	2301      	movs	r3, #1
 8008604:	4652      	mov	r2, sl
 8008606:	4641      	mov	r1, r8
 8008608:	4638      	mov	r0, r7
 800860a:	47c8      	blx	r9
 800860c:	3001      	adds	r0, #1
 800860e:	d103      	bne.n	8008618 <_printf_common+0xac>
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008618:	3501      	adds	r5, #1
 800861a:	e7c6      	b.n	80085aa <_printf_common+0x3e>
 800861c:	18e1      	adds	r1, r4, r3
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	2030      	movs	r0, #48	@ 0x30
 8008622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008626:	4422      	add	r2, r4
 8008628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800862c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008630:	3302      	adds	r3, #2
 8008632:	e7c7      	b.n	80085c4 <_printf_common+0x58>
 8008634:	2301      	movs	r3, #1
 8008636:	4622      	mov	r2, r4
 8008638:	4641      	mov	r1, r8
 800863a:	4638      	mov	r0, r7
 800863c:	47c8      	blx	r9
 800863e:	3001      	adds	r0, #1
 8008640:	d0e6      	beq.n	8008610 <_printf_common+0xa4>
 8008642:	3601      	adds	r6, #1
 8008644:	e7d9      	b.n	80085fa <_printf_common+0x8e>
	...

08008648 <_printf_i>:
 8008648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800864c:	7e0f      	ldrb	r7, [r1, #24]
 800864e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008650:	2f78      	cmp	r7, #120	@ 0x78
 8008652:	4691      	mov	r9, r2
 8008654:	4680      	mov	r8, r0
 8008656:	460c      	mov	r4, r1
 8008658:	469a      	mov	sl, r3
 800865a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800865e:	d807      	bhi.n	8008670 <_printf_i+0x28>
 8008660:	2f62      	cmp	r7, #98	@ 0x62
 8008662:	d80a      	bhi.n	800867a <_printf_i+0x32>
 8008664:	2f00      	cmp	r7, #0
 8008666:	f000 80d2 	beq.w	800880e <_printf_i+0x1c6>
 800866a:	2f58      	cmp	r7, #88	@ 0x58
 800866c:	f000 80b9 	beq.w	80087e2 <_printf_i+0x19a>
 8008670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008678:	e03a      	b.n	80086f0 <_printf_i+0xa8>
 800867a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800867e:	2b15      	cmp	r3, #21
 8008680:	d8f6      	bhi.n	8008670 <_printf_i+0x28>
 8008682:	a101      	add	r1, pc, #4	@ (adr r1, 8008688 <_printf_i+0x40>)
 8008684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008688:	080086e1 	.word	0x080086e1
 800868c:	080086f5 	.word	0x080086f5
 8008690:	08008671 	.word	0x08008671
 8008694:	08008671 	.word	0x08008671
 8008698:	08008671 	.word	0x08008671
 800869c:	08008671 	.word	0x08008671
 80086a0:	080086f5 	.word	0x080086f5
 80086a4:	08008671 	.word	0x08008671
 80086a8:	08008671 	.word	0x08008671
 80086ac:	08008671 	.word	0x08008671
 80086b0:	08008671 	.word	0x08008671
 80086b4:	080087f5 	.word	0x080087f5
 80086b8:	0800871f 	.word	0x0800871f
 80086bc:	080087af 	.word	0x080087af
 80086c0:	08008671 	.word	0x08008671
 80086c4:	08008671 	.word	0x08008671
 80086c8:	08008817 	.word	0x08008817
 80086cc:	08008671 	.word	0x08008671
 80086d0:	0800871f 	.word	0x0800871f
 80086d4:	08008671 	.word	0x08008671
 80086d8:	08008671 	.word	0x08008671
 80086dc:	080087b7 	.word	0x080087b7
 80086e0:	6833      	ldr	r3, [r6, #0]
 80086e2:	1d1a      	adds	r2, r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6032      	str	r2, [r6, #0]
 80086e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086f0:	2301      	movs	r3, #1
 80086f2:	e09d      	b.n	8008830 <_printf_i+0x1e8>
 80086f4:	6833      	ldr	r3, [r6, #0]
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	6031      	str	r1, [r6, #0]
 80086fc:	0606      	lsls	r6, r0, #24
 80086fe:	d501      	bpl.n	8008704 <_printf_i+0xbc>
 8008700:	681d      	ldr	r5, [r3, #0]
 8008702:	e003      	b.n	800870c <_printf_i+0xc4>
 8008704:	0645      	lsls	r5, r0, #25
 8008706:	d5fb      	bpl.n	8008700 <_printf_i+0xb8>
 8008708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800870c:	2d00      	cmp	r5, #0
 800870e:	da03      	bge.n	8008718 <_printf_i+0xd0>
 8008710:	232d      	movs	r3, #45	@ 0x2d
 8008712:	426d      	negs	r5, r5
 8008714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008718:	4859      	ldr	r0, [pc, #356]	@ (8008880 <_printf_i+0x238>)
 800871a:	230a      	movs	r3, #10
 800871c:	e011      	b.n	8008742 <_printf_i+0xfa>
 800871e:	6821      	ldr	r1, [r4, #0]
 8008720:	6833      	ldr	r3, [r6, #0]
 8008722:	0608      	lsls	r0, r1, #24
 8008724:	f853 5b04 	ldr.w	r5, [r3], #4
 8008728:	d402      	bmi.n	8008730 <_printf_i+0xe8>
 800872a:	0649      	lsls	r1, r1, #25
 800872c:	bf48      	it	mi
 800872e:	b2ad      	uxthmi	r5, r5
 8008730:	2f6f      	cmp	r7, #111	@ 0x6f
 8008732:	4853      	ldr	r0, [pc, #332]	@ (8008880 <_printf_i+0x238>)
 8008734:	6033      	str	r3, [r6, #0]
 8008736:	bf14      	ite	ne
 8008738:	230a      	movne	r3, #10
 800873a:	2308      	moveq	r3, #8
 800873c:	2100      	movs	r1, #0
 800873e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008742:	6866      	ldr	r6, [r4, #4]
 8008744:	60a6      	str	r6, [r4, #8]
 8008746:	2e00      	cmp	r6, #0
 8008748:	bfa2      	ittt	ge
 800874a:	6821      	ldrge	r1, [r4, #0]
 800874c:	f021 0104 	bicge.w	r1, r1, #4
 8008750:	6021      	strge	r1, [r4, #0]
 8008752:	b90d      	cbnz	r5, 8008758 <_printf_i+0x110>
 8008754:	2e00      	cmp	r6, #0
 8008756:	d04b      	beq.n	80087f0 <_printf_i+0x1a8>
 8008758:	4616      	mov	r6, r2
 800875a:	fbb5 f1f3 	udiv	r1, r5, r3
 800875e:	fb03 5711 	mls	r7, r3, r1, r5
 8008762:	5dc7      	ldrb	r7, [r0, r7]
 8008764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008768:	462f      	mov	r7, r5
 800876a:	42bb      	cmp	r3, r7
 800876c:	460d      	mov	r5, r1
 800876e:	d9f4      	bls.n	800875a <_printf_i+0x112>
 8008770:	2b08      	cmp	r3, #8
 8008772:	d10b      	bne.n	800878c <_printf_i+0x144>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	07df      	lsls	r7, r3, #31
 8008778:	d508      	bpl.n	800878c <_printf_i+0x144>
 800877a:	6923      	ldr	r3, [r4, #16]
 800877c:	6861      	ldr	r1, [r4, #4]
 800877e:	4299      	cmp	r1, r3
 8008780:	bfde      	ittt	le
 8008782:	2330      	movle	r3, #48	@ 0x30
 8008784:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800878c:	1b92      	subs	r2, r2, r6
 800878e:	6122      	str	r2, [r4, #16]
 8008790:	f8cd a000 	str.w	sl, [sp]
 8008794:	464b      	mov	r3, r9
 8008796:	aa03      	add	r2, sp, #12
 8008798:	4621      	mov	r1, r4
 800879a:	4640      	mov	r0, r8
 800879c:	f7ff fee6 	bl	800856c <_printf_common>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d14a      	bne.n	800883a <_printf_i+0x1f2>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b004      	add	sp, #16
 80087aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	f043 0320 	orr.w	r3, r3, #32
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	4833      	ldr	r0, [pc, #204]	@ (8008884 <_printf_i+0x23c>)
 80087b8:	2778      	movs	r7, #120	@ 0x78
 80087ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	6831      	ldr	r1, [r6, #0]
 80087c2:	061f      	lsls	r7, r3, #24
 80087c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80087c8:	d402      	bmi.n	80087d0 <_printf_i+0x188>
 80087ca:	065f      	lsls	r7, r3, #25
 80087cc:	bf48      	it	mi
 80087ce:	b2ad      	uxthmi	r5, r5
 80087d0:	6031      	str	r1, [r6, #0]
 80087d2:	07d9      	lsls	r1, r3, #31
 80087d4:	bf44      	itt	mi
 80087d6:	f043 0320 	orrmi.w	r3, r3, #32
 80087da:	6023      	strmi	r3, [r4, #0]
 80087dc:	b11d      	cbz	r5, 80087e6 <_printf_i+0x19e>
 80087de:	2310      	movs	r3, #16
 80087e0:	e7ac      	b.n	800873c <_printf_i+0xf4>
 80087e2:	4827      	ldr	r0, [pc, #156]	@ (8008880 <_printf_i+0x238>)
 80087e4:	e7e9      	b.n	80087ba <_printf_i+0x172>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	f023 0320 	bic.w	r3, r3, #32
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	e7f6      	b.n	80087de <_printf_i+0x196>
 80087f0:	4616      	mov	r6, r2
 80087f2:	e7bd      	b.n	8008770 <_printf_i+0x128>
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	6825      	ldr	r5, [r4, #0]
 80087f8:	6961      	ldr	r1, [r4, #20]
 80087fa:	1d18      	adds	r0, r3, #4
 80087fc:	6030      	str	r0, [r6, #0]
 80087fe:	062e      	lsls	r6, r5, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	d501      	bpl.n	8008808 <_printf_i+0x1c0>
 8008804:	6019      	str	r1, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0x1c6>
 8008808:	0668      	lsls	r0, r5, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0x1bc>
 800880c:	8019      	strh	r1, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	4616      	mov	r6, r2
 8008814:	e7bc      	b.n	8008790 <_printf_i+0x148>
 8008816:	6833      	ldr	r3, [r6, #0]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	6032      	str	r2, [r6, #0]
 800881c:	681e      	ldr	r6, [r3, #0]
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	2100      	movs	r1, #0
 8008822:	4630      	mov	r0, r6
 8008824:	f7f7 fcdc 	bl	80001e0 <memchr>
 8008828:	b108      	cbz	r0, 800882e <_printf_i+0x1e6>
 800882a:	1b80      	subs	r0, r0, r6
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008838:	e7aa      	b.n	8008790 <_printf_i+0x148>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	4632      	mov	r2, r6
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d0ad      	beq.n	80087a4 <_printf_i+0x15c>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d413      	bmi.n	8008876 <_printf_i+0x22e>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	bfb8      	it	lt
 8008856:	4618      	movlt	r0, r3
 8008858:	e7a6      	b.n	80087a8 <_printf_i+0x160>
 800885a:	2301      	movs	r3, #1
 800885c:	4632      	mov	r2, r6
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d09d      	beq.n	80087a4 <_printf_i+0x15c>
 8008868:	3501      	adds	r5, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9903      	ldr	r1, [sp, #12]
 800886e:	1a5b      	subs	r3, r3, r1
 8008870:	42ab      	cmp	r3, r5
 8008872:	dcf2      	bgt.n	800885a <_printf_i+0x212>
 8008874:	e7eb      	b.n	800884e <_printf_i+0x206>
 8008876:	2500      	movs	r5, #0
 8008878:	f104 0619 	add.w	r6, r4, #25
 800887c:	e7f5      	b.n	800886a <_printf_i+0x222>
 800887e:	bf00      	nop
 8008880:	08011f3d 	.word	0x08011f3d
 8008884:	08011f4e 	.word	0x08011f4e

08008888 <memmove>:
 8008888:	4288      	cmp	r0, r1
 800888a:	b510      	push	{r4, lr}
 800888c:	eb01 0402 	add.w	r4, r1, r2
 8008890:	d902      	bls.n	8008898 <memmove+0x10>
 8008892:	4284      	cmp	r4, r0
 8008894:	4623      	mov	r3, r4
 8008896:	d807      	bhi.n	80088a8 <memmove+0x20>
 8008898:	1e43      	subs	r3, r0, #1
 800889a:	42a1      	cmp	r1, r4
 800889c:	d008      	beq.n	80088b0 <memmove+0x28>
 800889e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088a6:	e7f8      	b.n	800889a <memmove+0x12>
 80088a8:	4402      	add	r2, r0
 80088aa:	4601      	mov	r1, r0
 80088ac:	428a      	cmp	r2, r1
 80088ae:	d100      	bne.n	80088b2 <memmove+0x2a>
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ba:	e7f7      	b.n	80088ac <memmove+0x24>

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	@ (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f9 fbb6 	bl	8002038 <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	2000b00c 	.word	0x2000b00c

080088dc <_realloc_r>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	4680      	mov	r8, r0
 80088e2:	4615      	mov	r5, r2
 80088e4:	460c      	mov	r4, r1
 80088e6:	b921      	cbnz	r1, 80088f2 <_realloc_r+0x16>
 80088e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	4611      	mov	r1, r2
 80088ee:	f7ff bc59 	b.w	80081a4 <_malloc_r>
 80088f2:	b92a      	cbnz	r2, 8008900 <_realloc_r+0x24>
 80088f4:	f7ff fbea 	bl	80080cc <_free_r>
 80088f8:	2400      	movs	r4, #0
 80088fa:	4620      	mov	r0, r4
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	f000 f81a 	bl	8008938 <_malloc_usable_size_r>
 8008904:	4285      	cmp	r5, r0
 8008906:	4606      	mov	r6, r0
 8008908:	d802      	bhi.n	8008910 <_realloc_r+0x34>
 800890a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800890e:	d8f4      	bhi.n	80088fa <_realloc_r+0x1e>
 8008910:	4629      	mov	r1, r5
 8008912:	4640      	mov	r0, r8
 8008914:	f7ff fc46 	bl	80081a4 <_malloc_r>
 8008918:	4607      	mov	r7, r0
 800891a:	2800      	cmp	r0, #0
 800891c:	d0ec      	beq.n	80088f8 <_realloc_r+0x1c>
 800891e:	42b5      	cmp	r5, r6
 8008920:	462a      	mov	r2, r5
 8008922:	4621      	mov	r1, r4
 8008924:	bf28      	it	cs
 8008926:	4632      	movcs	r2, r6
 8008928:	f7ff fbc2 	bl	80080b0 <memcpy>
 800892c:	4621      	mov	r1, r4
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff fbcc 	bl	80080cc <_free_r>
 8008934:	463c      	mov	r4, r7
 8008936:	e7e0      	b.n	80088fa <_realloc_r+0x1e>

08008938 <_malloc_usable_size_r>:
 8008938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893c:	1f18      	subs	r0, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	bfbc      	itt	lt
 8008942:	580b      	ldrlt	r3, [r1, r0]
 8008944:	18c0      	addlt	r0, r0, r3
 8008946:	4770      	bx	lr

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
