
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009758  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120b8  080120b8  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  080120b8  080120b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080120c0  080120c0  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120c0  080120c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080120c4  080120c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  080120c8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad20  20000270  08012338  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000af90  08012338  00014f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013748  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036db  00000000  00000000  000279e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0002b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c15  00000000  00000000  0002c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002903f  00000000  00000000  0002cccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016522  00000000  00000000  00055d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edfa9  00000000  00000000  0006c22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a1d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cac  00000000  00000000  0015a21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015eec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008948 	.word	0x08008948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08008948 	.word	0x08008948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ring_buffer_setup>:
ring_buffer txRingBuffer;
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];

void ring_buffer_setup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:

uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	2000028c 	.word	0x2000028c

080005c8 <USART_getchar>:

int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <USART_getchar+0x4c>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <USART_getchar+0x4c>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d013      	beq.n	8000602 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <USART_getchar+0x4c>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <USART_getchar+0x50>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <USART_getchar+0x4c>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <USART_getchar+0x4c>)
 80005ec:	68d2      	ldr	r2, [r2, #12]
 80005ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80005f2:	fb01 f202 	mul.w	r2, r1, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	4a06      	ldr	r2, [pc, #24]	@ (8000614 <USART_getchar+0x4c>)
 80005fa:	6053      	str	r3, [r2, #4]
        return tmp;
 80005fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000600:	e001      	b.n	8000606 <USART_getchar+0x3e>
    }
    return -1; // Buffer empty
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	2000028c 	.word	0x2000028c
 8000618:	20000aac 	.word	0x20000aac

0800061c <USART_fsend>:
        	txRingBuffer.readIndex = idx;
        }

        __enable_irq(); //ponownie aktywujemy przerwania
}
void USART_fsend(char* format,...){
 800061c:	b40f      	push	{r0, r1, r2, r3}
 800061e:	b580      	push	{r7, lr}
 8000620:	b0a4      	sub	sp, #144	@ 0x90
 8000622:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000624:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000628:	607b      	str	r3, [r7, #4]
	  vsprintf(tmp_rs,format,arglist);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000634:	4618      	mov	r0, r3
 8000636:	f007 f94b 	bl	80078d0 <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 800063a:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <USART_fsend+0xe0>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000646:	e016      	b.n	8000676 <USART_fsend+0x5a>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	f107 010c 	add.w	r1, r7, #12
 800064e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000652:	440a      	add	r2, r1
 8000654:	7811      	ldrb	r1, [r2, #0]
 8000656:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <USART_fsend+0xe4>)
 8000658:	54d1      	strb	r1, [r2, r3]
		  idx++;
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000666:	db01      	blt.n	800066c <USART_fsend+0x50>
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 800066c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000670:	3301      	adds	r3, #1
 8000672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fda8 	bl	80001d0 <strlen>
 8000680:	4602      	mov	r2, r0
 8000682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000686:	429a      	cmp	r2, r3
 8000688:	d8de      	bhi.n	8000648 <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068a:	b672      	cpsid	i
}
 800068c:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <USART_fsend+0xe0>)
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <USART_fsend+0xe0>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	d123      	bne.n	80006e2 <USART_fsend+0xc6>
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <USART_fsend+0xe8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a4:	2b80      	cmp	r3, #128	@ 0x80
 80006a6:	d11c      	bne.n	80006e2 <USART_fsend+0xc6>
		  txRingBuffer.writeIndex=idx;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <USART_fsend+0xe0>)
 80006ae:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <USART_fsend+0xe0>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a12      	ldr	r2, [pc, #72]	@ (8000700 <USART_fsend+0xe4>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	70fb      	strb	r3, [r7, #3]
		  txRingBuffer.readIndex++;
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <USART_fsend+0xe0>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <USART_fsend+0xe0>)
 80006c2:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <USART_fsend+0xe0>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006cc:	d302      	bcc.n	80006d4 <USART_fsend+0xb8>
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <USART_fsend+0xe0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006d4:	1cfb      	adds	r3, r7, #3
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	480a      	ldr	r0, [pc, #40]	@ (8000704 <USART_fsend+0xe8>)
 80006dc:	f003 ff6e 	bl	80045bc <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 80006e0:	e003      	b.n	80006ea <USART_fsend+0xce>
	  }else{
		  txRingBuffer.writeIndex=idx;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <USART_fsend+0xe0>)
 80006e8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006ea:	b662      	cpsie	i
}
 80006ec:	bf00      	nop
	  }
	  __enable_irq();
}
 80006ee:	bf00      	nop
 80006f0:	3790      	adds	r7, #144	@ 0x90
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f8:	b004      	add	sp, #16
 80006fa:	4770      	bx	lr
 80006fc:	2000029c 	.word	0x2000029c
 8000700:	200002ac 	.word	0x200002ac
 8000704:	2000adb8 	.word	0x2000adb8

08000708 <calculate_crc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculate_crc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	@ 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000714:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000718:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	e019      	b.n	8000754 <calculate_crc16+0x4c>
        uint8_t byte = data[i];
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 800072a:	8bfb      	ldrh	r3, [r7, #30]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	b29b      	uxth	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	4053      	eors	r3, r2
 8000736:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000738:	8bfb      	ldrh	r3, [r7, #30]
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21a      	sxth	r2, r3
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	490f      	ldr	r1, [pc, #60]	@ (8000780 <calculate_crc16+0x78>)
 8000742:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000746:	b21b      	sxth	r3, r3
 8000748:	4053      	eors	r3, r2
 800074a:	b21b      	sxth	r3, r3
 800074c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	3301      	adds	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e1      	bcc.n	8000720 <calculate_crc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 800075c:	8bfb      	ldrh	r3, [r7, #30]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2da      	uxtb	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	8bfa      	ldrh	r2, [r7, #30]
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3724      	adds	r7, #36	@ 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <parse_color>:
uint8_t received_char;
Receive_Frame ramka;

//=========================FUNKCJE POMOCNICZE=============================
//TODO do sprawdzenia
static Color_t parse_color(const char *color_name) {
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < sizeof(color_map) / sizeof(ColorMap); ++i) {
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e01c      	b.n	80007cc <parse_color+0x48>
        if (strncmp(color_name, color_map[i].name, strlen(color_map[i].name)) == 0) {
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <parse_color+0x5c>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800079a:	4a11      	ldr	r2, [pc, #68]	@ (80007e0 <parse_color+0x5c>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fd14 	bl	80001d0 <strlen>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	4621      	mov	r1, r4
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f007 f8ad 	bl	800790e <strncmp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <parse_color+0x42>
            return color_map[i].value;
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <parse_color+0x5c>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	e007      	b.n	80007d6 <parse_color+0x52>
    for (size_t i = 0; i < sizeof(color_map) / sizeof(ColorMap); ++i) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d9df      	bls.n	8000792 <parse_color+0xe>
        }
    }
    return 0xFFFF; // Nieznany kolor
 80007d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	bf00      	nop
 80007e0:	08008a50 	.word	0x08008a50

080007e4 <reset_frame_state>:

static void reset_frame_state() {
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
    in_frame = false;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <reset_frame_state+0x20>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <reset_frame_state+0x24>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <reset_frame_state+0x28>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	20000cc0 	.word	0x20000cc0
 8000808:	20000cba 	.word	0x20000cba
 800080c:	20000cbc 	.word	0x20000cbc

08000810 <parse_parameters>:
		break;
	}
}
*/

static bool parse_parameters(const char *data, const char *pattern, ...) {
 8000810:	b40e      	push	{r1, r2, r3}
 8000812:	b580      	push	{r7, lr}
 8000814:	b08f      	sub	sp, #60	@ 0x3c
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, pattern);
 800081a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800081e:	623b      	str	r3, [r7, #32]

    const char *current = data;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	61fb      	str	r3, [r7, #28]
    while (*pattern && *current) {
 8000824:	e0be      	b.n	80009a4 <parse_parameters+0x194>
        switch (*pattern++) {
 8000826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	647a      	str	r2, [r7, #68]	@ 0x44
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b68      	subs	r3, #104	@ 0x68
 8000830:	2b0d      	cmp	r3, #13
 8000832:	f200 80b0 	bhi.w	8000996 <parse_parameters+0x186>
 8000836:	a201      	add	r2, pc, #4	@ (adr r2, 800083c <parse_parameters+0x2c>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	080008e1 	.word	0x080008e1
 8000840:	080008c1 	.word	0x080008c1
 8000844:	08000997 	.word	0x08000997
 8000848:	08000997 	.word	0x08000997
 800084c:	08000997 	.word	0x08000997
 8000850:	08000997 	.word	0x08000997
 8000854:	08000997 	.word	0x08000997
 8000858:	08000997 	.word	0x08000997
 800085c:	08000997 	.word	0x08000997
 8000860:	08000997 	.word	0x08000997
 8000864:	08000997 	.word	0x08000997
 8000868:	0800092d 	.word	0x0800092d
 800086c:	08000997 	.word	0x08000997
 8000870:	08000875 	.word	0x08000875
            case 'u': { // uint8_t
                uint8_t *val = va_arg(args, uint8_t *);
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	1d1a      	adds	r2, r3, #4
 8000878:	623a      	str	r2, [r7, #32]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	633b      	str	r3, [r7, #48]	@ 0x30
                if (strncmp(current, "0x", 2) == 0) {
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	2202      	movs	r2, #2
 8000882:	4954      	ldr	r1, [pc, #336]	@ (80009d4 <parse_parameters+0x1c4>)
 8000884:	4618      	mov	r0, r3
 8000886:	f007 f842 	bl	800790e <strncmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10b      	bne.n	80008a8 <parse_parameters+0x98>
                    *val = (uint8_t)strtoul(current, (char **)&current, 16);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f107 011c 	add.w	r1, r7, #28
 8000896:	2210      	movs	r2, #16
 8000898:	4618      	mov	r0, r3
 800089a:	f006 fddb 	bl	8007454 <strtoul>
 800089e:	4603      	mov	r3, r0
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008a4:	701a      	strb	r2, [r3, #0]
                } else {
                    *val = (uint8_t)strtoul(current, (char **)&current, 10);
                }
                break;
 80008a6:	e076      	b.n	8000996 <parse_parameters+0x186>
                    *val = (uint8_t)strtoul(current, (char **)&current, 10);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f107 011c 	add.w	r1, r7, #28
 80008ae:	220a      	movs	r2, #10
 80008b0:	4618      	mov	r0, r3
 80008b2:	f006 fdcf 	bl	8007454 <strtoul>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008bc:	701a      	strb	r2, [r3, #0]
                break;
 80008be:	e06a      	b.n	8000996 <parse_parameters+0x186>
            }
            case 'i': { // int
                int *val = va_arg(args, int *);
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	1d1a      	adds	r2, r3, #4
 80008c4:	623a      	str	r2, [r7, #32]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
                *val = (int)strtol(current, (char **)&current, 10);
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	f107 011c 	add.w	r1, r7, #28
 80008d0:	220a      	movs	r2, #10
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 fd46 	bl	8007364 <strtol>
 80008d8:	4602      	mov	r2, r0
 80008da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008dc:	601a      	str	r2, [r3, #0]
                break;
 80008de:	e05a      	b.n	8000996 <parse_parameters+0x186>
            }
            case 'h': { // uint16_t
                uint16_t *val = va_arg(args, uint16_t *);
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	1d1a      	adds	r2, r3, #4
 80008e4:	623a      	str	r2, [r7, #32]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
                if (strncmp(current, "0x", 2) == 0) {
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	2202      	movs	r2, #2
 80008ee:	4939      	ldr	r1, [pc, #228]	@ (80009d4 <parse_parameters+0x1c4>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f007 f80c 	bl	800790e <strncmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10b      	bne.n	8000914 <parse_parameters+0x104>
                    *val = (uint16_t)strtoul(current, (char **)&current, 16);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f107 011c 	add.w	r1, r7, #28
 8000902:	2210      	movs	r2, #16
 8000904:	4618      	mov	r0, r3
 8000906:	f006 fda5 	bl	8007454 <strtoul>
 800090a:	4603      	mov	r3, r0
 800090c:	b29a      	uxth	r2, r3
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	801a      	strh	r2, [r3, #0]
                } else {
                    *val = (uint16_t)strtoul(current, (char **)&current, 10);
                }
                break;
 8000912:	e040      	b.n	8000996 <parse_parameters+0x186>
                    *val = (uint16_t)strtoul(current, (char **)&current, 10);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f107 011c 	add.w	r1, r7, #28
 800091a:	220a      	movs	r2, #10
 800091c:	4618      	mov	r0, r3
 800091e:	f006 fd99 	bl	8007454 <strtoul>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000928:	801a      	strh	r2, [r3, #0]
                break;
 800092a:	e034      	b.n	8000996 <parse_parameters+0x186>
            }
            case 's': { // Kolor (string -> uint16_t)
                uint16_t *val = va_arg(args, uint16_t *);
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	1d1a      	adds	r2, r3, #4
 8000930:	623a      	str	r2, [r7, #32]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
                char color[16]; // Bufor na kolor
                size_t i = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	637b      	str	r3, [r7, #52]	@ 0x34

                while (*current != ',' && *current != '\0' && i < sizeof(color) - 1) {
 800093a:	e00a      	b.n	8000952 <parse_parameters+0x142>
                    color[i++] = *current++;
 800093c:	69fa      	ldr	r2, [r7, #28]
 800093e:	1c53      	adds	r3, r2, #1
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000944:	1c59      	adds	r1, r3, #1
 8000946:	6379      	str	r1, [r7, #52]	@ 0x34
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	3338      	adds	r3, #56	@ 0x38
 800094c:	443b      	add	r3, r7
 800094e:	f803 2c2c 	strb.w	r2, [r3, #-44]
                while (*current != ',' && *current != '\0' && i < sizeof(color) - 1) {
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b2c      	cmp	r3, #44	@ 0x2c
 8000958:	d006      	beq.n	8000968 <parse_parameters+0x158>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <parse_parameters+0x158>
 8000962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000964:	2b0e      	cmp	r3, #14
 8000966:	d9e9      	bls.n	800093c <parse_parameters+0x12c>
                }
                color[i] = '\0';
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800096e:	4413      	add	r3, r2
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
                *val = parse_color(color);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff03 	bl	8000784 <parse_color>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000984:	801a      	strh	r2, [r3, #0]
                if (*val == 0xFFFF) { // Nieznany kolor
 8000986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <parse_parameters+0x186>
                    va_end(args);
                    return false;
 8000992:	2300      	movs	r3, #0
 8000994:	e016      	b.n	80009c4 <parse_parameters+0x1b4>
                break;
            }
        }

        // Przejdź do następnego pola, jeśli jest przecinek
        if (*current == ',') {
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b2c      	cmp	r3, #44	@ 0x2c
 800099c:	d102      	bne.n	80009a4 <parse_parameters+0x194>
            current++;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3301      	adds	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
    while (*pattern && *current) {
 80009a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d004      	beq.n	80009b6 <parse_parameters+0x1a6>
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f47f af38 	bne.w	8000826 <parse_parameters+0x16>
        }
    }

    va_end(args);
    return (*pattern == '\0'); // Upewnij się, że przetworzono cały wzorzec
 80009b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf0c      	ite	eq
 80009be:	2301      	moveq	r3, #1
 80009c0:	2300      	movne	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	373c      	adds	r7, #60	@ 0x3c
 80009c8:	46bd      	mov	sp, r7
 80009ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009ce:	b003      	add	sp, #12
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	0800899c 	.word	0x0800899c

080009d8 <executeONK>:

//==========================OBSŁUGA KOMEND================================

//TODO nie dzialla
static void executeONK(Receive_Frame *frame)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af04      	add	r7, sp, #16
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	2300      	movs	r3, #0
 80009e6:	73bb      	strb	r3, [r7, #14]
 80009e8:	2300      	movs	r3, #0
 80009ea:	737b      	strb	r3, [r7, #13]
 80009ec:	2300      	movs	r3, #0
 80009ee:	733b      	strb	r3, [r7, #12]
	uint16_t color = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	817b      	strh	r3, [r7, #10]
    if (!parse_parameters(frame->data, "uuuuh", &x, &y, &r, &filling, &color))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1d58      	adds	r0, r3, #5
 80009f8:	f107 010e 	add.w	r1, r7, #14
 80009fc:	f107 020f 	add.w	r2, r7, #15
 8000a00:	f107 030a 	add.w	r3, r7, #10
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	f107 030d 	add.w	r3, r7, #13
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	460b      	mov	r3, r1
 8000a14:	4917      	ldr	r1, [pc, #92]	@ (8000a74 <executeONK+0x9c>)
 8000a16:	f7ff fefb 	bl	8000810 <parse_parameters>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f083 0301 	eor.w	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d009      	beq.n	8000a3a <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3305      	adds	r3, #5
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <executeONK+0xa0>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <executeONK+0xa4>)
 8000a30:	2167      	movs	r1, #103	@ 0x67
 8000a32:	2068      	movs	r0, #104	@ 0x68
 8000a34:	f000 fae2 	bl	8000ffc <prepareFrame>
 8000a38:	e019      	b.n	8000a6e <executeONK+0x96>
        return;
    }
	switch(filling)
 8000a3a:	7b3b      	ldrb	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <executeONK+0x6e>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d00a      	beq.n	8000a5a <executeONK+0x82>
 8000a44:	e013      	b.n	8000a6e <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	b218      	sxth	r0, r3
 8000a4a:	7bbb      	ldrb	r3, [r7, #14]
 8000a4c:	b219      	sxth	r1, r3
 8000a4e:	7b7b      	ldrb	r3, [r7, #13]
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	897b      	ldrh	r3, [r7, #10]
 8000a54:	f005 fff4 	bl	8006a40 <hagl_draw_circle>
		break;
 8000a58:	e009      	b.n	8000a6e <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	b218      	sxth	r0, r3
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	b219      	sxth	r1, r3
 8000a62:	7b7b      	ldrb	r3, [r7, #13]
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	897b      	ldrh	r3, [r7, #10]
 8000a68:	f006 f919 	bl	8006c9e <hagl_fill_circle>
		break;
 8000a6c:	bf00      	nop
	}
}
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	080089a0 	.word	0x080089a0
 8000a78:	080089a8 	.word	0x080089a8
 8000a7c:	080089bc 	.word	0x080089bc

08000a80 <executeONP>:


static void executeONP(Receive_Frame *frame)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b089      	sub	sp, #36	@ 0x24
 8000a84:	af04      	add	r7, sp, #16
 8000a86:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
 8000a90:	2300      	movs	r3, #0
 8000a92:	737b      	strb	r3, [r7, #13]
 8000a94:	2300      	movs	r3, #0
 8000a96:	733b      	strb	r3, [r7, #12]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	72fb      	strb	r3, [r7, #11]
	uint16_t color = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	813b      	strh	r3, [r7, #8]
	if (!parse_parameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1d58      	adds	r0, r3, #5
 8000aa4:	f107 010e 	add.w	r1, r7, #14
 8000aa8:	f107 020f 	add.w	r2, r7, #15
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	9303      	str	r3, [sp, #12]
 8000ab2:	f107 030b 	add.w	r3, r7, #11
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	f107 030d 	add.w	r3, r7, #13
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	491c      	ldr	r1, [pc, #112]	@ (8000b38 <executeONP+0xb8>)
 8000ac8:	f7ff fea2 	bl	8000810 <parse_parameters>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f083 0301 	eor.w	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d009      	beq.n	8000aec <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3305      	adds	r3, #5
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <executeONP+0xbc>)
 8000ae0:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <executeONP+0xc0>)
 8000ae2:	2167      	movs	r1, #103	@ 0x67
 8000ae4:	2068      	movs	r0, #104	@ 0x68
 8000ae6:	f000 fa89 	bl	8000ffc <prepareFrame>
 8000aea:	e021      	b.n	8000b30 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <executeONP+0x78>
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d00e      	beq.n	8000b14 <executeONP+0x94>
 8000af6:	e01b      	b.n	8000b30 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	b218      	sxth	r0, r3
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	b219      	sxth	r1, r3
 8000b00:	7b7b      	ldrb	r3, [r7, #13]
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	b21c      	sxth	r4, r3
 8000b08:	893b      	ldrh	r3, [r7, #8]
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	4623      	mov	r3, r4
 8000b0e:	f005 fce7 	bl	80064e0 <hagl_draw_rectangle>
		break;
 8000b12:	e00d      	b.n	8000b30 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	b218      	sxth	r0, r3
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	b219      	sxth	r1, r3
 8000b1c:	7b7b      	ldrb	r3, [r7, #13]
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	7b3b      	ldrb	r3, [r7, #12]
 8000b22:	b21c      	sxth	r4, r3
 8000b24:	893b      	ldrh	r3, [r7, #8]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	4623      	mov	r3, r4
 8000b2a:	f005 fd5f 	bl	80065ec <hagl_fill_rectangle>
		break;
 8000b2e:	bf00      	nop
	}
}
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	080089c0 	.word	0x080089c0
 8000b3c:	080089a8 	.word	0x080089a8
 8000b40:	080089bc 	.word	0x080089bc

08000b44 <executeONT>:


//TODO nie dziala
static void executeONT(Receive_Frame *frame)
{
 8000b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b46:	b08d      	sub	sp, #52	@ 0x34
 8000b48:	af06      	add	r7, sp, #24
 8000b4a:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	75fb      	strb	r3, [r7, #23]
 8000b50:	2300      	movs	r3, #0
 8000b52:	75bb      	strb	r3, [r7, #22]
 8000b54:	2300      	movs	r3, #0
 8000b56:	757b      	strb	r3, [r7, #21]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	753b      	strb	r3, [r7, #20]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	74fb      	strb	r3, [r7, #19]
 8000b60:	2300      	movs	r3, #0
 8000b62:	74bb      	strb	r3, [r7, #18]
 8000b64:	2300      	movs	r3, #0
 8000b66:	747b      	strb	r3, [r7, #17]
    uint16_t color = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	81fb      	strh	r3, [r7, #14]
    if (!parse_parameters(frame->data, "uuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1d58      	adds	r0, r3, #5
 8000b70:	f107 0116 	add.w	r1, r7, #22
 8000b74:	f107 0217 	add.w	r2, r7, #23
 8000b78:	f107 030e 	add.w	r3, r7, #14
 8000b7c:	9305      	str	r3, [sp, #20]
 8000b7e:	f107 0311 	add.w	r3, r7, #17
 8000b82:	9304      	str	r3, [sp, #16]
 8000b84:	f107 0312 	add.w	r3, r7, #18
 8000b88:	9303      	str	r3, [sp, #12]
 8000b8a:	f107 0313 	add.w	r3, r7, #19
 8000b8e:	9302      	str	r3, [sp, #8]
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	f107 0315 	add.w	r3, r7, #21
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4924      	ldr	r1, [pc, #144]	@ (8000c30 <executeONT+0xec>)
 8000ba0:	f7ff fe36 	bl	8000810 <parse_parameters>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f083 0301 	eor.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d009      	beq.n	8000bc4 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3305      	adds	r3, #5
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <executeONT+0xf0>)
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <executeONT+0xf4>)
 8000bba:	2167      	movs	r1, #103	@ 0x67
 8000bbc:	2068      	movs	r0, #104	@ 0x68
 8000bbe:	f000 fa1d 	bl	8000ffc <prepareFrame>
 8000bc2:	e031      	b.n	8000c28 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000bc4:	7c7b      	ldrb	r3, [r7, #17]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <executeONT+0x8c>
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d016      	beq.n	8000bfc <executeONT+0xb8>
 8000bce:	e02b      	b.n	8000c28 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	b218      	sxth	r0, r3
 8000bd4:	7dbb      	ldrb	r3, [r7, #22]
 8000bd6:	b21c      	sxth	r4, r3
 8000bd8:	7d7b      	ldrb	r3, [r7, #21]
 8000bda:	b21d      	sxth	r5, r3
 8000bdc:	7d3b      	ldrb	r3, [r7, #20]
 8000bde:	b21e      	sxth	r6, r3
 8000be0:	7cfb      	ldrb	r3, [r7, #19]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	7cba      	ldrb	r2, [r7, #18]
 8000be6:	b212      	sxth	r2, r2
 8000be8:	89f9      	ldrh	r1, [r7, #14]
 8000bea:	9102      	str	r1, [sp, #8]
 8000bec:	9201      	str	r2, [sp, #4]
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	4633      	mov	r3, r6
 8000bf2:	462a      	mov	r2, r5
 8000bf4:	4621      	mov	r1, r4
 8000bf6:	f006 fadd 	bl	80071b4 <hagl_draw_triangle>
            break;
 8000bfa:	e015      	b.n	8000c28 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	b218      	sxth	r0, r3
 8000c00:	7dbb      	ldrb	r3, [r7, #22]
 8000c02:	b21c      	sxth	r4, r3
 8000c04:	7d7b      	ldrb	r3, [r7, #21]
 8000c06:	b21d      	sxth	r5, r3
 8000c08:	7d3b      	ldrb	r3, [r7, #20]
 8000c0a:	b21e      	sxth	r6, r3
 8000c0c:	7cfb      	ldrb	r3, [r7, #19]
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	7cba      	ldrb	r2, [r7, #18]
 8000c12:	b212      	sxth	r2, r2
 8000c14:	89f9      	ldrh	r1, [r7, #14]
 8000c16:	9102      	str	r1, [sp, #8]
 8000c18:	9201      	str	r2, [sp, #4]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4633      	mov	r3, r6
 8000c1e:	462a      	mov	r2, r5
 8000c20:	4621      	mov	r1, r4
 8000c22:	f006 faed 	bl	8007200 <hagl_fill_triangle>
            break;
 8000c26:	bf00      	nop
    }
}
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	080089c8 	.word	0x080089c8
 8000c34:	080089a8 	.word	0x080089a8
 8000c38:	080089bc 	.word	0x080089bc

08000c3c <executeONN>:

//TODO nie dziala, dodac obsluge przewijania tekstu
static void executeONN(Receive_Frame *frame)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	f6ad 0d24 	subw	sp, sp, #2084	@ 0x824
 8000c42:	af02      	add	r7, sp, #8
 8000c44:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c48:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c4c:	6018      	str	r0, [r3, #0]
    wchar_t text[512];
    uint8_t x = 0, y = 0, fontSize = 0;
 8000c4e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c52:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c5e:	f6a3 0306 	subw	r3, r3, #2054	@ 0x806
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c6a:	f6a3 0307 	subw	r3, r3, #2055	@ 0x807
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
    uint16_t color = 0;
 8000c72:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c76:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	801a      	strh	r2, [r3, #0]
    if (!parse_parameters(frame->data, "uuus", &x, &y, &fontSize, &color)) {
 8000c7e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000c82:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1d58      	adds	r0, r3, #5
 8000c8a:	f107 0112 	add.w	r1, r7, #18
 8000c8e:	f107 0213 	add.w	r2, r7, #19
 8000c92:	f107 030e 	add.w	r3, r7, #14
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	f107 0311 	add.w	r3, r7, #17
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4952      	ldr	r1, [pc, #328]	@ (8000dec <executeONN+0x1b0>)
 8000ca2:	f7ff fdb5 	bl	8000810 <parse_parameters>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f083 0301 	eor.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00d      	beq.n	8000cce <executeONN+0x92>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000cb2:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000cb6:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3305      	adds	r3, #5
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8000df0 <executeONN+0x1b4>)
 8000cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8000df4 <executeONN+0x1b8>)
 8000cc4:	2167      	movs	r1, #103	@ 0x67
 8000cc6:	2068      	movs	r0, #104	@ 0x68
 8000cc8:	f000 f998 	bl	8000ffc <prepareFrame>
 8000ccc:	e08a      	b.n	8000de4 <executeONN+0x1a8>
        return;
    }
    const char *text_start = strchr(frame->data, ',');
 8000cce:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000cd2:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3305      	adds	r3, #5
 8000cda:	212c      	movs	r1, #44	@ 0x2c
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 fe09 	bl	80078f4 <strchr>
 8000ce2:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
    if (text_start) {
 8000ce6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d024      	beq.n	8000d38 <executeONN+0xfc>
        text_start = strchr(text_start + 1, ','); // Znajdź początek tekstu
 8000cee:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	212c      	movs	r1, #44	@ 0x2c
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f006 fdfc 	bl	80078f4 <strchr>
 8000cfc:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
        text_start = strchr(text_start + 1, ','); // Znajdź początek tekstu
 8000d00:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000d04:	3301      	adds	r3, #1
 8000d06:	212c      	movs	r1, #44	@ 0x2c
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f006 fdf3 	bl	80078f4 <strchr>
 8000d0e:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
        text_start = strchr(text_start + 1, ','); // Znajdź początek tekstu
 8000d12:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000d16:	3301      	adds	r3, #1
 8000d18:	212c      	movs	r1, #44	@ 0x2c
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f006 fdea 	bl	80078f4 <strchr>
 8000d20:	f8c7 0814 	str.w	r0, [r7, #2068]	@ 0x814
        mbstowcs(text, text_start + 1, 512); // Konwersja tekstu na `wchar_t`
 8000d24:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8000d28:	1c59      	adds	r1, r3, #1
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 fa8e 	bl	8007254 <mbstowcs>
    }
    switch(fontSize)
 8000d38:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d3c:	f6a3 0307 	subw	r3, r3, #2055	@ 0x807
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d036      	beq.n	8000db4 <executeONN+0x178>
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	dc4c      	bgt.n	8000de4 <executeONN+0x1a8>
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d002      	beq.n	8000d54 <executeONN+0x118>
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d018      	beq.n	8000d84 <executeONN+0x148>
 8000d52:	e047      	b.n	8000de4 <executeONN+0x1a8>
    {
        case 1:
            hagl_put_text(text, x, y, color, font5x7); //fontSize zmien
 8000d54:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d58:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b219      	sxth	r1, r3
 8000d60:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d64:	f6a3 0306 	subw	r3, r3, #2054	@ 0x806
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d70:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	f107 0014 	add.w	r0, r7, #20
 8000d7a:	4c1f      	ldr	r4, [pc, #124]	@ (8000df8 <executeONN+0x1bc>)
 8000d7c:	9400      	str	r4, [sp, #0]
 8000d7e:	f005 fdd7 	bl	8006930 <hagl_put_text>
            break;
 8000d82:	e02f      	b.n	8000de4 <executeONN+0x1a8>
        case 2:
            hagl_put_text(text, x, y, color, font5x8); //fontSize zmien
 8000d84:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d88:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b219      	sxth	r1, r3
 8000d90:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000d94:	f6a3 0306 	subw	r3, r3, #2054	@ 0x806
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000da0:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	f107 0014 	add.w	r0, r7, #20
 8000daa:	4c14      	ldr	r4, [pc, #80]	@ (8000dfc <executeONN+0x1c0>)
 8000dac:	9400      	str	r4, [sp, #0]
 8000dae:	f005 fdbf 	bl	8006930 <hagl_put_text>
            break;
 8000db2:	e017      	b.n	8000de4 <executeONN+0x1a8>
        case 3:
            hagl_put_text(text, x, x, color, font6x9); //fontSize zmien
 8000db4:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000db8:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b219      	sxth	r1, r3
 8000dc0:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000dc4:	f6a3 0305 	subw	r3, r3, #2053	@ 0x805
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000dd0:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	f107 0014 	add.w	r0, r7, #20
 8000dda:	4c09      	ldr	r4, [pc, #36]	@ (8000e00 <executeONN+0x1c4>)
 8000ddc:	9400      	str	r4, [sp, #0]
 8000dde:	f005 fda7 	bl	8006930 <hagl_put_text>
            break;
 8000de2:	bf00      	nop
    }
}
 8000de4:	f607 071c 	addw	r7, r7, #2076	@ 0x81c
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	080089d0 	.word	0x080089d0
 8000df0:	080089a8 	.word	0x080089a8
 8000df4:	080089bc 	.word	0x080089bc
 8000df8:	08008a90 	.word	0x08008a90
 8000dfc:	0800bf98 	.word	0x0800bf98
 8000e00:	0800ee3c 	.word	0x0800ee3c

08000e04 <executeOFF>:



//TODO bład parsowania danych
static void executeOFF(Receive_Frame *frame)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	6078      	str	r0, [r7, #4]
	uint8_t state = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
	if (!parse_parameters(frame->data, "u", &state)) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3305      	adds	r3, #5
 8000e14:	f107 020f 	add.w	r2, r7, #15
 8000e18:	4916      	ldr	r1, [pc, #88]	@ (8000e74 <executeOFF+0x70>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fcf8 	bl	8000810 <parse_parameters>
 8000e20:	4603      	mov	r3, r0
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <executeOFF+0x3c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3305      	adds	r3, #5
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <executeOFF+0x74>)
 8000e34:	4a11      	ldr	r2, [pc, #68]	@ (8000e7c <executeOFF+0x78>)
 8000e36:	2167      	movs	r1, #103	@ 0x67
 8000e38:	2068      	movs	r0, #104	@ 0x68
 8000e3a:	f000 f8df 	bl	8000ffc <prepareFrame>
 8000e3e:	e015      	b.n	8000e6c <executeOFF+0x68>
		return;
	}
	switch(state)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <executeOFF+0x48>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d006      	beq.n	8000e58 <executeOFF+0x54>
 8000e4a:	e00f      	b.n	8000e6c <executeOFF+0x68>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2102      	movs	r1, #2
 8000e50:	480b      	ldr	r0, [pc, #44]	@ (8000e80 <executeOFF+0x7c>)
 8000e52:	f001 fcaf 	bl	80027b4 <HAL_GPIO_WritePin>
		break;
 8000e56:	e009      	b.n	8000e6c <executeOFF+0x68>
	case 1:
		hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, WHITE);
 8000e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2380      	movs	r3, #128	@ 0x80
 8000e60:	22a0      	movs	r2, #160	@ 0xa0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f005 fbc1 	bl	80065ec <hagl_fill_rectangle>
		break;
 8000e6a:	bf00      	nop
	}
}
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	080089d8 	.word	0x080089d8
 8000e78:	080089a8 	.word	0x080089a8
 8000e7c:	080089bc 	.word	0x080089bc
 8000e80:	48000400 	.word	0x48000400

08000e84 <is_within_bounds>:


//=======================SPRAWDZANIE KOORDYNATÓW=========================
bool is_within_bounds(int x, int y)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <is_within_bounds+0x26>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b9f      	cmp	r3, #159	@ 0x9f
 8000e98:	dc07      	bgt.n	8000eaa <is_within_bounds+0x26>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db04      	blt.n	8000eaa <is_within_bounds+0x26>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ea4:	dc01      	bgt.n	8000eaa <is_within_bounds+0x26>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <is_within_bounds+0x28>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <parse_coordinates>:
bool parse_coordinates(const char *data, int *x, int *y)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0a6      	sub	sp, #152	@ 0x98
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE); // Kopiujemy dane wejściowe, bo strtok modyfikuje ciąg
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2280      	movs	r2, #128	@ 0x80
 8000ed2:	68f9      	ldr	r1, [r7, #12]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fd2c 	bl	8007932 <strncpy>

	    token = strtok(data_copy, ","); // Pierwsza współrzędna (jest to funkcja służąca do oddzielania stringów z separatorem)
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4915      	ldr	r1, [pc, #84]	@ (8000f34 <parse_coordinates+0x74>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 fd39 	bl	8007958 <strtok>
 8000ee6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000eea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <parse_coordinates+0x36>
	        return false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e01a      	b.n	8000f2c <parse_coordinates+0x6c>
	    }
	    *x = atoi(token);
 8000ef6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000efa:	f006 f9a7 	bl	800724c <atoi>
 8000efe:	4602      	mov	r2, r0
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ","); // Druga współrzędna
 8000f04:	490b      	ldr	r1, [pc, #44]	@ (8000f34 <parse_coordinates+0x74>)
 8000f06:	2000      	movs	r0, #0
 8000f08:	f006 fd26 	bl	8007958 <strtok>
 8000f0c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <parse_coordinates+0x5c>
	        return false;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e007      	b.n	8000f2c <parse_coordinates+0x6c>
	    }
	    *y = atoi(token);
 8000f1c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000f20:	f006 f994 	bl	800724c <atoi>
 8000f24:	4602      	mov	r2, r0
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]

	    return true;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3798      	adds	r7, #152	@ 0x98
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	080089dc 	.word	0x080089dc

08000f38 <byteStuffing>:
//=======================BYTE STUFFING=========================
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	e04b      	b.n	8000fe6 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f58:	d10e      	bne.n	8000f78 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	617a      	str	r2, [r7, #20]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	227d      	movs	r2, #125	@ 0x7d
 8000f66:	701a      	strb	r2, [r3, #0]
            output[j++] = ']';
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	617a      	str	r2, [r7, #20]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	225d      	movs	r2, #93	@ 0x5d
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	e033      	b.n	8000fe0 <byteStuffing+0xa8>
        } else if (input[i] == '~') {
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f82:	d10e      	bne.n	8000fa2 <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	617a      	str	r2, [r7, #20]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	227d      	movs	r2, #125	@ 0x7d
 8000f90:	701a      	strb	r2, [r3, #0]
            output[j++] = '^';
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	617a      	str	r2, [r7, #20]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	225e      	movs	r2, #94	@ 0x5e
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e01e      	b.n	8000fe0 <byteStuffing+0xa8>
        } else if (input[i] == '`') {
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b60      	cmp	r3, #96	@ 0x60
 8000fac:	d10e      	bne.n	8000fcc <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	617a      	str	r2, [r7, #20]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	227d      	movs	r2, #125	@ 0x7d
 8000fba:	701a      	strb	r2, [r3, #0]
            output[j++] = '&';
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	617a      	str	r2, [r7, #20]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2226      	movs	r2, #38	@ 0x26
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e009      	b.n	8000fe0 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	441a      	add	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	1c59      	adds	r1, r3, #1
 8000fd6:	6179      	str	r1, [r7, #20]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	440b      	add	r3, r1
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3af      	bcc.n	8000f4e <byteStuffing+0x16>
        }
    }
    return j;
 8000fee:	697b      	ldr	r3, [r7, #20]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <prepareFrame>:

//=======================OBSŁUGA RAMKI ZWROTNEJ=========================
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8000ffc:	b408      	push	{r3}
 8000ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001002:	f5ad 7d36 	sub.w	sp, sp, #728	@ 0x2d8
 8001006:	af02      	add	r7, sp, #8
 8001008:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800100c:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001016:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 800101a:	4602      	mov	r2, r0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001022:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8001026:	460a      	mov	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	466b      	mov	r3, sp
 800102c:	461e      	mov	r6, r3
    Frame frame = {0};
 800102e:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8001032:	228a      	movs	r2, #138	@ 0x8a
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fc54 	bl	80078e4 <memset>
    frame.sender = sender;
 800103c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001040:	f2a3 23c1 	subw	r3, r3, #705	@ 0x2c1
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
    frame.receiver = receiver;
 800104a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800104e:	f2a3 23c2 	subw	r3, r3, #706	@ 0x2c2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f887 3226 	strb.w	r3, [r7, #550]	@ 0x226
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 8001058:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800105c:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001060:	f507 7209 	add.w	r2, r7, #548	@ 0x224
 8001064:	1cd0      	adds	r0, r2, #3
 8001066:	2203      	movs	r2, #3
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	f006 fc62 	bl	8007932 <strncpy>

    // Formatowanie danych
    va_list args;
    va_start(args, format);
 800106e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001072:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    vsnprintf((char *)frame.data, MAX_DATA_SIZE, format, args);
 8001076:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800107a:	1d98      	adds	r0, r3, #6
 800107c:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8001080:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8001084:	2180      	movs	r1, #128	@ 0x80
 8001086:	f006 fbff 	bl	8007888 <vsniprintf>
    va_end(args);

    // Oblicz długość danych
    size_t data_len = strlen((const char *)frame.data);
 800108a:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800108e:	3306      	adds	r3, #6
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f89d 	bl	80001d0 <strlen>
 8001096:	f8c7 02c8 	str.w	r0, [r7, #712]	@ 0x2c8

    // Przygotowanie danych do obliczenia CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 800109a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 800109e:	3305      	adds	r3, #5
 80010a0:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
    uint8_t crc_input[crc_input_len];
 80010a4:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 80010a8:	460b      	mov	r3, r1
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 80010b0:	2300      	movs	r3, #0
 80010b2:	6039      	str	r1, [r7, #0]
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	00c3      	lsls	r3, r0, #3
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	00c2      	lsls	r2, r0, #3
 80010cc:	2300      	movs	r3, #0
 80010ce:	468a      	mov	sl, r1
 80010d0:	469b      	mov	fp, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010e6:	1dcb      	adds	r3, r1, #7
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	ebad 0d03 	sub.w	sp, sp, r3
 80010f0:	ab02      	add	r3, sp, #8
 80010f2:	3300      	adds	r3, #0
 80010f4:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
    crc_input[0] = frame.sender;
 80010f8:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80010fc:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001100:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 8001102:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 8001106:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800110a:	705a      	strb	r2, [r3, #1]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 800110c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001110:	3302      	adds	r3, #2
 8001112:	461a      	mov	r2, r3
 8001114:	f207 2327 	addw	r3, r7, #551	@ 0x227
 8001118:	8819      	ldrh	r1, [r3, #0]
 800111a:	789b      	ldrb	r3, [r3, #2]
 800111c:	8011      	strh	r1, [r2, #0]
 800111e:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, frame.data, data_len);
 8001120:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001124:	1d58      	adds	r0, r3, #5
 8001126:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800112a:	3306      	adds	r3, #6
 800112c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 8001130:	4619      	mov	r1, r3
 8001132:	f006 fce0 	bl	8007af6 <memcpy>

    // Obliczanie CRC
    char crc_output[2]; // Tablica na wynik CRC
    calculate_crc16(crc_input, crc_input_len, crc_output);
 8001136:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800113a:	461a      	mov	r2, r3
 800113c:	f8d7 12c4 	ldr.w	r1, [r7, #708]	@ 0x2c4
 8001140:	f8d7 02bc 	ldr.w	r0, [r7, #700]	@ 0x2bc
 8001144:	f7ff fae0 	bl	8000708 <calculate_crc16>

    // Konwersja CRC na heksadecymalne ciągi znaków
    char crc_hex[5]; // 4 znaki na heksadecymalną reprezentację + 1 na znak null
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 8001148:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 800114c:	461a      	mov	r2, r3
 800114e:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8001152:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	4a49      	ldr	r2, [pc, #292]	@ (8001280 <prepareFrame+0x284>)
 800115c:	2105      	movs	r1, #5
 800115e:	f006 faf1 	bl	8007744 <sniprintf>

    // Przygotowanie do byte-stuffingu
    uint8_t raw_payload[2 + COMMAND_LENGTH + data_len + 4]; // 4 dodatkowe bajty na heksadecymalne CRC
 8001162:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001166:	f103 0109 	add.w	r1, r3, #9
 800116a:	460b      	mov	r3, r1
 800116c:	3b01      	subs	r3, #1
 800116e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001172:	2300      	movs	r3, #0
 8001174:	4688      	mov	r8, r1
 8001176:	4699      	mov	r9, r3
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001184:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001188:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800118c:	2300      	movs	r3, #0
 800118e:	460c      	mov	r4, r1
 8001190:	461d      	mov	r5, r3
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	00eb      	lsls	r3, r5, #3
 800119c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011a0:	00e2      	lsls	r2, r4, #3
 80011a2:	1dcb      	adds	r3, r1, #7
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	ebad 0d03 	sub.w	sp, sp, r3
 80011ac:	ab02      	add	r3, sp, #8
 80011ae:	3300      	adds	r3, #0
 80011b0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
    raw_payload[0] = frame.sender;
 80011b4:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80011b8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80011bc:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 80011be:	f897 2226 	ldrb.w	r2, [r7, #550]	@ 0x226
 80011c2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80011c6:	705a      	strb	r2, [r3, #1]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 80011c8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80011cc:	3302      	adds	r3, #2
 80011ce:	461a      	mov	r2, r3
 80011d0:	f207 2327 	addw	r3, r7, #551	@ 0x227
 80011d4:	8819      	ldrh	r1, [r3, #0]
 80011d6:	789b      	ldrb	r3, [r3, #2]
 80011d8:	8011      	strh	r1, [r2, #0]
 80011da:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, frame.data, data_len);
 80011dc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80011e0:	1d58      	adds	r0, r3, #5
 80011e2:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80011e6:	3306      	adds	r3, #6
 80011e8:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80011ec:	4619      	mov	r1, r3
 80011ee:	f006 fc82 	bl	8007af6 <memcpy>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4); // Dodanie heksadecymalnego CRC
 80011f2:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 80011f6:	3305      	adds	r3, #5
 80011f8:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80011fc:	4413      	add	r3, r2
 80011fe:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001202:	601a      	str	r2, [r3, #0]

    uint8_t stuffed_payload[512];
    size_t stuffed_len = byteStuffing(raw_payload, 2 + COMMAND_LENGTH + data_len + 4, stuffed_payload);
 8001204:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001208:	3309      	adds	r3, #9
 800120a:	f107 0214 	add.w	r2, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f8d7 02b4 	ldr.w	r0, [r7, #692]	@ 0x2b4
 8001214:	f7ff fe90 	bl	8000f38 <byteStuffing>
 8001218:	f8c7 02b0 	str.w	r0, [r7, #688]	@ 0x2b0

    // Wysyłanie ramki
    USART_fsend("%c", FRAME_START); // Wyślij początek ramki
 800121c:	217e      	movs	r1, #126	@ 0x7e
 800121e:	4819      	ldr	r0, [pc, #100]	@ (8001284 <prepareFrame+0x288>)
 8001220:	f7ff f9fc 	bl	800061c <USART_fsend>
    for (size_t i = 0; i < stuffed_len; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 800122a:	e013      	b.n	8001254 <prepareFrame+0x258>
        USART_fsend("%c", stuffed_payload[i]); // Wyślij dane po byte-stuffingu
 800122c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001230:	f5a3 722f 	sub.w	r2, r3, #700	@ 0x2bc
 8001234:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	4811      	ldr	r0, [pc, #68]	@ (8001284 <prepareFrame+0x288>)
 8001240:	f7ff f9ec 	bl	800061c <USART_fsend>
        delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f000 fb5f 	bl	8001908 <delay>
    for (size_t i = 0; i < stuffed_len; i++) {
 800124a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800124e:	3301      	adds	r3, #1
 8001250:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8001254:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8001258:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800125c:	429a      	cmp	r2, r3
 800125e:	d3e5      	bcc.n	800122c <prepareFrame+0x230>
    }
    USART_fsend("%c", FRAME_END); // Wyślij koniec ramki
 8001260:	2160      	movs	r1, #96	@ 0x60
 8001262:	4808      	ldr	r0, [pc, #32]	@ (8001284 <prepareFrame+0x288>)
 8001264:	f7ff f9da 	bl	800061c <USART_fsend>
    USART_fsend("\r\n");
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <prepareFrame+0x28c>)
 800126a:	f7ff f9d7 	bl	800061c <USART_fsend>
 800126e:	46b5      	mov	sp, r6

}
 8001270:	bf00      	nop
 8001272:	f507 7734 	add.w	r7, r7, #720	@ 0x2d0
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800127c:	b001      	add	sp, #4
 800127e:	4770      	bx	lr
 8001280:	080089e0 	.word	0x080089e0
 8001284:	080089ec 	.word	0x080089ec
 8001288:	080089f0 	.word	0x080089f0

0800128c <decodeFrame>:

//=======================DEKODOWANIE RAMKI=========================
bool decodeFrame(uint8_t *bx, Receive_Frame *frame, uint8_t len) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b06      	cmp	r3, #6
 800129e:	d948      	bls.n	8001332 <decodeFrame+0xa6>
            uint8_t k = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	75fa      	strb	r2, [r7, #23]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	75fa      	strb	r2, [r7, #23]
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c98      	adds	r0, r3, #2
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	2203      	movs	r2, #3
 80012d4:	4619      	mov	r1, r3
 80012d6:	f006 fc0e 	bl	8007af6 <memcpy>
            k += COMMAND_LENGTH;
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	3303      	adds	r3, #3
 80012de:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	3b07      	subs	r3, #7
 80012e4:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1d58      	adds	r0, r3, #5
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	7dba      	ldrb	r2, [r7, #22]
 80012f2:	4619      	mov	r1, r3
 80012f4:	f006 fbff 	bl	8007af6 <memcpy>
            k += data_len;
 80012f8:	7dfa      	ldrb	r2, [r7, #23]
 80012fa:	7dbb      	ldrb	r3, [r7, #22]
 80012fc:	4413      	add	r3, r2
 80012fe:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	823b      	strh	r3, [r7, #16]
            calculate_crc16((uint8_t *)frame, k, ownCrc);
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	f107 0214 	add.w	r2, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f7ff f9f7 	bl	8000708 <calculate_crc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 800131a:	7d3a      	ldrb	r2, [r7, #20]
 800131c:	7c3b      	ldrb	r3, [r7, #16]
 800131e:	429a      	cmp	r2, r3
 8001320:	d103      	bne.n	800132a <decodeFrame+0x9e>
 8001322:	7d7a      	ldrb	r2, [r7, #21]
 8001324:	7c7b      	ldrb	r3, [r7, #17]
 8001326:	429a      	cmp	r2, r3
 8001328:	d001      	beq.n	800132e <decodeFrame+0xa2>
            	return false;
 800132a:	2300      	movs	r3, #0
 800132c:	e002      	b.n	8001334 <decodeFrame+0xa8>
            }
            return true;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <decodeFrame+0xa8>
        }
        return false;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <process_received_char>:



//=======================DETEKCJA RAMKI=========================
void process_received_char(uint8_t received_char) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
    if (received_char == '~') {
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b7e      	cmp	r3, #126	@ 0x7e
 800134a:	d113      	bne.n	8001374 <process_received_char+0x38>
        if (!in_frame) {
 800134c:	4b4c      	ldr	r3, [pc, #304]	@ (8001480 <process_received_char+0x144>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	f083 0301 	eor.w	r3, r3, #1
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <process_received_char+0x32>
            in_frame = true;
 800135a:	4b49      	ldr	r3, [pc, #292]	@ (8001480 <process_received_char+0x144>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
            bx_index = 0;
 8001360:	4b48      	ldr	r3, [pc, #288]	@ (8001484 <process_received_char+0x148>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
            escape_detected = false;
 8001366:	4b48      	ldr	r3, [pc, #288]	@ (8001488 <process_received_char+0x14c>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
        reset_frame_state();
    }
}
 800136c:	e084      	b.n	8001478 <process_received_char+0x13c>
            reset_frame_state();
 800136e:	f7ff fa39 	bl	80007e4 <reset_frame_state>
}
 8001372:	e081      	b.n	8001478 <process_received_char+0x13c>
    } else if (received_char == '`') {
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b60      	cmp	r3, #96	@ 0x60
 8001378:	d12c      	bne.n	80013d4 <process_received_char+0x98>
        if (in_frame) {
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <process_received_char+0x144>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01f      	beq.n	80013c2 <process_received_char+0x86>
            if (decodeFrame(bx, &ramka, bx_index)) {
 8001382:	4b40      	ldr	r3, [pc, #256]	@ (8001484 <process_received_char+0x148>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4940      	ldr	r1, [pc, #256]	@ (800148c <process_received_char+0x150>)
 800138c:	4840      	ldr	r0, [pc, #256]	@ (8001490 <process_received_char+0x154>)
 800138e:	f7ff ff7d 	bl	800128c <decodeFrame>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <process_received_char+0x74>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 8001398:	4b3e      	ldr	r3, [pc, #248]	@ (8001494 <process_received_char+0x158>)
 800139a:	4a3f      	ldr	r2, [pc, #252]	@ (8001498 <process_received_char+0x15c>)
 800139c:	2167      	movs	r1, #103	@ 0x67
 800139e:	2068      	movs	r0, #104	@ 0x68
 80013a0:	f7ff fe2c 	bl	8000ffc <prepareFrame>
                handleCommand(&ramka);
 80013a4:	4839      	ldr	r0, [pc, #228]	@ (800148c <process_received_char+0x150>)
 80013a6:	f000 f87b 	bl	80014a0 <handleCommand>
                lcd_copy();
 80013aa:	f000 f9df 	bl	800176c <lcd_copy>
 80013ae:	e005      	b.n	80013bc <process_received_char+0x80>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80013b0:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <process_received_char+0x160>)
 80013b2:	4a39      	ldr	r2, [pc, #228]	@ (8001498 <process_received_char+0x15c>)
 80013b4:	2167      	movs	r1, #103	@ 0x67
 80013b6:	2068      	movs	r0, #104	@ 0x68
 80013b8:	f7ff fe20 	bl	8000ffc <prepareFrame>
            reset_frame_state();
 80013bc:	f7ff fa12 	bl	80007e4 <reset_frame_state>
}
 80013c0:	e05a      	b.n	8001478 <process_received_char+0x13c>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80013c2:	4b36      	ldr	r3, [pc, #216]	@ (800149c <process_received_char+0x160>)
 80013c4:	4a34      	ldr	r2, [pc, #208]	@ (8001498 <process_received_char+0x15c>)
 80013c6:	2167      	movs	r1, #103	@ 0x67
 80013c8:	2068      	movs	r0, #104	@ 0x68
 80013ca:	f7ff fe17 	bl	8000ffc <prepareFrame>
            reset_frame_state();
 80013ce:	f7ff fa09 	bl	80007e4 <reset_frame_state>
}
 80013d2:	e051      	b.n	8001478 <process_received_char+0x13c>
    } else if (in_frame) {
 80013d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <process_received_char+0x144>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d04b      	beq.n	8001474 <process_received_char+0x138>
        if (escape_detected) {
 80013dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001488 <process_received_char+0x14c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d02f      	beq.n	8001444 <process_received_char+0x108>
            if (received_char == '^') {
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80013e8:	d108      	bne.n	80013fc <process_received_char+0xc0>
                bx[bx_index++] = '~';
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <process_received_char+0x148>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	4924      	ldr	r1, [pc, #144]	@ (8001484 <process_received_char+0x148>)
 80013f2:	600a      	str	r2, [r1, #0]
 80013f4:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <process_received_char+0x154>)
 80013f6:	217e      	movs	r1, #126	@ 0x7e
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e01f      	b.n	800143c <process_received_char+0x100>
            } else if (received_char == ']') {
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b5d      	cmp	r3, #93	@ 0x5d
 8001400:	d108      	bne.n	8001414 <process_received_char+0xd8>
                bx[bx_index++] = '}';
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <process_received_char+0x148>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	491e      	ldr	r1, [pc, #120]	@ (8001484 <process_received_char+0x148>)
 800140a:	600a      	str	r2, [r1, #0]
 800140c:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <process_received_char+0x154>)
 800140e:	217d      	movs	r1, #125	@ 0x7d
 8001410:	54d1      	strb	r1, [r2, r3]
 8001412:	e013      	b.n	800143c <process_received_char+0x100>
            } else if (received_char == '&') {
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b26      	cmp	r3, #38	@ 0x26
 8001418:	d108      	bne.n	800142c <process_received_char+0xf0>
                bx[bx_index++] = '`';
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <process_received_char+0x148>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	4918      	ldr	r1, [pc, #96]	@ (8001484 <process_received_char+0x148>)
 8001422:	600a      	str	r2, [r1, #0]
 8001424:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <process_received_char+0x154>)
 8001426:	2160      	movs	r1, #96	@ 0x60
 8001428:	54d1      	strb	r1, [r2, r3]
 800142a:	e007      	b.n	800143c <process_received_char+0x100>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <process_received_char+0x160>)
 800142e:	4a1a      	ldr	r2, [pc, #104]	@ (8001498 <process_received_char+0x15c>)
 8001430:	2167      	movs	r1, #103	@ 0x67
 8001432:	2068      	movs	r0, #104	@ 0x68
 8001434:	f7ff fde2 	bl	8000ffc <prepareFrame>
                reset_frame_state();
 8001438:	f7ff f9d4 	bl	80007e4 <reset_frame_state>
            escape_detected = false;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <process_received_char+0x14c>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	e019      	b.n	8001478 <process_received_char+0x13c>
        } else if (received_char == '}') {
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b7d      	cmp	r3, #125	@ 0x7d
 8001448:	d103      	bne.n	8001452 <process_received_char+0x116>
            escape_detected = true;
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <process_received_char+0x14c>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
}
 8001450:	e012      	b.n	8001478 <process_received_char+0x13c>
            if (bx_index < sizeof(bx)) {
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <process_received_char+0x148>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800145a:	d208      	bcs.n	800146e <process_received_char+0x132>
                bx[bx_index++] = received_char;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <process_received_char+0x148>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	4908      	ldr	r1, [pc, #32]	@ (8001484 <process_received_char+0x148>)
 8001464:	600a      	str	r2, [r1, #0]
 8001466:	490a      	ldr	r1, [pc, #40]	@ (8001490 <process_received_char+0x154>)
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	54ca      	strb	r2, [r1, r3]
}
 800146c:	e004      	b.n	8001478 <process_received_char+0x13c>
                reset_frame_state();
 800146e:	f7ff f9b9 	bl	80007e4 <reset_frame_state>
}
 8001472:	e001      	b.n	8001478 <process_received_char+0x13c>
        reset_frame_state();
 8001474:	f7ff f9b6 	bl	80007e4 <reset_frame_state>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000cc0 	.word	0x20000cc0
 8001484:	20000cbc 	.word	0x20000cbc
 8001488:	20000cba 	.word	0x20000cba
 800148c:	20000cc4 	.word	0x20000cc4
 8001490:	20000bac 	.word	0x20000bac
 8001494:	080089f4 	.word	0x080089f4
 8001498:	080089bc 	.word	0x080089bc
 800149c:	080089fc 	.word	0x080089fc

080014a0 <handleCommand>:



//=======================ROZPOZNANIE I WYKONANIE KOMENDY=========================
void handleCommand(Receive_Frame *frame)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b092      	sub	sp, #72	@ 0x48
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
	CommandEntry commandTable[COMMAND_COUNT] = {
 80014a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <handleCommand+0xc4>)
 80014aa:	f107 0414 	add.w	r4, r7, #20
 80014ae:	461d      	mov	r5, r3
 80014b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014bc:	e884 0003 	stmia.w	r4, {r0, r1}
			{"ONP", executeONP},
			{"ONT", executeONT},
			{"ONN", executeONN},
			{"OFF", executeOFF}
	};
	for (int i = 0; i < COMMAND_COUNT; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014c4:	e03f      	b.n	8001546 <handleCommand+0xa6>
	        if (strncmp(frame->command, commandTable[i].command, COMMAND_LENGTH) == 0) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	1c98      	adds	r0, r3, #2
 80014ca:	f107 0214 	add.w	r2, r7, #20
 80014ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	2203      	movs	r2, #3
 80014d6:	4619      	mov	r1, r3
 80014d8:	f006 fa19 	bl	800790e <strncmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d12e      	bne.n	8001540 <handleCommand+0xa0>
	            // Parsowanie współrzędnych z `data`
	            int x, y;
	            if (parse_coordinates(frame->data, &x, &y)) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3305      	adds	r3, #5
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	f107 0110 	add.w	r1, r7, #16
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fce6 	bl	8000ec0 <parse_coordinates>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d018      	beq.n	800152c <handleCommand+0x8c>
	                // Sprawdzenie zakresu współrzędnych
	                if (is_within_bounds(x, y)) {
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fcbf 	bl	8000e84 <is_within_bounds>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <handleCommand+0x7e>
	                    commandTable[i].function(frame); // Wywołaj przypisaną funkcję
 800150c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	3340      	adds	r3, #64	@ 0x40
 8001512:	443b      	add	r3, r7
 8001514:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
	                    return;
 800151c:	e01f      	b.n	800155e <handleCommand+0xbe>
	                } else {
	                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " DISPLAY_AREA");
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <handleCommand+0xc8>)
 8001520:	4a12      	ldr	r2, [pc, #72]	@ (800156c <handleCommand+0xcc>)
 8001522:	2167      	movs	r1, #103	@ 0x67
 8001524:	2068      	movs	r0, #104	@ 0x68
 8001526:	f7ff fd69 	bl	8000ffc <prepareFrame>
	                    return;
 800152a:	e018      	b.n	800155e <handleCommand+0xbe>
	                }
	            } else {
	                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", " NOT_RECOGNIZED%s", frame->data);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3305      	adds	r3, #5
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <handleCommand+0xd0>)
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <handleCommand+0xcc>)
 8001536:	2167      	movs	r1, #103	@ 0x67
 8001538:	2068      	movs	r0, #104	@ 0x68
 800153a:	f7ff fd5f 	bl	8000ffc <prepareFrame>
	                return;
 800153e:	e00e      	b.n	800155e <handleCommand+0xbe>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 8001540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001542:	3301      	adds	r3, #1
 8001544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001548:	2b04      	cmp	r3, #4
 800154a:	ddbc      	ble.n	80014c6 <handleCommand+0x26>
	            }
	        }
	    }
	    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3302      	adds	r3, #2
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <handleCommand+0xd4>)
 8001554:	4a05      	ldr	r2, [pc, #20]	@ (800156c <handleCommand+0xcc>)
 8001556:	2167      	movs	r1, #103	@ 0x67
 8001558:	2068      	movs	r0, #104	@ 0x68
 800155a:	f7ff fd4f 	bl	8000ffc <prepareFrame>
}
 800155e:	3740      	adds	r7, #64	@ 0x40
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	08008a28 	.word	0x08008a28
 8001568:	08008a04 	.word	0x08008a04
 800156c:	080089bc 	.word	0x080089bc
 8001570:	08008a14 	.word	0x08008a14
 8001574:	080089a8 	.word	0x080089a8

08001578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <MX_GPIO_Init+0x90>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <MX_GPIO_Init+0x90>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_GPIO_Init+0x90>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	4a11      	ldr	r2, [pc, #68]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_GPIO_Init+0x90>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f641 0106 	movw	r1, #6150	@ 0x1806
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <MX_GPIO_Init+0x94>)
 80015de:	f001 f8e9 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 80015e2:	f641 0306 	movw	r3, #6150	@ 0x1806
 80015e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_GPIO_Init+0x94>)
 80015fc:	f000 ff30 	bl	8002460 <HAL_GPIO_Init>

}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	48000400 	.word	0x48000400

08001610 <lcd_cmd>:
		CMD(ST7735S_COLMOD), 0x05,
		CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_cmd(uint8_t cmd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <lcd_cmd+0x44>)
 8001622:	f001 f8c7 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800162c:	4809      	ldr	r0, [pc, #36]	@ (8001654 <lcd_cmd+0x44>)
 800162e:	f001 f8c1 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001632:	1df9      	adds	r1, r7, #7
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	2201      	movs	r2, #1
 800163a:	4807      	ldr	r0, [pc, #28]	@ (8001658 <lcd_cmd+0x48>)
 800163c:	f002 fc95 	bl	8003f6a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001646:	4803      	ldr	r0, [pc, #12]	@ (8001654 <lcd_cmd+0x44>)
 8001648:	f001 f8b4 	bl	80027b4 <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	48000400 	.word	0x48000400
 8001658:	2000ad50 	.word	0x2000ad50

0800165c <lcd_data>:
static void lcd_data(uint8_t data)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <lcd_data+0x44>)
 800166e:	f001 f8a1 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <lcd_data+0x44>)
 800167a:	f001 f89b 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800167e:	1df9      	adds	r1, r7, #7
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	2201      	movs	r2, #1
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <lcd_data+0x48>)
 8001688:	f002 fc6f 	bl	8003f6a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001692:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <lcd_data+0x44>)
 8001694:	f001 f88e 	bl	80027b4 <HAL_GPIO_WritePin>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	48000400 	.word	0x48000400
 80016a4:	2000ad50 	.word	0x2000ad50

080016a8 <lcd_send>:
static void lcd_send(uint16_t value)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <lcd_send+0x20>
		lcd_cmd(value);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ffa5 	bl	8001610 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80016c6:	e004      	b.n	80016d2 <lcd_send+0x2a>
		lcd_data(value);
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ffc5 	bl	800165c <lcd_data>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <lcd_data16>:
static void lcd_data16(uint16_t value)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ffb5 	bl	800165c <lcd_data>
	lcd_data(value);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ffb0 	bl	800165c <lcd_data>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <lcd_set_window>:
static void lcd_set_window(int x, int y, int width, int height)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001712:	202a      	movs	r0, #42	@ 0x2a
 8001714:	f7ff ff7c 	bl	8001610 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffda 	bl	80016da <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ffd1 	bl	80016da <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 8001738:	202b      	movs	r0, #43	@ 0x2b
 800173a:	f7ff ff69 	bl	8001610 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	b29b      	uxth	r3, r3
 8001742:	3302      	adds	r3, #2
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffc7 	bl	80016da <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	b29a      	uxth	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b29b      	uxth	r3, r3
 8001758:	3301      	adds	r3, #1
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ffbc 	bl	80016da <lcd_data16>
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <lcd_copy>:
void lcd_copy(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	22a0      	movs	r2, #160	@ 0xa0
 8001774:	2100      	movs	r1, #0
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff ffc4 	bl	8001704 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 800177c:	202c      	movs	r0, #44	@ 0x2c
 800177e:	f7ff ff47 	bl	8001610 <lcd_cmd>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <lcd_copy+0x50>)
 800178a:	f001 f813 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <lcd_copy+0x50>)
 8001796:	f001 f80d 	bl	80027b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 80017a2:	4907      	ldr	r1, [pc, #28]	@ (80017c0 <lcd_copy+0x54>)
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <lcd_copy+0x58>)
 80017a6:	f002 fbe0 	bl	8003f6a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <lcd_copy+0x50>)
 80017b2:	f000 ffff 	bl	80027b4 <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	48000400 	.word	0x48000400
 80017c0:	20000d4c 	.word	0x20000d4c
 80017c4:	2000ad50 	.word	0x2000ad50

080017c8 <lcd_init>:

//TODO zrobic zarządzanie podświetleniem
void lcd_init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	  int i;

	  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2104      	movs	r1, #4
 80017d2:	4817      	ldr	r0, [pc, #92]	@ (8001830 <lcd_init+0x68>)
 80017d4:	f000 ffee 	bl	80027b4 <HAL_GPIO_WritePin>
	  delay(100);
 80017d8:	2064      	movs	r0, #100	@ 0x64
 80017da:	f000 f895 	bl	8001908 <delay>
	  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2104      	movs	r1, #4
 80017e2:	4813      	ldr	r0, [pc, #76]	@ (8001830 <lcd_init+0x68>)
 80017e4:	f000 ffe6 	bl	80027b4 <HAL_GPIO_WritePin>
	  delay(100);
 80017e8:	2064      	movs	r0, #100	@ 0x64
 80017ea:	f000 f88d 	bl	8001908 <delay>
	  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	e009      	b.n	8001808 <lcd_init+0x40>
	    lcd_send(init_table[i]);
 80017f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001834 <lcd_init+0x6c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff53 	bl	80016a8 <lcd_send>
	  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b4b      	cmp	r3, #75	@ 0x4b
 800180c:	d9f2      	bls.n	80017f4 <lcd_init+0x2c>
	  }
	  delay(200);
 800180e:	20c8      	movs	r0, #200	@ 0xc8
 8001810:	f000 f87a 	bl	8001908 <delay>

	  lcd_cmd(ST7735S_SLPOUT);
 8001814:	2011      	movs	r0, #17
 8001816:	f7ff fefb 	bl	8001610 <lcd_cmd>
	  delay(120);
 800181a:	2078      	movs	r0, #120	@ 0x78
 800181c:	f000 f874 	bl	8001908 <delay>
	  lcd_cmd(ST7735S_DISPON);
 8001820:	2029      	movs	r0, #41	@ 0x29
 8001822:	f7ff fef5 	bl	8001610 <lcd_cmd>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	48000400 	.word	0x48000400
 8001834:	08011df4 	.word	0x08011df4

08001838 <lcd_put_pixel>:
	lcd_cmd(ST7735S_RAMWR);
	for (int i = 0; i < width * height; i++)
		lcd_data16(color);
}
void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	4905      	ldr	r1, [pc, #20]	@ (800186c <lcd_put_pixel+0x34>)
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000d4c 	.word	0x20000d4c

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	@ (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	@ (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ffc2 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t delayMs){
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <delay+0x2c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs)); //niestety blokuje działanie programu ale na szczęście nie przerwań
 8001916:	bf00      	nop
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	441a      	add	r2, r3
 800191e:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <delay+0x2c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d8f8      	bhi.n	8001918 <delay+0x10>
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	2000ad4c 	.word	0x2000ad4c

08001938 <wait_for_frame>:
void wait_for_frame(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 800193e:	f7fe fe31 	bl	80005a4 <USART_kbhit>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <wait_for_frame+0x20>
	        uint8_t received_char = USART_getchar();
 8001948:	f7fe fe3e 	bl	80005c8 <USART_getchar>
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
	        process_received_char(received_char);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fcf2 	bl	800133c <process_received_char>
	 }
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001964:	f000 fb77 	bl	8002056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001968:	f000 f810 	bl	800198c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <main+0x28>)
 800196e:	f7ff ffa9 	bl	80018c4 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001972:	f7ff fe01 	bl	8001578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001976:	f000 fa99 	bl	8001eac <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800197a:	f000 f85f 	bl	8001a3c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800197e:	f7ff ff23 	bl	80017c8 <lcd_init>
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
    /* USER CODE END WHILE */
	  wait_for_frame();
 8001982:	f7ff ffd9 	bl	8001938 <wait_for_frame>
 8001986:	e7fc      	b.n	8001982 <main+0x22>
 8001988:	00013880 	.word	0x00013880

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	@ 0x58
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2244      	movs	r2, #68	@ 0x44
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f005 ffa2 	bl	80078e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019b2:	f000 ff25 	bl	8002800 <HAL_PWREx_ControlVoltageScaling>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019bc:	f000 f838 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019c0:	2310      	movs	r3, #16
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019cc:	2360      	movs	r3, #96	@ 0x60
 80019ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019d4:	2301      	movs	r3, #1
 80019d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019dc:	2328      	movs	r3, #40	@ 0x28
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019e0:	2307      	movs	r3, #7
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 ff5b 	bl	80028ac <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019fc:	f000 f818 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2303      	movs	r3, #3
 8001a06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	2104      	movs	r1, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 fb23 	bl	8003064 <HAL_RCC_ClockConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a24:	f000 f804 	bl	8001a30 <Error_Handler>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3758      	adds	r7, #88	@ 0x58
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <Error_Handler+0x8>

08001a3c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a42:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab4 <MX_SPI2_Init+0x78>)
 8001a44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a72:	2210      	movs	r2, #16
 8001a74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_SPI2_Init+0x74>)
 8001a9c:	f002 f9c2 	bl	8003e24 <HAL_SPI_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f7ff ffc3 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000ad50 	.word	0x2000ad50
 8001ab4:	40003800 	.word	0x40003800

08001ab8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	@ (8001b6c <HAL_SPI_MspInit+0xb4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d144      	bne.n	8001b64 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ada:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	4a24      	ldr	r2, [pc, #144]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae6:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <HAL_SPI_MspInit+0xb8>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001b22:	2308      	movs	r3, #8
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b32:	2305      	movs	r3, #5
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <HAL_SPI_MspInit+0xbc>)
 8001b3e:	f000 fc8f 	bl	8002460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b54:	2305      	movs	r3, #5
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <HAL_SPI_MspInit+0xc0>)
 8001b60:	f000 fc7e 	bl	8002460 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40003800 	.word	0x40003800
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000800 	.word	0x48000800
 8001b78:	48000400 	.word	0x48000400

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <NMI_Handler+0x4>

08001bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f000 fa70 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <SysTick_Handler+0x18>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a02      	ldr	r2, [pc, #8]	@ (8001c30 <SysTick_Handler+0x18>)
 8001c28:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000ad4c 	.word	0x2000ad4c

08001c34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <USART2_IRQHandler+0x10>)
 8001c3a:	f002 fd69 	bl	8004710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000adb8 	.word	0x2000adb8

08001c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_kill>:

int _kill(int pid, int sig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c62:	f005 ff1b 	bl	8007a9c <__errno>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2216      	movs	r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_exit>:

void _exit (int status)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffe7 	bl	8001c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c8a:	bf00      	nop
 8001c8c:	e7fd      	b.n	8001c8a <_exit+0x12>

08001c8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e00a      	b.n	8001cb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca0:	f3af 8000 	nop.w
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf0      	blt.n	8001ca0 <_read+0x12>
  }

  return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e009      	b.n	8001cee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf1      	blt.n	8001cda <_write+0x12>
  }
  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_close>:

int _close(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d28:	605a      	str	r2, [r3, #4]
  return 0;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_isatty>:

int _isatty(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f005 fe80 	bl	8007a9c <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20018000 	.word	0x20018000
 8001dc8:	00002000 	.word	0x00002000
 8001dcc:	2000adb4 	.word	0x2000adb4
 8001dd0:	2000af90 	.word	0x2000af90

08001dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <HAL_UART_TxCpltCallback>:
extern volatile int USART_TX_Busy;
extern volatile int USART_RX_Empty;
extern volatile int USART_RX_Busy;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a13      	ldr	r2, [pc, #76]	@ (8001e50 <HAL_UART_TxCpltCallback+0x58>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d11e      	bne.n	8001e46 <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_UART_TxCpltCallback+0x5c>)
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <HAL_UART_TxCpltCallback+0x5c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d018      	beq.n	8001e46 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_UART_TxCpltCallback+0x5c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_UART_TxCpltCallback+0x60>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_UART_TxCpltCallback+0x5c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a0b      	ldr	r2, [pc, #44]	@ (8001e54 <HAL_UART_TxCpltCallback+0x5c>)
 8001e26:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_UART_TxCpltCallback+0x5c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e30:	d302      	bcc.n	8001e38 <HAL_UART_TxCpltCallback+0x40>
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <HAL_UART_TxCpltCallback+0x5c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001e38:	f107 030f 	add.w	r3, r7, #15
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <HAL_UART_TxCpltCallback+0x58>)
 8001e42:	f002 fbbb 	bl	80045bc <HAL_UART_Transmit_IT>
	   }
   }
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000adb8 	.word	0x2000adb8
 8001e54:	2000029c 	.word	0x2000029c
 8001e58:	200002ac 	.word	0x200002ac

08001e5c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea0 <HAL_UART_RxCpltCallback+0x44>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d114      	bne.n	8001e96 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex++;
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_UART_RxCpltCallback+0x48>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea4 <HAL_UART_RxCpltCallback+0x48>)
 8001e74:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_UART_RxCpltCallback+0x48>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2bff      	cmp	r3, #255	@ 0xff
 8001e7c:	d902      	bls.n	8001e84 <HAL_UART_RxCpltCallback+0x28>
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_UART_RxCpltCallback+0x48>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <HAL_UART_RxCpltCallback+0x48>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_UART_RxCpltCallback+0x4c>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <HAL_UART_RxCpltCallback+0x44>)
 8001e92:	f002 fbf1 	bl	8004678 <HAL_UART_Receive_IT>

	 }
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000adb8 	.word	0x2000adb8
 8001ea4:	2000028c 	.word	0x2000028c
 8001ea8:	20000aac 	.word	0x20000aac

08001eac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <MX_USART2_UART_Init+0x7c>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eee:	480d      	ldr	r0, [pc, #52]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001ef0:	f002 fb16 	bl	8004520 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001efa:	f7ff fd99 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ring_buffer_setup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE);
 8001efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f02:	490a      	ldr	r1, [pc, #40]	@ (8001f2c <MX_USART2_UART_Init+0x80>)
 8001f04:	480a      	ldr	r0, [pc, #40]	@ (8001f30 <MX_USART2_UART_Init+0x84>)
 8001f06:	f7fe fb33 	bl	8000570 <ring_buffer_setup>
  ring_buffer_setup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE);
 8001f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f0e:	4909      	ldr	r1, [pc, #36]	@ (8001f34 <MX_USART2_UART_Init+0x88>)
 8001f10:	4809      	ldr	r0, [pc, #36]	@ (8001f38 <MX_USART2_UART_Init+0x8c>)
 8001f12:	f7fe fb2d 	bl	8000570 <ring_buffer_setup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8001f16:	2201      	movs	r2, #1
 8001f18:	4904      	ldr	r1, [pc, #16]	@ (8001f2c <MX_USART2_UART_Init+0x80>)
 8001f1a:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <MX_USART2_UART_Init+0x78>)
 8001f1c:	f002 fbac 	bl	8004678 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2000adb8 	.word	0x2000adb8
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	20000aac 	.word	0x20000aac
 8001f30:	2000028c 	.word	0x2000028c
 8001f34:	200002ac 	.word	0x200002ac
 8001f38:	2000029c 	.word	0x2000029c

08001f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0ac      	sub	sp, #176	@ 0xb0
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2288      	movs	r2, #136	@ 0x88
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f005 fcc1 	bl	80078e4 <memset>
  if(uartHandle->Instance==USART2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a25      	ldr	r2, [pc, #148]	@ (8001ffc <HAL_UART_MspInit+0xc0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d143      	bne.n	8001ff4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 fa97 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f84:	f7ff fd54 	bl	8001a30 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_UART_MspInit+0xc4>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002000 <HAL_UART_MspInit+0xc4>)
 8001f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <HAL_UART_MspInit+0xc4>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_UART_MspInit+0xc4>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa4:	4a16      	ldr	r2, [pc, #88]	@ (8002000 <HAL_UART_MspInit+0xc4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_UART_MspInit+0xc4>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fb8:	230c      	movs	r3, #12
 8001fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe0:	f000 fa3e 	bl	8002460 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2026      	movs	r0, #38	@ 0x26
 8001fea:	f000 f984 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fee:	2026      	movs	r0, #38	@ 0x26
 8001ff0:	f000 f99d 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	37b0      	adds	r7, #176	@ 0xb0
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40004400 	.word	0x40004400
 8002000:	40021000 	.word	0x40021000

08002004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800203c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002008:	f7ff fee4 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800200c:	480c      	ldr	r0, [pc, #48]	@ (8002040 <LoopForever+0x6>)
  ldr r1, =_edata
 800200e:	490d      	ldr	r1, [pc, #52]	@ (8002044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <LoopForever+0xe>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002024:	4c0a      	ldr	r4, [pc, #40]	@ (8002050 <LoopForever+0x16>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002032:	f005 fd39 	bl	8007aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002036:	f7ff fc93 	bl	8001960 <main>

0800203a <LoopForever>:

LoopForever:
    b LoopForever
 800203a:	e7fe      	b.n	800203a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800203c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002044:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8002048:	080120c8 	.word	0x080120c8
  ldr r2, =_sbss
 800204c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8002050:	2000af90 	.word	0x2000af90

08002054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <ADC1_2_IRQHandler>

08002056 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 f93d 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002066:	200f      	movs	r0, #15
 8002068:	f000 f80e 	bl	8002088 <HAL_InitTick>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	e001      	b.n	800207c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002078:	f7ff fd80 	bl	8001b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800207c:	79fb      	ldrb	r3, [r7, #7]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002094:	4b17      	ldr	r3, [pc, #92]	@ (80020f4 <HAL_InitTick+0x6c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_InitTick+0x70>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <HAL_InitTick+0x6c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f949 	bl	800234a <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d809      	bhi.n	80020d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 f913 	bl	80022f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d0:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_InitTick+0x74>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e004      	b.n	80020e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e001      	b.n	80020e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000208 	.word	0x20000208
 80020f8:	20000200 	.word	0x20000200
 80020fc:	20000204 	.word	0x20000204

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000208 	.word	0x20000208
 8002124:	2000ae40 	.word	0x2000ae40

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	2000ae40 	.word	0x2000ae40

08002140 <__NVIC_SetPriorityGrouping>:
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	@ (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	@ (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff29 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff3e 	bl	8002188 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff31 	bl	80021a4 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d008      	beq.n	800238c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2204      	movs	r2, #4
 800237e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e022      	b.n	80023d2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 020e 	bic.w	r2, r2, #14
 800239a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b0:	f003 021c 	and.w	r2, r3, #28
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d005      	beq.n	8002402 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2204      	movs	r2, #4
 80023fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e029      	b.n	8002456 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 020e 	bic.w	r2, r2, #14
 8002410:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f003 021c 	and.w	r2, r3, #28
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
    }
  }
  return status;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	e17f      	b.n	8002770 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8171 	beq.w	800276a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d005      	beq.n	80024a0 <HAL_GPIO_Init+0x40>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d130      	bne.n	8002502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024d6:	2201      	movs	r2, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 0201 	and.w	r2, r3, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b03      	cmp	r3, #3
 800250c:	d118      	bne.n	8002540 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	08db      	lsrs	r3, r3, #3
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	6939      	ldr	r1, [r7, #16]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80ac 	beq.w	800276a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <HAL_GPIO_Init+0x330>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002616:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_GPIO_Init+0x330>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6613      	str	r3, [r2, #96]	@ 0x60
 800261e:	4b5c      	ldr	r3, [pc, #368]	@ (8002790 <HAL_GPIO_Init+0x330>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800262a:	4a5a      	ldr	r2, [pc, #360]	@ (8002794 <HAL_GPIO_Init+0x334>)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002654:	d025      	beq.n	80026a2 <HAL_GPIO_Init+0x242>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4f      	ldr	r2, [pc, #316]	@ (8002798 <HAL_GPIO_Init+0x338>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01f      	beq.n	800269e <HAL_GPIO_Init+0x23e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4e      	ldr	r2, [pc, #312]	@ (800279c <HAL_GPIO_Init+0x33c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d019      	beq.n	800269a <HAL_GPIO_Init+0x23a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4d      	ldr	r2, [pc, #308]	@ (80027a0 <HAL_GPIO_Init+0x340>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_GPIO_Init+0x236>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4c      	ldr	r2, [pc, #304]	@ (80027a4 <HAL_GPIO_Init+0x344>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00d      	beq.n	8002692 <HAL_GPIO_Init+0x232>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4b      	ldr	r2, [pc, #300]	@ (80027a8 <HAL_GPIO_Init+0x348>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x22e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4a      	ldr	r2, [pc, #296]	@ (80027ac <HAL_GPIO_Init+0x34c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_GPIO_Init+0x22a>
 8002686:	2306      	movs	r3, #6
 8002688:	e00c      	b.n	80026a4 <HAL_GPIO_Init+0x244>
 800268a:	2307      	movs	r3, #7
 800268c:	e00a      	b.n	80026a4 <HAL_GPIO_Init+0x244>
 800268e:	2305      	movs	r3, #5
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x244>
 8002692:	2304      	movs	r3, #4
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x244>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x244>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x244>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x244>
 80026a2:	2300      	movs	r3, #0
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b4:	4937      	ldr	r1, [pc, #220]	@ (8002794 <HAL_GPIO_Init+0x334>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c2:	4b3b      	ldr	r3, [pc, #236]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026e6:	4a32      	ldr	r2, [pc, #200]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026ec:	4b30      	ldr	r3, [pc, #192]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002710:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002716:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800273a:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002764:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <HAL_GPIO_Init+0x350>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa22 f303 	lsr.w	r3, r2, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	f47f ae78 	bne.w	8002470 <HAL_GPIO_Init+0x10>
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	48000400 	.word	0x48000400
 800279c:	48000800 	.word	0x48000800
 80027a0:	48000c00 	.word	0x48000c00
 80027a4:	48001000 	.word	0x48001000
 80027a8:	48001400 	.word	0x48001400
 80027ac:	48001800 	.word	0x48001800
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
 80027c0:	4613      	mov	r3, r2
 80027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <HAL_PWREx_GetVoltageRange+0x18>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40007000 	.word	0x40007000

08002800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800280e:	d130      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002810:	4b23      	ldr	r3, [pc, #140]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800281c:	d038      	beq.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800281e:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002826:	4a1e      	ldr	r2, [pc, #120]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002828:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800282e:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2232      	movs	r2, #50	@ 0x32
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	4a1b      	ldr	r2, [pc, #108]	@ (80028a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	3301      	adds	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002844:	e002      	b.n	800284c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3b01      	subs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002858:	d102      	bne.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x60>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f2      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002860:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286c:	d110      	bne.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e00f      	b.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002872:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800287e:	d007      	beq.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002880:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002888:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800288e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40007000 	.word	0x40007000
 80028a4:	20000200 	.word	0x20000200
 80028a8:	431bde83 	.word	0x431bde83

080028ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e3ca      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028be:	4b97      	ldr	r3, [pc, #604]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c8:	4b94      	ldr	r3, [pc, #592]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80e4 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4a>
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b0c      	cmp	r3, #12
 80028ea:	f040 808b 	bne.w	8002a04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f040 8087 	bne.w	8002a04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f6:	4b89      	ldr	r3, [pc, #548]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x62>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e3a2      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	4b82      	ldr	r3, [pc, #520]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_RCC_OscConfig+0x7c>
 800291e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002926:	e005      	b.n	8002934 <HAL_RCC_OscConfig+0x88>
 8002928:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002934:	4293      	cmp	r3, r2
 8002936:	d223      	bcs.n	8002980 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fd55 	bl	80033ec <RCC_SetFlashLatencyFromMSIRange>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e383      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294c:	4b73      	ldr	r3, [pc, #460]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a72      	ldr	r2, [pc, #456]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	496d      	ldr	r1, [pc, #436]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4968      	ldr	r1, [pc, #416]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
 800297e:	e025      	b.n	80029cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002980:	4b66      	ldr	r3, [pc, #408]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a65      	ldr	r2, [pc, #404]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b63      	ldr	r3, [pc, #396]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4960      	ldr	r1, [pc, #384]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800299e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	495b      	ldr	r1, [pc, #364]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fd15 	bl	80033ec <RCC_SetFlashLatencyFromMSIRange>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e343      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029cc:	f000 fc4a 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b52      	ldr	r3, [pc, #328]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	4950      	ldr	r1, [pc, #320]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
 80029e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b24 <HAL_RCC_OscConfig+0x278>)
 80029ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002b28 <HAL_RCC_OscConfig+0x27c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fb49 	bl	8002088 <HAL_InitTick>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d052      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	e327      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d032      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a0c:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a42      	ldr	r2, [pc, #264]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fb86 	bl	8002128 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a20:	f7ff fb82 	bl	8002128 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e310      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a32:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3e:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a36      	ldr	r2, [pc, #216]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4931      	ldr	r1, [pc, #196]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	492c      	ldr	r1, [pc, #176]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	e01a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a72:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a29      	ldr	r2, [pc, #164]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a7e:	f7ff fb53 	bl	8002128 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a86:	f7ff fb4f 	bl	8002128 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e2dd      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x1da>
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d074      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x21a>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	d10e      	bne.n	8002ade <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d10b      	bne.n	8002ade <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d064      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2f0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d160      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e2ba      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x24a>
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x298>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002afe:	d115      	bne.n	8002b2c <HAL_RCC_OscConfig+0x280>
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x298>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08011e8c 	.word	0x08011e8c
 8002b24:	20000200 	.word	0x20000200
 8002b28:	20000204 	.word	0x20000204
 8002b2c:	4ba0      	ldr	r3, [pc, #640]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a9f      	ldr	r2, [pc, #636]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b9d      	ldr	r3, [pc, #628]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a9c      	ldr	r2, [pc, #624]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7ff faec 	bl	8002128 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff fae8 	bl	8002128 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e276      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b66:	4b92      	ldr	r3, [pc, #584]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2a8>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff fad8 	bl	8002128 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff fad4 	bl	8002128 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	@ 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e262      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8e:	4b88      	ldr	r3, [pc, #544]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2d0>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d060      	beq.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x310>
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d116      	bne.n	8002bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bbc:	4b7c      	ldr	r3, [pc, #496]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x328>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e23f      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b76      	ldr	r3, [pc, #472]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	4973      	ldr	r1, [pc, #460]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be8:	e040      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d023      	beq.n	8002c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6e      	ldr	r2, [pc, #440]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7ff fa93 	bl	8002128 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7ff fa8f 	bl	8002128 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e21d      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c18:	4b65      	ldr	r3, [pc, #404]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b62      	ldr	r3, [pc, #392]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	495f      	ldr	r1, [pc, #380]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
 8002c38:	e018      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7ff fa6f 	bl	8002128 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7ff fa6b 	bl	8002128 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1f9      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d03c      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01c      	beq.n	8002cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c80:	4b4b      	ldr	r3, [pc, #300]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c86:	4a4a      	ldr	r2, [pc, #296]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7ff fa4a 	bl	8002128 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7ff fa46 	bl	8002128 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1d4      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ef      	beq.n	8002c98 <HAL_RCC_OscConfig+0x3ec>
 8002cb8:	e01b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc0:	4a3b      	ldr	r2, [pc, #236]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7ff fa2d 	bl	8002128 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7ff fa29 	bl	8002128 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1b7      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce4:	4b32      	ldr	r3, [pc, #200]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ef      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80a6 	beq.w	8002e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b27      	ldr	r3, [pc, #156]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d1c:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d118      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d38:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d44:	f7ff f9f0 	bl	8002128 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4c:	f7ff f9ec 	bl	8002128 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e17a      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x508>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d108      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4d8>
 8002d72:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d82:	e029      	b.n	8002dd8 <HAL_RCC_OscConfig+0x52c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d115      	bne.n	8002db8 <HAL_RCC_OscConfig+0x50c>
 8002d8c:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da2:	4a03      	ldr	r2, [pc, #12]	@ (8002db0 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x52c>
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
 8002db8:	4b9c      	ldr	r3, [pc, #624]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	4a9b      	ldr	r2, [pc, #620]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dc8:	4b98      	ldr	r3, [pc, #608]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	4a97      	ldr	r2, [pc, #604]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d016      	beq.n	8002e0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7ff f9a2 	bl	8002128 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7ff f99e 	bl	8002128 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e12a      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfe:	4b8b      	ldr	r3, [pc, #556]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ed      	beq.n	8002de8 <HAL_RCC_OscConfig+0x53c>
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7ff f98b 	bl	8002128 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7ff f987 	bl	8002128 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e113      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2c:	4b7f      	ldr	r3, [pc, #508]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ed      	bne.n	8002e16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e40:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	4a79      	ldr	r2, [pc, #484]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80fe 	beq.w	8003052 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	f040 80d0 	bne.w	8003000 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e60:	4b72      	ldr	r3, [pc, #456]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d130      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d127      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d11f      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ea0:	2a07      	cmp	r2, #7
 8002ea2:	bf14      	ite	ne
 8002ea4:	2201      	movne	r2, #1
 8002ea6:	2200      	moveq	r2, #0
 8002ea8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d113      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d06e      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b0c      	cmp	r3, #12
 8002eda:	d069      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ee8:	4b50      	ldr	r3, [pc, #320]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0ad      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f04:	f7ff f910 	bl	8002128 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7ff f90c 	bl	8002128 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e09a      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1e:	4b43      	ldr	r3, [pc, #268]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2a:	4b40      	ldr	r3, [pc, #256]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	4b40      	ldr	r3, [pc, #256]	@ (8003030 <HAL_RCC_OscConfig+0x784>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f3a:	3a01      	subs	r2, #1
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f44:	0212      	lsls	r2, r2, #8
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f4c:	0852      	lsrs	r2, r2, #1
 8002f4e:	3a01      	subs	r2, #1
 8002f50:	0552      	lsls	r2, r2, #21
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f58:	0852      	lsrs	r2, r2, #1
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	0652      	lsls	r2, r2, #25
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f64:	0912      	lsrs	r2, r2, #4
 8002f66:	0452      	lsls	r2, r2, #17
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	4930      	ldr	r1, [pc, #192]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f70:	4b2e      	ldr	r3, [pc, #184]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2d      	ldr	r2, [pc, #180]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a2a      	ldr	r2, [pc, #168]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f88:	f7ff f8ce 	bl	8002128 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7ff f8ca 	bl	8002128 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e058      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa2:	4b22      	ldr	r3, [pc, #136]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fae:	e050      	b.n	8003052 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e04f      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d148      	bne.n	8003052 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fcc:	4b17      	ldr	r3, [pc, #92]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a16      	ldr	r2, [pc, #88]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fd8:	f7ff f8a6 	bl	8002128 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7ff f8a2 	bl	8002128 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e030      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x734>
 8002ffe:	e028      	b.n	8003052 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d023      	beq.n	800304e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_RCC_OscConfig+0x780>)
 800300c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7ff f889 	bl	8002128 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003018:	e00c      	b.n	8003034 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7ff f885 	bl	8002128 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d905      	bls.n	8003034 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e013      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
 800302c:	40021000 	.word	0x40021000
 8003030:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_RCC_OscConfig+0x7b0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ec      	bne.n	800301a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_RCC_OscConfig+0x7b0>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4905      	ldr	r1, [pc, #20]	@ (800305c <HAL_RCC_OscConfig+0x7b0>)
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_RCC_OscConfig+0x7b4>)
 8003048:	4013      	ands	r3, r2
 800304a:	60cb      	str	r3, [r1, #12]
 800304c:	e001      	b.n	8003052 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	feeefffc 	.word	0xfeeefffc

08003064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0e7      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b75      	ldr	r3, [pc, #468]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b72      	ldr	r3, [pc, #456]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	4970      	ldr	r1, [pc, #448]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b6e      	ldr	r3, [pc, #440]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0cf      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b66      	ldr	r3, [pc, #408]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d908      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b63      	ldr	r3, [pc, #396]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4960      	ldr	r1, [pc, #384]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d04c      	beq.n	800317c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0a6      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003102:	4b54      	ldr	r3, [pc, #336]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d115      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e09a      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800311a:	4b4e      	ldr	r3, [pc, #312]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e08e      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312a:	4b4a      	ldr	r3, [pc, #296]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e086      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b46      	ldr	r3, [pc, #280]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4943      	ldr	r1, [pc, #268]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7fe ffec 	bl	8002128 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe ffe8 	bl	8002128 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e06e      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003194:	429a      	cmp	r2, r3
 8003196:	d208      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	492b      	ldr	r1, [pc, #172]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031aa:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d210      	bcs.n	80031da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b8:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0207 	bic.w	r2, r3, #7
 80031c0:	4923      	ldr	r1, [pc, #140]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <HAL_RCC_ClockConfig+0x1ec>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d001      	beq.n	80031da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e036      	b.n	8003248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4918      	ldr	r1, [pc, #96]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003204:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4910      	ldr	r1, [pc, #64]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003218:	f000 f824 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	490b      	ldr	r1, [pc, #44]	@ (8003258 <HAL_RCC_ClockConfig+0x1f4>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	4a09      	ldr	r2, [pc, #36]	@ (800325c <HAL_RCC_ClockConfig+0x1f8>)
 8003236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_ClockConfig+0x1fc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe ff23 	bl	8002088 <HAL_InitTick>
 8003242:	4603      	mov	r3, r0
 8003244:	72fb      	strb	r3, [r7, #11]

  return status;
 8003246:	7afb      	ldrb	r3, [r7, #11]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40022000 	.word	0x40022000
 8003254:	40021000 	.word	0x40021000
 8003258:	08011e8c 	.word	0x08011e8c
 800325c:	20000200 	.word	0x20000200
 8003260:	20000204 	.word	0x20000204

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4b3e      	ldr	r3, [pc, #248]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327c:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d11e      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003298:	4b34      	ldr	r3, [pc, #208]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a4:	4b31      	ldr	r3, [pc, #196]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b4:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032dc:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e004      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e8:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d134      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0xa6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d003      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0xac>
 8003308:	e005      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800330a:	4b1a      	ldr	r3, [pc, #104]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 800330c:	617b      	str	r3, [r7, #20]
      break;
 800330e:	e005      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x114>)
 8003312:	617b      	str	r3, [r7, #20]
      break;
 8003314:	e002      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	617b      	str	r3, [r7, #20]
      break;
 800331a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800331c:	4b13      	ldr	r3, [pc, #76]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	3301      	adds	r3, #1
 8003328:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800332a:	4b10      	ldr	r3, [pc, #64]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	fb03 f202 	mul.w	r2, r3, r2
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	0e5b      	lsrs	r3, r3, #25
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	3301      	adds	r3, #1
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800335c:	69bb      	ldr	r3, [r7, #24]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	@ 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	08011ea4 	.word	0x08011ea4
 8003374:	00f42400 	.word	0x00f42400
 8003378:	007a1200 	.word	0x007a1200

0800337c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <HAL_RCC_GetHCLKFreq+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000200 	.word	0x20000200

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003398:	f7ff fff0 	bl	800337c <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4904      	ldr	r1, [pc, #16]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08011e9c 	.word	0x08011e9c

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c4:	f7ff ffda 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0adb      	lsrs	r3, r3, #11
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4904      	ldr	r1, [pc, #16]	@ (80033e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08011e9c 	.word	0x08011e9c

080033ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f8:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003404:	f7ff f9ee 	bl	80027e4 <HAL_PWREx_GetVoltageRange>
 8003408:	6178      	str	r0, [r7, #20]
 800340a:	e014      	b.n	8003436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	4a24      	ldr	r2, [pc, #144]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003416:	6593      	str	r3, [r2, #88]	@ 0x58
 8003418:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003424:	f7ff f9de 	bl	80027e4 <HAL_PWREx_GetVoltageRange>
 8003428:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003434:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343c:	d10b      	bne.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b80      	cmp	r3, #128	@ 0x80
 8003442:	d919      	bls.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2ba0      	cmp	r3, #160	@ 0xa0
 8003448:	d902      	bls.n	8003450 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800344a:	2302      	movs	r3, #2
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e013      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003450:	2301      	movs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e010      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d902      	bls.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800345c:	2303      	movs	r3, #3
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e00a      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	@ 0x80
 8003466:	d102      	bne.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003468:	2302      	movs	r3, #2
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e004      	b.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b70      	cmp	r3, #112	@ 0x70
 8003472:	d101      	bne.n	8003478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003474:	2301      	movs	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003478:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 0207 	bic.w	r2, r3, #7
 8003480:	4909      	ldr	r1, [pc, #36]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003488:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d001      	beq.n	800349a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40022000 	.word	0x40022000

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b4:	2300      	movs	r3, #0
 80034b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b8:	2300      	movs	r3, #0
 80034ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d041      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034d0:	d02a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034d6:	d824      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034dc:	d008      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034e2:	d81e      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ec:	d010      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034ee:	e018      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034f0:	4b86      	ldr	r3, [pc, #536]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a85      	ldr	r2, [pc, #532]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fc:	e015      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fabb 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800350e:	e00c      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3320      	adds	r3, #32
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fba6 	bl	8003c68 <RCCEx_PLLSAI2_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	74fb      	strb	r3, [r7, #19]
      break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003530:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800353e:	4973      	ldr	r1, [pc, #460]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003546:	e001      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d041      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800355c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003560:	d02a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003562:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003566:	d824      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800356c:	d008      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800356e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003572:	d81e      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800357c:	d010      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800357e:	e018      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003580:	4b62      	ldr	r3, [pc, #392]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a61      	ldr	r2, [pc, #388]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800358c:	e015      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fa73 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800359e:	e00c      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3320      	adds	r3, #32
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fb5e 	bl	8003c68 <RCCEx_PLLSAI2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b0:	e003      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	74fb      	strb	r3, [r7, #19]
      break;
 80035b6:	e000      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10b      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035c0:	4b52      	ldr	r3, [pc, #328]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ce:	494f      	ldr	r1, [pc, #316]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035d6:	e001      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a0 	beq.w	800372a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	4a40      	ldr	r2, [pc, #256]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003610:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361c:	2301      	movs	r3, #1
 800361e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003620:	4b3b      	ldr	r3, [pc, #236]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3a      	ldr	r2, [pc, #232]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800362a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800362c:	f7fe fd7c 	bl	8002128 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003632:	e009      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fe fd78 	bl	8002128 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d902      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	74fb      	strb	r3, [r7, #19]
        break;
 8003646:	e005      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003648:	4b31      	ldr	r3, [pc, #196]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ef      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d15c      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800365a:	4b2c      	ldr	r3, [pc, #176]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003664:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01f      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	d019      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003678:	4b24      	ldr	r3, [pc, #144]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003682:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003684:	4b21      	ldr	r3, [pc, #132]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368a:	4a20      	ldr	r2, [pc, #128]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003694:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036a4:	4a19      	ldr	r2, [pc, #100]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d016      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b6:	f7fe fd37 	bl	8002128 <HAL_GetTick>
 80036ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036bc:	e00b      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe fd33 	bl	8002128 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d902      	bls.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	74fb      	strb	r3, [r7, #19]
            break;
 80036d4:	e006      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ec      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10c      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ea:	4b08      	ldr	r3, [pc, #32]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036fa:	4904      	ldr	r1, [pc, #16]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	74bb      	strb	r3, [r7, #18]
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003718:	7c7b      	ldrb	r3, [r7, #17]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4b9e      	ldr	r3, [pc, #632]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	4a9d      	ldr	r2, [pc, #628]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003728:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003736:	4b98      	ldr	r3, [pc, #608]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373c:	f023 0203 	bic.w	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	4994      	ldr	r1, [pc, #592]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003758:	4b8f      	ldr	r3, [pc, #572]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	f023 020c 	bic.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	498c      	ldr	r1, [pc, #560]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800377a:	4b87      	ldr	r3, [pc, #540]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	4983      	ldr	r1, [pc, #524]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800379c:	4b7e      	ldr	r3, [pc, #504]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	497b      	ldr	r1, [pc, #492]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037be:	4b76      	ldr	r3, [pc, #472]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037cc:	4972      	ldr	r1, [pc, #456]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	496a      	ldr	r1, [pc, #424]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003802:	4b65      	ldr	r3, [pc, #404]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003810:	4961      	ldr	r1, [pc, #388]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003824:	4b5c      	ldr	r3, [pc, #368]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	4959      	ldr	r1, [pc, #356]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003846:	4b54      	ldr	r3, [pc, #336]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	4950      	ldr	r1, [pc, #320]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003868:	4b4b      	ldr	r3, [pc, #300]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003876:	4948      	ldr	r1, [pc, #288]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388a:	4b43      	ldr	r3, [pc, #268]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003890:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	493f      	ldr	r1, [pc, #252]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d028      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ba:	4937      	ldr	r1, [pc, #220]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038ca:	d106      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038cc:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a31      	ldr	r2, [pc, #196]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038d6:	60d3      	str	r3, [r2, #12]
 80038d8:	e011      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038e2:	d10c      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f8c8 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d028      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800390a:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003918:	491f      	ldr	r1, [pc, #124]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003928:	d106      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392a:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a1a      	ldr	r2, [pc, #104]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003934:	60d3      	str	r3, [r2, #12]
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003940:	d10c      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f899 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d02b      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003976:	4908      	ldr	r1, [pc, #32]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003986:	d109      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a02      	ldr	r2, [pc, #8]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
 8003994:	e014      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3304      	adds	r3, #4
 80039aa:	2101      	movs	r1, #1
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f867 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d02f      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039cc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039da:	4928      	ldr	r1, [pc, #160]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ea:	d10d      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	2102      	movs	r1, #2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f844 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d014      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	74bb      	strb	r3, [r7, #18]
 8003a06:	e011      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3320      	adds	r3, #32
 8003a16:	2102      	movs	r1, #2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f925 	bl	8003c68 <RCCEx_PLLSAI2_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a38:	4b10      	ldr	r3, [pc, #64]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a46:	490d      	ldr	r1, [pc, #52]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6a:	4904      	ldr	r1, [pc, #16]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a72:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000

08003a80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a8e:	4b75      	ldr	r3, [pc, #468]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d018      	beq.n	8003acc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a9a:	4b72      	ldr	r3, [pc, #456]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0203 	and.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d10d      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
       ||
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d047      	beq.n	8003b56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e044      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d018      	beq.n	8003b06 <RCCEx_PLLSAI1_Config+0x86>
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d825      	bhi.n	8003b24 <RCCEx_PLLSAI1_Config+0xa4>
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d002      	beq.n	8003ae2 <RCCEx_PLLSAI1_Config+0x62>
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d009      	beq.n	8003af4 <RCCEx_PLLSAI1_Config+0x74>
 8003ae0:	e020      	b.n	8003b24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ae2:	4b60      	ldr	r3, [pc, #384]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d11d      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af2:	e01a      	b.n	8003b2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d116      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b04:	e013      	b.n	8003b2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b06:	4b57      	ldr	r3, [pc, #348]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b12:	4b54      	ldr	r3, [pc, #336]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b22:	e006      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      break;
 8003b28:	e004      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e002      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e000      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10d      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	4944      	ldr	r1, [pc, #272]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d17d      	bne.n	8003c58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b5c:	4b41      	ldr	r3, [pc, #260]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a40      	ldr	r2, [pc, #256]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7fe fade 	bl	8002128 <HAL_GetTick>
 8003b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b6e:	e009      	b.n	8003b84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b70:	f7fe fada 	bl	8002128 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d902      	bls.n	8003b84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	73fb      	strb	r3, [r7, #15]
        break;
 8003b82:	e005      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b84:	4b37      	ldr	r3, [pc, #220]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ef      	bne.n	8003b70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d160      	bne.n	8003c58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b9c:	4b31      	ldr	r3, [pc, #196]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6892      	ldr	r2, [r2, #8]
 8003bac:	0211      	lsls	r1, r2, #8
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	0912      	lsrs	r2, r2, #4
 8003bb4:	0452      	lsls	r2, r2, #17
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	492a      	ldr	r1, [pc, #168]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	610b      	str	r3, [r1, #16]
 8003bbe:	e027      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d112      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bc6:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003bce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6892      	ldr	r2, [r2, #8]
 8003bd6:	0211      	lsls	r1, r2, #8
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6912      	ldr	r2, [r2, #16]
 8003bdc:	0852      	lsrs	r2, r2, #1
 8003bde:	3a01      	subs	r2, #1
 8003be0:	0552      	lsls	r2, r2, #21
 8003be2:	430a      	orrs	r2, r1
 8003be4:	491f      	ldr	r1, [pc, #124]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	610b      	str	r3, [r1, #16]
 8003bea:	e011      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bec:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bf4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6892      	ldr	r2, [r2, #8]
 8003bfc:	0211      	lsls	r1, r2, #8
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6952      	ldr	r2, [r2, #20]
 8003c02:	0852      	lsrs	r2, r2, #1
 8003c04:	3a01      	subs	r2, #1
 8003c06:	0652      	lsls	r2, r2, #25
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4916      	ldr	r1, [pc, #88]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fe fa84 	bl	8002128 <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c22:	e009      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c24:	f7fe fa80 	bl	8002128 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	73fb      	strb	r3, [r7, #15]
          break;
 8003c36:	e005      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c38:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ef      	beq.n	8003c24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	4904      	ldr	r1, [pc, #16]	@ (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000

08003c68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c76:	4b6a      	ldr	r3, [pc, #424]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d018      	beq.n	8003cb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c82:	4b67      	ldr	r3, [pc, #412]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0203 	and.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d10d      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
       ||
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c9a:	4b61      	ldr	r3, [pc, #388]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
       ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d047      	beq.n	8003d3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e044      	b.n	8003d3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d018      	beq.n	8003cee <RCCEx_PLLSAI2_Config+0x86>
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d825      	bhi.n	8003d0c <RCCEx_PLLSAI2_Config+0xa4>
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d002      	beq.n	8003cca <RCCEx_PLLSAI2_Config+0x62>
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d009      	beq.n	8003cdc <RCCEx_PLLSAI2_Config+0x74>
 8003cc8:	e020      	b.n	8003d0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cca:	4b55      	ldr	r3, [pc, #340]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d11d      	bne.n	8003d12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cda:	e01a      	b.n	8003d12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cdc:	4b50      	ldr	r3, [pc, #320]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d116      	bne.n	8003d16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cec:	e013      	b.n	8003d16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cee:	4b4c      	ldr	r3, [pc, #304]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cfa:	4b49      	ldr	r3, [pc, #292]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d0a:	e006      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d10:	e004      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d22:	4b3f      	ldr	r3, [pc, #252]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	430b      	orrs	r3, r1
 8003d38:	4939      	ldr	r1, [pc, #228]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d167      	bne.n	8003e14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d44:	4b36      	ldr	r3, [pc, #216]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a35      	ldr	r2, [pc, #212]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d50:	f7fe f9ea 	bl	8002128 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d56:	e009      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d58:	f7fe f9e6 	bl	8002128 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d902      	bls.n	8003d6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	73fb      	strb	r3, [r7, #15]
        break;
 8003d6a:	e005      	b.n	8003d78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ef      	bne.n	8003d58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d14a      	bne.n	8003e14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d111      	bne.n	8003da8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d84:	4b26      	ldr	r3, [pc, #152]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6892      	ldr	r2, [r2, #8]
 8003d94:	0211      	lsls	r1, r2, #8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68d2      	ldr	r2, [r2, #12]
 8003d9a:	0912      	lsrs	r2, r2, #4
 8003d9c:	0452      	lsls	r2, r2, #17
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	491f      	ldr	r1, [pc, #124]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	614b      	str	r3, [r1, #20]
 8003da6:	e011      	b.n	8003dcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003da8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003db0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6892      	ldr	r2, [r2, #8]
 8003db8:	0211      	lsls	r1, r2, #8
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6912      	ldr	r2, [r2, #16]
 8003dbe:	0852      	lsrs	r2, r2, #1
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	0652      	lsls	r2, r2, #25
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	4916      	ldr	r1, [pc, #88]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dcc:	4b14      	ldr	r3, [pc, #80]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fe f9a6 	bl	8002128 <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dde:	e009      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de0:	f7fe f9a2 	bl	8002128 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	73fb      	strb	r3, [r7, #15]
          break;
 8003df2:	e005      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003df4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ef      	beq.n	8003de0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e06:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	4904      	ldr	r1, [pc, #16]	@ (8003e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e095      	b.n	8003f62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d108      	bne.n	8003e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e46:	d009      	beq.n	8003e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	61da      	str	r2, [r3, #28]
 8003e4e:	e005      	b.n	8003e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd fe1e 	bl	8001ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e9c:	d902      	bls.n	8003ea4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e002      	b.n	8003eaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003eb2:	d007      	beq.n	8003ec4 <HAL_SPI_Init+0xa0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ebc:	d002      	beq.n	8003ec4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f06:	ea42 0103 	orr.w	r1, r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	f003 0204 	and.w	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f7a:	f7fe f8d5 	bl	8002128 <HAL_GetTick>
 8003f7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
 8003f92:	e15c      	b.n	800424e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x36>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e154      	b.n	800424e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_SPI_Transmit+0x48>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e14d      	b.n	800424e <HAL_SPI_Transmit+0x2e4>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004004:	d10f      	bne.n	8004026 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004014:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004024:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	d007      	beq.n	8004044 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800404c:	d952      	bls.n	80040f4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_SPI_Transmit+0xf2>
 8004056:	8b7b      	ldrh	r3, [r7, #26]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d145      	bne.n	80040e8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004080:	e032      	b.n	80040e8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b02      	cmp	r3, #2
 800408e:	d112      	bne.n	80040b6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	1c9a      	adds	r2, r3, #2
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040b4:	e018      	b.n	80040e8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040b6:	f7fe f837 	bl	8002128 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d803      	bhi.n	80040ce <HAL_SPI_Transmit+0x164>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d102      	bne.n	80040d4 <HAL_SPI_Transmit+0x16a>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0b2      	b.n	800424e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1c7      	bne.n	8004082 <HAL_SPI_Transmit+0x118>
 80040f2:	e083      	b.n	80041fc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_SPI_Transmit+0x198>
 80040fc:	8b7b      	ldrh	r3, [r7, #26]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d177      	bne.n	80041f2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d912      	bls.n	8004132 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b02      	subs	r3, #2
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004130:	e05f      	b.n	80041f2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004158:	e04b      	b.n	80041f2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	d12b      	bne.n	80041c0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d912      	bls.n	8004198 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004182:	1c9a      	adds	r2, r3, #2
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b02      	subs	r3, #2
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004196:	e02c      	b.n	80041f2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041be:	e018      	b.n	80041f2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c0:	f7fd ffb2 	bl	8002128 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d803      	bhi.n	80041d8 <HAL_SPI_Transmit+0x26e>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d102      	bne.n	80041de <HAL_SPI_Transmit+0x274>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e02d      	b.n	800424e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ae      	bne.n	800415a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	6839      	ldr	r1, [r7, #0]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f947 	bl	8004494 <SPI_EndRxTxTransaction>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800424c:	2300      	movs	r3, #0
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004268:	f7fd ff5e 	bl	8002128 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	4413      	add	r3, r2
 8004276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004278:	f7fd ff56 	bl	8002128 <HAL_GetTick>
 800427c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	015b      	lsls	r3, r3, #5
 8004284:	0d1b      	lsrs	r3, r3, #20
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	fb02 f303 	mul.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428e:	e054      	b.n	800433a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d050      	beq.n	800433a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004298:	f7fd ff46 	bl	8002128 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d902      	bls.n	80042ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d13d      	bne.n	800432a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042c6:	d111      	bne.n	80042ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d0:	d004      	beq.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042da:	d107      	bne.n	80042ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f4:	d10f      	bne.n	8004316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e017      	b.n	800435a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3b01      	subs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	429a      	cmp	r2, r3
 8004356:	d19b      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000200 	.word	0x20000200

08004368 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	@ 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800437a:	f7fd fed5 	bl	8002128 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	4413      	add	r3, r2
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800438a:	f7fd fecd 	bl	8002128 <HAL_GetTick>
 800438e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004398:	4b3d      	ldr	r3, [pc, #244]	@ (8004490 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00da      	lsls	r2, r3, #3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	0d1b      	lsrs	r3, r3, #20
 80043a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043b0:	e060      	b.n	8004474 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80043b8:	d107      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d050      	beq.n	8004474 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d2:	f7fd fea9 	bl	8002128 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043de:	429a      	cmp	r2, r3
 80043e0:	d902      	bls.n	80043e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d13d      	bne.n	8004464 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004400:	d111      	bne.n	8004426 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800440a:	d004      	beq.n	8004416 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d107      	bne.n	8004426 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004424:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442e:	d10f      	bne.n	8004450 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800444e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e010      	b.n	8004486 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3b01      	subs	r3, #1
 8004472:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d196      	bne.n	80043b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3728      	adds	r7, #40	@ 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000200 	.word	0x20000200

08004494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff ff5b 	bl	8004368 <SPI_WaitFifoStateUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e027      	b.n	8004518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2200      	movs	r2, #0
 80044d0:	2180      	movs	r1, #128	@ 0x80
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fec0 	bl	8004258 <SPI_WaitFlagStateUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e014      	b.n	8004518 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff ff34 	bl	8004368 <SPI_WaitFifoStateUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e000      	b.n	8004518 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e040      	b.n	80045b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd fcfa 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	@ 0x24
 800454c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fea6 	bl	80052b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fbeb 	bl	8004d48 <UART_SetConfig>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e01b      	b.n	80045b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800458a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800459a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 ff25 	bl	80053fc <UART_CheckIdleState>
 80045b2:	4603      	mov	r3, r0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045bc:	b480      	push	{r7}
 80045be:	b08b      	sub	sp, #44	@ 0x2c
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d147      	bne.n	8004662 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_UART_Transmit_IT+0x22>
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e040      	b.n	8004664 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2221      	movs	r2, #33	@ 0x21
 800460a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004614:	d107      	bne.n	8004626 <HAL_UART_Transmit_IT+0x6a>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <HAL_UART_Transmit_IT+0xb4>)
 8004622:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004624:	e002      	b.n	800462c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a12      	ldr	r2, [pc, #72]	@ (8004674 <HAL_UART_Transmit_IT+0xb8>)
 800462a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	613b      	str	r3, [r7, #16]
   return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	69f9      	ldr	r1, [r7, #28]
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	61bb      	str	r3, [r7, #24]
   return(result);
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e6      	bne.n	800462c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e000      	b.n	8004664 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	372c      	adds	r7, #44	@ 0x2c
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	0800595f 	.word	0x0800595f
 8004674:	080058a9 	.word	0x080058a9

08004678 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	@ 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800468c:	2b20      	cmp	r3, #32
 800468e:	d137      	bne.n	8004700 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_UART_Receive_IT+0x24>
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e030      	b.n	8004702 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a18      	ldr	r2, [pc, #96]	@ (800470c <HAL_UART_Receive_IT+0x94>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01f      	beq.n	80046f0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d018      	beq.n	80046f0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	613b      	str	r3, [r7, #16]
   return(result);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	69f9      	ldr	r1, [r7, #28]
 80046e2:	6a3a      	ldr	r2, [r7, #32]
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e6      	bne.n	80046be <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 ff96 	bl	8005628 <UART_Start_Receive_IT>
 80046fc:	4603      	mov	r3, r0
 80046fe:	e000      	b.n	8004702 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	3728      	adds	r7, #40	@ 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40008000 	.word	0x40008000

08004710 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b0ba      	sub	sp, #232	@ 0xe8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004736:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800473a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800473e:	4013      	ands	r3, r2
 8004740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d115      	bne.n	8004778 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00f      	beq.n	8004778 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 82ca 	beq.w	8004d02 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
      }
      return;
 8004776:	e2c4      	b.n	8004d02 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8117 	beq.w	80049b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800478e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004792:	4b85      	ldr	r3, [pc, #532]	@ (80049a8 <HAL_UART_IRQHandler+0x298>)
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 810a 	beq.w	80049b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d011      	beq.n	80047cc <HAL_UART_IRQHandler+0xbc>
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2201      	movs	r2, #1
 80047ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c2:	f043 0201 	orr.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d011      	beq.n	80047fc <HAL_UART_IRQHandler+0xec>
 80047d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2202      	movs	r2, #2
 80047ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f2:	f043 0204 	orr.w	r2, r3, #4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d011      	beq.n	800482c <HAL_UART_IRQHandler+0x11c>
 8004808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2204      	movs	r2, #4
 800481a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d017      	beq.n	8004868 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004848:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800485e:	f043 0208 	orr.w	r2, r3, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <HAL_UART_IRQHandler+0x18a>
 8004874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004878:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00c      	beq.n	800489a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004890:	f043 0220 	orr.w	r2, r3, #32
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8230 	beq.w	8004d06 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00d      	beq.n	80048ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d04f      	beq.n	8004992 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 ff5e 	bl	80057b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	d141      	bne.n	800498a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3308      	adds	r3, #8
 800490c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800491c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004932:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800493e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800494a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1d9      	bne.n	8004906 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	2b00      	cmp	r3, #0
 8004958:	d013      	beq.n	8004982 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800495e:	4a13      	ldr	r2, [pc, #76]	@ (80049ac <HAL_UART_IRQHandler+0x29c>)
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004966:	4618      	mov	r0, r3
 8004968:	f7fd fd39 	bl	80023de <HAL_DMA_Abort_IT>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800497c:	4610      	mov	r0, r2
 800497e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	e00f      	b.n	80049a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f9ca 	bl	8004d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	e00b      	b.n	80049a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f9c6 	bl	8004d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	e007      	b.n	80049a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f9c2 	bl	8004d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80049a0:	e1b1      	b.n	8004d06 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a2:	bf00      	nop
    return;
 80049a4:	e1af      	b.n	8004d06 <HAL_UART_IRQHandler+0x5f6>
 80049a6:	bf00      	nop
 80049a8:	04000120 	.word	0x04000120
 80049ac:	0800587d 	.word	0x0800587d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	f040 816a 	bne.w	8004c8e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8163 	beq.w	8004c8e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 815c 	beq.w	8004c8e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2210      	movs	r2, #16
 80049dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	2b40      	cmp	r3, #64	@ 0x40
 80049ea:	f040 80d4 	bne.w	8004b96 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80ad 	beq.w	8004b5e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	f080 80a5 	bcs.w	8004b5e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 8086 	bne.w	8004b3c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1da      	bne.n	8004a30 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e1      	bne.n	8004a7a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3308      	adds	r3, #8
 8004abc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ada:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004adc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e3      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
 8004b10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e4      	bne.n	8004afc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd fc13 	bl	8002362 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8ea 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b5c:	e0d5      	b.n	8004d0a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	f040 80ce 	bne.w	8004d0a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 80c5 	bne.w	8004d0a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8ce 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
      return;
 8004b94:	e0b9      	b.n	8004d0a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80ab 	beq.w	8004d0e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80a6 	beq.w	8004d0e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004be6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e4      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	623b      	str	r3, [r7, #32]
   return(result);
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e3      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f023 0310 	bic.w	r3, r3, #16
 8004c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	617b      	str	r3, [r7, #20]
   return(result);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e4      	bne.n	8004c44 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f852 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c8c:	e03f      	b.n	8004d0e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x5a8>
 8004c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004cae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f001 f89b 	bl	8005dec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cb6:	e02d      	b.n	8004d14 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01c      	beq.n	8004d12 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
    }
    return;
 8004ce0:	e017      	b.n	8004d12 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d012      	beq.n	8004d14 <HAL_UART_IRQHandler+0x604>
 8004cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fe8f 	bl	8005a1e <UART_EndTransmit_IT>
    return;
 8004d00:	e008      	b.n	8004d14 <HAL_UART_IRQHandler+0x604>
      return;
 8004d02:	bf00      	nop
 8004d04:	e006      	b.n	8004d14 <HAL_UART_IRQHandler+0x604>
    return;
 8004d06:	bf00      	nop
 8004d08:	e004      	b.n	8004d14 <HAL_UART_IRQHandler+0x604>
      return;
 8004d0a:	bf00      	nop
 8004d0c:	e002      	b.n	8004d14 <HAL_UART_IRQHandler+0x604>
      return;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <HAL_UART_IRQHandler+0x604>
    return;
 8004d12:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d14:	37e8      	adds	r7, #232	@ 0xe8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop

08004d1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d4c:	b08a      	sub	sp, #40	@ 0x28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4ba4      	ldr	r3, [pc, #656]	@ (8005008 <UART_SetConfig+0x2c0>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a99      	ldr	r2, [pc, #612]	@ (800500c <UART_SetConfig+0x2c4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db0:	4313      	orrs	r3, r2
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a90      	ldr	r2, [pc, #576]	@ (8005010 <UART_SetConfig+0x2c8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d126      	bne.n	8004e20 <UART_SetConfig+0xd8>
 8004dd2:	4b90      	ldr	r3, [pc, #576]	@ (8005014 <UART_SetConfig+0x2cc>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d81b      	bhi.n	8004e18 <UART_SetConfig+0xd0>
 8004de0:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <UART_SetConfig+0xa0>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e09 	.word	0x08004e09
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfe:	e116      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e00:	2302      	movs	r3, #2
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e06:	e112      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	e10e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e10:	2308      	movs	r3, #8
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e16:	e10a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1e:	e106      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7c      	ldr	r2, [pc, #496]	@ (8005018 <UART_SetConfig+0x2d0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d138      	bne.n	8004e9c <UART_SetConfig+0x154>
 8004e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8005014 <UART_SetConfig+0x2cc>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d82d      	bhi.n	8004e94 <UART_SetConfig+0x14c>
 8004e38:	a201      	add	r2, pc, #4	@ (adr r2, 8004e40 <UART_SetConfig+0xf8>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004e95 	.word	0x08004e95
 8004e48:	08004e95 	.word	0x08004e95
 8004e4c:	08004e95 	.word	0x08004e95
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08004e95 	.word	0x08004e95
 8004e58:	08004e95 	.word	0x08004e95
 8004e5c:	08004e95 	.word	0x08004e95
 8004e60:	08004e7d 	.word	0x08004e7d
 8004e64:	08004e95 	.word	0x08004e95
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7a:	e0d8      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e0d4      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e0d0      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e0cc      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e0c8      	b.n	800502e <UART_SetConfig+0x2e6>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800501c <UART_SetConfig+0x2d4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d125      	bne.n	8004ef2 <UART_SetConfig+0x1aa>
 8004ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8005014 <UART_SetConfig+0x2cc>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004eb0:	2b30      	cmp	r3, #48	@ 0x30
 8004eb2:	d016      	beq.n	8004ee2 <UART_SetConfig+0x19a>
 8004eb4:	2b30      	cmp	r3, #48	@ 0x30
 8004eb6:	d818      	bhi.n	8004eea <UART_SetConfig+0x1a2>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d00a      	beq.n	8004ed2 <UART_SetConfig+0x18a>
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d814      	bhi.n	8004eea <UART_SetConfig+0x1a2>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <UART_SetConfig+0x182>
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d008      	beq.n	8004eda <UART_SetConfig+0x192>
 8004ec8:	e00f      	b.n	8004eea <UART_SetConfig+0x1a2>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed0:	e0ad      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed8:	e0a9      	b.n	800502e <UART_SetConfig+0x2e6>
 8004eda:	2304      	movs	r3, #4
 8004edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee0:	e0a5      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee8:	e0a1      	b.n	800502e <UART_SetConfig+0x2e6>
 8004eea:	2310      	movs	r3, #16
 8004eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef0:	e09d      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8005020 <UART_SetConfig+0x2d8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d125      	bne.n	8004f48 <UART_SetConfig+0x200>
 8004efc:	4b45      	ldr	r3, [pc, #276]	@ (8005014 <UART_SetConfig+0x2cc>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f08:	d016      	beq.n	8004f38 <UART_SetConfig+0x1f0>
 8004f0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f0c:	d818      	bhi.n	8004f40 <UART_SetConfig+0x1f8>
 8004f0e:	2b80      	cmp	r3, #128	@ 0x80
 8004f10:	d00a      	beq.n	8004f28 <UART_SetConfig+0x1e0>
 8004f12:	2b80      	cmp	r3, #128	@ 0x80
 8004f14:	d814      	bhi.n	8004f40 <UART_SetConfig+0x1f8>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <UART_SetConfig+0x1d8>
 8004f1a:	2b40      	cmp	r3, #64	@ 0x40
 8004f1c:	d008      	beq.n	8004f30 <UART_SetConfig+0x1e8>
 8004f1e:	e00f      	b.n	8004f40 <UART_SetConfig+0x1f8>
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f26:	e082      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2e:	e07e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f30:	2304      	movs	r3, #4
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e07a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e076      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f40:	2310      	movs	r3, #16
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e072      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <UART_SetConfig+0x2dc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d12a      	bne.n	8004fa8 <UART_SetConfig+0x260>
 8004f52:	4b30      	ldr	r3, [pc, #192]	@ (8005014 <UART_SetConfig+0x2cc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f60:	d01a      	beq.n	8004f98 <UART_SetConfig+0x250>
 8004f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f66:	d81b      	bhi.n	8004fa0 <UART_SetConfig+0x258>
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6c:	d00c      	beq.n	8004f88 <UART_SetConfig+0x240>
 8004f6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f72:	d815      	bhi.n	8004fa0 <UART_SetConfig+0x258>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <UART_SetConfig+0x238>
 8004f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f7c:	d008      	beq.n	8004f90 <UART_SetConfig+0x248>
 8004f7e:	e00f      	b.n	8004fa0 <UART_SetConfig+0x258>
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f86:	e052      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8e:	e04e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e04a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e046      	b.n	800502e <UART_SetConfig+0x2e6>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e042      	b.n	800502e <UART_SetConfig+0x2e6>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a17      	ldr	r2, [pc, #92]	@ (800500c <UART_SetConfig+0x2c4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d13a      	bne.n	8005028 <UART_SetConfig+0x2e0>
 8004fb2:	4b18      	ldr	r3, [pc, #96]	@ (8005014 <UART_SetConfig+0x2cc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fc0:	d01a      	beq.n	8004ff8 <UART_SetConfig+0x2b0>
 8004fc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fc6:	d81b      	bhi.n	8005000 <UART_SetConfig+0x2b8>
 8004fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fcc:	d00c      	beq.n	8004fe8 <UART_SetConfig+0x2a0>
 8004fce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fd2:	d815      	bhi.n	8005000 <UART_SetConfig+0x2b8>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <UART_SetConfig+0x298>
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fdc:	d008      	beq.n	8004ff0 <UART_SetConfig+0x2a8>
 8004fde:	e00f      	b.n	8005000 <UART_SetConfig+0x2b8>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e022      	b.n	800502e <UART_SetConfig+0x2e6>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e01e      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e01a      	b.n	800502e <UART_SetConfig+0x2e6>
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffe:	e016      	b.n	800502e <UART_SetConfig+0x2e6>
 8005000:	2310      	movs	r3, #16
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005006:	e012      	b.n	800502e <UART_SetConfig+0x2e6>
 8005008:	efff69f3 	.word	0xefff69f3
 800500c:	40008000 	.word	0x40008000
 8005010:	40013800 	.word	0x40013800
 8005014:	40021000 	.word	0x40021000
 8005018:	40004400 	.word	0x40004400
 800501c:	40004800 	.word	0x40004800
 8005020:	40004c00 	.word	0x40004c00
 8005024:	40005000 	.word	0x40005000
 8005028:	2310      	movs	r3, #16
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a9f      	ldr	r2, [pc, #636]	@ (80052b0 <UART_SetConfig+0x568>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d17a      	bne.n	800512e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005038:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800503c:	2b08      	cmp	r3, #8
 800503e:	d824      	bhi.n	800508a <UART_SetConfig+0x342>
 8005040:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <UART_SetConfig+0x300>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	0800506d 	.word	0x0800506d
 800504c:	0800508b 	.word	0x0800508b
 8005050:	08005075 	.word	0x08005075
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800507b 	.word	0x0800507b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	0800508b 	.word	0x0800508b
 8005064:	0800508b 	.word	0x0800508b
 8005068:	08005083 	.word	0x08005083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fe f992 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8005070:	61f8      	str	r0, [r7, #28]
        break;
 8005072:	e010      	b.n	8005096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005074:	4b8f      	ldr	r3, [pc, #572]	@ (80052b4 <UART_SetConfig+0x56c>)
 8005076:	61fb      	str	r3, [r7, #28]
        break;
 8005078:	e00d      	b.n	8005096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7fe f8f3 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800507e:	61f8      	str	r0, [r7, #28]
        break;
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005086:	61fb      	str	r3, [r7, #28]
        break;
 8005088:	e005      	b.n	8005096 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80fb 	beq.w	8005294 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	4413      	add	r3, r2
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d305      	bcc.n	80050ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d903      	bls.n	80050c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80050c0:	e0e8      	b.n	8005294 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2200      	movs	r2, #0
 80050c6:	461c      	mov	r4, r3
 80050c8:	4615      	mov	r5, r2
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	022b      	lsls	r3, r5, #8
 80050d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050d8:	0222      	lsls	r2, r4, #8
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	6849      	ldr	r1, [r1, #4]
 80050de:	0849      	lsrs	r1, r1, #1
 80050e0:	2000      	movs	r0, #0
 80050e2:	4688      	mov	r8, r1
 80050e4:	4681      	mov	r9, r0
 80050e6:	eb12 0a08 	adds.w	sl, r2, r8
 80050ea:	eb43 0b09 	adc.w	fp, r3, r9
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fc:	4650      	mov	r0, sl
 80050fe:	4659      	mov	r1, fp
 8005100:	f7fb f8be 	bl	8000280 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4613      	mov	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005112:	d308      	bcc.n	8005126 <UART_SetConfig+0x3de>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511a:	d204      	bcs.n	8005126 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e0b6      	b.n	8005294 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800512c:	e0b2      	b.n	8005294 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005136:	d15e      	bne.n	80051f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005138:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800513c:	2b08      	cmp	r3, #8
 800513e:	d828      	bhi.n	8005192 <UART_SetConfig+0x44a>
 8005140:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <UART_SetConfig+0x400>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	0800516d 	.word	0x0800516d
 800514c:	08005175 	.word	0x08005175
 8005150:	0800517d 	.word	0x0800517d
 8005154:	08005193 	.word	0x08005193
 8005158:	08005183 	.word	0x08005183
 800515c:	08005193 	.word	0x08005193
 8005160:	08005193 	.word	0x08005193
 8005164:	08005193 	.word	0x08005193
 8005168:	0800518b 	.word	0x0800518b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516c:	f7fe f912 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8005170:	61f8      	str	r0, [r7, #28]
        break;
 8005172:	e014      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005174:	f7fe f924 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8005178:	61f8      	str	r0, [r7, #28]
        break;
 800517a:	e010      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800517c:	4b4d      	ldr	r3, [pc, #308]	@ (80052b4 <UART_SetConfig+0x56c>)
 800517e:	61fb      	str	r3, [r7, #28]
        break;
 8005180:	e00d      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005182:	f7fe f86f 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8005186:	61f8      	str	r0, [r7, #28]
        break;
 8005188:	e009      	b.n	800519e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e005      	b.n	800519e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800519c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d077      	beq.n	8005294 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005a      	lsls	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b0f      	cmp	r3, #15
 80051be:	d916      	bls.n	80051ee <UART_SetConfig+0x4a6>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c6:	d212      	bcs.n	80051ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f023 030f 	bic.w	r3, r3, #15
 80051d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	b29a      	uxth	r2, r3
 80051de:	8afb      	ldrh	r3, [r7, #22]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	8afa      	ldrh	r2, [r7, #22]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	e052      	b.n	8005294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051f4:	e04e      	b.n	8005294 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d827      	bhi.n	800524e <UART_SetConfig+0x506>
 80051fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005204 <UART_SetConfig+0x4bc>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	0800524f 	.word	0x0800524f
 8005214:	0800523f 	.word	0x0800523f
 8005218:	0800524f 	.word	0x0800524f
 800521c:	0800524f 	.word	0x0800524f
 8005220:	0800524f 	.word	0x0800524f
 8005224:	08005247 	.word	0x08005247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005228:	f7fe f8b4 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 800522c:	61f8      	str	r0, [r7, #28]
        break;
 800522e:	e014      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005230:	f7fe f8c6 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8005234:	61f8      	str	r0, [r7, #28]
        break;
 8005236:	e010      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005238:	4b1e      	ldr	r3, [pc, #120]	@ (80052b4 <UART_SetConfig+0x56c>)
 800523a:	61fb      	str	r3, [r7, #28]
        break;
 800523c:	e00d      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523e:	f7fe f811 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8005242:	61f8      	str	r0, [r7, #28]
        break;
 8005244:	e009      	b.n	800525a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800524a:	61fb      	str	r3, [r7, #28]
        break;
 800524c:	e005      	b.n	800525a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005258:	bf00      	nop
    }

    if (pclk != 0U)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d019      	beq.n	8005294 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	085a      	lsrs	r2, r3, #1
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	441a      	add	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d909      	bls.n	800528e <UART_SetConfig+0x546>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005280:	d205      	bcs.n	800528e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60da      	str	r2, [r3, #12]
 800528c:	e002      	b.n	8005294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3728      	adds	r7, #40	@ 0x28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ae:	bf00      	nop
 80052b0:	40008000 	.word	0x40008000
 80052b4:	00f42400 	.word	0x00f42400

080052b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b6:	d10a      	bne.n	80053ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b098      	sub	sp, #96	@ 0x60
 8005400:	af02      	add	r7, sp, #8
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800540c:	f7fc fe8c 	bl	8002128 <HAL_GetTick>
 8005410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d12e      	bne.n	800547e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005428:	2200      	movs	r2, #0
 800542a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f88c 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d021      	beq.n	800547e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800544e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005458:	647b      	str	r3, [r7, #68]	@ 0x44
 800545a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800545e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e6      	bne.n	800543a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e062      	b.n	8005544 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b04      	cmp	r3, #4
 800548a:	d149      	bne.n	8005520 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005494:	2200      	movs	r2, #0
 8005496:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f856 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d03c      	beq.n	8005520 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	623b      	str	r3, [r7, #32]
   return(result);
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e6      	bne.n	80054a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	617b      	str	r3, [r7, #20]
   return(result);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e011      	b.n	8005544 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3758      	adds	r7, #88	@ 0x58
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	e04f      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d04b      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fc fddf 	bl	8002128 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <UART_WaitOnFlagUntilTimeout+0x30>
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e04e      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d037      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b80      	cmp	r3, #128	@ 0x80
 8005592:	d034      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b40      	cmp	r3, #64	@ 0x40
 8005598:	d031      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d110      	bne.n	80055ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2208      	movs	r2, #8
 80055ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f8ff 	bl	80057b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2208      	movs	r2, #8
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e029      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d8:	d111      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f8e5 	bl	80057b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e00f      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4013      	ands	r3, r2
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	429a      	cmp	r2, r3
 800561a:	d0a0      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005628:	b480      	push	{r7}
 800562a:	b097      	sub	sp, #92	@ 0x5c
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565a:	d10e      	bne.n	800567a <UART_Start_Receive_IT+0x52>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <UART_Start_Receive_IT+0x48>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800566a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800566e:	e02d      	b.n	80056cc <UART_Start_Receive_IT+0xa4>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	22ff      	movs	r2, #255	@ 0xff
 8005674:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005678:	e028      	b.n	80056cc <UART_Start_Receive_IT+0xa4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10d      	bne.n	800569e <UART_Start_Receive_IT+0x76>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <UART_Start_Receive_IT+0x6c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	22ff      	movs	r2, #255	@ 0xff
 800568e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005692:	e01b      	b.n	80056cc <UART_Start_Receive_IT+0xa4>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	227f      	movs	r2, #127	@ 0x7f
 8005698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800569c:	e016      	b.n	80056cc <UART_Start_Receive_IT+0xa4>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056a6:	d10d      	bne.n	80056c4 <UART_Start_Receive_IT+0x9c>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <UART_Start_Receive_IT+0x92>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	227f      	movs	r2, #127	@ 0x7f
 80056b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056b8:	e008      	b.n	80056cc <UART_Start_Receive_IT+0xa4>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	223f      	movs	r2, #63	@ 0x3f
 80056be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80056c2:	e003      	b.n	80056cc <UART_Start_Receive_IT+0xa4>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2222      	movs	r2, #34	@ 0x22
 80056d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3308      	adds	r3, #8
 80056fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80056fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800570a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e5      	bne.n	80056dc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005718:	d107      	bne.n	800572a <UART_Start_Receive_IT+0x102>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a21      	ldr	r2, [pc, #132]	@ (80057ac <UART_Start_Receive_IT+0x184>)
 8005726:	669a      	str	r2, [r3, #104]	@ 0x68
 8005728:	e002      	b.n	8005730 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a20      	ldr	r2, [pc, #128]	@ (80057b0 <UART_Start_Receive_IT+0x188>)
 800572e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d019      	beq.n	800576c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800574c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
 8005758:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800575c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <UART_Start_Receive_IT+0x110>
 800576a:	e018      	b.n	800579e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	613b      	str	r3, [r7, #16]
   return(result);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f043 0320 	orr.w	r3, r3, #32
 8005780:	653b      	str	r3, [r7, #80]	@ 0x50
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800578a:	623b      	str	r3, [r7, #32]
 800578c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	69f9      	ldr	r1, [r7, #28]
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	61bb      	str	r3, [r7, #24]
   return(result);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e6      	bne.n	800576c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	375c      	adds	r7, #92	@ 0x5c
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	08005c31 	.word	0x08005c31
 80057b0:	08005a75 	.word	0x08005a75

080057b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b095      	sub	sp, #84	@ 0x54
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057da:	643b      	str	r3, [r7, #64]	@ 0x40
 80057dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e6      	bne.n	80057bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800580e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005826:	2b01      	cmp	r3, #1
 8005828:	d118      	bne.n	800585c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60bb      	str	r3, [r7, #8]
   return(result);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6979      	ldr	r1, [r7, #20]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	613b      	str	r3, [r7, #16]
   return(result);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e6      	bne.n	800582a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005870:	bf00      	nop
 8005872:	3754      	adds	r7, #84	@ 0x54
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005888:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff fa3e 	bl	8004d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b08f      	sub	sp, #60	@ 0x3c
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058b4:	2b21      	cmp	r3, #33	@ 0x21
 80058b6:	d14c      	bne.n	8005952 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d132      	bne.n	800592a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e6      	bne.n	80058c4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	60bb      	str	r3, [r7, #8]
   return(result);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800590a:	633b      	str	r3, [r7, #48]	@ 0x30
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6979      	ldr	r1, [r7, #20]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	613b      	str	r3, [r7, #16]
   return(result);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005928:	e013      	b.n	8005952 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592e:	781a      	ldrb	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005952:	bf00      	nop
 8005954:	373c      	adds	r7, #60	@ 0x3c
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800595e:	b480      	push	{r7}
 8005960:	b091      	sub	sp, #68	@ 0x44
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800596a:	2b21      	cmp	r3, #33	@ 0x21
 800596c:	d151      	bne.n	8005a12 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d132      	bne.n	80059e0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	623b      	str	r3, [r7, #32]
   return(result);
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800598e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	633b      	str	r3, [r7, #48]	@ 0x30
 800599a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800599e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e6      	bne.n	800597a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	69b9      	ldr	r1, [r7, #24]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	617b      	str	r3, [r7, #20]
   return(result);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80059de:	e018      	b.n	8005a12 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80059e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e8:	881a      	ldrh	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f2:	b292      	uxth	r2, r2
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8005a12:	bf00      	nop
 8005a14:	3744      	adds	r7, #68	@ 0x44
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b088      	sub	sp, #32
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	613b      	str	r3, [r7, #16]
   return(result);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e6      	bne.n	8005a26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fc f9c7 	bl	8001df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6a:	bf00      	nop
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b09c      	sub	sp, #112	@ 0x70
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a8c:	2b22      	cmp	r3, #34	@ 0x22
 8005a8e:	f040 80be 	bne.w	8005c0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005aa0:	b2d9      	uxtb	r1, r3
 8005aa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aac:	400a      	ands	r2, r1
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f040 80a3 	bne.w	8005c22 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005afc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e6      	bne.n	8005adc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3308      	adds	r3, #8
 8005b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a34      	ldr	r2, [pc, #208]	@ (8005c2c <UART_RxISR_8BIT+0x1b8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d01f      	beq.n	8005ba0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d018      	beq.n	8005ba0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	e853 3f00 	ldrex	r3, [r3]
 8005b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b82:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e6      	bne.n	8005b6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d12e      	bne.n	8005c06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0310 	bic.w	r3, r3, #16
 8005bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	69b9      	ldr	r1, [r7, #24]
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e6      	bne.n	8005bae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d103      	bne.n	8005bf6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff f896 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c04:	e00d      	b.n	8005c22 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fc f928 	bl	8001e5c <HAL_UART_RxCpltCallback>
}
 8005c0c:	e009      	b.n	8005c22 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	8b1b      	ldrh	r3, [r3, #24]
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0208 	orr.w	r2, r2, #8
 8005c1e:	b292      	uxth	r2, r2
 8005c20:	831a      	strh	r2, [r3, #24]
}
 8005c22:	bf00      	nop
 8005c24:	3770      	adds	r7, #112	@ 0x70
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40008000 	.word	0x40008000

08005c30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b09c      	sub	sp, #112	@ 0x70
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c48:	2b22      	cmp	r3, #34	@ 0x22
 8005c4a:	f040 80be 	bne.w	8005dca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005c62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c66:	4013      	ands	r3, r2
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f040 80a3 	bne.w	8005dde <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cb8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e6      	bne.n	8005c98 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005cea:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e5      	bne.n	8005cca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a34      	ldr	r2, [pc, #208]	@ (8005de8 <UART_RxISR_16BIT+0x1b8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d01f      	beq.n	8005d5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e6      	bne.n	8005d2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d12e      	bne.n	8005dc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f023 0310 	bic.w	r3, r3, #16
 8005d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6979      	ldr	r1, [r7, #20]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	613b      	str	r3, [r7, #16]
   return(result);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e6      	bne.n	8005d6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d103      	bne.n	8005db2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2210      	movs	r2, #16
 8005db0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fe ffb8 	bl	8004d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dc0:	e00d      	b.n	8005dde <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc f84a 	bl	8001e5c <HAL_UART_RxCpltCallback>
}
 8005dc8:	e009      	b.n	8005dde <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	8b1b      	ldrh	r3, [r3, #24]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0208 	orr.w	r2, r2, #8
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	831a      	strh	r2, [r3, #24]
}
 8005dde:	bf00      	nop
 8005de0:	3770      	adds	r7, #112	@ 0x70
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40008000 	.word	0x40008000

08005dec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	7992      	ldrb	r2, [r2, #6]
 8005e12:	08d2      	lsrs	r2, r2, #3
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	fb13 f302 	smulbb	r3, r3, r2
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	889b      	ldrh	r3, [r3, #4]
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	885b      	ldrh	r3, [r3, #2]
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	60da      	str	r2, [r3, #12]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8005e46:	b490      	push	{r4, r7}
 8005e48:	b086      	sub	sp, #24
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	4608      	mov	r0, r1
 8005e50:	1d39      	adds	r1, r7, #4
 8005e52:	e881 000c 	stmia.w	r1, {r2, r3}
 8005e56:	4623      	mov	r3, r4
 8005e58:	81fb      	strh	r3, [r7, #14]
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8005e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e66:	88ba      	ldrh	r2, [r7, #4]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	da04      	bge.n	8005e76 <code+0x30>
        code |= LEFT;
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	75fb      	strb	r3, [r7, #23]
 8005e74:	e008      	b.n	8005e88 <code+0x42>
    } else if (x0 > window.x1) {
 8005e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e7a:	893a      	ldrh	r2, [r7, #8]
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	dd03      	ble.n	8005e88 <code+0x42>
        code |= RIGHT;
 8005e80:	2202      	movs	r2, #2
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005e88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	da04      	bge.n	8005e9c <code+0x56>
        code |= BOTTOM;
 8005e92:	2204      	movs	r2, #4
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	75fb      	strb	r3, [r7, #23]
 8005e9a:	e008      	b.n	8005eae <code+0x68>
    } else if (y0 > window.y1) {
 8005e9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ea0:	897a      	ldrh	r2, [r7, #10]
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	dd03      	ble.n	8005eae <code+0x68>
        code |= TOP;
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc90      	pop	{r4, r7}
 8005eb8:	4770      	bx	lr

08005eba <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005ed4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ed8:	cb0c      	ldmia	r3, {r2, r3}
 8005eda:	f7ff ffb4 	bl	8005e46 <code>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005eee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ef2:	cb0c      	ldmia	r3, {r2, r3}
 8005ef4:	f7ff ffa7 	bl	8005e46 <code>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8005efc:	2300      	movs	r3, #0
 8005efe:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8005f00:	7ffa      	ldrb	r2, [r7, #31]
 8005f02:	7fbb      	ldrb	r3, [r7, #30]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	777b      	strb	r3, [r7, #29]
            break;
 8005f10:	e0e9      	b.n	80060e6 <clip_line+0x22c>
        } else if (code0 & code1) {
 8005f12:	7ffa      	ldrb	r2, [r7, #31]
 8005f14:	7fbb      	ldrb	r3, [r7, #30]
 8005f16:	4013      	ands	r3, r2
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f040 80e2 	bne.w	80060e4 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005f28:	7ffb      	ldrb	r3, [r7, #31]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <clip_line+0x78>
 8005f2e:	7ffb      	ldrb	r3, [r7, #31]
 8005f30:	e000      	b.n	8005f34 <clip_line+0x7a>
 8005f32:	7fbb      	ldrb	r3, [r7, #30]
 8005f34:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005f36:	2208      	movs	r2, #8
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d024      	beq.n	8005f8c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f50:	4619      	mov	r1, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f58:	1acb      	subs	r3, r1, r3
 8005f5a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005f64:	1a41      	subs	r1, r0, r1
 8005f66:	fb03 f101 	mul.w	r1, r3, r1
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f70:	4618      	mov	r0, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f78:	1ac3      	subs	r3, r0, r3
 8005f7a:	fb91 f3f3 	sdiv	r3, r1, r3
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005f86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f88:	833b      	strh	r3, [r7, #24]
 8005f8a:	e07f      	b.n	800608c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005f8c:	2204      	movs	r2, #4
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	4013      	ands	r3, r2
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d024      	beq.n	8005fe2 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fae:	1acb      	subs	r3, r1, r3
 8005fb0:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005fb2:	4608      	mov	r0, r1
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005fba:	1a41      	subs	r1, r0, r1
 8005fbc:	fb03 f101 	mul.w	r1, r3, r1
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fce:	1ac3      	subs	r3, r0, r3
 8005fd0:	fb91 f3f3 	sdiv	r3, r1, r3
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8005fdc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005fde:	833b      	strh	r3, [r7, #24]
 8005fe0:	e054      	b.n	800608c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d024      	beq.n	8006038 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006004:	1acb      	subs	r3, r1, r3
 8006006:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006008:	4608      	mov	r0, r1
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006010:	1a41      	subs	r1, r0, r1
 8006012:	fb03 f101 	mul.w	r1, r3, r1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800601c:	4618      	mov	r0, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006024:	1ac3      	subs	r3, r0, r3
 8006026:	fb91 f3f3 	sdiv	r3, r1, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	4413      	add	r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006032:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006034:	837b      	strh	r3, [r7, #26]
 8006036:	e029      	b.n	800608c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006038:	2201      	movs	r2, #1
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	4013      	ands	r3, r2
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d023      	beq.n	800608c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800604a:	b29a      	uxth	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006052:	4619      	mov	r1, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800605e:	4608      	mov	r0, r1
 8006060:	68f9      	ldr	r1, [r7, #12]
 8006062:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006066:	1a41      	subs	r1, r0, r1
 8006068:	fb03 f101 	mul.w	r1, r3, r1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006072:	4618      	mov	r0, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800607a:	1ac3      	subs	r3, r0, r3
 800607c:	fb91 f3f3 	sdiv	r3, r1, r3
 8006080:	b29b      	uxth	r3, r3
 8006082:	4413      	add	r3, r2
 8006084:	b29b      	uxth	r3, r3
 8006086:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006088:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800608a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 800608c:	7dfa      	ldrb	r2, [r7, #23]
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	429a      	cmp	r2, r3
 8006092:	d113      	bne.n	80060bc <clip_line+0x202>
                *x0 = x;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8b7a      	ldrh	r2, [r7, #26]
 8006098:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	8b3a      	ldrh	r2, [r7, #24]
 800609e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060b0:	cb0c      	ldmia	r3, {r2, r3}
 80060b2:	f7ff fec8 	bl	8005e46 <code>
 80060b6:	4603      	mov	r3, r0
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e721      	b.n	8005f00 <clip_line+0x46>
            } else {
                *x1 = x;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8b7a      	ldrh	r2, [r7, #26]
 80060c0:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	8b3a      	ldrh	r2, [r7, #24]
 80060c6:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f9b3 0000 	ldrsh.w	r0, [r3]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80060d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060d8:	cb0c      	ldmia	r3, {r2, r3}
 80060da:	f7ff feb4 	bl	8005e46 <code>
 80060de:	4603      	mov	r3, r0
 80060e0:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 80060e2:	e70d      	b.n	8005f00 <clip_line+0x46>
            break;
 80060e4:	bf00      	nop
            }
        }
    }

    return accept;
 80060e6:	7f7b      	ldrb	r3, [r7, #29]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3306      	adds	r3, #6
 8006100:	2208      	movs	r2, #8
 8006102:	4619      	mov	r1, r3
 8006104:	f001 fcf7 	bl	8007af6 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	330e      	adds	r3, #14
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	330f      	adds	r3, #15
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	3310      	adds	r3, #16
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	72da      	strb	r2, [r3, #11]

    return 0;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b08e      	sub	sp, #56	@ 0x38
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800613c:	f107 0314 	add.w	r3, r7, #20
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff ffd4 	bl	80060f0 <fontx_meta>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 800614e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <fontx_glyph+0x2c>
        return status;
 8006156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800615a:	e077      	b.n	800624c <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800615c:	7f7a      	ldrb	r2, [r7, #29]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006162:	7fba      	ldrb	r2, [r7, #30]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006168:	7f7b      	ldrb	r3, [r7, #29]
 800616a:	3307      	adds	r3, #7
 800616c:	2b00      	cmp	r3, #0
 800616e:	da00      	bge.n	8006172 <fontx_glyph+0x42>
 8006170:	3307      	adds	r3, #7
 8006172:	10db      	asrs	r3, r3, #3
 8006174:	b2da      	uxtb	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	78da      	ldrb	r2, [r3, #3]
 800617e:	7fbb      	ldrb	r3, [r7, #30]
 8006180:	fb12 f303 	smulbb	r3, r2, r3
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800618a:	7ffb      	ldrb	r3, [r7, #31]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10f      	bne.n	80061b0 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2bff      	cmp	r3, #255	@ 0xff
 8006194:	d859      	bhi.n	800624a <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	789b      	ldrb	r3, [r3, #2]
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	3311      	adds	r3, #17
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	441a      	add	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e04d      	b.n	800624c <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3312      	adds	r3, #18
 80061b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3311      	adds	r3, #17
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80061c2:	e03d      	b.n	8006240 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	3301      	adds	r3, #1
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	4413      	add	r3, r2
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	3302      	adds	r3, #2
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	3303      	adds	r3, #3
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	4413      	add	r3, r2
 80061e8:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d31c      	bcc.n	800622c <fontx_glyph+0xfc>
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d818      	bhi.n	800622c <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006202:	4413      	add	r3, r2
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3311      	adds	r3, #17
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	461a      	mov	r2, r3
                    nc * glyph->size
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	789b      	ldrb	r3, [r3, #2]
 8006214:	4619      	mov	r1, r3
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800621c:	4413      	add	r3, r2
 800621e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	441a      	add	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e00f      	b.n	800624c <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006234:	4413      	add	r3, r2
 8006236:	3301      	adds	r3, #1
 8006238:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623c:	3304      	adds	r3, #4
 800623e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006242:	1e5a      	subs	r2, r3, #1
 8006244:	633a      	str	r2, [r7, #48]	@ 0x30
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1bc      	bne.n	80061c4 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800624a:	2301      	movs	r3, #1
 800624c:	4618      	mov	r0, r3
 800624e:	3738      	adds	r7, #56	@ 0x38
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	dd01      	ble.n	800626a <min+0x16>
        return b;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	e000      	b.n	800626c <min+0x18>
    };
    return a;
 800626a:	687b      	ldr	r3, [r7, #4]
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <max>:

static inline int max(int a, int b) {
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	dd01      	ble.n	800628e <max+0x16>
        return a;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	e000      	b.n	8006290 <max+0x18>
    }
    return b;
 800628e:	683b      	ldr	r3, [r7, #0]
}
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	80fb      	strh	r3, [r7, #6]
 80062a6:	460b      	mov	r3, r1
 80062a8:	80bb      	strh	r3, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80062ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062b2:	4a12      	ldr	r2, [pc, #72]	@ (80062fc <hagl_put_pixel+0x60>)
 80062b4:	8812      	ldrh	r2, [r2, #0]
 80062b6:	4293      	cmp	r3, r2
 80062b8:	db1a      	blt.n	80062f0 <hagl_put_pixel+0x54>
 80062ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80062be:	4a0f      	ldr	r2, [pc, #60]	@ (80062fc <hagl_put_pixel+0x60>)
 80062c0:	8852      	ldrh	r2, [r2, #2]
 80062c2:	4293      	cmp	r3, r2
 80062c4:	db14      	blt.n	80062f0 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80062c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062ca:	4a0c      	ldr	r2, [pc, #48]	@ (80062fc <hagl_put_pixel+0x60>)
 80062cc:	8892      	ldrh	r2, [r2, #4]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	dc10      	bgt.n	80062f4 <hagl_put_pixel+0x58>
 80062d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80062d6:	4a09      	ldr	r2, [pc, #36]	@ (80062fc <hagl_put_pixel+0x60>)
 80062d8:	88d2      	ldrh	r2, [r2, #6]
 80062da:	4293      	cmp	r3, r2
 80062dc:	dc0a      	bgt.n	80062f4 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80062de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80062e6:	887a      	ldrh	r2, [r7, #2]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fb faa5 	bl	8001838 <lcd_put_pixel>
 80062ee:	e002      	b.n	80062f6 <hagl_put_pixel+0x5a>
        return;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <hagl_put_pixel+0x5a>
        return;
 80062f4:	bf00      	nop
}
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	2000020c 	.word	0x2000020c

08006300 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b085      	sub	sp, #20
 8006304:	af02      	add	r7, sp, #8
 8006306:	4604      	mov	r4, r0
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	461a      	mov	r2, r3
 800630e:	4623      	mov	r3, r4
 8006310:	80fb      	strh	r3, [r7, #6]
 8006312:	4603      	mov	r3, r0
 8006314:	80bb      	strh	r3, [r7, #4]
 8006316:	460b      	mov	r3, r1
 8006318:	807b      	strh	r3, [r7, #2]
 800631a:	4613      	mov	r3, r2
 800631c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	887b      	ldrh	r3, [r7, #2]
 8006322:	4413      	add	r3, r2
 8006324:	b29b      	uxth	r3, r3
 8006326:	b21a      	sxth	r2, r3
 8006328:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800632c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006330:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006334:	883b      	ldrh	r3, [r7, #0]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4623      	mov	r3, r4
 800633a:	f000 f827 	bl	800638c <hagl_draw_line>
#endif
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}

08006346 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006346:	b590      	push	{r4, r7, lr}
 8006348:	b085      	sub	sp, #20
 800634a:	af02      	add	r7, sp, #8
 800634c:	4604      	mov	r4, r0
 800634e:	4608      	mov	r0, r1
 8006350:	4611      	mov	r1, r2
 8006352:	461a      	mov	r2, r3
 8006354:	4623      	mov	r3, r4
 8006356:	80fb      	strh	r3, [r7, #6]
 8006358:	4603      	mov	r3, r0
 800635a:	80bb      	strh	r3, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	807b      	strh	r3, [r7, #2]
 8006360:	4613      	mov	r3, r2
 8006362:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006364:	88ba      	ldrh	r2, [r7, #4]
 8006366:	887b      	ldrh	r3, [r7, #2]
 8006368:	4413      	add	r3, r2
 800636a:	b29b      	uxth	r3, r3
 800636c:	b21c      	sxth	r4, r3
 800636e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006372:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006376:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800637a:	883b      	ldrh	r3, [r7, #0]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	4623      	mov	r3, r4
 8006380:	f000 f804 	bl	800638c <hagl_draw_line>
#endif
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	bd90      	pop	{r4, r7, pc}

0800638c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638e:	b089      	sub	sp, #36	@ 0x24
 8006390:	af02      	add	r7, sp, #8
 8006392:	4604      	mov	r4, r0
 8006394:	4608      	mov	r0, r1
 8006396:	4611      	mov	r1, r2
 8006398:	461a      	mov	r2, r3
 800639a:	4623      	mov	r3, r4
 800639c:	80fb      	strh	r3, [r7, #6]
 800639e:	4603      	mov	r3, r0
 80063a0:	80bb      	strh	r3, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	807b      	strh	r3, [r7, #2]
 80063a6:	4613      	mov	r3, r2
 80063a8:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80063aa:	463b      	mov	r3, r7
 80063ac:	1cba      	adds	r2, r7, #2
 80063ae:	1d3d      	adds	r5, r7, #4
 80063b0:	1dbc      	adds	r4, r7, #6
 80063b2:	494a      	ldr	r1, [pc, #296]	@ (80064dc <hagl_draw_line+0x150>)
 80063b4:	466e      	mov	r6, sp
 80063b6:	c903      	ldmia	r1, {r0, r1}
 80063b8:	e886 0003 	stmia.w	r6, {r0, r1}
 80063bc:	4629      	mov	r1, r5
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff fd7b 	bl	8005eba <clip_line>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f083 0301 	eor.w	r3, r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d17e      	bne.n	80064ce <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80063d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063d4:	461a      	mov	r2, r3
 80063d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfb8      	it	lt
 80063e0:	425b      	neglt	r3, r3
 80063e2:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 80063e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	da01      	bge.n	80063f4 <hagl_draw_line+0x68>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e001      	b.n	80063f8 <hagl_draw_line+0x6c>
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295
 80063f8:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 80063fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80063fe:	461a      	mov	r2, r3
 8006400:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	425b      	neglt	r3, r3
 800640c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800640e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006412:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006416:	429a      	cmp	r2, r3
 8006418:	da01      	bge.n	800641e <hagl_draw_line+0x92>
 800641a:	2301      	movs	r3, #1
 800641c:	e001      	b.n	8006422 <hagl_draw_line+0x96>
 800641e:	f04f 33ff 	mov.w	r3, #4294967295
 8006422:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006424:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006428:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800642c:	429a      	cmp	r2, r3
 800642e:	dd06      	ble.n	800643e <hagl_draw_line+0xb2>
 8006430:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006434:	0fda      	lsrs	r2, r3, #31
 8006436:	4413      	add	r3, r2
 8006438:	105b      	asrs	r3, r3, #1
 800643a:	b21b      	sxth	r3, r3
 800643c:	e006      	b.n	800644c <hagl_draw_line+0xc0>
 800643e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006442:	0fda      	lsrs	r2, r3, #31
 8006444:	4413      	add	r3, r2
 8006446:	105b      	asrs	r3, r3, #1
 8006448:	425b      	negs	r3, r3
 800644a:	b21b      	sxth	r3, r3
 800644c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800644e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006452:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006456:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff ff1f 	bl	800629c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800645e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006462:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006466:	429a      	cmp	r2, r3
 8006468:	d105      	bne.n	8006476 <hagl_draw_line+0xea>
 800646a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800646e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006472:	429a      	cmp	r2, r3
 8006474:	d02d      	beq.n	80064d2 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006476:	8afb      	ldrh	r3, [r7, #22]
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	b29b      	uxth	r3, r3
 800647c:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800647e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006482:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006486:	425b      	negs	r3, r3
 8006488:	429a      	cmp	r2, r3
 800648a:	dd0c      	ble.n	80064a6 <hagl_draw_line+0x11a>
            err -= dy;
 800648c:	8afa      	ldrh	r2, [r7, #22]
 800648e:	8a3b      	ldrh	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	b29b      	uxth	r3, r3
 8006494:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800649a:	b29a      	uxth	r2, r3
 800649c:	8a7b      	ldrh	r3, [r7, #18]
 800649e:	4413      	add	r3, r2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	b21b      	sxth	r3, r3
 80064a4:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 80064a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80064aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	dacd      	bge.n	800644e <hagl_draw_line+0xc2>
            err += dx;
 80064b2:	8afa      	ldrh	r2, [r7, #22]
 80064b4:	8abb      	ldrh	r3, [r7, #20]
 80064b6:	4413      	add	r3, r2
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80064bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	89fb      	ldrh	r3, [r7, #14]
 80064c4:	4413      	add	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80064cc:	e7bf      	b.n	800644e <hagl_draw_line+0xc2>
        return;
 80064ce:	bf00      	nop
 80064d0:	e000      	b.n	80064d4 <hagl_draw_line+0x148>
            break;
 80064d2:	bf00      	nop
        }
    }
}
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064da:	bf00      	nop
 80064dc:	2000020c 	.word	0x2000020c

080064e0 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	4623      	mov	r3, r4
 80064f0:	80fb      	strh	r3, [r7, #6]
 80064f2:	4603      	mov	r3, r0
 80064f4:	80bb      	strh	r3, [r7, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	807b      	strh	r3, [r7, #2]
 80064fa:	4613      	mov	r3, r2
 80064fc:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80064fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006502:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006506:	429a      	cmp	r2, r3
 8006508:	dd0e      	ble.n	8006528 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	4413      	add	r3, r2
 8006510:	b29b      	uxth	r3, r3
 8006512:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006514:	88fa      	ldrh	r2, [r7, #6]
 8006516:	887b      	ldrh	r3, [r7, #2]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	b29b      	uxth	r3, r3
 800651c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	b29b      	uxth	r3, r3
 8006526:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006528:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800652c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006530:	429a      	cmp	r2, r3
 8006532:	dd0e      	ble.n	8006552 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 8006534:	88ba      	ldrh	r2, [r7, #4]
 8006536:	883b      	ldrh	r3, [r7, #0]
 8006538:	4413      	add	r3, r2
 800653a:	b29b      	uxth	r3, r3
 800653c:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800653e:	88ba      	ldrh	r2, [r7, #4]
 8006540:	883b      	ldrh	r3, [r7, #0]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	b29b      	uxth	r3, r3
 8006546:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006548:	88ba      	ldrh	r2, [r7, #4]
 800654a:	883b      	ldrh	r3, [r7, #0]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	b29b      	uxth	r3, r3
 8006550:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8006552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006556:	4a24      	ldr	r2, [pc, #144]	@ (80065e8 <hagl_draw_rectangle+0x108>)
 8006558:	8812      	ldrh	r2, [r2, #0]
 800655a:	4293      	cmp	r3, r2
 800655c:	db3e      	blt.n	80065dc <hagl_draw_rectangle+0xfc>
 800655e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006562:	4a21      	ldr	r2, [pc, #132]	@ (80065e8 <hagl_draw_rectangle+0x108>)
 8006564:	8852      	ldrh	r2, [r2, #2]
 8006566:	4293      	cmp	r3, r2
 8006568:	db38      	blt.n	80065dc <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800656a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800656e:	4a1e      	ldr	r2, [pc, #120]	@ (80065e8 <hagl_draw_rectangle+0x108>)
 8006570:	8892      	ldrh	r2, [r2, #4]
 8006572:	4293      	cmp	r3, r2
 8006574:	dc34      	bgt.n	80065e0 <hagl_draw_rectangle+0x100>
 8006576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800657a:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <hagl_draw_rectangle+0x108>)
 800657c:	88d2      	ldrh	r2, [r2, #6]
 800657e:	4293      	cmp	r3, r2
 8006580:	dc2e      	bgt.n	80065e0 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	b29b      	uxth	r3, r3
 800658a:	3301      	adds	r3, #1
 800658c:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800658e:	883a      	ldrh	r2, [r7, #0]
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	b29b      	uxth	r3, r3
 8006596:	3301      	adds	r3, #1
 8006598:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800659a:	8c3b      	ldrh	r3, [r7, #32]
 800659c:	89fa      	ldrh	r2, [r7, #14]
 800659e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065a6:	f7ff feab 	bl	8006300 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 80065aa:	8c3b      	ldrh	r3, [r7, #32]
 80065ac:	89fa      	ldrh	r2, [r7, #14]
 80065ae:	f9b7 1000 	ldrsh.w	r1, [r7]
 80065b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065b6:	f7ff fea3 	bl	8006300 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80065ba:	8c3b      	ldrh	r3, [r7, #32]
 80065bc:	89ba      	ldrh	r2, [r7, #12]
 80065be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065c6:	f7ff febe 	bl	8006346 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80065ca:	8c3b      	ldrh	r3, [r7, #32]
 80065cc:	89ba      	ldrh	r2, [r7, #12]
 80065ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065d2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80065d6:	f7ff feb6 	bl	8006346 <hagl_draw_vline>
 80065da:	e002      	b.n	80065e2 <hagl_draw_rectangle+0x102>
        return;
 80065dc:	bf00      	nop
 80065de:	e000      	b.n	80065e2 <hagl_draw_rectangle+0x102>
        return;
 80065e0:	bf00      	nop
}
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}
 80065e8:	2000020c 	.word	0x2000020c

080065ec <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	80fb      	strh	r3, [r7, #6]
 80065fe:	4603      	mov	r3, r0
 8006600:	80bb      	strh	r3, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	807b      	strh	r3, [r7, #2]
 8006606:	4613      	mov	r3, r2
 8006608:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800660a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800660e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006612:	429a      	cmp	r2, r3
 8006614:	dd0e      	ble.n	8006634 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	887b      	ldrh	r3, [r7, #2]
 800661a:	4413      	add	r3, r2
 800661c:	b29b      	uxth	r3, r3
 800661e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	887b      	ldrh	r3, [r7, #2]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	b29b      	uxth	r3, r3
 8006632:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006634:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006638:	f9b7 3000 	ldrsh.w	r3, [r7]
 800663c:	429a      	cmp	r2, r3
 800663e:	dd0e      	ble.n	800665e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8006640:	88ba      	ldrh	r2, [r7, #4]
 8006642:	883b      	ldrh	r3, [r7, #0]
 8006644:	4413      	add	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800664a:	88ba      	ldrh	r2, [r7, #4]
 800664c:	883b      	ldrh	r3, [r7, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	b29b      	uxth	r3, r3
 8006652:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006654:	88ba      	ldrh	r2, [r7, #4]
 8006656:	883b      	ldrh	r3, [r7, #0]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	b29b      	uxth	r3, r3
 800665c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800665e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006662:	4a33      	ldr	r2, [pc, #204]	@ (8006730 <hagl_fill_rectangle+0x144>)
 8006664:	8812      	ldrh	r2, [r2, #0]
 8006666:	4293      	cmp	r3, r2
 8006668:	db5b      	blt.n	8006722 <hagl_fill_rectangle+0x136>
 800666a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800666e:	4a30      	ldr	r2, [pc, #192]	@ (8006730 <hagl_fill_rectangle+0x144>)
 8006670:	8852      	ldrh	r2, [r2, #2]
 8006672:	4293      	cmp	r3, r2
 8006674:	db55      	blt.n	8006722 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800667a:	4a2d      	ldr	r2, [pc, #180]	@ (8006730 <hagl_fill_rectangle+0x144>)
 800667c:	8892      	ldrh	r2, [r2, #4]
 800667e:	4293      	cmp	r3, r2
 8006680:	dc51      	bgt.n	8006726 <hagl_fill_rectangle+0x13a>
 8006682:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006686:	4a2a      	ldr	r2, [pc, #168]	@ (8006730 <hagl_fill_rectangle+0x144>)
 8006688:	88d2      	ldrh	r2, [r2, #6]
 800668a:	4293      	cmp	r3, r2
 800668c:	dc4b      	bgt.n	8006726 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800668e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006692:	4a27      	ldr	r2, [pc, #156]	@ (8006730 <hagl_fill_rectangle+0x144>)
 8006694:	8812      	ldrh	r2, [r2, #0]
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fded 	bl	8006278 <max>
 800669e:	4603      	mov	r3, r0
 80066a0:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80066a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80066a6:	4a22      	ldr	r2, [pc, #136]	@ (8006730 <hagl_fill_rectangle+0x144>)
 80066a8:	8852      	ldrh	r2, [r2, #2]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fde3 	bl	8006278 <max>
 80066b2:	4603      	mov	r3, r0
 80066b4:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80066b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006730 <hagl_fill_rectangle+0x144>)
 80066bc:	8892      	ldrh	r2, [r2, #4]
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fdc7 	bl	8006254 <min>
 80066c6:	4603      	mov	r3, r0
 80066c8:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80066ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80066ce:	4a18      	ldr	r2, [pc, #96]	@ (8006730 <hagl_fill_rectangle+0x144>)
 80066d0:	88d2      	ldrh	r2, [r2, #6]
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fdbd 	bl	8006254 <min>
 80066da:	4603      	mov	r3, r0
 80066dc:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80066de:	887a      	ldrh	r2, [r7, #2]
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3301      	adds	r3, #1
 80066e8:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80066ea:	883a      	ldrh	r2, [r7, #0]
 80066ec:	88bb      	ldrh	r3, [r7, #4]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3301      	adds	r3, #1
 80066f4:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80066f6:	2300      	movs	r3, #0
 80066f8:	81fb      	strh	r3, [r7, #14]
 80066fa:	e00d      	b.n	8006718 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80066fc:	88ba      	ldrh	r2, [r7, #4]
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	4413      	add	r3, r2
 8006702:	b29b      	uxth	r3, r3
 8006704:	b219      	sxth	r1, r3
 8006706:	8c3b      	ldrh	r3, [r7, #32]
 8006708:	89ba      	ldrh	r2, [r7, #12]
 800670a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800670e:	f7ff fdf7 	bl	8006300 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8006712:	89fb      	ldrh	r3, [r7, #14]
 8006714:	3301      	adds	r3, #1
 8006716:	81fb      	strh	r3, [r7, #14]
 8006718:	89fa      	ldrh	r2, [r7, #14]
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	429a      	cmp	r2, r3
 800671e:	d3ed      	bcc.n	80066fc <hagl_fill_rectangle+0x110>
 8006720:	e002      	b.n	8006728 <hagl_fill_rectangle+0x13c>
        return;
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <hagl_fill_rectangle+0x13c>
        return;
 8006726:	bf00      	nop
#endif
    }
}
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	bd90      	pop	{r4, r7, pc}
 800672e:	bf00      	nop
 8006730:	2000020c 	.word	0x2000020c

08006734 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006734:	b590      	push	{r4, r7, lr}
 8006736:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8006742:	f844 0c24 	str.w	r0, [r4, #-36]
 8006746:	460c      	mov	r4, r1
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006750:	4622      	mov	r2, r4
 8006752:	f823 2c26 	strh.w	r2, [r3, #-38]
 8006756:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800675a:	4602      	mov	r2, r0
 800675c:	f823 2c28 	strh.w	r2, [r3, #-40]
 8006760:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006764:	460a      	mov	r2, r1
 8006766:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800676a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800676e:	4619      	mov	r1, r3
 8006770:	f107 0310 	add.w	r3, r7, #16
 8006774:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff fcd6 	bl	8006130 <fontx_glyph>
 8006784:	4603      	mov	r3, r0
 8006786:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800678a:	f102 0209 	add.w	r2, r2, #9
 800678e:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8006790:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006794:	f103 0309 	add.w	r3, r3, #9
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <hagl_put_char+0x6e>
        return 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	e0c0      	b.n	8006924 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80067a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80067aa:	461a      	mov	r2, r3
 80067ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067b0:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80067b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067b8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80067bc:	461a      	mov	r2, r3
 80067be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067c2:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80067c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067ca:	2210      	movs	r2, #16
 80067cc:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80067d0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80067d4:	3a08      	subs	r2, #8
 80067d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067da:	3b18      	subs	r3, #24
 80067dc:	4611      	mov	r1, r2
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fb0e 	bl	8005e00 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80067e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80067e8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80067ec:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80067f0:	f102 020c 	add.w	r2, r2, #12
 80067f4:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80067f6:	2300      	movs	r3, #0
 80067f8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80067fc:	f102 020b 	add.w	r2, r2, #11
 8006800:	7013      	strb	r3, [r2, #0]
 8006802:	e071      	b.n	80068e8 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006804:	2300      	movs	r3, #0
 8006806:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800680a:	f102 020a 	add.w	r2, r2, #10
 800680e:	7013      	strb	r3, [r2, #0]
 8006810:	e047      	b.n	80068a2 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8006812:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006816:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b25a      	sxtb	r2, r3
 800681e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006822:	f103 030a 	add.w	r3, r3, #10
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	2180      	movs	r1, #128	@ 0x80
 800682e:	fa41 f303 	asr.w	r3, r1, r3
 8006832:	b25b      	sxtb	r3, r3
 8006834:	4013      	ands	r3, r2
 8006836:	b25b      	sxtb	r3, r3
 8006838:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800683c:	f102 0208 	add.w	r2, r2, #8
 8006840:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006842:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006846:	f103 0308 	add.w	r3, r3, #8
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <hagl_put_char+0x13e>
                *(ptr++) = color;
 8006850:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006854:	f103 030c 	add.w	r3, r3, #12
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006860:	f101 010c 	add.w	r1, r1, #12
 8006864:	600a      	str	r2, [r1, #0]
 8006866:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800686a:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	e00c      	b.n	800688c <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8006872:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006876:	f103 030c 	add.w	r3, r3, #12
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	1c9a      	adds	r2, r3, #2
 800687e:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8006882:	f101 010c 	add.w	r1, r1, #12
 8006886:	600a      	str	r2, [r1, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800688c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8006890:	f103 030a 	add.w	r3, r3, #10
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800689c:	f102 020a 	add.w	r2, r2, #10
 80068a0:	7013      	strb	r3, [r2, #0]
 80068a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80068aa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80068ae:	f102 020a 	add.w	r2, r2, #10
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3ac      	bcc.n	8006812 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80068b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068bc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80068c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80068c4:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80068c8:	4413      	add	r3, r2
 80068ca:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80068ce:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80068d2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80068d6:	f103 030b 	add.w	r3, r3, #11
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80068e2:	f102 020b 	add.w	r2, r2, #11
 80068e6:	7013      	strb	r3, [r2, #0]
 80068e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80068ec:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80068f0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80068f4:	f102 020b 	add.w	r2, r2, #11
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d382      	bcc.n	8006804 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 80068fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006902:	3b18      	subs	r3, #24
 8006904:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006908:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800690c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006910:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006914:	461a      	mov	r2, r3
 8006916:	f000 f85a 	bl	80069ce <hagl_blit>

    return bitmap.width;
 800691a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800691e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006922:	b2db      	uxtb	r3, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}

08006930 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08c      	sub	sp, #48	@ 0x30
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	4603      	mov	r3, r0
 8006940:	817b      	strh	r3, [r7, #10]
 8006942:	460b      	mov	r3, r1
 8006944:	813b      	strh	r3, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 800694a:	897b      	ldrh	r3, [r7, #10]
 800694c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800694e:	f107 0314 	add.w	r3, r7, #20
 8006952:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fbcb 	bl	80060f0 <fontx_meta>
 800695a:	4603      	mov	r3, r0
 800695c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8006960:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <hagl_put_text+0x3c>
        return 0;
 8006968:	2300      	movs	r3, #0
 800696a:	e02c      	b.n	80069c6 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	1d1a      	adds	r2, r3, #4
 8006970:	60fa      	str	r2, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b0d      	cmp	r3, #13
 800697a:	d002      	beq.n	8006982 <hagl_put_text+0x52>
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2b0a      	cmp	r3, #10
 8006980:	d108      	bne.n	8006994 <hagl_put_text+0x64>
            x0 = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006986:	7fbb      	ldrb	r3, [r7, #30]
 8006988:	461a      	mov	r2, r3
 800698a:	893b      	ldrh	r3, [r7, #8]
 800698c:	4413      	add	r3, r2
 800698e:	b29b      	uxth	r3, r3
 8006990:	813b      	strh	r3, [r7, #8]
 8006992:	e010      	b.n	80069b6 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8006994:	88f8      	ldrh	r0, [r7, #6]
 8006996:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800699a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	4603      	mov	r3, r0
 80069a4:	6a38      	ldr	r0, [r7, #32]
 80069a6:	f7ff fec5 	bl	8006734 <hagl_put_char>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	897b      	ldrh	r3, [r7, #10]
 80069b0:	4413      	add	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1d6      	bne.n	800696c <hagl_put_text+0x3c>

    return x0 - original;
 80069be:	897a      	ldrh	r2, [r7, #10]
 80069c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	b29b      	uxth	r3, r3
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3728      	adds	r7, #40	@ 0x28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	4603      	mov	r3, r0
 80069d6:	603a      	str	r2, [r7, #0]
 80069d8:	80fb      	strh	r3, [r7, #6]
 80069da:	460b      	mov	r3, r1
 80069dc:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80069e4:	2300      	movs	r3, #0
 80069e6:	827b      	strh	r3, [r7, #18]
 80069e8:	e020      	b.n	8006a2c <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80069ea:	2300      	movs	r3, #0
 80069ec:	823b      	strh	r3, [r7, #16]
 80069ee:	e015      	b.n	8006a1c <hagl_blit+0x4e>
            color = *(ptr++);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	617a      	str	r2, [r7, #20]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80069fa:	88fa      	ldrh	r2, [r7, #6]
 80069fc:	8a3b      	ldrh	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	b218      	sxth	r0, r3
 8006a04:	88ba      	ldrh	r2, [r7, #4]
 8006a06:	8a7b      	ldrh	r3, [r7, #18]
 8006a08:	4413      	add	r3, r2
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	89fa      	ldrh	r2, [r7, #14]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f7ff fc43 	bl	800629c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006a16:	8a3b      	ldrh	r3, [r7, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	823b      	strh	r3, [r7, #16]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	8a3a      	ldrh	r2, [r7, #16]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d3e4      	bcc.n	80069f0 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006a26:	8a7b      	ldrh	r3, [r7, #18]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	827b      	strh	r3, [r7, #18]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	885b      	ldrh	r3, [r3, #2]
 8006a30:	8a7a      	ldrh	r2, [r7, #18]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d3d9      	bcc.n	80069ea <hagl_blit+0x1c>
        }
    }
#endif
};
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <hagl_draw_circle>:
        clip_window.x0, clip_window.y0, clip_window.x1, clip_window.y1,
        0x00
    );
}

void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4623      	mov	r3, r4
 8006a50:	80fb      	strh	r3, [r7, #6]
 8006a52:	4603      	mov	r3, r0
 8006a54:	80bb      	strh	r3, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	807b      	strh	r3, [r7, #2]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006a62:	887b      	ldrh	r3, [r7, #2]
 8006a64:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006a66:	887b      	ldrh	r3, [r7, #2]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f1c3 0303 	rsb	r3, r3, #3
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	4413      	add	r3, r2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	b218      	sxth	r0, r3
 8006a7e:	88ba      	ldrh	r2, [r7, #4]
 8006a80:	89bb      	ldrh	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	b21b      	sxth	r3, r3
 8006a88:	883a      	ldrh	r2, [r7, #0]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	f7ff fc06 	bl	800629c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	89fb      	ldrh	r3, [r7, #14]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	b218      	sxth	r0, r3
 8006a9a:	88ba      	ldrh	r2, [r7, #4]
 8006a9c:	89bb      	ldrh	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	b21b      	sxth	r3, r3
 8006aa4:	883a      	ldrh	r2, [r7, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f7ff fbf8 	bl	800629c <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	89fb      	ldrh	r3, [r7, #14]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	b218      	sxth	r0, r3
 8006ab6:	88ba      	ldrh	r2, [r7, #4]
 8006ab8:	89bb      	ldrh	r3, [r7, #12]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b21b      	sxth	r3, r3
 8006ac0:	883a      	ldrh	r2, [r7, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f7ff fbea 	bl	800629c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8006ac8:	88fa      	ldrh	r2, [r7, #6]
 8006aca:	89fb      	ldrh	r3, [r7, #14]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	b218      	sxth	r0, r3
 8006ad2:	88ba      	ldrh	r2, [r7, #4]
 8006ad4:	89bb      	ldrh	r3, [r7, #12]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b21b      	sxth	r3, r3
 8006adc:	883a      	ldrh	r2, [r7, #0]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f7ff fbdc 	bl	800629c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	89bb      	ldrh	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	b218      	sxth	r0, r3
 8006aee:	88ba      	ldrh	r2, [r7, #4]
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	4413      	add	r3, r2
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	883a      	ldrh	r2, [r7, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	f7ff fbce 	bl	800629c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8006b00:	88fa      	ldrh	r2, [r7, #6]
 8006b02:	89bb      	ldrh	r3, [r7, #12]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	b218      	sxth	r0, r3
 8006b0a:	88ba      	ldrh	r2, [r7, #4]
 8006b0c:	89fb      	ldrh	r3, [r7, #14]
 8006b0e:	4413      	add	r3, r2
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	b21b      	sxth	r3, r3
 8006b14:	883a      	ldrh	r2, [r7, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	f7ff fbc0 	bl	800629c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	89bb      	ldrh	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	b218      	sxth	r0, r3
 8006b26:	88ba      	ldrh	r2, [r7, #4]
 8006b28:	89fb      	ldrh	r3, [r7, #14]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b21b      	sxth	r3, r3
 8006b30:	883a      	ldrh	r2, [r7, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	f7ff fbb2 	bl	800629c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8006b38:	88fa      	ldrh	r2, [r7, #6]
 8006b3a:	89bb      	ldrh	r3, [r7, #12]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	b218      	sxth	r0, r3
 8006b42:	88ba      	ldrh	r2, [r7, #4]
 8006b44:	89fb      	ldrh	r3, [r7, #14]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	883a      	ldrh	r2, [r7, #0]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f7ff fba4 	bl	800629c <hagl_put_pixel>

    while (y >= x) {
 8006b54:	e097      	b.n	8006c86 <hagl_draw_circle+0x246>
        x++;
 8006b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006b62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	dd14      	ble.n	8006b94 <hagl_draw_circle+0x154>
            y--;
 8006b6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006b76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006b7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	4413      	add	r3, r2
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	330a      	adds	r3, #10
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	e008      	b.n	8006ba6 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3306      	adds	r3, #6
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	89fb      	ldrh	r3, [r7, #14]
 8006baa:	4413      	add	r3, r2
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	b218      	sxth	r0, r3
 8006bb0:	88ba      	ldrh	r2, [r7, #4]
 8006bb2:	89bb      	ldrh	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	b21b      	sxth	r3, r3
 8006bba:	883a      	ldrh	r2, [r7, #0]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f7ff fb6d 	bl	800629c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	89fb      	ldrh	r3, [r7, #14]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	b218      	sxth	r0, r3
 8006bcc:	88ba      	ldrh	r2, [r7, #4]
 8006bce:	89bb      	ldrh	r3, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	b21b      	sxth	r3, r3
 8006bd6:	883a      	ldrh	r2, [r7, #0]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	f7ff fb5f 	bl	800629c <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	89fb      	ldrh	r3, [r7, #14]
 8006be2:	4413      	add	r3, r2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b218      	sxth	r0, r3
 8006be8:	88ba      	ldrh	r2, [r7, #4]
 8006bea:	89bb      	ldrh	r3, [r7, #12]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	883a      	ldrh	r2, [r7, #0]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	f7ff fb51 	bl	800629c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8006bfa:	88fa      	ldrh	r2, [r7, #6]
 8006bfc:	89fb      	ldrh	r3, [r7, #14]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	b218      	sxth	r0, r3
 8006c04:	88ba      	ldrh	r2, [r7, #4]
 8006c06:	89bb      	ldrh	r3, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	b21b      	sxth	r3, r3
 8006c0e:	883a      	ldrh	r2, [r7, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	f7ff fb43 	bl	800629c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	89bb      	ldrh	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	b218      	sxth	r0, r3
 8006c20:	88ba      	ldrh	r2, [r7, #4]
 8006c22:	89fb      	ldrh	r3, [r7, #14]
 8006c24:	4413      	add	r3, r2
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	b21b      	sxth	r3, r3
 8006c2a:	883a      	ldrh	r2, [r7, #0]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	f7ff fb35 	bl	800629c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	89bb      	ldrh	r3, [r7, #12]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	b218      	sxth	r0, r3
 8006c3c:	88ba      	ldrh	r2, [r7, #4]
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
 8006c40:	4413      	add	r3, r2
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	b21b      	sxth	r3, r3
 8006c46:	883a      	ldrh	r2, [r7, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f7ff fb27 	bl	800629c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	89bb      	ldrh	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	b218      	sxth	r0, r3
 8006c58:	88ba      	ldrh	r2, [r7, #4]
 8006c5a:	89fb      	ldrh	r3, [r7, #14]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	b21b      	sxth	r3, r3
 8006c62:	883a      	ldrh	r2, [r7, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7ff fb19 	bl	800629c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	89bb      	ldrh	r3, [r7, #12]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	b218      	sxth	r0, r3
 8006c74:	88ba      	ldrh	r2, [r7, #4]
 8006c76:	89fb      	ldrh	r3, [r7, #14]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	b21b      	sxth	r3, r3
 8006c7e:	883a      	ldrh	r2, [r7, #0]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f7ff fb0b 	bl	800629c <hagl_put_pixel>
    while (y >= x) {
 8006c86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f6bf af61 	bge.w	8006b56 <hagl_draw_circle+0x116>
    }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd90      	pop	{r4, r7, pc}

08006c9e <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8006c9e:	b590      	push	{r4, r7, lr}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	4611      	mov	r1, r2
 8006caa:	461a      	mov	r2, r3
 8006cac:	4623      	mov	r3, r4
 8006cae:	80fb      	strh	r3, [r7, #6]
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	80bb      	strh	r3, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	807b      	strh	r3, [r7, #2]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8006cc0:	887b      	ldrh	r3, [r7, #2]
 8006cc2:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8006cc4:	887b      	ldrh	r3, [r7, #2]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f1c3 0303 	rsb	r3, r3, #3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8006cd2:	e067      	b.n	8006da4 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8006cd4:	88fa      	ldrh	r2, [r7, #6]
 8006cd6:	89fb      	ldrh	r3, [r7, #14]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	b218      	sxth	r0, r3
 8006cde:	88ba      	ldrh	r2, [r7, #4]
 8006ce0:	89bb      	ldrh	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b219      	sxth	r1, r3
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	883b      	ldrh	r3, [r7, #0]
 8006cf0:	f7ff fb06 	bl	8006300 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	89fb      	ldrh	r3, [r7, #14]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	b218      	sxth	r0, r3
 8006cfe:	88ba      	ldrh	r2, [r7, #4]
 8006d00:	89bb      	ldrh	r3, [r7, #12]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	b219      	sxth	r1, r3
 8006d08:	89fb      	ldrh	r3, [r7, #14]
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	883b      	ldrh	r3, [r7, #0]
 8006d10:	f7ff faf6 	bl	8006300 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	89bb      	ldrh	r3, [r7, #12]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	b218      	sxth	r0, r3
 8006d1e:	88ba      	ldrh	r2, [r7, #4]
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	4413      	add	r3, r2
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	b219      	sxth	r1, r3
 8006d28:	89bb      	ldrh	r3, [r7, #12]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	883b      	ldrh	r3, [r7, #0]
 8006d30:	f7ff fae6 	bl	8006300 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8006d34:	88fa      	ldrh	r2, [r7, #6]
 8006d36:	89bb      	ldrh	r3, [r7, #12]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	b218      	sxth	r0, r3
 8006d3e:	88ba      	ldrh	r2, [r7, #4]
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b219      	sxth	r1, r3
 8006d48:	89bb      	ldrh	r3, [r7, #12]
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	883b      	ldrh	r3, [r7, #0]
 8006d50:	f7ff fad6 	bl	8006300 <hagl_draw_hline>
        x++;
 8006d54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8006d60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dd14      	ble.n	8006d92 <hagl_fill_circle+0xf4>
            y--;
 8006d68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8006d74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006d78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	897b      	ldrh	r3, [r7, #10]
 8006d86:	4413      	add	r3, r2
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	330a      	adds	r3, #10
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	817b      	strh	r3, [r7, #10]
 8006d90:	e008      	b.n	8006da4 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8006d92:	89fb      	ldrh	r3, [r7, #14]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	897b      	ldrh	r3, [r7, #10]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3306      	adds	r3, #6
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8006da4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006da8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	da91      	bge.n	8006cd4 <hagl_fill_circle+0x36>
        }
    }
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd90      	pop	{r4, r7, pc}

08006dba <hagl_draw_polygon>:
        hagl_draw_hline(x0 - wx, y0 + wy, wx * 2, color);
    }
}


void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006dba:	b590      	push	{r4, r7, lr}
 8006dbc:	b087      	sub	sp, #28
 8006dbe:	af02      	add	r7, sp, #8
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	6039      	str	r1, [r7, #0]
 8006dc4:	80fb      	strh	r3, [r7, #6]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8006dca:	2300      	movs	r3, #0
 8006dcc:	81fb      	strh	r3, [r7, #14]
 8006dce:	e02a      	b.n	8006e26 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8006dd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	4413      	add	r3, r2
        hagl_draw_line(
 8006dda:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8006dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	3302      	adds	r3, #2
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4413      	add	r3, r2
        hagl_draw_line(
 8006dea:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8006dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006df2:	3301      	adds	r3, #1
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	4413      	add	r3, r2
        hagl_draw_line(
 8006dfa:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8006dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3306      	adds	r3, #6
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	4413      	add	r3, r2
        hagl_draw_line(
 8006e0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e0e:	88bb      	ldrh	r3, [r7, #4]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	4613      	mov	r3, r2
 8006e14:	4622      	mov	r2, r4
 8006e16:	f7ff fab9 	bl	800638c <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8006e1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3301      	adds	r3, #1
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	81fb      	strh	r3, [r7, #14]
 8006e26:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	429a      	cmp	r2, r3
 8006e32:	dbcd      	blt.n	8006dd0 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	3302      	adds	r3, #2
    hagl_draw_line(
 8006e3e:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8006e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4413      	add	r3, r2
    hagl_draw_line(
 8006e52:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8006e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	3b02      	subs	r3, #2
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4413      	add	r3, r2
    hagl_draw_line(
 8006e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e66:	88bb      	ldrh	r3, [r7, #4]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	f7ff fa8d 	bl	800638c <hagl_draw_line>
        color
    );
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd90      	pop	{r4, r7, pc}

08006e7a <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b0ac      	sub	sp, #176	@ 0xb0
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	4603      	mov	r3, r0
 8006e82:	6039      	str	r1, [r7, #0]
 8006e84:	80fb      	strh	r3, [r7, #6]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8006e8a:	2380      	movs	r3, #128	@ 0x80
 8006e8c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8006e96:	2300      	movs	r3, #0
 8006e98:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006e9c:	e02e      	b.n	8006efc <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8006e9e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	3302      	adds	r3, #2
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eae:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	dd08      	ble.n	8006ec8 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8006eb6:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	3302      	adds	r3, #2
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8006ec8:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	3302      	adds	r3, #2
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed8:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8006edc:	429a      	cmp	r2, r3
 8006ede:	da08      	bge.n	8006ef2 <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8006ee0:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	4413      	add	r3, r2
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8006ef2:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8006efc:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8006f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	dbca      	blt.n	8006e9e <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8006f08:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8006f0c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8006f10:	e144      	b.n	800719c <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8006f22:	2300      	movs	r3, #0
 8006f24:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8006f28:	e0a6      	b.n	8007078 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8006f2a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	4413      	add	r3, r2
 8006f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f40:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8006f44:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	3302      	adds	r3, #2
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f54:	ee07 3a90 	vmov	s15, r3
 8006f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f5c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8006f60:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f76:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8006f7a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	3302      	adds	r3, #2
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f92:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8006f96:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8006fa2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fae:	d50c      	bpl.n	8006fca <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8006fb0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fbc:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc8:	da19      	bge.n	8006ffe <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8006fca:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8006fd6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe2:	d53e      	bpl.n	8007062 <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8006fe4:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffc:	db31      	blt.n	8007062 <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8006ffe:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800700a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800700e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007012:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007016:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800701a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800701e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007022:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007026:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800702a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800702e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007032:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800703a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800703e:	ee17 3a90 	vmov	r3, s15
 8007042:	b21a      	sxth	r2, r3
 8007044:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007048:	b292      	uxth	r2, r2
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	33b0      	adds	r3, #176	@ 0xb0
 800704e:	443b      	add	r3, r7
 8007050:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007054:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007058:	b29b      	uxth	r3, r3
 800705a:	3301      	adds	r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007062:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007066:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 800706a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 800706e:	b29b      	uxth	r3, r3
 8007070:	3301      	adds	r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007078:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 800707c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007080:	429a      	cmp	r2, r3
 8007082:	f6ff af52 	blt.w	8006f2a <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 800708c:	e046      	b.n	800711c <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 800708e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	33b0      	adds	r3, #176	@ 0xb0
 8007096:	443b      	add	r3, r7
 8007098:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 800709c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070a0:	3301      	adds	r3, #1
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	33b0      	adds	r3, #176	@ 0xb0
 80070a6:	443b      	add	r3, r7
 80070a8:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d92e      	bls.n	800710e <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 80070b0:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	33b0      	adds	r3, #176	@ 0xb0
 80070b8:	443b      	add	r3, r7
 80070ba:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80070be:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 80070c2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070c6:	3301      	adds	r3, #1
 80070c8:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	33b0      	adds	r3, #176	@ 0xb0
 80070d0:	443b      	add	r3, r7
 80070d2:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 80070d6:	0053      	lsls	r3, r2, #1
 80070d8:	33b0      	adds	r3, #176	@ 0xb0
 80070da:	443b      	add	r3, r7
 80070dc:	460a      	mov	r2, r1
 80070de:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 80070e2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070e6:	3301      	adds	r3, #1
 80070e8:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	33b0      	adds	r3, #176	@ 0xb0
 80070f0:	443b      	add	r3, r7
 80070f2:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 80070f6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00e      	beq.n	800711c <hagl_fill_polygon+0x2a2>
                    i--;
 80070fe:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29b      	uxth	r3, r3
 8007108:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 800710c:	e006      	b.n	800711c <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 800710e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007112:	b29b      	uxth	r3, r3
 8007114:	3301      	adds	r3, #1
 8007116:	b29b      	uxth	r3, r3
 8007118:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 800711c:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007120:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007124:	3b01      	subs	r3, #1
 8007126:	429a      	cmp	r2, r3
 8007128:	dbb1      	blt.n	800708e <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 800712a:	2300      	movs	r3, #0
 800712c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007130:	e027      	b.n	8007182 <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007132:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007136:	3301      	adds	r3, #1
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	33b0      	adds	r3, #176	@ 0xb0
 800713c:	443b      	add	r3, r7
 800713e:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007142:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	33b0      	adds	r3, #176	@ 0xb0
 800714a:	443b      	add	r3, r7
 800714c:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	b29b      	uxth	r3, r3
 8007154:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007158:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	33b0      	adds	r3, #176	@ 0xb0
 8007160:	443b      	add	r3, r7
 8007162:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007166:	b218      	sxth	r0, r3
 8007168:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 800716c:	88bb      	ldrh	r3, [r7, #4]
 800716e:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007172:	f7ff f8c5 	bl	8006300 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007176:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800717a:	3302      	adds	r3, #2
 800717c:	b29b      	uxth	r3, r3
 800717e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007182:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007186:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 800718a:	429a      	cmp	r2, r3
 800718c:	dbd1      	blt.n	8007132 <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 800718e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007192:	b29b      	uxth	r3, r3
 8007194:	3301      	adds	r3, #1
 8007196:	b29b      	uxth	r3, r3
 8007198:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 800719c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80071a0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 80071a4:	429a      	cmp	r2, r3
 80071a6:	f6ff aeb4 	blt.w	8006f12 <hagl_fill_polygon+0x98>
        }
    }
}
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	37b0      	adds	r7, #176	@ 0xb0
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	80fb      	strh	r3, [r7, #6]
 80071c6:	4603      	mov	r3, r0
 80071c8:	80bb      	strh	r3, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	807b      	strh	r3, [r7, #2]
 80071ce:	4613      	mov	r3, r2
 80071d0:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	81bb      	strh	r3, [r7, #12]
 80071d6:	88bb      	ldrh	r3, [r7, #4]
 80071d8:	81fb      	strh	r3, [r7, #14]
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	823b      	strh	r3, [r7, #16]
 80071de:	883b      	ldrh	r3, [r7, #0]
 80071e0:	827b      	strh	r3, [r7, #18]
 80071e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071e4:	82bb      	strh	r3, [r7, #20]
 80071e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80071e8:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 80071ea:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	4619      	mov	r1, r3
 80071f2:	2003      	movs	r0, #3
 80071f4:	f7ff fde1 	bl	8006dba <hagl_draw_polygon>
};
 80071f8:	bf00      	nop
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd90      	pop	{r4, r7, pc}

08007200 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	4611      	mov	r1, r2
 800720c:	461a      	mov	r2, r3
 800720e:	4623      	mov	r3, r4
 8007210:	80fb      	strh	r3, [r7, #6]
 8007212:	4603      	mov	r3, r0
 8007214:	80bb      	strh	r3, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	807b      	strh	r3, [r7, #2]
 800721a:	4613      	mov	r3, r2
 800721c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	81bb      	strh	r3, [r7, #12]
 8007222:	88bb      	ldrh	r3, [r7, #4]
 8007224:	81fb      	strh	r3, [r7, #14]
 8007226:	887b      	ldrh	r3, [r7, #2]
 8007228:	823b      	strh	r3, [r7, #16]
 800722a:	883b      	ldrh	r3, [r7, #0]
 800722c:	827b      	strh	r3, [r7, #18]
 800722e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007230:	82bb      	strh	r3, [r7, #20]
 8007232:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007234:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007236:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	4619      	mov	r1, r3
 800723e:	2003      	movs	r0, #3
 8007240:	f7ff fe1b 	bl	8006e7a <hagl_fill_polygon>
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bd90      	pop	{r4, r7, pc}

0800724c <atoi>:
 800724c:	220a      	movs	r2, #10
 800724e:	2100      	movs	r1, #0
 8007250:	f000 b888 	b.w	8007364 <strtol>

08007254 <mbstowcs>:
 8007254:	b510      	push	{r4, lr}
 8007256:	4603      	mov	r3, r0
 8007258:	b142      	cbz	r2, 800726c <mbstowcs+0x18>
 800725a:	2000      	movs	r0, #0
 800725c:	5c0c      	ldrb	r4, [r1, r0]
 800725e:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
 8007262:	b114      	cbz	r4, 800726a <mbstowcs+0x16>
 8007264:	3001      	adds	r0, #1
 8007266:	4290      	cmp	r0, r2
 8007268:	d1f8      	bne.n	800725c <mbstowcs+0x8>
 800726a:	bd10      	pop	{r4, pc}
 800726c:	4610      	mov	r0, r2
 800726e:	e7fc      	b.n	800726a <mbstowcs+0x16>

08007270 <_strtol_l.constprop.0>:
 8007270:	2b24      	cmp	r3, #36	@ 0x24
 8007272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007276:	4686      	mov	lr, r0
 8007278:	4690      	mov	r8, r2
 800727a:	d801      	bhi.n	8007280 <_strtol_l.constprop.0+0x10>
 800727c:	2b01      	cmp	r3, #1
 800727e:	d106      	bne.n	800728e <_strtol_l.constprop.0+0x1e>
 8007280:	f000 fc0c 	bl	8007a9c <__errno>
 8007284:	2316      	movs	r3, #22
 8007286:	6003      	str	r3, [r0, #0]
 8007288:	2000      	movs	r0, #0
 800728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728e:	4834      	ldr	r0, [pc, #208]	@ (8007360 <_strtol_l.constprop.0+0xf0>)
 8007290:	460d      	mov	r5, r1
 8007292:	462a      	mov	r2, r5
 8007294:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007298:	5d06      	ldrb	r6, [r0, r4]
 800729a:	f016 0608 	ands.w	r6, r6, #8
 800729e:	d1f8      	bne.n	8007292 <_strtol_l.constprop.0+0x22>
 80072a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80072a2:	d12d      	bne.n	8007300 <_strtol_l.constprop.0+0x90>
 80072a4:	782c      	ldrb	r4, [r5, #0]
 80072a6:	2601      	movs	r6, #1
 80072a8:	1c95      	adds	r5, r2, #2
 80072aa:	f033 0210 	bics.w	r2, r3, #16
 80072ae:	d109      	bne.n	80072c4 <_strtol_l.constprop.0+0x54>
 80072b0:	2c30      	cmp	r4, #48	@ 0x30
 80072b2:	d12a      	bne.n	800730a <_strtol_l.constprop.0+0x9a>
 80072b4:	782a      	ldrb	r2, [r5, #0]
 80072b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072ba:	2a58      	cmp	r2, #88	@ 0x58
 80072bc:	d125      	bne.n	800730a <_strtol_l.constprop.0+0x9a>
 80072be:	786c      	ldrb	r4, [r5, #1]
 80072c0:	2310      	movs	r3, #16
 80072c2:	3502      	adds	r5, #2
 80072c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072cc:	2200      	movs	r2, #0
 80072ce:	fbbc f9f3 	udiv	r9, ip, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80072d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072dc:	2f09      	cmp	r7, #9
 80072de:	d81b      	bhi.n	8007318 <_strtol_l.constprop.0+0xa8>
 80072e0:	463c      	mov	r4, r7
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	dd27      	ble.n	8007336 <_strtol_l.constprop.0+0xc6>
 80072e6:	1c57      	adds	r7, r2, #1
 80072e8:	d007      	beq.n	80072fa <_strtol_l.constprop.0+0x8a>
 80072ea:	4581      	cmp	r9, r0
 80072ec:	d320      	bcc.n	8007330 <_strtol_l.constprop.0+0xc0>
 80072ee:	d101      	bne.n	80072f4 <_strtol_l.constprop.0+0x84>
 80072f0:	45a2      	cmp	sl, r4
 80072f2:	db1d      	blt.n	8007330 <_strtol_l.constprop.0+0xc0>
 80072f4:	fb00 4003 	mla	r0, r0, r3, r4
 80072f8:	2201      	movs	r2, #1
 80072fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072fe:	e7eb      	b.n	80072d8 <_strtol_l.constprop.0+0x68>
 8007300:	2c2b      	cmp	r4, #43	@ 0x2b
 8007302:	bf04      	itt	eq
 8007304:	782c      	ldrbeq	r4, [r5, #0]
 8007306:	1c95      	addeq	r5, r2, #2
 8007308:	e7cf      	b.n	80072aa <_strtol_l.constprop.0+0x3a>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1da      	bne.n	80072c4 <_strtol_l.constprop.0+0x54>
 800730e:	2c30      	cmp	r4, #48	@ 0x30
 8007310:	bf0c      	ite	eq
 8007312:	2308      	moveq	r3, #8
 8007314:	230a      	movne	r3, #10
 8007316:	e7d5      	b.n	80072c4 <_strtol_l.constprop.0+0x54>
 8007318:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800731c:	2f19      	cmp	r7, #25
 800731e:	d801      	bhi.n	8007324 <_strtol_l.constprop.0+0xb4>
 8007320:	3c37      	subs	r4, #55	@ 0x37
 8007322:	e7de      	b.n	80072e2 <_strtol_l.constprop.0+0x72>
 8007324:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007328:	2f19      	cmp	r7, #25
 800732a:	d804      	bhi.n	8007336 <_strtol_l.constprop.0+0xc6>
 800732c:	3c57      	subs	r4, #87	@ 0x57
 800732e:	e7d8      	b.n	80072e2 <_strtol_l.constprop.0+0x72>
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	e7e1      	b.n	80072fa <_strtol_l.constprop.0+0x8a>
 8007336:	1c53      	adds	r3, r2, #1
 8007338:	d108      	bne.n	800734c <_strtol_l.constprop.0+0xdc>
 800733a:	2322      	movs	r3, #34	@ 0x22
 800733c:	f8ce 3000 	str.w	r3, [lr]
 8007340:	4660      	mov	r0, ip
 8007342:	f1b8 0f00 	cmp.w	r8, #0
 8007346:	d0a0      	beq.n	800728a <_strtol_l.constprop.0+0x1a>
 8007348:	1e69      	subs	r1, r5, #1
 800734a:	e006      	b.n	800735a <_strtol_l.constprop.0+0xea>
 800734c:	b106      	cbz	r6, 8007350 <_strtol_l.constprop.0+0xe0>
 800734e:	4240      	negs	r0, r0
 8007350:	f1b8 0f00 	cmp.w	r8, #0
 8007354:	d099      	beq.n	800728a <_strtol_l.constprop.0+0x1a>
 8007356:	2a00      	cmp	r2, #0
 8007358:	d1f6      	bne.n	8007348 <_strtol_l.constprop.0+0xd8>
 800735a:	f8c8 1000 	str.w	r1, [r8]
 800735e:	e794      	b.n	800728a <_strtol_l.constprop.0+0x1a>
 8007360:	08011ed5 	.word	0x08011ed5

08007364 <strtol>:
 8007364:	4613      	mov	r3, r2
 8007366:	460a      	mov	r2, r1
 8007368:	4601      	mov	r1, r0
 800736a:	4802      	ldr	r0, [pc, #8]	@ (8007374 <strtol+0x10>)
 800736c:	6800      	ldr	r0, [r0, #0]
 800736e:	f7ff bf7f 	b.w	8007270 <_strtol_l.constprop.0>
 8007372:	bf00      	nop
 8007374:	20000220 	.word	0x20000220

08007378 <_strtoul_l.constprop.0>:
 8007378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800737c:	4e34      	ldr	r6, [pc, #208]	@ (8007450 <_strtoul_l.constprop.0+0xd8>)
 800737e:	4686      	mov	lr, r0
 8007380:	460d      	mov	r5, r1
 8007382:	4628      	mov	r0, r5
 8007384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007388:	5d37      	ldrb	r7, [r6, r4]
 800738a:	f017 0708 	ands.w	r7, r7, #8
 800738e:	d1f8      	bne.n	8007382 <_strtoul_l.constprop.0+0xa>
 8007390:	2c2d      	cmp	r4, #45	@ 0x2d
 8007392:	d12f      	bne.n	80073f4 <_strtoul_l.constprop.0+0x7c>
 8007394:	782c      	ldrb	r4, [r5, #0]
 8007396:	2701      	movs	r7, #1
 8007398:	1c85      	adds	r5, r0, #2
 800739a:	f033 0010 	bics.w	r0, r3, #16
 800739e:	d109      	bne.n	80073b4 <_strtoul_l.constprop.0+0x3c>
 80073a0:	2c30      	cmp	r4, #48	@ 0x30
 80073a2:	d12c      	bne.n	80073fe <_strtoul_l.constprop.0+0x86>
 80073a4:	7828      	ldrb	r0, [r5, #0]
 80073a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80073aa:	2858      	cmp	r0, #88	@ 0x58
 80073ac:	d127      	bne.n	80073fe <_strtoul_l.constprop.0+0x86>
 80073ae:	786c      	ldrb	r4, [r5, #1]
 80073b0:	2310      	movs	r3, #16
 80073b2:	3502      	adds	r5, #2
 80073b4:	f04f 38ff 	mov.w	r8, #4294967295
 80073b8:	2600      	movs	r6, #0
 80073ba:	fbb8 f8f3 	udiv	r8, r8, r3
 80073be:	fb03 f908 	mul.w	r9, r3, r8
 80073c2:	ea6f 0909 	mvn.w	r9, r9
 80073c6:	4630      	mov	r0, r6
 80073c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80073cc:	f1bc 0f09 	cmp.w	ip, #9
 80073d0:	d81c      	bhi.n	800740c <_strtoul_l.constprop.0+0x94>
 80073d2:	4664      	mov	r4, ip
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	dd2a      	ble.n	800742e <_strtoul_l.constprop.0+0xb6>
 80073d8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80073dc:	d007      	beq.n	80073ee <_strtoul_l.constprop.0+0x76>
 80073de:	4580      	cmp	r8, r0
 80073e0:	d322      	bcc.n	8007428 <_strtoul_l.constprop.0+0xb0>
 80073e2:	d101      	bne.n	80073e8 <_strtoul_l.constprop.0+0x70>
 80073e4:	45a1      	cmp	r9, r4
 80073e6:	db1f      	blt.n	8007428 <_strtoul_l.constprop.0+0xb0>
 80073e8:	fb00 4003 	mla	r0, r0, r3, r4
 80073ec:	2601      	movs	r6, #1
 80073ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073f2:	e7e9      	b.n	80073c8 <_strtoul_l.constprop.0+0x50>
 80073f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80073f6:	bf04      	itt	eq
 80073f8:	782c      	ldrbeq	r4, [r5, #0]
 80073fa:	1c85      	addeq	r5, r0, #2
 80073fc:	e7cd      	b.n	800739a <_strtoul_l.constprop.0+0x22>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1d8      	bne.n	80073b4 <_strtoul_l.constprop.0+0x3c>
 8007402:	2c30      	cmp	r4, #48	@ 0x30
 8007404:	bf0c      	ite	eq
 8007406:	2308      	moveq	r3, #8
 8007408:	230a      	movne	r3, #10
 800740a:	e7d3      	b.n	80073b4 <_strtoul_l.constprop.0+0x3c>
 800740c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007410:	f1bc 0f19 	cmp.w	ip, #25
 8007414:	d801      	bhi.n	800741a <_strtoul_l.constprop.0+0xa2>
 8007416:	3c37      	subs	r4, #55	@ 0x37
 8007418:	e7dc      	b.n	80073d4 <_strtoul_l.constprop.0+0x5c>
 800741a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800741e:	f1bc 0f19 	cmp.w	ip, #25
 8007422:	d804      	bhi.n	800742e <_strtoul_l.constprop.0+0xb6>
 8007424:	3c57      	subs	r4, #87	@ 0x57
 8007426:	e7d5      	b.n	80073d4 <_strtoul_l.constprop.0+0x5c>
 8007428:	f04f 36ff 	mov.w	r6, #4294967295
 800742c:	e7df      	b.n	80073ee <_strtoul_l.constprop.0+0x76>
 800742e:	1c73      	adds	r3, r6, #1
 8007430:	d106      	bne.n	8007440 <_strtoul_l.constprop.0+0xc8>
 8007432:	2322      	movs	r3, #34	@ 0x22
 8007434:	f8ce 3000 	str.w	r3, [lr]
 8007438:	4630      	mov	r0, r6
 800743a:	b932      	cbnz	r2, 800744a <_strtoul_l.constprop.0+0xd2>
 800743c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007440:	b107      	cbz	r7, 8007444 <_strtoul_l.constprop.0+0xcc>
 8007442:	4240      	negs	r0, r0
 8007444:	2a00      	cmp	r2, #0
 8007446:	d0f9      	beq.n	800743c <_strtoul_l.constprop.0+0xc4>
 8007448:	b106      	cbz	r6, 800744c <_strtoul_l.constprop.0+0xd4>
 800744a:	1e69      	subs	r1, r5, #1
 800744c:	6011      	str	r1, [r2, #0]
 800744e:	e7f5      	b.n	800743c <_strtoul_l.constprop.0+0xc4>
 8007450:	08011ed5 	.word	0x08011ed5

08007454 <strtoul>:
 8007454:	4613      	mov	r3, r2
 8007456:	460a      	mov	r2, r1
 8007458:	4601      	mov	r1, r0
 800745a:	4802      	ldr	r0, [pc, #8]	@ (8007464 <strtoul+0x10>)
 800745c:	6800      	ldr	r0, [r0, #0]
 800745e:	f7ff bf8b 	b.w	8007378 <_strtoul_l.constprop.0>
 8007462:	bf00      	nop
 8007464:	20000220 	.word	0x20000220

08007468 <__sflush_r>:
 8007468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007470:	0716      	lsls	r6, r2, #28
 8007472:	4605      	mov	r5, r0
 8007474:	460c      	mov	r4, r1
 8007476:	d454      	bmi.n	8007522 <__sflush_r+0xba>
 8007478:	684b      	ldr	r3, [r1, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	dc02      	bgt.n	8007484 <__sflush_r+0x1c>
 800747e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	dd48      	ble.n	8007516 <__sflush_r+0xae>
 8007484:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007486:	2e00      	cmp	r6, #0
 8007488:	d045      	beq.n	8007516 <__sflush_r+0xae>
 800748a:	2300      	movs	r3, #0
 800748c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007490:	682f      	ldr	r7, [r5, #0]
 8007492:	6a21      	ldr	r1, [r4, #32]
 8007494:	602b      	str	r3, [r5, #0]
 8007496:	d030      	beq.n	80074fa <__sflush_r+0x92>
 8007498:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0759      	lsls	r1, r3, #29
 800749e:	d505      	bpl.n	80074ac <__sflush_r+0x44>
 80074a0:	6863      	ldr	r3, [r4, #4]
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074a6:	b10b      	cbz	r3, 80074ac <__sflush_r+0x44>
 80074a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b0      	blx	r6
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	d106      	bne.n	80074ca <__sflush_r+0x62>
 80074bc:	6829      	ldr	r1, [r5, #0]
 80074be:	291d      	cmp	r1, #29
 80074c0:	d82b      	bhi.n	800751a <__sflush_r+0xb2>
 80074c2:	4a2a      	ldr	r2, [pc, #168]	@ (800756c <__sflush_r+0x104>)
 80074c4:	410a      	asrs	r2, r1
 80074c6:	07d6      	lsls	r6, r2, #31
 80074c8:	d427      	bmi.n	800751a <__sflush_r+0xb2>
 80074ca:	2200      	movs	r2, #0
 80074cc:	6062      	str	r2, [r4, #4]
 80074ce:	04d9      	lsls	r1, r3, #19
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	6022      	str	r2, [r4, #0]
 80074d4:	d504      	bpl.n	80074e0 <__sflush_r+0x78>
 80074d6:	1c42      	adds	r2, r0, #1
 80074d8:	d101      	bne.n	80074de <__sflush_r+0x76>
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	b903      	cbnz	r3, 80074e0 <__sflush_r+0x78>
 80074de:	6560      	str	r0, [r4, #84]	@ 0x54
 80074e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074e2:	602f      	str	r7, [r5, #0]
 80074e4:	b1b9      	cbz	r1, 8007516 <__sflush_r+0xae>
 80074e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d002      	beq.n	80074f4 <__sflush_r+0x8c>
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 fb2e 	bl	8007b50 <_free_r>
 80074f4:	2300      	movs	r3, #0
 80074f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80074f8:	e00d      	b.n	8007516 <__sflush_r+0xae>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b0      	blx	r6
 8007500:	4602      	mov	r2, r0
 8007502:	1c50      	adds	r0, r2, #1
 8007504:	d1c9      	bne.n	800749a <__sflush_r+0x32>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0c6      	beq.n	800749a <__sflush_r+0x32>
 800750c:	2b1d      	cmp	r3, #29
 800750e:	d001      	beq.n	8007514 <__sflush_r+0xac>
 8007510:	2b16      	cmp	r3, #22
 8007512:	d11e      	bne.n	8007552 <__sflush_r+0xea>
 8007514:	602f      	str	r7, [r5, #0]
 8007516:	2000      	movs	r0, #0
 8007518:	e022      	b.n	8007560 <__sflush_r+0xf8>
 800751a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800751e:	b21b      	sxth	r3, r3
 8007520:	e01b      	b.n	800755a <__sflush_r+0xf2>
 8007522:	690f      	ldr	r7, [r1, #16]
 8007524:	2f00      	cmp	r7, #0
 8007526:	d0f6      	beq.n	8007516 <__sflush_r+0xae>
 8007528:	0793      	lsls	r3, r2, #30
 800752a:	680e      	ldr	r6, [r1, #0]
 800752c:	bf08      	it	eq
 800752e:	694b      	ldreq	r3, [r1, #20]
 8007530:	600f      	str	r7, [r1, #0]
 8007532:	bf18      	it	ne
 8007534:	2300      	movne	r3, #0
 8007536:	eba6 0807 	sub.w	r8, r6, r7
 800753a:	608b      	str	r3, [r1, #8]
 800753c:	f1b8 0f00 	cmp.w	r8, #0
 8007540:	dde9      	ble.n	8007516 <__sflush_r+0xae>
 8007542:	6a21      	ldr	r1, [r4, #32]
 8007544:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007546:	4643      	mov	r3, r8
 8007548:	463a      	mov	r2, r7
 800754a:	4628      	mov	r0, r5
 800754c:	47b0      	blx	r6
 800754e:	2800      	cmp	r0, #0
 8007550:	dc08      	bgt.n	8007564 <__sflush_r+0xfc>
 8007552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755a:	81a3      	strh	r3, [r4, #12]
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007564:	4407      	add	r7, r0
 8007566:	eba8 0800 	sub.w	r8, r8, r0
 800756a:	e7e7      	b.n	800753c <__sflush_r+0xd4>
 800756c:	dfbffffe 	.word	0xdfbffffe

08007570 <_fflush_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	690b      	ldr	r3, [r1, #16]
 8007574:	4605      	mov	r5, r0
 8007576:	460c      	mov	r4, r1
 8007578:	b913      	cbnz	r3, 8007580 <_fflush_r+0x10>
 800757a:	2500      	movs	r5, #0
 800757c:	4628      	mov	r0, r5
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	b118      	cbz	r0, 800758a <_fflush_r+0x1a>
 8007582:	6a03      	ldr	r3, [r0, #32]
 8007584:	b90b      	cbnz	r3, 800758a <_fflush_r+0x1a>
 8007586:	f000 f8a7 	bl	80076d8 <__sinit>
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0f3      	beq.n	800757a <_fflush_r+0xa>
 8007592:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007594:	07d0      	lsls	r0, r2, #31
 8007596:	d404      	bmi.n	80075a2 <_fflush_r+0x32>
 8007598:	0599      	lsls	r1, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_fflush_r+0x32>
 800759c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800759e:	f000 faa8 	bl	8007af2 <__retarget_lock_acquire_recursive>
 80075a2:	4628      	mov	r0, r5
 80075a4:	4621      	mov	r1, r4
 80075a6:	f7ff ff5f 	bl	8007468 <__sflush_r>
 80075aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075ac:	07da      	lsls	r2, r3, #31
 80075ae:	4605      	mov	r5, r0
 80075b0:	d4e4      	bmi.n	800757c <_fflush_r+0xc>
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	059b      	lsls	r3, r3, #22
 80075b6:	d4e1      	bmi.n	800757c <_fflush_r+0xc>
 80075b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ba:	f000 fa9b 	bl	8007af4 <__retarget_lock_release_recursive>
 80075be:	e7dd      	b.n	800757c <_fflush_r+0xc>

080075c0 <std>:
 80075c0:	2300      	movs	r3, #0
 80075c2:	b510      	push	{r4, lr}
 80075c4:	4604      	mov	r4, r0
 80075c6:	e9c0 3300 	strd	r3, r3, [r0]
 80075ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ce:	6083      	str	r3, [r0, #8]
 80075d0:	8181      	strh	r1, [r0, #12]
 80075d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80075d4:	81c2      	strh	r2, [r0, #14]
 80075d6:	6183      	str	r3, [r0, #24]
 80075d8:	4619      	mov	r1, r3
 80075da:	2208      	movs	r2, #8
 80075dc:	305c      	adds	r0, #92	@ 0x5c
 80075de:	f000 f981 	bl	80078e4 <memset>
 80075e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007618 <std+0x58>)
 80075e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <std+0x5c>)
 80075e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <std+0x60>)
 80075ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <std+0x64>)
 80075f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <std+0x68>)
 80075f4:	6224      	str	r4, [r4, #32]
 80075f6:	429c      	cmp	r4, r3
 80075f8:	d006      	beq.n	8007608 <std+0x48>
 80075fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075fe:	4294      	cmp	r4, r2
 8007600:	d002      	beq.n	8007608 <std+0x48>
 8007602:	33d0      	adds	r3, #208	@ 0xd0
 8007604:	429c      	cmp	r4, r3
 8007606:	d105      	bne.n	8007614 <std+0x54>
 8007608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007610:	f000 ba6e 	b.w	8007af0 <__retarget_lock_init_recursive>
 8007614:	bd10      	pop	{r4, pc}
 8007616:	bf00      	nop
 8007618:	080077ad 	.word	0x080077ad
 800761c:	080077cf 	.word	0x080077cf
 8007620:	08007807 	.word	0x08007807
 8007624:	0800782b 	.word	0x0800782b
 8007628:	2000ae44 	.word	0x2000ae44

0800762c <stdio_exit_handler>:
 800762c:	4a02      	ldr	r2, [pc, #8]	@ (8007638 <stdio_exit_handler+0xc>)
 800762e:	4903      	ldr	r1, [pc, #12]	@ (800763c <stdio_exit_handler+0x10>)
 8007630:	4803      	ldr	r0, [pc, #12]	@ (8007640 <stdio_exit_handler+0x14>)
 8007632:	f000 b869 	b.w	8007708 <_fwalk_sglue>
 8007636:	bf00      	nop
 8007638:	20000214 	.word	0x20000214
 800763c:	08007571 	.word	0x08007571
 8007640:	20000224 	.word	0x20000224

08007644 <cleanup_stdio>:
 8007644:	6841      	ldr	r1, [r0, #4]
 8007646:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <cleanup_stdio+0x34>)
 8007648:	4299      	cmp	r1, r3
 800764a:	b510      	push	{r4, lr}
 800764c:	4604      	mov	r4, r0
 800764e:	d001      	beq.n	8007654 <cleanup_stdio+0x10>
 8007650:	f7ff ff8e 	bl	8007570 <_fflush_r>
 8007654:	68a1      	ldr	r1, [r4, #8]
 8007656:	4b09      	ldr	r3, [pc, #36]	@ (800767c <cleanup_stdio+0x38>)
 8007658:	4299      	cmp	r1, r3
 800765a:	d002      	beq.n	8007662 <cleanup_stdio+0x1e>
 800765c:	4620      	mov	r0, r4
 800765e:	f7ff ff87 	bl	8007570 <_fflush_r>
 8007662:	68e1      	ldr	r1, [r4, #12]
 8007664:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <cleanup_stdio+0x3c>)
 8007666:	4299      	cmp	r1, r3
 8007668:	d004      	beq.n	8007674 <cleanup_stdio+0x30>
 800766a:	4620      	mov	r0, r4
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	f7ff bf7e 	b.w	8007570 <_fflush_r>
 8007674:	bd10      	pop	{r4, pc}
 8007676:	bf00      	nop
 8007678:	2000ae44 	.word	0x2000ae44
 800767c:	2000aeac 	.word	0x2000aeac
 8007680:	2000af14 	.word	0x2000af14

08007684 <global_stdio_init.part.0>:
 8007684:	b510      	push	{r4, lr}
 8007686:	4b0b      	ldr	r3, [pc, #44]	@ (80076b4 <global_stdio_init.part.0+0x30>)
 8007688:	4c0b      	ldr	r4, [pc, #44]	@ (80076b8 <global_stdio_init.part.0+0x34>)
 800768a:	4a0c      	ldr	r2, [pc, #48]	@ (80076bc <global_stdio_init.part.0+0x38>)
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	4620      	mov	r0, r4
 8007690:	2200      	movs	r2, #0
 8007692:	2104      	movs	r1, #4
 8007694:	f7ff ff94 	bl	80075c0 <std>
 8007698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800769c:	2201      	movs	r2, #1
 800769e:	2109      	movs	r1, #9
 80076a0:	f7ff ff8e 	bl	80075c0 <std>
 80076a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076a8:	2202      	movs	r2, #2
 80076aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ae:	2112      	movs	r1, #18
 80076b0:	f7ff bf86 	b.w	80075c0 <std>
 80076b4:	2000af7c 	.word	0x2000af7c
 80076b8:	2000ae44 	.word	0x2000ae44
 80076bc:	0800762d 	.word	0x0800762d

080076c0 <__sfp_lock_acquire>:
 80076c0:	4801      	ldr	r0, [pc, #4]	@ (80076c8 <__sfp_lock_acquire+0x8>)
 80076c2:	f000 ba16 	b.w	8007af2 <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	2000af85 	.word	0x2000af85

080076cc <__sfp_lock_release>:
 80076cc:	4801      	ldr	r0, [pc, #4]	@ (80076d4 <__sfp_lock_release+0x8>)
 80076ce:	f000 ba11 	b.w	8007af4 <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	2000af85 	.word	0x2000af85

080076d8 <__sinit>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	4604      	mov	r4, r0
 80076dc:	f7ff fff0 	bl	80076c0 <__sfp_lock_acquire>
 80076e0:	6a23      	ldr	r3, [r4, #32]
 80076e2:	b11b      	cbz	r3, 80076ec <__sinit+0x14>
 80076e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e8:	f7ff bff0 	b.w	80076cc <__sfp_lock_release>
 80076ec:	4b04      	ldr	r3, [pc, #16]	@ (8007700 <__sinit+0x28>)
 80076ee:	6223      	str	r3, [r4, #32]
 80076f0:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <__sinit+0x2c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f5      	bne.n	80076e4 <__sinit+0xc>
 80076f8:	f7ff ffc4 	bl	8007684 <global_stdio_init.part.0>
 80076fc:	e7f2      	b.n	80076e4 <__sinit+0xc>
 80076fe:	bf00      	nop
 8007700:	08007645 	.word	0x08007645
 8007704:	2000af7c 	.word	0x2000af7c

08007708 <_fwalk_sglue>:
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800770c:	4607      	mov	r7, r0
 800770e:	4688      	mov	r8, r1
 8007710:	4614      	mov	r4, r2
 8007712:	2600      	movs	r6, #0
 8007714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007718:	f1b9 0901 	subs.w	r9, r9, #1
 800771c:	d505      	bpl.n	800772a <_fwalk_sglue+0x22>
 800771e:	6824      	ldr	r4, [r4, #0]
 8007720:	2c00      	cmp	r4, #0
 8007722:	d1f7      	bne.n	8007714 <_fwalk_sglue+0xc>
 8007724:	4630      	mov	r0, r6
 8007726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d907      	bls.n	8007740 <_fwalk_sglue+0x38>
 8007730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007734:	3301      	adds	r3, #1
 8007736:	d003      	beq.n	8007740 <_fwalk_sglue+0x38>
 8007738:	4629      	mov	r1, r5
 800773a:	4638      	mov	r0, r7
 800773c:	47c0      	blx	r8
 800773e:	4306      	orrs	r6, r0
 8007740:	3568      	adds	r5, #104	@ 0x68
 8007742:	e7e9      	b.n	8007718 <_fwalk_sglue+0x10>

08007744 <sniprintf>:
 8007744:	b40c      	push	{r2, r3}
 8007746:	b530      	push	{r4, r5, lr}
 8007748:	4b17      	ldr	r3, [pc, #92]	@ (80077a8 <sniprintf+0x64>)
 800774a:	1e0c      	subs	r4, r1, #0
 800774c:	681d      	ldr	r5, [r3, #0]
 800774e:	b09d      	sub	sp, #116	@ 0x74
 8007750:	da08      	bge.n	8007764 <sniprintf+0x20>
 8007752:	238b      	movs	r3, #139	@ 0x8b
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	b01d      	add	sp, #116	@ 0x74
 800775c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007760:	b002      	add	sp, #8
 8007762:	4770      	bx	lr
 8007764:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007768:	f8ad 3014 	strh.w	r3, [sp, #20]
 800776c:	bf14      	ite	ne
 800776e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007772:	4623      	moveq	r3, r4
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	9307      	str	r3, [sp, #28]
 8007778:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800777c:	9002      	str	r0, [sp, #8]
 800777e:	9006      	str	r0, [sp, #24]
 8007780:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007784:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007786:	ab21      	add	r3, sp, #132	@ 0x84
 8007788:	a902      	add	r1, sp, #8
 800778a:	4628      	mov	r0, r5
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	f000 fb3b 	bl	8007e08 <_svfiprintf_r>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	bfbc      	itt	lt
 8007796:	238b      	movlt	r3, #139	@ 0x8b
 8007798:	602b      	strlt	r3, [r5, #0]
 800779a:	2c00      	cmp	r4, #0
 800779c:	d0dd      	beq.n	800775a <sniprintf+0x16>
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e7d9      	b.n	800775a <sniprintf+0x16>
 80077a6:	bf00      	nop
 80077a8:	20000220 	.word	0x20000220

080077ac <__sread>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	460c      	mov	r4, r1
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	f000 f94e 	bl	8007a54 <_read_r>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	bfab      	itete	ge
 80077bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077be:	89a3      	ldrhlt	r3, [r4, #12]
 80077c0:	181b      	addge	r3, r3, r0
 80077c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077c6:	bfac      	ite	ge
 80077c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077ca:	81a3      	strhlt	r3, [r4, #12]
 80077cc:	bd10      	pop	{r4, pc}

080077ce <__swrite>:
 80077ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d2:	461f      	mov	r7, r3
 80077d4:	898b      	ldrh	r3, [r1, #12]
 80077d6:	05db      	lsls	r3, r3, #23
 80077d8:	4605      	mov	r5, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	4616      	mov	r6, r2
 80077de:	d505      	bpl.n	80077ec <__swrite+0x1e>
 80077e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e4:	2302      	movs	r3, #2
 80077e6:	2200      	movs	r2, #0
 80077e8:	f000 f922 	bl	8007a30 <_lseek_r>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	4632      	mov	r2, r6
 80077fa:	463b      	mov	r3, r7
 80077fc:	4628      	mov	r0, r5
 80077fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007802:	f000 b939 	b.w	8007a78 <_write_r>

08007806 <__sseek>:
 8007806:	b510      	push	{r4, lr}
 8007808:	460c      	mov	r4, r1
 800780a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780e:	f000 f90f 	bl	8007a30 <_lseek_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	bf15      	itete	ne
 8007818:	6560      	strne	r0, [r4, #84]	@ 0x54
 800781a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800781e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007822:	81a3      	strheq	r3, [r4, #12]
 8007824:	bf18      	it	ne
 8007826:	81a3      	strhne	r3, [r4, #12]
 8007828:	bd10      	pop	{r4, pc}

0800782a <__sclose>:
 800782a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782e:	f000 b8ef 	b.w	8007a10 <_close_r>

08007832 <_vsniprintf_r>:
 8007832:	b530      	push	{r4, r5, lr}
 8007834:	4614      	mov	r4, r2
 8007836:	2c00      	cmp	r4, #0
 8007838:	b09b      	sub	sp, #108	@ 0x6c
 800783a:	4605      	mov	r5, r0
 800783c:	461a      	mov	r2, r3
 800783e:	da05      	bge.n	800784c <_vsniprintf_r+0x1a>
 8007840:	238b      	movs	r3, #139	@ 0x8b
 8007842:	6003      	str	r3, [r0, #0]
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	b01b      	add	sp, #108	@ 0x6c
 800784a:	bd30      	pop	{r4, r5, pc}
 800784c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007850:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007854:	bf14      	ite	ne
 8007856:	f104 33ff 	addne.w	r3, r4, #4294967295
 800785a:	4623      	moveq	r3, r4
 800785c:	9302      	str	r3, [sp, #8]
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007864:	9100      	str	r1, [sp, #0]
 8007866:	9104      	str	r1, [sp, #16]
 8007868:	f8ad 300e 	strh.w	r3, [sp, #14]
 800786c:	4669      	mov	r1, sp
 800786e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007870:	f000 faca 	bl	8007e08 <_svfiprintf_r>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	bfbc      	itt	lt
 8007878:	238b      	movlt	r3, #139	@ 0x8b
 800787a:	602b      	strlt	r3, [r5, #0]
 800787c:	2c00      	cmp	r4, #0
 800787e:	d0e3      	beq.n	8007848 <_vsniprintf_r+0x16>
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	e7df      	b.n	8007848 <_vsniprintf_r+0x16>

08007888 <vsniprintf>:
 8007888:	b507      	push	{r0, r1, r2, lr}
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	460a      	mov	r2, r1
 8007890:	4601      	mov	r1, r0
 8007892:	4803      	ldr	r0, [pc, #12]	@ (80078a0 <vsniprintf+0x18>)
 8007894:	6800      	ldr	r0, [r0, #0]
 8007896:	f7ff ffcc 	bl	8007832 <_vsniprintf_r>
 800789a:	b003      	add	sp, #12
 800789c:	f85d fb04 	ldr.w	pc, [sp], #4
 80078a0:	20000220 	.word	0x20000220

080078a4 <_vsiprintf_r>:
 80078a4:	b500      	push	{lr}
 80078a6:	b09b      	sub	sp, #108	@ 0x6c
 80078a8:	9100      	str	r1, [sp, #0]
 80078aa:	9104      	str	r1, [sp, #16]
 80078ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	9102      	str	r1, [sp, #8]
 80078b4:	4905      	ldr	r1, [pc, #20]	@ (80078cc <_vsiprintf_r+0x28>)
 80078b6:	9103      	str	r1, [sp, #12]
 80078b8:	4669      	mov	r1, sp
 80078ba:	f000 faa5 	bl	8007e08 <_svfiprintf_r>
 80078be:	9b00      	ldr	r3, [sp, #0]
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	b01b      	add	sp, #108	@ 0x6c
 80078c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80078ca:	bf00      	nop
 80078cc:	ffff0208 	.word	0xffff0208

080078d0 <vsiprintf>:
 80078d0:	4613      	mov	r3, r2
 80078d2:	460a      	mov	r2, r1
 80078d4:	4601      	mov	r1, r0
 80078d6:	4802      	ldr	r0, [pc, #8]	@ (80078e0 <vsiprintf+0x10>)
 80078d8:	6800      	ldr	r0, [r0, #0]
 80078da:	f7ff bfe3 	b.w	80078a4 <_vsiprintf_r>
 80078de:	bf00      	nop
 80078e0:	20000220 	.word	0x20000220

080078e4 <memset>:
 80078e4:	4402      	add	r2, r0
 80078e6:	4603      	mov	r3, r0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	f803 1b01 	strb.w	r1, [r3], #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <strchr>:
 80078f4:	b2c9      	uxtb	r1, r1
 80078f6:	4603      	mov	r3, r0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078fe:	b112      	cbz	r2, 8007906 <strchr+0x12>
 8007900:	428a      	cmp	r2, r1
 8007902:	d1f9      	bne.n	80078f8 <strchr+0x4>
 8007904:	4770      	bx	lr
 8007906:	2900      	cmp	r1, #0
 8007908:	bf18      	it	ne
 800790a:	2000      	movne	r0, #0
 800790c:	4770      	bx	lr

0800790e <strncmp>:
 800790e:	b510      	push	{r4, lr}
 8007910:	b16a      	cbz	r2, 800792e <strncmp+0x20>
 8007912:	3901      	subs	r1, #1
 8007914:	1884      	adds	r4, r0, r2
 8007916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800791a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800791e:	429a      	cmp	r2, r3
 8007920:	d103      	bne.n	800792a <strncmp+0x1c>
 8007922:	42a0      	cmp	r0, r4
 8007924:	d001      	beq.n	800792a <strncmp+0x1c>
 8007926:	2a00      	cmp	r2, #0
 8007928:	d1f5      	bne.n	8007916 <strncmp+0x8>
 800792a:	1ad0      	subs	r0, r2, r3
 800792c:	bd10      	pop	{r4, pc}
 800792e:	4610      	mov	r0, r2
 8007930:	e7fc      	b.n	800792c <strncmp+0x1e>

08007932 <strncpy>:
 8007932:	b510      	push	{r4, lr}
 8007934:	3901      	subs	r1, #1
 8007936:	4603      	mov	r3, r0
 8007938:	b132      	cbz	r2, 8007948 <strncpy+0x16>
 800793a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800793e:	f803 4b01 	strb.w	r4, [r3], #1
 8007942:	3a01      	subs	r2, #1
 8007944:	2c00      	cmp	r4, #0
 8007946:	d1f7      	bne.n	8007938 <strncpy+0x6>
 8007948:	441a      	add	r2, r3
 800794a:	2100      	movs	r1, #0
 800794c:	4293      	cmp	r3, r2
 800794e:	d100      	bne.n	8007952 <strncpy+0x20>
 8007950:	bd10      	pop	{r4, pc}
 8007952:	f803 1b01 	strb.w	r1, [r3], #1
 8007956:	e7f9      	b.n	800794c <strncpy+0x1a>

08007958 <strtok>:
 8007958:	4b16      	ldr	r3, [pc, #88]	@ (80079b4 <strtok+0x5c>)
 800795a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795e:	681f      	ldr	r7, [r3, #0]
 8007960:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007962:	4605      	mov	r5, r0
 8007964:	460e      	mov	r6, r1
 8007966:	b9ec      	cbnz	r4, 80079a4 <strtok+0x4c>
 8007968:	2050      	movs	r0, #80	@ 0x50
 800796a:	f000 f93b 	bl	8007be4 <malloc>
 800796e:	4602      	mov	r2, r0
 8007970:	6478      	str	r0, [r7, #68]	@ 0x44
 8007972:	b920      	cbnz	r0, 800797e <strtok+0x26>
 8007974:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <strtok+0x60>)
 8007976:	4811      	ldr	r0, [pc, #68]	@ (80079bc <strtok+0x64>)
 8007978:	215b      	movs	r1, #91	@ 0x5b
 800797a:	f000 f8cb 	bl	8007b14 <__assert_func>
 800797e:	e9c0 4400 	strd	r4, r4, [r0]
 8007982:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007986:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800798a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800798e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007992:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007996:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800799a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800799e:	6184      	str	r4, [r0, #24]
 80079a0:	7704      	strb	r4, [r0, #28]
 80079a2:	6244      	str	r4, [r0, #36]	@ 0x24
 80079a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	2301      	movs	r3, #1
 80079ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	f000 b806 	b.w	80079c0 <__strtok_r>
 80079b4:	20000220 	.word	0x20000220
 80079b8:	08011fd5 	.word	0x08011fd5
 80079bc:	08011fec 	.word	0x08011fec

080079c0 <__strtok_r>:
 80079c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c2:	4604      	mov	r4, r0
 80079c4:	b908      	cbnz	r0, 80079ca <__strtok_r+0xa>
 80079c6:	6814      	ldr	r4, [r2, #0]
 80079c8:	b144      	cbz	r4, 80079dc <__strtok_r+0x1c>
 80079ca:	4620      	mov	r0, r4
 80079cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079d0:	460f      	mov	r7, r1
 80079d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079d6:	b91e      	cbnz	r6, 80079e0 <__strtok_r+0x20>
 80079d8:	b965      	cbnz	r5, 80079f4 <__strtok_r+0x34>
 80079da:	6015      	str	r5, [r2, #0]
 80079dc:	2000      	movs	r0, #0
 80079de:	e005      	b.n	80079ec <__strtok_r+0x2c>
 80079e0:	42b5      	cmp	r5, r6
 80079e2:	d1f6      	bne.n	80079d2 <__strtok_r+0x12>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f0      	bne.n	80079ca <__strtok_r+0xa>
 80079e8:	6014      	str	r4, [r2, #0]
 80079ea:	7003      	strb	r3, [r0, #0]
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ee:	461c      	mov	r4, r3
 80079f0:	e00c      	b.n	8007a0c <__strtok_r+0x4c>
 80079f2:	b915      	cbnz	r5, 80079fa <__strtok_r+0x3a>
 80079f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079f8:	460e      	mov	r6, r1
 80079fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079fe:	42ab      	cmp	r3, r5
 8007a00:	d1f7      	bne.n	80079f2 <__strtok_r+0x32>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f3      	beq.n	80079ee <__strtok_r+0x2e>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007a0c:	6014      	str	r4, [r2, #0]
 8007a0e:	e7ed      	b.n	80079ec <__strtok_r+0x2c>

08007a10 <_close_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d06      	ldr	r5, [pc, #24]	@ (8007a2c <_close_r+0x1c>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	f7fa f970 	bl	8001d00 <_close>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_close_r+0x1a>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_close_r+0x1a>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	2000af80 	.word	0x2000af80

08007a30 <_lseek_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	@ (8007a50 <_lseek_r+0x20>)
 8007a34:	4604      	mov	r4, r0
 8007a36:	4608      	mov	r0, r1
 8007a38:	4611      	mov	r1, r2
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	602a      	str	r2, [r5, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f7fa f985 	bl	8001d4e <_lseek>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_lseek_r+0x1e>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_lseek_r+0x1e>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	2000af80 	.word	0x2000af80

08007a54 <_read_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d07      	ldr	r5, [pc, #28]	@ (8007a74 <_read_r+0x20>)
 8007a58:	4604      	mov	r4, r0
 8007a5a:	4608      	mov	r0, r1
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	602a      	str	r2, [r5, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f7fa f913 	bl	8001c8e <_read>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_read_r+0x1e>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_read_r+0x1e>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	2000af80 	.word	0x2000af80

08007a78 <_write_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d07      	ldr	r5, [pc, #28]	@ (8007a98 <_write_r+0x20>)
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	602a      	str	r2, [r5, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	f7fa f91e 	bl	8001cc8 <_write>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_write_r+0x1e>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_write_r+0x1e>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	2000af80 	.word	0x2000af80

08007a9c <__errno>:
 8007a9c:	4b01      	ldr	r3, [pc, #4]	@ (8007aa4 <__errno+0x8>)
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000220 	.word	0x20000220

08007aa8 <__libc_init_array>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8007ae0 <__libc_init_array+0x38>)
 8007aac:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae4 <__libc_init_array+0x3c>)
 8007aae:	1b64      	subs	r4, r4, r5
 8007ab0:	10a4      	asrs	r4, r4, #2
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	42a6      	cmp	r6, r4
 8007ab6:	d109      	bne.n	8007acc <__libc_init_array+0x24>
 8007ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8007ae8 <__libc_init_array+0x40>)
 8007aba:	4c0c      	ldr	r4, [pc, #48]	@ (8007aec <__libc_init_array+0x44>)
 8007abc:	f000 ff44 	bl	8008948 <_init>
 8007ac0:	1b64      	subs	r4, r4, r5
 8007ac2:	10a4      	asrs	r4, r4, #2
 8007ac4:	2600      	movs	r6, #0
 8007ac6:	42a6      	cmp	r6, r4
 8007ac8:	d105      	bne.n	8007ad6 <__libc_init_array+0x2e>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad0:	4798      	blx	r3
 8007ad2:	3601      	adds	r6, #1
 8007ad4:	e7ee      	b.n	8007ab4 <__libc_init_array+0xc>
 8007ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ada:	4798      	blx	r3
 8007adc:	3601      	adds	r6, #1
 8007ade:	e7f2      	b.n	8007ac6 <__libc_init_array+0x1e>
 8007ae0:	080120c0 	.word	0x080120c0
 8007ae4:	080120c0 	.word	0x080120c0
 8007ae8:	080120c0 	.word	0x080120c0
 8007aec:	080120c4 	.word	0x080120c4

08007af0 <__retarget_lock_init_recursive>:
 8007af0:	4770      	bx	lr

08007af2 <__retarget_lock_acquire_recursive>:
 8007af2:	4770      	bx	lr

08007af4 <__retarget_lock_release_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <memcpy>:
 8007af6:	440a      	add	r2, r1
 8007af8:	4291      	cmp	r1, r2
 8007afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8007afe:	d100      	bne.n	8007b02 <memcpy+0xc>
 8007b00:	4770      	bx	lr
 8007b02:	b510      	push	{r4, lr}
 8007b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b0c:	4291      	cmp	r1, r2
 8007b0e:	d1f9      	bne.n	8007b04 <memcpy+0xe>
 8007b10:	bd10      	pop	{r4, pc}
	...

08007b14 <__assert_func>:
 8007b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b16:	4614      	mov	r4, r2
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <__assert_func+0x2c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4605      	mov	r5, r0
 8007b20:	68d8      	ldr	r0, [r3, #12]
 8007b22:	b954      	cbnz	r4, 8007b3a <__assert_func+0x26>
 8007b24:	4b07      	ldr	r3, [pc, #28]	@ (8007b44 <__assert_func+0x30>)
 8007b26:	461c      	mov	r4, r3
 8007b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b2c:	9100      	str	r1, [sp, #0]
 8007b2e:	462b      	mov	r3, r5
 8007b30:	4905      	ldr	r1, [pc, #20]	@ (8007b48 <__assert_func+0x34>)
 8007b32:	f000 fbf3 	bl	800831c <fiprintf>
 8007b36:	f000 fcb1 	bl	800849c <abort>
 8007b3a:	4b04      	ldr	r3, [pc, #16]	@ (8007b4c <__assert_func+0x38>)
 8007b3c:	e7f4      	b.n	8007b28 <__assert_func+0x14>
 8007b3e:	bf00      	nop
 8007b40:	20000220 	.word	0x20000220
 8007b44:	08012081 	.word	0x08012081
 8007b48:	08012053 	.word	0x08012053
 8007b4c:	08012046 	.word	0x08012046

08007b50 <_free_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4605      	mov	r5, r0
 8007b54:	2900      	cmp	r1, #0
 8007b56:	d041      	beq.n	8007bdc <_free_r+0x8c>
 8007b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5c:	1f0c      	subs	r4, r1, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfb8      	it	lt
 8007b62:	18e4      	addlt	r4, r4, r3
 8007b64:	f000 f8e8 	bl	8007d38 <__malloc_lock>
 8007b68:	4a1d      	ldr	r2, [pc, #116]	@ (8007be0 <_free_r+0x90>)
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	b933      	cbnz	r3, 8007b7c <_free_r+0x2c>
 8007b6e:	6063      	str	r3, [r4, #4]
 8007b70:	6014      	str	r4, [r2, #0]
 8007b72:	4628      	mov	r0, r5
 8007b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b78:	f000 b8e4 	b.w	8007d44 <__malloc_unlock>
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d908      	bls.n	8007b92 <_free_r+0x42>
 8007b80:	6820      	ldr	r0, [r4, #0]
 8007b82:	1821      	adds	r1, r4, r0
 8007b84:	428b      	cmp	r3, r1
 8007b86:	bf01      	itttt	eq
 8007b88:	6819      	ldreq	r1, [r3, #0]
 8007b8a:	685b      	ldreq	r3, [r3, #4]
 8007b8c:	1809      	addeq	r1, r1, r0
 8007b8e:	6021      	streq	r1, [r4, #0]
 8007b90:	e7ed      	b.n	8007b6e <_free_r+0x1e>
 8007b92:	461a      	mov	r2, r3
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b10b      	cbz	r3, 8007b9c <_free_r+0x4c>
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d9fa      	bls.n	8007b92 <_free_r+0x42>
 8007b9c:	6811      	ldr	r1, [r2, #0]
 8007b9e:	1850      	adds	r0, r2, r1
 8007ba0:	42a0      	cmp	r0, r4
 8007ba2:	d10b      	bne.n	8007bbc <_free_r+0x6c>
 8007ba4:	6820      	ldr	r0, [r4, #0]
 8007ba6:	4401      	add	r1, r0
 8007ba8:	1850      	adds	r0, r2, r1
 8007baa:	4283      	cmp	r3, r0
 8007bac:	6011      	str	r1, [r2, #0]
 8007bae:	d1e0      	bne.n	8007b72 <_free_r+0x22>
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	6053      	str	r3, [r2, #4]
 8007bb6:	4408      	add	r0, r1
 8007bb8:	6010      	str	r0, [r2, #0]
 8007bba:	e7da      	b.n	8007b72 <_free_r+0x22>
 8007bbc:	d902      	bls.n	8007bc4 <_free_r+0x74>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	602b      	str	r3, [r5, #0]
 8007bc2:	e7d6      	b.n	8007b72 <_free_r+0x22>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	1821      	adds	r1, r4, r0
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	bf04      	itt	eq
 8007bcc:	6819      	ldreq	r1, [r3, #0]
 8007bce:	685b      	ldreq	r3, [r3, #4]
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	bf04      	itt	eq
 8007bd4:	1809      	addeq	r1, r1, r0
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	6054      	str	r4, [r2, #4]
 8007bda:	e7ca      	b.n	8007b72 <_free_r+0x22>
 8007bdc:	bd38      	pop	{r3, r4, r5, pc}
 8007bde:	bf00      	nop
 8007be0:	2000af8c 	.word	0x2000af8c

08007be4 <malloc>:
 8007be4:	4b02      	ldr	r3, [pc, #8]	@ (8007bf0 <malloc+0xc>)
 8007be6:	4601      	mov	r1, r0
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f000 b825 	b.w	8007c38 <_malloc_r>
 8007bee:	bf00      	nop
 8007bf0:	20000220 	.word	0x20000220

08007bf4 <sbrk_aligned>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4e0f      	ldr	r6, [pc, #60]	@ (8007c34 <sbrk_aligned+0x40>)
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	6831      	ldr	r1, [r6, #0]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	b911      	cbnz	r1, 8007c06 <sbrk_aligned+0x12>
 8007c00:	f000 fc3c 	bl	800847c <_sbrk_r>
 8007c04:	6030      	str	r0, [r6, #0]
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 fc37 	bl	800847c <_sbrk_r>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	d103      	bne.n	8007c1a <sbrk_aligned+0x26>
 8007c12:	f04f 34ff 	mov.w	r4, #4294967295
 8007c16:	4620      	mov	r0, r4
 8007c18:	bd70      	pop	{r4, r5, r6, pc}
 8007c1a:	1cc4      	adds	r4, r0, #3
 8007c1c:	f024 0403 	bic.w	r4, r4, #3
 8007c20:	42a0      	cmp	r0, r4
 8007c22:	d0f8      	beq.n	8007c16 <sbrk_aligned+0x22>
 8007c24:	1a21      	subs	r1, r4, r0
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 fc28 	bl	800847c <_sbrk_r>
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d1f2      	bne.n	8007c16 <sbrk_aligned+0x22>
 8007c30:	e7ef      	b.n	8007c12 <sbrk_aligned+0x1e>
 8007c32:	bf00      	nop
 8007c34:	2000af88 	.word	0x2000af88

08007c38 <_malloc_r>:
 8007c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	1ccd      	adds	r5, r1, #3
 8007c3e:	f025 0503 	bic.w	r5, r5, #3
 8007c42:	3508      	adds	r5, #8
 8007c44:	2d0c      	cmp	r5, #12
 8007c46:	bf38      	it	cc
 8007c48:	250c      	movcc	r5, #12
 8007c4a:	2d00      	cmp	r5, #0
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	db01      	blt.n	8007c54 <_malloc_r+0x1c>
 8007c50:	42a9      	cmp	r1, r5
 8007c52:	d904      	bls.n	8007c5e <_malloc_r+0x26>
 8007c54:	230c      	movs	r3, #12
 8007c56:	6033      	str	r3, [r6, #0]
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d34 <_malloc_r+0xfc>
 8007c62:	f000 f869 	bl	8007d38 <__malloc_lock>
 8007c66:	f8d8 3000 	ldr.w	r3, [r8]
 8007c6a:	461c      	mov	r4, r3
 8007c6c:	bb44      	cbnz	r4, 8007cc0 <_malloc_r+0x88>
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7ff ffbf 	bl	8007bf4 <sbrk_aligned>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	4604      	mov	r4, r0
 8007c7a:	d158      	bne.n	8007d2e <_malloc_r+0xf6>
 8007c7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c80:	4627      	mov	r7, r4
 8007c82:	2f00      	cmp	r7, #0
 8007c84:	d143      	bne.n	8007d0e <_malloc_r+0xd6>
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	d04b      	beq.n	8007d22 <_malloc_r+0xea>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	4630      	mov	r0, r6
 8007c90:	eb04 0903 	add.w	r9, r4, r3
 8007c94:	f000 fbf2 	bl	800847c <_sbrk_r>
 8007c98:	4581      	cmp	r9, r0
 8007c9a:	d142      	bne.n	8007d22 <_malloc_r+0xea>
 8007c9c:	6821      	ldr	r1, [r4, #0]
 8007c9e:	1a6d      	subs	r5, r5, r1
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7ff ffa6 	bl	8007bf4 <sbrk_aligned>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d03a      	beq.n	8007d22 <_malloc_r+0xea>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	442b      	add	r3, r5
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	bb62      	cbnz	r2, 8007d14 <_malloc_r+0xdc>
 8007cba:	f8c8 7000 	str.w	r7, [r8]
 8007cbe:	e00f      	b.n	8007ce0 <_malloc_r+0xa8>
 8007cc0:	6822      	ldr	r2, [r4, #0]
 8007cc2:	1b52      	subs	r2, r2, r5
 8007cc4:	d420      	bmi.n	8007d08 <_malloc_r+0xd0>
 8007cc6:	2a0b      	cmp	r2, #11
 8007cc8:	d917      	bls.n	8007cfa <_malloc_r+0xc2>
 8007cca:	1961      	adds	r1, r4, r5
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	6025      	str	r5, [r4, #0]
 8007cd0:	bf18      	it	ne
 8007cd2:	6059      	strne	r1, [r3, #4]
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	bf08      	it	eq
 8007cd8:	f8c8 1000 	streq.w	r1, [r8]
 8007cdc:	5162      	str	r2, [r4, r5]
 8007cde:	604b      	str	r3, [r1, #4]
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 f82f 	bl	8007d44 <__malloc_unlock>
 8007ce6:	f104 000b 	add.w	r0, r4, #11
 8007cea:	1d23      	adds	r3, r4, #4
 8007cec:	f020 0007 	bic.w	r0, r0, #7
 8007cf0:	1ac2      	subs	r2, r0, r3
 8007cf2:	bf1c      	itt	ne
 8007cf4:	1a1b      	subne	r3, r3, r0
 8007cf6:	50a3      	strne	r3, [r4, r2]
 8007cf8:	e7af      	b.n	8007c5a <_malloc_r+0x22>
 8007cfa:	6862      	ldr	r2, [r4, #4]
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	bf0c      	ite	eq
 8007d00:	f8c8 2000 	streq.w	r2, [r8]
 8007d04:	605a      	strne	r2, [r3, #4]
 8007d06:	e7eb      	b.n	8007ce0 <_malloc_r+0xa8>
 8007d08:	4623      	mov	r3, r4
 8007d0a:	6864      	ldr	r4, [r4, #4]
 8007d0c:	e7ae      	b.n	8007c6c <_malloc_r+0x34>
 8007d0e:	463c      	mov	r4, r7
 8007d10:	687f      	ldr	r7, [r7, #4]
 8007d12:	e7b6      	b.n	8007c82 <_malloc_r+0x4a>
 8007d14:	461a      	mov	r2, r3
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d1fb      	bne.n	8007d14 <_malloc_r+0xdc>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	6053      	str	r3, [r2, #4]
 8007d20:	e7de      	b.n	8007ce0 <_malloc_r+0xa8>
 8007d22:	230c      	movs	r3, #12
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 f80c 	bl	8007d44 <__malloc_unlock>
 8007d2c:	e794      	b.n	8007c58 <_malloc_r+0x20>
 8007d2e:	6005      	str	r5, [r0, #0]
 8007d30:	e7d6      	b.n	8007ce0 <_malloc_r+0xa8>
 8007d32:	bf00      	nop
 8007d34:	2000af8c 	.word	0x2000af8c

08007d38 <__malloc_lock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	@ (8007d40 <__malloc_lock+0x8>)
 8007d3a:	f7ff beda 	b.w	8007af2 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	2000af84 	.word	0x2000af84

08007d44 <__malloc_unlock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	@ (8007d4c <__malloc_unlock+0x8>)
 8007d46:	f7ff bed5 	b.w	8007af4 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	2000af84 	.word	0x2000af84

08007d50 <__ssputs_r>:
 8007d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	688e      	ldr	r6, [r1, #8]
 8007d56:	461f      	mov	r7, r3
 8007d58:	42be      	cmp	r6, r7
 8007d5a:	680b      	ldr	r3, [r1, #0]
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	4690      	mov	r8, r2
 8007d62:	d82d      	bhi.n	8007dc0 <__ssputs_r+0x70>
 8007d64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d6c:	d026      	beq.n	8007dbc <__ssputs_r+0x6c>
 8007d6e:	6965      	ldr	r5, [r4, #20]
 8007d70:	6909      	ldr	r1, [r1, #16]
 8007d72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d76:	eba3 0901 	sub.w	r9, r3, r1
 8007d7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d7e:	1c7b      	adds	r3, r7, #1
 8007d80:	444b      	add	r3, r9
 8007d82:	106d      	asrs	r5, r5, #1
 8007d84:	429d      	cmp	r5, r3
 8007d86:	bf38      	it	cc
 8007d88:	461d      	movcc	r5, r3
 8007d8a:	0553      	lsls	r3, r2, #21
 8007d8c:	d527      	bpl.n	8007dde <__ssputs_r+0x8e>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7ff ff52 	bl	8007c38 <_malloc_r>
 8007d94:	4606      	mov	r6, r0
 8007d96:	b360      	cbz	r0, 8007df2 <__ssputs_r+0xa2>
 8007d98:	6921      	ldr	r1, [r4, #16]
 8007d9a:	464a      	mov	r2, r9
 8007d9c:	f7ff feab 	bl	8007af6 <memcpy>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	6126      	str	r6, [r4, #16]
 8007dae:	6165      	str	r5, [r4, #20]
 8007db0:	444e      	add	r6, r9
 8007db2:	eba5 0509 	sub.w	r5, r5, r9
 8007db6:	6026      	str	r6, [r4, #0]
 8007db8:	60a5      	str	r5, [r4, #8]
 8007dba:	463e      	mov	r6, r7
 8007dbc:	42be      	cmp	r6, r7
 8007dbe:	d900      	bls.n	8007dc2 <__ssputs_r+0x72>
 8007dc0:	463e      	mov	r6, r7
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	f000 fb1c 	bl	8008404 <memmove>
 8007dcc:	68a3      	ldr	r3, [r4, #8]
 8007dce:	1b9b      	subs	r3, r3, r6
 8007dd0:	60a3      	str	r3, [r4, #8]
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	4433      	add	r3, r6
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dde:	462a      	mov	r2, r5
 8007de0:	f000 fb63 	bl	80084aa <_realloc_r>
 8007de4:	4606      	mov	r6, r0
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d1e0      	bne.n	8007dac <__ssputs_r+0x5c>
 8007dea:	6921      	ldr	r1, [r4, #16]
 8007dec:	4650      	mov	r0, sl
 8007dee:	f7ff feaf 	bl	8007b50 <_free_r>
 8007df2:	230c      	movs	r3, #12
 8007df4:	f8ca 3000 	str.w	r3, [sl]
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e7e9      	b.n	8007dda <__ssputs_r+0x8a>
	...

08007e08 <_svfiprintf_r>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	4698      	mov	r8, r3
 8007e0e:	898b      	ldrh	r3, [r1, #12]
 8007e10:	061b      	lsls	r3, r3, #24
 8007e12:	b09d      	sub	sp, #116	@ 0x74
 8007e14:	4607      	mov	r7, r0
 8007e16:	460d      	mov	r5, r1
 8007e18:	4614      	mov	r4, r2
 8007e1a:	d510      	bpl.n	8007e3e <_svfiprintf_r+0x36>
 8007e1c:	690b      	ldr	r3, [r1, #16]
 8007e1e:	b973      	cbnz	r3, 8007e3e <_svfiprintf_r+0x36>
 8007e20:	2140      	movs	r1, #64	@ 0x40
 8007e22:	f7ff ff09 	bl	8007c38 <_malloc_r>
 8007e26:	6028      	str	r0, [r5, #0]
 8007e28:	6128      	str	r0, [r5, #16]
 8007e2a:	b930      	cbnz	r0, 8007e3a <_svfiprintf_r+0x32>
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	603b      	str	r3, [r7, #0]
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295
 8007e34:	b01d      	add	sp, #116	@ 0x74
 8007e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3a:	2340      	movs	r3, #64	@ 0x40
 8007e3c:	616b      	str	r3, [r5, #20]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e42:	2320      	movs	r3, #32
 8007e44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e4c:	2330      	movs	r3, #48	@ 0x30
 8007e4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007fec <_svfiprintf_r+0x1e4>
 8007e52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e56:	f04f 0901 	mov.w	r9, #1
 8007e5a:	4623      	mov	r3, r4
 8007e5c:	469a      	mov	sl, r3
 8007e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e62:	b10a      	cbz	r2, 8007e68 <_svfiprintf_r+0x60>
 8007e64:	2a25      	cmp	r2, #37	@ 0x25
 8007e66:	d1f9      	bne.n	8007e5c <_svfiprintf_r+0x54>
 8007e68:	ebba 0b04 	subs.w	fp, sl, r4
 8007e6c:	d00b      	beq.n	8007e86 <_svfiprintf_r+0x7e>
 8007e6e:	465b      	mov	r3, fp
 8007e70:	4622      	mov	r2, r4
 8007e72:	4629      	mov	r1, r5
 8007e74:	4638      	mov	r0, r7
 8007e76:	f7ff ff6b 	bl	8007d50 <__ssputs_r>
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f000 80a7 	beq.w	8007fce <_svfiprintf_r+0x1c6>
 8007e80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e82:	445a      	add	r2, fp
 8007e84:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e86:	f89a 3000 	ldrb.w	r3, [sl]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 809f 	beq.w	8007fce <_svfiprintf_r+0x1c6>
 8007e90:	2300      	movs	r3, #0
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e9a:	f10a 0a01 	add.w	sl, sl, #1
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ea6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ea8:	4654      	mov	r4, sl
 8007eaa:	2205      	movs	r2, #5
 8007eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb0:	484e      	ldr	r0, [pc, #312]	@ (8007fec <_svfiprintf_r+0x1e4>)
 8007eb2:	f7f8 f995 	bl	80001e0 <memchr>
 8007eb6:	9a04      	ldr	r2, [sp, #16]
 8007eb8:	b9d8      	cbnz	r0, 8007ef2 <_svfiprintf_r+0xea>
 8007eba:	06d0      	lsls	r0, r2, #27
 8007ebc:	bf44      	itt	mi
 8007ebe:	2320      	movmi	r3, #32
 8007ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ec4:	0711      	lsls	r1, r2, #28
 8007ec6:	bf44      	itt	mi
 8007ec8:	232b      	movmi	r3, #43	@ 0x2b
 8007eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ece:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ed4:	d015      	beq.n	8007f02 <_svfiprintf_r+0xfa>
 8007ed6:	9a07      	ldr	r2, [sp, #28]
 8007ed8:	4654      	mov	r4, sl
 8007eda:	2000      	movs	r0, #0
 8007edc:	f04f 0c0a 	mov.w	ip, #10
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee6:	3b30      	subs	r3, #48	@ 0x30
 8007ee8:	2b09      	cmp	r3, #9
 8007eea:	d94b      	bls.n	8007f84 <_svfiprintf_r+0x17c>
 8007eec:	b1b0      	cbz	r0, 8007f1c <_svfiprintf_r+0x114>
 8007eee:	9207      	str	r2, [sp, #28]
 8007ef0:	e014      	b.n	8007f1c <_svfiprintf_r+0x114>
 8007ef2:	eba0 0308 	sub.w	r3, r0, r8
 8007ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	46a2      	mov	sl, r4
 8007f00:	e7d2      	b.n	8007ea8 <_svfiprintf_r+0xa0>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	1d19      	adds	r1, r3, #4
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	9103      	str	r1, [sp, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bfbb      	ittet	lt
 8007f0e:	425b      	neglt	r3, r3
 8007f10:	f042 0202 	orrlt.w	r2, r2, #2
 8007f14:	9307      	strge	r3, [sp, #28]
 8007f16:	9307      	strlt	r3, [sp, #28]
 8007f18:	bfb8      	it	lt
 8007f1a:	9204      	strlt	r2, [sp, #16]
 8007f1c:	7823      	ldrb	r3, [r4, #0]
 8007f1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f20:	d10a      	bne.n	8007f38 <_svfiprintf_r+0x130>
 8007f22:	7863      	ldrb	r3, [r4, #1]
 8007f24:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f26:	d132      	bne.n	8007f8e <_svfiprintf_r+0x186>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1d1a      	adds	r2, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9203      	str	r2, [sp, #12]
 8007f30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f34:	3402      	adds	r4, #2
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ffc <_svfiprintf_r+0x1f4>
 8007f3c:	7821      	ldrb	r1, [r4, #0]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	4650      	mov	r0, sl
 8007f42:	f7f8 f94d 	bl	80001e0 <memchr>
 8007f46:	b138      	cbz	r0, 8007f58 <_svfiprintf_r+0x150>
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	eba0 000a 	sub.w	r0, r0, sl
 8007f4e:	2240      	movs	r2, #64	@ 0x40
 8007f50:	4082      	lsls	r2, r0
 8007f52:	4313      	orrs	r3, r2
 8007f54:	3401      	adds	r4, #1
 8007f56:	9304      	str	r3, [sp, #16]
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	4824      	ldr	r0, [pc, #144]	@ (8007ff0 <_svfiprintf_r+0x1e8>)
 8007f5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f62:	2206      	movs	r2, #6
 8007f64:	f7f8 f93c 	bl	80001e0 <memchr>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d036      	beq.n	8007fda <_svfiprintf_r+0x1d2>
 8007f6c:	4b21      	ldr	r3, [pc, #132]	@ (8007ff4 <_svfiprintf_r+0x1ec>)
 8007f6e:	bb1b      	cbnz	r3, 8007fb8 <_svfiprintf_r+0x1b0>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	3307      	adds	r3, #7
 8007f74:	f023 0307 	bic.w	r3, r3, #7
 8007f78:	3308      	adds	r3, #8
 8007f7a:	9303      	str	r3, [sp, #12]
 8007f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7e:	4433      	add	r3, r6
 8007f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f82:	e76a      	b.n	8007e5a <_svfiprintf_r+0x52>
 8007f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f88:	460c      	mov	r4, r1
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	e7a8      	b.n	8007ee0 <_svfiprintf_r+0xd8>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	3401      	adds	r4, #1
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	4619      	mov	r1, r3
 8007f96:	f04f 0c0a 	mov.w	ip, #10
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa0:	3a30      	subs	r2, #48	@ 0x30
 8007fa2:	2a09      	cmp	r2, #9
 8007fa4:	d903      	bls.n	8007fae <_svfiprintf_r+0x1a6>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0c6      	beq.n	8007f38 <_svfiprintf_r+0x130>
 8007faa:	9105      	str	r1, [sp, #20]
 8007fac:	e7c4      	b.n	8007f38 <_svfiprintf_r+0x130>
 8007fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e7f0      	b.n	8007f9a <_svfiprintf_r+0x192>
 8007fb8:	ab03      	add	r3, sp, #12
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <_svfiprintf_r+0x1f0>)
 8007fc0:	a904      	add	r1, sp, #16
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	1c42      	adds	r2, r0, #1
 8007fca:	4606      	mov	r6, r0
 8007fcc:	d1d6      	bne.n	8007f7c <_svfiprintf_r+0x174>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	065b      	lsls	r3, r3, #25
 8007fd2:	f53f af2d 	bmi.w	8007e30 <_svfiprintf_r+0x28>
 8007fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fd8:	e72c      	b.n	8007e34 <_svfiprintf_r+0x2c>
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <_svfiprintf_r+0x1f0>)
 8007fe2:	a904      	add	r1, sp, #16
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f000 f879 	bl	80080dc <_printf_i>
 8007fea:	e7ed      	b.n	8007fc8 <_svfiprintf_r+0x1c0>
 8007fec:	08012082 	.word	0x08012082
 8007ff0:	0801208c 	.word	0x0801208c
 8007ff4:	00000000 	.word	0x00000000
 8007ff8:	08007d51 	.word	0x08007d51
 8007ffc:	08012088 	.word	0x08012088

08008000 <_printf_common>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	4616      	mov	r6, r2
 8008006:	4698      	mov	r8, r3
 8008008:	688a      	ldr	r2, [r1, #8]
 800800a:	690b      	ldr	r3, [r1, #16]
 800800c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008010:	4293      	cmp	r3, r2
 8008012:	bfb8      	it	lt
 8008014:	4613      	movlt	r3, r2
 8008016:	6033      	str	r3, [r6, #0]
 8008018:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800801c:	4607      	mov	r7, r0
 800801e:	460c      	mov	r4, r1
 8008020:	b10a      	cbz	r2, 8008026 <_printf_common+0x26>
 8008022:	3301      	adds	r3, #1
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	0699      	lsls	r1, r3, #26
 800802a:	bf42      	ittt	mi
 800802c:	6833      	ldrmi	r3, [r6, #0]
 800802e:	3302      	addmi	r3, #2
 8008030:	6033      	strmi	r3, [r6, #0]
 8008032:	6825      	ldr	r5, [r4, #0]
 8008034:	f015 0506 	ands.w	r5, r5, #6
 8008038:	d106      	bne.n	8008048 <_printf_common+0x48>
 800803a:	f104 0a19 	add.w	sl, r4, #25
 800803e:	68e3      	ldr	r3, [r4, #12]
 8008040:	6832      	ldr	r2, [r6, #0]
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	42ab      	cmp	r3, r5
 8008046:	dc26      	bgt.n	8008096 <_printf_common+0x96>
 8008048:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	3b00      	subs	r3, #0
 8008050:	bf18      	it	ne
 8008052:	2301      	movne	r3, #1
 8008054:	0692      	lsls	r2, r2, #26
 8008056:	d42b      	bmi.n	80080b0 <_printf_common+0xb0>
 8008058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800805c:	4641      	mov	r1, r8
 800805e:	4638      	mov	r0, r7
 8008060:	47c8      	blx	r9
 8008062:	3001      	adds	r0, #1
 8008064:	d01e      	beq.n	80080a4 <_printf_common+0xa4>
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	f003 0306 	and.w	r3, r3, #6
 800806e:	2b04      	cmp	r3, #4
 8008070:	bf02      	ittt	eq
 8008072:	68e5      	ldreq	r5, [r4, #12]
 8008074:	6833      	ldreq	r3, [r6, #0]
 8008076:	1aed      	subeq	r5, r5, r3
 8008078:	68a3      	ldr	r3, [r4, #8]
 800807a:	bf0c      	ite	eq
 800807c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008080:	2500      	movne	r5, #0
 8008082:	4293      	cmp	r3, r2
 8008084:	bfc4      	itt	gt
 8008086:	1a9b      	subgt	r3, r3, r2
 8008088:	18ed      	addgt	r5, r5, r3
 800808a:	2600      	movs	r6, #0
 800808c:	341a      	adds	r4, #26
 800808e:	42b5      	cmp	r5, r6
 8008090:	d11a      	bne.n	80080c8 <_printf_common+0xc8>
 8008092:	2000      	movs	r0, #0
 8008094:	e008      	b.n	80080a8 <_printf_common+0xa8>
 8008096:	2301      	movs	r3, #1
 8008098:	4652      	mov	r2, sl
 800809a:	4641      	mov	r1, r8
 800809c:	4638      	mov	r0, r7
 800809e:	47c8      	blx	r9
 80080a0:	3001      	adds	r0, #1
 80080a2:	d103      	bne.n	80080ac <_printf_common+0xac>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ac:	3501      	adds	r5, #1
 80080ae:	e7c6      	b.n	800803e <_printf_common+0x3e>
 80080b0:	18e1      	adds	r1, r4, r3
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	2030      	movs	r0, #48	@ 0x30
 80080b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080ba:	4422      	add	r2, r4
 80080bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080c4:	3302      	adds	r3, #2
 80080c6:	e7c7      	b.n	8008058 <_printf_common+0x58>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4622      	mov	r2, r4
 80080cc:	4641      	mov	r1, r8
 80080ce:	4638      	mov	r0, r7
 80080d0:	47c8      	blx	r9
 80080d2:	3001      	adds	r0, #1
 80080d4:	d0e6      	beq.n	80080a4 <_printf_common+0xa4>
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7d9      	b.n	800808e <_printf_common+0x8e>
	...

080080dc <_printf_i>:
 80080dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	7e0f      	ldrb	r7, [r1, #24]
 80080e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080e4:	2f78      	cmp	r7, #120	@ 0x78
 80080e6:	4691      	mov	r9, r2
 80080e8:	4680      	mov	r8, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	469a      	mov	sl, r3
 80080ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080f2:	d807      	bhi.n	8008104 <_printf_i+0x28>
 80080f4:	2f62      	cmp	r7, #98	@ 0x62
 80080f6:	d80a      	bhi.n	800810e <_printf_i+0x32>
 80080f8:	2f00      	cmp	r7, #0
 80080fa:	f000 80d2 	beq.w	80082a2 <_printf_i+0x1c6>
 80080fe:	2f58      	cmp	r7, #88	@ 0x58
 8008100:	f000 80b9 	beq.w	8008276 <_printf_i+0x19a>
 8008104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008108:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800810c:	e03a      	b.n	8008184 <_printf_i+0xa8>
 800810e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008112:	2b15      	cmp	r3, #21
 8008114:	d8f6      	bhi.n	8008104 <_printf_i+0x28>
 8008116:	a101      	add	r1, pc, #4	@ (adr r1, 800811c <_printf_i+0x40>)
 8008118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800811c:	08008175 	.word	0x08008175
 8008120:	08008189 	.word	0x08008189
 8008124:	08008105 	.word	0x08008105
 8008128:	08008105 	.word	0x08008105
 800812c:	08008105 	.word	0x08008105
 8008130:	08008105 	.word	0x08008105
 8008134:	08008189 	.word	0x08008189
 8008138:	08008105 	.word	0x08008105
 800813c:	08008105 	.word	0x08008105
 8008140:	08008105 	.word	0x08008105
 8008144:	08008105 	.word	0x08008105
 8008148:	08008289 	.word	0x08008289
 800814c:	080081b3 	.word	0x080081b3
 8008150:	08008243 	.word	0x08008243
 8008154:	08008105 	.word	0x08008105
 8008158:	08008105 	.word	0x08008105
 800815c:	080082ab 	.word	0x080082ab
 8008160:	08008105 	.word	0x08008105
 8008164:	080081b3 	.word	0x080081b3
 8008168:	08008105 	.word	0x08008105
 800816c:	08008105 	.word	0x08008105
 8008170:	0800824b 	.word	0x0800824b
 8008174:	6833      	ldr	r3, [r6, #0]
 8008176:	1d1a      	adds	r2, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6032      	str	r2, [r6, #0]
 800817c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008180:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008184:	2301      	movs	r3, #1
 8008186:	e09d      	b.n	80082c4 <_printf_i+0x1e8>
 8008188:	6833      	ldr	r3, [r6, #0]
 800818a:	6820      	ldr	r0, [r4, #0]
 800818c:	1d19      	adds	r1, r3, #4
 800818e:	6031      	str	r1, [r6, #0]
 8008190:	0606      	lsls	r6, r0, #24
 8008192:	d501      	bpl.n	8008198 <_printf_i+0xbc>
 8008194:	681d      	ldr	r5, [r3, #0]
 8008196:	e003      	b.n	80081a0 <_printf_i+0xc4>
 8008198:	0645      	lsls	r5, r0, #25
 800819a:	d5fb      	bpl.n	8008194 <_printf_i+0xb8>
 800819c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	da03      	bge.n	80081ac <_printf_i+0xd0>
 80081a4:	232d      	movs	r3, #45	@ 0x2d
 80081a6:	426d      	negs	r5, r5
 80081a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081ac:	4859      	ldr	r0, [pc, #356]	@ (8008314 <_printf_i+0x238>)
 80081ae:	230a      	movs	r3, #10
 80081b0:	e011      	b.n	80081d6 <_printf_i+0xfa>
 80081b2:	6821      	ldr	r1, [r4, #0]
 80081b4:	6833      	ldr	r3, [r6, #0]
 80081b6:	0608      	lsls	r0, r1, #24
 80081b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80081bc:	d402      	bmi.n	80081c4 <_printf_i+0xe8>
 80081be:	0649      	lsls	r1, r1, #25
 80081c0:	bf48      	it	mi
 80081c2:	b2ad      	uxthmi	r5, r5
 80081c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80081c6:	4853      	ldr	r0, [pc, #332]	@ (8008314 <_printf_i+0x238>)
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	bf14      	ite	ne
 80081cc:	230a      	movne	r3, #10
 80081ce:	2308      	moveq	r3, #8
 80081d0:	2100      	movs	r1, #0
 80081d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081d6:	6866      	ldr	r6, [r4, #4]
 80081d8:	60a6      	str	r6, [r4, #8]
 80081da:	2e00      	cmp	r6, #0
 80081dc:	bfa2      	ittt	ge
 80081de:	6821      	ldrge	r1, [r4, #0]
 80081e0:	f021 0104 	bicge.w	r1, r1, #4
 80081e4:	6021      	strge	r1, [r4, #0]
 80081e6:	b90d      	cbnz	r5, 80081ec <_printf_i+0x110>
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	d04b      	beq.n	8008284 <_printf_i+0x1a8>
 80081ec:	4616      	mov	r6, r2
 80081ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80081f2:	fb03 5711 	mls	r7, r3, r1, r5
 80081f6:	5dc7      	ldrb	r7, [r0, r7]
 80081f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081fc:	462f      	mov	r7, r5
 80081fe:	42bb      	cmp	r3, r7
 8008200:	460d      	mov	r5, r1
 8008202:	d9f4      	bls.n	80081ee <_printf_i+0x112>
 8008204:	2b08      	cmp	r3, #8
 8008206:	d10b      	bne.n	8008220 <_printf_i+0x144>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	07df      	lsls	r7, r3, #31
 800820c:	d508      	bpl.n	8008220 <_printf_i+0x144>
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	4299      	cmp	r1, r3
 8008214:	bfde      	ittt	le
 8008216:	2330      	movle	r3, #48	@ 0x30
 8008218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800821c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008220:	1b92      	subs	r2, r2, r6
 8008222:	6122      	str	r2, [r4, #16]
 8008224:	f8cd a000 	str.w	sl, [sp]
 8008228:	464b      	mov	r3, r9
 800822a:	aa03      	add	r2, sp, #12
 800822c:	4621      	mov	r1, r4
 800822e:	4640      	mov	r0, r8
 8008230:	f7ff fee6 	bl	8008000 <_printf_common>
 8008234:	3001      	adds	r0, #1
 8008236:	d14a      	bne.n	80082ce <_printf_i+0x1f2>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	b004      	add	sp, #16
 800823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	f043 0320 	orr.w	r3, r3, #32
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	4833      	ldr	r0, [pc, #204]	@ (8008318 <_printf_i+0x23c>)
 800824c:	2778      	movs	r7, #120	@ 0x78
 800824e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	6831      	ldr	r1, [r6, #0]
 8008256:	061f      	lsls	r7, r3, #24
 8008258:	f851 5b04 	ldr.w	r5, [r1], #4
 800825c:	d402      	bmi.n	8008264 <_printf_i+0x188>
 800825e:	065f      	lsls	r7, r3, #25
 8008260:	bf48      	it	mi
 8008262:	b2ad      	uxthmi	r5, r5
 8008264:	6031      	str	r1, [r6, #0]
 8008266:	07d9      	lsls	r1, r3, #31
 8008268:	bf44      	itt	mi
 800826a:	f043 0320 	orrmi.w	r3, r3, #32
 800826e:	6023      	strmi	r3, [r4, #0]
 8008270:	b11d      	cbz	r5, 800827a <_printf_i+0x19e>
 8008272:	2310      	movs	r3, #16
 8008274:	e7ac      	b.n	80081d0 <_printf_i+0xf4>
 8008276:	4827      	ldr	r0, [pc, #156]	@ (8008314 <_printf_i+0x238>)
 8008278:	e7e9      	b.n	800824e <_printf_i+0x172>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	f023 0320 	bic.w	r3, r3, #32
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	e7f6      	b.n	8008272 <_printf_i+0x196>
 8008284:	4616      	mov	r6, r2
 8008286:	e7bd      	b.n	8008204 <_printf_i+0x128>
 8008288:	6833      	ldr	r3, [r6, #0]
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	6961      	ldr	r1, [r4, #20]
 800828e:	1d18      	adds	r0, r3, #4
 8008290:	6030      	str	r0, [r6, #0]
 8008292:	062e      	lsls	r6, r5, #24
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	d501      	bpl.n	800829c <_printf_i+0x1c0>
 8008298:	6019      	str	r1, [r3, #0]
 800829a:	e002      	b.n	80082a2 <_printf_i+0x1c6>
 800829c:	0668      	lsls	r0, r5, #25
 800829e:	d5fb      	bpl.n	8008298 <_printf_i+0x1bc>
 80082a0:	8019      	strh	r1, [r3, #0]
 80082a2:	2300      	movs	r3, #0
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	4616      	mov	r6, r2
 80082a8:	e7bc      	b.n	8008224 <_printf_i+0x148>
 80082aa:	6833      	ldr	r3, [r6, #0]
 80082ac:	1d1a      	adds	r2, r3, #4
 80082ae:	6032      	str	r2, [r6, #0]
 80082b0:	681e      	ldr	r6, [r3, #0]
 80082b2:	6862      	ldr	r2, [r4, #4]
 80082b4:	2100      	movs	r1, #0
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7f7 ff92 	bl	80001e0 <memchr>
 80082bc:	b108      	cbz	r0, 80082c2 <_printf_i+0x1e6>
 80082be:	1b80      	subs	r0, r0, r6
 80082c0:	6060      	str	r0, [r4, #4]
 80082c2:	6863      	ldr	r3, [r4, #4]
 80082c4:	6123      	str	r3, [r4, #16]
 80082c6:	2300      	movs	r3, #0
 80082c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082cc:	e7aa      	b.n	8008224 <_printf_i+0x148>
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	4632      	mov	r2, r6
 80082d2:	4649      	mov	r1, r9
 80082d4:	4640      	mov	r0, r8
 80082d6:	47d0      	blx	sl
 80082d8:	3001      	adds	r0, #1
 80082da:	d0ad      	beq.n	8008238 <_printf_i+0x15c>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	079b      	lsls	r3, r3, #30
 80082e0:	d413      	bmi.n	800830a <_printf_i+0x22e>
 80082e2:	68e0      	ldr	r0, [r4, #12]
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	4298      	cmp	r0, r3
 80082e8:	bfb8      	it	lt
 80082ea:	4618      	movlt	r0, r3
 80082ec:	e7a6      	b.n	800823c <_printf_i+0x160>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4632      	mov	r2, r6
 80082f2:	4649      	mov	r1, r9
 80082f4:	4640      	mov	r0, r8
 80082f6:	47d0      	blx	sl
 80082f8:	3001      	adds	r0, #1
 80082fa:	d09d      	beq.n	8008238 <_printf_i+0x15c>
 80082fc:	3501      	adds	r5, #1
 80082fe:	68e3      	ldr	r3, [r4, #12]
 8008300:	9903      	ldr	r1, [sp, #12]
 8008302:	1a5b      	subs	r3, r3, r1
 8008304:	42ab      	cmp	r3, r5
 8008306:	dcf2      	bgt.n	80082ee <_printf_i+0x212>
 8008308:	e7eb      	b.n	80082e2 <_printf_i+0x206>
 800830a:	2500      	movs	r5, #0
 800830c:	f104 0619 	add.w	r6, r4, #25
 8008310:	e7f5      	b.n	80082fe <_printf_i+0x222>
 8008312:	bf00      	nop
 8008314:	08012093 	.word	0x08012093
 8008318:	080120a4 	.word	0x080120a4

0800831c <fiprintf>:
 800831c:	b40e      	push	{r1, r2, r3}
 800831e:	b503      	push	{r0, r1, lr}
 8008320:	4601      	mov	r1, r0
 8008322:	ab03      	add	r3, sp, #12
 8008324:	4805      	ldr	r0, [pc, #20]	@ (800833c <fiprintf+0x20>)
 8008326:	f853 2b04 	ldr.w	r2, [r3], #4
 800832a:	6800      	ldr	r0, [r0, #0]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f000 f913 	bl	8008558 <_vfiprintf_r>
 8008332:	b002      	add	sp, #8
 8008334:	f85d eb04 	ldr.w	lr, [sp], #4
 8008338:	b003      	add	sp, #12
 800833a:	4770      	bx	lr
 800833c:	20000220 	.word	0x20000220

08008340 <__swhatbuf_r>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008348:	2900      	cmp	r1, #0
 800834a:	b096      	sub	sp, #88	@ 0x58
 800834c:	4615      	mov	r5, r2
 800834e:	461e      	mov	r6, r3
 8008350:	da0d      	bge.n	800836e <__swhatbuf_r+0x2e>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008358:	f04f 0100 	mov.w	r1, #0
 800835c:	bf14      	ite	ne
 800835e:	2340      	movne	r3, #64	@ 0x40
 8008360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008364:	2000      	movs	r0, #0
 8008366:	6031      	str	r1, [r6, #0]
 8008368:	602b      	str	r3, [r5, #0]
 800836a:	b016      	add	sp, #88	@ 0x58
 800836c:	bd70      	pop	{r4, r5, r6, pc}
 800836e:	466a      	mov	r2, sp
 8008370:	f000 f862 	bl	8008438 <_fstat_r>
 8008374:	2800      	cmp	r0, #0
 8008376:	dbec      	blt.n	8008352 <__swhatbuf_r+0x12>
 8008378:	9901      	ldr	r1, [sp, #4]
 800837a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800837e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008382:	4259      	negs	r1, r3
 8008384:	4159      	adcs	r1, r3
 8008386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800838a:	e7eb      	b.n	8008364 <__swhatbuf_r+0x24>

0800838c <__smakebuf_r>:
 800838c:	898b      	ldrh	r3, [r1, #12]
 800838e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008390:	079d      	lsls	r5, r3, #30
 8008392:	4606      	mov	r6, r0
 8008394:	460c      	mov	r4, r1
 8008396:	d507      	bpl.n	80083a8 <__smakebuf_r+0x1c>
 8008398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	6123      	str	r3, [r4, #16]
 80083a0:	2301      	movs	r3, #1
 80083a2:	6163      	str	r3, [r4, #20]
 80083a4:	b003      	add	sp, #12
 80083a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a8:	ab01      	add	r3, sp, #4
 80083aa:	466a      	mov	r2, sp
 80083ac:	f7ff ffc8 	bl	8008340 <__swhatbuf_r>
 80083b0:	9f00      	ldr	r7, [sp, #0]
 80083b2:	4605      	mov	r5, r0
 80083b4:	4639      	mov	r1, r7
 80083b6:	4630      	mov	r0, r6
 80083b8:	f7ff fc3e 	bl	8007c38 <_malloc_r>
 80083bc:	b948      	cbnz	r0, 80083d2 <__smakebuf_r+0x46>
 80083be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c2:	059a      	lsls	r2, r3, #22
 80083c4:	d4ee      	bmi.n	80083a4 <__smakebuf_r+0x18>
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	f043 0302 	orr.w	r3, r3, #2
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	e7e2      	b.n	8008398 <__smakebuf_r+0xc>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	6020      	str	r0, [r4, #0]
 80083d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	9b01      	ldr	r3, [sp, #4]
 80083de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083e2:	b15b      	cbz	r3, 80083fc <__smakebuf_r+0x70>
 80083e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 f837 	bl	800845c <_isatty_r>
 80083ee:	b128      	cbz	r0, 80083fc <__smakebuf_r+0x70>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f023 0303 	bic.w	r3, r3, #3
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	431d      	orrs	r5, r3
 8008400:	81a5      	strh	r5, [r4, #12]
 8008402:	e7cf      	b.n	80083a4 <__smakebuf_r+0x18>

08008404 <memmove>:
 8008404:	4288      	cmp	r0, r1
 8008406:	b510      	push	{r4, lr}
 8008408:	eb01 0402 	add.w	r4, r1, r2
 800840c:	d902      	bls.n	8008414 <memmove+0x10>
 800840e:	4284      	cmp	r4, r0
 8008410:	4623      	mov	r3, r4
 8008412:	d807      	bhi.n	8008424 <memmove+0x20>
 8008414:	1e43      	subs	r3, r0, #1
 8008416:	42a1      	cmp	r1, r4
 8008418:	d008      	beq.n	800842c <memmove+0x28>
 800841a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800841e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008422:	e7f8      	b.n	8008416 <memmove+0x12>
 8008424:	4402      	add	r2, r0
 8008426:	4601      	mov	r1, r0
 8008428:	428a      	cmp	r2, r1
 800842a:	d100      	bne.n	800842e <memmove+0x2a>
 800842c:	bd10      	pop	{r4, pc}
 800842e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008436:	e7f7      	b.n	8008428 <memmove+0x24>

08008438 <_fstat_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	@ (8008458 <_fstat_r+0x20>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	4611      	mov	r1, r2
 8008444:	602b      	str	r3, [r5, #0]
 8008446:	f7f9 fc67 	bl	8001d18 <_fstat>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	d102      	bne.n	8008454 <_fstat_r+0x1c>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b103      	cbz	r3, 8008454 <_fstat_r+0x1c>
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	bf00      	nop
 8008458:	2000af80 	.word	0x2000af80

0800845c <_isatty_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d06      	ldr	r5, [pc, #24]	@ (8008478 <_isatty_r+0x1c>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 fc66 	bl	8001d38 <_isatty>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_isatty_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_isatty_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	2000af80 	.word	0x2000af80

0800847c <_sbrk_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d06      	ldr	r5, [pc, #24]	@ (8008498 <_sbrk_r+0x1c>)
 8008480:	2300      	movs	r3, #0
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7f9 fc6e 	bl	8001d68 <_sbrk>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_sbrk_r+0x1a>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_sbrk_r+0x1a>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	2000af80 	.word	0x2000af80

0800849c <abort>:
 800849c:	b508      	push	{r3, lr}
 800849e:	2006      	movs	r0, #6
 80084a0:	f000 fa2e 	bl	8008900 <raise>
 80084a4:	2001      	movs	r0, #1
 80084a6:	f7f9 fbe7 	bl	8001c78 <_exit>

080084aa <_realloc_r>:
 80084aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ae:	4680      	mov	r8, r0
 80084b0:	4615      	mov	r5, r2
 80084b2:	460c      	mov	r4, r1
 80084b4:	b921      	cbnz	r1, 80084c0 <_realloc_r+0x16>
 80084b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ba:	4611      	mov	r1, r2
 80084bc:	f7ff bbbc 	b.w	8007c38 <_malloc_r>
 80084c0:	b92a      	cbnz	r2, 80084ce <_realloc_r+0x24>
 80084c2:	f7ff fb45 	bl	8007b50 <_free_r>
 80084c6:	2400      	movs	r4, #0
 80084c8:	4620      	mov	r0, r4
 80084ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ce:	f000 fa33 	bl	8008938 <_malloc_usable_size_r>
 80084d2:	4285      	cmp	r5, r0
 80084d4:	4606      	mov	r6, r0
 80084d6:	d802      	bhi.n	80084de <_realloc_r+0x34>
 80084d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084dc:	d8f4      	bhi.n	80084c8 <_realloc_r+0x1e>
 80084de:	4629      	mov	r1, r5
 80084e0:	4640      	mov	r0, r8
 80084e2:	f7ff fba9 	bl	8007c38 <_malloc_r>
 80084e6:	4607      	mov	r7, r0
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d0ec      	beq.n	80084c6 <_realloc_r+0x1c>
 80084ec:	42b5      	cmp	r5, r6
 80084ee:	462a      	mov	r2, r5
 80084f0:	4621      	mov	r1, r4
 80084f2:	bf28      	it	cs
 80084f4:	4632      	movcs	r2, r6
 80084f6:	f7ff fafe 	bl	8007af6 <memcpy>
 80084fa:	4621      	mov	r1, r4
 80084fc:	4640      	mov	r0, r8
 80084fe:	f7ff fb27 	bl	8007b50 <_free_r>
 8008502:	463c      	mov	r4, r7
 8008504:	e7e0      	b.n	80084c8 <_realloc_r+0x1e>

08008506 <__sfputc_r>:
 8008506:	6893      	ldr	r3, [r2, #8]
 8008508:	3b01      	subs	r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	b410      	push	{r4}
 800850e:	6093      	str	r3, [r2, #8]
 8008510:	da08      	bge.n	8008524 <__sfputc_r+0x1e>
 8008512:	6994      	ldr	r4, [r2, #24]
 8008514:	42a3      	cmp	r3, r4
 8008516:	db01      	blt.n	800851c <__sfputc_r+0x16>
 8008518:	290a      	cmp	r1, #10
 800851a:	d103      	bne.n	8008524 <__sfputc_r+0x1e>
 800851c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008520:	f000 b932 	b.w	8008788 <__swbuf_r>
 8008524:	6813      	ldr	r3, [r2, #0]
 8008526:	1c58      	adds	r0, r3, #1
 8008528:	6010      	str	r0, [r2, #0]
 800852a:	7019      	strb	r1, [r3, #0]
 800852c:	4608      	mov	r0, r1
 800852e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008532:	4770      	bx	lr

08008534 <__sfputs_r>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	4606      	mov	r6, r0
 8008538:	460f      	mov	r7, r1
 800853a:	4614      	mov	r4, r2
 800853c:	18d5      	adds	r5, r2, r3
 800853e:	42ac      	cmp	r4, r5
 8008540:	d101      	bne.n	8008546 <__sfputs_r+0x12>
 8008542:	2000      	movs	r0, #0
 8008544:	e007      	b.n	8008556 <__sfputs_r+0x22>
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	463a      	mov	r2, r7
 800854c:	4630      	mov	r0, r6
 800854e:	f7ff ffda 	bl	8008506 <__sfputc_r>
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	d1f3      	bne.n	800853e <__sfputs_r+0xa>
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008558 <_vfiprintf_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	460d      	mov	r5, r1
 800855e:	b09d      	sub	sp, #116	@ 0x74
 8008560:	4614      	mov	r4, r2
 8008562:	4698      	mov	r8, r3
 8008564:	4606      	mov	r6, r0
 8008566:	b118      	cbz	r0, 8008570 <_vfiprintf_r+0x18>
 8008568:	6a03      	ldr	r3, [r0, #32]
 800856a:	b90b      	cbnz	r3, 8008570 <_vfiprintf_r+0x18>
 800856c:	f7ff f8b4 	bl	80076d8 <__sinit>
 8008570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008572:	07d9      	lsls	r1, r3, #31
 8008574:	d405      	bmi.n	8008582 <_vfiprintf_r+0x2a>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	059a      	lsls	r2, r3, #22
 800857a:	d402      	bmi.n	8008582 <_vfiprintf_r+0x2a>
 800857c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857e:	f7ff fab8 	bl	8007af2 <__retarget_lock_acquire_recursive>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	071b      	lsls	r3, r3, #28
 8008586:	d501      	bpl.n	800858c <_vfiprintf_r+0x34>
 8008588:	692b      	ldr	r3, [r5, #16]
 800858a:	b99b      	cbnz	r3, 80085b4 <_vfiprintf_r+0x5c>
 800858c:	4629      	mov	r1, r5
 800858e:	4630      	mov	r0, r6
 8008590:	f000 f938 	bl	8008804 <__swsetup_r>
 8008594:	b170      	cbz	r0, 80085b4 <_vfiprintf_r+0x5c>
 8008596:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008598:	07dc      	lsls	r4, r3, #31
 800859a:	d504      	bpl.n	80085a6 <_vfiprintf_r+0x4e>
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	b01d      	add	sp, #116	@ 0x74
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	89ab      	ldrh	r3, [r5, #12]
 80085a8:	0598      	lsls	r0, r3, #22
 80085aa:	d4f7      	bmi.n	800859c <_vfiprintf_r+0x44>
 80085ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ae:	f7ff faa1 	bl	8007af4 <__retarget_lock_release_recursive>
 80085b2:	e7f3      	b.n	800859c <_vfiprintf_r+0x44>
 80085b4:	2300      	movs	r3, #0
 80085b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b8:	2320      	movs	r3, #32
 80085ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085be:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c2:	2330      	movs	r3, #48	@ 0x30
 80085c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008774 <_vfiprintf_r+0x21c>
 80085c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085cc:	f04f 0901 	mov.w	r9, #1
 80085d0:	4623      	mov	r3, r4
 80085d2:	469a      	mov	sl, r3
 80085d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d8:	b10a      	cbz	r2, 80085de <_vfiprintf_r+0x86>
 80085da:	2a25      	cmp	r2, #37	@ 0x25
 80085dc:	d1f9      	bne.n	80085d2 <_vfiprintf_r+0x7a>
 80085de:	ebba 0b04 	subs.w	fp, sl, r4
 80085e2:	d00b      	beq.n	80085fc <_vfiprintf_r+0xa4>
 80085e4:	465b      	mov	r3, fp
 80085e6:	4622      	mov	r2, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff ffa2 	bl	8008534 <__sfputs_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	f000 80a7 	beq.w	8008744 <_vfiprintf_r+0x1ec>
 80085f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085f8:	445a      	add	r2, fp
 80085fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80085fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 809f 	beq.w	8008744 <_vfiprintf_r+0x1ec>
 8008606:	2300      	movs	r3, #0
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008610:	f10a 0a01 	add.w	sl, sl, #1
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800861c:	931a      	str	r3, [sp, #104]	@ 0x68
 800861e:	4654      	mov	r4, sl
 8008620:	2205      	movs	r2, #5
 8008622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008626:	4853      	ldr	r0, [pc, #332]	@ (8008774 <_vfiprintf_r+0x21c>)
 8008628:	f7f7 fdda 	bl	80001e0 <memchr>
 800862c:	9a04      	ldr	r2, [sp, #16]
 800862e:	b9d8      	cbnz	r0, 8008668 <_vfiprintf_r+0x110>
 8008630:	06d1      	lsls	r1, r2, #27
 8008632:	bf44      	itt	mi
 8008634:	2320      	movmi	r3, #32
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800863a:	0713      	lsls	r3, r2, #28
 800863c:	bf44      	itt	mi
 800863e:	232b      	movmi	r3, #43	@ 0x2b
 8008640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008644:	f89a 3000 	ldrb.w	r3, [sl]
 8008648:	2b2a      	cmp	r3, #42	@ 0x2a
 800864a:	d015      	beq.n	8008678 <_vfiprintf_r+0x120>
 800864c:	9a07      	ldr	r2, [sp, #28]
 800864e:	4654      	mov	r4, sl
 8008650:	2000      	movs	r0, #0
 8008652:	f04f 0c0a 	mov.w	ip, #10
 8008656:	4621      	mov	r1, r4
 8008658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865c:	3b30      	subs	r3, #48	@ 0x30
 800865e:	2b09      	cmp	r3, #9
 8008660:	d94b      	bls.n	80086fa <_vfiprintf_r+0x1a2>
 8008662:	b1b0      	cbz	r0, 8008692 <_vfiprintf_r+0x13a>
 8008664:	9207      	str	r2, [sp, #28]
 8008666:	e014      	b.n	8008692 <_vfiprintf_r+0x13a>
 8008668:	eba0 0308 	sub.w	r3, r0, r8
 800866c:	fa09 f303 	lsl.w	r3, r9, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	46a2      	mov	sl, r4
 8008676:	e7d2      	b.n	800861e <_vfiprintf_r+0xc6>
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	1d19      	adds	r1, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	9103      	str	r1, [sp, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfbb      	ittet	lt
 8008684:	425b      	neglt	r3, r3
 8008686:	f042 0202 	orrlt.w	r2, r2, #2
 800868a:	9307      	strge	r3, [sp, #28]
 800868c:	9307      	strlt	r3, [sp, #28]
 800868e:	bfb8      	it	lt
 8008690:	9204      	strlt	r2, [sp, #16]
 8008692:	7823      	ldrb	r3, [r4, #0]
 8008694:	2b2e      	cmp	r3, #46	@ 0x2e
 8008696:	d10a      	bne.n	80086ae <_vfiprintf_r+0x156>
 8008698:	7863      	ldrb	r3, [r4, #1]
 800869a:	2b2a      	cmp	r3, #42	@ 0x2a
 800869c:	d132      	bne.n	8008704 <_vfiprintf_r+0x1ac>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	9203      	str	r2, [sp, #12]
 80086a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086aa:	3402      	adds	r4, #2
 80086ac:	9305      	str	r3, [sp, #20]
 80086ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008784 <_vfiprintf_r+0x22c>
 80086b2:	7821      	ldrb	r1, [r4, #0]
 80086b4:	2203      	movs	r2, #3
 80086b6:	4650      	mov	r0, sl
 80086b8:	f7f7 fd92 	bl	80001e0 <memchr>
 80086bc:	b138      	cbz	r0, 80086ce <_vfiprintf_r+0x176>
 80086be:	9b04      	ldr	r3, [sp, #16]
 80086c0:	eba0 000a 	sub.w	r0, r0, sl
 80086c4:	2240      	movs	r2, #64	@ 0x40
 80086c6:	4082      	lsls	r2, r0
 80086c8:	4313      	orrs	r3, r2
 80086ca:	3401      	adds	r4, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d2:	4829      	ldr	r0, [pc, #164]	@ (8008778 <_vfiprintf_r+0x220>)
 80086d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086d8:	2206      	movs	r2, #6
 80086da:	f7f7 fd81 	bl	80001e0 <memchr>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d03f      	beq.n	8008762 <_vfiprintf_r+0x20a>
 80086e2:	4b26      	ldr	r3, [pc, #152]	@ (800877c <_vfiprintf_r+0x224>)
 80086e4:	bb1b      	cbnz	r3, 800872e <_vfiprintf_r+0x1d6>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	3307      	adds	r3, #7
 80086ea:	f023 0307 	bic.w	r3, r3, #7
 80086ee:	3308      	adds	r3, #8
 80086f0:	9303      	str	r3, [sp, #12]
 80086f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f4:	443b      	add	r3, r7
 80086f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f8:	e76a      	b.n	80085d0 <_vfiprintf_r+0x78>
 80086fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fe:	460c      	mov	r4, r1
 8008700:	2001      	movs	r0, #1
 8008702:	e7a8      	b.n	8008656 <_vfiprintf_r+0xfe>
 8008704:	2300      	movs	r3, #0
 8008706:	3401      	adds	r4, #1
 8008708:	9305      	str	r3, [sp, #20]
 800870a:	4619      	mov	r1, r3
 800870c:	f04f 0c0a 	mov.w	ip, #10
 8008710:	4620      	mov	r0, r4
 8008712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008716:	3a30      	subs	r2, #48	@ 0x30
 8008718:	2a09      	cmp	r2, #9
 800871a:	d903      	bls.n	8008724 <_vfiprintf_r+0x1cc>
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0c6      	beq.n	80086ae <_vfiprintf_r+0x156>
 8008720:	9105      	str	r1, [sp, #20]
 8008722:	e7c4      	b.n	80086ae <_vfiprintf_r+0x156>
 8008724:	fb0c 2101 	mla	r1, ip, r1, r2
 8008728:	4604      	mov	r4, r0
 800872a:	2301      	movs	r3, #1
 800872c:	e7f0      	b.n	8008710 <_vfiprintf_r+0x1b8>
 800872e:	ab03      	add	r3, sp, #12
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	462a      	mov	r2, r5
 8008734:	4b12      	ldr	r3, [pc, #72]	@ (8008780 <_vfiprintf_r+0x228>)
 8008736:	a904      	add	r1, sp, #16
 8008738:	4630      	mov	r0, r6
 800873a:	f3af 8000 	nop.w
 800873e:	4607      	mov	r7, r0
 8008740:	1c78      	adds	r0, r7, #1
 8008742:	d1d6      	bne.n	80086f2 <_vfiprintf_r+0x19a>
 8008744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008746:	07d9      	lsls	r1, r3, #31
 8008748:	d405      	bmi.n	8008756 <_vfiprintf_r+0x1fe>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	059a      	lsls	r2, r3, #22
 800874e:	d402      	bmi.n	8008756 <_vfiprintf_r+0x1fe>
 8008750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008752:	f7ff f9cf 	bl	8007af4 <__retarget_lock_release_recursive>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	065b      	lsls	r3, r3, #25
 800875a:	f53f af1f 	bmi.w	800859c <_vfiprintf_r+0x44>
 800875e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008760:	e71e      	b.n	80085a0 <_vfiprintf_r+0x48>
 8008762:	ab03      	add	r3, sp, #12
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	462a      	mov	r2, r5
 8008768:	4b05      	ldr	r3, [pc, #20]	@ (8008780 <_vfiprintf_r+0x228>)
 800876a:	a904      	add	r1, sp, #16
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff fcb5 	bl	80080dc <_printf_i>
 8008772:	e7e4      	b.n	800873e <_vfiprintf_r+0x1e6>
 8008774:	08012082 	.word	0x08012082
 8008778:	0801208c 	.word	0x0801208c
 800877c:	00000000 	.word	0x00000000
 8008780:	08008535 	.word	0x08008535
 8008784:	08012088 	.word	0x08012088

08008788 <__swbuf_r>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	460e      	mov	r6, r1
 800878c:	4614      	mov	r4, r2
 800878e:	4605      	mov	r5, r0
 8008790:	b118      	cbz	r0, 800879a <__swbuf_r+0x12>
 8008792:	6a03      	ldr	r3, [r0, #32]
 8008794:	b90b      	cbnz	r3, 800879a <__swbuf_r+0x12>
 8008796:	f7fe ff9f 	bl	80076d8 <__sinit>
 800879a:	69a3      	ldr	r3, [r4, #24]
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	071a      	lsls	r2, r3, #28
 80087a2:	d501      	bpl.n	80087a8 <__swbuf_r+0x20>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	b943      	cbnz	r3, 80087ba <__swbuf_r+0x32>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f82a 	bl	8008804 <__swsetup_r>
 80087b0:	b118      	cbz	r0, 80087ba <__swbuf_r+0x32>
 80087b2:	f04f 37ff 	mov.w	r7, #4294967295
 80087b6:	4638      	mov	r0, r7
 80087b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	1a98      	subs	r0, r3, r2
 80087c0:	6963      	ldr	r3, [r4, #20]
 80087c2:	b2f6      	uxtb	r6, r6
 80087c4:	4283      	cmp	r3, r0
 80087c6:	4637      	mov	r7, r6
 80087c8:	dc05      	bgt.n	80087d6 <__swbuf_r+0x4e>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7fe fecf 	bl	8007570 <_fflush_r>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d1ed      	bne.n	80087b2 <__swbuf_r+0x2a>
 80087d6:	68a3      	ldr	r3, [r4, #8]
 80087d8:	3b01      	subs	r3, #1
 80087da:	60a3      	str	r3, [r4, #8]
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	6022      	str	r2, [r4, #0]
 80087e2:	701e      	strb	r6, [r3, #0]
 80087e4:	6962      	ldr	r2, [r4, #20]
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d004      	beq.n	80087f6 <__swbuf_r+0x6e>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	07db      	lsls	r3, r3, #31
 80087f0:	d5e1      	bpl.n	80087b6 <__swbuf_r+0x2e>
 80087f2:	2e0a      	cmp	r6, #10
 80087f4:	d1df      	bne.n	80087b6 <__swbuf_r+0x2e>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f7fe feb9 	bl	8007570 <_fflush_r>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0d9      	beq.n	80087b6 <__swbuf_r+0x2e>
 8008802:	e7d6      	b.n	80087b2 <__swbuf_r+0x2a>

08008804 <__swsetup_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4b29      	ldr	r3, [pc, #164]	@ (80088ac <__swsetup_r+0xa8>)
 8008808:	4605      	mov	r5, r0
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	460c      	mov	r4, r1
 800880e:	b118      	cbz	r0, 8008818 <__swsetup_r+0x14>
 8008810:	6a03      	ldr	r3, [r0, #32]
 8008812:	b90b      	cbnz	r3, 8008818 <__swsetup_r+0x14>
 8008814:	f7fe ff60 	bl	80076d8 <__sinit>
 8008818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881c:	0719      	lsls	r1, r3, #28
 800881e:	d422      	bmi.n	8008866 <__swsetup_r+0x62>
 8008820:	06da      	lsls	r2, r3, #27
 8008822:	d407      	bmi.n	8008834 <__swsetup_r+0x30>
 8008824:	2209      	movs	r2, #9
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	e033      	b.n	800889c <__swsetup_r+0x98>
 8008834:	0758      	lsls	r0, r3, #29
 8008836:	d512      	bpl.n	800885e <__swsetup_r+0x5a>
 8008838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883a:	b141      	cbz	r1, 800884e <__swsetup_r+0x4a>
 800883c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__swsetup_r+0x46>
 8008844:	4628      	mov	r0, r5
 8008846:	f7ff f983 	bl	8007b50 <_free_r>
 800884a:	2300      	movs	r3, #0
 800884c:	6363      	str	r3, [r4, #52]	@ 0x34
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	2300      	movs	r3, #0
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	b94b      	cbnz	r3, 800887e <__swsetup_r+0x7a>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008874:	d003      	beq.n	800887e <__swsetup_r+0x7a>
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f7ff fd87 	bl	800838c <__smakebuf_r>
 800887e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008882:	f013 0201 	ands.w	r2, r3, #1
 8008886:	d00a      	beq.n	800889e <__swsetup_r+0x9a>
 8008888:	2200      	movs	r2, #0
 800888a:	60a2      	str	r2, [r4, #8]
 800888c:	6962      	ldr	r2, [r4, #20]
 800888e:	4252      	negs	r2, r2
 8008890:	61a2      	str	r2, [r4, #24]
 8008892:	6922      	ldr	r2, [r4, #16]
 8008894:	b942      	cbnz	r2, 80088a8 <__swsetup_r+0xa4>
 8008896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800889a:	d1c5      	bne.n	8008828 <__swsetup_r+0x24>
 800889c:	bd38      	pop	{r3, r4, r5, pc}
 800889e:	0799      	lsls	r1, r3, #30
 80088a0:	bf58      	it	pl
 80088a2:	6962      	ldrpl	r2, [r4, #20]
 80088a4:	60a2      	str	r2, [r4, #8]
 80088a6:	e7f4      	b.n	8008892 <__swsetup_r+0x8e>
 80088a8:	2000      	movs	r0, #0
 80088aa:	e7f7      	b.n	800889c <__swsetup_r+0x98>
 80088ac:	20000220 	.word	0x20000220

080088b0 <_raise_r>:
 80088b0:	291f      	cmp	r1, #31
 80088b2:	b538      	push	{r3, r4, r5, lr}
 80088b4:	4605      	mov	r5, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	d904      	bls.n	80088c4 <_raise_r+0x14>
 80088ba:	2316      	movs	r3, #22
 80088bc:	6003      	str	r3, [r0, #0]
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088c6:	b112      	cbz	r2, 80088ce <_raise_r+0x1e>
 80088c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088cc:	b94b      	cbnz	r3, 80088e2 <_raise_r+0x32>
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 f830 	bl	8008934 <_getpid_r>
 80088d4:	4622      	mov	r2, r4
 80088d6:	4601      	mov	r1, r0
 80088d8:	4628      	mov	r0, r5
 80088da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088de:	f000 b817 	b.w	8008910 <_kill_r>
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d00a      	beq.n	80088fc <_raise_r+0x4c>
 80088e6:	1c59      	adds	r1, r3, #1
 80088e8:	d103      	bne.n	80088f2 <_raise_r+0x42>
 80088ea:	2316      	movs	r3, #22
 80088ec:	6003      	str	r3, [r0, #0]
 80088ee:	2001      	movs	r0, #1
 80088f0:	e7e7      	b.n	80088c2 <_raise_r+0x12>
 80088f2:	2100      	movs	r1, #0
 80088f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088f8:	4620      	mov	r0, r4
 80088fa:	4798      	blx	r3
 80088fc:	2000      	movs	r0, #0
 80088fe:	e7e0      	b.n	80088c2 <_raise_r+0x12>

08008900 <raise>:
 8008900:	4b02      	ldr	r3, [pc, #8]	@ (800890c <raise+0xc>)
 8008902:	4601      	mov	r1, r0
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	f7ff bfd3 	b.w	80088b0 <_raise_r>
 800890a:	bf00      	nop
 800890c:	20000220 	.word	0x20000220

08008910 <_kill_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d07      	ldr	r5, [pc, #28]	@ (8008930 <_kill_r+0x20>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	4611      	mov	r1, r2
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	f7f9 f99b 	bl	8001c58 <_kill>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d102      	bne.n	800892c <_kill_r+0x1c>
 8008926:	682b      	ldr	r3, [r5, #0]
 8008928:	b103      	cbz	r3, 800892c <_kill_r+0x1c>
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	bd38      	pop	{r3, r4, r5, pc}
 800892e:	bf00      	nop
 8008930:	2000af80 	.word	0x2000af80

08008934 <_getpid_r>:
 8008934:	f7f9 b988 	b.w	8001c48 <_getpid>

08008938 <_malloc_usable_size_r>:
 8008938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893c:	1f18      	subs	r0, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	bfbc      	itt	lt
 8008942:	580b      	ldrlt	r3, [r1, r0]
 8008944:	18c0      	addlt	r0, r0, r3
 8008946:	4770      	bx	lr

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
