
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000877c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009584  0800890c  0800890c  0000990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e90  08011e90  00013264  2**0
                  CONTENTS
  4 .ARM          00000008  08011e90  08011e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e98  08011e98  00013264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e98  08011e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011e9c  08011e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08011ea0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adb8  20000264  08012104  00013264  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  2000b01c  08012104  0001401c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b3b  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fd  00000000  00000000  00025dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  000292d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbe  00000000  00000000  0002a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289f1  00000000  00000000  0002adee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001641a  00000000  00000000  000537df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec282  00000000  00000000  00069bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ac  00000000  00000000  00155ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088f4 	.word	0x080088f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080088f4 	.word	0x080088f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ringBufferSetup>:
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];
//=========================================================

void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
	rb->mask = size;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <USART_kbhit>:

uint8_t USART_kbhit(){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <USART_kbhit+0x20>)
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <USART_kbhit+0x20>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	429a      	cmp	r2, r3
 800059e:	d101      	bne.n	80005a4 <USART_kbhit+0x14>
		return 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	e000      	b.n	80005a6 <USART_kbhit+0x16>
	}else{
		return 1;
 80005a4:	2301      	movs	r3, #1
	}
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	20000280 	.word	0x20000280

080005b4 <USART_getchar>:

int16_t USART_getchar() {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <USART_getchar+0x4c>)
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <USART_getchar+0x4c>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d013      	beq.n	80005ee <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <USART_getchar+0x4c>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <USART_getchar+0x50>)
 80005cc:	5cd3      	ldrb	r3, [r2, r3]
 80005ce:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <USART_getchar+0x4c>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000600 <USART_getchar+0x4c>)
 80005d8:	68d2      	ldr	r2, [r2, #12]
 80005da:	fbb3 f1f2 	udiv	r1, r3, r2
 80005de:	fb01 f202 	mul.w	r2, r1, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <USART_getchar+0x4c>)
 80005e6:	6053      	str	r3, [r2, #4]
        return tmp;
 80005e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ec:	e001      	b.n	80005f2 <USART_getchar+0x3e>
    }
    return -1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000280 	.word	0x20000280
 8000604:	20000a04 	.word	0x20000a04

08000608 <USART_sendFrame>:

void USART_sendFrame(const uint8_t* data, size_t length) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <USART_sendFrame+0xb4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop

    __disable_irq();
    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	e016      	b.n	8000650 <USART_sendFrame+0x48>
        USART_TxBuf[idx] = data[i];
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	4413      	add	r3, r2
 8000628:	7819      	ldrb	r1, [r3, #0]
 800062a:	4a25      	ldr	r2, [pc, #148]	@ (80006c0 <USART_sendFrame+0xb8>)
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	4413      	add	r3, r2
 8000630:	460a      	mov	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) % txRingBuffer.mask;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	461a      	mov	r2, r3
 800063a:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <USART_sendFrame+0xb4>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000642:	fb01 f303 	mul.w	r3, r1, r3
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	3301      	adds	r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3e4      	bcc.n	8000622 <USART_sendFrame+0x1a>
    }

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <USART_sendFrame+0xb4>)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <USART_sendFrame+0xb4>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	d122      	bne.n	80006aa <USART_sendFrame+0xa2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <USART_sendFrame+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800066e:	2b80      	cmp	r3, #128	@ 0x80
 8000670:	d11b      	bne.n	80006aa <USART_sendFrame+0xa2>
        txRingBuffer.writeIndex = idx;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <USART_sendFrame+0xb4>)
 8000676:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <USART_sendFrame+0xb4>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <USART_sendFrame+0xb8>)
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <USART_sendFrame+0xb4>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	3301      	adds	r3, #1
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <USART_sendFrame+0xb4>)
 800068a:	68d2      	ldr	r2, [r2, #12]
 800068c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000690:	fb01 f202 	mul.w	r2, r1, r2
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <USART_sendFrame+0xb4>)
 8000698:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800069a:	f107 030f 	add.w	r3, r7, #15
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <USART_sendFrame+0xbc>)
 80006a4:	f004 fd4a 	bl	800513c <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006a8:	e002      	b.n	80006b0 <USART_sendFrame+0xa8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	4a03      	ldr	r2, [pc, #12]	@ (80006bc <USART_sendFrame+0xb4>)
 80006ae:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006b0:	b662      	cpsie	i
}
 80006b2:	bf00      	nop
    }

    __enable_irq();
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000290 	.word	0x20000290
 80006c0:	200002a0 	.word	0x200002a0
 80006c4:	2000ae48 	.word	0x2000ae48

080006c8 <calculateCrc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculateCrc16(uint8_t *data, size_t length, uint8_t crc_out[2]) {
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	@ 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 80006d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006d8:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
 80006de:	e019      	b.n	8000714 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 80006ea:	8bfb      	ldrh	r3, [r7, #30]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	4053      	eors	r3, r2
 80006f6:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 80006f8:	8bfb      	ldrh	r3, [r7, #30]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	b21a      	sxth	r2, r3
 80006fe:	7dbb      	ldrb	r3, [r7, #22]
 8000700:	490f      	ldr	r1, [pc, #60]	@ (8000740 <calculateCrc16+0x78>)
 8000702:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000706:	b21b      	sxth	r3, r3
 8000708:	4053      	eors	r3, r2
 800070a:	b21b      	sxth	r3, r3
 800070c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	3301      	adds	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	429a      	cmp	r2, r3
 800071a:	d3e1      	bcc.n	80006e0 <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 800071c:	8bfb      	ldrh	r3, [r7, #30]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2da      	uxtb	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	8bfa      	ldrh	r2, [r7, #30]
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	701a      	strb	r2, [r3, #0]
}
 8000732:	bf00      	nop
 8000734:	3724      	adds	r7, #36	@ 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000000 	.word	0x20000000

08000744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_DMA_Init+0x38>)
 800074c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800074e:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <MX_DMA_Init+0x38>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6493      	str	r3, [r2, #72]	@ 0x48
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_DMA_Init+0x38>)
 8000758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	200f      	movs	r0, #15
 8000768:	f001 ff01 	bl	800256e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800076c:	200f      	movs	r0, #15
 800076e:	f001 ff1a 	bl	80025a6 <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <resetFrameState>:
Frame frame;
ScrollingTextState text = { 0 };
//======================================================================

//======================FUNKCJE POMOCNICZE==============================
static void resetFrameState() {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	inFrame = false;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <resetFrameState+0x20>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	escapeDetected = false;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <resetFrameState+0x24>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
	bxIndex = 0;
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <resetFrameState+0x28>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000c28 	.word	0x20000c28
 80007a4:	20000c22 	.word	0x20000c22
 80007a8:	20000c24 	.word	0x20000c24

080007ac <stopAnimation>:

static void stopAnimation(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <stopAnimation+0x18>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000cb4 	.word	0x20000cb4

080007c8 <isWithinBounds>:

static bool isWithinBounds(int x, int y) {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH) && (y >= 0 && y < LCD_HEIGHT);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <isWithinBounds+0x26>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b9f      	cmp	r3, #159	@ 0x9f
 80007dc:	dc07      	bgt.n	80007ee <isWithinBounds+0x26>
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db04      	blt.n	80007ee <isWithinBounds+0x26>
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007e8:	dc01      	bgt.n	80007ee <isWithinBounds+0x26>
 80007ea:	2301      	movs	r3, #1
 80007ec:	e000      	b.n	80007f0 <isWithinBounds+0x28>
 80007ee:	2300      	movs	r3, #0
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <safeCompare>:

static bool safeCompare(const char *str1, const char *str2, size_t len) {
 8000802:	b580      	push	{r7, lr}
 8000804:	b084      	sub	sp, #16
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
	if (str1 == NULL || str2 == NULL) {
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <safeCompare+0x18>
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <safeCompare+0x1c>
		return false;
 800081a:	2300      	movs	r3, #0
 800081c:	e00a      	b.n	8000834 <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f007 fbc2 	bl	8007fac <memcmp>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf0c      	ite	eq
 800082e:	2301      	moveq	r3, #1
 8000830:	2300      	movne	r3, #0
 8000832:	b2db      	uxtb	r3, r3
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <isValidTriangle>:

static bool isValidTriangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		int16_t x3, int16_t y3) {
 800083c:	b490      	push	{r4, r7}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	4604      	mov	r4, r0
 8000844:	4608      	mov	r0, r1
 8000846:	4611      	mov	r1, r2
 8000848:	461a      	mov	r2, r3
 800084a:	4623      	mov	r3, r4
 800084c:	80fb      	strh	r3, [r7, #6]
 800084e:	4603      	mov	r3, r0
 8000850:	80bb      	strh	r3, [r7, #4]
 8000852:	460b      	mov	r3, r1
 8000854:	807b      	strh	r3, [r7, #2]
 8000856:	4613      	mov	r3, r2
 8000858:	803b      	strh	r3, [r7, #0]
	int32_t a2 = (int32_t) (x2 - x1) * (x2 - x1)
 800085a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800085e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000868:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800086c:	1a8a      	subs	r2, r1, r2
 800086e:	fb03 f202 	mul.w	r2, r3, r2
			+ (int32_t) (y2 - y1) * (y2 - y1);
 8000872:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000876:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800087a:	1acb      	subs	r3, r1, r3
 800087c:	f9b7 0000 	ldrsh.w	r0, [r7]
 8000880:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000884:	1a41      	subs	r1, r0, r1
 8000886:	fb01 f303 	mul.w	r3, r1, r3
	int32_t a2 = (int32_t) (x2 - x1) * (x2 - x1)
 800088a:	4413      	add	r3, r2
 800088c:	617b      	str	r3, [r7, #20]
	int32_t b2 = (int32_t) (x3 - x2) * (x3 - x2)
 800088e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000892:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800089c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008a0:	1a8a      	subs	r2, r1, r2
 80008a2:	fb03 f202 	mul.w	r2, r3, r2
			+ (int32_t) (y3 - y2) * (y3 - y2);
 80008a6:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008ae:	1acb      	subs	r3, r1, r3
 80008b0:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 80008b4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80008b8:	1a41      	subs	r1, r0, r1
 80008ba:	fb01 f303 	mul.w	r3, r1, r3
	int32_t b2 = (int32_t) (x3 - x2) * (x3 - x2)
 80008be:	4413      	add	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
	int32_t c2 = (int32_t) (x1 - x3) * (x1 - x3)
 80008c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80008d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80008d4:	1a8a      	subs	r2, r1, r2
 80008d6:	fb03 f202 	mul.w	r2, r3, r2
			+ (int32_t) (y1 - y3) * (y1 - y3);
 80008da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80008e2:	1acb      	subs	r3, r1, r3
 80008e4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80008e8:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80008ec:	1a41      	subs	r1, r0, r1
 80008ee:	fb01 f303 	mul.w	r3, r1, r3
	int32_t c2 = (int32_t) (x1 - x3) * (x1 - x3)
 80008f2:	4413      	add	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]

	if (a2 + b2 <= c2 || b2 + c2 <= a2 || c2 + a2 <= b2) {
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4413      	add	r3, r2
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	429a      	cmp	r2, r3
 8000900:	da0b      	bge.n	800091a <isValidTriangle+0xde>
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	429a      	cmp	r2, r3
 800090c:	da05      	bge.n	800091a <isValidTriangle+0xde>
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	4413      	add	r3, r2
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	429a      	cmp	r2, r3
 8000918:	db01      	blt.n	800091e <isValidTriangle+0xe2>
		return false;
 800091a:	2300      	movs	r3, #0
 800091c:	e01f      	b.n	800095e <isValidTriangle+0x122>
	}

	int32_t cross = (int32_t) (x2 - x1) * (y3 - y1)
 800091e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 800092c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000930:	1a8a      	subs	r2, r1, r2
 8000932:	fb03 f202 	mul.w	r2, r3, r2
			- (int32_t) (y2 - y1) * (x3 - x1);
 8000936:	f9b7 1000 	ldrsh.w	r1, [r7]
 800093a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800093e:	1acb      	subs	r3, r1, r3
 8000940:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000944:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000948:	1a41      	subs	r1, r0, r1
 800094a:	fb01 f303 	mul.w	r3, r1, r3
	int32_t cross = (int32_t) (x2 - x1) * (y3 - y1)
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	60bb      	str	r3, [r7, #8]
	if (cross == 0) {
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <isValidTriangle+0x120>
		return false;
 8000958:	2300      	movs	r3, #0
 800095a:	e000      	b.n	800095e <isValidTriangle+0x122>
	}

	return true;
 800095c:	2301      	movs	r3, #1
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bc90      	pop	{r4, r7}
 8000966:	4770      	bx	lr

08000968 <sendStatus>:

static void sendStatus(StatusCode_t status) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af02      	add	r7, sp, #8
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	if (status < STATUS_COUNT) {
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d80a      	bhi.n	800098e <sendStatus+0x26>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "%s", STATUS_MESSAGES[status]);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4a07      	ldr	r2, [pc, #28]	@ (8000998 <sendStatus+0x30>)
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <sendStatus+0x34>)
 8000984:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <sendStatus+0x38>)
 8000986:	2167      	movs	r1, #103	@ 0x67
 8000988:	2068      	movs	r0, #104	@ 0x68
 800098a:	f000 fbef 	bl	800116c <prepareFrame>
	}
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	080089f0 	.word	0x080089f0
 800099c:	08008998 	.word	0x08008998
 80009a0:	0800899c 	.word	0x0800899c

080009a4 <clearFrame>:

static void clearFrame(Frame *frame) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if (frame) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00d      	beq.n	80009ce <clearFrame+0x2a>
		memset(frame->data, 0, sizeof(frame->data));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3305      	adds	r3, #5
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 fb06 	bl	8007fcc <memset>
		memset(frame->command, 0, sizeof(frame->command));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3302      	adds	r3, #2
 80009c4:	2203      	movs	r2, #3
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 faff 	bl	8007fcc <memset>
	}
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <parseCoordinates>:

static bool parseCoordinates(const uint8_t *data, int *x, int *y) {
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	*x = data[0];  // Pierwszy bajt to x
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	601a      	str	r2, [r3, #0]
	*y = data[2];  // Drugi bajt to y
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3302      	adds	r3, #2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	601a      	str	r2, [r3, #0]
	return true;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <parseParameters>:

static bool parseParameters(const uint8_t *data, const char *format, ...) {
 8000a06:	b40e      	push	{r1, r2, r3}
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08f      	sub	sp, #60	@ 0x3c
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if (!data || !format) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <parseParameters+0x16>
 8000a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <parseParameters+0x1a>
		return false;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e0f0      	b.n	8000c02 <parseParameters+0x1fc>
	}
	va_list args;
	va_start(args, format);
 8000a20:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a24:	60bb      	str	r3, [r7, #8]

	const uint8_t *data_ptr = data;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *fmt_ptr = format;
 8000a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a2c:	633b      	str	r3, [r7, #48]	@ 0x30

	int u_param_count = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t scrollSpeed = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	while (*fmt_ptr) {
 8000a38:	e0dd      	b.n	8000bf6 <parseParameters+0x1f0>
		switch (*fmt_ptr) {
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b75      	cmp	r3, #117	@ 0x75
 8000a40:	d007      	beq.n	8000a52 <parseParameters+0x4c>
 8000a42:	2b75      	cmp	r3, #117	@ 0x75
 8000a44:	f300 80d1 	bgt.w	8000bea <parseParameters+0x1e4>
 8000a48:	2b43      	cmp	r3, #67	@ 0x43
 8000a4a:	d020      	beq.n	8000a8e <parseParameters+0x88>
 8000a4c:	2b74      	cmp	r3, #116	@ 0x74
 8000a4e:	d06a      	beq.n	8000b26 <parseParameters+0x120>
 8000a50:	e0cb      	b.n	8000bea <parseParameters+0x1e4>
		case 'u': {
			uint8_t *value_ptr = va_arg(args, uint8_t*);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1d1a      	adds	r2, r3, #4
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	623b      	str	r3, [r7, #32]
			*value_ptr = *data_ptr++;
 8000a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	637a      	str	r2, [r7, #52]	@ 0x34
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	6a3b      	ldr	r3, [r7, #32]
 8000a66:	701a      	strb	r2, [r3, #0]
			u_param_count++;
 8000a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (u_param_count == 4) {
 8000a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d103      	bne.n	8000a7c <parseParameters+0x76>
				scrollSpeed = *value_ptr;
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			}
			if (*data_ptr == ',') {
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a82:	f040 80b4 	bne.w	8000bee <parseParameters+0x1e8>
				data_ptr++;
 8000a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a88:	3301      	adds	r3, #1
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
			}
			break;
 8000a8c:	e0af      	b.n	8000bee <parseParameters+0x1e8>
		}
		case 'C': {
			color_t *color_ptr = va_arg(args, color_t*);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1d1a      	adds	r2, r3, #4
 8000a92:	60ba      	str	r2, [r7, #8]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]

			if ((*data_ptr >= 'A' && *data_ptr <= 'Z')
 8000a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b40      	cmp	r3, #64	@ 0x40
 8000a9e:	d903      	bls.n	8000aa8 <parseParameters+0xa2>
 8000aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b5a      	cmp	r3, #90	@ 0x5a
 8000aa6:	d907      	bls.n	8000ab8 <parseParameters+0xb2>
					|| (*data_ptr >= 'a' && *data_ptr <= 'z')) {
 8000aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b60      	cmp	r3, #96	@ 0x60
 8000aae:	d905      	bls.n	8000abc <parseParameters+0xb6>
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b7a      	cmp	r3, #122	@ 0x7a
 8000ab6:	d801      	bhi.n	8000abc <parseParameters+0xb6>
				return false;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e0a2      	b.n	8000c02 <parseParameters+0x1fc>
			}

			uint8_t lsb = *data_ptr++;
 8000abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	73fb      	strb	r3, [r7, #15]
			if (*data_ptr == ',')
 8000ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b2c      	cmp	r3, #44	@ 0x2c
 8000acc:	d102      	bne.n	8000ad4 <parseParameters+0xce>
				data_ptr++;
 8000ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34

			if ((*data_ptr >= 'A' && *data_ptr <= 'Z')
 8000ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b40      	cmp	r3, #64	@ 0x40
 8000ada:	d903      	bls.n	8000ae4 <parseParameters+0xde>
 8000adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b5a      	cmp	r3, #90	@ 0x5a
 8000ae2:	d907      	bls.n	8000af4 <parseParameters+0xee>
					|| (*data_ptr >= 'a' && *data_ptr <= 'z')) {
 8000ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b60      	cmp	r3, #96	@ 0x60
 8000aea:	d905      	bls.n	8000af8 <parseParameters+0xf2>
 8000aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b7a      	cmp	r3, #122	@ 0x7a
 8000af2:	d801      	bhi.n	8000af8 <parseParameters+0xf2>
				return false;
 8000af4:	2300      	movs	r3, #0
 8000af6:	e084      	b.n	8000c02 <parseParameters+0x1fc>
			}

			uint8_t msb = *data_ptr++;
 8000af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	637a      	str	r2, [r7, #52]	@ 0x34
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	73bb      	strb	r3, [r7, #14]
			if (*data_ptr == ',')
 8000b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b08:	d102      	bne.n	8000b10 <parseParameters+0x10a>
				data_ptr++;
 8000b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
			*color_ptr = ((uint16_t) msb << 8) | lsb;
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	b21b      	sxth	r3, r3
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	801a      	strh	r2, [r3, #0]
			break;
 8000b24:	e064      	b.n	8000bf0 <parseParameters+0x1ea>
		}
		case 't': {
			size_t realCharCount = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
			size_t maxChars = (scrollSpeed == 0) ? 25 : 50;
 8000b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <parseParameters+0x130>
 8000b32:	2319      	movs	r3, #25
 8000b34:	e000      	b.n	8000b38 <parseParameters+0x132>
 8000b36:	2332      	movs	r3, #50	@ 0x32
 8000b38:	61fb      	str	r3, [r7, #28]
			wchar_t *text_ptr = va_arg(args, wchar_t*);
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1d1a      	adds	r2, r3, #4
 8000b3e:	60ba      	str	r2, [r7, #8]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	61bb      	str	r3, [r7, #24]

			while (*data_ptr && realCharCount < maxChars) {
 8000b44:	e037      	b.n	8000bb6 <parseParameters+0x1b0>
				if ((*data_ptr & 0x80) == 0) {
 8000b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0c      	blt.n	8000b6a <parseParameters+0x164>
					text_ptr[realCharCount++] = (wchar_t) *data_ptr++;
 8000b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	637a      	str	r2, [r7, #52]	@ 0x34
 8000b56:	7819      	ldrb	r1, [r3, #0]
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4413      	add	r3, r2
 8000b64:	460a      	mov	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e025      	b.n	8000bb6 <parseParameters+0x1b0>
				} else if ((*data_ptr & 0xE0) == 0xC0) {
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8000b74:	d11c      	bne.n	8000bb0 <parseParameters+0x1aa>
					if (!data_ptr[1])
 8000b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b78:	3301      	adds	r3, #1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d023      	beq.n	8000bc8 <parseParameters+0x1c2>
						break;
					wchar_t wc = ((data_ptr[0] & 0x1F) << 6)
 8000b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
							| (data_ptr[1] & 0x3F);
 8000b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b94:	4313      	orrs	r3, r2
					wchar_t wc = ((data_ptr[0] & 0x1F) << 6)
 8000b96:	617b      	str	r3, [r7, #20]
					text_ptr[realCharCount++] = wc;
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	601a      	str	r2, [r3, #0]
					data_ptr += 2;
 8000ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000baa:	3302      	adds	r3, #2
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bae:	e002      	b.n	8000bb6 <parseParameters+0x1b0>
				} else {
					data_ptr++;
 8000bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	637b      	str	r3, [r7, #52]	@ 0x34
			while (*data_ptr && realCharCount < maxChars) {
 8000bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <parseParameters+0x1c4>
 8000bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d3bf      	bcc.n	8000b46 <parseParameters+0x140>
 8000bc6:	e000      	b.n	8000bca <parseParameters+0x1c4>
						break;
 8000bc8:	bf00      	nop
				}
			}

			if (realCharCount > maxChars) {
 8000bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d904      	bls.n	8000bdc <parseParameters+0x1d6>
				va_end(args);
				sendStatus(ERR_TOO_MUCH_TEXT);
 8000bd2:	2008      	movs	r0, #8
 8000bd4:	f7ff fec8 	bl	8000968 <sendStatus>
				return false;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e012      	b.n	8000c02 <parseParameters+0x1fc>
			}

			text_ptr[realCharCount] = L'\0';
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4413      	add	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
			break;
 8000be8:	e002      	b.n	8000bf0 <parseParameters+0x1ea>
		}
		default:
			va_end(args);
			return false;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e009      	b.n	8000c02 <parseParameters+0x1fc>
			break;
 8000bee:	bf00      	nop
		}
		fmt_ptr++;
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*fmt_ptr) {
 8000bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f47f af1d 	bne.w	8000a3a <parseParameters+0x34>
	}

	va_end(args);
	return true;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	373c      	adds	r7, #60	@ 0x3c
 8000c06:	46bd      	mov	sp, r7
 8000c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0c:	b003      	add	sp, #12
 8000c0e:	4770      	bx	lr

08000c10 <decodeFrame>:

static bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	71fb      	strb	r3, [r7, #7]
	uint8_t ownCrc[2];
	uint8_t incCrc[2];

	if (len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_WITHOUT_STUFFING) {
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b06      	cmp	r3, #6
 8000c22:	d957      	bls.n	8000cd4 <decodeFrame+0xc4>
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b87      	cmp	r3, #135	@ 0x87
 8000c28:	d854      	bhi.n	8000cd4 <decodeFrame+0xc4>
		uint8_t k = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	75fb      	strb	r3, [r7, #23]
		frame->sender = bx[k++];
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	75fa      	strb	r2, [r7, #23]
 8000c34:	461a      	mov	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	701a      	strb	r2, [r3, #0]
		frame->receiver = bx[k++];
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	75fa      	strb	r2, [r7, #23]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	705a      	strb	r2, [r3, #1]
		if (frame->sender != PC_ADDR) {
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b67      	cmp	r3, #103	@ 0x67
 8000c58:	d004      	beq.n	8000c64 <decodeFrame+0x54>
			sendStatus(ERR_WRONG_SENDER);
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff fe84 	bl	8000968 <sendStatus>
			return false;
 8000c60:	2300      	movs	r3, #0
 8000c62:	e038      	b.n	8000cd6 <decodeFrame+0xc6>
		}

		memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c98      	adds	r0, r3, #2
 8000c68:	7dfb      	ldrb	r3, [r7, #23]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2203      	movs	r2, #3
 8000c70:	4619      	mov	r1, r3
 8000c72:	f007 f9f3 	bl	800805c <memcpy>
		k += COMMAND_LENGTH;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	3303      	adds	r3, #3
 8000c7a:	75fb      	strb	r3, [r7, #23]

		uint8_t dataLen = len - MIN_DECODED_FRAME_LEN; //to sprawdzic
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	3b07      	subs	r3, #7
 8000c80:	75bb      	strb	r3, [r7, #22]
		memcpy(frame->data, &bx[k], dataLen);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1d58      	adds	r0, r3, #5
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	7dba      	ldrb	r2, [r7, #22]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f007 f9e4 	bl	800805c <memcpy>
		k += dataLen;
 8000c94:	7dfa      	ldrb	r2, [r7, #23]
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	4413      	add	r3, r2
 8000c9a:	75fb      	strb	r3, [r7, #23]

		memcpy(incCrc, &bx[k], 2);
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	823b      	strh	r3, [r7, #16]
		calculateCrc16((uint8_t*) frame, k, ownCrc);
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	f107 0214 	add.w	r2, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68b8      	ldr	r0, [r7, #8]
 8000cb2:	f7ff fd09 	bl	80006c8 <calculateCrc16>
		if (ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 8000cb6:	7d3a      	ldrb	r2, [r7, #20]
 8000cb8:	7c3b      	ldrb	r3, [r7, #16]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d103      	bne.n	8000cc6 <decodeFrame+0xb6>
 8000cbe:	7d7a      	ldrb	r2, [r7, #21]
 8000cc0:	7c7b      	ldrb	r3, [r7, #17]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d004      	beq.n	8000cd0 <decodeFrame+0xc0>
			sendStatus(ERR_WRONG_CRC);
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f7ff fe4e 	bl	8000968 <sendStatus>
			return false;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e002      	b.n	8000cd6 <decodeFrame+0xc6>
		}
		return true;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <decodeFrame+0xc6>
	}
	return false;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <byteStuffing>:

static size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000cde:	b480      	push	{r7}
 8000ce0:	b087      	sub	sp, #28
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
	size_t j = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < input_len; i++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	e04b      	b.n	8000d8c <byteStuffing+0xae>
		if (input[i] == ESCAPE_CHAR) {
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b7d      	cmp	r3, #125	@ 0x7d
 8000cfe:	d10e      	bne.n	8000d1e <byteStuffing+0x40>
			output[j++] = ESCAPE_CHAR;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	617a      	str	r2, [r7, #20]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	227d      	movs	r2, #125	@ 0x7d
 8000d0c:	701a      	strb	r2, [r3, #0]
			output[j++] = ESCAPE_CHAR_STUFF;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	617a      	str	r2, [r7, #20]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	225d      	movs	r2, #93	@ 0x5d
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e033      	b.n	8000d86 <byteStuffing+0xa8>
		} else if (input[i] == FRAME_START) {
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d28:	d10e      	bne.n	8000d48 <byteStuffing+0x6a>
			output[j++] = ESCAPE_CHAR;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	617a      	str	r2, [r7, #20]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	227d      	movs	r2, #125	@ 0x7d
 8000d36:	701a      	strb	r2, [r3, #0]
			output[j++] = FRAME_START_STUFF;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	617a      	str	r2, [r7, #20]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	225e      	movs	r2, #94	@ 0x5e
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e01e      	b.n	8000d86 <byteStuffing+0xa8>
		} else if (input[i] == FRAME_END) {
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b60      	cmp	r3, #96	@ 0x60
 8000d52:	d10e      	bne.n	8000d72 <byteStuffing+0x94>
			output[j++] = ESCAPE_CHAR;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	617a      	str	r2, [r7, #20]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	227d      	movs	r2, #125	@ 0x7d
 8000d60:	701a      	strb	r2, [r3, #0]
			output[j++] = FRAME_END_STUFF;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	1c5a      	adds	r2, r3, #1
 8000d66:	617a      	str	r2, [r7, #20]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2226      	movs	r2, #38	@ 0x26
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e009      	b.n	8000d86 <byteStuffing+0xa8>
		} else {
			output[j++] = input[i];
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	441a      	add	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	1c59      	adds	r1, r3, #1
 8000d7c:	6179      	str	r1, [r7, #20]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	440b      	add	r3, r1
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < input_len; i++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d3af      	bcc.n	8000cf4 <byteStuffing+0x16>
		}
	}
	return j;
 8000d94:	697b      	ldr	r3, [r7, #20]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	371c      	adds	r7, #28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <executeONK>:

//======================================================================

//==================FUNCKJE DLA WYŚWIETLACZA===================================
static void executeONK(Frame *frame) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	2300      	movs	r3, #0
 8000db2:	73bb      	strb	r3, [r7, #14]
 8000db4:	2300      	movs	r3, #0
 8000db6:	737b      	strb	r3, [r7, #13]
 8000db8:	2300      	movs	r3, #0
 8000dba:	733b      	strb	r3, [r7, #12]
	color_t color = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	817b      	strh	r3, [r7, #10]
	if (!parseParameters(frame->data, "uuuuC", &x, &y, &r, &filling, &color)) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	1d58      	adds	r0, r3, #5
 8000dc4:	f107 010e 	add.w	r1, r7, #14
 8000dc8:	f107 020f 	add.w	r2, r7, #15
 8000dcc:	f107 030a 	add.w	r3, r7, #10
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	f107 030d 	add.w	r3, r7, #13
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	460b      	mov	r3, r1
 8000de0:	4914      	ldr	r1, [pc, #80]	@ (8000e34 <executeONK+0x90>)
 8000de2:	f7ff fe10 	bl	8000a06 <parseParameters>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <executeONK+0x56>
		sendStatus(ERR_NOT_RECOGNIZED);
 8000df2:	2009      	movs	r0, #9
 8000df4:	f7ff fdb8 	bl	8000968 <sendStatus>
 8000df8:	e019      	b.n	8000e2e <executeONK+0x8a>
		return;
	}
	switch (filling) {
 8000dfa:	7b3b      	ldrb	r3, [r7, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <executeONK+0x62>
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d00a      	beq.n	8000e1a <executeONK+0x76>
 8000e04:	e013      	b.n	8000e2e <executeONK+0x8a>
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	b218      	sxth	r0, r3
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	b219      	sxth	r1, r3
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	f006 fc8a 	bl	800772c <hagl_draw_circle>
		break;
 8000e18:	e009      	b.n	8000e2e <executeONK+0x8a>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	b218      	sxth	r0, r3
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	b219      	sxth	r1, r3
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	f006 fdaf 	bl	800798a <hagl_fill_circle>
		break;
 8000e2c:	bf00      	nop
	}
}
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	080089a0 	.word	0x080089a0

08000e38 <executeONP>:

static void executeONP(Frame *frame) {
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af04      	add	r7, sp, #16
 8000e3e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	2300      	movs	r3, #0
 8000e46:	73bb      	strb	r3, [r7, #14]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	737b      	strb	r3, [r7, #13]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	733b      	strb	r3, [r7, #12]
 8000e50:	2300      	movs	r3, #0
 8000e52:	72fb      	strb	r3, [r7, #11]
	color_t color = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuuC", &x, &y, &width, &height,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	1d58      	adds	r0, r3, #5
 8000e5c:	f107 010e 	add.w	r1, r7, #14
 8000e60:	f107 020f 	add.w	r2, r7, #15
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	f107 030b 	add.w	r3, r7, #11
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	f107 030d 	add.w	r3, r7, #13
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4919      	ldr	r1, [pc, #100]	@ (8000ee4 <executeONP+0xac>)
 8000e80:	f7ff fdc1 	bl	8000a06 <parseParameters>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f083 0301 	eor.w	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <executeONP+0x60>
			&filling, &color)) {
		sendStatus(ERR_NOT_RECOGNIZED);
 8000e90:	2009      	movs	r0, #9
 8000e92:	f7ff fd69 	bl	8000968 <sendStatus>
 8000e96:	e021      	b.n	8000edc <executeONP+0xa4>
		return;
	}

	switch (filling) {
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <executeONP+0x6c>
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d00e      	beq.n	8000ec0 <executeONP+0x88>
 8000ea2:	e01b      	b.n	8000edc <executeONP+0xa4>
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	b218      	sxth	r0, r3
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	b219      	sxth	r1, r3
 8000eac:	7b7b      	ldrb	r3, [r7, #13]
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	7b3b      	ldrb	r3, [r7, #12]
 8000eb2:	b21c      	sxth	r4, r3
 8000eb4:	893b      	ldrh	r3, [r7, #8]
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f006 f8d1 	bl	8007060 <hagl_draw_rectangle>
		break;
 8000ebe:	e00d      	b.n	8000edc <executeONP+0xa4>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	b218      	sxth	r0, r3
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
 8000ec6:	b219      	sxth	r1, r3
 8000ec8:	7b7b      	ldrb	r3, [r7, #13]
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	b21c      	sxth	r4, r3
 8000ed0:	893b      	ldrh	r3, [r7, #8]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	f006 f949 	bl	800716c <hagl_fill_rectangle>
		break;
 8000eda:	bf00      	nop
	}
}
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	080089a8 	.word	0x080089a8

08000ee8 <executeONT>:

static void executeONT(Frame *frame) {
 8000ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eea:	b08d      	sub	sp, #52	@ 0x34
 8000eec:	af06      	add	r7, sp, #24
 8000eee:	6078      	str	r0, [r7, #4]
	uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75fb      	strb	r3, [r7, #23]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75bb      	strb	r3, [r7, #22]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	757b      	strb	r3, [r7, #21]
 8000efc:	2300      	movs	r3, #0
 8000efe:	753b      	strb	r3, [r7, #20]
 8000f00:	2300      	movs	r3, #0
 8000f02:	74fb      	strb	r3, [r7, #19]
 8000f04:	2300      	movs	r3, #0
 8000f06:	74bb      	strb	r3, [r7, #18]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	747b      	strb	r3, [r7, #17]
	color_t color = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	81fb      	strh	r3, [r7, #14]
	if (!parseParameters(frame->data, "uuuuuuuC", &x1, &y1, &x2, &y2, &x3, &y3,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1d58      	adds	r0, r3, #5
 8000f14:	f107 0116 	add.w	r1, r7, #22
 8000f18:	f107 0217 	add.w	r2, r7, #23
 8000f1c:	f107 030e 	add.w	r3, r7, #14
 8000f20:	9305      	str	r3, [sp, #20]
 8000f22:	f107 0311 	add.w	r3, r7, #17
 8000f26:	9304      	str	r3, [sp, #16]
 8000f28:	f107 0312 	add.w	r3, r7, #18
 8000f2c:	9303      	str	r3, [sp, #12]
 8000f2e:	f107 0313 	add.w	r3, r7, #19
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	f107 0315 	add.w	r3, r7, #21
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	460b      	mov	r3, r1
 8000f42:	492f      	ldr	r1, [pc, #188]	@ (8001000 <executeONT+0x118>)
 8000f44:	f7ff fd5f 	bl	8000a06 <parseParameters>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f083 0301 	eor.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <executeONT+0x74>
			&filling, &color)) {
		sendStatus(ERR_NOT_RECOGNIZED);
 8000f54:	2009      	movs	r0, #9
 8000f56:	f7ff fd07 	bl	8000968 <sendStatus>
		return;
 8000f5a:	e04d      	b.n	8000ff8 <executeONT+0x110>
	}
	if (!isValidTriangle(x1, y1, x2, y2, x3, y3)) {
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	b218      	sxth	r0, r3
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	b219      	sxth	r1, r3
 8000f64:	7d7b      	ldrb	r3, [r7, #21]
 8000f66:	b21c      	sxth	r4, r3
 8000f68:	7d3b      	ldrb	r3, [r7, #20]
 8000f6a:	b21d      	sxth	r5, r3
 8000f6c:	7cfb      	ldrb	r3, [r7, #19]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	7cba      	ldrb	r2, [r7, #18]
 8000f72:	b212      	sxth	r2, r2
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	462b      	mov	r3, r5
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	f7ff fc5e 	bl	800083c <isValidTriangle>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <executeONT+0xac>
		sendStatus(ERR_INVALID_TRIANGLE);
 8000f8c:	2007      	movs	r0, #7
 8000f8e:	f7ff fceb 	bl	8000968 <sendStatus>
		return;
 8000f92:	e031      	b.n	8000ff8 <executeONT+0x110>
	}
	switch (filling) {
 8000f94:	7c7b      	ldrb	r3, [r7, #17]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <executeONT+0xb8>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d016      	beq.n	8000fcc <executeONT+0xe4>
 8000f9e:	e02b      	b.n	8000ff8 <executeONT+0x110>
	case 0:
		hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	b218      	sxth	r0, r3
 8000fa4:	7dbb      	ldrb	r3, [r7, #22]
 8000fa6:	b21c      	sxth	r4, r3
 8000fa8:	7d7b      	ldrb	r3, [r7, #21]
 8000faa:	b21d      	sxth	r5, r3
 8000fac:	7d3b      	ldrb	r3, [r7, #20]
 8000fae:	b21e      	sxth	r6, r3
 8000fb0:	7cfb      	ldrb	r3, [r7, #19]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	7cba      	ldrb	r2, [r7, #18]
 8000fb6:	b212      	sxth	r2, r2
 8000fb8:	89f9      	ldrh	r1, [r7, #14]
 8000fba:	9102      	str	r1, [sp, #8]
 8000fbc:	9201      	str	r2, [sp, #4]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4633      	mov	r3, r6
 8000fc2:	462a      	mov	r2, r5
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	f006 ff6b 	bl	8007ea0 <hagl_draw_triangle>
		break;
 8000fca:	e015      	b.n	8000ff8 <executeONT+0x110>
	case 1:
		hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	b218      	sxth	r0, r3
 8000fd0:	7dbb      	ldrb	r3, [r7, #22]
 8000fd2:	b21c      	sxth	r4, r3
 8000fd4:	7d7b      	ldrb	r3, [r7, #21]
 8000fd6:	b21d      	sxth	r5, r3
 8000fd8:	7d3b      	ldrb	r3, [r7, #20]
 8000fda:	b21e      	sxth	r6, r3
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	7cba      	ldrb	r2, [r7, #18]
 8000fe2:	b212      	sxth	r2, r2
 8000fe4:	89f9      	ldrh	r1, [r7, #14]
 8000fe6:	9102      	str	r1, [sp, #8]
 8000fe8:	9201      	str	r2, [sp, #4]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4633      	mov	r3, r6
 8000fee:	462a      	mov	r2, r5
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f006 ff7b 	bl	8007eec <hagl_fill_triangle>
		break;
 8000ff6:	bf00      	nop
	}
}
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	080089b0 	.word	0x080089b0

08001004 <executeONN>:

static void executeONN(Frame *frame) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af04      	add	r7, sp, #16
 800100a:	6078      	str	r0, [r7, #4]
	if (!parseParameters(frame->data, "uuuuCt", &text.x, &text.y,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	1d58      	adds	r0, r3, #5
 8001010:	4b3d      	ldr	r3, [pc, #244]	@ (8001108 <executeONN+0x104>)
 8001012:	9303      	str	r3, [sp, #12]
 8001014:	4b3d      	ldr	r3, [pc, #244]	@ (800110c <executeONN+0x108>)
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	4b3d      	ldr	r3, [pc, #244]	@ (8001110 <executeONN+0x10c>)
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	4b3d      	ldr	r3, [pc, #244]	@ (8001114 <executeONN+0x110>)
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4b3d      	ldr	r3, [pc, #244]	@ (8001118 <executeONN+0x114>)
 8001022:	4a3e      	ldr	r2, [pc, #248]	@ (800111c <executeONN+0x118>)
 8001024:	493e      	ldr	r1, [pc, #248]	@ (8001120 <executeONN+0x11c>)
 8001026:	f7ff fcee 	bl	8000a06 <parseParameters>
 800102a:	4603      	mov	r3, r0
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <executeONN+0x3a>
			&text.fontSize, &text.scrollSpeed, &text.color, text.displayText)) {
		sendStatus(ERR_NOT_RECOGNIZED);
 8001036:	2009      	movs	r0, #9
 8001038:	f7ff fc96 	bl	8000968 <sendStatus>
		return;
 800103c:	e061      	b.n	8001102 <executeONN+0xfe>
	}

	text.startX = text.x;
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <executeONN+0x104>)
 8001040:	f9b3 20c8 	ldrsh.w	r2, [r3, #200]	@ 0xc8
 8001044:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <executeONN+0x104>)
 8001046:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
	text.startY = text.y;
 800104a:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <executeONN+0x104>)
 800104c:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 8001050:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <executeONN+0x104>)
 8001052:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
	text.textLength = 0;
 8001056:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <executeONN+0x104>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	while (text.displayText[text.textLength] != L'\0') {
 800105e:	e007      	b.n	8001070 <executeONN+0x6c>
		text.textLength++;
 8001060:	4b29      	ldr	r3, [pc, #164]	@ (8001108 <executeONN+0x104>)
 8001062:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8001066:	3301      	adds	r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <executeONN+0x104>)
 800106c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
	while (text.displayText[text.textLength] != L'\0') {
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <executeONN+0x104>)
 8001072:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8001076:	461a      	mov	r2, r3
 8001078:	4b23      	ldr	r3, [pc, #140]	@ (8001108 <executeONN+0x104>)
 800107a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1ee      	bne.n	8001060 <executeONN+0x5c>
	}
	text.firstIteration = true;
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <executeONN+0x104>)
 8001084:	2201      	movs	r2, #1
 8001086:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6

	text.isScrolling = (text.scrollSpeed > 0);
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <executeONN+0x104>)
 800108c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <executeONN+0x104>)
 800109c:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
	text.lastUpdate = HAL_GetTick();
 80010a0:	f001 f97e 	bl	80023a0 <HAL_GetTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <executeONN+0x104>)
 80010a8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

	const uint8_t *font;
	switch (text.fontSize) {
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <executeONN+0x104>)
 80010ae:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d00c      	beq.n	80010d0 <executeONN+0xcc>
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	dc0d      	bgt.n	80010d6 <executeONN+0xd2>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d002      	beq.n	80010c4 <executeONN+0xc0>
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d003      	beq.n	80010ca <executeONN+0xc6>
 80010c2:	e008      	b.n	80010d6 <executeONN+0xd2>
	case 1:
		font = font5x7;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <executeONN+0x120>)
 80010c6:	60fb      	str	r3, [r7, #12]
		break;
 80010c8:	e007      	b.n	80010da <executeONN+0xd6>
	case 2:
		font = font5x8;
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <executeONN+0x124>)
 80010cc:	60fb      	str	r3, [r7, #12]
		break;
 80010ce:	e004      	b.n	80010da <executeONN+0xd6>
	case 3:
		font = font6x9;
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <executeONN+0x128>)
 80010d2:	60fb      	str	r3, [r7, #12]
		break;
 80010d4:	e001      	b.n	80010da <executeONN+0xd6>
	default:
		font = font5x7;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <executeONN+0x120>)
 80010d8:	60fb      	str	r3, [r7, #12]
	}

	if (!text.scrollSpeed) {
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <executeONN+0x104>)
 80010dc:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10e      	bne.n	8001102 <executeONN+0xfe>
		hagl_put_text((wchar_t*) text.displayText, text.x, text.y, text.color,
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <executeONN+0x104>)
 80010e6:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <executeONN+0x104>)
 80010ec:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <executeONN+0x104>)
 80010f2:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4603      	mov	r3, r0
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <executeONN+0x104>)
 80010fe:	f006 fac6 	bl	800768e <hagl_put_text>
				font);
	}
}
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000cb4 	.word	0x20000cb4
 800110c:	20000d86 	.word	0x20000d86
 8001110:	20000d85 	.word	0x20000d85
 8001114:	20000d84 	.word	0x20000d84
 8001118:	20000d7e 	.word	0x20000d7e
 800111c:	20000d7c 	.word	0x20000d7c
 8001120:	080089bc 	.word	0x080089bc
 8001124:	08008a18 	.word	0x08008a18
 8001128:	0800bf20 	.word	0x0800bf20
 800112c:	0800edc4 	.word	0x0800edc4

08001130 <executeOFF>:

static void executeOFF(Frame *frame) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	switch (frame->data[0]) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	795b      	ldrb	r3, [r3, #5]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <executeOFF+0x16>
 8001140:	2b01      	cmp	r3, #1
 8001142:	d006      	beq.n	8001152 <executeOFF+0x22>
 8001144:	e008      	b.n	8001158 <executeOFF+0x28>
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2102      	movs	r1, #2
 800114a:	4807      	ldr	r0, [pc, #28]	@ (8001168 <executeOFF+0x38>)
 800114c:	f001 fe66 	bl	8002e1c <HAL_GPIO_WritePin>
		break;
 8001150:	e006      	b.n	8001160 <executeOFF+0x30>
	case 1:
		lcdClear();
 8001152:	f000 fc8b 	bl	8001a6c <lcdClear>
		break;
 8001156:	e003      	b.n	8001160 <executeOFF+0x30>
	default:
		sendStatus(ERR_WRONG_OFF_DATA);
 8001158:	2005      	movs	r0, #5
 800115a:	f7ff fc05 	bl	8000968 <sendStatus>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000400 	.word	0x48000400

0800116c <prepareFrame>:

//=====================================================================

void prepareFrame(uint8_t sender, uint8_t receiver, const char *command,
		const char *format, ...) {
 800116c:	b408      	push	{r3}
 800116e:	b580      	push	{r7, lr}
 8001170:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 8001174:	af00      	add	r7, sp, #0
 8001176:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800117a:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001184:	f2a3 33c9 	subw	r3, r3, #969	@ 0x3c9
 8001188:	4602      	mov	r2, r0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001190:	f2a3 33ca 	subw	r3, r3, #970	@ 0x3ca
 8001194:	460a      	mov	r2, r1
 8001196:	701a      	strb	r2, [r3, #0]
	Frame frame = { 0 };
 8001198:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800119c:	2285      	movs	r2, #133	@ 0x85
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 ff13 	bl	8007fcc <memset>
	frame.sender = sender;
 80011a6:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011aa:	f2a3 33c9 	subw	r3, r3, #969	@ 0x3c9
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f887 3338 	strb.w	r3, [r7, #824]	@ 0x338
	frame.receiver = receiver;
 80011b4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011b8:	f2a3 33ca 	subw	r3, r3, #970	@ 0x3ca
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f887 3339 	strb.w	r3, [r7, #825]	@ 0x339
	strncpy((char*) frame.command, command, COMMAND_LENGTH);
 80011c2:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011c6:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80011ca:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80011ce:	1c90      	adds	r0, r2, #2
 80011d0:	2203      	movs	r2, #3
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	f006 ff02 	bl	8007fdc <strncpy>

	uint8_t formatted_data[MAX_DATA_SIZE] = { 0 };  // Zainicjalizowane zerami
 80011d8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	227c      	movs	r2, #124	@ 0x7c
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 feee 	bl	8007fcc <memset>
	va_list args;
	va_start(args, format);
 80011f0:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 80011f4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80011f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80011fc:	601a      	str	r2, [r3, #0]
	int data_len = vsnprintf((char*) formatted_data, MAX_DATA_SIZE, format,
 80011fe:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001202:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001206:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	f006 febd 	bl	8007f90 <vsniprintf>
 8001216:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
			args);
	va_end(args);

	uint8_t raw_payload[MAX_FRAME_WITHOUT_STUFFING] = { 0 };
 800121a:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800121e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	3304      	adds	r3, #4
 8001228:	2283      	movs	r2, #131	@ 0x83
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fecd 	bl	8007fcc <memset>
	size_t raw_payload_len = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

	raw_payload[raw_payload_len++] = frame.sender;
 8001238:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001242:	f897 1338 	ldrb.w	r1, [r7, #824]	@ 0x338
 8001246:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 800124a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800124e:	54d1      	strb	r1, [r2, r3]
	raw_payload[raw_payload_len++] = frame.receiver;
 8001250:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 800125a:	f897 1339 	ldrb.w	r1, [r7, #825]	@ 0x339
 800125e:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001262:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001266:	54d1      	strb	r1, [r2, r3]
	memcpy(raw_payload + raw_payload_len, frame.command, COMMAND_LENGTH);
 8001268:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800126c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001270:	4413      	add	r3, r2
 8001272:	461a      	mov	r2, r3
 8001274:	f207 333a 	addw	r3, r7, #826	@ 0x33a
 8001278:	8819      	ldrh	r1, [r3, #0]
 800127a:	789b      	ldrb	r3, [r3, #2]
 800127c:	8011      	strh	r1, [r2, #0]
 800127e:	7093      	strb	r3, [r2, #2]
	raw_payload_len += COMMAND_LENGTH;
 8001280:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001284:	3303      	adds	r3, #3
 8001286:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

	if (data_len > 0) {
 800128a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 800128e:	2b00      	cmp	r3, #0
 8001290:	dd12      	ble.n	80012b8 <prepareFrame+0x14c>
		memcpy(raw_payload + raw_payload_len, formatted_data, data_len);
 8001292:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8001296:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800129a:	4413      	add	r3, r2
 800129c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	@ 0x3c8
 80012a0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f006 fed9 	bl	800805c <memcpy>
		raw_payload_len += data_len;
 80012aa:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80012ae:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 80012b2:	4413      	add	r3, r2
 80012b4:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
	}

	uint8_t crc_output[2];
	calculateCrc16(raw_payload, raw_payload_len, crc_output);
 80012b8:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80012bc:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80012c0:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f9ff 	bl	80006c8 <calculateCrc16>
	raw_payload[raw_payload_len++] = crc_output[0];
 80012ca:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 80012d4:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80012d8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80012dc:	7811      	ldrb	r1, [r2, #0]
 80012de:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80012e2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012e6:	54d1      	strb	r1, [r2, r3]
	raw_payload[raw_payload_len++] = crc_output[1];
 80012e8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 80012f2:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80012f6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80012fa:	7851      	ldrb	r1, [r2, #1]
 80012fc:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001300:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001304:	54d1      	strb	r1, [r2, r3]

	uint8_t stuffed_payload[MAX_FRAME_LEN];
	size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len,
 8001306:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800130a:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 800130e:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fce3 	bl	8000cde <byteStuffing>
 8001318:	f8c7 03c4 	str.w	r0, [r7, #964]	@ 0x3c4
			stuffed_payload);

	uint8_t final_frame[MAX_FRAME_LEN + 2];
	size_t final_len = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

	final_frame[final_len++] = FRAME_START;
 8001322:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 800132c:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001330:	f5a2 7272 	sub.w	r2, r2, #968	@ 0x3c8
 8001334:	217e      	movs	r1, #126	@ 0x7e
 8001336:	54d1      	strb	r1, [r2, r3]
	memcpy(final_frame + final_len, stuffed_payload, stuffed_len);
 8001338:	f107 0208 	add.w	r2, r7, #8
 800133c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001340:	4413      	add	r3, r2
 8001342:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001346:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 800134a:	4618      	mov	r0, r3
 800134c:	f006 fe86 	bl	800805c <memcpy>
	final_len += stuffed_len;
 8001350:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8001354:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001358:	4413      	add	r3, r2
 800135a:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
	final_frame[final_len++] = FRAME_END;
 800135e:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 8001368:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 800136c:	f5a2 7272 	sub.w	r2, r2, #968	@ 0x3c8
 8001370:	2160      	movs	r1, #96	@ 0x60
 8001372:	54d1      	strb	r1, [r2, r3]

	USART_sendFrame(final_frame, final_len);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	f8d7 13c0 	ldr.w	r1, [r7, #960]	@ 0x3c0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f943 	bl	8000608 <USART_sendFrame>
}
 8001382:	bf00      	nop
 8001384:	f507 7775 	add.w	r7, r7, #980	@ 0x3d4
 8001388:	46bd      	mov	sp, r7
 800138a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800138e:	b001      	add	sp, #4
 8001390:	4770      	bx	lr
	...

08001394 <processReceivedChar>:

void processReceivedChar(uint8_t receivedChar) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	if (receivedChar == FRAME_START) {
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80013a2:	d105      	bne.n	80013b0 <processReceivedChar+0x1c>
		resetFrameState();
 80013a4:	f7ff f9ec 	bl	8000780 <resetFrameState>
		inFrame = true;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	@ (800149c <processReceivedChar+0x108>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e072      	b.n	8001496 <processReceivedChar+0x102>
	} else if (receivedChar == FRAME_END && escapeDetected == false) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b60      	cmp	r3, #96	@ 0x60
 80013b4:	d124      	bne.n	8001400 <processReceivedChar+0x6c>
 80013b6:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <processReceivedChar+0x10c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f083 0301 	eor.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01d      	beq.n	8001400 <processReceivedChar+0x6c>
		if (inFrame) {
 80013c4:	4b35      	ldr	r3, [pc, #212]	@ (800149c <processReceivedChar+0x108>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d064      	beq.n	8001496 <processReceivedChar+0x102>
			if (decodeFrame(bx, &frame, bxIndex)) {
 80013cc:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <processReceivedChar+0x110>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4934      	ldr	r1, [pc, #208]	@ (80014a8 <processReceivedChar+0x114>)
 80013d6:	4835      	ldr	r0, [pc, #212]	@ (80014ac <processReceivedChar+0x118>)
 80013d8:	f7ff fc1a 	bl	8000c10 <decodeFrame>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d008      	beq.n	80013f4 <processReceivedChar+0x60>
				stopAnimation();
 80013e2:	f7ff f9e3 	bl	80007ac <stopAnimation>
				sendStatus(ERR_GOOD);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fabe 	bl	8000968 <sendStatus>
				handleCommand(&frame);
 80013ec:	482e      	ldr	r0, [pc, #184]	@ (80014a8 <processReceivedChar+0x114>)
 80013ee:	f000 f85f 	bl	80014b0 <handleCommand>
 80013f2:	e002      	b.n	80013fa <processReceivedChar+0x66>
			} else {
				sendStatus(ERR_FAIL);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fab7 	bl	8000968 <sendStatus>
			}
			resetFrameState();
 80013fa:	f7ff f9c1 	bl	8000780 <resetFrameState>
			return;
 80013fe:	e04a      	b.n	8001496 <processReceivedChar+0x102>
		}
	} else if (inFrame) {
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <processReceivedChar+0x108>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d046      	beq.n	8001496 <processReceivedChar+0x102>
		if (bxIndex <= MAX_FRAME_WITHOUT_STUFFING) {
 8001408:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <processReceivedChar+0x110>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b87      	cmp	r3, #135	@ 0x87
 800140e:	dc40      	bgt.n	8001492 <processReceivedChar+0xfe>
			if (escapeDetected) {
 8001410:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <processReceivedChar+0x10c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02c      	beq.n	8001472 <processReceivedChar+0xde>
				if (receivedChar == FRAME_START_STUFF) {
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b5e      	cmp	r3, #94	@ 0x5e
 800141c:	d108      	bne.n	8001430 <processReceivedChar+0x9c>
					bx[bxIndex++] = FRAME_START;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <processReceivedChar+0x110>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	491f      	ldr	r1, [pc, #124]	@ (80014a4 <processReceivedChar+0x110>)
 8001426:	600a      	str	r2, [r1, #0]
 8001428:	4a20      	ldr	r2, [pc, #128]	@ (80014ac <processReceivedChar+0x118>)
 800142a:	217e      	movs	r1, #126	@ 0x7e
 800142c:	54d1      	strb	r1, [r2, r3]
 800142e:	e01c      	b.n	800146a <processReceivedChar+0xd6>
				} else if (receivedChar == ESCAPE_CHAR_STUFF) {
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b5d      	cmp	r3, #93	@ 0x5d
 8001434:	d108      	bne.n	8001448 <processReceivedChar+0xb4>
					bx[bxIndex++] = ESCAPE_CHAR;
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <processReceivedChar+0x110>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	4919      	ldr	r1, [pc, #100]	@ (80014a4 <processReceivedChar+0x110>)
 800143e:	600a      	str	r2, [r1, #0]
 8001440:	4a1a      	ldr	r2, [pc, #104]	@ (80014ac <processReceivedChar+0x118>)
 8001442:	217d      	movs	r1, #125	@ 0x7d
 8001444:	54d1      	strb	r1, [r2, r3]
 8001446:	e010      	b.n	800146a <processReceivedChar+0xd6>
				} else if (receivedChar == FRAME_END_STUFF) {
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b26      	cmp	r3, #38	@ 0x26
 800144c:	d108      	bne.n	8001460 <processReceivedChar+0xcc>
					bx[bxIndex++] = FRAME_END;
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <processReceivedChar+0x110>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	4913      	ldr	r1, [pc, #76]	@ (80014a4 <processReceivedChar+0x110>)
 8001456:	600a      	str	r2, [r1, #0]
 8001458:	4a14      	ldr	r2, [pc, #80]	@ (80014ac <processReceivedChar+0x118>)
 800145a:	2160      	movs	r1, #96	@ 0x60
 800145c:	54d1      	strb	r1, [r2, r3]
 800145e:	e004      	b.n	800146a <processReceivedChar+0xd6>
				} else {
					sendStatus(ERR_FAIL);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff fa81 	bl	8000968 <sendStatus>
					resetFrameState();
 8001466:	f7ff f98b 	bl	8000780 <resetFrameState>
				}
				escapeDetected = false;
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <processReceivedChar+0x10c>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e011      	b.n	8001496 <processReceivedChar+0x102>
			} else if (receivedChar == ESCAPE_CHAR) {
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b7d      	cmp	r3, #125	@ 0x7d
 8001476:	d103      	bne.n	8001480 <processReceivedChar+0xec>
				escapeDetected = true;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <processReceivedChar+0x10c>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e00a      	b.n	8001496 <processReceivedChar+0x102>
			} else {
				bx[bxIndex++] = receivedChar;
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <processReceivedChar+0x110>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4907      	ldr	r1, [pc, #28]	@ (80014a4 <processReceivedChar+0x110>)
 8001488:	600a      	str	r2, [r1, #0]
 800148a:	4908      	ldr	r1, [pc, #32]	@ (80014ac <processReceivedChar+0x118>)
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	54ca      	strb	r2, [r1, r3]
 8001490:	e001      	b.n	8001496 <processReceivedChar+0x102>
			}
		} else {
			resetFrameState();
 8001492:	f7ff f975 	bl	8000780 <resetFrameState>
		}
	}
}
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000c28 	.word	0x20000c28
 80014a0:	20000c22 	.word	0x20000c22
 80014a4:	20000c24 	.word	0x20000c24
 80014a8:	20000c2c 	.word	0x20000c2c
 80014ac:	20000b14 	.word	0x20000b14

080014b0 <handleCommand>:

void handleCommand(Frame *frame) {
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b090      	sub	sp, #64	@ 0x40
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	if (frame == NULL) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d076      	beq.n	80015ac <handleCommand+0xfc>
		return;
	}
	CommandEntry commandTable[COMMAND_COUNT] = { { "ONK", executeONK }, { "ONP",
 80014be:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <handleCommand+0x104>)
 80014c0:	f107 0414 	add.w	r4, r7, #20
 80014c4:	461d      	mov	r5, r3
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014d2:	e884 0003 	stmia.w	r4, {r0, r1}
			executeONP }, { "ONT", executeONT }, { "ONN", executeONN }, { "OFF",
			executeOFF } };
	HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2102      	movs	r1, #2
 80014da:	4837      	ldr	r0, [pc, #220]	@ (80015b8 <handleCommand+0x108>)
 80014dc:	f001 fc9e 	bl	8002e1c <HAL_GPIO_WritePin>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014e4:	e05e      	b.n	80015a4 <handleCommand+0xf4>
		if (safeCompare(frame->command, commandTable[i].command,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	1c98      	adds	r0, r3, #2
 80014ea:	f107 0214 	add.w	r2, r7, #20
 80014ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	2203      	movs	r2, #3
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff f983 	bl	8000802 <safeCompare>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d04d      	beq.n	800159e <handleCommand+0xee>
				COMMAND_LENGTH)) {
			if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 8001502:	f107 0214 	add.w	r2, r7, #20
 8001506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	2203      	movs	r2, #3
 800150e:	492b      	ldr	r1, [pc, #172]	@ (80015bc <handleCommand+0x10c>)
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f976 	bl	8000802 <safeCompare>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00f      	beq.n	800153c <handleCommand+0x8c>
				lcdClear();
 800151c:	f000 faa6 	bl	8001a6c <lcdClear>
				commandTable[i].function(frame);
 8001520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	3340      	adds	r3, #64	@ 0x40
 8001526:	443b      	add	r3, r7
 8001528:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	4798      	blx	r3
				lcdCopy();
 8001530:	f000 fa70 	bl	8001a14 <lcdCopy>
				clearFrame(frame);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fa35 	bl	80009a4 <clearFrame>
				return;
 800153a:	e038      	b.n	80015ae <handleCommand+0xfe>
			}

			int x, y;
			if (parseCoordinates(frame->data, &x, &y)) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3305      	adds	r3, #5
 8001540:	f107 020c 	add.w	r2, r7, #12
 8001544:	f107 0110 	add.w	r1, r7, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fa44 	bl	80009d6 <parseCoordinates>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01c      	beq.n	800158e <handleCommand+0xde>
				if (isWithinBounds(x, y)) {
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f934 	bl	80007c8 <isWithinBounds>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00f      	beq.n	8001586 <handleCommand+0xd6>
					lcdClear();
 8001566:	f000 fa81 	bl	8001a6c <lcdClear>
					commandTable[i].function(frame);
 800156a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	3340      	adds	r3, #64	@ 0x40
 8001570:	443b      	add	r3, r7
 8001572:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
					lcdCopy();
 800157a:	f000 fa4b 	bl	8001a14 <lcdCopy>
					clearFrame(frame);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fa10 	bl	80009a4 <clearFrame>
					return;
 8001584:	e013      	b.n	80015ae <handleCommand+0xfe>
				} else {
					sendStatus(ERR_DISPLAY_AREA);
 8001586:	2004      	movs	r0, #4
 8001588:	f7ff f9ee 	bl	8000968 <sendStatus>
					return;
 800158c:	e00f      	b.n	80015ae <handleCommand+0xfe>
				}
			} else {
				lcdClear();
 800158e:	f000 fa6d 	bl	8001a6c <lcdClear>
				lcdCopy();
 8001592:	f000 fa3f 	bl	8001a14 <lcdCopy>
				sendStatus(ERR_NOT_RECOGNIZED);
 8001596:	2009      	movs	r0, #9
 8001598:	f7ff f9e6 	bl	8000968 <sendStatus>
				return;
 800159c:	e007      	b.n	80015ae <handleCommand+0xfe>
	for (int i = 0; i < COMMAND_COUNT; i++) {
 800159e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a0:	3301      	adds	r3, #1
 80015a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	dd9d      	ble.n	80014e6 <handleCommand+0x36>
 80015aa:	e000      	b.n	80015ae <handleCommand+0xfe>
		return;
 80015ac:	bf00      	nop
			}
		}
	}
}
 80015ae:	3740      	adds	r7, #64	@ 0x40
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdb0      	pop	{r4, r5, r7, pc}
 80015b4:	080089c8 	.word	0x080089c8
 80015b8:	48000400 	.word	0x48000400
 80015bc:	080089c4 	.word	0x080089c4

080015c0 <updateScrollingText>:

void updateScrollingText(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af02      	add	r7, sp, #8
	if (!text.isScrolling || text.scrollSpeed == 0) {
 80015c6:	4b5d      	ldr	r3, [pc, #372]	@ (800173c <updateScrollingText+0x17c>)
 80015c8:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 80015cc:	f083 0301 	eor.w	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 80ae 	bne.w	8001734 <updateScrollingText+0x174>
 80015d8:	4b58      	ldr	r3, [pc, #352]	@ (800173c <updateScrollingText+0x17c>)
 80015da:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80a8 	beq.w	8001734 <updateScrollingText+0x174>
		return;
	}

	uint32_t currentTime = HAL_GetTick();
 80015e4:	f000 fedc 	bl	80023a0 <HAL_GetTick>
 80015e8:	6078      	str	r0, [r7, #4]
	if ((currentTime - text.lastUpdate) >= (text.scrollSpeed >> 1)) {
 80015ea:	4b54      	ldr	r3, [pc, #336]	@ (800173c <updateScrollingText+0x17c>)
 80015ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	4a51      	ldr	r2, [pc, #324]	@ (800173c <updateScrollingText+0x17c>)
 80015f6:	f892 20d1 	ldrb.w	r2, [r2, #209]	@ 0xd1
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	4293      	cmp	r3, r2
 8001600:	f0c0 8099 	bcc.w	8001736 <updateScrollingText+0x176>
		text.lastUpdate = currentTime;
 8001604:	4a4d      	ldr	r2, [pc, #308]	@ (800173c <updateScrollingText+0x17c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

		uint8_t charWidth;
		uint8_t charHeight;
		const uint8_t *font;
		switch (text.fontSize) {
 800160c:	4b4b      	ldr	r3, [pc, #300]	@ (800173c <updateScrollingText+0x17c>)
 800160e:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001612:	2b03      	cmp	r3, #3
 8001614:	d014      	beq.n	8001640 <updateScrollingText+0x80>
 8001616:	2b03      	cmp	r3, #3
 8001618:	dc19      	bgt.n	800164e <updateScrollingText+0x8e>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d002      	beq.n	8001624 <updateScrollingText+0x64>
 800161e:	2b02      	cmp	r3, #2
 8001620:	d007      	beq.n	8001632 <updateScrollingText+0x72>
 8001622:	e014      	b.n	800164e <updateScrollingText+0x8e>
		case 1:
			charWidth = 5;
 8001624:	2305      	movs	r3, #5
 8001626:	73fb      	strb	r3, [r7, #15]
			charHeight = 7;
 8001628:	2307      	movs	r3, #7
 800162a:	73bb      	strb	r3, [r7, #14]
			font = font5x7;
 800162c:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <updateScrollingText+0x180>)
 800162e:	60bb      	str	r3, [r7, #8]
			break;
 8001630:	e014      	b.n	800165c <updateScrollingText+0x9c>
		case 2:
			charWidth = 5;
 8001632:	2305      	movs	r3, #5
 8001634:	73fb      	strb	r3, [r7, #15]
			charHeight = 8;
 8001636:	2308      	movs	r3, #8
 8001638:	73bb      	strb	r3, [r7, #14]
			font = font5x8;
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <updateScrollingText+0x184>)
 800163c:	60bb      	str	r3, [r7, #8]
			break;
 800163e:	e00d      	b.n	800165c <updateScrollingText+0x9c>
		case 3:
			charWidth = 6;
 8001640:	2306      	movs	r3, #6
 8001642:	73fb      	strb	r3, [r7, #15]
			charHeight = 9;
 8001644:	2309      	movs	r3, #9
 8001646:	73bb      	strb	r3, [r7, #14]
			font = font6x9;
 8001648:	4b3f      	ldr	r3, [pc, #252]	@ (8001748 <updateScrollingText+0x188>)
 800164a:	60bb      	str	r3, [r7, #8]
			break;
 800164c:	e006      	b.n	800165c <updateScrollingText+0x9c>
		default:
			charWidth = 5;
 800164e:	2305      	movs	r3, #5
 8001650:	73fb      	strb	r3, [r7, #15]
			charHeight = 7;
 8001652:	2307      	movs	r3, #7
 8001654:	73bb      	strb	r3, [r7, #14]
			font = font5x7;
 8001656:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <updateScrollingText+0x180>)
 8001658:	60bb      	str	r3, [r7, #8]
			break;
 800165a:	bf00      	nop
		}

		int16_t textWidth = text.textLength * charWidth;
 800165c:	4b37      	ldr	r3, [pc, #220]	@ (800173c <updateScrollingText+0x17c>)
 800165e:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8001662:	461a      	mov	r2, r3
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	b29b      	uxth	r3, r3
 8001668:	fb12 f303 	smulbb	r3, r2, r3
 800166c:	b29b      	uxth	r3, r3
 800166e:	807b      	strh	r3, [r7, #2]

		if (!text.firstIteration) {
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <updateScrollingText+0x17c>)
 8001672:	f893 30d6 	ldrb.w	r3, [r3, #214]	@ 0xd6
 8001676:	f083 0301 	eor.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d034      	beq.n	80016ea <updateScrollingText+0x12a>
		    text.x += text.textLength;
 8001680:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <updateScrollingText+0x17c>)
 8001682:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 8001686:	b29b      	uxth	r3, r3
 8001688:	4a2c      	ldr	r2, [pc, #176]	@ (800173c <updateScrollingText+0x17c>)
 800168a:	f892 20d4 	ldrb.w	r2, [r2, #212]	@ 0xd4
 800168e:	4413      	add	r3, r2
 8001690:	b29b      	uxth	r3, r3
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b29      	ldr	r3, [pc, #164]	@ (800173c <updateScrollingText+0x17c>)
 8001696:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8


		    if (text.x > LCD_WIDTH) {
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <updateScrollingText+0x17c>)
 800169c:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	@ 0xc8
 80016a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80016a2:	dd33      	ble.n	800170c <updateScrollingText+0x14c>
		        text.x = -textWidth;
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	425b      	negs	r3, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	4b23      	ldr	r3, [pc, #140]	@ (800173c <updateScrollingText+0x17c>)
 80016ae:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		        text.y += charHeight;
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <updateScrollingText+0x17c>)
 80016b4:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	7bbb      	ldrb	r3, [r7, #14]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <updateScrollingText+0x17c>)
 80016c6:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca


		        if (text.y >= LCD_HEIGHT - charHeight) {
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <updateScrollingText+0x17c>)
 80016cc:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	@ 0xca
 80016d0:	461a      	mov	r2, r3
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016d8:	429a      	cmp	r2, r3
 80016da:	db17      	blt.n	800170c <updateScrollingText+0x14c>
		            text.y = text.startY;
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <updateScrollingText+0x17c>)
 80016de:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <updateScrollingText+0x17c>)
 80016e4:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
 80016e8:	e010      	b.n	800170c <updateScrollingText+0x14c>
		        }
		    }
		} else {

		    text.x = -textWidth;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	425b      	negs	r3, r3
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <updateScrollingText+0x17c>)
 80016f4:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
		    text.y = text.startY;
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <updateScrollingText+0x17c>)
 80016fa:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	@ 0xce
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <updateScrollingText+0x17c>)
 8001700:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
		    text.firstIteration = false;
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <updateScrollingText+0x17c>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
		}

		lcdClear();
 800170c:	f000 f9ae 	bl	8001a6c <lcdClear>
		hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8001710:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <updateScrollingText+0x17c>)
 8001712:	f9b3 10c8 	ldrsh.w	r1, [r3, #200]	@ 0xc8
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <updateScrollingText+0x17c>)
 8001718:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	@ 0xca
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <updateScrollingText+0x17c>)
 800171e:	f8b3 00d2 	ldrh.w	r0, [r3, #210]	@ 0xd2
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	4603      	mov	r3, r0
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <updateScrollingText+0x17c>)
 800172a:	f005 ffb0 	bl	800768e <hagl_put_text>
		lcdCopy();
 800172e:	f000 f971 	bl	8001a14 <lcdCopy>
 8001732:	e000      	b.n	8001736 <updateScrollingText+0x176>
		return;
 8001734:	bf00      	nop
	}
}
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000cb4 	.word	0x20000cb4
 8001740:	08008a18 	.word	0x08008a18
 8001744:	0800bf20 	.word	0x0800bf20
 8001748:	0800edc4 	.word	0x0800edc4

0800174c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <MX_GPIO_Init+0x140>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	4a49      	ldr	r2, [pc, #292]	@ (800188c <MX_GPIO_Init+0x140>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <MX_GPIO_Init+0x140>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	4b44      	ldr	r3, [pc, #272]	@ (800188c <MX_GPIO_Init+0x140>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	4a43      	ldr	r2, [pc, #268]	@ (800188c <MX_GPIO_Init+0x140>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001786:	4b41      	ldr	r3, [pc, #260]	@ (800188c <MX_GPIO_Init+0x140>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <MX_GPIO_Init+0x140>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	4a3d      	ldr	r2, [pc, #244]	@ (800188c <MX_GPIO_Init+0x140>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <MX_GPIO_Init+0x140>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b38      	ldr	r3, [pc, #224]	@ (800188c <MX_GPIO_Init+0x140>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a37      	ldr	r2, [pc, #220]	@ (800188c <MX_GPIO_Init+0x140>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b35      	ldr	r3, [pc, #212]	@ (800188c <MX_GPIO_Init+0x140>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <MX_GPIO_Init+0x140>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a31      	ldr	r2, [pc, #196]	@ (800188c <MX_GPIO_Init+0x140>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <MX_GPIO_Init+0x140>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f641 0106 	movw	r1, #6150	@ 0x1806
 80017e0:	482b      	ldr	r0, [pc, #172]	@ (8001890 <MX_GPIO_Init+0x144>)
 80017e2:	f001 fb1b 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80017e6:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80017ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ec:	2303      	movs	r3, #3
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4826      	ldr	r0, [pc, #152]	@ (8001894 <MX_GPIO_Init+0x148>)
 80017fc:	f001 f964 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001800:	2303      	movs	r3, #3
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4821      	ldr	r0, [pc, #132]	@ (8001898 <MX_GPIO_Init+0x14c>)
 8001814:	f001 f958 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001818:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 800181c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001830:	f001 f94a 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001834:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001838:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183a:	2303      	movs	r3, #3
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4811      	ldr	r0, [pc, #68]	@ (8001890 <MX_GPIO_Init+0x144>)
 800184a:	f001 f93d 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 800184e:	f641 0306 	movw	r3, #6150	@ 0x1806
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	480a      	ldr	r0, [pc, #40]	@ (8001890 <MX_GPIO_Init+0x144>)
 8001868:	f001 f92e 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800186c:	2304      	movs	r3, #4
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	2303      	movs	r3, #3
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4807      	ldr	r0, [pc, #28]	@ (800189c <MX_GPIO_Init+0x150>)
 8001880:	f001 f922 	bl	8002ac8 <HAL_GPIO_Init>

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000800 	.word	0x48000800
 8001898:	48001c00 	.word	0x48001c00
 800189c:	48000c00 	.word	0x48000c00

080018a0 <lcdCmd>:
//========================================================================


//================================STATIC===================================
static void lcdCmd(uint8_t cmd)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <lcdCmd+0x44>)
 80018b2:	f001 fab3 	bl	8002e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018bc:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <lcdCmd+0x44>)
 80018be:	f001 faad 	bl	8002e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80018c2:	1df9      	adds	r1, r7, #7
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	2201      	movs	r2, #1
 80018ca:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <lcdCmd+0x48>)
 80018cc:	f002 fe81 	bl	80045d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d6:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <lcdCmd+0x44>)
 80018d8:	f001 faa0 	bl	8002e1c <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	48000400 	.word	0x48000400
 80018e8:	2000ad98 	.word	0x2000ad98

080018ec <lcdData>:

static void lcdData(uint8_t data)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <lcdData+0x44>)
 80018fe:	f001 fa8d 	bl	8002e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001908:	4809      	ldr	r0, [pc, #36]	@ (8001930 <lcdData+0x44>)
 800190a:	f001 fa87 	bl	8002e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800190e:	1df9      	adds	r1, r7, #7
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
 8001914:	2201      	movs	r2, #1
 8001916:	4807      	ldr	r0, [pc, #28]	@ (8001934 <lcdData+0x48>)
 8001918:	f002 fe5b 	bl	80045d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001922:	4803      	ldr	r0, [pc, #12]	@ (8001930 <lcdData+0x44>)
 8001924:	f001 fa7a 	bl	8002e1c <HAL_GPIO_WritePin>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	48000400 	.word	0x48000400
 8001934:	2000ad98 	.word	0x2000ad98

08001938 <lcdSend>:

static void lcdSend(uint16_t value)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <lcdSend+0x20>
		lcdCmd(value);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ffa5 	bl	80018a0 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 8001956:	e004      	b.n	8001962 <lcdSend+0x2a>
		lcdData(value);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ffc5 	bl	80018ec <lcdData>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <lcdData16>:

static void lcdData16(uint16_t value)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b29b      	uxth	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffb5 	bl	80018ec <lcdData>
	lcdData(value);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ffb0 	bl	80018ec <lcdData>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <lcdSetWindow>:

static void lcdSetWindow(int x, int y, int width, int height)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 80019a2:	202a      	movs	r0, #42	@ 0x2a
 80019a4:	f7ff ff7c 	bl	80018a0 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ffda 	bl	800196a <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4413      	add	r3, r2
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ffd1 	bl	800196a <lcdData16>

  lcdCmd(ST7735S_RASET);
 80019c8:	202b      	movs	r0, #43	@ 0x2b
 80019ca:	f7ff ff69 	bl	80018a0 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3302      	adds	r3, #2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffc7 	bl	800196a <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ffbc 	bl	800196a <lcdData16>
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <lcdIsBusy>:
static bool lcdIsBusy(void) {
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <lcdIsBusy+0x14>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	2000ad90 	.word	0x2000ad90

08001a14 <lcdCopy>:
//=======================================================================

void lcdCopy(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) return;
 8001a18:	f7ff fff0 	bl	80019fc <lcdIsBusy>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11b      	bne.n	8001a5a <lcdCopy+0x46>
    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	22a0      	movs	r2, #160	@ 0xa0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff ffb3 	bl	8001994 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001a2e:	202c      	movs	r0, #44	@ 0x2c
 8001a30:	f7ff ff36 	bl	80018a0 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a3a:	4809      	ldr	r0, [pc, #36]	@ (8001a60 <lcdCopy+0x4c>)
 8001a3c:	f001 f9ee 	bl	8002e1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <lcdCopy+0x4c>)
 8001a48:	f001 f9e8 	bl	8002e1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001a4c:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a50:	4904      	ldr	r1, [pc, #16]	@ (8001a64 <lcdCopy+0x50>)
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <lcdCopy+0x54>)
 8001a54:	f002 ff34 	bl	80048c0 <HAL_SPI_Transmit_DMA>
 8001a58:	e000      	b.n	8001a5c <lcdCopy+0x48>
    if (lcdIsBusy()) return;
 8001a5a:	bf00      	nop
}
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	48000400 	.word	0x48000400
 8001a64:	20000d90 	.word	0x20000d90
 8001a68:	2000ad98 	.word	0x2000ad98

08001a6c <lcdClear>:

void lcdClear(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001a70:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a74:	2100      	movs	r1, #0
 8001a76:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <lcdClear+0x14>)
 8001a78:	f006 faa8 	bl	8007fcc <memset>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000d90 	.word	0x20000d90

08001a84 <lcdInit>:

void lcdInit(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	481a      	ldr	r0, [pc, #104]	@ (8001af8 <lcdInit+0x74>)
 8001a90:	f001 f9c4 	bl	8002e1c <HAL_GPIO_WritePin>
    delay(100);
 8001a94:	2064      	movs	r0, #100	@ 0x64
 8001a96:	f000 f8cb 	bl	8001c30 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	4816      	ldr	r0, [pc, #88]	@ (8001af8 <lcdInit+0x74>)
 8001aa0:	f001 f9bc 	bl	8002e1c <HAL_GPIO_WritePin>
    delay(100);
 8001aa4:	2064      	movs	r0, #100	@ 0x64
 8001aa6:	f000 f8c3 	bl	8001c30 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	e009      	b.n	8001ac4 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001ab0:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <lcdInit+0x78>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff3d 	bl	8001938 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b4b      	cmp	r3, #75	@ 0x4b
 8001ac8:	d9f2      	bls.n	8001ab0 <lcdInit+0x2c>
    }
    delay(200);
 8001aca:	20c8      	movs	r0, #200	@ 0xc8
 8001acc:	f000 f8b0 	bl	8001c30 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001ad0:	2011      	movs	r0, #17
 8001ad2:	f7ff fee5 	bl	80018a0 <lcdCmd>
    delay(120);
 8001ad6:	2078      	movs	r0, #120	@ 0x78
 8001ad8:	f000 f8aa 	bl	8001c30 <delay>
    lcdCmd(ST7735S_DISPON);
 8001adc:	2029      	movs	r0, #41	@ 0x29
 8001ade:	f7ff fedf 	bl	80018a0 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <lcdInit+0x74>)
 8001ae8:	f001 f998 	bl	8002e1c <HAL_GPIO_WritePin>
    lcdClear();
 8001aec:	f7ff ffbe 	bl	8001a6c <lcdClear>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	48000400 	.word	0x48000400
 8001afc:	08011d7c 	.word	0x08011d7c

08001b00 <lcdPutPixel>:

void lcdPutPixel(int x, int y, uint16_t color)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	015b      	lsls	r3, r3, #5
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4905      	ldr	r1, [pc, #20]	@ (8001b34 <lcdPutPixel+0x34>)
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000d90 	.word	0x20000d90

08001b38 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <HAL_SPI_TxCpltCallback+0x2c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d108      	bne.n	8001b5a <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b4e:	4806      	ldr	r0, [pc, #24]	@ (8001b68 <HAL_SPI_TxCpltCallback+0x30>)
 8001b50:	f001 f964 	bl	8002e1c <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_SPI_TxCpltCallback+0x34>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
    }
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000ad98 	.word	0x2000ad98
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	2000ad90 	.word	0x2000ad90

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	@ (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	@ (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ffc2 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <waitForFrame>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void waitForFrame(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001c0e:	f7fe fcbf 	bl	8000590 <USART_kbhit>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <waitForFrame+0x20>
	        uint8_t receivedChar = USART_getchar();
 8001c18:	f7fe fccc 	bl	80005b4 <USART_getchar>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(receivedChar);
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fbb6 	bl	8001394 <processReceivedChar>
	 }
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <delay>:
void delay(uint32_t delayMs){
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <delay+0x2c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001c3e:	bf00      	nop
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	441a      	add	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <delay+0x2c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d8f8      	bhi.n	8001c40 <delay+0x10>
}
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	2000ad94 	.word	0x2000ad94

08001c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c64:	f000 fb33 	bl	80022ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c68:	f000 f810 	bl	8001c8c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001c6c:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <main+0x28>)
 8001c6e:	f7ff ffa9 	bl	8001bc4 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c72:	f7ff fd6b 	bl	800174c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c76:	f7fe fd65 	bl	8000744 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c7a:	f000 fa53 	bl	8002124 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001c7e:	f000 f85d 	bl	8001d3c <MX_SPI2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  waitForFrame();
 8001c82:	f7ff ffc1 	bl	8001c08 <waitForFrame>
 8001c86:	e7fc      	b.n	8001c82 <main+0x22>
 8001c88:	00013880 	.word	0x00013880

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b096      	sub	sp, #88	@ 0x58
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	2244      	movs	r2, #68	@ 0x44
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 f996 	bl	8007fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cb2:	f001 f8d9 	bl	8002e68 <HAL_PWREx_ControlVoltageScaling>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cbc:	f000 f838 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ccc:	2360      	movs	r3, #96	@ 0x60
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001cdc:	2328      	movs	r3, #40	@ 0x28
 8001cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 f90f 	bl	8002f14 <HAL_RCC_OscConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001cfc:	f000 f818 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d00:	230f      	movs	r3, #15
 8001d02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d04:	2303      	movs	r3, #3
 8001d06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	2104      	movs	r1, #4
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fcd7 	bl	80036cc <HAL_RCC_ClockConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d24:	f000 f804 	bl	8001d30 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3758      	adds	r7, #88	@ 0x58
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <Error_Handler+0x8>

08001d3c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d42:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <MX_SPI2_Init+0x7c>)
 8001d44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d62:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d70:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d72:	2210      	movs	r2, #16
 8001d74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d9a:	4806      	ldr	r0, [pc, #24]	@ (8001db4 <MX_SPI2_Init+0x78>)
 8001d9c:	f002 fb76 	bl	800448c <HAL_SPI_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001da6:	f7ff ffc3 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  lcdInit();
 8001daa:	f7ff fe6b 	bl	8001a84 <lcdInit>
  /* USER CODE END SPI2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000ad98 	.word	0x2000ad98
 8001db8:	40003800 	.word	0x40003800

08001dbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3e      	ldr	r2, [pc, #248]	@ (8001ed4 <HAL_SPI_MspInit+0x118>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d175      	bne.n	8001eca <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dde:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	4a37      	ldr	r2, [pc, #220]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e02:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	4a31      	ldr	r2, [pc, #196]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <HAL_SPI_MspInit+0x11c>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001e26:	2308      	movs	r3, #8
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e36:	2305      	movs	r3, #5
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4826      	ldr	r0, [pc, #152]	@ (8001edc <HAL_SPI_MspInit+0x120>)
 8001e42:	f000 fe41 	bl	8002ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e58:	2305      	movs	r3, #5
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	481f      	ldr	r0, [pc, #124]	@ (8001ee0 <HAL_SPI_MspInit+0x124>)
 8001e64:	f000 fe30 	bl	8002ac8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <HAL_SPI_MspInit+0x12c>)
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e76:	2210      	movs	r2, #16
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e82:	2280      	movs	r2, #128	@ 0x80
 8001e84:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001e9e:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001ea0:	f000 fb9c 	bl	80025dc <HAL_DMA_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001eaa:	f7ff ff41 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee4 <HAL_SPI_MspInit+0x128>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	2024      	movs	r0, #36	@ 0x24
 8001ec0:	f000 fb55 	bl	800256e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ec4:	2024      	movs	r0, #36	@ 0x24
 8001ec6:	f000 fb6e 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	@ 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40003800 	.word	0x40003800
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	2000adfc 	.word	0x2000adfc
 8001ee8:	40020058 	.word	0x40020058

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_MspInit+0x44>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <HAL_MspInit+0x44>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_MspInit+0x44>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <NMI_Handler+0x4>

08001f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8c:	f000 f9f4 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick++;
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <SysTick_Handler+0x1c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a03      	ldr	r2, [pc, #12]	@ (8001fa4 <SysTick_Handler+0x1c>)
 8001f98:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 8001f9a:	f7ff fb11 	bl	80015c0 <updateScrollingText>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000ad94 	.word	0x2000ad94

08001fa8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <DMA1_Channel5_IRQHandler+0x10>)
 8001fae:	f000 fcac 	bl	800290a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000adfc 	.word	0x2000adfc

08001fbc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <SPI2_IRQHandler+0x10>)
 8001fc2:	f002 fd6b 	bl	8004a9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000ad98 	.word	0x2000ad98

08001fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <USART2_IRQHandler+0x10>)
 8001fd6:	f003 f95b 	bl	8005290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000ae48 	.word	0x2000ae48

08001fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <_sbrk+0x5c>)
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <_sbrk+0x60>)
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <_sbrk+0x64>)
 8002002:	4a12      	ldr	r2, [pc, #72]	@ (800204c <_sbrk+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d207      	bcs.n	8002024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002014:	f005 fff6 	bl	8008004 <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	220c      	movs	r2, #12
 800201c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e009      	b.n	8002038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <_sbrk+0x64>)
 8002034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002036:	68fb      	ldr	r3, [r7, #12]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20018000 	.word	0x20018000
 8002044:	00001000 	.word	0x00001000
 8002048:	2000ae44 	.word	0x2000ae44
 800204c:	2000b020 	.word	0x2000b020

08002050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <SystemInit+0x20>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	4a05      	ldr	r2, [pc, #20]	@ (8002070 <SystemInit+0x20>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <HAL_UART_TxCpltCallback>:
extern ring_buffer txRingBuffer;
extern uint8_t USART_RxBuf[];
extern uint8_t USART_TxBuf[];


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <HAL_UART_TxCpltCallback+0x54>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d11d      	bne.n	80020c0 <HAL_UART_TxCpltCallback+0x4c>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_UART_TxCpltCallback+0x58>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <HAL_UART_TxCpltCallback+0x58>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	d017      	beq.n	80020c0 <HAL_UART_TxCpltCallback+0x4c>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002090:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <HAL_UART_TxCpltCallback+0x58>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a0e      	ldr	r2, [pc, #56]	@ (80020d0 <HAL_UART_TxCpltCallback+0x5c>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 800209a:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <HAL_UART_TxCpltCallback+0x58>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	3301      	adds	r3, #1
 80020a0:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <HAL_UART_TxCpltCallback+0x58>)
 80020a2:	68d2      	ldr	r2, [r2, #12]
 80020a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80020a8:	fb01 f202 	mul.w	r2, r1, r2
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	4a07      	ldr	r2, [pc, #28]	@ (80020cc <HAL_UART_TxCpltCallback+0x58>)
 80020b0:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	2201      	movs	r2, #1
 80020b8:	4619      	mov	r1, r3
 80020ba:	4803      	ldr	r0, [pc, #12]	@ (80020c8 <HAL_UART_TxCpltCallback+0x54>)
 80020bc:	f003 f83e 	bl	800513c <HAL_UART_Transmit_IT>
	   }
   }
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000ae48 	.word	0x2000ae48
 80020cc:	20000290 	.word	0x20000290
 80020d0:	200002a0 	.word	0x200002a0

080020d4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0e      	ldr	r2, [pc, #56]	@ (8002118 <HAL_UART_RxCpltCallback+0x44>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d114      	bne.n	800210e <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) % rxRingBuffer.mask;
 80020e4:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <HAL_UART_RxCpltCallback+0x48>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a0c      	ldr	r2, [pc, #48]	@ (800211c <HAL_UART_RxCpltCallback+0x48>)
 80020ec:	68d2      	ldr	r2, [r2, #12]
 80020ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80020f2:	fb01 f202 	mul.w	r2, r1, r2
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	4a08      	ldr	r2, [pc, #32]	@ (800211c <HAL_UART_RxCpltCallback+0x48>)
 80020fa:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80020fc:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_UART_RxCpltCallback+0x48>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a07      	ldr	r2, [pc, #28]	@ (8002120 <HAL_UART_RxCpltCallback+0x4c>)
 8002102:	4413      	add	r3, r2
 8002104:	2201      	movs	r2, #1
 8002106:	4619      	mov	r1, r3
 8002108:	4803      	ldr	r0, [pc, #12]	@ (8002118 <HAL_UART_RxCpltCallback+0x44>)
 800210a:	f003 f875 	bl	80051f8 <HAL_UART_Receive_IT>

	 }
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000ae48 	.word	0x2000ae48
 800211c:	20000280 	.word	0x20000280
 8002120:	20000a04 	.word	0x20000a04

08002124 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002128:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <MX_USART2_UART_Init+0x78>)
 800212a:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <MX_USART2_UART_Init+0x7c>)
 800212c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800212e:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800213c:	4b17      	ldr	r3, [pc, #92]	@ (800219c <MX_USART2_UART_Init+0x78>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_USART2_UART_Init+0x78>)
 800214a:	220c      	movs	r2, #12
 800214c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <MX_USART2_UART_Init+0x78>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002160:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002166:	480d      	ldr	r0, [pc, #52]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002168:	f002 ff9a 	bl	80050a0 <HAL_UART_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002172:	f7ff fddd 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 8002176:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800217a:	490a      	ldr	r1, [pc, #40]	@ (80021a4 <MX_USART2_UART_Init+0x80>)
 800217c:	480a      	ldr	r0, [pc, #40]	@ (80021a8 <MX_USART2_UART_Init+0x84>)
 800217e:	f7fe f9ef 	bl	8000560 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 8002182:	f240 7262 	movw	r2, #1890	@ 0x762
 8002186:	4909      	ldr	r1, [pc, #36]	@ (80021ac <MX_USART2_UART_Init+0x88>)
 8002188:	4809      	ldr	r0, [pc, #36]	@ (80021b0 <MX_USART2_UART_Init+0x8c>)
 800218a:	f7fe f9e9 	bl	8000560 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 800218e:	2201      	movs	r2, #1
 8002190:	4904      	ldr	r1, [pc, #16]	@ (80021a4 <MX_USART2_UART_Init+0x80>)
 8002192:	4802      	ldr	r0, [pc, #8]	@ (800219c <MX_USART2_UART_Init+0x78>)
 8002194:	f003 f830 	bl	80051f8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000ae48 	.word	0x2000ae48
 80021a0:	40004400 	.word	0x40004400
 80021a4:	20000a04 	.word	0x20000a04
 80021a8:	20000280 	.word	0x20000280
 80021ac:	200002a0 	.word	0x200002a0
 80021b0:	20000290 	.word	0x20000290

080021b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0ac      	sub	sp, #176	@ 0xb0
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2288      	movs	r2, #136	@ 0x88
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f005 fef9 	bl	8007fcc <memset>
  if(uartHandle->Instance==USART2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a25      	ldr	r2, [pc, #148]	@ (8002274 <HAL_UART_MspInit+0xc0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d143      	bne.n	800226c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fc8f 	bl	8003b14 <HAL_RCCEx_PeriphCLKConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021fc:	f7ff fd98 	bl	8001d30 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002200:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_UART_MspInit+0xc4>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	4a1c      	ldr	r2, [pc, #112]	@ (8002278 <HAL_UART_MspInit+0xc4>)
 8002206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800220a:	6593      	str	r3, [r2, #88]	@ 0x58
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HAL_UART_MspInit+0xc4>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_UART_MspInit+0xc4>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221c:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <HAL_UART_MspInit+0xc4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <HAL_UART_MspInit+0xc4>)
 8002226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002230:	230c      	movs	r3, #12
 8002232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002248:	2307      	movs	r3, #7
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002252:	4619      	mov	r1, r3
 8002254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002258:	f000 fc36 	bl	8002ac8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	2101      	movs	r1, #1
 8002260:	2026      	movs	r0, #38	@ 0x26
 8002262:	f000 f984 	bl	800256e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002266:	2026      	movs	r0, #38	@ 0x26
 8002268:	f000 f99d 	bl	80025a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800226c:	bf00      	nop
 800226e:	37b0      	adds	r7, #176	@ 0xb0
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40004400 	.word	0x40004400
 8002278:	40021000 	.word	0x40021000

0800227c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002280:	f7ff fee6 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002286:	490d      	ldr	r1, [pc, #52]	@ (80022bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002288:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <LoopForever+0xe>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800229c:	4c0a      	ldr	r4, [pc, #40]	@ (80022c8 <LoopForever+0x16>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022aa:	f005 feb1 	bl	8008010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ae:	f7ff fcd7 	bl	8001c60 <main>

080022b2 <LoopForever>:

LoopForever:
    b LoopForever
 80022b2:	e7fe      	b.n	80022b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80022c0:	08011ea0 	.word	0x08011ea0
  ldr r2, =_sbss
 80022c4:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80022c8:	2000b01c 	.word	0x2000b01c

080022cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC1_2_IRQHandler>

080022ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f93d 	bl	8002558 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022de:	200f      	movs	r0, #15
 80022e0:	f000 f80e 	bl	8002300 <HAL_InitTick>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	71fb      	strb	r3, [r7, #7]
 80022ee:	e001      	b.n	80022f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022f0:	f7ff fdfc 	bl	8001eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022f4:	79fb      	ldrb	r3, [r7, #7]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800230c:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_InitTick+0x6c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d023      	beq.n	800235c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_InitTick+0x70>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b14      	ldr	r3, [pc, #80]	@ (800236c <HAL_InitTick+0x6c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002322:	fbb3 f3f1 	udiv	r3, r3, r1
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f949 	bl	80025c2 <HAL_SYSTICK_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d809      	bhi.n	8002350 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f913 	bl	800256e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002348:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_InitTick+0x74>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e007      	b.n	8002360 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e004      	b.n	8002360 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e001      	b.n	8002360 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000208 	.word	0x20000208
 8002370:	20000200 	.word	0x20000200
 8002374:	20000204 	.word	0x20000204

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000208 	.word	0x20000208
 800239c:	2000aed0 	.word	0x2000aed0

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	2000aed0 	.word	0x2000aed0

080023b8 <__NVIC_SetPriorityGrouping>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	@ (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	@ (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <SysTick_Config>:
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002524:	d301      	bcc.n	800252a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002526:	2301      	movs	r3, #1
 8002528:	e00f      	b.n	800254a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252a:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <SysTick_Config+0x40>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002532:	210f      	movs	r1, #15
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f7ff ff8e 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <SysTick_Config+0x40>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <SysTick_Config+0x40>)
 8002544:	2207      	movs	r2, #7
 8002546:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff29 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b086      	sub	sp, #24
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002580:	f7ff ff3e 	bl	8002400 <__NVIC_GetPriorityGrouping>
 8002584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f7ff ff8e 	bl	80024ac <NVIC_EncodePriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff5d 	bl	8002458 <__NVIC_SetPriority>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff31 	bl	800241c <__NVIC_EnableIRQ>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffa2 	bl	8002514 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e098      	b.n	8002720 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b4d      	ldr	r3, [pc, #308]	@ (800272c <HAL_DMA_Init+0x150>)
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d80f      	bhi.n	800261a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b4b      	ldr	r3, [pc, #300]	@ (8002730 <HAL_DMA_Init+0x154>)
 8002602:	4413      	add	r3, r2
 8002604:	4a4b      	ldr	r2, [pc, #300]	@ (8002734 <HAL_DMA_Init+0x158>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a48      	ldr	r2, [pc, #288]	@ (8002738 <HAL_DMA_Init+0x15c>)
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
 8002618:	e00e      	b.n	8002638 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	4b46      	ldr	r3, [pc, #280]	@ (800273c <HAL_DMA_Init+0x160>)
 8002622:	4413      	add	r3, r2
 8002624:	4a43      	ldr	r2, [pc, #268]	@ (8002734 <HAL_DMA_Init+0x158>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <HAL_DMA_Init+0x164>)
 8002636:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800264e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800265c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002692:	d039      	beq.n	8002708 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	4a27      	ldr	r2, [pc, #156]	@ (8002738 <HAL_DMA_Init+0x15c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d11a      	bne.n	80026d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800269e:	4b29      	ldr	r3, [pc, #164]	@ (8002744 <HAL_DMA_Init+0x168>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f003 031c 	and.w	r3, r3, #28
 80026aa:	210f      	movs	r1, #15
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	4924      	ldr	r1, [pc, #144]	@ (8002744 <HAL_DMA_Init+0x168>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026b8:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <HAL_DMA_Init+0x168>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c4:	f003 031c 	and.w	r3, r3, #28
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	491d      	ldr	r1, [pc, #116]	@ (8002744 <HAL_DMA_Init+0x168>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
 80026d2:	e019      	b.n	8002708 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <HAL_DMA_Init+0x16c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	f003 031c 	and.w	r3, r3, #28
 80026e0:	210f      	movs	r1, #15
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	4917      	ldr	r1, [pc, #92]	@ (8002748 <HAL_DMA_Init+0x16c>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026ee:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <HAL_DMA_Init+0x16c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f003 031c 	and.w	r3, r3, #28
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	4911      	ldr	r1, [pc, #68]	@ (8002748 <HAL_DMA_Init+0x16c>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40020407 	.word	0x40020407
 8002730:	bffdfff8 	.word	0xbffdfff8
 8002734:	cccccccd 	.word	0xcccccccd
 8002738:	40020000 	.word	0x40020000
 800273c:	bffdfbf8 	.word	0xbffdfbf8
 8002740:	40020400 	.word	0x40020400
 8002744:	400200a8 	.word	0x400200a8
 8002748:	400204a8 	.word	0x400204a8

0800274c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_DMA_Start_IT+0x20>
 8002768:	2302      	movs	r3, #2
 800276a:	e04b      	b.n	8002804 <HAL_DMA_Start_IT+0xb8>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d13a      	bne.n	80027f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f95f 	bl	8002a68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 020e 	orr.w	r2, r2, #14
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e00f      	b.n	80027e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0204 	bic.w	r2, r2, #4
 80027d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 020a 	orr.w	r2, r2, #10
 80027e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e005      	b.n	8002802 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027fe:	2302      	movs	r3, #2
 8002800:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002802:	7dfb      	ldrb	r3, [r7, #23]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d008      	beq.n	8002836 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2204      	movs	r2, #4
 8002828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e022      	b.n	800287c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 020e 	bic.w	r2, r2, #14
 8002844:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f003 021c 	and.w	r2, r3, #28
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d005      	beq.n	80028ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2204      	movs	r2, #4
 80028a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e029      	b.n	8002900 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 020e 	bic.w	r2, r2, #14
 80028ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	f003 021c 	and.w	r2, r3, #28
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	2101      	movs	r1, #1
 80028da:	fa01 f202 	lsl.w	r2, r1, r2
 80028de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
    }
  }
  return status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f003 031c 	and.w	r3, r3, #28
 800292a:	2204      	movs	r2, #4
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d026      	beq.n	8002984 <HAL_DMA_IRQHandler+0x7a>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d021      	beq.n	8002984 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0204 	bic.w	r2, r2, #4
 800295c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f003 021c 	and.w	r2, r3, #28
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	2104      	movs	r1, #4
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	2b00      	cmp	r3, #0
 8002978:	d071      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002982:	e06c      	b.n	8002a5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002988:	f003 031c 	and.w	r3, r3, #28
 800298c:	2202      	movs	r2, #2
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d02e      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xec>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d029      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10b      	bne.n	80029c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 020a 	bic.w	r2, r2, #10
 80029be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	f003 021c 	and.w	r2, r3, #28
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	2102      	movs	r1, #2
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d038      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80029f4:	e033      	b.n	8002a5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f003 031c 	and.w	r3, r3, #28
 80029fe:	2208      	movs	r2, #8
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d02a      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x156>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d025      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020e 	bic.w	r2, r2, #14
 8002a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	f003 021c 	and.w	r2, r3, #28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
}
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f003 021c 	and.w	r2, r3, #28
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d108      	bne.n	8002aac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aaa:	e007      	b.n	8002abc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	e17f      	b.n	8002dd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8171 	beq.w	8002dd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <HAL_GPIO_Init+0x40>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d130      	bne.n	8002b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b3e:	2201      	movs	r2, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0201 	and.w	r2, r3, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d118      	bne.n	8002ba8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	6939      	ldr	r1, [r7, #16]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80ac 	beq.w	8002dd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002df8 <HAL_GPIO_Init+0x330>)
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002df8 <HAL_GPIO_Init+0x330>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c86:	4b5c      	ldr	r3, [pc, #368]	@ (8002df8 <HAL_GPIO_Init+0x330>)
 8002c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c92:	4a5a      	ldr	r2, [pc, #360]	@ (8002dfc <HAL_GPIO_Init+0x334>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x242>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4f      	ldr	r2, [pc, #316]	@ (8002e00 <HAL_GPIO_Init+0x338>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x23e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4e      	ldr	r2, [pc, #312]	@ (8002e04 <HAL_GPIO_Init+0x33c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x23a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002e08 <HAL_GPIO_Init+0x340>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x236>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002e0c <HAL_GPIO_Init+0x344>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x232>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8002e10 <HAL_GPIO_Init+0x348>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x22e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e14 <HAL_GPIO_Init+0x34c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x22a>
 8002cee:	2306      	movs	r3, #6
 8002cf0:	e00c      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e00a      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d1c:	4937      	ldr	r1, [pc, #220]	@ (8002dfc <HAL_GPIO_Init+0x334>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d4e:	4a32      	ldr	r2, [pc, #200]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d54:	4b30      	ldr	r3, [pc, #192]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d78:	4a27      	ldr	r2, [pc, #156]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d7e:	4b26      	ldr	r3, [pc, #152]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dcc:	4a12      	ldr	r2, [pc, #72]	@ (8002e18 <HAL_GPIO_Init+0x350>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f47f ae78 	bne.w	8002ad8 <HAL_GPIO_Init+0x10>
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	48000400 	.word	0x48000400
 8002e04:	48000800 	.word	0x48000800
 8002e08:	48000c00 	.word	0x48000c00
 8002e0c:	48001000 	.word	0x48001000
 8002e10:	48001400 	.word	0x48001400
 8002e14:	48001800 	.word	0x48001800
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e2c:	787b      	ldrb	r3, [r7, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e50:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40007000 	.word	0x40007000

08002e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e76:	d130      	bne.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e78:	4b23      	ldr	r3, [pc, #140]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e84:	d038      	beq.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e86:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e96:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2232      	movs	r2, #50	@ 0x32
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eac:	e002      	b.n	8002eb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb4:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec0:	d102      	bne.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f2      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed4:	d110      	bne.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e00f      	b.n	8002efa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eda:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee6:	d007      	beq.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ee8:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ef0:	4a05      	ldr	r2, [pc, #20]	@ (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	20000200 	.word	0x20000200
 8002f10:	431bde83 	.word	0x431bde83

08002f14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e3ca      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f26:	4b97      	ldr	r3, [pc, #604]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f30:	4b94      	ldr	r3, [pc, #592]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80e4 	beq.w	8003110 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_RCC_OscConfig+0x4a>
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	f040 808b 	bne.w	800306c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	f040 8087 	bne.w	800306c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f5e:	4b89      	ldr	r3, [pc, #548]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x62>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e3a2      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	4b82      	ldr	r3, [pc, #520]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <HAL_RCC_OscConfig+0x7c>
 8002f86:	4b7f      	ldr	r3, [pc, #508]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_OscConfig+0x88>
 8002f90:	4b7c      	ldr	r3, [pc, #496]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d223      	bcs.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fd55 	bl	8003a54 <RCC_SetFlashLatencyFromMSIRange>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e383      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb4:	4b73      	ldr	r3, [pc, #460]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a72      	ldr	r2, [pc, #456]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b70      	ldr	r3, [pc, #448]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	496d      	ldr	r1, [pc, #436]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	4968      	ldr	r1, [pc, #416]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
 8002fe6:	e025      	b.n	8003034 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe8:	4b66      	ldr	r3, [pc, #408]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a65      	ldr	r2, [pc, #404]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002fee:	f043 0308 	orr.w	r3, r3, #8
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b63      	ldr	r3, [pc, #396]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4960      	ldr	r1, [pc, #384]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003006:	4b5f      	ldr	r3, [pc, #380]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	495b      	ldr	r1, [pc, #364]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fd15 	bl	8003a54 <RCC_SetFlashLatencyFromMSIRange>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e343      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003034:	f000 fc4a 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b52      	ldr	r3, [pc, #328]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	4950      	ldr	r1, [pc, #320]	@ (8003188 <HAL_RCC_OscConfig+0x274>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	4a4e      	ldr	r2, [pc, #312]	@ (800318c <HAL_RCC_OscConfig+0x278>)
 8003052:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003054:	4b4e      	ldr	r3, [pc, #312]	@ (8003190 <HAL_RCC_OscConfig+0x27c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff f951 	bl	8002300 <HAL_InitTick>
 800305e:	4603      	mov	r3, r0
 8003060:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d052      	beq.n	800310e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	e327      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d032      	beq.n	80030da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003074:	4b43      	ldr	r3, [pc, #268]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a42      	ldr	r2, [pc, #264]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003080:	f7ff f98e 	bl	80023a0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003088:	f7ff f98a 	bl	80023a0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e310      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800309a:	4b3a      	ldr	r3, [pc, #232]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a36      	ldr	r2, [pc, #216]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b34      	ldr	r3, [pc, #208]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4931      	ldr	r1, [pc, #196]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	492c      	ldr	r1, [pc, #176]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	e01a      	b.n	8003110 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030da:	4b2a      	ldr	r3, [pc, #168]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a29      	ldr	r2, [pc, #164]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e6:	f7ff f95b 	bl	80023a0 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ee:	f7ff f957 	bl	80023a0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e2dd      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003100:	4b20      	ldr	r3, [pc, #128]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x1da>
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800310e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d074      	beq.n	8003206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b08      	cmp	r3, #8
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x21a>
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d10e      	bne.n	8003146 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d10b      	bne.n	8003146 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d064      	beq.n	8003204 <HAL_RCC_OscConfig+0x2f0>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d160      	bne.n	8003204 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e2ba      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x24a>
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0b      	ldr	r2, [pc, #44]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e026      	b.n	80031ac <HAL_RCC_OscConfig+0x298>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003166:	d115      	bne.n	8003194 <HAL_RCC_OscConfig+0x280>
 8003168:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 800316e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a02      	ldr	r2, [pc, #8]	@ (8003184 <HAL_RCC_OscConfig+0x270>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	e014      	b.n	80031ac <HAL_RCC_OscConfig+0x298>
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	08011e14 	.word	0x08011e14
 800318c:	20000200 	.word	0x20000200
 8003190:	20000204 	.word	0x20000204
 8003194:	4ba0      	ldr	r3, [pc, #640]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a9f      	ldr	r2, [pc, #636]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b9d      	ldr	r3, [pc, #628]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a9c      	ldr	r2, [pc, #624]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7ff f8f4 	bl	80023a0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7ff f8f0 	bl	80023a0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e276      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ce:	4b92      	ldr	r3, [pc, #584]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x2a8>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7ff f8e0 	bl	80023a0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7ff f8dc 	bl	80023a0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	@ 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e262      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f6:	4b88      	ldr	r3, [pc, #544]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2d0>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d060      	beq.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x310>
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d119      	bne.n	8003252 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d116      	bne.n	8003252 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003224:	4b7c      	ldr	r3, [pc, #496]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_OscConfig+0x328>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e23f      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b76      	ldr	r3, [pc, #472]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	4973      	ldr	r1, [pc, #460]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	e040      	b.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d023      	beq.n	80032a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325a:	4b6f      	ldr	r3, [pc, #444]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6e      	ldr	r2, [pc, #440]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7ff f89b 	bl	80023a0 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326e:	f7ff f897 	bl	80023a0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e21d      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003280:	4b65      	ldr	r3, [pc, #404]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b62      	ldr	r3, [pc, #392]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	495f      	ldr	r1, [pc, #380]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	e018      	b.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80032a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7ff f877 	bl	80023a0 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b6:	f7ff f873 	bl	80023a0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1f9      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c8:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03c      	beq.n	800335a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01c      	beq.n	8003322 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80032ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7ff f852 	bl	80023a0 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7ff f84e 	bl	80023a0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1d4      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003312:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <HAL_RCC_OscConfig+0x3ec>
 8003320:	e01b      	b.n	800335a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003328:	4a3b      	ldr	r2, [pc, #236]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7ff f835 	bl	80023a0 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333a:	f7ff f831 	bl	80023a0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1b7      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800334c:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ef      	bne.n	800333a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80a6 	beq.w	80034b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003368:	2300      	movs	r3, #0
 800336a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800336c:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337c:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003382:	6593      	str	r3, [r2, #88]	@ 0x58
 8003384:	4b24      	ldr	r3, [pc, #144]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <HAL_RCC_OscConfig+0x508>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d118      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a0:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <HAL_RCC_OscConfig+0x508>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1d      	ldr	r2, [pc, #116]	@ (800341c <HAL_RCC_OscConfig+0x508>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ac:	f7fe fff8 	bl	80023a0 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b4:	f7fe fff4 	bl	80023a0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e17a      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c6:	4b15      	ldr	r3, [pc, #84]	@ (800341c <HAL_RCC_OscConfig+0x508>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d108      	bne.n	80033ec <HAL_RCC_OscConfig+0x4d8>
 80033da:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ea:	e029      	b.n	8003440 <HAL_RCC_OscConfig+0x52c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d115      	bne.n	8003420 <HAL_RCC_OscConfig+0x50c>
 80033f4:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	4a07      	ldr	r2, [pc, #28]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	4a03      	ldr	r2, [pc, #12]	@ (8003418 <HAL_RCC_OscConfig+0x504>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003414:	e014      	b.n	8003440 <HAL_RCC_OscConfig+0x52c>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
 8003420:	4b9c      	ldr	r3, [pc, #624]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	4a9b      	ldr	r2, [pc, #620]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003430:	4b98      	ldr	r3, [pc, #608]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	4a97      	ldr	r2, [pc, #604]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe ffaa 	bl	80023a0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe ffa6 	bl	80023a0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e12a      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003466:	4b8b      	ldr	r3, [pc, #556]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ed      	beq.n	8003450 <HAL_RCC_OscConfig+0x53c>
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fe ff93 	bl	80023a0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe ff8f 	bl	80023a0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e113      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003494:	4b7f      	ldr	r3, [pc, #508]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ed      	bne.n	800347e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a2:	7ffb      	ldrb	r3, [r7, #31]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	4a79      	ldr	r2, [pc, #484]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80fe 	beq.w	80036ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	f040 80d0 	bne.w	8003668 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034c8:	4b72      	ldr	r3, [pc, #456]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0203 	and.w	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	429a      	cmp	r2, r3
 80034da:	d130      	bne.n	800353e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	3b01      	subs	r3, #1
 80034e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d127      	bne.n	800353e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d11f      	bne.n	800353e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003508:	2a07      	cmp	r2, #7
 800350a:	bf14      	ite	ne
 800350c:	2201      	movne	r2, #1
 800350e:	2200      	moveq	r2, #0
 8003510:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003512:	4293      	cmp	r3, r2
 8003514:	d113      	bne.n	800353e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d109      	bne.n	800353e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d06e      	beq.n	800361c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d069      	beq.n	8003618 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003544:	4b53      	ldr	r3, [pc, #332]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003550:	4b50      	ldr	r3, [pc, #320]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0ad      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003560:	4b4c      	ldr	r3, [pc, #304]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a4b      	ldr	r2, [pc, #300]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800356c:	f7fe ff18 	bl	80023a0 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe ff14 	bl	80023a0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e09a      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003586:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003592:	4b40      	ldr	r3, [pc, #256]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <HAL_RCC_OscConfig+0x784>)
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035a2:	3a01      	subs	r2, #1
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	4311      	orrs	r1, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035ac:	0212      	lsls	r2, r2, #8
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035b4:	0852      	lsrs	r2, r2, #1
 80035b6:	3a01      	subs	r2, #1
 80035b8:	0552      	lsls	r2, r2, #21
 80035ba:	4311      	orrs	r1, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035c0:	0852      	lsrs	r2, r2, #1
 80035c2:	3a01      	subs	r2, #1
 80035c4:	0652      	lsls	r2, r2, #25
 80035c6:	4311      	orrs	r1, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035cc:	0912      	lsrs	r2, r2, #4
 80035ce:	0452      	lsls	r2, r2, #17
 80035d0:	430a      	orrs	r2, r1
 80035d2:	4930      	ldr	r1, [pc, #192]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 80035ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f0:	f7fe fed6 	bl	80023a0 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe fed2 	bl	80023a0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e058      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360a:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003616:	e050      	b.n	80036ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e04f      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d148      	bne.n	80036ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003628:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a19      	ldr	r2, [pc, #100]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003632:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003634:	4b17      	ldr	r3, [pc, #92]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a16      	ldr	r2, [pc, #88]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 800363a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800363e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003640:	f7fe feae 	bl	80023a0 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe feaa 	bl	80023a0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e030      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365a:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x734>
 8003666:	e028      	b.n	80036ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d023      	beq.n	80036b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a08      	ldr	r2, [pc, #32]	@ (8003694 <HAL_RCC_OscConfig+0x780>)
 8003674:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe fe91 	bl	80023a0 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003680:	e00c      	b.n	800369c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003682:	f7fe fe8d 	bl	80023a0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d905      	bls.n	800369c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e013      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
 8003694:	40021000 	.word	0x40021000
 8003698:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <HAL_RCC_OscConfig+0x7b0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ec      	bne.n	8003682 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036a8:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_RCC_OscConfig+0x7b0>)
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	4905      	ldr	r1, [pc, #20]	@ (80036c4 <HAL_RCC_OscConfig+0x7b0>)
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_OscConfig+0x7b4>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
 80036b4:	e001      	b.n	80036ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	feeefffc 	.word	0xfeeefffc

080036cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0e7      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b75      	ldr	r3, [pc, #468]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b72      	ldr	r3, [pc, #456]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0207 	bic.w	r2, r3, #7
 80036f6:	4970      	ldr	r1, [pc, #448]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b6e      	ldr	r3, [pc, #440]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0cf      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b66      	ldr	r3, [pc, #408]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003728:	429a      	cmp	r2, r3
 800372a:	d908      	bls.n	800373e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b63      	ldr	r3, [pc, #396]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4960      	ldr	r1, [pc, #384]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d04c      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003752:	4b5a      	ldr	r3, [pc, #360]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d121      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e0a6      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376a:	4b54      	ldr	r3, [pc, #336]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d115      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e09a      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003782:	4b4e      	ldr	r3, [pc, #312]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e08e      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003792:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e086      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b46      	ldr	r3, [pc, #280]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4943      	ldr	r1, [pc, #268]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b4:	f7fe fdf4 	bl	80023a0 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fe fdf0 	bl	80023a0 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e06e      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b3a      	ldr	r3, [pc, #232]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d010      	beq.n	8003812 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	4b31      	ldr	r3, [pc, #196]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d208      	bcs.n	8003812 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b2e      	ldr	r3, [pc, #184]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	492b      	ldr	r1, [pc, #172]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003812:	4b29      	ldr	r3, [pc, #164]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d210      	bcs.n	8003842 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003820:	4b25      	ldr	r3, [pc, #148]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 0207 	bic.w	r2, r3, #7
 8003828:	4923      	ldr	r1, [pc, #140]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003830:	4b21      	ldr	r3, [pc, #132]	@ (80038b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d001      	beq.n	8003842 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e036      	b.n	80038b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4918      	ldr	r1, [pc, #96]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386c:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4910      	ldr	r1, [pc, #64]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003880:	f000 f824 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	490b      	ldr	r1, [pc, #44]	@ (80038c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
 800389c:	4a09      	ldr	r2, [pc, #36]	@ (80038c4 <HAL_RCC_ClockConfig+0x1f8>)
 800389e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038a0:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_ClockConfig+0x1fc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fd2b 	bl	8002300 <HAL_InitTick>
 80038aa:	4603      	mov	r3, r0
 80038ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ae:	7afb      	ldrb	r3, [r7, #11]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40022000 	.word	0x40022000
 80038bc:	40021000 	.word	0x40021000
 80038c0:	08011e14 	.word	0x08011e14
 80038c4:	20000200 	.word	0x20000200
 80038c8:	20000204 	.word	0x20000204

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	@ 0x24
 80038d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038da:	4b3e      	ldr	r3, [pc, #248]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e4:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x34>
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d121      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d11e      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003900:	4b34      	ldr	r3, [pc, #208]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800390c:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e005      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800391c:	4b2d      	ldr	r3, [pc, #180]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003928:	4a2b      	ldr	r2, [pc, #172]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d102      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003944:	4b25      	ldr	r3, [pc, #148]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e004      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d101      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003950:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d134      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395a:	4b1e      	ldr	r3, [pc, #120]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d003      	beq.n	8003972 <HAL_RCC_GetSysClockFreq+0xa6>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d003      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0xac>
 8003970:	e005      	b.n	800397e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003972:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003974:	617b      	str	r3, [r7, #20]
      break;
 8003976:	e005      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800397a:	617b      	str	r3, [r7, #20]
      break;
 800397c:	e002      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	617b      	str	r3, [r7, #20]
      break;
 8003982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003984:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	3301      	adds	r3, #1
 8003990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003992:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	fb03 f202 	mul.w	r2, r3, r2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039aa:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	0e5b      	lsrs	r3, r3, #25
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	3301      	adds	r3, #1
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039c4:	69bb      	ldr	r3, [r7, #24]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	@ 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	08011e2c 	.word	0x08011e2c
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	007a1200 	.word	0x007a1200

080039e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e8:	4b03      	ldr	r3, [pc, #12]	@ (80039f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000200 	.word	0x20000200

080039fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a00:	f7ff fff0 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4904      	ldr	r1, [pc, #16]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08011e24 	.word	0x08011e24

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a2c:	f7ff ffda 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0adb      	lsrs	r3, r3, #11
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4904      	ldr	r1, [pc, #16]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08011e24 	.word	0x08011e24

08003a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a6c:	f7ff f9ee 	bl	8002e4c <HAL_PWREx_GetVoltageRange>
 8003a70:	6178      	str	r0, [r7, #20]
 8003a72:	e014      	b.n	8003a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a74:	4b25      	ldr	r3, [pc, #148]	@ (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	4a24      	ldr	r2, [pc, #144]	@ (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a80:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a8c:	f7ff f9de 	bl	8002e4c <HAL_PWREx_GetVoltageRange>
 8003a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa4:	d10b      	bne.n	8003abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b80      	cmp	r3, #128	@ 0x80
 8003aaa:	d919      	bls.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ab0:	d902      	bls.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e013      	b.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ab8:	2301      	movs	r3, #1
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	e010      	b.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b80      	cmp	r3, #128	@ 0x80
 8003ac2:	d902      	bls.n	8003aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e00a      	b.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	d102      	bne.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e004      	b.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b70      	cmp	r3, #112	@ 0x70
 8003ada:	d101      	bne.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003adc:	2301      	movs	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 0207 	bic.w	r2, r3, #7
 8003ae8:	4909      	ldr	r1, [pc, #36]	@ (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d001      	beq.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40022000 	.word	0x40022000

08003b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b20:	2300      	movs	r3, #0
 8003b22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d041      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b38:	d02a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b3e:	d824      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b44:	d008      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b4a:	d81e      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b54:	d010      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b56:	e018      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b58:	4b86      	ldr	r3, [pc, #536]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a85      	ldr	r2, [pc, #532]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b64:	e015      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fabb 	bl	80040e8 <RCCEx_PLLSAI1_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b76:	e00c      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3320      	adds	r3, #32
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fba6 	bl	80042d0 <RCCEx_PLLSAI2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b98:	4b76      	ldr	r3, [pc, #472]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba6:	4973      	ldr	r1, [pc, #460]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bae:	e001      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d041      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bc8:	d02a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bce:	d824      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bda:	d81e      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003be4:	d010      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003be6:	e018      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be8:	4b62      	ldr	r3, [pc, #392]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a61      	ldr	r2, [pc, #388]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bf4:	e015      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fa73 	bl	80040e8 <RCCEx_PLLSAI1_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3320      	adds	r3, #32
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fb5e 	bl	80042d0 <RCCEx_PLLSAI2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c28:	4b52      	ldr	r3, [pc, #328]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c36:	494f      	ldr	r1, [pc, #316]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a0 	beq.w	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c56:	4b47      	ldr	r3, [pc, #284]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b41      	ldr	r3, [pc, #260]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	4a40      	ldr	r2, [pc, #256]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c78:	4b3e      	ldr	r3, [pc, #248]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c84:	2301      	movs	r3, #1
 8003c86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c88:	4b3b      	ldr	r3, [pc, #236]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c94:	f7fe fb84 	bl	80023a0 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9a:	e009      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9c:	f7fe fb80 	bl	80023a0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d902      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	74fb      	strb	r3, [r7, #19]
        break;
 8003cae:	e005      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb0:	4b31      	ldr	r3, [pc, #196]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ef      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d15c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ccc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01f      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d019      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ce0:	4b24      	ldr	r3, [pc, #144]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cec:	4b21      	ldr	r3, [pc, #132]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf2:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	4a1c      	ldr	r2, [pc, #112]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d0c:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fe fb3f 	bl	80023a0 <HAL_GetTick>
 8003d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d24:	e00b      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe fb3b 	bl	80023a0 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d902      	bls.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ec      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d52:	4b08      	ldr	r3, [pc, #32]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d62:	4904      	ldr	r1, [pc, #16]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d6a:	e009      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	74bb      	strb	r3, [r7, #18]
 8003d70:	e006      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d80:	7c7b      	ldrb	r3, [r7, #17]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b9e      	ldr	r3, [pc, #632]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	4a9d      	ldr	r2, [pc, #628]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d9e:	4b98      	ldr	r3, [pc, #608]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da4:	f023 0203 	bic.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dac:	4994      	ldr	r1, [pc, #592]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f023 020c 	bic.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dce:	498c      	ldr	r1, [pc, #560]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de2:	4b87      	ldr	r3, [pc, #540]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	4983      	ldr	r1, [pc, #524]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e04:	4b7e      	ldr	r3, [pc, #504]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	497b      	ldr	r1, [pc, #492]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e26:	4b76      	ldr	r3, [pc, #472]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e34:	4972      	ldr	r1, [pc, #456]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e48:	4b6d      	ldr	r3, [pc, #436]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	496a      	ldr	r1, [pc, #424]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e6a:	4b65      	ldr	r3, [pc, #404]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e78:	4961      	ldr	r1, [pc, #388]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9a:	4959      	ldr	r1, [pc, #356]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eae:	4b54      	ldr	r3, [pc, #336]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebc:	4950      	ldr	r1, [pc, #320]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ede:	4948      	ldr	r1, [pc, #288]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef2:	4b43      	ldr	r3, [pc, #268]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f00:	493f      	ldr	r1, [pc, #252]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d028      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f14:	4b3a      	ldr	r3, [pc, #232]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f22:	4937      	ldr	r1, [pc, #220]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f32:	d106      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b32      	ldr	r3, [pc, #200]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a31      	ldr	r2, [pc, #196]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	e011      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f8c8 	bl	80040e8 <RCCEx_PLLSAI1_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f72:	4b23      	ldr	r3, [pc, #140]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f80:	491f      	ldr	r1, [pc, #124]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f90:	d106      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f92:	4b1b      	ldr	r3, [pc, #108]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4a1a      	ldr	r2, [pc, #104]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f9c:	60d3      	str	r3, [r2, #12]
 8003f9e:	e011      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2101      	movs	r1, #1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f899 	bl	80040e8 <RCCEx_PLLSAI1_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02b      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	4908      	ldr	r1, [pc, #32]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fee:	d109      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff0:	4b03      	ldr	r3, [pc, #12]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a02      	ldr	r2, [pc, #8]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ffa:	60d3      	str	r3, [r2, #12]
 8003ffc:	e014      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004008:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800400c:	d10c      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	2101      	movs	r1, #1
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f867 	bl	80040e8 <RCCEx_PLLSAI1_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02f      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004034:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004042:	4928      	ldr	r1, [pc, #160]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800404e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004052:	d10d      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f844 	bl	80040e8 <RCCEx_PLLSAI1_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d014      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	74bb      	strb	r3, [r7, #18]
 800406e:	e011      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004078:	d10c      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3320      	adds	r3, #32
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f925 	bl	80042d0 <RCCEx_PLLSAI2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040a0:	4b10      	ldr	r3, [pc, #64]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ae:	490d      	ldr	r1, [pc, #52]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040c2:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040d2:	4904      	ldr	r1, [pc, #16]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040da:	7cbb      	ldrb	r3, [r7, #18]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40021000 	.word	0x40021000

080040e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040f6:	4b75      	ldr	r3, [pc, #468]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004102:	4b72      	ldr	r3, [pc, #456]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0203 	and.w	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d10d      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
       ||
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800411a:	4b6c      	ldr	r3, [pc, #432]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
       ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d047      	beq.n	80041be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	e044      	b.n	80041be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d018      	beq.n	800416e <RCCEx_PLLSAI1_Config+0x86>
 800413c:	2b03      	cmp	r3, #3
 800413e:	d825      	bhi.n	800418c <RCCEx_PLLSAI1_Config+0xa4>
 8004140:	2b01      	cmp	r3, #1
 8004142:	d002      	beq.n	800414a <RCCEx_PLLSAI1_Config+0x62>
 8004144:	2b02      	cmp	r3, #2
 8004146:	d009      	beq.n	800415c <RCCEx_PLLSAI1_Config+0x74>
 8004148:	e020      	b.n	800418c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800414a:	4b60      	ldr	r3, [pc, #384]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11d      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415a:	e01a      	b.n	8004192 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800415c:	4b5b      	ldr	r3, [pc, #364]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d116      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416c:	e013      	b.n	8004196 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800416e:	4b57      	ldr	r3, [pc, #348]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800417a:	4b54      	ldr	r3, [pc, #336]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800418a:	e006      	b.n	800419a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	e004      	b.n	800419c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419a:	bf00      	nop
    }

    if(status == HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041a2:	4b4a      	ldr	r3, [pc, #296]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	430b      	orrs	r3, r1
 80041b8:	4944      	ldr	r1, [pc, #272]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d17d      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041c4:	4b41      	ldr	r3, [pc, #260]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a40      	ldr	r2, [pc, #256]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fe f8e6 	bl	80023a0 <HAL_GetTick>
 80041d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041d6:	e009      	b.n	80041ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041d8:	f7fe f8e2 	bl	80023a0 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d902      	bls.n	80041ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ea:	e005      	b.n	80041f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ec:	4b37      	ldr	r3, [pc, #220]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ef      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d160      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d111      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004204:	4b31      	ldr	r3, [pc, #196]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800420c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6892      	ldr	r2, [r2, #8]
 8004214:	0211      	lsls	r1, r2, #8
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68d2      	ldr	r2, [r2, #12]
 800421a:	0912      	lsrs	r2, r2, #4
 800421c:	0452      	lsls	r2, r2, #17
 800421e:	430a      	orrs	r2, r1
 8004220:	492a      	ldr	r1, [pc, #168]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	610b      	str	r3, [r1, #16]
 8004226:	e027      	b.n	8004278 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d112      	bne.n	8004254 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800422e:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004236:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6892      	ldr	r2, [r2, #8]
 800423e:	0211      	lsls	r1, r2, #8
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6912      	ldr	r2, [r2, #16]
 8004244:	0852      	lsrs	r2, r2, #1
 8004246:	3a01      	subs	r2, #1
 8004248:	0552      	lsls	r2, r2, #21
 800424a:	430a      	orrs	r2, r1
 800424c:	491f      	ldr	r1, [pc, #124]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	610b      	str	r3, [r1, #16]
 8004252:	e011      	b.n	8004278 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004254:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800425c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	0211      	lsls	r1, r2, #8
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6952      	ldr	r2, [r2, #20]
 800426a:	0852      	lsrs	r2, r2, #1
 800426c:	3a01      	subs	r2, #1
 800426e:	0652      	lsls	r2, r2, #25
 8004270:	430a      	orrs	r2, r1
 8004272:	4916      	ldr	r1, [pc, #88]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a13      	ldr	r2, [pc, #76]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe f88c 	bl	80023a0 <HAL_GetTick>
 8004288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800428a:	e009      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800428c:	f7fe f888 	bl	80023a0 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d902      	bls.n	80042a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	73fb      	strb	r3, [r7, #15]
          break;
 800429e:	e005      	b.n	80042ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ef      	beq.n	800428c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042b2:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	4904      	ldr	r1, [pc, #16]	@ (80042cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000

080042d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042de:	4b6a      	ldr	r3, [pc, #424]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d018      	beq.n	800431c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ea:	4b67      	ldr	r3, [pc, #412]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0203 	and.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d10d      	bne.n	8004316 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
       ||
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004302:	4b61      	ldr	r3, [pc, #388]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
       ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d047      	beq.n	80043a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e044      	b.n	80043a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d018      	beq.n	8004356 <RCCEx_PLLSAI2_Config+0x86>
 8004324:	2b03      	cmp	r3, #3
 8004326:	d825      	bhi.n	8004374 <RCCEx_PLLSAI2_Config+0xa4>
 8004328:	2b01      	cmp	r3, #1
 800432a:	d002      	beq.n	8004332 <RCCEx_PLLSAI2_Config+0x62>
 800432c:	2b02      	cmp	r3, #2
 800432e:	d009      	beq.n	8004344 <RCCEx_PLLSAI2_Config+0x74>
 8004330:	e020      	b.n	8004374 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004332:	4b55      	ldr	r3, [pc, #340]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11d      	bne.n	800437a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004342:	e01a      	b.n	800437a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004344:	4b50      	ldr	r3, [pc, #320]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434c:	2b00      	cmp	r3, #0
 800434e:	d116      	bne.n	800437e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e013      	b.n	800437e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004356:	4b4c      	ldr	r3, [pc, #304]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004362:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004372:	e006      	b.n	8004382 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	e004      	b.n	8004384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800437a:	bf00      	nop
 800437c:	e002      	b.n	8004384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800437e:	bf00      	nop
 8004380:	e000      	b.n	8004384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004382:	bf00      	nop
    }

    if(status == HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10d      	bne.n	80043a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800438a:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	430b      	orrs	r3, r1
 80043a0:	4939      	ldr	r1, [pc, #228]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d167      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043ac:	4b36      	ldr	r3, [pc, #216]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a35      	ldr	r2, [pc, #212]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b8:	f7fd fff2 	bl	80023a0 <HAL_GetTick>
 80043bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043be:	e009      	b.n	80043d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043c0:	f7fd ffee 	bl	80023a0 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d902      	bls.n	80043d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	73fb      	strb	r3, [r7, #15]
        break;
 80043d2:	e005      	b.n	80043e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ef      	bne.n	80043c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d14a      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d111      	bne.n	8004410 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043ec:	4b26      	ldr	r3, [pc, #152]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6892      	ldr	r2, [r2, #8]
 80043fc:	0211      	lsls	r1, r2, #8
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68d2      	ldr	r2, [r2, #12]
 8004402:	0912      	lsrs	r2, r2, #4
 8004404:	0452      	lsls	r2, r2, #17
 8004406:	430a      	orrs	r2, r1
 8004408:	491f      	ldr	r1, [pc, #124]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	614b      	str	r3, [r1, #20]
 800440e:	e011      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004418:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6892      	ldr	r2, [r2, #8]
 8004420:	0211      	lsls	r1, r2, #8
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6912      	ldr	r2, [r2, #16]
 8004426:	0852      	lsrs	r2, r2, #1
 8004428:	3a01      	subs	r2, #1
 800442a:	0652      	lsls	r2, r2, #25
 800442c:	430a      	orrs	r2, r1
 800442e:	4916      	ldr	r1, [pc, #88]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004434:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a13      	ldr	r2, [pc, #76]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fd ffae 	bl	80023a0 <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004446:	e009      	b.n	800445c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004448:	f7fd ffaa 	bl	80023a0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
          break;
 800445a:	e005      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800445c:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4904      	ldr	r1, [pc, #16]	@ (8004488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000

0800448c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e095      	b.n	80045ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ae:	d009      	beq.n	80044c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	61da      	str	r2, [r3, #28]
 80044b6:	e005      	b.n	80044c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fc6c 	bl	8001dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004504:	d902      	bls.n	800450c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	e002      	b.n	8004512 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800450c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004510:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800451a:	d007      	beq.n	800452c <HAL_SPI_Init+0xa0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004524:	d002      	beq.n	800452c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456e:	ea42 0103 	orr.w	r1, r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	f003 0204 	and.w	r2, r3, #4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045a8:	ea42 0103 	orr.w	r1, r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e2:	f7fd fedd 	bl	80023a0 <HAL_GetTick>
 80045e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d001      	beq.n	80045fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
 80045fa:	e15c      	b.n	80048b6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_SPI_Transmit+0x36>
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e154      	b.n	80048b6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_SPI_Transmit+0x48>
 8004616:	2302      	movs	r3, #2
 8004618:	e14d      	b.n	80048b6 <HAL_SPI_Transmit+0x2e4>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2203      	movs	r2, #3
 8004626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466c:	d10f      	bne.n	800468e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800468c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d007      	beq.n	80046ac <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046b4:	d952      	bls.n	800475c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Transmit+0xf2>
 80046be:	8b7b      	ldrh	r3, [r7, #26]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d145      	bne.n	8004750 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	881a      	ldrh	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	1c9a      	adds	r2, r3, #2
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046e8:	e032      	b.n	8004750 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d112      	bne.n	800471e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	881a      	ldrh	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	1c9a      	adds	r2, r3, #2
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800471c:	e018      	b.n	8004750 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800471e:	f7fd fe3f 	bl	80023a0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d803      	bhi.n	8004736 <HAL_SPI_Transmit+0x164>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d102      	bne.n	800473c <HAL_SPI_Transmit+0x16a>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0b2      	b.n	80048b6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1c7      	bne.n	80046ea <HAL_SPI_Transmit+0x118>
 800475a:	e083      	b.n	8004864 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_SPI_Transmit+0x198>
 8004764:	8b7b      	ldrh	r3, [r7, #26]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d177      	bne.n	800485a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d912      	bls.n	800479a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	1c9a      	adds	r2, r3, #2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b02      	subs	r3, #2
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004798:	e05f      	b.n	800485a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047c0:	e04b      	b.n	800485a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d12b      	bne.n	8004828 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d912      	bls.n	8004800 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047de:	881a      	ldrh	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	1c9a      	adds	r2, r3, #2
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b02      	subs	r3, #2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047fe:	e02c      	b.n	800485a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	330c      	adds	r3, #12
 800480a:	7812      	ldrb	r2, [r2, #0]
 800480c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004826:	e018      	b.n	800485a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004828:	f7fd fdba 	bl	80023a0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d803      	bhi.n	8004840 <HAL_SPI_Transmit+0x26e>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d102      	bne.n	8004846 <HAL_SPI_Transmit+0x274>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e02d      	b.n	80048b6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ae      	bne.n	80047c2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fbd3 	bl	8005014 <SPI_EndRxTxTransaction>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d001      	beq.n	80048de <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
 80048dc:	e0d4      	b.n	8004a88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_SPI_Transmit_DMA+0x2a>
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e0cc      	b.n	8004a88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_SPI_Transmit_DMA+0x3c>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0c5      	b.n	8004a88 <HAL_SPI_Transmit_DMA+0x1c8>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2203      	movs	r2, #3
 8004908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800494e:	d10f      	bne.n	8004970 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800495e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800496e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004974:	4a46      	ldr	r2, [pc, #280]	@ (8004a90 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497c:	4a45      	ldr	r2, [pc, #276]	@ (8004a94 <HAL_SPI_Transmit_DMA+0x1d4>)
 800497e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	4a44      	ldr	r2, [pc, #272]	@ (8004a98 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004986:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498c:	2200      	movs	r2, #0
 800498e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800499e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049a8:	d82d      	bhi.n	8004a06 <HAL_SPI_Transmit_DMA+0x146>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b4:	d127      	bne.n	8004a06 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10f      	bne.n	80049e4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049d2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049e2:	e010      	b.n	8004a06 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049f2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3301      	adds	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a1c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a1e:	f7fd fe95 	bl	800274c <HAL_DMA_Start_IT>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a2c:	f043 0210 	orr.w	r2, r3, #16
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e023      	b.n	8004a88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4a:	2b40      	cmp	r3, #64	@ 0x40
 8004a4c:	d007      	beq.n	8004a5e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0220 	orr.w	r2, r2, #32
 8004a74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0202 	orr.w	r2, r2, #2
 8004a84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	08004d53 	.word	0x08004d53
 8004a94:	08004cad 	.word	0x08004cad
 8004a98:	08004d6f 	.word	0x08004d6f

08004a9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10e      	bne.n	8004adc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
    return;
 8004ada:	e0ce      	b.n	8004c7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_SPI_IRQHandler+0x5e>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
    return;
 8004af8:	e0bf      	b.n	8004c7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <HAL_SPI_IRQHandler+0x7e>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80b0 	beq.w	8004c7a <HAL_SPI_IRQHandler+0x1de>
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80aa 	beq.w	8004c7a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d023      	beq.n	8004b78 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d011      	beq.n	8004b60 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b40:	f043 0204 	orr.w	r2, r3, #4
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	e00b      	b.n	8004b78 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]
        return;
 8004b76:	e080      	b.n	8004c7a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d014      	beq.n	8004bac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b86:	f043 0201 	orr.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bba:	f043 0208 	orr.w	r2, r3, #8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d04f      	beq.n	8004c78 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004be6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <HAL_SPI_IRQHandler+0x168>
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d034      	beq.n	8004c6e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0203 	bic.w	r2, r2, #3
 8004c12:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d011      	beq.n	8004c40 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	4a17      	ldr	r2, [pc, #92]	@ (8004c80 <HAL_SPI_IRQHandler+0x1e4>)
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fd fe2d 	bl	8002888 <HAL_DMA_Abort_IT>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d016      	beq.n	8004c76 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c80 <HAL_SPI_IRQHandler+0x1e4>)
 8004c4e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fd fe17 	bl	8002888 <HAL_DMA_Abort_IT>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004c6c:	e003      	b.n	8004c76 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f812 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c74:	e000      	b.n	8004c78 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004c76:	bf00      	nop
    return;
 8004c78:	bf00      	nop
  }
}
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	08004daf 	.word	0x08004daf

08004c84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cba:	f7fd fb71 	bl	80023a0 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d03b      	beq.n	8004d46 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0220 	bic.w	r2, r2, #32
 8004cdc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0202 	bic.w	r2, r2, #2
 8004cec:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	2164      	movs	r1, #100	@ 0x64
 8004cf2:	6978      	ldr	r0, [r7, #20]
 8004cf4:	f000 f98e 	bl	8005014 <SPI_EndRxTxTransaction>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	f043 0220 	orr.w	r2, r3, #32
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d3e:	6978      	ldr	r0, [r7, #20]
 8004d40:	f7ff ffaa 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d44:	e002      	b.n	8004d4c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	f7fc fef6 	bl	8001b38 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff ff8f 	bl	8004c84 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0203 	bic.w	r2, r2, #3
 8004d8a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d90:	f043 0210 	orr.w	r2, r3, #16
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff ff79 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ff64 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004de8:	f7fd fada 	bl	80023a0 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	4413      	add	r3, r2
 8004df6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004df8:	f7fd fad2 	bl	80023a0 <HAL_GetTick>
 8004dfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dfe:	4b39      	ldr	r3, [pc, #228]	@ (8004ee4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	015b      	lsls	r3, r3, #5
 8004e04:	0d1b      	lsrs	r3, r3, #20
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e0e:	e054      	b.n	8004eba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d050      	beq.n	8004eba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e18:	f7fd fac2 	bl	80023a0 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d902      	bls.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d13d      	bne.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e46:	d111      	bne.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e50:	d004      	beq.n	8004e5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5a:	d107      	bne.n	8004e6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e74:	d10f      	bne.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e017      	b.n	8004eda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	bf0c      	ite	eq
 8004eca:	2301      	moveq	r3, #1
 8004ecc:	2300      	movne	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d19b      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000200 	.word	0x20000200

08004ee8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	@ 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004efa:	f7fd fa51 	bl	80023a0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	4413      	add	r3, r2
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f0a:	f7fd fa49 	bl	80023a0 <HAL_GetTick>
 8004f0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f18:	4b3d      	ldr	r3, [pc, #244]	@ (8005010 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00da      	lsls	r2, r3, #3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	0d1b      	lsrs	r3, r3, #20
 8004f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f30:	e060      	b.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f38:	d107      	bne.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d050      	beq.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f52:	f7fd fa25 	bl	80023a0 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d902      	bls.n	8004f68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d13d      	bne.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f80:	d111      	bne.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f8a:	d004      	beq.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f94:	d107      	bne.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fae:	d10f      	bne.n	8004fd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e010      	b.n	8005006 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d196      	bne.n	8004f32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	@ 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000200 	.word	0x20000200

08005014 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff ff5b 	bl	8004ee8 <SPI_WaitFifoStateUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d007      	beq.n	8005048 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e027      	b.n	8005098 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	2180      	movs	r1, #128	@ 0x80
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fec0 	bl	8004dd8 <SPI_WaitFlagStateUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e014      	b.n	8005098 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2200      	movs	r2, #0
 8005076:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff ff34 	bl	8004ee8 <SPI_WaitFifoStateUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e000      	b.n	8005098 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e040      	b.n	8005134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fd f876 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	@ 0x24
 80050cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fea6 	bl	8005e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fbeb 	bl	80058c8 <UART_SetConfig>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e01b      	b.n	8005134 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800510a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800511a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 ff25 	bl	8005f7c <UART_CheckIdleState>
 8005132:	4603      	mov	r3, r0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800513c:	b480      	push	{r7}
 800513e:	b08b      	sub	sp, #44	@ 0x2c
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800514e:	2b20      	cmp	r3, #32
 8005150:	d147      	bne.n	80051e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_UART_Transmit_IT+0x22>
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e040      	b.n	80051e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2221      	movs	r2, #33	@ 0x21
 800518a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005194:	d107      	bne.n	80051a6 <HAL_UART_Transmit_IT+0x6a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a13      	ldr	r2, [pc, #76]	@ (80051f0 <HAL_UART_Transmit_IT+0xb4>)
 80051a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80051a4:	e002      	b.n	80051ac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a12      	ldr	r2, [pc, #72]	@ (80051f4 <HAL_UART_Transmit_IT+0xb8>)
 80051aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	69f9      	ldr	r1, [r7, #28]
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e6      	bne.n	80051ac <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	372c      	adds	r7, #44	@ 0x2c
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	080064df 	.word	0x080064df
 80051f4:	08006429 	.word	0x08006429

080051f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	@ 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800520c:	2b20      	cmp	r3, #32
 800520e:	d137      	bne.n	8005280 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_UART_Receive_IT+0x24>
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e030      	b.n	8005282 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a18      	ldr	r2, [pc, #96]	@ (800528c <HAL_UART_Receive_IT+0x94>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d01f      	beq.n	8005270 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d018      	beq.n	8005270 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	613b      	str	r3, [r7, #16]
   return(result);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	69f9      	ldr	r1, [r7, #28]
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	61bb      	str	r3, [r7, #24]
   return(result);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e6      	bne.n	800523e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	461a      	mov	r2, r3
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 ff96 	bl	80061a8 <UART_Start_Receive_IT>
 800527c:	4603      	mov	r3, r0
 800527e:	e000      	b.n	8005282 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3728      	adds	r7, #40	@ 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40008000 	.word	0x40008000

08005290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b0ba      	sub	sp, #232	@ 0xe8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80052ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80052be:	4013      	ands	r3, r2
 80052c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80052c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00f      	beq.n	80052f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d009      	beq.n	80052f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 82ca 	beq.w	8005882 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
      }
      return;
 80052f6:	e2c4      	b.n	8005882 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80052f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8117 	beq.w	8005530 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800530e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005312:	4b85      	ldr	r3, [pc, #532]	@ (8005528 <HAL_UART_IRQHandler+0x298>)
 8005314:	4013      	ands	r3, r2
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 810a 	beq.w	8005530 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d011      	beq.n	800534c <HAL_UART_IRQHandler+0xbc>
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005342:	f043 0201 	orr.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d011      	beq.n	800537c <HAL_UART_IRQHandler+0xec>
 8005358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2202      	movs	r2, #2
 800536a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005372:	f043 0204 	orr.w	r2, r3, #4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d011      	beq.n	80053ac <HAL_UART_IRQHandler+0x11c>
 8005388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2204      	movs	r2, #4
 800539a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a2:	f043 0202 	orr.w	r2, r3, #2
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d017      	beq.n	80053e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2208      	movs	r2, #8
 80053d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053de:	f043 0208 	orr.w	r2, r3, #8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d012      	beq.n	800541a <HAL_UART_IRQHandler+0x18a>
 80053f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8230 	beq.w	8005886 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005454:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800546a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800546e:	2b00      	cmp	r3, #0
 8005470:	d04f      	beq.n	8005512 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 ff5e 	bl	8006334 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005482:	2b40      	cmp	r3, #64	@ 0x40
 8005484:	d141      	bne.n	800550a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005490:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800549c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1d9      	bne.n	8005486 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d013      	beq.n	8005502 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054de:	4a13      	ldr	r2, [pc, #76]	@ (800552c <HAL_UART_IRQHandler+0x29c>)
 80054e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fd f9ce 	bl	8002888 <HAL_DMA_Abort_IT>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054fc:	4610      	mov	r0, r2
 80054fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	e00f      	b.n	8005522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f9ca 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	e00b      	b.n	8005522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9c6 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	e007      	b.n	8005522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9c2 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005520:	e1b1      	b.n	8005886 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005522:	bf00      	nop
    return;
 8005524:	e1af      	b.n	8005886 <HAL_UART_IRQHandler+0x5f6>
 8005526:	bf00      	nop
 8005528:	04000120 	.word	0x04000120
 800552c:	080063fd 	.word	0x080063fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005534:	2b01      	cmp	r3, #1
 8005536:	f040 816a 	bne.w	800580e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800553a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8163 	beq.w	800580e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 815c 	beq.w	800580e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	f040 80d4 	bne.w	8005716 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800557a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80ad 	beq.w	80056de <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800558a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800558e:	429a      	cmp	r2, r3
 8005590:	f080 80a5 	bcs.w	80056de <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800559a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 8086 	bne.w	80056bc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1da      	bne.n	80055b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800560a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800561e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005622:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005626:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e1      	bne.n	80055fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800565a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800565c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005660:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e3      	bne.n	8005636 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800568a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800568c:	f023 0310 	bic.w	r3, r3, #16
 8005690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800569e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e4      	bne.n	800567c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd f8a8 	bl	800280c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f8ea 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056dc:	e0d5      	b.n	800588a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056e8:	429a      	cmp	r2, r3
 80056ea:	f040 80ce 	bne.w	800588a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	f040 80c5 	bne.w	800588a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8ce 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
      return;
 8005714:	e0b9      	b.n	800588a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005722:	b29b      	uxth	r3, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80ab 	beq.w	800588e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80a6 	beq.w	800588e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005756:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005764:	647b      	str	r3, [r7, #68]	@ 0x44
 8005766:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800576a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e4      	bne.n	8005742 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	623b      	str	r3, [r7, #32]
   return(result);
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	f023 0301 	bic.w	r3, r3, #1
 800578e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800579c:	633a      	str	r2, [r7, #48]	@ 0x30
 800579e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e3      	bne.n	8005778 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f023 0310 	bic.w	r3, r3, #16
 80057d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	69b9      	ldr	r1, [r7, #24]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	617b      	str	r3, [r7, #20]
   return(result);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e4      	bne.n	80057c4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005804:	4619      	mov	r1, r3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f852 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800580c:	e03f      	b.n	800588e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <HAL_UART_IRQHandler+0x5a8>
 800581a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800581e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800582e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 f89b 	bl	800696c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005836:	e02d      	b.n	8005894 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01c      	beq.n	8005892 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
    }
    return;
 8005860:	e017      	b.n	8005892 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d012      	beq.n	8005894 <HAL_UART_IRQHandler+0x604>
 800586e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fe8f 	bl	800659e <UART_EndTransmit_IT>
    return;
 8005880:	e008      	b.n	8005894 <HAL_UART_IRQHandler+0x604>
      return;
 8005882:	bf00      	nop
 8005884:	e006      	b.n	8005894 <HAL_UART_IRQHandler+0x604>
    return;
 8005886:	bf00      	nop
 8005888:	e004      	b.n	8005894 <HAL_UART_IRQHandler+0x604>
      return;
 800588a:	bf00      	nop
 800588c:	e002      	b.n	8005894 <HAL_UART_IRQHandler+0x604>
      return;
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <HAL_UART_IRQHandler+0x604>
    return;
 8005892:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005894:	37e8      	adds	r7, #232	@ 0xe8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b08a      	sub	sp, #40	@ 0x28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4ba4      	ldr	r3, [pc, #656]	@ (8005b88 <UART_SetConfig+0x2c0>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005900:	430b      	orrs	r3, r1
 8005902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a99      	ldr	r2, [pc, #612]	@ (8005b8c <UART_SetConfig+0x2c4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	4313      	orrs	r3, r2
 8005932:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005944:	430a      	orrs	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a90      	ldr	r2, [pc, #576]	@ (8005b90 <UART_SetConfig+0x2c8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d126      	bne.n	80059a0 <UART_SetConfig+0xd8>
 8005952:	4b90      	ldr	r3, [pc, #576]	@ (8005b94 <UART_SetConfig+0x2cc>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b03      	cmp	r3, #3
 800595e:	d81b      	bhi.n	8005998 <UART_SetConfig+0xd0>
 8005960:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <UART_SetConfig+0xa0>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005979 	.word	0x08005979
 800596c:	08005989 	.word	0x08005989
 8005970:	08005981 	.word	0x08005981
 8005974:	08005991 	.word	0x08005991
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597e:	e116      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005980:	2302      	movs	r3, #2
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005986:	e112      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598e:	e10e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005996:	e10a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800599e:	e106      	b.n	8005bae <UART_SetConfig+0x2e6>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a7c      	ldr	r2, [pc, #496]	@ (8005b98 <UART_SetConfig+0x2d0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d138      	bne.n	8005a1c <UART_SetConfig+0x154>
 80059aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005b94 <UART_SetConfig+0x2cc>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d82d      	bhi.n	8005a14 <UART_SetConfig+0x14c>
 80059b8:	a201      	add	r2, pc, #4	@ (adr r2, 80059c0 <UART_SetConfig+0xf8>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a15 	.word	0x08005a15
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a05 	.word	0x08005a05
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059fa:	e0d8      	b.n	8005bae <UART_SetConfig+0x2e6>
 80059fc:	2302      	movs	r3, #2
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a02:	e0d4      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a04:	2304      	movs	r3, #4
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0a:	e0d0      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a12:	e0cc      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a14:	2310      	movs	r3, #16
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1a:	e0c8      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5e      	ldr	r2, [pc, #376]	@ (8005b9c <UART_SetConfig+0x2d4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d125      	bne.n	8005a72 <UART_SetConfig+0x1aa>
 8005a26:	4b5b      	ldr	r3, [pc, #364]	@ (8005b94 <UART_SetConfig+0x2cc>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a30:	2b30      	cmp	r3, #48	@ 0x30
 8005a32:	d016      	beq.n	8005a62 <UART_SetConfig+0x19a>
 8005a34:	2b30      	cmp	r3, #48	@ 0x30
 8005a36:	d818      	bhi.n	8005a6a <UART_SetConfig+0x1a2>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d00a      	beq.n	8005a52 <UART_SetConfig+0x18a>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d814      	bhi.n	8005a6a <UART_SetConfig+0x1a2>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <UART_SetConfig+0x182>
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d008      	beq.n	8005a5a <UART_SetConfig+0x192>
 8005a48:	e00f      	b.n	8005a6a <UART_SetConfig+0x1a2>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a50:	e0ad      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a52:	2302      	movs	r3, #2
 8005a54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a58:	e0a9      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a60:	e0a5      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a62:	2308      	movs	r3, #8
 8005a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a68:	e0a1      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a70:	e09d      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4a      	ldr	r2, [pc, #296]	@ (8005ba0 <UART_SetConfig+0x2d8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d125      	bne.n	8005ac8 <UART_SetConfig+0x200>
 8005a7c:	4b45      	ldr	r3, [pc, #276]	@ (8005b94 <UART_SetConfig+0x2cc>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a88:	d016      	beq.n	8005ab8 <UART_SetConfig+0x1f0>
 8005a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a8c:	d818      	bhi.n	8005ac0 <UART_SetConfig+0x1f8>
 8005a8e:	2b80      	cmp	r3, #128	@ 0x80
 8005a90:	d00a      	beq.n	8005aa8 <UART_SetConfig+0x1e0>
 8005a92:	2b80      	cmp	r3, #128	@ 0x80
 8005a94:	d814      	bhi.n	8005ac0 <UART_SetConfig+0x1f8>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <UART_SetConfig+0x1d8>
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d008      	beq.n	8005ab0 <UART_SetConfig+0x1e8>
 8005a9e:	e00f      	b.n	8005ac0 <UART_SetConfig+0x1f8>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aa6:	e082      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aae:	e07e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab6:	e07a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ab8:	2308      	movs	r3, #8
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005abe:	e076      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac6:	e072      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a35      	ldr	r2, [pc, #212]	@ (8005ba4 <UART_SetConfig+0x2dc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d12a      	bne.n	8005b28 <UART_SetConfig+0x260>
 8005ad2:	4b30      	ldr	r3, [pc, #192]	@ (8005b94 <UART_SetConfig+0x2cc>)
 8005ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005adc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae0:	d01a      	beq.n	8005b18 <UART_SetConfig+0x250>
 8005ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae6:	d81b      	bhi.n	8005b20 <UART_SetConfig+0x258>
 8005ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aec:	d00c      	beq.n	8005b08 <UART_SetConfig+0x240>
 8005aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af2:	d815      	bhi.n	8005b20 <UART_SetConfig+0x258>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x238>
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afc:	d008      	beq.n	8005b10 <UART_SetConfig+0x248>
 8005afe:	e00f      	b.n	8005b20 <UART_SetConfig+0x258>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b06:	e052      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0e:	e04e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b10:	2304      	movs	r3, #4
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b16:	e04a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b18:	2308      	movs	r3, #8
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1e:	e046      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b26:	e042      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <UART_SetConfig+0x2c4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d13a      	bne.n	8005ba8 <UART_SetConfig+0x2e0>
 8005b32:	4b18      	ldr	r3, [pc, #96]	@ (8005b94 <UART_SetConfig+0x2cc>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b40:	d01a      	beq.n	8005b78 <UART_SetConfig+0x2b0>
 8005b42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b46:	d81b      	bhi.n	8005b80 <UART_SetConfig+0x2b8>
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b4c:	d00c      	beq.n	8005b68 <UART_SetConfig+0x2a0>
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b52:	d815      	bhi.n	8005b80 <UART_SetConfig+0x2b8>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <UART_SetConfig+0x298>
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b5c:	d008      	beq.n	8005b70 <UART_SetConfig+0x2a8>
 8005b5e:	e00f      	b.n	8005b80 <UART_SetConfig+0x2b8>
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b66:	e022      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6e:	e01e      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b70:	2304      	movs	r3, #4
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b76:	e01a      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b78:	2308      	movs	r3, #8
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7e:	e016      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b80:	2310      	movs	r3, #16
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b86:	e012      	b.n	8005bae <UART_SetConfig+0x2e6>
 8005b88:	efff69f3 	.word	0xefff69f3
 8005b8c:	40008000 	.word	0x40008000
 8005b90:	40013800 	.word	0x40013800
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40004400 	.word	0x40004400
 8005b9c:	40004800 	.word	0x40004800
 8005ba0:	40004c00 	.word	0x40004c00
 8005ba4:	40005000 	.word	0x40005000
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a9f      	ldr	r2, [pc, #636]	@ (8005e30 <UART_SetConfig+0x568>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d17a      	bne.n	8005cae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d824      	bhi.n	8005c0a <UART_SetConfig+0x342>
 8005bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <UART_SetConfig+0x300>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005bed 	.word	0x08005bed
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005bfb 	.word	0x08005bfb
 8005bdc:	08005c0b 	.word	0x08005c0b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c0b 	.word	0x08005c0b
 8005be8:	08005c03 	.word	0x08005c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7fd ff06 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005bf0:	61f8      	str	r0, [r7, #28]
        break;
 8005bf2:	e010      	b.n	8005c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8005e34 <UART_SetConfig+0x56c>)
 8005bf6:	61fb      	str	r3, [r7, #28]
        break;
 8005bf8:	e00d      	b.n	8005c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfa:	f7fd fe67 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005bfe:	61f8      	str	r0, [r7, #28]
        break;
 8005c00:	e009      	b.n	8005c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c06:	61fb      	str	r3, [r7, #28]
        break;
 8005c08:	e005      	b.n	8005c16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80fb 	beq.w	8005e14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4413      	add	r3, r2
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d305      	bcc.n	8005c3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d903      	bls.n	8005c42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c40:	e0e8      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2200      	movs	r2, #0
 8005c46:	461c      	mov	r4, r3
 8005c48:	4615      	mov	r5, r2
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	022b      	lsls	r3, r5, #8
 8005c54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c58:	0222      	lsls	r2, r4, #8
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	6849      	ldr	r1, [r1, #4]
 8005c5e:	0849      	lsrs	r1, r1, #1
 8005c60:	2000      	movs	r0, #0
 8005c62:	4688      	mov	r8, r1
 8005c64:	4681      	mov	r9, r0
 8005c66:	eb12 0a08 	adds.w	sl, r2, r8
 8005c6a:	eb43 0b09 	adc.w	fp, r3, r9
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	f7fa faf6 	bl	8000270 <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4613      	mov	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c92:	d308      	bcc.n	8005ca6 <UART_SetConfig+0x3de>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9a:	d204      	bcs.n	8005ca6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	60da      	str	r2, [r3, #12]
 8005ca4:	e0b6      	b.n	8005e14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cac:	e0b2      	b.n	8005e14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cb6:	d15e      	bne.n	8005d76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d828      	bhi.n	8005d12 <UART_SetConfig+0x44a>
 8005cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <UART_SetConfig+0x400>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005cf5 	.word	0x08005cf5
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005d13 	.word	0x08005d13
 8005cd8:	08005d03 	.word	0x08005d03
 8005cdc:	08005d13 	.word	0x08005d13
 8005ce0:	08005d13 	.word	0x08005d13
 8005ce4:	08005d13 	.word	0x08005d13
 8005ce8:	08005d0b 	.word	0x08005d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fd fe86 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005cf0:	61f8      	str	r0, [r7, #28]
        break;
 8005cf2:	e014      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf4:	f7fd fe98 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8005cf8:	61f8      	str	r0, [r7, #28]
        break;
 8005cfa:	e010      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8005e34 <UART_SetConfig+0x56c>)
 8005cfe:	61fb      	str	r3, [r7, #28]
        break;
 8005d00:	e00d      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d02:	f7fd fde3 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005d06:	61f8      	str	r0, [r7, #28]
        break;
 8005d08:	e009      	b.n	8005d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d0e:	61fb      	str	r3, [r7, #28]
        break;
 8005d10:	e005      	b.n	8005d1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d077      	beq.n	8005e14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005a      	lsls	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	441a      	add	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b0f      	cmp	r3, #15
 8005d3e:	d916      	bls.n	8005d6e <UART_SetConfig+0x4a6>
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d46:	d212      	bcs.n	8005d6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f023 030f 	bic.w	r3, r3, #15
 8005d50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	8afb      	ldrh	r3, [r7, #22]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	8afa      	ldrh	r2, [r7, #22]
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	e052      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d74:	e04e      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d827      	bhi.n	8005dce <UART_SetConfig+0x506>
 8005d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <UART_SetConfig+0x4bc>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005db9 	.word	0x08005db9
 8005d90:	08005dcf 	.word	0x08005dcf
 8005d94:	08005dbf 	.word	0x08005dbf
 8005d98:	08005dcf 	.word	0x08005dcf
 8005d9c:	08005dcf 	.word	0x08005dcf
 8005da0:	08005dcf 	.word	0x08005dcf
 8005da4:	08005dc7 	.word	0x08005dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fd fe28 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005dac:	61f8      	str	r0, [r7, #28]
        break;
 8005dae:	e014      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7fd fe3a 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 8005db4:	61f8      	str	r0, [r7, #28]
        break;
 8005db6:	e010      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e34 <UART_SetConfig+0x56c>)
 8005dba:	61fb      	str	r3, [r7, #28]
        break;
 8005dbc:	e00d      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dbe:	f7fd fd85 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 8005dc2:	61f8      	str	r0, [r7, #28]
        break;
 8005dc4:	e009      	b.n	8005dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dca:	61fb      	str	r3, [r7, #28]
        break;
 8005dcc:	e005      	b.n	8005dda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005dd8:	bf00      	nop
    }

    if (pclk != 0U)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d019      	beq.n	8005e14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	085a      	lsrs	r2, r3, #1
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d909      	bls.n	8005e0e <UART_SetConfig+0x546>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e00:	d205      	bcs.n	8005e0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	e002      	b.n	8005e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3728      	adds	r7, #40	@ 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e2e:	bf00      	nop
 8005e30:	40008000 	.word	0x40008000
 8005e34:	00f42400 	.word	0x00f42400

08005e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01a      	beq.n	8005f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f36:	d10a      	bne.n	8005f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b098      	sub	sp, #96	@ 0x60
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f8c:	f7fc fa08 	bl	80023a0 <HAL_GetTick>
 8005f90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d12e      	bne.n	8005ffe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f88c 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d021      	beq.n	8005ffe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e6      	bne.n	8005fba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e062      	b.n	80060c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d149      	bne.n	80060a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006014:	2200      	movs	r2, #0
 8006016:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f856 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d03c      	beq.n	80060a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	623b      	str	r3, [r7, #32]
   return(result);
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006044:	633b      	str	r3, [r7, #48]	@ 0x30
 8006046:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800604a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	60fb      	str	r3, [r7, #12]
   return(result);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	617b      	str	r3, [r7, #20]
   return(result);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e011      	b.n	80060c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3758      	adds	r7, #88	@ 0x58
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060dc:	e04f      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d04b      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fc f95b 	bl	80023a0 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <UART_WaitOnFlagUntilTimeout+0x30>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e04e      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d037      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b80      	cmp	r3, #128	@ 0x80
 8006112:	d034      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b40      	cmp	r3, #64	@ 0x40
 8006118:	d031      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b08      	cmp	r3, #8
 8006126:	d110      	bne.n	800614a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f8ff 	bl	8006334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2208      	movs	r2, #8
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e029      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006158:	d111      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f8e5 	bl	8006334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e00f      	b.n	800619e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4013      	ands	r3, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	bf0c      	ite	eq
 800618e:	2301      	moveq	r3, #1
 8006190:	2300      	movne	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	429a      	cmp	r2, r3
 800619a:	d0a0      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b097      	sub	sp, #92	@ 0x5c
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061da:	d10e      	bne.n	80061fa <UART_Start_Receive_IT+0x52>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d105      	bne.n	80061f0 <UART_Start_Receive_IT+0x48>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80061ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061ee:	e02d      	b.n	800624c <UART_Start_Receive_IT+0xa4>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	22ff      	movs	r2, #255	@ 0xff
 80061f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061f8:	e028      	b.n	800624c <UART_Start_Receive_IT+0xa4>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10d      	bne.n	800621e <UART_Start_Receive_IT+0x76>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <UART_Start_Receive_IT+0x6c>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	22ff      	movs	r2, #255	@ 0xff
 800620e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006212:	e01b      	b.n	800624c <UART_Start_Receive_IT+0xa4>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	227f      	movs	r2, #127	@ 0x7f
 8006218:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800621c:	e016      	b.n	800624c <UART_Start_Receive_IT+0xa4>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006226:	d10d      	bne.n	8006244 <UART_Start_Receive_IT+0x9c>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <UART_Start_Receive_IT+0x92>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	227f      	movs	r2, #127	@ 0x7f
 8006234:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006238:	e008      	b.n	800624c <UART_Start_Receive_IT+0xa4>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	223f      	movs	r2, #63	@ 0x3f
 800623e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006242:	e003      	b.n	800624c <UART_Start_Receive_IT+0xa4>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2222      	movs	r2, #34	@ 0x22
 8006258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	657b      	str	r3, [r7, #84]	@ 0x54
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3308      	adds	r3, #8
 800627a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800627c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800627e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800628a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e5      	bne.n	800625c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006298:	d107      	bne.n	80062aa <UART_Start_Receive_IT+0x102>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a21      	ldr	r2, [pc, #132]	@ (800632c <UART_Start_Receive_IT+0x184>)
 80062a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80062a8:	e002      	b.n	80062b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a20      	ldr	r2, [pc, #128]	@ (8006330 <UART_Start_Receive_IT+0x188>)
 80062ae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d019      	beq.n	80062ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80062cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e6      	bne.n	80062b8 <UART_Start_Receive_IT+0x110>
 80062ea:	e018      	b.n	800631e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	613b      	str	r3, [r7, #16]
   return(result);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f043 0320 	orr.w	r3, r3, #32
 8006300:	653b      	str	r3, [r7, #80]	@ 0x50
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	69f9      	ldr	r1, [r7, #28]
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	61bb      	str	r3, [r7, #24]
   return(result);
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e6      	bne.n	80062ec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	375c      	adds	r7, #92	@ 0x5c
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	080067b1 	.word	0x080067b1
 8006330:	080065f5 	.word	0x080065f5

08006334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b095      	sub	sp, #84	@ 0x54
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635a:	643b      	str	r3, [r7, #64]	@ 0x40
 800635c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e6      	bne.n	800633c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	61fb      	str	r3, [r7, #28]
   return(result);
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800638e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006394:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d118      	bne.n	80063dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f023 0310 	bic.w	r3, r3, #16
 80063be:	647b      	str	r3, [r7, #68]	@ 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6979      	ldr	r1, [r7, #20]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	613b      	str	r3, [r7, #16]
   return(result);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e6      	bne.n	80063aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063f0:	bf00      	nop
 80063f2:	3754      	adds	r7, #84	@ 0x54
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff fa3e 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b08f      	sub	sp, #60	@ 0x3c
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006434:	2b21      	cmp	r3, #33	@ 0x21
 8006436:	d14c      	bne.n	80064d2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d132      	bne.n	80064aa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	61fb      	str	r3, [r7, #28]
   return(result);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006458:	637b      	str	r3, [r7, #52]	@ 0x34
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006464:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e6      	bne.n	8006444 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	60bb      	str	r3, [r7, #8]
   return(result);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800648a:	633b      	str	r3, [r7, #48]	@ 0x30
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	613b      	str	r3, [r7, #16]
   return(result);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e6      	bne.n	8006476 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80064a8:	e013      	b.n	80064d2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80064d2:	bf00      	nop
 80064d4:	373c      	adds	r7, #60	@ 0x3c
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064de:	b480      	push	{r7}
 80064e0:	b091      	sub	sp, #68	@ 0x44
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064ea:	2b21      	cmp	r3, #33	@ 0x21
 80064ec:	d151      	bne.n	8006592 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d132      	bne.n	8006560 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	623b      	str	r3, [r7, #32]
   return(result);
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800650e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006518:	633b      	str	r3, [r7, #48]	@ 0x30
 800651a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800651e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	60fb      	str	r3, [r7, #12]
   return(result);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006540:	637b      	str	r3, [r7, #52]	@ 0x34
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654a:	61fb      	str	r3, [r7, #28]
 800654c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	69b9      	ldr	r1, [r7, #24]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	617b      	str	r3, [r7, #20]
   return(result);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800655e:	e018      	b.n	8006592 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006568:	881a      	ldrh	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006572:	b292      	uxth	r2, r2
 8006574:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657a:	1c9a      	adds	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006592:	bf00      	nop
 8006594:	3744      	adds	r7, #68	@ 0x44
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b088      	sub	sp, #32
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ba:	61fb      	str	r3, [r7, #28]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6979      	ldr	r1, [r7, #20]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	613b      	str	r3, [r7, #16]
   return(result);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e6      	bne.n	80065a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7fb fd45 	bl	8002074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ea:	bf00      	nop
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b09c      	sub	sp, #112	@ 0x70
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006602:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800660c:	2b22      	cmp	r3, #34	@ 0x22
 800660e:	f040 80be 	bne.w	800678e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006618:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800661c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006620:	b2d9      	uxtb	r1, r3
 8006622:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006626:	b2da      	uxtb	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662c:	400a      	ands	r2, r1
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 80a3 	bne.w	80067a2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800666a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006670:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800667a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800667c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e6      	bne.n	800665c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800669e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80066b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e5      	bne.n	800668e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a34      	ldr	r2, [pc, #208]	@ (80067ac <UART_RxISR_8BIT+0x1b8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d01f      	beq.n	8006720 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d018      	beq.n	8006720 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	623b      	str	r3, [r7, #32]
   return(result);
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006702:	663b      	str	r3, [r7, #96]	@ 0x60
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800670c:	633b      	str	r3, [r7, #48]	@ 0x30
 800670e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006724:	2b01      	cmp	r3, #1
 8006726:	d12e      	bne.n	8006786 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	60fb      	str	r3, [r7, #12]
   return(result);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0310 	bic.w	r3, r3, #16
 8006742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	617b      	str	r3, [r7, #20]
   return(result);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e6      	bne.n	800672e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f003 0310 	and.w	r3, r3, #16
 800676a:	2b10      	cmp	r3, #16
 800676c:	d103      	bne.n	8006776 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2210      	movs	r2, #16
 8006774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff f896 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006784:	e00d      	b.n	80067a2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fb fca4 	bl	80020d4 <HAL_UART_RxCpltCallback>
}
 800678c:	e009      	b.n	80067a2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	8b1b      	ldrh	r3, [r3, #24]
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0208 	orr.w	r2, r2, #8
 800679e:	b292      	uxth	r2, r2
 80067a0:	831a      	strh	r2, [r3, #24]
}
 80067a2:	bf00      	nop
 80067a4:	3770      	adds	r7, #112	@ 0x70
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40008000 	.word	0x40008000

080067b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b09c      	sub	sp, #112	@ 0x70
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c8:	2b22      	cmp	r3, #34	@ 0x22
 80067ca:	f040 80be 	bne.w	800694a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067e6:	4013      	ands	r3, r2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f2:	1c9a      	adds	r2, r3, #2
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 80a3 	bne.w	800695e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800682c:	667b      	str	r3, [r7, #100]	@ 0x64
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006836:	657b      	str	r3, [r7, #84]	@ 0x54
 8006838:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800683c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e6      	bne.n	8006818 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	663b      	str	r3, [r7, #96]	@ 0x60
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800686a:	643a      	str	r2, [r7, #64]	@ 0x40
 800686c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a34      	ldr	r2, [pc, #208]	@ (8006968 <UART_RxISR_16BIT+0x1b8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d01f      	beq.n	80068dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d018      	beq.n	80068dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e6      	bne.n	80068aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d12e      	bne.n	8006942 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f023 0310 	bic.w	r3, r3, #16
 80068fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6979      	ldr	r1, [r7, #20]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	613b      	str	r3, [r7, #16]
   return(result);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e6      	bne.n	80068ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b10      	cmp	r3, #16
 8006928:	d103      	bne.n	8006932 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2210      	movs	r2, #16
 8006930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fe ffb8 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006940:	e00d      	b.n	800695e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fb fbc6 	bl	80020d4 <HAL_UART_RxCpltCallback>
}
 8006948:	e009      	b.n	800695e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	8b1b      	ldrh	r3, [r3, #24]
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0208 	orr.w	r2, r2, #8
 800695a:	b292      	uxth	r2, r2
 800695c:	831a      	strh	r2, [r3, #24]
}
 800695e:	bf00      	nop
 8006960:	3770      	adds	r7, #112	@ 0x70
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40008000 	.word	0x40008000

0800696c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	7992      	ldrb	r2, [r2, #6]
 8006992:	08d2      	lsrs	r2, r2, #3
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	fb13 f302 	smulbb	r3, r3, r2
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	889b      	ldrh	r3, [r3, #4]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	60da      	str	r2, [r3, #12]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 80069c6:	b490      	push	{r4, r7}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4604      	mov	r4, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	1d39      	adds	r1, r7, #4
 80069d2:	e881 000c 	stmia.w	r1, {r2, r3}
 80069d6:	4623      	mov	r3, r4
 80069d8:	81fb      	strh	r3, [r7, #14]
 80069da:	4603      	mov	r3, r0
 80069dc:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80069de:	2300      	movs	r3, #0
 80069e0:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80069e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069e6:	88ba      	ldrh	r2, [r7, #4]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	da04      	bge.n	80069f6 <code+0x30>
        code |= LEFT;
 80069ec:	2201      	movs	r2, #1
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	75fb      	strb	r3, [r7, #23]
 80069f4:	e008      	b.n	8006a08 <code+0x42>
    } else if (x0 > window.x1) {
 80069f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069fa:	893a      	ldrh	r2, [r7, #8]
 80069fc:	4293      	cmp	r3, r2
 80069fe:	dd03      	ble.n	8006a08 <code+0x42>
        code |= RIGHT;
 8006a00:	2202      	movs	r2, #2
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006a08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a0c:	88fa      	ldrh	r2, [r7, #6]
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	da04      	bge.n	8006a1c <code+0x56>
        code |= BOTTOM;
 8006a12:	2204      	movs	r2, #4
 8006a14:	7dfb      	ldrb	r3, [r7, #23]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	75fb      	strb	r3, [r7, #23]
 8006a1a:	e008      	b.n	8006a2e <code+0x68>
    } else if (y0 > window.y1) {
 8006a1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a20:	897a      	ldrh	r2, [r7, #10]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	dd03      	ble.n	8006a2e <code+0x68>
        code |= TOP;
 8006a26:	2208      	movs	r2, #8
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc90      	pop	{r4, r7}
 8006a38:	4770      	bx	lr

08006a3a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b088      	sub	sp, #32
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a58:	cb0c      	ldmia	r3, {r2, r3}
 8006a5a:	f7ff ffb4 	bl	80069c6 <code>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a72:	cb0c      	ldmia	r3, {r2, r3}
 8006a74:	f7ff ffa7 	bl	80069c6 <code>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006a80:	7ffa      	ldrb	r2, [r7, #31]
 8006a82:	7fbb      	ldrb	r3, [r7, #30]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	777b      	strb	r3, [r7, #29]
            break;
 8006a90:	e0e9      	b.n	8006c66 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006a92:	7ffa      	ldrb	r2, [r7, #31]
 8006a94:	7fbb      	ldrb	r3, [r7, #30]
 8006a96:	4013      	ands	r3, r2
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 80e2 	bne.w	8006c64 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006aa8:	7ffb      	ldrb	r3, [r7, #31]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <clip_line+0x78>
 8006aae:	7ffb      	ldrb	r3, [r7, #31]
 8006ab0:	e000      	b.n	8006ab4 <clip_line+0x7a>
 8006ab2:	7fbb      	ldrb	r3, [r7, #30]
 8006ab4:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006ab6:	2208      	movs	r2, #8
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	4013      	ands	r3, r2
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d024      	beq.n	8006b0c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad8:	1acb      	subs	r3, r1, r3
 8006ada:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006adc:	4608      	mov	r0, r1
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ae4:	1a41      	subs	r1, r0, r1
 8006ae6:	fb03 f101 	mul.w	r1, r3, r1
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af0:	4618      	mov	r0, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af8:	1ac3      	subs	r3, r0, r3
 8006afa:	fb91 f3f3 	sdiv	r3, r1, r3
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006b06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b08:	833b      	strh	r3, [r7, #24]
 8006b0a:	e07f      	b.n	8006c0c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	4013      	ands	r3, r2
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d024      	beq.n	8006b62 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b26:	4619      	mov	r1, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b2e:	1acb      	subs	r3, r1, r3
 8006b30:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006b32:	4608      	mov	r0, r1
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b3a:	1a41      	subs	r1, r0, r1
 8006b3c:	fb03 f101 	mul.w	r1, r3, r1
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b46:	4618      	mov	r0, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b4e:	1ac3      	subs	r3, r0, r3
 8006b50:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006b5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b5e:	833b      	strh	r3, [r7, #24]
 8006b60:	e054      	b.n	8006c0c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006b62:	2202      	movs	r2, #2
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	4013      	ands	r3, r2
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d024      	beq.n	8006bb8 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b84:	1acb      	subs	r3, r1, r3
 8006b86:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006b88:	4608      	mov	r0, r1
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b90:	1a41      	subs	r1, r0, r1
 8006b92:	fb03 f101 	mul.w	r1, r3, r1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba4:	1ac3      	subs	r3, r0, r3
 8006ba6:	fb91 f3f3 	sdiv	r3, r1, r3
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006bb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006bb4:	837b      	strh	r3, [r7, #26]
 8006bb6:	e029      	b.n	8006c0c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006bb8:	2201      	movs	r2, #1
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d023      	beq.n	8006c0c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bda:	1acb      	subs	r3, r1, r3
 8006bdc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006bde:	4608      	mov	r0, r1
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006be6:	1a41      	subs	r1, r0, r1
 8006be8:	fb03 f101 	mul.w	r1, r3, r1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bfa:	1ac3      	subs	r3, r0, r3
 8006bfc:	fb91 f3f3 	sdiv	r3, r1, r3
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006c08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c0a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006c0c:	7dfa      	ldrb	r2, [r7, #23]
 8006c0e:	7ffb      	ldrb	r3, [r7, #31]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d113      	bne.n	8006c3c <clip_line+0x202>
                *x0 = x;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8b7a      	ldrh	r2, [r7, #26]
 8006c18:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	8b3a      	ldrh	r2, [r7, #24]
 8006c1e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c30:	cb0c      	ldmia	r3, {r2, r3}
 8006c32:	f7ff fec8 	bl	80069c6 <code>
 8006c36:	4603      	mov	r3, r0
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e721      	b.n	8006a80 <clip_line+0x46>
            } else {
                *x1 = x;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8b7a      	ldrh	r2, [r7, #26]
 8006c40:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	8b3a      	ldrh	r2, [r7, #24]
 8006c46:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c58:	cb0c      	ldmia	r3, {r2, r3}
 8006c5a:	f7ff feb4 	bl	80069c6 <code>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006c62:	e70d      	b.n	8006a80 <clip_line+0x46>
            break;
 8006c64:	bf00      	nop
            }
        }
    }

    return accept;
 8006c66:	7f7b      	ldrb	r3, [r7, #29]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	3306      	adds	r3, #6
 8006c80:	2208      	movs	r2, #8
 8006c82:	4619      	mov	r1, r3
 8006c84:	f001 f9ea 	bl	800805c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	330e      	adds	r3, #14
 8006c8c:	781a      	ldrb	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	330f      	adds	r3, #15
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	3310      	adds	r3, #16
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	72da      	strb	r2, [r3, #11]

    return 0;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08e      	sub	sp, #56	@ 0x38
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006cbc:	f107 0314 	add.w	r3, r7, #20
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff ffd4 	bl	8006c70 <fontx_meta>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006cce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <fontx_glyph+0x2c>
        return status;
 8006cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cda:	e077      	b.n	8006dcc <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006cdc:	7f7a      	ldrb	r2, [r7, #29]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006ce2:	7fba      	ldrb	r2, [r7, #30]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006ce8:	7f7b      	ldrb	r3, [r7, #29]
 8006cea:	3307      	adds	r3, #7
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da00      	bge.n	8006cf2 <fontx_glyph+0x42>
 8006cf0:	3307      	adds	r3, #7
 8006cf2:	10db      	asrs	r3, r3, #3
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	78da      	ldrb	r2, [r3, #3]
 8006cfe:	7fbb      	ldrb	r3, [r7, #30]
 8006d00:	fb12 f303 	smulbb	r3, r2, r3
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10f      	bne.n	8006d30 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2bff      	cmp	r3, #255	@ 0xff
 8006d14:	d859      	bhi.n	8006dca <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	789b      	ldrb	r3, [r3, #2]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	3311      	adds	r3, #17
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	441a      	add	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e04d      	b.n	8006dcc <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3312      	adds	r3, #18
 8006d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3311      	adds	r3, #17
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006d42:	e03d      	b.n	8006dc0 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	4413      	add	r3, r2
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	3302      	adds	r3, #2
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d60:	3303      	adds	r3, #3
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	4413      	add	r3, r2
 8006d68:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d31c      	bcc.n	8006dac <fontx_glyph+0xfc>
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d818      	bhi.n	8006dac <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d82:	4413      	add	r3, r2
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3311      	adds	r3, #17
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	461a      	mov	r2, r3
                    nc * glyph->size
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	789b      	ldrb	r3, [r3, #2]
 8006d94:	4619      	mov	r1, r3
 8006d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d98:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	441a      	add	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e00f      	b.n	8006dcc <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006dac:	6a3a      	ldr	r2, [r7, #32]
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	1ad2      	subs	r2, r2, r3
 8006db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db4:	4413      	add	r3, r2
 8006db6:	3301      	adds	r3, #1
 8006db8:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	1e5a      	subs	r2, r3, #1
 8006dc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1bc      	bne.n	8006d44 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3738      	adds	r7, #56	@ 0x38
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	dd01      	ble.n	8006dea <min+0x16>
        return b;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	e000      	b.n	8006dec <min+0x18>
    };
    return a;
 8006dea:	687b      	ldr	r3, [r7, #4]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <max>:

static inline int max(int a, int b) {
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	dd01      	ble.n	8006e0e <max+0x16>
        return a;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	e000      	b.n	8006e10 <max+0x18>
    }
    return b;
 8006e0e:	683b      	ldr	r3, [r7, #0]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	80fb      	strh	r3, [r7, #6]
 8006e26:	460b      	mov	r3, r1
 8006e28:	80bb      	strh	r3, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e32:	4a12      	ldr	r2, [pc, #72]	@ (8006e7c <hagl_put_pixel+0x60>)
 8006e34:	8812      	ldrh	r2, [r2, #0]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	db1a      	blt.n	8006e70 <hagl_put_pixel+0x54>
 8006e3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8006e7c <hagl_put_pixel+0x60>)
 8006e40:	8852      	ldrh	r2, [r2, #2]
 8006e42:	4293      	cmp	r3, r2
 8006e44:	db14      	blt.n	8006e70 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e7c <hagl_put_pixel+0x60>)
 8006e4c:	8892      	ldrh	r2, [r2, #4]
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	dc10      	bgt.n	8006e74 <hagl_put_pixel+0x58>
 8006e52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e56:	4a09      	ldr	r2, [pc, #36]	@ (8006e7c <hagl_put_pixel+0x60>)
 8006e58:	88d2      	ldrh	r2, [r2, #6]
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	dc0a      	bgt.n	8006e74 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e62:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e66:	887a      	ldrh	r2, [r7, #2]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fa fe49 	bl	8001b00 <lcdPutPixel>
 8006e6e:	e002      	b.n	8006e76 <hagl_put_pixel+0x5a>
        return;
 8006e70:	bf00      	nop
 8006e72:	e000      	b.n	8006e76 <hagl_put_pixel+0x5a>
        return;
 8006e74:	bf00      	nop
}
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	2000020c 	.word	0x2000020c

08006e80 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4623      	mov	r3, r4
 8006e90:	80fb      	strh	r3, [r7, #6]
 8006e92:	4603      	mov	r3, r0
 8006e94:	80bb      	strh	r3, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	807b      	strh	r3, [r7, #2]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006e9e:	88fa      	ldrh	r2, [r7, #6]
 8006ea0:	887b      	ldrh	r3, [r7, #2]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	b21a      	sxth	r2, r3
 8006ea8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006eac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006eb0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006eb4:	883b      	ldrh	r3, [r7, #0]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	4623      	mov	r3, r4
 8006eba:	f000 f827 	bl	8006f0c <hagl_draw_line>
#endif
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd90      	pop	{r4, r7, pc}

08006ec6 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006ec6:	b590      	push	{r4, r7, lr}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af02      	add	r7, sp, #8
 8006ecc:	4604      	mov	r4, r0
 8006ece:	4608      	mov	r0, r1
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4623      	mov	r3, r4
 8006ed6:	80fb      	strh	r3, [r7, #6]
 8006ed8:	4603      	mov	r3, r0
 8006eda:	80bb      	strh	r3, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	807b      	strh	r3, [r7, #2]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006ee4:	88ba      	ldrh	r2, [r7, #4]
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	4413      	add	r3, r2
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	b21c      	sxth	r4, r3
 8006eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ef2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006ef6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006efa:	883b      	ldrh	r3, [r7, #0]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	4623      	mov	r3, r4
 8006f00:	f000 f804 	bl	8006f0c <hagl_draw_line>
#endif
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd90      	pop	{r4, r7, pc}

08006f0c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0e:	b089      	sub	sp, #36	@ 0x24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	4604      	mov	r4, r0
 8006f14:	4608      	mov	r0, r1
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	80fb      	strh	r3, [r7, #6]
 8006f1e:	4603      	mov	r3, r0
 8006f20:	80bb      	strh	r3, [r7, #4]
 8006f22:	460b      	mov	r3, r1
 8006f24:	807b      	strh	r3, [r7, #2]
 8006f26:	4613      	mov	r3, r2
 8006f28:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	1cba      	adds	r2, r7, #2
 8006f2e:	1d3d      	adds	r5, r7, #4
 8006f30:	1dbc      	adds	r4, r7, #6
 8006f32:	494a      	ldr	r1, [pc, #296]	@ (800705c <hagl_draw_line+0x150>)
 8006f34:	466e      	mov	r6, sp
 8006f36:	c903      	ldmia	r1, {r0, r1}
 8006f38:	e886 0003 	stmia.w	r6, {r0, r1}
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7ff fd7b 	bl	8006a3a <clip_line>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f083 0301 	eor.w	r3, r3, #1
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d17e      	bne.n	800704e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006f50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f54:	461a      	mov	r2, r3
 8006f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bfb8      	it	lt
 8006f60:	425b      	neglt	r3, r3
 8006f62:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006f64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	da01      	bge.n	8006f74 <hagl_draw_line+0x68>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e001      	b.n	8006f78 <hagl_draw_line+0x6c>
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295
 8006f78:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006f7a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bfb8      	it	lt
 8006f8a:	425b      	neglt	r3, r3
 8006f8c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006f8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	da01      	bge.n	8006f9e <hagl_draw_line+0x92>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e001      	b.n	8006fa2 <hagl_draw_line+0x96>
 8006f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa2:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006fa4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006fa8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	dd06      	ble.n	8006fbe <hagl_draw_line+0xb2>
 8006fb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006fb4:	0fda      	lsrs	r2, r3, #31
 8006fb6:	4413      	add	r3, r2
 8006fb8:	105b      	asrs	r3, r3, #1
 8006fba:	b21b      	sxth	r3, r3
 8006fbc:	e006      	b.n	8006fcc <hagl_draw_line+0xc0>
 8006fbe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fc2:	0fda      	lsrs	r2, r3, #31
 8006fc4:	4413      	add	r3, r2
 8006fc6:	105b      	asrs	r3, r3, #1
 8006fc8:	425b      	negs	r3, r3
 8006fca:	b21b      	sxth	r3, r3
 8006fcc:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8006fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fd2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006fd6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ff1f 	bl	8006e1c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8006fde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fe2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d105      	bne.n	8006ff6 <hagl_draw_line+0xea>
 8006fea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006fee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d02d      	beq.n	8007052 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006ff6:	8afb      	ldrh	r3, [r7, #22]
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8006ffe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007002:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007006:	425b      	negs	r3, r3
 8007008:	429a      	cmp	r2, r3
 800700a:	dd0c      	ble.n	8007026 <hagl_draw_line+0x11a>
            err -= dy;
 800700c:	8afa      	ldrh	r2, [r7, #22]
 800700e:	8a3b      	ldrh	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	b29b      	uxth	r3, r3
 8007014:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8007016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800701a:	b29a      	uxth	r2, r3
 800701c:	8a7b      	ldrh	r3, [r7, #18]
 800701e:	4413      	add	r3, r2
 8007020:	b29b      	uxth	r3, r3
 8007022:	b21b      	sxth	r3, r3
 8007024:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8007026:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800702a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800702e:	429a      	cmp	r2, r3
 8007030:	dacd      	bge.n	8006fce <hagl_draw_line+0xc2>
            err += dx;
 8007032:	8afa      	ldrh	r2, [r7, #22]
 8007034:	8abb      	ldrh	r3, [r7, #20]
 8007036:	4413      	add	r3, r2
 8007038:	b29b      	uxth	r3, r3
 800703a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800703c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007040:	b29a      	uxth	r2, r3
 8007042:	89fb      	ldrh	r3, [r7, #14]
 8007044:	4413      	add	r3, r2
 8007046:	b29b      	uxth	r3, r3
 8007048:	b21b      	sxth	r3, r3
 800704a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800704c:	e7bf      	b.n	8006fce <hagl_draw_line+0xc2>
        return;
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <hagl_draw_line+0x148>
            break;
 8007052:	bf00      	nop
        }
    }
}
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705a:	bf00      	nop
 800705c:	2000020c 	.word	0x2000020c

08007060 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	4611      	mov	r1, r2
 800706c:	461a      	mov	r2, r3
 800706e:	4623      	mov	r3, r4
 8007070:	80fb      	strh	r3, [r7, #6]
 8007072:	4603      	mov	r3, r0
 8007074:	80bb      	strh	r3, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	807b      	strh	r3, [r7, #2]
 800707a:	4613      	mov	r3, r2
 800707c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800707e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007086:	429a      	cmp	r2, r3
 8007088:	dd0e      	ble.n	80070a8 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	887b      	ldrh	r3, [r7, #2]
 800708e:	4413      	add	r3, r2
 8007090:	b29b      	uxth	r3, r3
 8007092:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	887b      	ldrh	r3, [r7, #2]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800709e:	88fa      	ldrh	r2, [r7, #6]
 80070a0:	887b      	ldrh	r3, [r7, #2]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80070a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80070ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	dd0e      	ble.n	80070d2 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 80070b4:	88ba      	ldrh	r2, [r7, #4]
 80070b6:	883b      	ldrh	r3, [r7, #0]
 80070b8:	4413      	add	r3, r2
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80070be:	88ba      	ldrh	r2, [r7, #4]
 80070c0:	883b      	ldrh	r3, [r7, #0]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80070c8:	88ba      	ldrh	r2, [r7, #4]
 80070ca:	883b      	ldrh	r3, [r7, #0]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80070d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070d6:	4a24      	ldr	r2, [pc, #144]	@ (8007168 <hagl_draw_rectangle+0x108>)
 80070d8:	8812      	ldrh	r2, [r2, #0]
 80070da:	4293      	cmp	r3, r2
 80070dc:	db3e      	blt.n	800715c <hagl_draw_rectangle+0xfc>
 80070de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070e2:	4a21      	ldr	r2, [pc, #132]	@ (8007168 <hagl_draw_rectangle+0x108>)
 80070e4:	8852      	ldrh	r2, [r2, #2]
 80070e6:	4293      	cmp	r3, r2
 80070e8:	db38      	blt.n	800715c <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80070ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007168 <hagl_draw_rectangle+0x108>)
 80070f0:	8892      	ldrh	r2, [r2, #4]
 80070f2:	4293      	cmp	r3, r2
 80070f4:	dc34      	bgt.n	8007160 <hagl_draw_rectangle+0x100>
 80070f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80070fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007168 <hagl_draw_rectangle+0x108>)
 80070fc:	88d2      	ldrh	r2, [r2, #6]
 80070fe:	4293      	cmp	r3, r2
 8007100:	dc2e      	bgt.n	8007160 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8007102:	887a      	ldrh	r2, [r7, #2]
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	b29b      	uxth	r3, r3
 800710a:	3301      	adds	r3, #1
 800710c:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800710e:	883a      	ldrh	r2, [r7, #0]
 8007110:	88bb      	ldrh	r3, [r7, #4]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	b29b      	uxth	r3, r3
 8007116:	3301      	adds	r3, #1
 8007118:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800711a:	8c3b      	ldrh	r3, [r7, #32]
 800711c:	89fa      	ldrh	r2, [r7, #14]
 800711e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007122:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007126:	f7ff feab 	bl	8006e80 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800712a:	8c3b      	ldrh	r3, [r7, #32]
 800712c:	89fa      	ldrh	r2, [r7, #14]
 800712e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007132:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007136:	f7ff fea3 	bl	8006e80 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800713a:	8c3b      	ldrh	r3, [r7, #32]
 800713c:	89ba      	ldrh	r2, [r7, #12]
 800713e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007142:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007146:	f7ff febe 	bl	8006ec6 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800714a:	8c3b      	ldrh	r3, [r7, #32]
 800714c:	89ba      	ldrh	r2, [r7, #12]
 800714e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007152:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007156:	f7ff feb6 	bl	8006ec6 <hagl_draw_vline>
 800715a:	e002      	b.n	8007162 <hagl_draw_rectangle+0x102>
        return;
 800715c:	bf00      	nop
 800715e:	e000      	b.n	8007162 <hagl_draw_rectangle+0x102>
        return;
 8007160:	bf00      	nop
}
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bd90      	pop	{r4, r7, pc}
 8007168:	2000020c 	.word	0x2000020c

0800716c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800716c:	b590      	push	{r4, r7, lr}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	461a      	mov	r2, r3
 800717a:	4623      	mov	r3, r4
 800717c:	80fb      	strh	r3, [r7, #6]
 800717e:	4603      	mov	r3, r0
 8007180:	80bb      	strh	r3, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	807b      	strh	r3, [r7, #2]
 8007186:	4613      	mov	r3, r2
 8007188:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800718a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800718e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007192:	429a      	cmp	r2, r3
 8007194:	dd0e      	ble.n	80071b4 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	887b      	ldrh	r3, [r7, #2]
 800719a:	4413      	add	r3, r2
 800719c:	b29b      	uxth	r3, r3
 800719e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	887b      	ldrh	r3, [r7, #2]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	887b      	ldrh	r3, [r7, #2]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80071b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80071b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	dd0e      	ble.n	80071de <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 80071c0:	88ba      	ldrh	r2, [r7, #4]
 80071c2:	883b      	ldrh	r3, [r7, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80071ca:	88ba      	ldrh	r2, [r7, #4]
 80071cc:	883b      	ldrh	r3, [r7, #0]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80071d4:	88ba      	ldrh	r2, [r7, #4]
 80071d6:	883b      	ldrh	r3, [r7, #0]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	b29b      	uxth	r3, r3
 80071dc:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80071de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071e2:	4a33      	ldr	r2, [pc, #204]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 80071e4:	8812      	ldrh	r2, [r2, #0]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	db5b      	blt.n	80072a2 <hagl_fill_rectangle+0x136>
 80071ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071ee:	4a30      	ldr	r2, [pc, #192]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 80071f0:	8852      	ldrh	r2, [r2, #2]
 80071f2:	4293      	cmp	r3, r2
 80071f4:	db55      	blt.n	80072a2 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80071f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071fa:	4a2d      	ldr	r2, [pc, #180]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 80071fc:	8892      	ldrh	r2, [r2, #4]
 80071fe:	4293      	cmp	r3, r2
 8007200:	dc51      	bgt.n	80072a6 <hagl_fill_rectangle+0x13a>
 8007202:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007206:	4a2a      	ldr	r2, [pc, #168]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 8007208:	88d2      	ldrh	r2, [r2, #6]
 800720a:	4293      	cmp	r3, r2
 800720c:	dc4b      	bgt.n	80072a6 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800720e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007212:	4a27      	ldr	r2, [pc, #156]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 8007214:	8812      	ldrh	r2, [r2, #0]
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff fded 	bl	8006df8 <max>
 800721e:	4603      	mov	r3, r0
 8007220:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8007222:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007226:	4a22      	ldr	r2, [pc, #136]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 8007228:	8852      	ldrh	r2, [r2, #2]
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fde3 	bl	8006df8 <max>
 8007232:	4603      	mov	r3, r0
 8007234:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8007236:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800723a:	4a1d      	ldr	r2, [pc, #116]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 800723c:	8892      	ldrh	r2, [r2, #4]
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff fdc7 	bl	8006dd4 <min>
 8007246:	4603      	mov	r3, r0
 8007248:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800724a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800724e:	4a18      	ldr	r2, [pc, #96]	@ (80072b0 <hagl_fill_rectangle+0x144>)
 8007250:	88d2      	ldrh	r2, [r2, #6]
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fdbd 	bl	8006dd4 <min>
 800725a:	4603      	mov	r3, r0
 800725c:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800725e:	887a      	ldrh	r2, [r7, #2]
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	b29b      	uxth	r3, r3
 8007266:	3301      	adds	r3, #1
 8007268:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800726a:	883a      	ldrh	r2, [r7, #0]
 800726c:	88bb      	ldrh	r3, [r7, #4]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	b29b      	uxth	r3, r3
 8007272:	3301      	adds	r3, #1
 8007274:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007276:	2300      	movs	r3, #0
 8007278:	81fb      	strh	r3, [r7, #14]
 800727a:	e00d      	b.n	8007298 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800727c:	88ba      	ldrh	r2, [r7, #4]
 800727e:	89fb      	ldrh	r3, [r7, #14]
 8007280:	4413      	add	r3, r2
 8007282:	b29b      	uxth	r3, r3
 8007284:	b219      	sxth	r1, r3
 8007286:	8c3b      	ldrh	r3, [r7, #32]
 8007288:	89ba      	ldrh	r2, [r7, #12]
 800728a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800728e:	f7ff fdf7 	bl	8006e80 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007292:	89fb      	ldrh	r3, [r7, #14]
 8007294:	3301      	adds	r3, #1
 8007296:	81fb      	strh	r3, [r7, #14]
 8007298:	89fa      	ldrh	r2, [r7, #14]
 800729a:	897b      	ldrh	r3, [r7, #10]
 800729c:	429a      	cmp	r2, r3
 800729e:	d3ed      	bcc.n	800727c <hagl_fill_rectangle+0x110>
 80072a0:	e002      	b.n	80072a8 <hagl_fill_rectangle+0x13c>
        return;
 80072a2:	bf00      	nop
 80072a4:	e000      	b.n	80072a8 <hagl_fill_rectangle+0x13c>
        return;
 80072a6:	bf00      	nop
#endif
    }
}
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}
 80072ae:	bf00      	nop
 80072b0:	2000020c 	.word	0x2000020c

080072b4 <hagl_put_char>:
    }

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font) {
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80072ba:	b081      	sub	sp, #4
 80072bc:	af00      	add	r7, sp, #0
 80072be:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80072c2:	f844 0c34 	str.w	r0, [r4, #-52]
 80072c6:	460c      	mov	r4, r1
 80072c8:	4610      	mov	r0, r2
 80072ca:	4619      	mov	r1, r3
 80072cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80072d0:	4622      	mov	r2, r4
 80072d2:	f823 2c36 	strh.w	r2, [r3, #-54]
 80072d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80072da:	4602      	mov	r2, r0
 80072dc:	f823 2c38 	strh.w	r2, [r3, #-56]
 80072e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80072e4:	460a      	mov	r2, r1
 80072e6:	f823 2c3a 	strh.w	r2, [r3, #-58]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80072ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80072ee:	4619      	mov	r1, r3
 80072f0:	f107 0320 	add.w	r3, r7, #32
 80072f4:	3b10      	subs	r3, #16
 80072f6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80072fa:	f102 0210 	add.w	r2, r2, #16
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	f851 1c34 	ldr.w	r1, [r1, #-52]
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fcd3 	bl	8006cb0 <fontx_glyph>
 800730a:	4603      	mov	r3, r0
 800730c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007310:	f102 0215 	add.w	r2, r2, #21
 8007314:	7013      	strb	r3, [r2, #0]
    if (0 != status) {
 8007316:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800731a:	f103 0315 	add.w	r3, r3, #21
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <hagl_put_char+0x74>
        return 0;
 8007324:	2300      	movs	r3, #0
 8007326:	e1ac      	b.n	8007682 <hagl_put_char+0x3ce>
    }

    bitmap.width = glyph.width;
 8007328:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800732c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007330:	461a      	mov	r2, r3
 8007332:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007336:	f823 2c28 	strh.w	r2, [r3, #-40]
    bitmap.height = glyph.height;
 800733a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800733e:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8007342:	461a      	mov	r2, r3
 8007344:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007348:	f823 2c26 	strh.w	r2, [r3, #-38]
    bitmap.depth = DISPLAY_DEPTH;
 800734c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007350:	2210      	movs	r2, #16
 8007352:	f803 2c22 	strb.w	r2, [r3, #-34]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007356:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800735a:	3a18      	subs	r2, #24
 800735c:	f107 0320 	add.w	r3, r7, #32
 8007360:	3b08      	subs	r3, #8
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fb0b 	bl	8006980 <bitmap_init>
    color_t *ptr = (color_t *) bitmap.buffer;
 800736a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800736e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007372:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007376:	f102 021c 	add.w	r2, r2, #28
 800737a:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800737c:	2300      	movs	r3, #0
 800737e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007382:	f102 021b 	add.w	r2, r2, #27
 8007386:	7013      	strb	r3, [r2, #0]
 8007388:	e071      	b.n	800746e <hagl_put_char+0x1ba>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800738a:	2300      	movs	r3, #0
 800738c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007390:	f102 021a 	add.w	r2, r2, #26
 8007394:	7013      	strb	r3, [r2, #0]
 8007396:	e047      	b.n	8007428 <hagl_put_char+0x174>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007398:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800739c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b25a      	sxtb	r2, r3
 80073a4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073a8:	f103 031a 	add.w	r3, r3, #26
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	2180      	movs	r1, #128	@ 0x80
 80073b4:	fa41 f303 	asr.w	r3, r1, r3
 80073b8:	b25b      	sxtb	r3, r3
 80073ba:	4013      	ands	r3, r2
 80073bc:	b25b      	sxtb	r3, r3
 80073be:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073c2:	f102 0209 	add.w	r2, r2, #9
 80073c6:	7013      	strb	r3, [r2, #0]
            if (set) {
 80073c8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073cc:	f103 0309 	add.w	r3, r3, #9
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <hagl_put_char+0x144>
                *(ptr++) = color;
 80073d6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073da:	f103 031c 	add.w	r3, r3, #28
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	1c9a      	adds	r2, r3, #2
 80073e2:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80073e6:	f101 011c 	add.w	r1, r1, #28
 80073ea:	600a      	str	r2, [r1, #0]
 80073ec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80073f0:	f832 2c3a 	ldrh.w	r2, [r2, #-58]
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	e00c      	b.n	8007412 <hagl_put_char+0x15e>
            } else {
                *(ptr++) = 0x0000;
 80073f8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073fc:	f103 031c 	add.w	r3, r3, #28
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8007408:	f101 011c 	add.w	r1, r1, #28
 800740c:	600a      	str	r2, [r1, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007412:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007416:	f103 031a 	add.w	r3, r3, #26
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007422:	f102 021a 	add.w	r2, r2, #26
 8007426:	7013      	strb	r3, [r2, #0]
 8007428:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800742c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8007430:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007434:	f102 021a 	add.w	r2, r2, #26
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d3ac      	bcc.n	8007398 <hagl_put_char+0xe4>
            }
        }
        glyph.buffer += glyph.pitch;
 800743e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007442:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007446:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800744a:	f812 2c2d 	ldrb.w	r2, [r2, #-45]
 800744e:	4413      	add	r3, r2
 8007450:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007454:	f842 3c2c 	str.w	r3, [r2, #-44]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8007458:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800745c:	f103 031b 	add.w	r3, r3, #27
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007468:	f102 021b 	add.w	r2, r2, #27
 800746c:	7013      	strb	r3, [r2, #0]
 800746e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007472:	f813 3c2f 	ldrb.w	r3, [r3, #-47]
 8007476:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800747a:	f102 021b 	add.w	r2, r2, #27
 800747e:	7812      	ldrb	r2, [r2, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d382      	bcc.n	800738a <hagl_put_char+0xd6>
    }

    // Modyfikacja: obsługa częściowego wyświetlania znaku
    int16_t start_x = max(0, -x0);
 8007484:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007488:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 800748c:	425b      	negs	r3, r3
 800748e:	4619      	mov	r1, r3
 8007490:	2000      	movs	r0, #0
 8007492:	f7ff fcb1 	bl	8006df8 <max>
 8007496:	4603      	mov	r3, r0
 8007498:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800749c:	f102 0212 	add.w	r2, r2, #18
 80074a0:	8013      	strh	r3, [r2, #0]
    int16_t start_y = max(0, -y0);
 80074a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074a6:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80074aa:	425b      	negs	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	2000      	movs	r0, #0
 80074b0:	f7ff fca2 	bl	8006df8 <max>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074ba:	f102 0210 	add.w	r2, r2, #16
 80074be:	8013      	strh	r3, [r2, #0]
    int16_t end_x = min(bitmap.width, LCD_WIDTH - x0);
 80074c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074c4:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80074c8:	461a      	mov	r2, r3
 80074ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074ce:	f933 3c36 	ldrsh.w	r3, [r3, #-54]
 80074d2:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7ff fc7b 	bl	8006dd4 <min>
 80074de:	4603      	mov	r3, r0
 80074e0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074e4:	f102 020e 	add.w	r2, r2, #14
 80074e8:	8013      	strh	r3, [r2, #0]
    int16_t end_y = min(bitmap.height, LCD_HEIGHT - y0);
 80074ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074ee:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80074f8:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80074fc:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7ff fc66 	bl	8006dd4 <min>
 8007508:	4603      	mov	r3, r0
 800750a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800750e:	f102 020c 	add.w	r2, r2, #12
 8007512:	8013      	strh	r3, [r2, #0]

    if (start_x < end_x && start_y < end_y) {
 8007514:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007518:	f103 0312 	add.w	r3, r3, #18
 800751c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007520:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007524:	f103 030e 	add.w	r3, r3, #14
 8007528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800752c:	429a      	cmp	r2, r3
 800752e:	f280 80a3 	bge.w	8007678 <hagl_put_char+0x3c4>
 8007532:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007536:	f103 0310 	add.w	r3, r3, #16
 800753a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800753e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007542:	f103 030c 	add.w	r3, r3, #12
 8007546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800754a:	429a      	cmp	r2, r3
 800754c:	f280 8094 	bge.w	8007678 <hagl_put_char+0x3c4>
        for (int16_t y = start_y; y < end_y; y++) {
 8007550:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007554:	f103 0310 	add.w	r3, r3, #16
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800755e:	f102 0218 	add.w	r2, r2, #24
 8007562:	8013      	strh	r3, [r2, #0]
 8007564:	e079      	b.n	800765a <hagl_put_char+0x3a6>
            for (int16_t x = start_x; x < end_x; x++) {
 8007566:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800756a:	f103 0312 	add.w	r3, r3, #18
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007574:	f102 0216 	add.w	r2, r2, #22
 8007578:	8013      	strh	r3, [r2, #0]
 800757a:	e052      	b.n	8007622 <hagl_put_char+0x36e>
                color_t pixel = buffer[y * bitmap.width + x];
 800757c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007580:	f103 0318 	add.w	r3, r3, #24
 8007584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007588:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800758c:	f832 2c28 	ldrh.w	r2, [r2, #-40]
 8007590:	fb03 f202 	mul.w	r2, r3, r2
 8007594:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007598:	f103 0316 	add.w	r3, r3, #22
 800759c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075a0:	4413      	add	r3, r2
 80075a2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	4413      	add	r3, r2
 80075aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80075ae:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80075b2:	f102 020a 	add.w	r2, r2, #10
 80075b6:	8013      	strh	r3, [r2, #0]
                if (pixel != 0x0000) { // tylko nieprzezroczyste piksele
 80075b8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075bc:	f103 030a 	add.w	r3, r3, #10
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01f      	beq.n	8007606 <hagl_put_char+0x352>
                    hagl_put_pixel(x0 + x, y0 + y, pixel);
 80075c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80075ca:	f833 2c36 	ldrh.w	r2, [r3, #-54]
 80075ce:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075d2:	f103 0316 	add.w	r3, r3, #22
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	4413      	add	r3, r2
 80075da:	b29b      	uxth	r3, r3
 80075dc:	b218      	sxth	r0, r3
 80075de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80075e2:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 80075e6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80075ea:	f103 0318 	add.w	r3, r3, #24
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	4413      	add	r3, r2
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80075fa:	f102 020a 	add.w	r2, r2, #10
 80075fe:	8812      	ldrh	r2, [r2, #0]
 8007600:	4619      	mov	r1, r3
 8007602:	f7ff fc0b 	bl	8006e1c <hagl_put_pixel>
            for (int16_t x = start_x; x < end_x; x++) {
 8007606:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800760a:	f103 0316 	add.w	r3, r3, #22
 800760e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007612:	b29b      	uxth	r3, r3
 8007614:	3301      	adds	r3, #1
 8007616:	b29b      	uxth	r3, r3
 8007618:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800761c:	f102 0216 	add.w	r2, r2, #22
 8007620:	8013      	strh	r3, [r2, #0]
 8007622:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007626:	f103 0316 	add.w	r3, r3, #22
 800762a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800762e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007632:	f103 030e 	add.w	r3, r3, #14
 8007636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800763a:	429a      	cmp	r2, r3
 800763c:	db9e      	blt.n	800757c <hagl_put_char+0x2c8>
        for (int16_t y = start_y; y < end_y; y++) {
 800763e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007642:	f103 0318 	add.w	r3, r3, #24
 8007646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800764a:	b29b      	uxth	r3, r3
 800764c:	3301      	adds	r3, #1
 800764e:	b29b      	uxth	r3, r3
 8007650:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007654:	f102 0218 	add.w	r2, r2, #24
 8007658:	8013      	strh	r3, [r2, #0]
 800765a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800765e:	f103 0318 	add.w	r3, r3, #24
 8007662:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007666:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800766a:	f103 030c 	add.w	r3, r3, #12
 800766e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007672:	429a      	cmp	r2, r3
 8007674:	f6ff af77 	blt.w	8007566 <hagl_put_char+0x2b2>
                }
            }
        }
    }

    return bitmap.width;
 8007678:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800767c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8007680:	b2db      	uxtb	r3, r3
}
 8007682:	4618      	mov	r0, r3
 8007684:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8007688:	3704      	adds	r7, #4
 800768a:	46bd      	mov	sp, r7
 800768c:	bd90      	pop	{r4, r7, pc}

0800768e <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b08c      	sub	sp, #48	@ 0x30
 8007692:	af02      	add	r7, sp, #8
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	4608      	mov	r0, r1
 8007698:	4611      	mov	r1, r2
 800769a:	461a      	mov	r2, r3
 800769c:	4603      	mov	r3, r0
 800769e:	817b      	strh	r3, [r7, #10]
 80076a0:	460b      	mov	r3, r1
 80076a2:	813b      	strh	r3, [r7, #8]
 80076a4:	4613      	mov	r3, r2
 80076a6:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80076a8:	897b      	ldrh	r3, [r7, #10]
 80076aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80076ac:	f107 0314 	add.w	r3, r7, #20
 80076b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff fadc 	bl	8006c70 <fontx_meta>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80076be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <hagl_put_text+0x3c>
        return 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e02c      	b.n	8007724 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	1d1a      	adds	r2, r3, #4
 80076ce:	60fa      	str	r2, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	2b0d      	cmp	r3, #13
 80076d8:	d002      	beq.n	80076e0 <hagl_put_text+0x52>
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2b0a      	cmp	r3, #10
 80076de:	d108      	bne.n	80076f2 <hagl_put_text+0x64>
            x0 = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80076e4:	7fbb      	ldrb	r3, [r7, #30]
 80076e6:	461a      	mov	r2, r3
 80076e8:	893b      	ldrh	r3, [r7, #8]
 80076ea:	4413      	add	r3, r2
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	813b      	strh	r3, [r7, #8]
 80076f0:	e010      	b.n	8007714 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80076f2:	88f8      	ldrh	r0, [r7, #6]
 80076f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80076f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	4603      	mov	r3, r0
 8007702:	6a38      	ldr	r0, [r7, #32]
 8007704:	f7ff fdd6 	bl	80072b4 <hagl_put_char>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	897b      	ldrh	r3, [r7, #10]
 800770e:	4413      	add	r3, r2
 8007710:	b29b      	uxth	r3, r3
 8007712:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1d6      	bne.n	80076ca <hagl_put_text+0x3c>

    return x0 - original;
 800771c:	897a      	ldrh	r2, [r7, #10]
 800771e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	b29b      	uxth	r3, r3
}
 8007724:	4618      	mov	r0, r3
 8007726:	3728      	adds	r7, #40	@ 0x28
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 800772c:	b590      	push	{r4, r7, lr}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	4604      	mov	r4, r0
 8007734:	4608      	mov	r0, r1
 8007736:	4611      	mov	r1, r2
 8007738:	461a      	mov	r2, r3
 800773a:	4623      	mov	r3, r4
 800773c:	80fb      	strh	r3, [r7, #6]
 800773e:	4603      	mov	r3, r0
 8007740:	80bb      	strh	r3, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	807b      	strh	r3, [r7, #2]
 8007746:	4613      	mov	r3, r2
 8007748:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 800774e:	887b      	ldrh	r3, [r7, #2]
 8007750:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007752:	887b      	ldrh	r3, [r7, #2]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	b29b      	uxth	r3, r3
 8007758:	f1c3 0303 	rsb	r3, r3, #3
 800775c:	b29b      	uxth	r3, r3
 800775e:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 8007760:	88fa      	ldrh	r2, [r7, #6]
 8007762:	89fb      	ldrh	r3, [r7, #14]
 8007764:	4413      	add	r3, r2
 8007766:	b29b      	uxth	r3, r3
 8007768:	b218      	sxth	r0, r3
 800776a:	88ba      	ldrh	r2, [r7, #4]
 800776c:	89bb      	ldrh	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	b29b      	uxth	r3, r3
 8007772:	b21b      	sxth	r3, r3
 8007774:	883a      	ldrh	r2, [r7, #0]
 8007776:	4619      	mov	r1, r3
 8007778:	f7ff fb50 	bl	8006e1c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 800777c:	88fa      	ldrh	r2, [r7, #6]
 800777e:	89fb      	ldrh	r3, [r7, #14]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	b218      	sxth	r0, r3
 8007786:	88ba      	ldrh	r2, [r7, #4]
 8007788:	89bb      	ldrh	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	b29b      	uxth	r3, r3
 800778e:	b21b      	sxth	r3, r3
 8007790:	883a      	ldrh	r2, [r7, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	f7ff fb42 	bl	8006e1c <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8007798:	88fa      	ldrh	r2, [r7, #6]
 800779a:	89fb      	ldrh	r3, [r7, #14]
 800779c:	4413      	add	r3, r2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	b218      	sxth	r0, r3
 80077a2:	88ba      	ldrh	r2, [r7, #4]
 80077a4:	89bb      	ldrh	r3, [r7, #12]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b21b      	sxth	r3, r3
 80077ac:	883a      	ldrh	r2, [r7, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	f7ff fb34 	bl	8006e1c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	89fb      	ldrh	r3, [r7, #14]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	b218      	sxth	r0, r3
 80077be:	88ba      	ldrh	r2, [r7, #4]
 80077c0:	89bb      	ldrh	r3, [r7, #12]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	883a      	ldrh	r2, [r7, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	f7ff fb26 	bl	8006e1c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	89bb      	ldrh	r3, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	b218      	sxth	r0, r3
 80077da:	88ba      	ldrh	r2, [r7, #4]
 80077dc:	89fb      	ldrh	r3, [r7, #14]
 80077de:	4413      	add	r3, r2
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	b21b      	sxth	r3, r3
 80077e4:	883a      	ldrh	r2, [r7, #0]
 80077e6:	4619      	mov	r1, r3
 80077e8:	f7ff fb18 	bl	8006e1c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	89bb      	ldrh	r3, [r7, #12]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	b218      	sxth	r0, r3
 80077f6:	88ba      	ldrh	r2, [r7, #4]
 80077f8:	89fb      	ldrh	r3, [r7, #14]
 80077fa:	4413      	add	r3, r2
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	b21b      	sxth	r3, r3
 8007800:	883a      	ldrh	r2, [r7, #0]
 8007802:	4619      	mov	r1, r3
 8007804:	f7ff fb0a 	bl	8006e1c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	89bb      	ldrh	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	b29b      	uxth	r3, r3
 8007810:	b218      	sxth	r0, r3
 8007812:	88ba      	ldrh	r2, [r7, #4]
 8007814:	89fb      	ldrh	r3, [r7, #14]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	b29b      	uxth	r3, r3
 800781a:	b21b      	sxth	r3, r3
 800781c:	883a      	ldrh	r2, [r7, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	f7ff fafc 	bl	8006e1c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007824:	88fa      	ldrh	r2, [r7, #6]
 8007826:	89bb      	ldrh	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	b29b      	uxth	r3, r3
 800782c:	b218      	sxth	r0, r3
 800782e:	88ba      	ldrh	r2, [r7, #4]
 8007830:	89fb      	ldrh	r3, [r7, #14]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	b29b      	uxth	r3, r3
 8007836:	b21b      	sxth	r3, r3
 8007838:	883a      	ldrh	r2, [r7, #0]
 800783a:	4619      	mov	r1, r3
 800783c:	f7ff faee 	bl	8006e1c <hagl_put_pixel>

    while (y >= x) {
 8007840:	e097      	b.n	8007972 <hagl_draw_circle+0x246>
        x++;
 8007842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007846:	b29b      	uxth	r3, r3
 8007848:	3301      	adds	r3, #1
 800784a:	b29b      	uxth	r3, r3
 800784c:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 800784e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007852:	2b00      	cmp	r3, #0
 8007854:	dd14      	ble.n	8007880 <hagl_draw_circle+0x154>
            y--;
 8007856:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29b      	uxth	r3, r3
 8007860:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007862:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007866:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	b29b      	uxth	r3, r3
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	b29a      	uxth	r2, r3
 8007872:	897b      	ldrh	r3, [r7, #10]
 8007874:	4413      	add	r3, r2
 8007876:	b29b      	uxth	r3, r3
 8007878:	330a      	adds	r3, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	817b      	strh	r3, [r7, #10]
 800787e:	e008      	b.n	8007892 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8007880:	89fb      	ldrh	r3, [r7, #14]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	b29a      	uxth	r2, r3
 8007886:	897b      	ldrh	r3, [r7, #10]
 8007888:	4413      	add	r3, r2
 800788a:	b29b      	uxth	r3, r3
 800788c:	3306      	adds	r3, #6
 800788e:	b29b      	uxth	r3, r3
 8007890:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	89fb      	ldrh	r3, [r7, #14]
 8007896:	4413      	add	r3, r2
 8007898:	b29b      	uxth	r3, r3
 800789a:	b218      	sxth	r0, r3
 800789c:	88ba      	ldrh	r2, [r7, #4]
 800789e:	89bb      	ldrh	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	b21b      	sxth	r3, r3
 80078a6:	883a      	ldrh	r2, [r7, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	f7ff fab7 	bl	8006e1c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	b218      	sxth	r0, r3
 80078b8:	88ba      	ldrh	r2, [r7, #4]
 80078ba:	89bb      	ldrh	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	b29b      	uxth	r3, r3
 80078c0:	b21b      	sxth	r3, r3
 80078c2:	883a      	ldrh	r2, [r7, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	f7ff faa9 	bl	8006e1c <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	89fb      	ldrh	r3, [r7, #14]
 80078ce:	4413      	add	r3, r2
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	b218      	sxth	r0, r3
 80078d4:	88ba      	ldrh	r2, [r7, #4]
 80078d6:	89bb      	ldrh	r3, [r7, #12]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	b21b      	sxth	r3, r3
 80078de:	883a      	ldrh	r2, [r7, #0]
 80078e0:	4619      	mov	r1, r3
 80078e2:	f7ff fa9b 	bl	8006e1c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	89fb      	ldrh	r3, [r7, #14]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	b218      	sxth	r0, r3
 80078f0:	88ba      	ldrh	r2, [r7, #4]
 80078f2:	89bb      	ldrh	r3, [r7, #12]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	883a      	ldrh	r2, [r7, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	f7ff fa8d 	bl	8006e1c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007902:	88fa      	ldrh	r2, [r7, #6]
 8007904:	89bb      	ldrh	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	b29b      	uxth	r3, r3
 800790a:	b218      	sxth	r0, r3
 800790c:	88ba      	ldrh	r2, [r7, #4]
 800790e:	89fb      	ldrh	r3, [r7, #14]
 8007910:	4413      	add	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	b21b      	sxth	r3, r3
 8007916:	883a      	ldrh	r2, [r7, #0]
 8007918:	4619      	mov	r1, r3
 800791a:	f7ff fa7f 	bl	8006e1c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	89bb      	ldrh	r3, [r7, #12]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	b29b      	uxth	r3, r3
 8007926:	b218      	sxth	r0, r3
 8007928:	88ba      	ldrh	r2, [r7, #4]
 800792a:	89fb      	ldrh	r3, [r7, #14]
 800792c:	4413      	add	r3, r2
 800792e:	b29b      	uxth	r3, r3
 8007930:	b21b      	sxth	r3, r3
 8007932:	883a      	ldrh	r2, [r7, #0]
 8007934:	4619      	mov	r1, r3
 8007936:	f7ff fa71 	bl	8006e1c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	89bb      	ldrh	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	b29b      	uxth	r3, r3
 8007942:	b218      	sxth	r0, r3
 8007944:	88ba      	ldrh	r2, [r7, #4]
 8007946:	89fb      	ldrh	r3, [r7, #14]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	b29b      	uxth	r3, r3
 800794c:	b21b      	sxth	r3, r3
 800794e:	883a      	ldrh	r2, [r7, #0]
 8007950:	4619      	mov	r1, r3
 8007952:	f7ff fa63 	bl	8006e1c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	89bb      	ldrh	r3, [r7, #12]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	b29b      	uxth	r3, r3
 800795e:	b218      	sxth	r0, r3
 8007960:	88ba      	ldrh	r2, [r7, #4]
 8007962:	89fb      	ldrh	r3, [r7, #14]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	b29b      	uxth	r3, r3
 8007968:	b21b      	sxth	r3, r3
 800796a:	883a      	ldrh	r2, [r7, #0]
 800796c:	4619      	mov	r1, r3
 800796e:	f7ff fa55 	bl	8006e1c <hagl_put_pixel>
    while (y >= x) {
 8007972:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800797a:	429a      	cmp	r2, r3
 800797c:	f6bf af61 	bge.w	8007842 <hagl_draw_circle+0x116>
    }
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	bd90      	pop	{r4, r7, pc}

0800798a <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 800798a:	b590      	push	{r4, r7, lr}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	4604      	mov	r4, r0
 8007992:	4608      	mov	r0, r1
 8007994:	4611      	mov	r1, r2
 8007996:	461a      	mov	r2, r3
 8007998:	4623      	mov	r3, r4
 800799a:	80fb      	strh	r3, [r7, #6]
 800799c:	4603      	mov	r3, r0
 800799e:	80bb      	strh	r3, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	807b      	strh	r3, [r7, #2]
 80079a4:	4613      	mov	r3, r2
 80079a6:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80079ac:	887b      	ldrh	r3, [r7, #2]
 80079ae:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80079b0:	887b      	ldrh	r3, [r7, #2]
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f1c3 0303 	rsb	r3, r3, #3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 80079be:	e067      	b.n	8007a90 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 80079c0:	88fa      	ldrh	r2, [r7, #6]
 80079c2:	89fb      	ldrh	r3, [r7, #14]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	b218      	sxth	r0, r3
 80079ca:	88ba      	ldrh	r2, [r7, #4]
 80079cc:	89bb      	ldrh	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	b219      	sxth	r1, r3
 80079d4:	89fb      	ldrh	r3, [r7, #14]
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	883b      	ldrh	r3, [r7, #0]
 80079dc:	f7ff fa50 	bl	8006e80 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 80079e0:	88fa      	ldrh	r2, [r7, #6]
 80079e2:	89fb      	ldrh	r3, [r7, #14]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	b218      	sxth	r0, r3
 80079ea:	88ba      	ldrh	r2, [r7, #4]
 80079ec:	89bb      	ldrh	r3, [r7, #12]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	b219      	sxth	r1, r3
 80079f4:	89fb      	ldrh	r3, [r7, #14]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	883b      	ldrh	r3, [r7, #0]
 80079fc:	f7ff fa40 	bl	8006e80 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007a00:	88fa      	ldrh	r2, [r7, #6]
 8007a02:	89bb      	ldrh	r3, [r7, #12]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	b218      	sxth	r0, r3
 8007a0a:	88ba      	ldrh	r2, [r7, #4]
 8007a0c:	89fb      	ldrh	r3, [r7, #14]
 8007a0e:	4413      	add	r3, r2
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	b219      	sxth	r1, r3
 8007a14:	89bb      	ldrh	r3, [r7, #12]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	883b      	ldrh	r3, [r7, #0]
 8007a1c:	f7ff fa30 	bl	8006e80 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007a20:	88fa      	ldrh	r2, [r7, #6]
 8007a22:	89bb      	ldrh	r3, [r7, #12]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	b218      	sxth	r0, r3
 8007a2a:	88ba      	ldrh	r2, [r7, #4]
 8007a2c:	89fb      	ldrh	r3, [r7, #14]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	b219      	sxth	r1, r3
 8007a34:	89bb      	ldrh	r3, [r7, #12]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	883b      	ldrh	r3, [r7, #0]
 8007a3c:	f7ff fa20 	bl	8006e80 <hagl_draw_hline>
        x++;
 8007a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3301      	adds	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007a4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dd14      	ble.n	8007a7e <hagl_fill_circle+0xf4>
            y--;
 8007a54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007a60:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007a64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	897b      	ldrh	r3, [r7, #10]
 8007a72:	4413      	add	r3, r2
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	330a      	adds	r3, #10
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	817b      	strh	r3, [r7, #10]
 8007a7c:	e008      	b.n	8007a90 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007a7e:	89fb      	ldrh	r3, [r7, #14]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	897b      	ldrh	r3, [r7, #10]
 8007a86:	4413      	add	r3, r2
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3306      	adds	r3, #6
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007a90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	da91      	bge.n	80079c0 <hagl_fill_circle+0x36>
        }
    }
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd90      	pop	{r4, r7, pc}

08007aa6 <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007aa6:	b590      	push	{r4, r7, lr}
 8007aa8:	b087      	sub	sp, #28
 8007aaa:	af02      	add	r7, sp, #8
 8007aac:	4603      	mov	r3, r0
 8007aae:	6039      	str	r1, [r7, #0]
 8007ab0:	80fb      	strh	r3, [r7, #6]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	81fb      	strh	r3, [r7, #14]
 8007aba:	e02a      	b.n	8007b12 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	4413      	add	r3, r2
        hagl_draw_line(
 8007ac6:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	4413      	add	r3, r2
        hagl_draw_line(
 8007ad6:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4413      	add	r3, r2
        hagl_draw_line(
 8007ae6:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	3306      	adds	r3, #6
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	4413      	add	r3, r2
        hagl_draw_line(
 8007af6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007afa:	88bb      	ldrh	r3, [r7, #4]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4613      	mov	r3, r2
 8007b00:	4622      	mov	r2, r4
 8007b02:	f7ff fa03 	bl	8006f0c <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	81fb      	strh	r3, [r7, #14]
 8007b12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	dbcd      	blt.n	8007abc <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	3302      	adds	r3, #2
    hagl_draw_line(
 8007b2a:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b36:	3b01      	subs	r3, #1
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4413      	add	r3, r2
    hagl_draw_line(
 8007b3e:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	3b02      	subs	r3, #2
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4413      	add	r3, r2
    hagl_draw_line(
 8007b4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007b52:	88bb      	ldrh	r3, [r7, #4]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	4613      	mov	r3, r2
 8007b58:	4622      	mov	r2, r4
 8007b5a:	f7ff f9d7 	bl	8006f0c <hagl_draw_line>
        color
    );
}
 8007b5e:	bf00      	nop
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd90      	pop	{r4, r7, pc}

08007b66 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b0ac      	sub	sp, #176	@ 0xb0
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	6039      	str	r1, [r7, #0]
 8007b70:	80fb      	strh	r3, [r7, #6]
 8007b72:	4613      	mov	r3, r2
 8007b74:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007b76:	2380      	movs	r3, #128	@ 0x80
 8007b78:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007b82:	2300      	movs	r3, #0
 8007b84:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007b88:	e02e      	b.n	8007be8 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007b8a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	3302      	adds	r3, #2
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4413      	add	r3, r2
 8007b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b9a:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	dd08      	ble.n	8007bb4 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007ba2:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	3302      	adds	r3, #2
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4413      	add	r3, r2
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007bb4:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	3302      	adds	r3, #2
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bc4:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	da08      	bge.n	8007bde <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007bcc:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007bde:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007be2:	3301      	adds	r3, #1
 8007be4:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007be8:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	dbca      	blt.n	8007b8a <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007bf4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007bf8:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007bfc:	e144      	b.n	8007e88 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007c14:	e0a6      	b.n	8007d64 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007c16:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c24:	ee07 3a90 	vmov	s15, r3
 8007c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007c30:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	3302      	adds	r3, #2
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c48:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007c4c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c62:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007c66:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4413      	add	r3, r2
 8007c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c7e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007c82:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007c8e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9a:	d50c      	bpl.n	8007cb6 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007c9c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ca8:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb4:	da19      	bge.n	8007cea <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007cb6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007cc2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cce:	d53e      	bpl.n	8007d4e <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007cd0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007cd4:	ee07 3a90 	vmov	s15, r3
 8007cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cdc:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce8:	db31      	blt.n	8007d4e <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007cea:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cf6:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007cfa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007cfe:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007d02:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0e:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007d12:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007d16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d1e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d2a:	ee17 3a90 	vmov	r3, s15
 8007d2e:	b21a      	sxth	r2, r3
 8007d30:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007d34:	b292      	uxth	r2, r2
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	33b0      	adds	r3, #176	@ 0xb0
 8007d3a:	443b      	add	r3, r7
 8007d3c:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007d40:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3301      	adds	r3, #1
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007d4e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007d52:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007d56:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007d64:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	f6ff af52 	blt.w	8007c16 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007d78:	e046      	b.n	8007e08 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007d7a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	33b0      	adds	r3, #176	@ 0xb0
 8007d82:	443b      	add	r3, r7
 8007d84:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007d88:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	33b0      	adds	r3, #176	@ 0xb0
 8007d92:	443b      	add	r3, r7
 8007d94:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d92e      	bls.n	8007dfa <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007d9c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	33b0      	adds	r3, #176	@ 0xb0
 8007da4:	443b      	add	r3, r7
 8007da6:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007daa:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007dae:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007db2:	3301      	adds	r3, #1
 8007db4:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	33b0      	adds	r3, #176	@ 0xb0
 8007dbc:	443b      	add	r3, r7
 8007dbe:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007dc2:	0053      	lsls	r3, r2, #1
 8007dc4:	33b0      	adds	r3, #176	@ 0xb0
 8007dc6:	443b      	add	r3, r7
 8007dc8:	460a      	mov	r2, r1
 8007dca:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007dce:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	33b0      	adds	r3, #176	@ 0xb0
 8007ddc:	443b      	add	r3, r7
 8007dde:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007de2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00e      	beq.n	8007e08 <hagl_fill_polygon+0x2a2>
                    i--;
 8007dea:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007df8:	e006      	b.n	8007e08 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007dfa:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3301      	adds	r3, #1
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007e08:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007e0c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007e10:	3b01      	subs	r3, #1
 8007e12:	429a      	cmp	r2, r3
 8007e14:	dbb1      	blt.n	8007d7a <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007e16:	2300      	movs	r3, #0
 8007e18:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007e1c:	e027      	b.n	8007e6e <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007e1e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007e22:	3301      	adds	r3, #1
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	33b0      	adds	r3, #176	@ 0xb0
 8007e28:	443b      	add	r3, r7
 8007e2a:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007e2e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	33b0      	adds	r3, #176	@ 0xb0
 8007e36:	443b      	add	r3, r7
 8007e38:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007e44:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	33b0      	adds	r3, #176	@ 0xb0
 8007e4c:	443b      	add	r3, r7
 8007e4e:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007e52:	b218      	sxth	r0, r3
 8007e54:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007e58:	88bb      	ldrh	r3, [r7, #4]
 8007e5a:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007e5e:	f7ff f80f 	bl	8006e80 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007e62:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007e66:	3302      	adds	r3, #2
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007e6e:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007e72:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007e76:	429a      	cmp	r2, r3
 8007e78:	dbd1      	blt.n	8007e1e <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007e7a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	3301      	adds	r3, #1
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007e88:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007e8c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007e90:	429a      	cmp	r2, r3
 8007e92:	f6ff aeb4 	blt.w	8007bfe <hagl_fill_polygon+0x98>
        }
    }
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	37b0      	adds	r7, #176	@ 0xb0
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	4611      	mov	r1, r2
 8007eac:	461a      	mov	r2, r3
 8007eae:	4623      	mov	r3, r4
 8007eb0:	80fb      	strh	r3, [r7, #6]
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	80bb      	strh	r3, [r7, #4]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	807b      	strh	r3, [r7, #2]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007ebe:	88fb      	ldrh	r3, [r7, #6]
 8007ec0:	81bb      	strh	r3, [r7, #12]
 8007ec2:	88bb      	ldrh	r3, [r7, #4]
 8007ec4:	81fb      	strh	r3, [r7, #14]
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	823b      	strh	r3, [r7, #16]
 8007eca:	883b      	ldrh	r3, [r7, #0]
 8007ecc:	827b      	strh	r3, [r7, #18]
 8007ece:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ed0:	82bb      	strh	r3, [r7, #20]
 8007ed2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007ed4:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007ed6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007ed8:	f107 030c 	add.w	r3, r7, #12
 8007edc:	4619      	mov	r1, r3
 8007ede:	2003      	movs	r0, #3
 8007ee0:	f7ff fde1 	bl	8007aa6 <hagl_draw_polygon>
};
 8007ee4:	bf00      	nop
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd90      	pop	{r4, r7, pc}

08007eec <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4623      	mov	r3, r4
 8007efc:	80fb      	strh	r3, [r7, #6]
 8007efe:	4603      	mov	r3, r0
 8007f00:	80bb      	strh	r3, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	807b      	strh	r3, [r7, #2]
 8007f06:	4613      	mov	r3, r2
 8007f08:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	81bb      	strh	r3, [r7, #12]
 8007f0e:	88bb      	ldrh	r3, [r7, #4]
 8007f10:	81fb      	strh	r3, [r7, #14]
 8007f12:	887b      	ldrh	r3, [r7, #2]
 8007f14:	823b      	strh	r3, [r7, #16]
 8007f16:	883b      	ldrh	r3, [r7, #0]
 8007f18:	827b      	strh	r3, [r7, #18]
 8007f1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007f1c:	82bb      	strh	r3, [r7, #20]
 8007f1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007f20:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007f22:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007f24:	f107 030c 	add.w	r3, r7, #12
 8007f28:	4619      	mov	r1, r3
 8007f2a:	2003      	movs	r0, #3
 8007f2c:	f7ff fe1b 	bl	8007b66 <hagl_fill_polygon>
}
 8007f30:	bf00      	nop
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd90      	pop	{r4, r7, pc}

08007f38 <_vsniprintf_r>:
 8007f38:	b530      	push	{r4, r5, lr}
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	2c00      	cmp	r4, #0
 8007f3e:	b09b      	sub	sp, #108	@ 0x6c
 8007f40:	4605      	mov	r5, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	da05      	bge.n	8007f52 <_vsniprintf_r+0x1a>
 8007f46:	238b      	movs	r3, #139	@ 0x8b
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4e:	b01b      	add	sp, #108	@ 0x6c
 8007f50:	bd30      	pop	{r4, r5, pc}
 8007f52:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f56:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007f5a:	bf14      	ite	ne
 8007f5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f60:	4623      	moveq	r3, r4
 8007f62:	9302      	str	r3, [sp, #8]
 8007f64:	9305      	str	r3, [sp, #20]
 8007f66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f6a:	9100      	str	r1, [sp, #0]
 8007f6c:	9104      	str	r1, [sp, #16]
 8007f6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007f72:	4669      	mov	r1, sp
 8007f74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007f76:	f000 f9d3 	bl	8008320 <_svfiprintf_r>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	bfbc      	itt	lt
 8007f7e:	238b      	movlt	r3, #139	@ 0x8b
 8007f80:	602b      	strlt	r3, [r5, #0]
 8007f82:	2c00      	cmp	r4, #0
 8007f84:	d0e3      	beq.n	8007f4e <_vsniprintf_r+0x16>
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	701a      	strb	r2, [r3, #0]
 8007f8c:	e7df      	b.n	8007f4e <_vsniprintf_r+0x16>
	...

08007f90 <vsniprintf>:
 8007f90:	b507      	push	{r0, r1, r2, lr}
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4613      	mov	r3, r2
 8007f96:	460a      	mov	r2, r1
 8007f98:	4601      	mov	r1, r0
 8007f9a:	4803      	ldr	r0, [pc, #12]	@ (8007fa8 <vsniprintf+0x18>)
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f7ff ffcb 	bl	8007f38 <_vsniprintf_r>
 8007fa2:	b003      	add	sp, #12
 8007fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fa8:	20000214 	.word	0x20000214

08007fac <memcmp>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	3901      	subs	r1, #1
 8007fb0:	4402      	add	r2, r0
 8007fb2:	4290      	cmp	r0, r2
 8007fb4:	d101      	bne.n	8007fba <memcmp+0xe>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e005      	b.n	8007fc6 <memcmp+0x1a>
 8007fba:	7803      	ldrb	r3, [r0, #0]
 8007fbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d001      	beq.n	8007fc8 <memcmp+0x1c>
 8007fc4:	1b18      	subs	r0, r3, r4
 8007fc6:	bd10      	pop	{r4, pc}
 8007fc8:	3001      	adds	r0, #1
 8007fca:	e7f2      	b.n	8007fb2 <memcmp+0x6>

08007fcc <memset>:
 8007fcc:	4402      	add	r2, r0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d100      	bne.n	8007fd6 <memset+0xa>
 8007fd4:	4770      	bx	lr
 8007fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fda:	e7f9      	b.n	8007fd0 <memset+0x4>

08007fdc <strncpy>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	3901      	subs	r1, #1
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	b132      	cbz	r2, 8007ff2 <strncpy+0x16>
 8007fe4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fe8:	f803 4b01 	strb.w	r4, [r3], #1
 8007fec:	3a01      	subs	r2, #1
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	d1f7      	bne.n	8007fe2 <strncpy+0x6>
 8007ff2:	441a      	add	r2, r3
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d100      	bne.n	8007ffc <strncpy+0x20>
 8007ffa:	bd10      	pop	{r4, pc}
 8007ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8008000:	e7f9      	b.n	8007ff6 <strncpy+0x1a>
	...

08008004 <__errno>:
 8008004:	4b01      	ldr	r3, [pc, #4]	@ (800800c <__errno+0x8>)
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000214 	.word	0x20000214

08008010 <__libc_init_array>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4d0d      	ldr	r5, [pc, #52]	@ (8008048 <__libc_init_array+0x38>)
 8008014:	4c0d      	ldr	r4, [pc, #52]	@ (800804c <__libc_init_array+0x3c>)
 8008016:	1b64      	subs	r4, r4, r5
 8008018:	10a4      	asrs	r4, r4, #2
 800801a:	2600      	movs	r6, #0
 800801c:	42a6      	cmp	r6, r4
 800801e:	d109      	bne.n	8008034 <__libc_init_array+0x24>
 8008020:	4d0b      	ldr	r5, [pc, #44]	@ (8008050 <__libc_init_array+0x40>)
 8008022:	4c0c      	ldr	r4, [pc, #48]	@ (8008054 <__libc_init_array+0x44>)
 8008024:	f000 fc66 	bl	80088f4 <_init>
 8008028:	1b64      	subs	r4, r4, r5
 800802a:	10a4      	asrs	r4, r4, #2
 800802c:	2600      	movs	r6, #0
 800802e:	42a6      	cmp	r6, r4
 8008030:	d105      	bne.n	800803e <__libc_init_array+0x2e>
 8008032:	bd70      	pop	{r4, r5, r6, pc}
 8008034:	f855 3b04 	ldr.w	r3, [r5], #4
 8008038:	4798      	blx	r3
 800803a:	3601      	adds	r6, #1
 800803c:	e7ee      	b.n	800801c <__libc_init_array+0xc>
 800803e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008042:	4798      	blx	r3
 8008044:	3601      	adds	r6, #1
 8008046:	e7f2      	b.n	800802e <__libc_init_array+0x1e>
 8008048:	08011e98 	.word	0x08011e98
 800804c:	08011e98 	.word	0x08011e98
 8008050:	08011e98 	.word	0x08011e98
 8008054:	08011e9c 	.word	0x08011e9c

08008058 <__retarget_lock_acquire_recursive>:
 8008058:	4770      	bx	lr

0800805a <__retarget_lock_release_recursive>:
 800805a:	4770      	bx	lr

0800805c <memcpy>:
 800805c:	440a      	add	r2, r1
 800805e:	4291      	cmp	r1, r2
 8008060:	f100 33ff 	add.w	r3, r0, #4294967295
 8008064:	d100      	bne.n	8008068 <memcpy+0xc>
 8008066:	4770      	bx	lr
 8008068:	b510      	push	{r4, lr}
 800806a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800806e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008072:	4291      	cmp	r1, r2
 8008074:	d1f9      	bne.n	800806a <memcpy+0xe>
 8008076:	bd10      	pop	{r4, pc}

08008078 <_free_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4605      	mov	r5, r0
 800807c:	2900      	cmp	r1, #0
 800807e:	d041      	beq.n	8008104 <_free_r+0x8c>
 8008080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008084:	1f0c      	subs	r4, r1, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	bfb8      	it	lt
 800808a:	18e4      	addlt	r4, r4, r3
 800808c:	f000 f8e0 	bl	8008250 <__malloc_lock>
 8008090:	4a1d      	ldr	r2, [pc, #116]	@ (8008108 <_free_r+0x90>)
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	b933      	cbnz	r3, 80080a4 <_free_r+0x2c>
 8008096:	6063      	str	r3, [r4, #4]
 8008098:	6014      	str	r4, [r2, #0]
 800809a:	4628      	mov	r0, r5
 800809c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080a0:	f000 b8dc 	b.w	800825c <__malloc_unlock>
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d908      	bls.n	80080ba <_free_r+0x42>
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	1821      	adds	r1, r4, r0
 80080ac:	428b      	cmp	r3, r1
 80080ae:	bf01      	itttt	eq
 80080b0:	6819      	ldreq	r1, [r3, #0]
 80080b2:	685b      	ldreq	r3, [r3, #4]
 80080b4:	1809      	addeq	r1, r1, r0
 80080b6:	6021      	streq	r1, [r4, #0]
 80080b8:	e7ed      	b.n	8008096 <_free_r+0x1e>
 80080ba:	461a      	mov	r2, r3
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	b10b      	cbz	r3, 80080c4 <_free_r+0x4c>
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	d9fa      	bls.n	80080ba <_free_r+0x42>
 80080c4:	6811      	ldr	r1, [r2, #0]
 80080c6:	1850      	adds	r0, r2, r1
 80080c8:	42a0      	cmp	r0, r4
 80080ca:	d10b      	bne.n	80080e4 <_free_r+0x6c>
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	4401      	add	r1, r0
 80080d0:	1850      	adds	r0, r2, r1
 80080d2:	4283      	cmp	r3, r0
 80080d4:	6011      	str	r1, [r2, #0]
 80080d6:	d1e0      	bne.n	800809a <_free_r+0x22>
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	6053      	str	r3, [r2, #4]
 80080de:	4408      	add	r0, r1
 80080e0:	6010      	str	r0, [r2, #0]
 80080e2:	e7da      	b.n	800809a <_free_r+0x22>
 80080e4:	d902      	bls.n	80080ec <_free_r+0x74>
 80080e6:	230c      	movs	r3, #12
 80080e8:	602b      	str	r3, [r5, #0]
 80080ea:	e7d6      	b.n	800809a <_free_r+0x22>
 80080ec:	6820      	ldr	r0, [r4, #0]
 80080ee:	1821      	adds	r1, r4, r0
 80080f0:	428b      	cmp	r3, r1
 80080f2:	bf04      	itt	eq
 80080f4:	6819      	ldreq	r1, [r3, #0]
 80080f6:	685b      	ldreq	r3, [r3, #4]
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	bf04      	itt	eq
 80080fc:	1809      	addeq	r1, r1, r0
 80080fe:	6021      	streq	r1, [r4, #0]
 8008100:	6054      	str	r4, [r2, #4]
 8008102:	e7ca      	b.n	800809a <_free_r+0x22>
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	bf00      	nop
 8008108:	2000b018 	.word	0x2000b018

0800810c <sbrk_aligned>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4e0f      	ldr	r6, [pc, #60]	@ (800814c <sbrk_aligned+0x40>)
 8008110:	460c      	mov	r4, r1
 8008112:	6831      	ldr	r1, [r6, #0]
 8008114:	4605      	mov	r5, r0
 8008116:	b911      	cbnz	r1, 800811e <sbrk_aligned+0x12>
 8008118:	f000 fba6 	bl	8008868 <_sbrk_r>
 800811c:	6030      	str	r0, [r6, #0]
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	f000 fba1 	bl	8008868 <_sbrk_r>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d103      	bne.n	8008132 <sbrk_aligned+0x26>
 800812a:	f04f 34ff 	mov.w	r4, #4294967295
 800812e:	4620      	mov	r0, r4
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	1cc4      	adds	r4, r0, #3
 8008134:	f024 0403 	bic.w	r4, r4, #3
 8008138:	42a0      	cmp	r0, r4
 800813a:	d0f8      	beq.n	800812e <sbrk_aligned+0x22>
 800813c:	1a21      	subs	r1, r4, r0
 800813e:	4628      	mov	r0, r5
 8008140:	f000 fb92 	bl	8008868 <_sbrk_r>
 8008144:	3001      	adds	r0, #1
 8008146:	d1f2      	bne.n	800812e <sbrk_aligned+0x22>
 8008148:	e7ef      	b.n	800812a <sbrk_aligned+0x1e>
 800814a:	bf00      	nop
 800814c:	2000b014 	.word	0x2000b014

08008150 <_malloc_r>:
 8008150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008154:	1ccd      	adds	r5, r1, #3
 8008156:	f025 0503 	bic.w	r5, r5, #3
 800815a:	3508      	adds	r5, #8
 800815c:	2d0c      	cmp	r5, #12
 800815e:	bf38      	it	cc
 8008160:	250c      	movcc	r5, #12
 8008162:	2d00      	cmp	r5, #0
 8008164:	4606      	mov	r6, r0
 8008166:	db01      	blt.n	800816c <_malloc_r+0x1c>
 8008168:	42a9      	cmp	r1, r5
 800816a:	d904      	bls.n	8008176 <_malloc_r+0x26>
 800816c:	230c      	movs	r3, #12
 800816e:	6033      	str	r3, [r6, #0]
 8008170:	2000      	movs	r0, #0
 8008172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800824c <_malloc_r+0xfc>
 800817a:	f000 f869 	bl	8008250 <__malloc_lock>
 800817e:	f8d8 3000 	ldr.w	r3, [r8]
 8008182:	461c      	mov	r4, r3
 8008184:	bb44      	cbnz	r4, 80081d8 <_malloc_r+0x88>
 8008186:	4629      	mov	r1, r5
 8008188:	4630      	mov	r0, r6
 800818a:	f7ff ffbf 	bl	800810c <sbrk_aligned>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	4604      	mov	r4, r0
 8008192:	d158      	bne.n	8008246 <_malloc_r+0xf6>
 8008194:	f8d8 4000 	ldr.w	r4, [r8]
 8008198:	4627      	mov	r7, r4
 800819a:	2f00      	cmp	r7, #0
 800819c:	d143      	bne.n	8008226 <_malloc_r+0xd6>
 800819e:	2c00      	cmp	r4, #0
 80081a0:	d04b      	beq.n	800823a <_malloc_r+0xea>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	4639      	mov	r1, r7
 80081a6:	4630      	mov	r0, r6
 80081a8:	eb04 0903 	add.w	r9, r4, r3
 80081ac:	f000 fb5c 	bl	8008868 <_sbrk_r>
 80081b0:	4581      	cmp	r9, r0
 80081b2:	d142      	bne.n	800823a <_malloc_r+0xea>
 80081b4:	6821      	ldr	r1, [r4, #0]
 80081b6:	1a6d      	subs	r5, r5, r1
 80081b8:	4629      	mov	r1, r5
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ffa6 	bl	800810c <sbrk_aligned>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d03a      	beq.n	800823a <_malloc_r+0xea>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	442b      	add	r3, r5
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	f8d8 3000 	ldr.w	r3, [r8]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	bb62      	cbnz	r2, 800822c <_malloc_r+0xdc>
 80081d2:	f8c8 7000 	str.w	r7, [r8]
 80081d6:	e00f      	b.n	80081f8 <_malloc_r+0xa8>
 80081d8:	6822      	ldr	r2, [r4, #0]
 80081da:	1b52      	subs	r2, r2, r5
 80081dc:	d420      	bmi.n	8008220 <_malloc_r+0xd0>
 80081de:	2a0b      	cmp	r2, #11
 80081e0:	d917      	bls.n	8008212 <_malloc_r+0xc2>
 80081e2:	1961      	adds	r1, r4, r5
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	6025      	str	r5, [r4, #0]
 80081e8:	bf18      	it	ne
 80081ea:	6059      	strne	r1, [r3, #4]
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	bf08      	it	eq
 80081f0:	f8c8 1000 	streq.w	r1, [r8]
 80081f4:	5162      	str	r2, [r4, r5]
 80081f6:	604b      	str	r3, [r1, #4]
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f82f 	bl	800825c <__malloc_unlock>
 80081fe:	f104 000b 	add.w	r0, r4, #11
 8008202:	1d23      	adds	r3, r4, #4
 8008204:	f020 0007 	bic.w	r0, r0, #7
 8008208:	1ac2      	subs	r2, r0, r3
 800820a:	bf1c      	itt	ne
 800820c:	1a1b      	subne	r3, r3, r0
 800820e:	50a3      	strne	r3, [r4, r2]
 8008210:	e7af      	b.n	8008172 <_malloc_r+0x22>
 8008212:	6862      	ldr	r2, [r4, #4]
 8008214:	42a3      	cmp	r3, r4
 8008216:	bf0c      	ite	eq
 8008218:	f8c8 2000 	streq.w	r2, [r8]
 800821c:	605a      	strne	r2, [r3, #4]
 800821e:	e7eb      	b.n	80081f8 <_malloc_r+0xa8>
 8008220:	4623      	mov	r3, r4
 8008222:	6864      	ldr	r4, [r4, #4]
 8008224:	e7ae      	b.n	8008184 <_malloc_r+0x34>
 8008226:	463c      	mov	r4, r7
 8008228:	687f      	ldr	r7, [r7, #4]
 800822a:	e7b6      	b.n	800819a <_malloc_r+0x4a>
 800822c:	461a      	mov	r2, r3
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	42a3      	cmp	r3, r4
 8008232:	d1fb      	bne.n	800822c <_malloc_r+0xdc>
 8008234:	2300      	movs	r3, #0
 8008236:	6053      	str	r3, [r2, #4]
 8008238:	e7de      	b.n	80081f8 <_malloc_r+0xa8>
 800823a:	230c      	movs	r3, #12
 800823c:	6033      	str	r3, [r6, #0]
 800823e:	4630      	mov	r0, r6
 8008240:	f000 f80c 	bl	800825c <__malloc_unlock>
 8008244:	e794      	b.n	8008170 <_malloc_r+0x20>
 8008246:	6005      	str	r5, [r0, #0]
 8008248:	e7d6      	b.n	80081f8 <_malloc_r+0xa8>
 800824a:	bf00      	nop
 800824c:	2000b018 	.word	0x2000b018

08008250 <__malloc_lock>:
 8008250:	4801      	ldr	r0, [pc, #4]	@ (8008258 <__malloc_lock+0x8>)
 8008252:	f7ff bf01 	b.w	8008058 <__retarget_lock_acquire_recursive>
 8008256:	bf00      	nop
 8008258:	2000b010 	.word	0x2000b010

0800825c <__malloc_unlock>:
 800825c:	4801      	ldr	r0, [pc, #4]	@ (8008264 <__malloc_unlock+0x8>)
 800825e:	f7ff befc 	b.w	800805a <__retarget_lock_release_recursive>
 8008262:	bf00      	nop
 8008264:	2000b010 	.word	0x2000b010

08008268 <__ssputs_r>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	688e      	ldr	r6, [r1, #8]
 800826e:	461f      	mov	r7, r3
 8008270:	42be      	cmp	r6, r7
 8008272:	680b      	ldr	r3, [r1, #0]
 8008274:	4682      	mov	sl, r0
 8008276:	460c      	mov	r4, r1
 8008278:	4690      	mov	r8, r2
 800827a:	d82d      	bhi.n	80082d8 <__ssputs_r+0x70>
 800827c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008280:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008284:	d026      	beq.n	80082d4 <__ssputs_r+0x6c>
 8008286:	6965      	ldr	r5, [r4, #20]
 8008288:	6909      	ldr	r1, [r1, #16]
 800828a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800828e:	eba3 0901 	sub.w	r9, r3, r1
 8008292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008296:	1c7b      	adds	r3, r7, #1
 8008298:	444b      	add	r3, r9
 800829a:	106d      	asrs	r5, r5, #1
 800829c:	429d      	cmp	r5, r3
 800829e:	bf38      	it	cc
 80082a0:	461d      	movcc	r5, r3
 80082a2:	0553      	lsls	r3, r2, #21
 80082a4:	d527      	bpl.n	80082f6 <__ssputs_r+0x8e>
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7ff ff52 	bl	8008150 <_malloc_r>
 80082ac:	4606      	mov	r6, r0
 80082ae:	b360      	cbz	r0, 800830a <__ssputs_r+0xa2>
 80082b0:	6921      	ldr	r1, [r4, #16]
 80082b2:	464a      	mov	r2, r9
 80082b4:	f7ff fed2 	bl	800805c <memcpy>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	6126      	str	r6, [r4, #16]
 80082c6:	6165      	str	r5, [r4, #20]
 80082c8:	444e      	add	r6, r9
 80082ca:	eba5 0509 	sub.w	r5, r5, r9
 80082ce:	6026      	str	r6, [r4, #0]
 80082d0:	60a5      	str	r5, [r4, #8]
 80082d2:	463e      	mov	r6, r7
 80082d4:	42be      	cmp	r6, r7
 80082d6:	d900      	bls.n	80082da <__ssputs_r+0x72>
 80082d8:	463e      	mov	r6, r7
 80082da:	6820      	ldr	r0, [r4, #0]
 80082dc:	4632      	mov	r2, r6
 80082de:	4641      	mov	r1, r8
 80082e0:	f000 faa8 	bl	8008834 <memmove>
 80082e4:	68a3      	ldr	r3, [r4, #8]
 80082e6:	1b9b      	subs	r3, r3, r6
 80082e8:	60a3      	str	r3, [r4, #8]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	4433      	add	r3, r6
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	2000      	movs	r0, #0
 80082f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f6:	462a      	mov	r2, r5
 80082f8:	f000 fac6 	bl	8008888 <_realloc_r>
 80082fc:	4606      	mov	r6, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	d1e0      	bne.n	80082c4 <__ssputs_r+0x5c>
 8008302:	6921      	ldr	r1, [r4, #16]
 8008304:	4650      	mov	r0, sl
 8008306:	f7ff feb7 	bl	8008078 <_free_r>
 800830a:	230c      	movs	r3, #12
 800830c:	f8ca 3000 	str.w	r3, [sl]
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	e7e9      	b.n	80082f2 <__ssputs_r+0x8a>
	...

08008320 <_svfiprintf_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4698      	mov	r8, r3
 8008326:	898b      	ldrh	r3, [r1, #12]
 8008328:	061b      	lsls	r3, r3, #24
 800832a:	b09d      	sub	sp, #116	@ 0x74
 800832c:	4607      	mov	r7, r0
 800832e:	460d      	mov	r5, r1
 8008330:	4614      	mov	r4, r2
 8008332:	d510      	bpl.n	8008356 <_svfiprintf_r+0x36>
 8008334:	690b      	ldr	r3, [r1, #16]
 8008336:	b973      	cbnz	r3, 8008356 <_svfiprintf_r+0x36>
 8008338:	2140      	movs	r1, #64	@ 0x40
 800833a:	f7ff ff09 	bl	8008150 <_malloc_r>
 800833e:	6028      	str	r0, [r5, #0]
 8008340:	6128      	str	r0, [r5, #16]
 8008342:	b930      	cbnz	r0, 8008352 <_svfiprintf_r+0x32>
 8008344:	230c      	movs	r3, #12
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	b01d      	add	sp, #116	@ 0x74
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	2340      	movs	r3, #64	@ 0x40
 8008354:	616b      	str	r3, [r5, #20]
 8008356:	2300      	movs	r3, #0
 8008358:	9309      	str	r3, [sp, #36]	@ 0x24
 800835a:	2320      	movs	r3, #32
 800835c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008360:	f8cd 800c 	str.w	r8, [sp, #12]
 8008364:	2330      	movs	r3, #48	@ 0x30
 8008366:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008504 <_svfiprintf_r+0x1e4>
 800836a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800836e:	f04f 0901 	mov.w	r9, #1
 8008372:	4623      	mov	r3, r4
 8008374:	469a      	mov	sl, r3
 8008376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837a:	b10a      	cbz	r2, 8008380 <_svfiprintf_r+0x60>
 800837c:	2a25      	cmp	r2, #37	@ 0x25
 800837e:	d1f9      	bne.n	8008374 <_svfiprintf_r+0x54>
 8008380:	ebba 0b04 	subs.w	fp, sl, r4
 8008384:	d00b      	beq.n	800839e <_svfiprintf_r+0x7e>
 8008386:	465b      	mov	r3, fp
 8008388:	4622      	mov	r2, r4
 800838a:	4629      	mov	r1, r5
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff ff6b 	bl	8008268 <__ssputs_r>
 8008392:	3001      	adds	r0, #1
 8008394:	f000 80a7 	beq.w	80084e6 <_svfiprintf_r+0x1c6>
 8008398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800839a:	445a      	add	r2, fp
 800839c:	9209      	str	r2, [sp, #36]	@ 0x24
 800839e:	f89a 3000 	ldrb.w	r3, [sl]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 809f 	beq.w	80084e6 <_svfiprintf_r+0x1c6>
 80083a8:	2300      	movs	r3, #0
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295
 80083ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b2:	f10a 0a01 	add.w	sl, sl, #1
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	9307      	str	r3, [sp, #28]
 80083ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083be:	931a      	str	r3, [sp, #104]	@ 0x68
 80083c0:	4654      	mov	r4, sl
 80083c2:	2205      	movs	r2, #5
 80083c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c8:	484e      	ldr	r0, [pc, #312]	@ (8008504 <_svfiprintf_r+0x1e4>)
 80083ca:	f7f7 ff01 	bl	80001d0 <memchr>
 80083ce:	9a04      	ldr	r2, [sp, #16]
 80083d0:	b9d8      	cbnz	r0, 800840a <_svfiprintf_r+0xea>
 80083d2:	06d0      	lsls	r0, r2, #27
 80083d4:	bf44      	itt	mi
 80083d6:	2320      	movmi	r3, #32
 80083d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083dc:	0711      	lsls	r1, r2, #28
 80083de:	bf44      	itt	mi
 80083e0:	232b      	movmi	r3, #43	@ 0x2b
 80083e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ec:	d015      	beq.n	800841a <_svfiprintf_r+0xfa>
 80083ee:	9a07      	ldr	r2, [sp, #28]
 80083f0:	4654      	mov	r4, sl
 80083f2:	2000      	movs	r0, #0
 80083f4:	f04f 0c0a 	mov.w	ip, #10
 80083f8:	4621      	mov	r1, r4
 80083fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fe:	3b30      	subs	r3, #48	@ 0x30
 8008400:	2b09      	cmp	r3, #9
 8008402:	d94b      	bls.n	800849c <_svfiprintf_r+0x17c>
 8008404:	b1b0      	cbz	r0, 8008434 <_svfiprintf_r+0x114>
 8008406:	9207      	str	r2, [sp, #28]
 8008408:	e014      	b.n	8008434 <_svfiprintf_r+0x114>
 800840a:	eba0 0308 	sub.w	r3, r0, r8
 800840e:	fa09 f303 	lsl.w	r3, r9, r3
 8008412:	4313      	orrs	r3, r2
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	46a2      	mov	sl, r4
 8008418:	e7d2      	b.n	80083c0 <_svfiprintf_r+0xa0>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	1d19      	adds	r1, r3, #4
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	9103      	str	r1, [sp, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	bfbb      	ittet	lt
 8008426:	425b      	neglt	r3, r3
 8008428:	f042 0202 	orrlt.w	r2, r2, #2
 800842c:	9307      	strge	r3, [sp, #28]
 800842e:	9307      	strlt	r3, [sp, #28]
 8008430:	bfb8      	it	lt
 8008432:	9204      	strlt	r2, [sp, #16]
 8008434:	7823      	ldrb	r3, [r4, #0]
 8008436:	2b2e      	cmp	r3, #46	@ 0x2e
 8008438:	d10a      	bne.n	8008450 <_svfiprintf_r+0x130>
 800843a:	7863      	ldrb	r3, [r4, #1]
 800843c:	2b2a      	cmp	r3, #42	@ 0x2a
 800843e:	d132      	bne.n	80084a6 <_svfiprintf_r+0x186>
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	9203      	str	r2, [sp, #12]
 8008448:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800844c:	3402      	adds	r4, #2
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008514 <_svfiprintf_r+0x1f4>
 8008454:	7821      	ldrb	r1, [r4, #0]
 8008456:	2203      	movs	r2, #3
 8008458:	4650      	mov	r0, sl
 800845a:	f7f7 feb9 	bl	80001d0 <memchr>
 800845e:	b138      	cbz	r0, 8008470 <_svfiprintf_r+0x150>
 8008460:	9b04      	ldr	r3, [sp, #16]
 8008462:	eba0 000a 	sub.w	r0, r0, sl
 8008466:	2240      	movs	r2, #64	@ 0x40
 8008468:	4082      	lsls	r2, r0
 800846a:	4313      	orrs	r3, r2
 800846c:	3401      	adds	r4, #1
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008474:	4824      	ldr	r0, [pc, #144]	@ (8008508 <_svfiprintf_r+0x1e8>)
 8008476:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800847a:	2206      	movs	r2, #6
 800847c:	f7f7 fea8 	bl	80001d0 <memchr>
 8008480:	2800      	cmp	r0, #0
 8008482:	d036      	beq.n	80084f2 <_svfiprintf_r+0x1d2>
 8008484:	4b21      	ldr	r3, [pc, #132]	@ (800850c <_svfiprintf_r+0x1ec>)
 8008486:	bb1b      	cbnz	r3, 80084d0 <_svfiprintf_r+0x1b0>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	3307      	adds	r3, #7
 800848c:	f023 0307 	bic.w	r3, r3, #7
 8008490:	3308      	adds	r3, #8
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008496:	4433      	add	r3, r6
 8008498:	9309      	str	r3, [sp, #36]	@ 0x24
 800849a:	e76a      	b.n	8008372 <_svfiprintf_r+0x52>
 800849c:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a0:	460c      	mov	r4, r1
 80084a2:	2001      	movs	r0, #1
 80084a4:	e7a8      	b.n	80083f8 <_svfiprintf_r+0xd8>
 80084a6:	2300      	movs	r3, #0
 80084a8:	3401      	adds	r4, #1
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	4619      	mov	r1, r3
 80084ae:	f04f 0c0a 	mov.w	ip, #10
 80084b2:	4620      	mov	r0, r4
 80084b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b8:	3a30      	subs	r2, #48	@ 0x30
 80084ba:	2a09      	cmp	r2, #9
 80084bc:	d903      	bls.n	80084c6 <_svfiprintf_r+0x1a6>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0c6      	beq.n	8008450 <_svfiprintf_r+0x130>
 80084c2:	9105      	str	r1, [sp, #20]
 80084c4:	e7c4      	b.n	8008450 <_svfiprintf_r+0x130>
 80084c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ca:	4604      	mov	r4, r0
 80084cc:	2301      	movs	r3, #1
 80084ce:	e7f0      	b.n	80084b2 <_svfiprintf_r+0x192>
 80084d0:	ab03      	add	r3, sp, #12
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	462a      	mov	r2, r5
 80084d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008510 <_svfiprintf_r+0x1f0>)
 80084d8:	a904      	add	r1, sp, #16
 80084da:	4638      	mov	r0, r7
 80084dc:	f3af 8000 	nop.w
 80084e0:	1c42      	adds	r2, r0, #1
 80084e2:	4606      	mov	r6, r0
 80084e4:	d1d6      	bne.n	8008494 <_svfiprintf_r+0x174>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	065b      	lsls	r3, r3, #25
 80084ea:	f53f af2d 	bmi.w	8008348 <_svfiprintf_r+0x28>
 80084ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084f0:	e72c      	b.n	800834c <_svfiprintf_r+0x2c>
 80084f2:	ab03      	add	r3, sp, #12
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	462a      	mov	r2, r5
 80084f8:	4b05      	ldr	r3, [pc, #20]	@ (8008510 <_svfiprintf_r+0x1f0>)
 80084fa:	a904      	add	r1, sp, #16
 80084fc:	4638      	mov	r0, r7
 80084fe:	f000 f879 	bl	80085f4 <_printf_i>
 8008502:	e7ed      	b.n	80084e0 <_svfiprintf_r+0x1c0>
 8008504:	08011e5c 	.word	0x08011e5c
 8008508:	08011e66 	.word	0x08011e66
 800850c:	00000000 	.word	0x00000000
 8008510:	08008269 	.word	0x08008269
 8008514:	08011e62 	.word	0x08011e62

08008518 <_printf_common>:
 8008518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	4616      	mov	r6, r2
 800851e:	4698      	mov	r8, r3
 8008520:	688a      	ldr	r2, [r1, #8]
 8008522:	690b      	ldr	r3, [r1, #16]
 8008524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008528:	4293      	cmp	r3, r2
 800852a:	bfb8      	it	lt
 800852c:	4613      	movlt	r3, r2
 800852e:	6033      	str	r3, [r6, #0]
 8008530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008534:	4607      	mov	r7, r0
 8008536:	460c      	mov	r4, r1
 8008538:	b10a      	cbz	r2, 800853e <_printf_common+0x26>
 800853a:	3301      	adds	r3, #1
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	0699      	lsls	r1, r3, #26
 8008542:	bf42      	ittt	mi
 8008544:	6833      	ldrmi	r3, [r6, #0]
 8008546:	3302      	addmi	r3, #2
 8008548:	6033      	strmi	r3, [r6, #0]
 800854a:	6825      	ldr	r5, [r4, #0]
 800854c:	f015 0506 	ands.w	r5, r5, #6
 8008550:	d106      	bne.n	8008560 <_printf_common+0x48>
 8008552:	f104 0a19 	add.w	sl, r4, #25
 8008556:	68e3      	ldr	r3, [r4, #12]
 8008558:	6832      	ldr	r2, [r6, #0]
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	42ab      	cmp	r3, r5
 800855e:	dc26      	bgt.n	80085ae <_printf_common+0x96>
 8008560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008564:	6822      	ldr	r2, [r4, #0]
 8008566:	3b00      	subs	r3, #0
 8008568:	bf18      	it	ne
 800856a:	2301      	movne	r3, #1
 800856c:	0692      	lsls	r2, r2, #26
 800856e:	d42b      	bmi.n	80085c8 <_printf_common+0xb0>
 8008570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008574:	4641      	mov	r1, r8
 8008576:	4638      	mov	r0, r7
 8008578:	47c8      	blx	r9
 800857a:	3001      	adds	r0, #1
 800857c:	d01e      	beq.n	80085bc <_printf_common+0xa4>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	6922      	ldr	r2, [r4, #16]
 8008582:	f003 0306 	and.w	r3, r3, #6
 8008586:	2b04      	cmp	r3, #4
 8008588:	bf02      	ittt	eq
 800858a:	68e5      	ldreq	r5, [r4, #12]
 800858c:	6833      	ldreq	r3, [r6, #0]
 800858e:	1aed      	subeq	r5, r5, r3
 8008590:	68a3      	ldr	r3, [r4, #8]
 8008592:	bf0c      	ite	eq
 8008594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008598:	2500      	movne	r5, #0
 800859a:	4293      	cmp	r3, r2
 800859c:	bfc4      	itt	gt
 800859e:	1a9b      	subgt	r3, r3, r2
 80085a0:	18ed      	addgt	r5, r5, r3
 80085a2:	2600      	movs	r6, #0
 80085a4:	341a      	adds	r4, #26
 80085a6:	42b5      	cmp	r5, r6
 80085a8:	d11a      	bne.n	80085e0 <_printf_common+0xc8>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e008      	b.n	80085c0 <_printf_common+0xa8>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4652      	mov	r2, sl
 80085b2:	4641      	mov	r1, r8
 80085b4:	4638      	mov	r0, r7
 80085b6:	47c8      	blx	r9
 80085b8:	3001      	adds	r0, #1
 80085ba:	d103      	bne.n	80085c4 <_printf_common+0xac>
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c4:	3501      	adds	r5, #1
 80085c6:	e7c6      	b.n	8008556 <_printf_common+0x3e>
 80085c8:	18e1      	adds	r1, r4, r3
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	2030      	movs	r0, #48	@ 0x30
 80085ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085d2:	4422      	add	r2, r4
 80085d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085dc:	3302      	adds	r3, #2
 80085de:	e7c7      	b.n	8008570 <_printf_common+0x58>
 80085e0:	2301      	movs	r3, #1
 80085e2:	4622      	mov	r2, r4
 80085e4:	4641      	mov	r1, r8
 80085e6:	4638      	mov	r0, r7
 80085e8:	47c8      	blx	r9
 80085ea:	3001      	adds	r0, #1
 80085ec:	d0e6      	beq.n	80085bc <_printf_common+0xa4>
 80085ee:	3601      	adds	r6, #1
 80085f0:	e7d9      	b.n	80085a6 <_printf_common+0x8e>
	...

080085f4 <_printf_i>:
 80085f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	7e0f      	ldrb	r7, [r1, #24]
 80085fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085fc:	2f78      	cmp	r7, #120	@ 0x78
 80085fe:	4691      	mov	r9, r2
 8008600:	4680      	mov	r8, r0
 8008602:	460c      	mov	r4, r1
 8008604:	469a      	mov	sl, r3
 8008606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800860a:	d807      	bhi.n	800861c <_printf_i+0x28>
 800860c:	2f62      	cmp	r7, #98	@ 0x62
 800860e:	d80a      	bhi.n	8008626 <_printf_i+0x32>
 8008610:	2f00      	cmp	r7, #0
 8008612:	f000 80d2 	beq.w	80087ba <_printf_i+0x1c6>
 8008616:	2f58      	cmp	r7, #88	@ 0x58
 8008618:	f000 80b9 	beq.w	800878e <_printf_i+0x19a>
 800861c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008624:	e03a      	b.n	800869c <_printf_i+0xa8>
 8008626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800862a:	2b15      	cmp	r3, #21
 800862c:	d8f6      	bhi.n	800861c <_printf_i+0x28>
 800862e:	a101      	add	r1, pc, #4	@ (adr r1, 8008634 <_printf_i+0x40>)
 8008630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008634:	0800868d 	.word	0x0800868d
 8008638:	080086a1 	.word	0x080086a1
 800863c:	0800861d 	.word	0x0800861d
 8008640:	0800861d 	.word	0x0800861d
 8008644:	0800861d 	.word	0x0800861d
 8008648:	0800861d 	.word	0x0800861d
 800864c:	080086a1 	.word	0x080086a1
 8008650:	0800861d 	.word	0x0800861d
 8008654:	0800861d 	.word	0x0800861d
 8008658:	0800861d 	.word	0x0800861d
 800865c:	0800861d 	.word	0x0800861d
 8008660:	080087a1 	.word	0x080087a1
 8008664:	080086cb 	.word	0x080086cb
 8008668:	0800875b 	.word	0x0800875b
 800866c:	0800861d 	.word	0x0800861d
 8008670:	0800861d 	.word	0x0800861d
 8008674:	080087c3 	.word	0x080087c3
 8008678:	0800861d 	.word	0x0800861d
 800867c:	080086cb 	.word	0x080086cb
 8008680:	0800861d 	.word	0x0800861d
 8008684:	0800861d 	.word	0x0800861d
 8008688:	08008763 	.word	0x08008763
 800868c:	6833      	ldr	r3, [r6, #0]
 800868e:	1d1a      	adds	r2, r3, #4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6032      	str	r2, [r6, #0]
 8008694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800869c:	2301      	movs	r3, #1
 800869e:	e09d      	b.n	80087dc <_printf_i+0x1e8>
 80086a0:	6833      	ldr	r3, [r6, #0]
 80086a2:	6820      	ldr	r0, [r4, #0]
 80086a4:	1d19      	adds	r1, r3, #4
 80086a6:	6031      	str	r1, [r6, #0]
 80086a8:	0606      	lsls	r6, r0, #24
 80086aa:	d501      	bpl.n	80086b0 <_printf_i+0xbc>
 80086ac:	681d      	ldr	r5, [r3, #0]
 80086ae:	e003      	b.n	80086b8 <_printf_i+0xc4>
 80086b0:	0645      	lsls	r5, r0, #25
 80086b2:	d5fb      	bpl.n	80086ac <_printf_i+0xb8>
 80086b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086b8:	2d00      	cmp	r5, #0
 80086ba:	da03      	bge.n	80086c4 <_printf_i+0xd0>
 80086bc:	232d      	movs	r3, #45	@ 0x2d
 80086be:	426d      	negs	r5, r5
 80086c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086c4:	4859      	ldr	r0, [pc, #356]	@ (800882c <_printf_i+0x238>)
 80086c6:	230a      	movs	r3, #10
 80086c8:	e011      	b.n	80086ee <_printf_i+0xfa>
 80086ca:	6821      	ldr	r1, [r4, #0]
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	0608      	lsls	r0, r1, #24
 80086d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80086d4:	d402      	bmi.n	80086dc <_printf_i+0xe8>
 80086d6:	0649      	lsls	r1, r1, #25
 80086d8:	bf48      	it	mi
 80086da:	b2ad      	uxthmi	r5, r5
 80086dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80086de:	4853      	ldr	r0, [pc, #332]	@ (800882c <_printf_i+0x238>)
 80086e0:	6033      	str	r3, [r6, #0]
 80086e2:	bf14      	ite	ne
 80086e4:	230a      	movne	r3, #10
 80086e6:	2308      	moveq	r3, #8
 80086e8:	2100      	movs	r1, #0
 80086ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086ee:	6866      	ldr	r6, [r4, #4]
 80086f0:	60a6      	str	r6, [r4, #8]
 80086f2:	2e00      	cmp	r6, #0
 80086f4:	bfa2      	ittt	ge
 80086f6:	6821      	ldrge	r1, [r4, #0]
 80086f8:	f021 0104 	bicge.w	r1, r1, #4
 80086fc:	6021      	strge	r1, [r4, #0]
 80086fe:	b90d      	cbnz	r5, 8008704 <_printf_i+0x110>
 8008700:	2e00      	cmp	r6, #0
 8008702:	d04b      	beq.n	800879c <_printf_i+0x1a8>
 8008704:	4616      	mov	r6, r2
 8008706:	fbb5 f1f3 	udiv	r1, r5, r3
 800870a:	fb03 5711 	mls	r7, r3, r1, r5
 800870e:	5dc7      	ldrb	r7, [r0, r7]
 8008710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008714:	462f      	mov	r7, r5
 8008716:	42bb      	cmp	r3, r7
 8008718:	460d      	mov	r5, r1
 800871a:	d9f4      	bls.n	8008706 <_printf_i+0x112>
 800871c:	2b08      	cmp	r3, #8
 800871e:	d10b      	bne.n	8008738 <_printf_i+0x144>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	07df      	lsls	r7, r3, #31
 8008724:	d508      	bpl.n	8008738 <_printf_i+0x144>
 8008726:	6923      	ldr	r3, [r4, #16]
 8008728:	6861      	ldr	r1, [r4, #4]
 800872a:	4299      	cmp	r1, r3
 800872c:	bfde      	ittt	le
 800872e:	2330      	movle	r3, #48	@ 0x30
 8008730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008738:	1b92      	subs	r2, r2, r6
 800873a:	6122      	str	r2, [r4, #16]
 800873c:	f8cd a000 	str.w	sl, [sp]
 8008740:	464b      	mov	r3, r9
 8008742:	aa03      	add	r2, sp, #12
 8008744:	4621      	mov	r1, r4
 8008746:	4640      	mov	r0, r8
 8008748:	f7ff fee6 	bl	8008518 <_printf_common>
 800874c:	3001      	adds	r0, #1
 800874e:	d14a      	bne.n	80087e6 <_printf_i+0x1f2>
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	b004      	add	sp, #16
 8008756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	f043 0320 	orr.w	r3, r3, #32
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	4833      	ldr	r0, [pc, #204]	@ (8008830 <_printf_i+0x23c>)
 8008764:	2778      	movs	r7, #120	@ 0x78
 8008766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	6831      	ldr	r1, [r6, #0]
 800876e:	061f      	lsls	r7, r3, #24
 8008770:	f851 5b04 	ldr.w	r5, [r1], #4
 8008774:	d402      	bmi.n	800877c <_printf_i+0x188>
 8008776:	065f      	lsls	r7, r3, #25
 8008778:	bf48      	it	mi
 800877a:	b2ad      	uxthmi	r5, r5
 800877c:	6031      	str	r1, [r6, #0]
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	bf44      	itt	mi
 8008782:	f043 0320 	orrmi.w	r3, r3, #32
 8008786:	6023      	strmi	r3, [r4, #0]
 8008788:	b11d      	cbz	r5, 8008792 <_printf_i+0x19e>
 800878a:	2310      	movs	r3, #16
 800878c:	e7ac      	b.n	80086e8 <_printf_i+0xf4>
 800878e:	4827      	ldr	r0, [pc, #156]	@ (800882c <_printf_i+0x238>)
 8008790:	e7e9      	b.n	8008766 <_printf_i+0x172>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	f023 0320 	bic.w	r3, r3, #32
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	e7f6      	b.n	800878a <_printf_i+0x196>
 800879c:	4616      	mov	r6, r2
 800879e:	e7bd      	b.n	800871c <_printf_i+0x128>
 80087a0:	6833      	ldr	r3, [r6, #0]
 80087a2:	6825      	ldr	r5, [r4, #0]
 80087a4:	6961      	ldr	r1, [r4, #20]
 80087a6:	1d18      	adds	r0, r3, #4
 80087a8:	6030      	str	r0, [r6, #0]
 80087aa:	062e      	lsls	r6, r5, #24
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	d501      	bpl.n	80087b4 <_printf_i+0x1c0>
 80087b0:	6019      	str	r1, [r3, #0]
 80087b2:	e002      	b.n	80087ba <_printf_i+0x1c6>
 80087b4:	0668      	lsls	r0, r5, #25
 80087b6:	d5fb      	bpl.n	80087b0 <_printf_i+0x1bc>
 80087b8:	8019      	strh	r1, [r3, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	4616      	mov	r6, r2
 80087c0:	e7bc      	b.n	800873c <_printf_i+0x148>
 80087c2:	6833      	ldr	r3, [r6, #0]
 80087c4:	1d1a      	adds	r2, r3, #4
 80087c6:	6032      	str	r2, [r6, #0]
 80087c8:	681e      	ldr	r6, [r3, #0]
 80087ca:	6862      	ldr	r2, [r4, #4]
 80087cc:	2100      	movs	r1, #0
 80087ce:	4630      	mov	r0, r6
 80087d0:	f7f7 fcfe 	bl	80001d0 <memchr>
 80087d4:	b108      	cbz	r0, 80087da <_printf_i+0x1e6>
 80087d6:	1b80      	subs	r0, r0, r6
 80087d8:	6060      	str	r0, [r4, #4]
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	2300      	movs	r3, #0
 80087e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087e4:	e7aa      	b.n	800873c <_printf_i+0x148>
 80087e6:	6923      	ldr	r3, [r4, #16]
 80087e8:	4632      	mov	r2, r6
 80087ea:	4649      	mov	r1, r9
 80087ec:	4640      	mov	r0, r8
 80087ee:	47d0      	blx	sl
 80087f0:	3001      	adds	r0, #1
 80087f2:	d0ad      	beq.n	8008750 <_printf_i+0x15c>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	079b      	lsls	r3, r3, #30
 80087f8:	d413      	bmi.n	8008822 <_printf_i+0x22e>
 80087fa:	68e0      	ldr	r0, [r4, #12]
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	4298      	cmp	r0, r3
 8008800:	bfb8      	it	lt
 8008802:	4618      	movlt	r0, r3
 8008804:	e7a6      	b.n	8008754 <_printf_i+0x160>
 8008806:	2301      	movs	r3, #1
 8008808:	4632      	mov	r2, r6
 800880a:	4649      	mov	r1, r9
 800880c:	4640      	mov	r0, r8
 800880e:	47d0      	blx	sl
 8008810:	3001      	adds	r0, #1
 8008812:	d09d      	beq.n	8008750 <_printf_i+0x15c>
 8008814:	3501      	adds	r5, #1
 8008816:	68e3      	ldr	r3, [r4, #12]
 8008818:	9903      	ldr	r1, [sp, #12]
 800881a:	1a5b      	subs	r3, r3, r1
 800881c:	42ab      	cmp	r3, r5
 800881e:	dcf2      	bgt.n	8008806 <_printf_i+0x212>
 8008820:	e7eb      	b.n	80087fa <_printf_i+0x206>
 8008822:	2500      	movs	r5, #0
 8008824:	f104 0619 	add.w	r6, r4, #25
 8008828:	e7f5      	b.n	8008816 <_printf_i+0x222>
 800882a:	bf00      	nop
 800882c:	08011e6d 	.word	0x08011e6d
 8008830:	08011e7e 	.word	0x08011e7e

08008834 <memmove>:
 8008834:	4288      	cmp	r0, r1
 8008836:	b510      	push	{r4, lr}
 8008838:	eb01 0402 	add.w	r4, r1, r2
 800883c:	d902      	bls.n	8008844 <memmove+0x10>
 800883e:	4284      	cmp	r4, r0
 8008840:	4623      	mov	r3, r4
 8008842:	d807      	bhi.n	8008854 <memmove+0x20>
 8008844:	1e43      	subs	r3, r0, #1
 8008846:	42a1      	cmp	r1, r4
 8008848:	d008      	beq.n	800885c <memmove+0x28>
 800884a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800884e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008852:	e7f8      	b.n	8008846 <memmove+0x12>
 8008854:	4402      	add	r2, r0
 8008856:	4601      	mov	r1, r0
 8008858:	428a      	cmp	r2, r1
 800885a:	d100      	bne.n	800885e <memmove+0x2a>
 800885c:	bd10      	pop	{r4, pc}
 800885e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008862:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008866:	e7f7      	b.n	8008858 <memmove+0x24>

08008868 <_sbrk_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d06      	ldr	r5, [pc, #24]	@ (8008884 <_sbrk_r+0x1c>)
 800886c:	2300      	movs	r3, #0
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f7f9 fbb6 	bl	8001fe4 <_sbrk>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_sbrk_r+0x1a>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_sbrk_r+0x1a>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	2000b00c 	.word	0x2000b00c

08008888 <_realloc_r>:
 8008888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888c:	4680      	mov	r8, r0
 800888e:	4615      	mov	r5, r2
 8008890:	460c      	mov	r4, r1
 8008892:	b921      	cbnz	r1, 800889e <_realloc_r+0x16>
 8008894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008898:	4611      	mov	r1, r2
 800889a:	f7ff bc59 	b.w	8008150 <_malloc_r>
 800889e:	b92a      	cbnz	r2, 80088ac <_realloc_r+0x24>
 80088a0:	f7ff fbea 	bl	8008078 <_free_r>
 80088a4:	2400      	movs	r4, #0
 80088a6:	4620      	mov	r0, r4
 80088a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ac:	f000 f81a 	bl	80088e4 <_malloc_usable_size_r>
 80088b0:	4285      	cmp	r5, r0
 80088b2:	4606      	mov	r6, r0
 80088b4:	d802      	bhi.n	80088bc <_realloc_r+0x34>
 80088b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088ba:	d8f4      	bhi.n	80088a6 <_realloc_r+0x1e>
 80088bc:	4629      	mov	r1, r5
 80088be:	4640      	mov	r0, r8
 80088c0:	f7ff fc46 	bl	8008150 <_malloc_r>
 80088c4:	4607      	mov	r7, r0
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d0ec      	beq.n	80088a4 <_realloc_r+0x1c>
 80088ca:	42b5      	cmp	r5, r6
 80088cc:	462a      	mov	r2, r5
 80088ce:	4621      	mov	r1, r4
 80088d0:	bf28      	it	cs
 80088d2:	4632      	movcs	r2, r6
 80088d4:	f7ff fbc2 	bl	800805c <memcpy>
 80088d8:	4621      	mov	r1, r4
 80088da:	4640      	mov	r0, r8
 80088dc:	f7ff fbcc 	bl	8008078 <_free_r>
 80088e0:	463c      	mov	r4, r7
 80088e2:	e7e0      	b.n	80088a6 <_realloc_r+0x1e>

080088e4 <_malloc_usable_size_r>:
 80088e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e8:	1f18      	subs	r0, r3, #4
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfbc      	itt	lt
 80088ee:	580b      	ldrlt	r3, [r1, r0]
 80088f0:	18c0      	addlt	r0, r0, r3
 80088f2:	4770      	bx	lr

080088f4 <_init>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	bf00      	nop
 80088f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fa:	bc08      	pop	{r3}
 80088fc:	469e      	mov	lr, r3
 80088fe:	4770      	bx	lr

08008900 <_fini>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr
