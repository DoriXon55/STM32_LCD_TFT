
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ac0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009698  08008c50  08008c50  00009c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122e8  080122e8  00014264  2**0
                  CONTENTS
  4 .ARM          00000008  080122e8  080122e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122f0  080122f0  00014264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122f0  080122f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122f4  080122f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  080122f8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae34  20000264  0801255c  00014264  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  2000b098  0801255c  00015098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f9c  00000000  00000000  00014294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003604  00000000  00000000  00027230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb8  00000000  00000000  0002b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289cc  00000000  00000000  0002c368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016588  00000000  00000000  00054d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec239  00000000  00000000  0006b2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001574f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000433c  00000000  00000000  00157538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015b874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c38 	.word	0x08008c38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	08008c38 	.word	0x08008c38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000280 	.word	0x20000280

080005c8 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <USART_getchar+0x44>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <USART_getchar+0x44>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d00f      	beq.n	80005fa <USART_getchar+0x32>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <USART_getchar+0x44>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <USART_getchar+0x48>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) & rxRingBuffer.mask;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <USART_getchar+0x44>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <USART_getchar+0x44>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4013      	ands	r3, r2
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <USART_getchar+0x44>)
 80005f2:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f8:	e001      	b.n	80005fe <USART_getchar+0x36>
    }
    return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000280 	.word	0x20000280
 8000610:	20000aa0 	.word	0x20000aa0

08000614 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 8000628:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <USART_sendFrame+0xd8>)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	4413      	add	r3, r2
 800062e:	227e      	movs	r2, #126	@ 0x7e
 8000630:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	461a      	mov	r2, r3
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <USART_sendFrame+0xd4>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4013      	ands	r3, r2
 800063e:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e012      	b.n	800066c <USART_sendFrame+0x58>
        USART_TxBuf[idx] = data[i];
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <USART_sendFrame+0xd8>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) & txRingBuffer.mask;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	461a      	mov	r2, r3
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	4013      	ands	r3, r2
 8000664:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3e8      	bcc.n	8000646 <USART_sendFrame+0x32>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 8000674:	4a1d      	ldr	r2, [pc, #116]	@ (80006ec <USART_sendFrame+0xd8>)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	2260      	movs	r2, #96	@ 0x60
 800067c:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	461a      	mov	r2, r3
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4013      	ands	r3, r2
 800068a:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <USART_sendFrame+0xd4>)
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	d11e      	bne.n	80006d6 <USART_sendFrame+0xc2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <USART_sendFrame+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006a2:	2b80      	cmp	r3, #128	@ 0x80
 80006a4:	d117      	bne.n	80006d6 <USART_sendFrame+0xc2>
        txRingBuffer.writeIndex = idx;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006aa:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4a0e      	ldr	r2, [pc, #56]	@ (80006ec <USART_sendFrame+0xd8>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4013      	ands	r3, r2
 80006c2:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006c4:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <USART_sendFrame+0xdc>)
 80006d0:	f004 ff28 	bl	8005524 <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006d4:	e002      	b.n	80006dc <USART_sendFrame+0xc8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006da:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006dc:	b662      	cpsie	i
}
 80006de:	bf00      	nop
    }

    __enable_irq();
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000290 	.word	0x20000290
 80006ec:	200002a0 	.word	0x200002a0
 80006f0:	2000aec4 	.word	0x2000aec4

080006f4 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 8000700:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000704:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	e019      	b.n	8000740 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 8000716:	8bfb      	ldrh	r3, [r7, #30]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	4053      	eors	r3, r2
 8000722:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 8000724:	8bfb      	ldrh	r3, [r7, #30]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	490f      	ldr	r1, [pc, #60]	@ (800076c <calculateCrc16+0x78>)
 800072e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4053      	eors	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3301      	adds	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3e1      	bcc.n	800070c <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 8000748:	8bfb      	ldrh	r3, [r7, #30]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	8bfa      	ldrh	r2, [r7, #30]
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	3724      	adds	r7, #36	@ 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <debugCRCCalculation>:
void debugCRCCalculation(uint8_t *data, size_t length) {
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b0a5      	sub	sp, #148	@ 0x94
 8000774:	af04      	add	r7, sp, #16
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800077a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800077e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    USART_sendFrame((uint8_t*)"CRC Calculation:\r\n", 17);
 8000782:	2111      	movs	r1, #17
 8000784:	484c      	ldr	r0, [pc, #304]	@ (80008b8 <debugCRCCalculation+0x148>)
 8000786:	f7ff ff45 	bl	8000614 <USART_sendFrame>

    char buf[100];
    int idx;

    // Pokaż dane wejściowe
    idx = sprintf(buf, "Input data: ");
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	494b      	ldr	r1, [pc, #300]	@ (80008bc <debugCRCCalculation+0x14c>)
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fe01 	bl	8008398 <siprintf>
 8000796:	67b8      	str	r0, [r7, #120]	@ 0x78
    for(size_t i = 0; i < length; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	@ 0x74
 800079c:	e012      	b.n	80007c4 <debugCRCCalculation+0x54>
        idx += sprintf(buf + idx, "%02X ", data[i]);
 800079e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007a0:	f107 0208 	add.w	r2, r7, #8
 80007a4:	18d0      	adds	r0, r2, r3
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4943      	ldr	r1, [pc, #268]	@ (80008c0 <debugCRCCalculation+0x150>)
 80007b2:	f007 fdf1 	bl	8008398 <siprintf>
 80007b6:	4602      	mov	r2, r0
 80007b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007ba:	4413      	add	r3, r2
 80007bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    for(size_t i = 0; i < length; i++) {
 80007be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007c0:	3301      	adds	r3, #1
 80007c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80007c4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d3e8      	bcc.n	800079e <debugCRCCalculation+0x2e>
    }
    sprintf(buf + idx, "\r\n");
 80007cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	4413      	add	r3, r2
 80007d4:	493b      	ldr	r1, [pc, #236]	@ (80008c4 <debugCRCCalculation+0x154>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fdde 	bl	8008398 <siprintf>
    USART_sendFrame((uint8_t*)buf, strlen(buf));
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcf5 	bl	80001d0 <strlen>
 80007e6:	4602      	mov	r2, r0
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff10 	bl	8000614 <USART_sendFrame>

    // Pokaż proces
    for (size_t i = 0; i < length; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80007f8:	e03d      	b.n	8000876 <debugCRCCalculation+0x106>
        uint8_t byte = data[i];
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        uint8_t table_index = (crc >> 8) ^ byte;
 8000806:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	b2da      	uxtb	r2, r3
 8000810:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000814:	4053      	eors	r3, r2
 8000816:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        uint16_t old_crc = crc;
 800081a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800081e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        crc = (crc << 8) ^ crc16_table[table_index];
 8000822:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21a      	sxth	r2, r3
 800082a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800082e:	4926      	ldr	r1, [pc, #152]	@ (80008c8 <debugCRCCalculation+0x158>)
 8000830:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4053      	eors	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

        idx = sprintf(buf, "Step %zu: byte=%02X, index=%02X, old_crc=%04X, new_crc=%04X\r\n",
 800083e:	f897 406f 	ldrb.w	r4, [r7, #111]	@ 0x6f
 8000842:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000846:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800084a:	f8b7 107e 	ldrh.w	r1, [r7, #126]	@ 0x7e
 800084e:	f107 0008 	add.w	r0, r7, #8
 8000852:	9102      	str	r1, [sp, #8]
 8000854:	9201      	str	r2, [sp, #4]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4623      	mov	r3, r4
 800085a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800085c:	491b      	ldr	r1, [pc, #108]	@ (80008cc <debugCRCCalculation+0x15c>)
 800085e:	f007 fd9b 	bl	8008398 <siprintf>
 8000862:	67b8      	str	r0, [r7, #120]	@ 0x78
                     i, byte, table_index, old_crc, crc);
        USART_sendFrame((uint8_t*)buf, idx);
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fed2 	bl	8000614 <USART_sendFrame>
    for (size_t i = 0; i < length; i++) {
 8000870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000872:	3301      	adds	r3, #1
 8000874:	673b      	str	r3, [r7, #112]	@ 0x70
 8000876:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3bd      	bcc.n	80007fa <debugCRCCalculation+0x8a>
    }

    // Pokaż wynik końcowy
    sprintf(buf, "Final CRC: %02X %02X\r\n", (crc >> 8) & 0xFF, crc & 0xFF);
 800087e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f107 0008 	add.w	r0, r7, #8
 8000892:	490f      	ldr	r1, [pc, #60]	@ (80008d0 <debugCRCCalculation+0x160>)
 8000894:	f007 fd80 	bl	8008398 <siprintf>
    USART_sendFrame((uint8_t*)buf, strlen(buf));
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fc97 	bl	80001d0 <strlen>
 80008a2:	4602      	mov	r2, r0
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff feb2 	bl	8000614 <USART_sendFrame>
}
 80008b0:	bf00      	nop
 80008b2:	3784      	adds	r7, #132	@ 0x84
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	08008c50 	.word	0x08008c50
 80008bc:	08008c64 	.word	0x08008c64
 80008c0:	08008c74 	.word	0x08008c74
 80008c4:	08008c7c 	.word	0x08008c7c
 80008c8:	20000000 	.word	0x20000000
 80008cc:	08008c80 	.word	0x08008c80
 80008d0:	08008cc0 	.word	0x08008cc0

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_DMA_Init+0x38>)
 80008dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <MX_DMA_Init+0x38>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_DMA_Init+0x38>)
 80008e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	200f      	movs	r0, #15
 80008f8:	f002 f82d 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008fc:	200f      	movs	r0, #15
 80008fe:	f002 f846 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <debugData>:
int bx_index = 0;
bool in_frame = false;
uint8_t received_char;
Frame frame;
ScrollingTextState text = {0};
static void debugData(const char* message, uint8_t *data, size_t len) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b0c8      	sub	sp, #288	@ 0x120
 8000914:	af00      	add	r7, sp, #0
 8000916:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800091a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800091e:	6018      	str	r0, [r3, #0]
 8000920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000924:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000928:	6019      	str	r1, [r3, #0]
 800092a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800092e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000932:	601a      	str	r2, [r3, #0]
    // Bufor na wiadomość debugową (zakładając maksymalną długość)
    uint8_t debug_buffer[256];
    uint8_t hex_str[4];  // Bufor na pojedynczą wartość hex
    int idx = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    // Kopiuj wiadomość
    while (*message) {
 800093a:	e015      	b.n	8000968 <debugData+0x58>
        debug_buffer[idx++] = *message++;
 800093c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000940:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800094a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800094e:	1c51      	adds	r1, r2, #1
 8000950:	6019      	str	r1, [r3, #0]
 8000952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000956:	1c59      	adds	r1, r3, #1
 8000958:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 800095c:	7811      	ldrb	r1, [r2, #0]
 800095e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000962:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000966:	54d1      	strb	r1, [r2, r3]
    while (*message) {
 8000968:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800096c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1e1      	bne.n	800093c <debugData+0x2c>
    }

    debug_buffer[idx++] = ':';
 8000978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000982:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000986:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800098a:	213a      	movs	r1, #58	@ 0x3a
 800098c:	54d1      	strb	r1, [r2, r3]
    debug_buffer[idx++] = ' ';
 800098e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000998:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800099c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009a0:	2120      	movs	r1, #32
 80009a2:	54d1      	strb	r1, [r2, r3]

    // Konwertuj każdy bajt na hex string
    for(size_t i = 0; i < len; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80009aa:	e03d      	b.n	8000a28 <debugData+0x118>
        // Konwersja na hex (np. 0xFF -> "FF ")
        sprintf((char*)hex_str, "%02X ", data[i]);
 80009ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	492e      	ldr	r1, [pc, #184]	@ (8000a80 <debugData+0x170>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 fce6 	bl	8008398 <siprintf>
        debug_buffer[idx++] = hex_str[0];
 80009cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80009d6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009da:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009de:	7811      	ldrb	r1, [r2, #0]
 80009e0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009e4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009e8:	54d1      	strb	r1, [r2, r3]
        debug_buffer[idx++] = hex_str[1];
 80009ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80009f4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009fc:	7851      	ldrb	r1, [r2, #1]
 80009fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a02:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a06:	54d1      	strb	r1, [r2, r3]
        debug_buffer[idx++] = ' ';
 8000a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a12:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a16:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	54d1      	strb	r1, [r2, r3]
    for(size_t i = 0; i < len; i++) {
 8000a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000a22:	3301      	adds	r3, #1
 8000a24:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000a28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000a30:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d3b8      	bcc.n	80009ac <debugData+0x9c>
    }

    debug_buffer[idx++] = '\r';
 8000a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a44:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a48:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a4c:	210d      	movs	r1, #13
 8000a4e:	54d1      	strb	r1, [r2, r3]
    debug_buffer[idx++] = '\n';
 8000a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a5a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a5e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a62:	210a      	movs	r1, #10
 8000a64:	54d1      	strb	r1, [r2, r3]

    // Wyślij przez UART
    USART_sendFrame(debug_buffer, idx);
 8000a66:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fdcf 	bl	8000614 <USART_sendFrame>
}
 8000a76:	bf00      	nop
 8000a78:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08008d14 	.word	0x08008d14

08000a84 <stopAnimation>:
static void stopAnimation(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <stopAnimation+0x18>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000d34 	.word	0x20000d34

08000aa0 <copyToBuffer>:

static void copyToBuffer(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	if (!lcdIsBusy()) {
 8000aa4:	f001 fa38 	bl	8001f18 <lcdIsBusy>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <copyToBuffer+0x18>
		lcdCopy();
 8000ab4:	f001 f998 	bl	8001de8 <lcdCopy>
	}
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <safeCompare>:
static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <safeCompare+0x18>
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <safeCompare+0x1c>
	{
		return false;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e00a      	b.n	8000aee <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f007 fcb5 	bl	800844c <memcmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <parseColor+0x16>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <parseColor+0x1a>
        return false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e026      	b.n	8000b60 <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e01f      	b.n	8000b58 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 8000b18:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <parseColor+0x70>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb55 	bl	80001d0 <strlen>
 8000b26:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000b28:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <parseColor+0x70>)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4619      	mov	r1, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ffc1 	bl	8000abc <safeCompare>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <parseColor+0x5a>
            *color = color_map[i].value;
 8000b40:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <parseColor+0x70>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	889a      	ldrh	r2, [r3, #4]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	801a      	strh	r2, [r3, #0]
            return true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e006      	b.n	8000b60 <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d9dc      	bls.n	8000b18 <parseColor+0x20>
        }
    }
    return false;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08008e30 	.word	0x08008e30

08000b6c <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
    in_frame = false;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <resetFrameState+0x20>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <resetFrameState+0x24>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <resetFrameState+0x28>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	20000ca8 	.word	0x20000ca8
 8000b90:	20000ca0 	.word	0x20000ca0
 8000b94:	20000ca4 	.word	0x20000ca4

08000b98 <debugData.0>:
    const char* fmt_ptr = format;
    uint8_t token[51];
    size_t token_idx = 0;

    // Debug helper
    void debugData(const char* msg, const uint8_t* data, size_t len) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a0      	sub	sp, #128	@ 0x80
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	f8c7 c000 	str.w	ip, [r7]
        uint8_t buf[100];
        int idx = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (*msg) buf[idx++] = *msg++;
 8000bac:	e00a      	b.n	8000bc4 <debugData.0+0x2c>
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	1c53      	adds	r3, r2, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bb6:	1c59      	adds	r1, r3, #1
 8000bb8:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	3380      	adds	r3, #128	@ 0x80
 8000bbe:	443b      	add	r3, r7
 8000bc0:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f0      	bne.n	8000bae <debugData.0+0x16>
        buf[idx++] = ':';
 8000bcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000bd2:	3380      	adds	r3, #128	@ 0x80
 8000bd4:	443b      	add	r3, r7
 8000bd6:	223a      	movs	r2, #58	@ 0x3a
 8000bd8:	f803 2c6c 	strb.w	r2, [r3, #-108]
        buf[idx++] = ' ';
 8000bdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000be2:	3380      	adds	r3, #128	@ 0x80
 8000be4:	443b      	add	r3, r7
 8000be6:	2220      	movs	r2, #32
 8000be8:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (size_t i = 0; i < len; i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000bf0:	e00d      	b.n	8000c0e <debugData.0+0x76>
            buf[idx++] = data[i];
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000bf6:	441a      	add	r2, r3
 8000bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bfa:	1c59      	adds	r1, r3, #1
 8000bfc:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	3380      	adds	r3, #128	@ 0x80
 8000c02:	443b      	add	r3, r7
 8000c04:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (size_t i = 0; i < len; i++) {
 8000c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000c0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3ed      	bcc.n	8000bf2 <debugData.0+0x5a>
        }
        buf[idx++] = '\r';
 8000c16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000c1c:	3380      	adds	r3, #128	@ 0x80
 8000c1e:	443b      	add	r3, r7
 8000c20:	220d      	movs	r2, #13
 8000c22:	f803 2c6c 	strb.w	r2, [r3, #-108]
        buf[idx++] = '\n';
 8000c26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000c2c:	3380      	adds	r3, #128	@ 0x80
 8000c2e:	443b      	add	r3, r7
 8000c30:	220a      	movs	r2, #10
 8000c32:	f803 2c6c 	strb.w	r2, [r3, #-108]
        USART_sendFrame(buf, idx);
 8000c36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fce8 	bl	8000614 <USART_sendFrame>
    }
 8000c44:	bf00      	nop
 8000c46:	3780      	adds	r7, #128	@ 0x80
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <parseParameters>:
bool parseParameters(const uint8_t* data, const char* format, ...) {
 8000c4c:	b40e      	push	{r1, r2, r3}
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b09d      	sub	sp, #116	@ 0x74
 8000c52:	af02      	add	r7, sp, #8
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c5a:	60fb      	str	r3, [r7, #12]
    if (!data || !format) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <parseParameters+0x1c>
 8000c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <parseParameters+0x20>
        return false;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e0e0      	b.n	8000e2e <parseParameters+0x1e2>
    va_start(args, format);
 8000c6c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c70:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint8_t* data_ptr = data;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	667b      	str	r3, [r7, #100]	@ 0x64
    const char* fmt_ptr = format;
 8000c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c78:	663b      	str	r3, [r7, #96]	@ 0x60
    size_t token_idx = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Store scrollSpeed for text length validation
    uint8_t scrollSpeed = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    bool hasScrollSpeed = false;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

    while (*fmt_ptr) {
 8000c8a:	e0ca      	b.n	8000e22 <parseParameters+0x1d6>
        switch (*fmt_ptr) {
 8000c8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b75      	cmp	r3, #117	@ 0x75
 8000c92:	d007      	beq.n	8000ca4 <parseParameters+0x58>
 8000c94:	2b75      	cmp	r3, #117	@ 0x75
 8000c96:	f300 80bf 	bgt.w	8000e18 <parseParameters+0x1cc>
 8000c9a:	2b73      	cmp	r3, #115	@ 0x73
 8000c9c:	d02b      	beq.n	8000cf6 <parseParameters+0xaa>
 8000c9e:	2b74      	cmp	r3, #116	@ 0x74
 8000ca0:	d06d      	beq.n	8000d7e <parseParameters+0x132>
 8000ca2:	e0b9      	b.n	8000e18 <parseParameters+0x1cc>
            case 'u': {
                uint8_t* value_ptr = va_arg(args, uint8_t*);
 8000ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca6:	1d1a      	adds	r2, r3, #4
 8000ca8:	647a      	str	r2, [r7, #68]	@ 0x44
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	657b      	str	r3, [r7, #84]	@ 0x54
                *value_ptr = *data_ptr++;  // Bezpośrednio odczytaj bajt
 8000cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cb8:	701a      	strb	r2, [r3, #0]

                // Store scrollSpeed for later validation
                if (!hasScrollSpeed) {
 8000cba:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8000cbe:	f083 0301 	eor.w	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <parseParameters+0x8a>
                    scrollSpeed = *value_ptr;
 8000cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                    hasScrollSpeed = true;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
                }

                // Jeśli następny znak to przecinek, pomiń go
                if (*data_ptr == ',') {
 8000cd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cdc:	d102      	bne.n	8000ce4 <parseParameters+0x98>
                    data_ptr++;
 8000cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	667b      	str	r3, [r7, #100]	@ 0x64
                }
                debugData("read u", value_ptr, 1);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	469c      	mov	ip, r3
 8000cea:	2201      	movs	r2, #1
 8000cec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000cee:	4853      	ldr	r0, [pc, #332]	@ (8000e3c <parseParameters+0x1f0>)
 8000cf0:	f7ff ff52 	bl	8000b98 <debugData.0>
                break;
 8000cf4:	e092      	b.n	8000e1c <parseParameters+0x1d0>
            }
            case 's': {
                // Zbierz znaki do przecinka
                token_idx = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 8000cfa:	e00a      	b.n	8000d12 <parseParameters+0xc6>
                    token[token_idx++] = *data_ptr++;
 8000cfc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000cfe:	1c53      	adds	r3, r2, #1
 8000d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d04:	1c59      	adds	r1, r3, #1
 8000d06:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	3368      	adds	r3, #104	@ 0x68
 8000d0c:	443b      	add	r3, r7
 8000d0e:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 8000d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <parseParameters+0xdc>
 8000d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d20:	d002      	beq.n	8000d28 <parseParameters+0xdc>
 8000d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d24:	2b31      	cmp	r3, #49	@ 0x31
 8000d26:	d9e9      	bls.n	8000cfc <parseParameters+0xb0>
                }
                token[token_idx] = '\0';
 8000d28:	f107 0210 	add.w	r2, r7, #16
 8000d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d2e:	4413      	add	r3, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
                if (*data_ptr == ',') data_ptr++;
 8000d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d3a:	d102      	bne.n	8000d42 <parseParameters+0xf6>
 8000d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d3e:	3301      	adds	r3, #1
 8000d40:	667b      	str	r3, [r7, #100]	@ 0x64

                Color_t* color_ptr = va_arg(args, Color_t*);
 8000d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d44:	1d1a      	adds	r2, r3, #4
 8000d46:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (!parseColor((char*)token, color_ptr)) {
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fed0 	bl	8000af8 <parseColor>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f083 0301 	eor.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <parseParameters+0x11c>
                    va_end(args);
                    return false;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e062      	b.n	8000e2e <parseParameters+0x1e2>
                }
                debugData("read color", token, token_idx);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	f107 020c 	add.w	r2, r7, #12
 8000d70:	4694      	mov	ip, r2
 8000d72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d74:	4619      	mov	r1, r3
 8000d76:	4832      	ldr	r0, [pc, #200]	@ (8000e40 <parseParameters+0x1f4>)
 8000d78:	f7ff ff0e 	bl	8000b98 <debugData.0>
                break;
 8000d7c:	e04e      	b.n	8000e1c <parseParameters+0x1d0>
            }
            case 't': {
                // Zbierz pozostały tekst
                token_idx = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (*data_ptr && token_idx < 50) {
 8000d82:	e00a      	b.n	8000d9a <parseParameters+0x14e>
                    token[token_idx++] = *data_ptr++;
 8000d84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d86:	1c53      	adds	r3, r2, #1
 8000d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d8c:	1c59      	adds	r1, r3, #1
 8000d8e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	3368      	adds	r3, #104	@ 0x68
 8000d94:	443b      	add	r3, r7
 8000d96:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && token_idx < 50) {
 8000d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <parseParameters+0x15c>
 8000da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000da4:	2b31      	cmp	r3, #49	@ 0x31
 8000da6:	d9ed      	bls.n	8000d84 <parseParameters+0x138>
                }
                token[token_idx] = '\0';
 8000da8:	f107 0210 	add.w	r2, r7, #16
 8000dac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dae:	4413      	add	r3, r2
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]

                // Sprawdź długość tekstu na podstawie scrollSpeed
                size_t maxLength = (scrollSpeed == 0) ? 25 : 50;
 8000db4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <parseParameters+0x174>
 8000dbc:	2319      	movs	r3, #25
 8000dbe:	e000      	b.n	8000dc2 <parseParameters+0x176>
 8000dc0:	2332      	movs	r3, #50	@ 0x32
 8000dc2:	653b      	str	r3, [r7, #80]	@ 0x50
                if (token_idx > maxLength) {
 8000dc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d909      	bls.n	8000de0 <parseParameters+0x194>
                    va_end(args);
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "TOO_MUCH_TEXT%s", token_idx);
 8000dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <parseParameters+0x1f8>)
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e48 <parseParameters+0x1fc>)
 8000dd4:	2167      	movs	r1, #103	@ 0x67
 8000dd6:	2068      	movs	r0, #104	@ 0x68
 8000dd8:	f000 fb0a 	bl	80013f0 <prepareFrame>
                    return false;  // Tekst jest za długi
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e026      	b.n	8000e2e <parseParameters+0x1e2>
                }

                char* text_ptr = va_arg(args, char*);
 8000de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000de2:	1d1a      	adds	r2, r3, #4
 8000de4:	647a      	str	r2, [r7, #68]	@ 0x44
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                strncpy(text_ptr, (char*)token, token_idx);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000df0:	4619      	mov	r1, r3
 8000df2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000df4:	f007 fb42 	bl	800847c <strncpy>
                text_ptr[token_idx] = '\0';
 8000df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
                debugData("read text", token, token_idx);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	f107 020c 	add.w	r2, r7, #12
 8000e0a:	4694      	mov	ip, r2
 8000e0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480e      	ldr	r0, [pc, #56]	@ (8000e4c <parseParameters+0x200>)
 8000e12:	f7ff fec1 	bl	8000b98 <debugData.0>
                break;
 8000e16:	e001      	b.n	8000e1c <parseParameters+0x1d0>
            }
            default:
                va_end(args);
                return false;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e008      	b.n	8000e2e <parseParameters+0x1e2>
        }
        fmt_ptr++;
 8000e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e1e:	3301      	adds	r3, #1
 8000e20:	663b      	str	r3, [r7, #96]	@ 0x60
    while (*fmt_ptr) {
 8000e22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f47f af30 	bne.w	8000c8c <parseParameters+0x40>
    }

    va_end(args);
    return true;
 8000e2c:	2301      	movs	r3, #1
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	376c      	adds	r7, #108	@ 0x6c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e38:	b003      	add	sp, #12
 8000e3a:	4770      	bx	lr
 8000e3c:	08008d1c 	.word	0x08008d1c
 8000e40:	08008d24 	.word	0x08008d24
 8000e44:	08008d30 	.word	0x08008d30
 8000e48:	08008d40 	.word	0x08008d40
 8000e4c:	08008d44 	.word	0x08008d44

08000e50 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00d      	beq.n	8000e7a <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3305      	adds	r3, #5
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f007 fb00 	bl	800846c <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	2203      	movs	r2, #3
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 faf9 	bl	800846c <memset>
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af04      	add	r7, sp, #16
 8000e8a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	2300      	movs	r3, #0
 8000e92:	73bb      	strb	r3, [r7, #14]
 8000e94:	2300      	movs	r3, #0
 8000e96:	737b      	strb	r3, [r7, #13]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	1d58      	adds	r0, r3, #5
 8000ea4:	f107 010e 	add.w	r1, r7, #14
 8000ea8:	f107 020f 	add.w	r2, r7, #15
 8000eac:	f107 030a 	add.w	r3, r7, #10
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	f107 030d 	add.w	r3, r7, #13
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4917      	ldr	r1, [pc, #92]	@ (8000f20 <executeONK+0x9c>)
 8000ec2:	f7ff fec3 	bl	8000c4c <parseParameters>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3305      	adds	r3, #5
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <executeONK+0xa0>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <executeONK+0xa4>)
 8000edc:	2167      	movs	r1, #103	@ 0x67
 8000ede:	2068      	movs	r0, #104	@ 0x68
 8000ee0:	f000 fa86 	bl	80013f0 <prepareFrame>
 8000ee4:	e019      	b.n	8000f1a <executeONK+0x96>
        return;
    }
	switch(filling)
 8000ee6:	7b3b      	ldrb	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <executeONK+0x6e>
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d00a      	beq.n	8000f06 <executeONK+0x82>
 8000ef0:	e013      	b.n	8000f1a <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	b218      	sxth	r0, r3
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	b219      	sxth	r1, r3
 8000efa:	7b7b      	ldrb	r3, [r7, #13]
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	897b      	ldrh	r3, [r7, #10]
 8000f00:	f006 fd52 	bl	80079a8 <hagl_draw_circle>
		break;
 8000f04:	e009      	b.n	8000f1a <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	b218      	sxth	r0, r3
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	b219      	sxth	r1, r3
 8000f0e:	7b7b      	ldrb	r3, [r7, #13]
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	897b      	ldrh	r3, [r7, #10]
 8000f14:	f006 fe77 	bl	8007c06 <hagl_fill_circle>
		break;
 8000f18:	bf00      	nop
	}
}
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	08008d50 	.word	0x08008d50
 8000f24:	08008d58 	.word	0x08008d58
 8000f28:	08008d40 	.word	0x08008d40

08000f2c <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af04      	add	r7, sp, #16
 8000f32:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73bb      	strb	r3, [r7, #14]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	737b      	strb	r3, [r7, #13]
 8000f40:	2300      	movs	r3, #0
 8000f42:	733b      	strb	r3, [r7, #12]
 8000f44:	2300      	movs	r3, #0
 8000f46:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1d58      	adds	r0, r3, #5
 8000f50:	f107 010e 	add.w	r1, r7, #14
 8000f54:	f107 020f 	add.w	r2, r7, #15
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	9303      	str	r3, [sp, #12]
 8000f5e:	f107 030b 	add.w	r3, r7, #11
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 030d 	add.w	r3, r7, #13
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	460b      	mov	r3, r1
 8000f72:	491c      	ldr	r1, [pc, #112]	@ (8000fe4 <executeONP+0xb8>)
 8000f74:	f7ff fe6a 	bl	8000c4c <parseParameters>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3305      	adds	r3, #5
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <executeONP+0xbc>)
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <executeONP+0xc0>)
 8000f8e:	2167      	movs	r1, #103	@ 0x67
 8000f90:	2068      	movs	r0, #104	@ 0x68
 8000f92:	f000 fa2d 	bl	80013f0 <prepareFrame>
 8000f96:	e021      	b.n	8000fdc <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <executeONP+0x78>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d00e      	beq.n	8000fc0 <executeONP+0x94>
 8000fa2:	e01b      	b.n	8000fdc <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	b218      	sxth	r0, r3
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	b219      	sxth	r1, r3
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	b21c      	sxth	r4, r3
 8000fb4:	893b      	ldrh	r3, [r7, #8]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4623      	mov	r3, r4
 8000fba:	f006 fa45 	bl	8007448 <hagl_draw_rectangle>
		break;
 8000fbe:	e00d      	b.n	8000fdc <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	b218      	sxth	r0, r3
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	b219      	sxth	r1, r3
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	b21c      	sxth	r4, r3
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	f006 fabd 	bl	8007554 <hagl_fill_rectangle>
		break;
 8000fda:	bf00      	nop
	}
}
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08008d6c 	.word	0x08008d6c
 8000fe8:	08008d58 	.word	0x08008d58
 8000fec:	08008d40 	.word	0x08008d40

08000ff0 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	b08d      	sub	sp, #52	@ 0x34
 8000ff4:	af06      	add	r7, sp, #24
 8000ff6:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75bb      	strb	r3, [r7, #22]
 8001000:	2300      	movs	r3, #0
 8001002:	757b      	strb	r3, [r7, #21]
 8001004:	2300      	movs	r3, #0
 8001006:	753b      	strb	r3, [r7, #20]
 8001008:	2300      	movs	r3, #0
 800100a:	74fb      	strb	r3, [r7, #19]
 800100c:	2300      	movs	r3, #0
 800100e:	74bb      	strb	r3, [r7, #18]
 8001010:	2300      	movs	r3, #0
 8001012:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1d58      	adds	r0, r3, #5
 800101c:	f107 0116 	add.w	r1, r7, #22
 8001020:	f107 0217 	add.w	r2, r7, #23
 8001024:	f107 030e 	add.w	r3, r7, #14
 8001028:	9305      	str	r3, [sp, #20]
 800102a:	f107 0311 	add.w	r3, r7, #17
 800102e:	9304      	str	r3, [sp, #16]
 8001030:	f107 0312 	add.w	r3, r7, #18
 8001034:	9303      	str	r3, [sp, #12]
 8001036:	f107 0313 	add.w	r3, r7, #19
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 0315 	add.w	r3, r7, #21
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	460b      	mov	r3, r1
 800104a:	4924      	ldr	r1, [pc, #144]	@ (80010dc <executeONT+0xec>)
 800104c:	f7ff fdfe 	bl	8000c4c <parseParameters>
 8001050:	4603      	mov	r3, r0
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d009      	beq.n	8001070 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3305      	adds	r3, #5
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <executeONT+0xf0>)
 8001064:	4a1f      	ldr	r2, [pc, #124]	@ (80010e4 <executeONT+0xf4>)
 8001066:	2167      	movs	r1, #103	@ 0x67
 8001068:	2068      	movs	r0, #104	@ 0x68
 800106a:	f000 f9c1 	bl	80013f0 <prepareFrame>
 800106e:	e031      	b.n	80010d4 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8001070:	7c7b      	ldrb	r3, [r7, #17]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <executeONT+0x8c>
 8001076:	2b01      	cmp	r3, #1
 8001078:	d016      	beq.n	80010a8 <executeONT+0xb8>
 800107a:	e02b      	b.n	80010d4 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	b218      	sxth	r0, r3
 8001080:	7dbb      	ldrb	r3, [r7, #22]
 8001082:	b21c      	sxth	r4, r3
 8001084:	7d7b      	ldrb	r3, [r7, #21]
 8001086:	b21d      	sxth	r5, r3
 8001088:	7d3b      	ldrb	r3, [r7, #20]
 800108a:	b21e      	sxth	r6, r3
 800108c:	7cfb      	ldrb	r3, [r7, #19]
 800108e:	b21b      	sxth	r3, r3
 8001090:	7cba      	ldrb	r2, [r7, #18]
 8001092:	b212      	sxth	r2, r2
 8001094:	89f9      	ldrh	r1, [r7, #14]
 8001096:	9102      	str	r1, [sp, #8]
 8001098:	9201      	str	r2, [sp, #4]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4633      	mov	r3, r6
 800109e:	462a      	mov	r2, r5
 80010a0:	4621      	mov	r1, r4
 80010a2:	f007 f83b 	bl	800811c <hagl_draw_triangle>
            break;
 80010a6:	e015      	b.n	80010d4 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	b218      	sxth	r0, r3
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	b21c      	sxth	r4, r3
 80010b0:	7d7b      	ldrb	r3, [r7, #21]
 80010b2:	b21d      	sxth	r5, r3
 80010b4:	7d3b      	ldrb	r3, [r7, #20]
 80010b6:	b21e      	sxth	r6, r3
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	7cba      	ldrb	r2, [r7, #18]
 80010be:	b212      	sxth	r2, r2
 80010c0:	89f9      	ldrh	r1, [r7, #14]
 80010c2:	9102      	str	r1, [sp, #8]
 80010c4:	9201      	str	r2, [sp, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4633      	mov	r3, r6
 80010ca:	462a      	mov	r2, r5
 80010cc:	4621      	mov	r1, r4
 80010ce:	f007 f84b 	bl	8008168 <hagl_fill_triangle>
            break;
 80010d2:	bf00      	nop
    }
}
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010da:	bf00      	nop
 80010dc:	08008d74 	.word	0x08008d74
 80010e0:	08008d58 	.word	0x08008d58
 80010e4:	08008d40 	.word	0x08008d40

080010e8 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
    const char charText[50] = {0};
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	222e      	movs	r2, #46	@ 0x2e
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f007 f9b5 	bl	800846c <memset>

    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1d58      	adds	r0, r3, #5
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <executeONN+0x158>)
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	4b4c      	ldr	r3, [pc, #304]	@ (8001244 <executeONN+0x15c>)
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	4b4c      	ldr	r3, [pc, #304]	@ (8001248 <executeONN+0x160>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4b4c      	ldr	r3, [pc, #304]	@ (800124c <executeONN+0x164>)
 800111a:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <executeONN+0x168>)
 800111c:	494d      	ldr	r1, [pc, #308]	@ (8001254 <executeONN+0x16c>)
 800111e:	f7ff fd95 	bl	8000c4c <parseParameters>
 8001122:	4603      	mov	r3, r0
 8001124:	f083 0301 	eor.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <executeONN+0x5a>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3305      	adds	r3, #5
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4b48      	ldr	r3, [pc, #288]	@ (8001258 <executeONN+0x170>)
 8001136:	4a49      	ldr	r2, [pc, #292]	@ (800125c <executeONN+0x174>)
 8001138:	2167      	movs	r1, #103	@ 0x67
 800113a:	2068      	movs	r0, #104	@ 0x68
 800113c:	f000 f958 	bl	80013f0 <prepareFrame>
 8001140:	e07b      	b.n	800123a <executeONN+0x152>
        return;
    }

    // Zapisz początkowe pozycje
    memset(text.displayText, 0, sizeof(text.displayText));
 8001142:	22c8      	movs	r2, #200	@ 0xc8
 8001144:	2100      	movs	r1, #0
 8001146:	4846      	ldr	r0, [pc, #280]	@ (8001260 <executeONN+0x178>)
 8001148:	f007 f990 	bl	800846c <memset>
    text.startX = text.x;
 800114c:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <executeONN+0x178>)
 800114e:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8001152:	4b43      	ldr	r3, [pc, #268]	@ (8001260 <executeONN+0x178>)
 8001154:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
    text.startY = text.y;
 8001158:	4b41      	ldr	r3, [pc, #260]	@ (8001260 <executeONN+0x178>)
 800115a:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 800115e:	4b40      	ldr	r3, [pc, #256]	@ (8001260 <executeONN+0x178>)
 8001160:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
    text.textLength = 0;
 8001164:	4b3e      	ldr	r3, [pc, #248]	@ (8001260 <executeONN+0x178>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    text.firstIteration = true;
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <executeONN+0x178>)
 800116e:	2201      	movs	r2, #1
 8001170:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8001174:	e015      	b.n	80011a2 <executeONN+0xba>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 8001176:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <executeONN+0x178>)
 8001178:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800117c:	3340      	adds	r3, #64	@ 0x40
 800117e:	443b      	add	r3, r7
 8001180:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <executeONN+0x178>)
 8001186:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800118a:	461a      	mov	r2, r3
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <executeONN+0x178>)
 800118e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 8001192:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <executeONN+0x178>)
 8001194:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <executeONN+0x178>)
 800119e:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    while (charText[text.textLength] && text.textLength < 50) {
 80011a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <executeONN+0x178>)
 80011a4:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80011a8:	3340      	adds	r3, #64	@ 0x40
 80011aa:	443b      	add	r3, r7
 80011ac:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <executeONN+0xd6>
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <executeONN+0x178>)
 80011b6:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80011ba:	2b31      	cmp	r3, #49	@ 0x31
 80011bc:	d9db      	bls.n	8001176 <executeONN+0x8e>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <executeONN+0x178>)
 80011c0:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf14      	ite	ne
 80011c8:	2301      	movne	r3, #1
 80011ca:	2300      	moveq	r3, #0
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <executeONN+0x178>)
 80011d0:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    text.lastUpdate = HAL_GetTick();
 80011d4:	f001 fad8 	bl	8002788 <HAL_GetTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <executeONN+0x178>)
 80011dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

    const uint8_t* font;
    switch(text.fontSize) {
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <executeONN+0x178>)
 80011e2:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d00c      	beq.n	8001204 <executeONN+0x11c>
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	dc0d      	bgt.n	800120a <executeONN+0x122>
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d002      	beq.n	80011f8 <executeONN+0x110>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d003      	beq.n	80011fe <executeONN+0x116>
 80011f6:	e008      	b.n	800120a <executeONN+0x122>
        case 1: font = font5x7; break;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <executeONN+0x17c>)
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011fc:	e007      	b.n	800120e <executeONN+0x126>
        case 2: font = font5x8; break;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <executeONN+0x180>)
 8001200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001202:	e004      	b.n	800120e <executeONN+0x126>
        case 3: font = font6x9; break;
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <executeONN+0x184>)
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001208:	e001      	b.n	800120e <executeONN+0x126>
        default: font = font5x7;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <executeONN+0x17c>)
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <executeONN+0x178>)
 8001210:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8001214:	2b00      	cmp	r3, #0
 8001216:	d110      	bne.n	800123a <executeONN+0x152>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <executeONN+0x178>)
 800121a:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800121e:	b219      	sxth	r1, r3
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <executeONN+0x178>)
 8001222:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <executeONN+0x178>)
 800122a:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 800122e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	4603      	mov	r3, r0
 8001234:	480a      	ldr	r0, [pc, #40]	@ (8001260 <executeONN+0x178>)
 8001236:	f006 fb2f 	bl	8007898 <hagl_put_text>
    }
}
 800123a:	3740      	adds	r7, #64	@ 0x40
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000e02 	.word	0x20000e02
 8001244:	20000e01 	.word	0x20000e01
 8001248:	20000e00 	.word	0x20000e00
 800124c:	20000dfd 	.word	0x20000dfd
 8001250:	20000dfc 	.word	0x20000dfc
 8001254:	08008d80 	.word	0x08008d80
 8001258:	08008d58 	.word	0x08008d58
 800125c:	08008d40 	.word	0x08008d40
 8001260:	20000d34 	.word	0x20000d34
 8001264:	08008e70 	.word	0x08008e70
 8001268:	0800c378 	.word	0x0800c378
 800126c:	0800f21c 	.word	0x0800f21c

08001270 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
* TODO naprawic wylaczenie oraz reset
************************************************************************/
static void executeOFF(Frame *frame)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	795b      	ldrb	r3, [r3, #5]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <executeOFF+0x16>
 8001280:	2b01      	cmp	r3, #1
 8001282:	d006      	beq.n	8001292 <executeOFF+0x22>
 8001284:	e008      	b.n	8001298 <executeOFF+0x28>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2102      	movs	r1, #2
 800128a:	480a      	ldr	r0, [pc, #40]	@ (80012b4 <executeOFF+0x44>)
 800128c:	f001 ffba 	bl	8003204 <HAL_GPIO_WritePin>
		break;
 8001290:	e00c      	b.n	80012ac <executeOFF+0x3c>
	case 1:
		lcdClear();
 8001292:	f000 fdd5 	bl	8001e40 <lcdClear>
		break;
 8001296:	e009      	b.n	80012ac <executeOFF+0x3c>
	default:
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "WRONG_DATA%c", frame->data[0]);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	795b      	ldrb	r3, [r3, #5]
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <executeOFF+0x48>)
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <executeOFF+0x4c>)
 80012a2:	2167      	movs	r1, #103	@ 0x67
 80012a4:	2068      	movs	r0, #104	@ 0x68
 80012a6:	f000 f8a3 	bl	80013f0 <prepareFrame>
	}
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	48000400 	.word	0x48000400
 80012b8:	08008d88 	.word	0x08008d88
 80012bc:	08008d40 	.word	0x08008d40

080012c0 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <isWithinBounds+0x26>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b9f      	cmp	r3, #159	@ 0x9f
 80012d4:	dc07      	bgt.n	80012e6 <isWithinBounds+0x26>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db04      	blt.n	80012e6 <isWithinBounds+0x26>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e0:	dc01      	bgt.n	80012e6 <isWithinBounds+0x26>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <isWithinBounds+0x28>
 80012e6:	2300      	movs	r3, #0
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const uint8_t* data, int* x, int* y)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
	 *x = data[0];  // Pierwszy bajt to x
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	601a      	str	r2, [r3, #0]
	 *y = data[2];  // Drugi bajt to y
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3302      	adds	r3, #2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
    return true;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 800132a:	b480      	push	{r7}
 800132c:	b087      	sub	sp, #28
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	e04b      	b.n	80013d8 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b7d      	cmp	r3, #125	@ 0x7d
 800134a:	d10e      	bne.n	800136a <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	617a      	str	r2, [r7, #20]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	227d      	movs	r2, #125	@ 0x7d
 8001358:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	617a      	str	r2, [r7, #20]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	225d      	movs	r2, #93	@ 0x5d
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e033      	b.n	80013d2 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b7e      	cmp	r3, #126	@ 0x7e
 8001374:	d10e      	bne.n	8001394 <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	617a      	str	r2, [r7, #20]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	227d      	movs	r2, #125	@ 0x7d
 8001382:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	617a      	str	r2, [r7, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	225e      	movs	r2, #94	@ 0x5e
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e01e      	b.n	80013d2 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b60      	cmp	r3, #96	@ 0x60
 800139e:	d10e      	bne.n	80013be <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	617a      	str	r2, [r7, #20]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	227d      	movs	r2, #125	@ 0x7d
 80013ac:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	617a      	str	r2, [r7, #20]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	2226      	movs	r2, #38	@ 0x26
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e009      	b.n	80013d2 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	441a      	add	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	1c59      	adds	r1, r3, #1
 80013c8:	6179      	str	r1, [r7, #20]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	440b      	add	r3, r1
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3301      	adds	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3af      	bcc.n	8001340 <byteStuffing+0x16>
        }
    }
    return j;
 80013e0:	697b      	ldr	r3, [r7, #20]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 80013f0:	b408      	push	{r3}
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b0b3      	sub	sp, #204	@ 0xcc
 80013f6:	af02      	add	r7, sp, #8
 80013f8:	4603      	mov	r3, r0
 80013fa:	603a      	str	r2, [r7, #0]
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	460b      	mov	r3, r1
 8001400:	71bb      	strb	r3, [r7, #6]
	Frame frame = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2285      	movs	r2, #133	@ 0x85
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f007 f82e 	bl	800846c <memset>
    frame.sender = sender;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	763b      	strb	r3, [r7, #24]
    frame.receiver = receiver;
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	767b      	strb	r3, [r7, #25]
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	3302      	adds	r3, #2
 800141e:	2203      	movs	r2, #3
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f007 f82a 	bl	800847c <strncpy>

    // Użycie dynamicznej alokacji do przechowywania danych sformatowanych
    char *formatted_data = (char *)malloc(MAX_DATA_SIZE);
 8001428:	2080      	movs	r0, #128	@ 0x80
 800142a:	f006 fec3 	bl	80081b4 <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (formatted_data == NULL) {
 8001434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80c2 	beq.w	80015c2 <prepareFrame+0x1d2>
        // Obsługa błędu alokacji pamięci
        return;
    }

    va_list args;
    va_start(args, format);
 800143e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001442:	617b      	str	r3, [r7, #20]
    vsnprintf(formatted_data, MAX_DATA_SIZE, format, args);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001450:	f006 ffee 	bl	8008430 <vsniprintf>
    va_end(args);

    size_t data_len = strlen(formatted_data);
 8001454:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001458:	f7fe feba 	bl	80001d0 <strlen>
 800145c:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    // Użycie dynamicznej alokacji do obliczeń CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 8001460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001464:	3305      	adds	r3, #5
 8001466:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint8_t *crc_input = (uint8_t *)malloc(crc_input_len);
 800146a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800146e:	f006 fea1 	bl	80081b4 <malloc>
 8001472:	4603      	mov	r3, r0
 8001474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (crc_input == NULL) {
 8001478:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <prepareFrame+0x9a>
        // Obsługa błędu alokacji pamięci
        free(formatted_data);
 8001480:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001484:	f006 fe9e 	bl	80081c4 <free>
        return;
 8001488:	e09c      	b.n	80015c4 <prepareFrame+0x1d4>
    }

    crc_input[0] = frame.sender;
 800148a:	7e3a      	ldrb	r2, [r7, #24]
 800148c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001490:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 8001492:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001496:	3301      	adds	r3, #1
 8001498:	7e7a      	ldrb	r2, [r7, #25]
 800149a:	701a      	strb	r2, [r3, #0]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 800149c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014a0:	3302      	adds	r3, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	f107 031a 	add.w	r3, r7, #26
 80014a8:	8819      	ldrh	r1, [r3, #0]
 80014aa:	789b      	ldrb	r3, [r3, #2]
 80014ac:	8011      	strh	r1, [r2, #0]
 80014ae:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, formatted_data, data_len);
 80014b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014b4:	3305      	adds	r3, #5
 80014b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80014ba:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 f82c 	bl	800851c <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	461a      	mov	r2, r3
 80014ca:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80014ce:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80014d2:	f7ff f90f 	bl	80006f4 <calculateCrc16>
    free(crc_input);  // Zwolnienie pamięci po zakończeniu używania
 80014d6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80014da:	f006 fe73 	bl	80081c4 <free>

    // Użycie dynamicznej alokacji do przechowywania ramki
    size_t raw_payload_len = 2 + COMMAND_LENGTH + data_len + 4;
 80014de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014e2:	3309      	adds	r3, #9
 80014e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint8_t *raw_payload = (uint8_t *)malloc(raw_payload_len);
 80014e8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80014ec:	f006 fe62 	bl	80081b4 <malloc>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (raw_payload == NULL) {
 80014f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d104      	bne.n	8001508 <prepareFrame+0x118>
        free(formatted_data);
 80014fe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001502:	f006 fe5f 	bl	80081c4 <free>
        return;
 8001506:	e05d      	b.n	80015c4 <prepareFrame+0x1d4>
    }

    raw_payload[0] = frame.sender;
 8001508:	7e3a      	ldrb	r2, [r7, #24]
 800150a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800150e:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 8001510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001514:	3301      	adds	r3, #1
 8001516:	7e7a      	ldrb	r2, [r7, #25]
 8001518:	701a      	strb	r2, [r3, #0]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 800151a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800151e:	3302      	adds	r3, #2
 8001520:	461a      	mov	r2, r3
 8001522:	f107 031a 	add.w	r3, r7, #26
 8001526:	8819      	ldrh	r1, [r3, #0]
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	8011      	strh	r1, [r2, #0]
 800152c:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, formatted_data, data_len);
 800152e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001532:	3305      	adds	r3, #5
 8001534:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001538:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800153c:	4618      	mov	r0, r3
 800153e:	f006 ffed 	bl	800851c <memcpy>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 8001542:	7c3b      	ldrb	r3, [r7, #16]
 8001544:	461a      	mov	r2, r3
 8001546:	7c7b      	ldrb	r3, [r7, #17]
 8001548:	f107 0008 	add.w	r0, r7, #8
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4613      	mov	r3, r2
 8001550:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <prepareFrame+0x1e0>)
 8001552:	2105      	movs	r1, #5
 8001554:	f006 feec 	bl	8008330 <sniprintf>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 8001558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800155c:	3305      	adds	r3, #5
 800155e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001562:	4413      	add	r3, r2
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	601a      	str	r2, [r3, #0]
    free(formatted_data);  // Zwolnienie pamięci po zakończeniu używania
 8001568:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800156c:	f006 fe2a 	bl	80081c4 <free>

    // Użycie dynamicznej alokacji do przechowywania danych po byte stuffing
    uint8_t *stuffed_payload = (uint8_t *)malloc(512);  // Maksymalny rozmiar bufora
 8001570:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001574:	f006 fe1e 	bl	80081b4 <malloc>
 8001578:	4603      	mov	r3, r0
 800157a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (stuffed_payload == NULL) {
 800157e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <prepareFrame+0x1a0>
        free(raw_payload);
 8001586:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800158a:	f006 fe1b 	bl	80081c4 <free>
        return;
 800158e:	e019      	b.n	80015c4 <prepareFrame+0x1d4>
    }

    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 8001590:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001594:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001598:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800159c:	f7ff fec5 	bl	800132a <byteStuffing>
 80015a0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    free(raw_payload);  // Zwolnienie pamięci po zakończeniu używania
 80015a4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80015a8:	f006 fe0c 	bl	80081c4 <free>

    // Wysyłanie ramki przez UART
    USART_sendFrame(stuffed_payload, stuffed_len);
 80015ac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80015b0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80015b4:	f7ff f82e 	bl	8000614 <USART_sendFrame>
    free(stuffed_payload);  // Zwolnienie pamięci po zakończeniu używania
 80015b8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80015bc:	f006 fe02 	bl	80081c4 <free>
 80015c0:	e000      	b.n	80015c4 <prepareFrame+0x1d4>
        return;
 80015c2:	bf00      	nop
}
 80015c4:	37c4      	adds	r7, #196	@ 0xc4
 80015c6:	46bd      	mov	sp, r7
 80015c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015cc:	b001      	add	sp, #4
 80015ce:	4770      	bx	lr
 80015d0:	08008d98 	.word	0x08008d98

080015d4 <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];

    if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d970      	bls.n	80016ca <decodeFrame+0xf6>
        uint8_t k = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]

        // Debug otrzymanych danych
        debugData("Received data", bx, len);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	4838      	ldr	r0, [pc, #224]	@ (80016d4 <decodeFrame+0x100>)
 80015f4:	f7ff f98c 	bl	8000910 <debugData>


        frame->sender = bx[k++];
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	75fa      	strb	r2, [r7, #23]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	701a      	strb	r2, [r3, #0]
        if(frame->sender != 'g')
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b67      	cmp	r3, #103	@ 0x67
 8001610:	d001      	beq.n	8001616 <decodeFrame+0x42>
        {
        	return false;
 8001612:	2300      	movs	r3, #0
 8001614:	e05a      	b.n	80016cc <decodeFrame+0xf8>
        }
        frame->receiver = bx[k++];
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	75fa      	strb	r2, [r7, #23]
 800161c:	461a      	mov	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	705a      	strb	r2, [r3, #1]

        memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c98      	adds	r0, r3, #2
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	2203      	movs	r2, #3
 8001634:	4619      	mov	r1, r3
 8001636:	f006 ff71 	bl	800851c <memcpy>
        k += COMMAND_LENGTH;
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	3303      	adds	r3, #3
 800163e:	75fb      	strb	r3, [r7, #23]

        uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3b07      	subs	r3, #7
 8001644:	75bb      	strb	r3, [r7, #22]
        memcpy(frame->data, &bx[k], data_len);
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1d58      	adds	r0, r3, #5
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	7dba      	ldrb	r2, [r7, #22]
 8001652:	4619      	mov	r1, r3
 8001654:	f006 ff62 	bl	800851c <memcpy>
        frame->data[data_len] = '\0';
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	4413      	add	r3, r2
 800165e:	2200      	movs	r2, #0
 8001660:	715a      	strb	r2, [r3, #5]
        k += data_len;
 8001662:	7dfa      	ldrb	r2, [r7, #23]
 8001664:	7dbb      	ldrb	r3, [r7, #22]
 8001666:	4413      	add	r3, r2
 8001668:	75fb      	strb	r3, [r7, #23]

        memcpy(incCrc, &bx[k], 2);
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	823b      	strh	r3, [r7, #16]
        debugCRCCalculation((uint8_t*)frame, k);
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	4619      	mov	r1, r3
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f7ff f878 	bl	8000770 <debugCRCCalculation>
        calculateCrc16((uint8_t *)frame, k, ownCrc);
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	f107 0214 	add.w	r2, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7ff f833 	bl	80006f4 <calculateCrc16>

        // Debug CRC
        debugData("Calculated CRC", ownCrc, 2);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2202      	movs	r2, #2
 8001694:	4619      	mov	r1, r3
 8001696:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <decodeFrame+0x104>)
 8001698:	f7ff f93a 	bl	8000910 <debugData>
        debugData("Received CRC", incCrc, 2);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2202      	movs	r2, #2
 80016a2:	4619      	mov	r1, r3
 80016a4:	480d      	ldr	r0, [pc, #52]	@ (80016dc <decodeFrame+0x108>)
 80016a6:	f7ff f933 	bl	8000910 <debugData>

        if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80016aa:	7d3a      	ldrb	r2, [r7, #20]
 80016ac:	7c3b      	ldrb	r3, [r7, #16]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d103      	bne.n	80016ba <decodeFrame+0xe6>
 80016b2:	7d7a      	ldrb	r2, [r7, #21]
 80016b4:	7c7b      	ldrb	r3, [r7, #17]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d005      	beq.n	80016c6 <decodeFrame+0xf2>
            USART_sendFrame((uint8_t*)"CRC mismatch\r\n", 13);
 80016ba:	210d      	movs	r1, #13
 80016bc:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <decodeFrame+0x10c>)
 80016be:	f7fe ffa9 	bl	8000614 <USART_sendFrame>
            return false;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e002      	b.n	80016cc <decodeFrame+0xf8>
        }
        return true;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <decodeFrame+0xf8>
    }
    return false;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	08008da4 	.word	0x08008da4
 80016d8:	08008db4 	.word	0x08008db4
 80016dc:	08008dc4 	.word	0x08008dc4
 80016e0:	08008dd4 	.word	0x08008dd4

080016e4 <processReceivedChar>:
* Błędy:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80016f2:	d112      	bne.n	800171a <processReceivedChar+0x36>
    	if(in_frame) {
 80016f4:	4b51      	ldr	r3, [pc, #324]	@ (800183c <processReceivedChar+0x158>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <processReceivedChar+0x22>
    		resetFrameState();
 80016fc:	f7ff fa36 	bl	8000b6c <resetFrameState>
    		in_frame = true;
 8001700:	4b4e      	ldr	r3, [pc, #312]	@ (800183c <processReceivedChar+0x158>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    	}
    	in_frame = true;
 8001706:	4b4d      	ldr	r3, [pc, #308]	@ (800183c <processReceivedChar+0x158>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
    	bx_index = 0;
 800170c:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <processReceivedChar+0x15c>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
    	escape_detected = false;
 8001712:	4b4c      	ldr	r3, [pc, #304]	@ (8001844 <processReceivedChar+0x160>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
    } else {
    	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
    	resetFrameState();
    }
   }
}
 8001718:	e08b      	b.n	8001832 <processReceivedChar+0x14e>
    } else if (received_char == FRAME_END && escape_detected == false) {
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b60      	cmp	r3, #96	@ 0x60
 800171e:	d133      	bne.n	8001788 <processReceivedChar+0xa4>
 8001720:	4b48      	ldr	r3, [pc, #288]	@ (8001844 <processReceivedChar+0x160>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d02c      	beq.n	8001788 <processReceivedChar+0xa4>
        if (in_frame) {
 800172e:	4b43      	ldr	r3, [pc, #268]	@ (800183c <processReceivedChar+0x158>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01f      	beq.n	8001776 <processReceivedChar+0x92>
            if (decodeFrame(bx, &frame, bx_index)) {
 8001736:	4b42      	ldr	r3, [pc, #264]	@ (8001840 <processReceivedChar+0x15c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	4942      	ldr	r1, [pc, #264]	@ (8001848 <processReceivedChar+0x164>)
 8001740:	4842      	ldr	r0, [pc, #264]	@ (800184c <processReceivedChar+0x168>)
 8001742:	f7ff ff47 	bl	80015d4 <decodeFrame>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00b      	beq.n	8001764 <processReceivedChar+0x80>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 800174c:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <processReceivedChar+0x16c>)
 800174e:	4a41      	ldr	r2, [pc, #260]	@ (8001854 <processReceivedChar+0x170>)
 8001750:	2167      	movs	r1, #103	@ 0x67
 8001752:	2068      	movs	r0, #104	@ 0x68
 8001754:	f7ff fe4c 	bl	80013f0 <prepareFrame>
            	stopAnimation();
 8001758:	f7ff f994 	bl	8000a84 <stopAnimation>
                handleCommand(&frame);
 800175c:	483a      	ldr	r0, [pc, #232]	@ (8001848 <processReceivedChar+0x164>)
 800175e:	f000 f87d 	bl	800185c <handleCommand>
 8001762:	e005      	b.n	8001770 <processReceivedChar+0x8c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001764:	4b3c      	ldr	r3, [pc, #240]	@ (8001858 <processReceivedChar+0x174>)
 8001766:	4a3b      	ldr	r2, [pc, #236]	@ (8001854 <processReceivedChar+0x170>)
 8001768:	2167      	movs	r1, #103	@ 0x67
 800176a:	2068      	movs	r0, #104	@ 0x68
 800176c:	f7ff fe40 	bl	80013f0 <prepareFrame>
            resetFrameState();
 8001770:	f7ff f9fc 	bl	8000b6c <resetFrameState>
        if (in_frame) {
 8001774:	e05d      	b.n	8001832 <processReceivedChar+0x14e>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001776:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <processReceivedChar+0x174>)
 8001778:	4a36      	ldr	r2, [pc, #216]	@ (8001854 <processReceivedChar+0x170>)
 800177a:	2167      	movs	r1, #103	@ 0x67
 800177c:	2068      	movs	r0, #104	@ 0x68
 800177e:	f7ff fe37 	bl	80013f0 <prepareFrame>
            resetFrameState();
 8001782:	f7ff f9f3 	bl	8000b6c <resetFrameState>
        if (in_frame) {
 8001786:	e054      	b.n	8001832 <processReceivedChar+0x14e>
    } else if (in_frame) {
 8001788:	4b2c      	ldr	r3, [pc, #176]	@ (800183c <processReceivedChar+0x158>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d050      	beq.n	8001832 <processReceivedChar+0x14e>
    	if(bx_index < MAX_FRAME_WITHOUT_STUFFING) {
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <processReceivedChar+0x15c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b86      	cmp	r3, #134	@ 0x86
 8001796:	dc43      	bgt.n	8001820 <processReceivedChar+0x13c>
        if (escape_detected) {
 8001798:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <processReceivedChar+0x160>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d02f      	beq.n	8001800 <processReceivedChar+0x11c>
            if (received_char == FRAME_START_STUFF) {
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b5e      	cmp	r3, #94	@ 0x5e
 80017a4:	d108      	bne.n	80017b8 <processReceivedChar+0xd4>
                bx[bx_index++] = FRAME_START;
 80017a6:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <processReceivedChar+0x15c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	4924      	ldr	r1, [pc, #144]	@ (8001840 <processReceivedChar+0x15c>)
 80017ae:	600a      	str	r2, [r1, #0]
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <processReceivedChar+0x168>)
 80017b2:	217e      	movs	r1, #126	@ 0x7e
 80017b4:	54d1      	strb	r1, [r2, r3]
 80017b6:	e01f      	b.n	80017f8 <processReceivedChar+0x114>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b5d      	cmp	r3, #93	@ 0x5d
 80017bc:	d108      	bne.n	80017d0 <processReceivedChar+0xec>
                bx[bx_index++] = ESCAPE_CHAR;
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <processReceivedChar+0x15c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	491e      	ldr	r1, [pc, #120]	@ (8001840 <processReceivedChar+0x15c>)
 80017c6:	600a      	str	r2, [r1, #0]
 80017c8:	4a20      	ldr	r2, [pc, #128]	@ (800184c <processReceivedChar+0x168>)
 80017ca:	217d      	movs	r1, #125	@ 0x7d
 80017cc:	54d1      	strb	r1, [r2, r3]
 80017ce:	e013      	b.n	80017f8 <processReceivedChar+0x114>
            } else if (received_char == FRAME_END_STUFF) {
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b26      	cmp	r3, #38	@ 0x26
 80017d4:	d108      	bne.n	80017e8 <processReceivedChar+0x104>
                bx[bx_index++] = FRAME_END;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <processReceivedChar+0x15c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	4918      	ldr	r1, [pc, #96]	@ (8001840 <processReceivedChar+0x15c>)
 80017de:	600a      	str	r2, [r1, #0]
 80017e0:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <processReceivedChar+0x168>)
 80017e2:	2160      	movs	r1, #96	@ 0x60
 80017e4:	54d1      	strb	r1, [r2, r3]
 80017e6:	e007      	b.n	80017f8 <processReceivedChar+0x114>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <processReceivedChar+0x174>)
 80017ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001854 <processReceivedChar+0x170>)
 80017ec:	2167      	movs	r1, #103	@ 0x67
 80017ee:	2068      	movs	r0, #104	@ 0x68
 80017f0:	f7ff fdfe 	bl	80013f0 <prepareFrame>
                resetFrameState();
 80017f4:	f7ff f9ba 	bl	8000b6c <resetFrameState>
            escape_detected = false;
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <processReceivedChar+0x160>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
}
 80017fe:	e018      	b.n	8001832 <processReceivedChar+0x14e>
        } else if (received_char == ESCAPE_CHAR) {
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b7d      	cmp	r3, #125	@ 0x7d
 8001804:	d103      	bne.n	800180e <processReceivedChar+0x12a>
            escape_detected = true;
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <processReceivedChar+0x160>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
}
 800180c:	e011      	b.n	8001832 <processReceivedChar+0x14e>
        	bx[bx_index++] = received_char;
 800180e:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <processReceivedChar+0x15c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	490a      	ldr	r1, [pc, #40]	@ (8001840 <processReceivedChar+0x15c>)
 8001816:	600a      	str	r2, [r1, #0]
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <processReceivedChar+0x168>)
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	54ca      	strb	r2, [r1, r3]
}
 800181e:	e008      	b.n	8001832 <processReceivedChar+0x14e>
    	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001820:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <processReceivedChar+0x174>)
 8001822:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <processReceivedChar+0x170>)
 8001824:	2167      	movs	r1, #103	@ 0x67
 8001826:	2068      	movs	r0, #104	@ 0x68
 8001828:	f7ff fde2 	bl	80013f0 <prepareFrame>
    	resetFrameState();
 800182c:	f7ff f99e 	bl	8000b6c <resetFrameState>
}
 8001830:	e7ff      	b.n	8001832 <processReceivedChar+0x14e>
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000ca8 	.word	0x20000ca8
 8001840:	20000ca4 	.word	0x20000ca4
 8001844:	20000ca0 	.word	0x20000ca0
 8001848:	20000cac 	.word	0x20000cac
 800184c:	20000ba0 	.word	0x20000ba0
 8001850:	08008de4 	.word	0x08008de4
 8001854:	08008d40 	.word	0x08008d40
 8001858:	08008dec 	.word	0x08008dec

0800185c <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b092      	sub	sp, #72	@ 0x48
 8001860:	af02      	add	r7, sp, #8
 8001862:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8084 	beq.w	8001974 <handleCommand+0x118>
        return;
    }

    CommandEntry commandTable[COMMAND_COUNT] = {
 800186c:	4b43      	ldr	r3, [pc, #268]	@ (800197c <handleCommand+0x120>)
 800186e:	f107 0414 	add.w	r4, r7, #20
 8001872:	461d      	mov	r5, r3
 8001874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001880:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };

    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001888:	e067      	b.n	800195a <handleCommand+0xfe>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	1c98      	adds	r0, r3, #2
 800188e:	f107 0214 	add.w	r2, r7, #20
 8001892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	2203      	movs	r2, #3
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f90e 	bl	8000abc <safeCompare>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d056      	beq.n	8001954 <handleCommand+0xf8>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 80018a6:	f107 0214 	add.w	r2, r7, #20
 80018aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	2203      	movs	r2, #3
 80018b2:	4933      	ldr	r1, [pc, #204]	@ (8001980 <handleCommand+0x124>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff f901 	bl	8000abc <safeCompare>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00f      	beq.n	80018e0 <handleCommand+0x84>
                    lcdClear();
 80018c0:	f000 fabe 	bl	8001e40 <lcdClear>
                    commandTable[i].function(frame);
 80018c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	3340      	adds	r3, #64	@ 0x40
 80018ca:	443b      	add	r3, r7
 80018cc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
                    copyToBuffer();
 80018d4:	f7ff f8e4 	bl	8000aa0 <copyToBuffer>
                    clearFrame(frame);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fab9 	bl	8000e50 <clearFrame>
                    return;
 80018de:	e04a      	b.n	8001976 <handleCommand+0x11a>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3305      	adds	r3, #5
 80018e4:	f107 020c 	add.w	r2, r7, #12
 80018e8:	f107 0110 	add.w	r1, r7, #16
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fd04 	bl	80012fa <parseCoordinates>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01f      	beq.n	8001938 <handleCommand+0xdc>
                    if (isWithinBounds(x, y)) {
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fcde 	bl	80012c0 <isWithinBounds>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00f      	beq.n	800192a <handleCommand+0xce>
                        lcdClear();
 800190a:	f000 fa99 	bl	8001e40 <lcdClear>
                        commandTable[i].function(frame);
 800190e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	3340      	adds	r3, #64	@ 0x40
 8001914:	443b      	add	r3, r7
 8001916:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
                        copyToBuffer();
 800191e:	f7ff f8bf 	bl	8000aa0 <copyToBuffer>
                        clearFrame(frame);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fa94 	bl	8000e50 <clearFrame>
                        return;
 8001928:	e025      	b.n	8001976 <handleCommand+0x11a>
                    } else {
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <handleCommand+0x128>)
 800192c:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <handleCommand+0x12c>)
 800192e:	2167      	movs	r1, #103	@ 0x67
 8001930:	2068      	movs	r0, #104	@ 0x68
 8001932:	f7ff fd5d 	bl	80013f0 <prepareFrame>
                    return;
 8001936:	e01e      	b.n	8001976 <handleCommand+0x11a>
                }
            } else {
            	lcdClear();
 8001938:	f000 fa82 	bl	8001e40 <lcdClear>
            	copyToBuffer();
 800193c:	f7ff f8b0 	bl	8000aa0 <copyToBuffer>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3305      	adds	r3, #5
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	4b11      	ldr	r3, [pc, #68]	@ (800198c <handleCommand+0x130>)
 8001948:	4a0f      	ldr	r2, [pc, #60]	@ (8001988 <handleCommand+0x12c>)
 800194a:	2167      	movs	r1, #103	@ 0x67
 800194c:	2068      	movs	r0, #104	@ 0x68
 800194e:	f7ff fd4f 	bl	80013f0 <prepareFrame>
                return;
 8001952:	e010      	b.n	8001976 <handleCommand+0x11a>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001956:	3301      	adds	r3, #1
 8001958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800195a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800195c:	2b04      	cmp	r3, #4
 800195e:	dd94      	ble.n	800188a <handleCommand+0x2e>
            }
        }
    }
    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3302      	adds	r3, #2
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4b09      	ldr	r3, [pc, #36]	@ (800198c <handleCommand+0x130>)
 8001968:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <handleCommand+0x12c>)
 800196a:	2167      	movs	r1, #103	@ 0x67
 800196c:	2068      	movs	r0, #104	@ 0x68
 800196e:	f7ff fd3f 	bl	80013f0 <prepareFrame>
 8001972:	e000      	b.n	8001976 <handleCommand+0x11a>
        return;
 8001974:	bf00      	nop
}
 8001976:	3740      	adds	r7, #64	@ 0x40
 8001978:	46bd      	mov	sp, r7
 800197a:	bdb0      	pop	{r4, r5, r7, pc}
 800197c:	08008e08 	.word	0x08008e08
 8001980:	08008df4 	.word	0x08008df4
 8001984:	08008df8 	.word	0x08008df8
 8001988:	08008d40 	.word	0x08008d40
 800198c:	08008d58 	.word	0x08008d58

08001990 <updateScrollingText>:



void updateScrollingText(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af02      	add	r7, sp, #8
	if (!text.isScrolling || text.scrollSpeed == 0) {
 8001996:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <updateScrollingText+0x198>)
 8001998:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 80bb 	bne.w	8001b1e <updateScrollingText+0x18e>
 80019a8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b28 <updateScrollingText+0x198>)
 80019aa:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b5 	beq.w	8001b1e <updateScrollingText+0x18e>
	        return;
	}
    uint32_t currentTime = HAL_GetTick();
 80019b4:	f000 fee8 	bl	8002788 <HAL_GetTick>
 80019b8:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 80019ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001b28 <updateScrollingText+0x198>)
 80019bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	4a58      	ldr	r2, [pc, #352]	@ (8001b28 <updateScrollingText+0x198>)
 80019c6:	f892 20cd 	ldrb.w	r2, [r2, #205]	@ 0xcd
 80019ca:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80019ce:	4293      	cmp	r3, r2
 80019d0:	f0c0 80a6 	bcc.w	8001b20 <updateScrollingText+0x190>
        text.lastUpdate = currentTime;
 80019d4:	4a54      	ldr	r2, [pc, #336]	@ (8001b28 <updateScrollingText+0x198>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

        // Oblicz szerokość znaku w zależności od fontu
        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 80019dc:	4b52      	ldr	r3, [pc, #328]	@ (8001b28 <updateScrollingText+0x198>)
 80019de:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d014      	beq.n	8001a10 <updateScrollingText+0x80>
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	dc19      	bgt.n	8001a1e <updateScrollingText+0x8e>
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d002      	beq.n	80019f4 <updateScrollingText+0x64>
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d007      	beq.n	8001a02 <updateScrollingText+0x72>
 80019f2:	e014      	b.n	8001a1e <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 80019f4:	2305      	movs	r3, #5
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	2307      	movs	r3, #7
 80019fa:	73bb      	strb	r3, [r7, #14]
 80019fc:	4b4b      	ldr	r3, [pc, #300]	@ (8001b2c <updateScrollingText+0x19c>)
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	e014      	b.n	8001a2c <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 8001a02:	2305      	movs	r3, #5
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	2308      	movs	r3, #8
 8001a08:	73bb      	strb	r3, [r7, #14]
 8001a0a:	4b49      	ldr	r3, [pc, #292]	@ (8001b30 <updateScrollingText+0x1a0>)
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	e00d      	b.n	8001a2c <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9;break;
 8001a10:	2306      	movs	r3, #6
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	2309      	movs	r3, #9
 8001a16:	73bb      	strb	r3, [r7, #14]
 8001a18:	4b46      	ldr	r3, [pc, #280]	@ (8001b34 <updateScrollingText+0x1a4>)
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	e006      	b.n	8001a2c <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 8001a1e:	2305      	movs	r3, #5
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	2307      	movs	r3, #7
 8001a24:	73bb      	strb	r3, [r7, #14]
 8001a26:	4b41      	ldr	r3, [pc, #260]	@ (8001b2c <updateScrollingText+0x19c>)
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	bf00      	nop
        }

        text.x += charWidth;
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b28 <updateScrollingText+0x198>)
 8001a2e:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b3b      	ldr	r3, [pc, #236]	@ (8001b28 <updateScrollingText+0x198>)
 8001a3a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

                // Oblicz całkowitą szerokość tekstu

                // Jeśli tekst wyszedł całkowicie za ekran
                if (text.x >= LCD_WIDTH - (charWidth * text.textLength)) {
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <updateScrollingText+0x198>)
 8001a40:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001a44:	4619      	mov	r1, r3
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	4a37      	ldr	r2, [pc, #220]	@ (8001b28 <updateScrollingText+0x198>)
 8001a4a:	f892 20d0 	ldrb.w	r2, [r2, #208]	@ 0xd0
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001a56:	4299      	cmp	r1, r3
 8001a58:	db43      	blt.n	8001ae2 <updateScrollingText+0x152>
                    if (text.firstIteration) {
 8001a5a:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <updateScrollingText+0x198>)
 8001a5c:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d024      	beq.n	8001aae <updateScrollingText+0x11e>
                        // W pierwszej iteracji używamy startowych współrzędnych
                        text.x = text.startX;  // Zaczynamy zza lewej krawędzi
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <updateScrollingText+0x198>)
 8001a66:	f893 20ca 	ldrb.w	r2, [r3, #202]	@ 0xca
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <updateScrollingText+0x198>)
 8001a6c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <updateScrollingText+0x198>)
 8001a72:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	4413      	add	r3, r2
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <updateScrollingText+0x198>)
 8001a7e:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu w pierwszej iteracji
                        if (text.y >= LCD_HEIGHT - charHeight) {
 8001a82:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <updateScrollingText+0x198>)
 8001a84:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001a88:	461a      	mov	r2, r3
 8001a8a:	7bbb      	ldrb	r3, [r7, #14]
 8001a8c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001a90:	429a      	cmp	r2, r3
 8001a92:	db26      	blt.n	8001ae2 <updateScrollingText+0x152>
                            text.firstIteration = false;  // Kończymy pierwszą iterację
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <updateScrollingText+0x198>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                            text.x = 0;
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <updateScrollingText+0x198>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                            text.y = 0;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <updateScrollingText+0x198>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 8001aac:	e019      	b.n	8001ae2 <updateScrollingText+0x152>
                        }
                    } else {
                        // W kolejnych iteracjach zaczynamy od lewej krawędzi
                        text.x = 0;
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <updateScrollingText+0x198>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <updateScrollingText+0x198>)
 8001ab8:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <updateScrollingText+0x198>)
 8001ac4:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu
                        if (text.y >= LCD_HEIGHT - charHeight) {
 8001ac8:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <updateScrollingText+0x198>)
 8001aca:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001ace:	461a      	mov	r2, r3
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	db03      	blt.n	8001ae2 <updateScrollingText+0x152>
                            text.y = 0;
 8001ada:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <updateScrollingText+0x198>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
                        }
                    }
                }

        if (!lcdIsBusy()) {
 8001ae2:	f000 fa19 	bl	8001f18 <lcdIsBusy>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d016      	beq.n	8001b20 <updateScrollingText+0x190>
            lcdClear();
 8001af2:	f000 f9a5 	bl	8001e40 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <updateScrollingText+0x198>)
 8001af8:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001afc:	b219      	sxth	r1, r3
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <updateScrollingText+0x198>)
 8001b00:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <updateScrollingText+0x198>)
 8001b08:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4603      	mov	r3, r0
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <updateScrollingText+0x198>)
 8001b14:	f005 fec0 	bl	8007898 <hagl_put_text>
            lcdCopy();
 8001b18:	f000 f966 	bl	8001de8 <lcdCopy>
 8001b1c:	e000      	b.n	8001b20 <updateScrollingText+0x190>
	        return;
 8001b1e:	bf00      	nop
        }
    }
}
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000d34 	.word	0x20000d34
 8001b2c:	08008e70 	.word	0x08008e70
 8001b30:	0800c378 	.word	0x0800c378
 8001b34:	0800f21c 	.word	0x0800f21c

08001b38 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	4a49      	ldr	r2, [pc, #292]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4a43      	ldr	r2, [pc, #268]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a3d      	ldr	r2, [pc, #244]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	4b38      	ldr	r3, [pc, #224]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba2:	4b35      	ldr	r3, [pc, #212]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bae:	4b32      	ldr	r3, [pc, #200]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	4a31      	ldr	r2, [pc, #196]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001bb4:	f043 0308 	orr.w	r3, r3, #8
 8001bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bba:	4b2f      	ldr	r3, [pc, #188]	@ (8001c78 <MX_GPIO_Init+0x140>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001bcc:	482b      	ldr	r0, [pc, #172]	@ (8001c7c <MX_GPIO_Init+0x144>)
 8001bce:	f001 fb19 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001bd2:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8001bd6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4826      	ldr	r0, [pc, #152]	@ (8001c80 <MX_GPIO_Init+0x148>)
 8001be8:	f001 f962 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bec:	2303      	movs	r3, #3
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4821      	ldr	r0, [pc, #132]	@ (8001c84 <MX_GPIO_Init+0x14c>)
 8001c00:	f001 f956 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001c04:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001c08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1c:	f001 f948 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001c20:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001c24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c26:	2303      	movs	r3, #3
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <MX_GPIO_Init+0x144>)
 8001c36:	f001 f93b 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001c3a:	f641 0306 	movw	r3, #6150	@ 0x1806
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <MX_GPIO_Init+0x144>)
 8001c54:	f001 f92c 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4807      	ldr	r0, [pc, #28]	@ (8001c88 <MX_GPIO_Init+0x150>)
 8001c6c:	f001 f920 	bl	8002eb0 <HAL_GPIO_Init>

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	@ 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	48000400 	.word	0x48000400
 8001c80:	48000800 	.word	0x48000800
 8001c84:	48001c00 	.word	0x48001c00
 8001c88:	48000c00 	.word	0x48000c00

08001c8c <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <lcdCmd+0x44>)
 8001c9e:	f001 fab1 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ca8:	4809      	ldr	r0, [pc, #36]	@ (8001cd0 <lcdCmd+0x44>)
 8001caa:	f001 faab 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001cae:	1df9      	adds	r1, r7, #7
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4807      	ldr	r0, [pc, #28]	@ (8001cd4 <lcdCmd+0x48>)
 8001cb8:	f002 fe7f 	bl	80049ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cc2:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <lcdCmd+0x44>)
 8001cc4:	f001 fa9e 	bl	8003204 <HAL_GPIO_WritePin>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	48000400 	.word	0x48000400
 8001cd4:	2000ae14 	.word	0x2000ae14

08001cd8 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <lcdData+0x44>)
 8001cea:	f001 fa8b 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cf4:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <lcdData+0x44>)
 8001cf6:	f001 fa85 	bl	8003204 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001cfa:	1df9      	adds	r1, r7, #7
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	2201      	movs	r2, #1
 8001d02:	4807      	ldr	r0, [pc, #28]	@ (8001d20 <lcdData+0x48>)
 8001d04:	f002 fe59 	bl	80049ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <lcdData+0x44>)
 8001d10:	f001 fa78 	bl	8003204 <HAL_GPIO_WritePin>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	2000ae14 	.word	0x2000ae14

08001d24 <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <lcdSend+0x20>
		lcdCmd(value);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ffa5 	bl	8001c8c <lcdCmd>
	} else {
		lcdData(value);
	}
}
 8001d42:	e004      	b.n	8001d4e <lcdSend+0x2a>
		lcdData(value);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ffc5 	bl	8001cd8 <lcdData>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ffb5 	bl	8001cd8 <lcdData>
	lcdData(value);
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffb0 	bl	8001cd8 <lcdData>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 8001d8e:	202a      	movs	r0, #42	@ 0x2a
 8001d90:	f7ff ff7c 	bl	8001c8c <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ffda 	bl	8001d56 <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ffd1 	bl	8001d56 <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001db4:	202b      	movs	r0, #43	@ 0x2b
 8001db6:	f7ff ff69 	bl	8001c8c <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ffc7 	bl	8001d56 <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ffbc 	bl	8001d56 <lcdData16>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 8001dec:	f000 f894 	bl	8001f18 <lcdIsBusy>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11b      	bne.n	8001e2e <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	22a0      	movs	r2, #160	@ 0xa0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff ffbf 	bl	8001d80 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001e02:	202c      	movs	r0, #44	@ 0x2c
 8001e04:	f7ff ff42 	bl	8001c8c <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e0e:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <lcdCopy+0x4c>)
 8001e10:	f001 f9f8 	bl	8003204 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e1a:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <lcdCopy+0x4c>)
 8001e1c:	f001 f9f2 	bl	8003204 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001e20:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001e24:	4904      	ldr	r1, [pc, #16]	@ (8001e38 <lcdCopy+0x50>)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <lcdCopy+0x54>)
 8001e28:	f002 ff3e 	bl	8004ca8 <HAL_SPI_Transmit_DMA>
 8001e2c:	e000      	b.n	8001e30 <lcdCopy+0x48>
        return;
 8001e2e:	bf00      	nop
}
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	48000400 	.word	0x48000400
 8001e38:	20000e0c 	.word	0x20000e0c
 8001e3c:	2000ae14 	.word	0x2000ae14

08001e40 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001e44:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <lcdClear+0x14>)
 8001e4c:	f006 fb0e 	bl	800846c <memset>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000e0c 	.word	0x20000e0c

08001e58 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2104      	movs	r1, #4
 8001e62:	481c      	ldr	r0, [pc, #112]	@ (8001ed4 <lcdInit+0x7c>)
 8001e64:	f001 f9ce 	bl	8003204 <HAL_GPIO_WritePin>
    delay(100);
 8001e68:	2064      	movs	r0, #100	@ 0x64
 8001e6a:	f000 f8c9 	bl	8002000 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2104      	movs	r1, #4
 8001e72:	4818      	ldr	r0, [pc, #96]	@ (8001ed4 <lcdInit+0x7c>)
 8001e74:	f001 f9c6 	bl	8003204 <HAL_GPIO_WritePin>
    delay(100);
 8001e78:	2064      	movs	r0, #100	@ 0x64
 8001e7a:	f000 f8c1 	bl	8002000 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	e009      	b.n	8001e98 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <lcdInit+0x80>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff49 	bl	8001d24 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3301      	adds	r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b4b      	cmp	r3, #75	@ 0x4b
 8001e9c:	d9f2      	bls.n	8001e84 <lcdInit+0x2c>
    }
    delay(200);
 8001e9e:	20c8      	movs	r0, #200	@ 0xc8
 8001ea0:	f000 f8ae 	bl	8002000 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001ea4:	2011      	movs	r0, #17
 8001ea6:	f7ff fef1 	bl	8001c8c <lcdCmd>
    delay(120);
 8001eaa:	2078      	movs	r0, #120	@ 0x78
 8001eac:	f000 f8a8 	bl	8002000 <delay>
    lcdCmd(ST7735S_DISPON);
 8001eb0:	2029      	movs	r0, #41	@ 0x29
 8001eb2:	f7ff feeb 	bl	8001c8c <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4806      	ldr	r0, [pc, #24]	@ (8001ed4 <lcdInit+0x7c>)
 8001ebc:	f001 f9a2 	bl	8003204 <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001ec0:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <lcdInit+0x84>)
 8001ec8:	f006 fad0 	bl	800846c <memset>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	080121d4 	.word	0x080121d4
 8001edc:	20000e0c 	.word	0x20000e0c

08001ee0 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	015b      	lsls	r3, r3, #5
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4413      	add	r3, r2
 8001efe:	4905      	ldr	r1, [pc, #20]	@ (8001f14 <lcdPutPixel+0x34>)
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000e0c 	.word	0x20000e0c

08001f18 <lcdIsBusy>:
bool lcdIsBusy(void) {
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <lcdIsBusy+0x14>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	2000ae0c 	.word	0x2000ae0c

08001f30 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <HAL_SPI_TxCpltCallback+0x2c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f46:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <HAL_SPI_TxCpltCallback+0x30>)
 8001f48:	f001 f95c 	bl	8003204 <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <HAL_SPI_TxCpltCallback+0x34>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
    }
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000ae14 	.word	0x2000ae14
 8001f60:	48000400 	.word	0x48000400
 8001f64:	2000ae0c 	.word	0x2000ae0c

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f7ff ffc2 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <delay+0x2c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 800200e:	bf00      	nop
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	441a      	add	r2, r3
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <delay+0x2c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d8f8      	bhi.n	8002010 <delay+0x10>
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	2000ae10 	.word	0x2000ae10

08002030 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8002036:	f7fe fab5 	bl	80005a4 <USART_kbhit>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8002040:	f7fe fac2 	bl	80005c8 <USART_getchar>
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fb4a 	bl	80016e4 <processReceivedChar>
	 }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800205c:	f000 fb2b 	bl	80026b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002060:	f000 f812 	bl	8002088 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <main+0x2c>)
 8002066:	f7ff ffa9 	bl	8001fbc <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206a:	f7ff fd65 	bl	8001b38 <MX_GPIO_Init>
  MX_DMA_Init();
 800206e:	f7fe fc31 	bl	80008d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002072:	f000 fa4b 	bl	800250c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002076:	f000 f85f 	bl	8002138 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 800207a:	f7ff feed 	bl	8001e58 <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
	  waitForFrame();
 800207e:	f7ff ffd7 	bl	8002030 <waitForFrame>
 8002082:	e7fc      	b.n	800207e <main+0x26>
 8002084:	00013880 	.word	0x00013880

08002088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b096      	sub	sp, #88	@ 0x58
 800208c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	2244      	movs	r2, #68	@ 0x44
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f006 f9e8 	bl	800846c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020ae:	f001 f8cf 	bl	8003250 <HAL_PWREx_ControlVoltageScaling>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020b8:	f000 f838 	bl	800212c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80020bc:	2310      	movs	r3, #16
 80020be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020c0:	2301      	movs	r3, #1
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020c8:	2360      	movs	r3, #96	@ 0x60
 80020ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020cc:	2302      	movs	r3, #2
 80020ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80020d0:	2301      	movs	r3, #1
 80020d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80020d8:	2328      	movs	r3, #40	@ 0x28
 80020da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020dc:	2307      	movs	r3, #7
 80020de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020e4:	2302      	movs	r3, #2
 80020e6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 f905 	bl	80032fc <HAL_RCC_OscConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80020f8:	f000 f818 	bl	800212c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fc:	230f      	movs	r3, #15
 80020fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002100:	2303      	movs	r3, #3
 8002102:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	2104      	movs	r1, #4
 8002114:	4618      	mov	r0, r3
 8002116:	f001 fccd 	bl	8003ab4 <HAL_RCC_ClockConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002120:	f000 f804 	bl	800212c <Error_Handler>
  }
}
 8002124:	bf00      	nop
 8002126:	3758      	adds	r7, #88	@ 0x58
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <Error_Handler+0x8>

08002138 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <MX_SPI2_Init+0x74>)
 800213e:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <MX_SPI2_Init+0x78>)
 8002140:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002144:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002148:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800214a:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <MX_SPI2_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002150:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002152:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002156:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002158:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <MX_SPI2_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800215e:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002160:	2200      	movs	r2, #0
 8002162:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800216a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <MX_SPI2_Init+0x74>)
 800216e:	2210      	movs	r2, #16
 8002170:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <MX_SPI2_Init+0x74>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800217e:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002184:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002186:	2207      	movs	r2, #7
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <MX_SPI2_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	@ (80021ac <MX_SPI2_Init+0x74>)
 8002198:	f002 fb6c 	bl	8004874 <HAL_SPI_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021a2:	f7ff ffc3 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	2000ae14 	.word	0x2000ae14
 80021b0:	40003800 	.word	0x40003800

080021b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3e      	ldr	r2, [pc, #248]	@ (80022cc <HAL_SPI_MspInit+0x118>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d175      	bne.n	80022c2 <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021d6:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4a3d      	ldr	r2, [pc, #244]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e2:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ee:	4b38      	ldr	r3, [pc, #224]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f2:	4a37      	ldr	r2, [pc, #220]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fa:	4b35      	ldr	r3, [pc, #212]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	4a31      	ldr	r2, [pc, #196]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002212:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <HAL_SPI_MspInit+0x11c>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 800221e:	2308      	movs	r3, #8
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800222e:	2305      	movs	r3, #5
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4826      	ldr	r0, [pc, #152]	@ (80022d4 <HAL_SPI_MspInit+0x120>)
 800223a:	f000 fe39 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 800223e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002250:	2305      	movs	r3, #5
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	481f      	ldr	r0, [pc, #124]	@ (80022d8 <HAL_SPI_MspInit+0x124>)
 800225c:	f000 fe28 	bl	8002eb0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002260:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 8002262:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <HAL_SPI_MspInit+0x12c>)
 8002264:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8002266:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 8002268:	2201      	movs	r2, #1
 800226a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 800226e:	2210      	movs	r2, #16
 8002270:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002278:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 800227a:	2280      	movs	r2, #128	@ 0x80
 800227c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 8002280:	2200      	movs	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002284:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800228a:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 800228c:	2200      	movs	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002296:	4811      	ldr	r0, [pc, #68]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 8002298:	f000 fb94 	bl	80029c4 <HAL_DMA_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80022a2:	f7ff ff43 	bl	800212c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0c      	ldr	r2, [pc, #48]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <HAL_SPI_MspInit+0x128>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2102      	movs	r1, #2
 80022b6:	2024      	movs	r0, #36	@ 0x24
 80022b8:	f000 fb4d 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80022bc:	2024      	movs	r0, #36	@ 0x24
 80022be:	f000 fb66 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	@ 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40003800 	.word	0x40003800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	48000800 	.word	0x48000800
 80022d8:	48000400 	.word	0x48000400
 80022dc:	2000ae78 	.word	0x2000ae78
 80022e0:	40020058 	.word	0x40020058

080022e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002328 <HAL_MspInit+0x44>)
 80022ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002328 <HAL_MspInit+0x44>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <HAL_MspInit+0x44>)
 80022f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_MspInit+0x44>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	4a08      	ldr	r2, [pc, #32]	@ (8002328 <HAL_MspInit+0x44>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230c:	6593      	str	r3, [r2, #88]	@ 0x58
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_MspInit+0x44>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <NMI_Handler+0x4>

08002334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <MemManage_Handler+0x4>

08002344 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <UsageFault_Handler+0x4>

08002354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002384:	f000 f9ec 	bl	8002760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8002388:	4b04      	ldr	r3, [pc, #16]	@ (800239c <SysTick_Handler+0x1c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	4a03      	ldr	r2, [pc, #12]	@ (800239c <SysTick_Handler+0x1c>)
 8002390:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 8002392:	f7ff fafd 	bl	8001990 <updateScrollingText>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000ae10 	.word	0x2000ae10

080023a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <DMA1_Channel5_IRQHandler+0x10>)
 80023a6:	f000 fca4 	bl	8002cf2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000ae78 	.word	0x2000ae78

080023b4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80023b8:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <SPI2_IRQHandler+0x10>)
 80023ba:	f002 fd63 	bl	8004e84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000ae14 	.word	0x2000ae14

080023c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023cc:	4802      	ldr	r0, [pc, #8]	@ (80023d8 <USART2_IRQHandler+0x10>)
 80023ce:	f003 f953 	bl	8005678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000aec4 	.word	0x2000aec4

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f006 f85a 	bl	80084c4 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20018000 	.word	0x20018000
 800243c:	00001000 	.word	0x00001000
 8002440:	2000aec0 	.word	0x2000aec0
 8002444:	2000b098 	.word	0x2000b098

08002448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a10      	ldr	r2, [pc, #64]	@ (80024b8 <HAL_UART_TxCpltCallback+0x4c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d119      	bne.n	80024b0 <HAL_UART_TxCpltCallback+0x44>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 800247c:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_UART_TxCpltCallback+0x50>)
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_UART_TxCpltCallback+0x50>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d013      	beq.n	80024b0 <HAL_UART_TxCpltCallback+0x44>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002488:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <HAL_UART_TxCpltCallback+0x50>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a0c      	ldr	r2, [pc, #48]	@ (80024c0 <HAL_UART_TxCpltCallback+0x54>)
 800248e:	5cd3      	ldrb	r3, [r2, r3]
 8002490:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_UART_TxCpltCallback+0x50>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_UART_TxCpltCallback+0x50>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <HAL_UART_TxCpltCallback+0x50>)
 80024a0:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80024a2:	f107 030f 	add.w	r3, r7, #15
 80024a6:	2201      	movs	r2, #1
 80024a8:	4619      	mov	r1, r3
 80024aa:	4803      	ldr	r0, [pc, #12]	@ (80024b8 <HAL_UART_TxCpltCallback+0x4c>)
 80024ac:	f003 f83a 	bl	8005524 <HAL_UART_Transmit_IT>
	   }
   }
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000aec4 	.word	0x2000aec4
 80024bc:	20000290 	.word	0x20000290
 80024c0:	200002a0 	.word	0x200002a0

080024c4 <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002500 <HAL_UART_RxCpltCallback+0x3c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d110      	bne.n	80024f6 <HAL_UART_RxCpltCallback+0x32>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) & rxRingBuffer.mask;
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_UART_RxCpltCallback+0x40>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_UART_RxCpltCallback+0x40>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <HAL_UART_RxCpltCallback+0x40>)
 80024e2:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80024e4:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <HAL_UART_RxCpltCallback+0x40>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <HAL_UART_RxCpltCallback+0x44>)
 80024ea:	4413      	add	r3, r2
 80024ec:	2201      	movs	r2, #1
 80024ee:	4619      	mov	r1, r3
 80024f0:	4803      	ldr	r0, [pc, #12]	@ (8002500 <HAL_UART_RxCpltCallback+0x3c>)
 80024f2:	f003 f875 	bl	80055e0 <HAL_UART_Receive_IT>

	 }
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000aec4 	.word	0x2000aec4
 8002504:	20000280 	.word	0x20000280
 8002508:	20000aa0 	.word	0x20000aa0

0800250c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002510:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002512:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <MX_USART2_UART_Init+0x7c>)
 8002514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002516:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800251c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800251e:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002524:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800252a:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002530:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002532:	220c      	movs	r2, #12
 8002534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002536:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002548:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800254e:	480d      	ldr	r0, [pc, #52]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 8002550:	f002 ff9a 	bl	8005488 <HAL_UART_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800255a:	f7ff fde7 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 800255e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002562:	490a      	ldr	r1, [pc, #40]	@ (800258c <MX_USART2_UART_Init+0x80>)
 8002564:	480a      	ldr	r0, [pc, #40]	@ (8002590 <MX_USART2_UART_Init+0x84>)
 8002566:	f7fe f803 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 800256a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800256e:	4909      	ldr	r1, [pc, #36]	@ (8002594 <MX_USART2_UART_Init+0x88>)
 8002570:	4809      	ldr	r0, [pc, #36]	@ (8002598 <MX_USART2_UART_Init+0x8c>)
 8002572:	f7fd fffd 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 8002576:	2201      	movs	r2, #1
 8002578:	4904      	ldr	r1, [pc, #16]	@ (800258c <MX_USART2_UART_Init+0x80>)
 800257a:	4802      	ldr	r0, [pc, #8]	@ (8002584 <MX_USART2_UART_Init+0x78>)
 800257c:	f003 f830 	bl	80055e0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000aec4 	.word	0x2000aec4
 8002588:	40004400 	.word	0x40004400
 800258c:	20000aa0 	.word	0x20000aa0
 8002590:	20000280 	.word	0x20000280
 8002594:	200002a0 	.word	0x200002a0
 8002598:	20000290 	.word	0x20000290

0800259c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ac      	sub	sp, #176	@ 0xb0
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2288      	movs	r2, #136	@ 0x88
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f005 ff55 	bl	800846c <memset>
  if(uartHandle->Instance==USART2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a25      	ldr	r2, [pc, #148]	@ (800265c <HAL_UART_MspInit+0xc0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d143      	bne.n	8002654 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025cc:	2302      	movs	r3, #2
 80025ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fc8f 	bl	8003efc <HAL_RCCEx_PeriphCLKConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025e4:	f7ff fda2 	bl	800212c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_UART_MspInit+0xc4>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002660 <HAL_UART_MspInit+0xc4>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <HAL_UART_MspInit+0xc4>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002600:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <HAL_UART_MspInit+0xc4>)
 8002602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002604:	4a16      	ldr	r2, [pc, #88]	@ (8002660 <HAL_UART_MspInit+0xc4>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260c:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <HAL_UART_MspInit+0xc4>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002618:	230c      	movs	r3, #12
 800261a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002630:	2307      	movs	r3, #7
 8002632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002640:	f000 fc36 	bl	8002eb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2101      	movs	r1, #1
 8002648:	2026      	movs	r0, #38	@ 0x26
 800264a:	f000 f984 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800264e:	2026      	movs	r0, #38	@ 0x26
 8002650:	f000 f99d 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002654:	bf00      	nop
 8002656:	37b0      	adds	r7, #176	@ 0xb0
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40004400 	.word	0x40004400
 8002660:	40021000 	.word	0x40021000

08002664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800269c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002668:	f7ff feee 	bl	8002448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800266e:	490d      	ldr	r1, [pc, #52]	@ (80026a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <LoopForever+0xe>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002684:	4c0a      	ldr	r4, [pc, #40]	@ (80026b0 <LoopForever+0x16>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002692:	f005 ff1d 	bl	80084d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002696:	f7ff fcdf 	bl	8002058 <main>

0800269a <LoopForever>:

LoopForever:
    b LoopForever
 800269a:	e7fe      	b.n	800269a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800269c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a4:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80026a8:	080122f8 	.word	0x080122f8
  ldr r2, =_sbss
 80026ac:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80026b0:	2000b098 	.word	0x2000b098

080026b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC1_2_IRQHandler>

080026b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f000 f93d 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026c6:	200f      	movs	r0, #15
 80026c8:	f000 f80e 	bl	80026e8 <HAL_InitTick>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	71fb      	strb	r3, [r7, #7]
 80026d6:	e001      	b.n	80026dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d8:	f7ff fe04 	bl	80022e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026dc:	79fb      	ldrb	r3, [r7, #7]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026f4:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_InitTick+0x6c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d023      	beq.n	8002744 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026fc:	4b16      	ldr	r3, [pc, #88]	@ (8002758 <HAL_InitTick+0x70>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <HAL_InitTick+0x6c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f949 	bl	80029aa <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d809      	bhi.n	8002738 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f000 f913 	bl	8002956 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002730:	4a0a      	ldr	r2, [pc, #40]	@ (800275c <HAL_InitTick+0x74>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e007      	b.n	8002748 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e004      	b.n	8002748 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e001      	b.n	8002748 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000208 	.word	0x20000208
 8002758:	20000200 	.word	0x20000200
 800275c:	20000204 	.word	0x20000204

08002760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_IncTick+0x20>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_IncTick+0x24>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <HAL_IncTick+0x24>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000208 	.word	0x20000208
 8002784:	2000af4c 	.word	0x2000af4c

08002788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000af4c 	.word	0x2000af4c

080027a0 <__NVIC_SetPriorityGrouping>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	@ (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	@ (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	@ (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	@ 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff29 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002968:	f7ff ff3e 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 800296c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff ff8e 	bl	8002894 <NVIC_EncodePriority>
 8002978:	4602      	mov	r2, r0
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff31 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffa2 	bl	80028fc <SysTick_Config>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e098      	b.n	8002b08 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <HAL_DMA_Init+0x150>)
 80029de:	429a      	cmp	r2, r3
 80029e0:	d80f      	bhi.n	8002a02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <HAL_DMA_Init+0x154>)
 80029ea:	4413      	add	r3, r2
 80029ec:	4a4b      	ldr	r2, [pc, #300]	@ (8002b1c <HAL_DMA_Init+0x158>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a48      	ldr	r2, [pc, #288]	@ (8002b20 <HAL_DMA_Init+0x15c>)
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a00:	e00e      	b.n	8002a20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <HAL_DMA_Init+0x160>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a43      	ldr	r2, [pc, #268]	@ (8002b1c <HAL_DMA_Init+0x158>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a42      	ldr	r2, [pc, #264]	@ (8002b28 <HAL_DMA_Init+0x164>)
 8002a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a7a:	d039      	beq.n	8002af0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <HAL_DMA_Init+0x15c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11a      	bne.n	8002abc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a86:	4b29      	ldr	r3, [pc, #164]	@ (8002b2c <HAL_DMA_Init+0x168>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f003 031c 	and.w	r3, r3, #28
 8002a92:	210f      	movs	r1, #15
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4924      	ldr	r1, [pc, #144]	@ (8002b2c <HAL_DMA_Init+0x168>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002aa0:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <HAL_DMA_Init+0x168>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	f003 031c 	and.w	r3, r3, #28
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	491d      	ldr	r1, [pc, #116]	@ (8002b2c <HAL_DMA_Init+0x168>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
 8002aba:	e019      	b.n	8002af0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002abc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b30 <HAL_DMA_Init+0x16c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac4:	f003 031c 	and.w	r3, r3, #28
 8002ac8:	210f      	movs	r1, #15
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	4917      	ldr	r1, [pc, #92]	@ (8002b30 <HAL_DMA_Init+0x16c>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ad6:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <HAL_DMA_Init+0x16c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f003 031c 	and.w	r3, r3, #28
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	4911      	ldr	r1, [pc, #68]	@ (8002b30 <HAL_DMA_Init+0x16c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40020407 	.word	0x40020407
 8002b18:	bffdfff8 	.word	0xbffdfff8
 8002b1c:	cccccccd 	.word	0xcccccccd
 8002b20:	40020000 	.word	0x40020000
 8002b24:	bffdfbf8 	.word	0xbffdfbf8
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	400200a8 	.word	0x400200a8
 8002b30:	400204a8 	.word	0x400204a8

08002b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_DMA_Start_IT+0x20>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e04b      	b.n	8002bec <HAL_DMA_Start_IT+0xb8>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d13a      	bne.n	8002bde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f95f 	bl	8002e50 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 020e 	orr.w	r2, r2, #14
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e00f      	b.n	8002bcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0204 	bic.w	r2, r2, #4
 8002bba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 020a 	orr.w	r2, r2, #10
 8002bca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e005      	b.n	8002bea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d008      	beq.n	8002c1e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e022      	b.n	8002c64 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 020e 	bic.w	r2, r2, #14
 8002c2c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f003 021c 	and.w	r2, r3, #28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d005      	beq.n	8002c94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	e029      	b.n	8002ce8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 020e 	bic.w	r2, r2, #14
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	f003 021c 	and.w	r2, r3, #28
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
  }
  return status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f003 031c 	and.w	r3, r3, #28
 8002d12:	2204      	movs	r2, #4
 8002d14:	409a      	lsls	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d026      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x7a>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d021      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0204 	bic.w	r2, r2, #4
 8002d44:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f003 021c 	and.w	r2, r3, #28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	2104      	movs	r1, #4
 8002d54:	fa01 f202 	lsl.w	r2, r1, r2
 8002d58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d071      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d6a:	e06c      	b.n	8002e46 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d70:	f003 031c 	and.w	r3, r3, #28
 8002d74:	2202      	movs	r2, #2
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02e      	beq.n	8002dde <HAL_DMA_IRQHandler+0xec>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d029      	beq.n	8002dde <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 020a 	bic.w	r2, r2, #10
 8002da6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	f003 021c 	and.w	r2, r3, #28
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d038      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ddc:	e033      	b.n	8002e46 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f003 031c 	and.w	r3, r3, #28
 8002de6:	2208      	movs	r2, #8
 8002de8:	409a      	lsls	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d02a      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x156>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d025      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 020e 	bic.w	r2, r2, #14
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e10:	f003 021c 	and.w	r2, r3, #28
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
}
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f003 021c 	and.w	r2, r3, #28
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d108      	bne.n	8002e94 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e92:	e007      	b.n	8002ea4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebe:	e17f      	b.n	80031c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8171 	beq.w	80031ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d005      	beq.n	8002ef0 <HAL_GPIO_Init+0x40>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d130      	bne.n	8002f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f26:	2201      	movs	r2, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0201 	and.w	r2, r3, #1
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d118      	bne.n	8002f90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	6939      	ldr	r1, [r7, #16]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80ac 	beq.w	80031ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	4b5f      	ldr	r3, [pc, #380]	@ (80031e0 <HAL_GPIO_Init+0x330>)
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	4a5e      	ldr	r2, [pc, #376]	@ (80031e0 <HAL_GPIO_Init+0x330>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6613      	str	r3, [r2, #96]	@ 0x60
 800306e:	4b5c      	ldr	r3, [pc, #368]	@ (80031e0 <HAL_GPIO_Init+0x330>)
 8003070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800307a:	4a5a      	ldr	r2, [pc, #360]	@ (80031e4 <HAL_GPIO_Init+0x334>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x242>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	@ (80031e8 <HAL_GPIO_Init+0x338>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x23e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <HAL_GPIO_Init+0x33c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x23a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	@ (80031f0 <HAL_GPIO_Init+0x340>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x236>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4c      	ldr	r2, [pc, #304]	@ (80031f4 <HAL_GPIO_Init+0x344>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x232>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4b      	ldr	r2, [pc, #300]	@ (80031f8 <HAL_GPIO_Init+0x348>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x22e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	@ (80031fc <HAL_GPIO_Init+0x34c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x22a>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00c      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030da:	2307      	movs	r3, #7
 80030dc:	e00a      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030de:	2305      	movs	r3, #5
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x244>
 80030f2:	2300      	movs	r3, #0
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003104:	4937      	ldr	r1, [pc, #220]	@ (80031e4 <HAL_GPIO_Init+0x334>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003112:	4b3b      	ldr	r3, [pc, #236]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003136:	4a32      	ldr	r2, [pc, #200]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800313c:	4b30      	ldr	r3, [pc, #192]	@ (8003200 <HAL_GPIO_Init+0x350>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003160:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003166:	4b26      	ldr	r3, [pc, #152]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800318a:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <HAL_GPIO_Init+0x350>)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003190:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <HAL_GPIO_Init+0x350>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031b4:	4a12      	ldr	r2, [pc, #72]	@ (8003200 <HAL_GPIO_Init+0x350>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f47f ae78 	bne.w	8002ec0 <HAL_GPIO_Init+0x10>
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40010000 	.word	0x40010000
 80031e8:	48000400 	.word	0x48000400
 80031ec:	48000800 	.word	0x48000800
 80031f0:	48000c00 	.word	0x48000c00
 80031f4:	48001000 	.word	0x48001000
 80031f8:	48001400 	.word	0x48001400
 80031fc:	48001800 	.word	0x48001800
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003220:	e002      	b.n	8003228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <HAL_PWREx_GetVoltageRange+0x18>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40007000 	.word	0x40007000

08003250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325e:	d130      	bne.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003260:	4b23      	ldr	r3, [pc, #140]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800326c:	d038      	beq.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800326e:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003276:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003278:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800327e:	4b1d      	ldr	r3, [pc, #116]	@ (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2232      	movs	r2, #50	@ 0x32
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	4a1b      	ldr	r2, [pc, #108]	@ (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	0c9b      	lsrs	r3, r3, #18
 8003290:	3301      	adds	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003294:	e002      	b.n	800329c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3b01      	subs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329c:	4b14      	ldr	r3, [pc, #80]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a8:	d102      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f2      	bne.n	8003296 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032bc:	d110      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ce:	d007      	beq.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d0:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d8:	4a05      	ldr	r2, [pc, #20]	@ (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40007000 	.word	0x40007000
 80032f4:	20000200 	.word	0x20000200
 80032f8:	431bde83 	.word	0x431bde83

080032fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e3ca      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330e:	4b97      	ldr	r3, [pc, #604]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003318:	4b94      	ldr	r3, [pc, #592]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80e4 	beq.w	80034f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_RCC_OscConfig+0x4a>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	f040 808b 	bne.w	8003454 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 8087 	bne.w	8003454 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003346:	4b89      	ldr	r3, [pc, #548]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e3a2      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	4b82      	ldr	r3, [pc, #520]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCC_OscConfig+0x7c>
 800336e:	4b7f      	ldr	r3, [pc, #508]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003376:	e005      	b.n	8003384 <HAL_RCC_OscConfig+0x88>
 8003378:	4b7c      	ldr	r3, [pc, #496]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003384:	4293      	cmp	r3, r2
 8003386:	d223      	bcs.n	80033d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd55 	bl	8003e3c <RCC_SetFlashLatencyFromMSIRange>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e383      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339c:	4b73      	ldr	r3, [pc, #460]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a72      	ldr	r2, [pc, #456]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033a2:	f043 0308 	orr.w	r3, r3, #8
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b70      	ldr	r3, [pc, #448]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	496d      	ldr	r1, [pc, #436]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ba:	4b6c      	ldr	r3, [pc, #432]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	4968      	ldr	r1, [pc, #416]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
 80033ce:	e025      	b.n	800341c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d0:	4b66      	ldr	r3, [pc, #408]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b63      	ldr	r3, [pc, #396]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4960      	ldr	r1, [pc, #384]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ee:	4b5f      	ldr	r3, [pc, #380]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	495b      	ldr	r1, [pc, #364]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fd15 	bl	8003e3c <RCC_SetFlashLatencyFromMSIRange>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e343      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800341c:	f000 fc4a 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b52      	ldr	r3, [pc, #328]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	4950      	ldr	r1, [pc, #320]	@ (8003570 <HAL_RCC_OscConfig+0x274>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	4a4e      	ldr	r2, [pc, #312]	@ (8003574 <HAL_RCC_OscConfig+0x278>)
 800343a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800343c:	4b4e      	ldr	r3, [pc, #312]	@ (8003578 <HAL_RCC_OscConfig+0x27c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f951 	bl	80026e8 <HAL_InitTick>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d052      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	e327      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d032      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800345c:	4b43      	ldr	r3, [pc, #268]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a42      	ldr	r2, [pc, #264]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003468:	f7ff f98e 	bl	8002788 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003470:	f7ff f98a 	bl	8002788 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e310      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003482:	4b3a      	ldr	r3, [pc, #232]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800348e:	4b37      	ldr	r3, [pc, #220]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a36      	ldr	r2, [pc, #216]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b34      	ldr	r3, [pc, #208]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4931      	ldr	r1, [pc, #196]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ac:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	492c      	ldr	r1, [pc, #176]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
 80034c0:	e01a      	b.n	80034f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a29      	ldr	r2, [pc, #164]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ce:	f7ff f95b 	bl	8002788 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d6:	f7ff f957 	bl	8002788 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e2dd      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034e8:	4b20      	ldr	r3, [pc, #128]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1da>
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d074      	beq.n	80035ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x21a>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d10e      	bne.n	800352e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d10b      	bne.n	800352e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d064      	beq.n	80035ec <HAL_RCC_OscConfig+0x2f0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d160      	bne.n	80035ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e2ba      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x24a>
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0b      	ldr	r2, [pc, #44]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e026      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800354e:	d115      	bne.n	800357c <HAL_RCC_OscConfig+0x280>
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a05      	ldr	r2, [pc, #20]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a02      	ldr	r2, [pc, #8]	@ (800356c <HAL_RCC_OscConfig+0x270>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	e014      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	0801226c 	.word	0x0801226c
 8003574:	20000200 	.word	0x20000200
 8003578:	20000204 	.word	0x20000204
 800357c:	4ba0      	ldr	r3, [pc, #640]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a9f      	ldr	r2, [pc, #636]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b9d      	ldr	r3, [pc, #628]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a9c      	ldr	r2, [pc, #624]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7ff f8f4 	bl	8002788 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7ff f8f0 	bl	8002788 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e276      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b92      	ldr	r3, [pc, #584]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2a8>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7ff f8e0 	bl	8002788 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7ff f8dc 	bl	8002788 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e262      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035de:	4b88      	ldr	r3, [pc, #544]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x2d0>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d060      	beq.n	80036bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x310>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d119      	bne.n	800363a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d116      	bne.n	800363a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360c:	4b7c      	ldr	r3, [pc, #496]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x328>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e23f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b76      	ldr	r3, [pc, #472]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	4973      	ldr	r1, [pc, #460]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003638:	e040      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d023      	beq.n	800368a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003642:	4b6f      	ldr	r3, [pc, #444]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6e      	ldr	r2, [pc, #440]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7ff f89b 	bl	8002788 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7ff f897 	bl	8002788 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e21d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003668:	4b65      	ldr	r3, [pc, #404]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b62      	ldr	r3, [pc, #392]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	495f      	ldr	r1, [pc, #380]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	e018      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b5d      	ldr	r3, [pc, #372]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5c      	ldr	r2, [pc, #368]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7ff f877 	bl	8002788 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369e:	f7ff f873 	bl	8002788 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1f9      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b0:	4b53      	ldr	r3, [pc, #332]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03c      	beq.n	8003742 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7ff f852 	bl	8002788 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7ff f84e 	bl	8002788 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1d4      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fa:	4b41      	ldr	r3, [pc, #260]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCC_OscConfig+0x3ec>
 8003708:	e01b      	b.n	8003742 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370a:	4b3d      	ldr	r3, [pc, #244]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800370c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003710:	4a3b      	ldr	r2, [pc, #236]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7ff f835 	bl	8002788 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7ff f831 	bl	8002788 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1b7      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003734:	4b32      	ldr	r3, [pc, #200]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ef      	bne.n	8003722 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80a6 	beq.w	800389c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003754:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b27      	ldr	r3, [pc, #156]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	4a26      	ldr	r2, [pc, #152]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	@ 0x58
 800376c:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	4b21      	ldr	r3, [pc, #132]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d118      	bne.n	80037ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b1e      	ldr	r3, [pc, #120]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003794:	f7fe fff8 	bl	8002788 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fe fff4 	bl	8002788 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e17a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <HAL_RCC_OscConfig+0x508>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4d8>
 80037c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d2:	e029      	b.n	8003828 <HAL_RCC_OscConfig+0x52c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d115      	bne.n	8003808 <HAL_RCC_OscConfig+0x50c>
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	4a07      	ldr	r2, [pc, #28]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	4a03      	ldr	r2, [pc, #12]	@ (8003800 <HAL_RCC_OscConfig+0x504>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x52c>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
 8003808:	4b9c      	ldr	r3, [pc, #624]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	4a9b      	ldr	r2, [pc, #620]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003818:	4b98      	ldr	r3, [pc, #608]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	4a97      	ldr	r2, [pc, #604]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe ffaa 	bl	8002788 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fe ffa6 	bl	8002788 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e12a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ed      	beq.n	8003838 <HAL_RCC_OscConfig+0x53c>
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe ff93 	bl	8002788 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fe ff8f 	bl	8002788 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e113      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387c:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ed      	bne.n	8003866 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388a:	7ffb      	ldrb	r3, [r7, #31]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b7a      	ldr	r3, [pc, #488]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4a79      	ldr	r2, [pc, #484]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80fe 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	f040 80d0 	bne.w	8003a50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038b0:	4b72      	ldr	r3, [pc, #456]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d130      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	3b01      	subs	r3, #1
 80038d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d127      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d11f      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038f0:	2a07      	cmp	r2, #7
 80038f2:	bf14      	ite	ne
 80038f4:	2201      	movne	r2, #1
 80038f6:	2200      	moveq	r2, #0
 80038f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d113      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d109      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d06e      	beq.n	8003a04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d069      	beq.n	8003a00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800392c:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003938:	4b50      	ldr	r3, [pc, #320]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ad      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003948:	4b4c      	ldr	r3, [pc, #304]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800394e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003954:	f7fe ff18 	bl	8002788 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe ff14 	bl	8002788 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e09a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396e:	4b43      	ldr	r3, [pc, #268]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397a:	4b40      	ldr	r3, [pc, #256]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	4b40      	ldr	r3, [pc, #256]	@ (8003a80 <HAL_RCC_OscConfig+0x784>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800398a:	3a01      	subs	r2, #1
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003994:	0212      	lsls	r2, r2, #8
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800399c:	0852      	lsrs	r2, r2, #1
 800399e:	3a01      	subs	r2, #1
 80039a0:	0552      	lsls	r2, r2, #21
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	3a01      	subs	r2, #1
 80039ac:	0652      	lsls	r2, r2, #25
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039b4:	0912      	lsrs	r2, r2, #4
 80039b6:	0452      	lsls	r2, r2, #17
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4930      	ldr	r1, [pc, #192]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039c0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039cc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039d8:	f7fe fed6 	bl	8002788 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe fed2 	bl	8002788 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e058      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fe:	e050      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e04f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a04:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d148      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a19      	ldr	r2, [pc, #100]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1c:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a28:	f7fe feae 	bl	8002788 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe feaa 	bl	8002788 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e030      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a42:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x734>
 8003a4e:	e028      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d023      	beq.n	8003a9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a08      	ldr	r2, [pc, #32]	@ (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe fe91 	bl	8002788 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a68:	e00c      	b.n	8003a84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fe fe8d 	bl	8002788 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d905      	bls.n	8003a84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e013      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a84:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ec      	bne.n	8003a6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	4905      	ldr	r1, [pc, #20]	@ (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a96:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_RCC_OscConfig+0x7b4>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	feeefffc 	.word	0xfeeefffc

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0e7      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b75      	ldr	r3, [pc, #468]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b72      	ldr	r3, [pc, #456]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4970      	ldr	r1, [pc, #448]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0cf      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b66      	ldr	r3, [pc, #408]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d908      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b63      	ldr	r3, [pc, #396]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4960      	ldr	r1, [pc, #384]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d04c      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0a6      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	4b54      	ldr	r3, [pc, #336]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d115      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e09a      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e08e      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e086      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4943      	ldr	r1, [pc, #268]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fdf4 	bl	8002788 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fe fdf0 	bl	8002788 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e06e      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d010      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d208      	bcs.n	8003bfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	492b      	ldr	r1, [pc, #172]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d210      	bcs.n	8003c2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c08:	4b25      	ldr	r3, [pc, #148]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 0207 	bic.w	r2, r3, #7
 8003c10:	4923      	ldr	r1, [pc, #140]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c18:	4b21      	ldr	r3, [pc, #132]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e036      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4918      	ldr	r1, [pc, #96]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c54:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4910      	ldr	r1, [pc, #64]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c68:	f000 f824 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	490b      	ldr	r1, [pc, #44]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	4a09      	ldr	r2, [pc, #36]	@ (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c88:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe fd2b 	bl	80026e8 <HAL_InitTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c96:	7afb      	ldrb	r3, [r7, #11]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	0801226c 	.word	0x0801226c
 8003cac:	20000200 	.word	0x20000200
 8003cb0:	20000204 	.word	0x20000204

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	@ 0x24
 8003cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d121      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d11e      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ce8:	4b34      	ldr	r3, [pc, #208]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cf4:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e005      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d04:	4b2d      	ldr	r3, [pc, #180]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d10:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10d      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d2c:	4b25      	ldr	r3, [pc, #148]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e004      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d38:	4b23      	ldr	r3, [pc, #140]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d134      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d42:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d003      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0xac>
 8003d58:	e005      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d5c:	617b      	str	r3, [r7, #20]
      break;
 8003d5e:	e005      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d60:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d62:	617b      	str	r3, [r7, #20]
      break;
 8003d64:	e002      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	617b      	str	r3, [r7, #20]
      break;
 8003d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d6c:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	3301      	adds	r3, #1
 8003d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d7a:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	fb03 f202 	mul.w	r2, r3, r2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	0e5b      	lsrs	r3, r3, #25
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dac:	69bb      	ldr	r3, [r7, #24]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	@ 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08012284 	.word	0x08012284
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	007a1200 	.word	0x007a1200

08003dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000200 	.word	0x20000200

08003de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003de8:	f7ff fff0 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4904      	ldr	r1, [pc, #16]	@ (8003e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	0801227c 	.word	0x0801227c

08003e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e14:	f7ff ffda 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4904      	ldr	r1, [pc, #16]	@ (8003e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	0801227c 	.word	0x0801227c

08003e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e48:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e54:	f7ff f9ee 	bl	8003234 <HAL_PWREx_GetVoltageRange>
 8003e58:	6178      	str	r0, [r7, #20]
 8003e5a:	e014      	b.n	8003e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e60:	4a24      	ldr	r2, [pc, #144]	@ (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e68:	4b22      	ldr	r3, [pc, #136]	@ (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e74:	f7ff f9de 	bl	8003234 <HAL_PWREx_GetVoltageRange>
 8003e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8c:	d10b      	bne.n	8003ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b80      	cmp	r3, #128	@ 0x80
 8003e92:	d919      	bls.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e98:	d902      	bls.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e013      	b.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e010      	b.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b80      	cmp	r3, #128	@ 0x80
 8003eaa:	d902      	bls.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003eac:	2303      	movs	r3, #3
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e00a      	b.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b80      	cmp	r3, #128	@ 0x80
 8003eb6:	d102      	bne.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eb8:	2302      	movs	r3, #2
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	e004      	b.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b70      	cmp	r3, #112	@ 0x70
 8003ec2:	d101      	bne.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 0207 	bic.w	r2, r3, #7
 8003ed0:	4909      	ldr	r1, [pc, #36]	@ (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ed8:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d001      	beq.n	8003eea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40022000 	.word	0x40022000

08003efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f04:	2300      	movs	r3, #0
 8003f06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d041      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f20:	d02a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f26:	d824      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f32:	d81e      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f3c:	d010      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f3e:	e018      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f40:	4b86      	ldr	r3, [pc, #536]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a85      	ldr	r2, [pc, #532]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f4c:	e015      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fabb 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f5e:	e00c      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3320      	adds	r3, #32
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fba6 	bl	80046b8 <RCCEx_PLLSAI2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f70:	e003      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	74fb      	strb	r3, [r7, #19]
      break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f80:	4b76      	ldr	r3, [pc, #472]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f8e:	4973      	ldr	r1, [pc, #460]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f96:	e001      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d041      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fb0:	d02a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fb2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fb6:	d824      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fc2:	d81e      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fce:	e018      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fd0:	4b62      	ldr	r3, [pc, #392]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a61      	ldr	r2, [pc, #388]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fdc:	e015      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fa73 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fee:	e00c      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3320      	adds	r3, #32
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fb5e 	bl	80046b8 <RCCEx_PLLSAI2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	74fb      	strb	r3, [r7, #19]
      break;
 8004006:	e000      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004010:	4b52      	ldr	r3, [pc, #328]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800401e:	494f      	ldr	r1, [pc, #316]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a0 	beq.w	800417a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800403e:	4b47      	ldr	r3, [pc, #284]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004054:	4b41      	ldr	r3, [pc, #260]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	4a40      	ldr	r2, [pc, #256]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004060:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406c:	2301      	movs	r3, #1
 800406e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004070:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a3a      	ldr	r2, [pc, #232]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800407c:	f7fe fb84 	bl	8002788 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004082:	e009      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004084:	f7fe fb80 	bl	8002788 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d902      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	74fb      	strb	r3, [r7, #19]
        break;
 8004096:	e005      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004098:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ef      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d15c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040aa:	4b2c      	ldr	r3, [pc, #176]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01f      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d019      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040c8:	4b24      	ldr	r3, [pc, #144]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040d4:	4b21      	ldr	r3, [pc, #132]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	4a20      	ldr	r2, [pc, #128]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040e4:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	4a1c      	ldr	r2, [pc, #112]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040f4:	4a19      	ldr	r2, [pc, #100]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fe fb3f 	bl	8002788 <HAL_GetTick>
 800410a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410c:	e00b      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe fb3b 	bl	8002788 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d902      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	74fb      	strb	r3, [r7, #19]
            break;
 8004124:	e006      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ec      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10c      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413a:	4b08      	ldr	r3, [pc, #32]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004140:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800414a:	4904      	ldr	r1, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004152:	e009      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	74bb      	strb	r3, [r7, #18]
 8004158:	e006      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004168:	7c7b      	ldrb	r3, [r7, #17]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d105      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800416e:	4b9e      	ldr	r3, [pc, #632]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	4a9d      	ldr	r2, [pc, #628]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004186:	4b98      	ldr	r3, [pc, #608]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	f023 0203 	bic.w	r2, r3, #3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	4994      	ldr	r1, [pc, #592]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a8:	4b8f      	ldr	r3, [pc, #572]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f023 020c 	bic.w	r2, r3, #12
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b6:	498c      	ldr	r1, [pc, #560]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ca:	4b87      	ldr	r3, [pc, #540]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	4983      	ldr	r1, [pc, #524]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ec:	4b7e      	ldr	r3, [pc, #504]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	497b      	ldr	r1, [pc, #492]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800420e:	4b76      	ldr	r3, [pc, #472]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421c:	4972      	ldr	r1, [pc, #456]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004230:	4b6d      	ldr	r3, [pc, #436]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423e:	496a      	ldr	r1, [pc, #424]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004252:	4b65      	ldr	r3, [pc, #404]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	4961      	ldr	r1, [pc, #388]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004274:	4b5c      	ldr	r3, [pc, #368]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004282:	4959      	ldr	r1, [pc, #356]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004296:	4b54      	ldr	r3, [pc, #336]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a4:	4950      	ldr	r1, [pc, #320]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042b8:	4b4b      	ldr	r3, [pc, #300]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c6:	4948      	ldr	r1, [pc, #288]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042da:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	493f      	ldr	r1, [pc, #252]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d028      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042fc:	4b3a      	ldr	r3, [pc, #232]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800430a:	4937      	ldr	r1, [pc, #220]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800431a:	d106      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b32      	ldr	r3, [pc, #200]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a31      	ldr	r2, [pc, #196]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
 8004328:	e011      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004332:	d10c      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f8c8 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800434a:	7cfb      	ldrb	r3, [r7, #19]
 800434c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d028      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800435a:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004360:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004368:	491f      	ldr	r1, [pc, #124]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004374:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004378:	d106      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437a:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004384:	60d3      	str	r3, [r2, #12]
 8004386:	e011      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004390:	d10c      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	2101      	movs	r1, #1
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f899 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d02b      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c6:	4908      	ldr	r1, [pc, #32]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043d6:	d109      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043d8:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4a02      	ldr	r2, [pc, #8]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043e2:	60d3      	str	r3, [r2, #12]
 80043e4:	e014      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f867 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02f      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800441c:	4b2b      	ldr	r3, [pc, #172]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800442a:	4928      	ldr	r1, [pc, #160]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800443a:	d10d      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	2102      	movs	r1, #2
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f844 	bl	80044d0 <RCCEx_PLLSAI1_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d014      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	74bb      	strb	r3, [r7, #18]
 8004456:	e011      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800445c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3320      	adds	r3, #32
 8004466:	2102      	movs	r1, #2
 8004468:	4618      	mov	r0, r3
 800446a:	f000 f925 	bl	80046b8 <RCCEx_PLLSAI2_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004488:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004496:	490d      	ldr	r1, [pc, #52]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044aa:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ba:	4904      	ldr	r1, [pc, #16]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000

080044d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044de:	4b75      	ldr	r3, [pc, #468]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d018      	beq.n	800451c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ea:	4b72      	ldr	r3, [pc, #456]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0203 	and.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d10d      	bne.n	8004516 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
       ||
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004502:	4b6c      	ldr	r3, [pc, #432]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
       ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d047      	beq.n	80045a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	e044      	b.n	80045a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d018      	beq.n	8004556 <RCCEx_PLLSAI1_Config+0x86>
 8004524:	2b03      	cmp	r3, #3
 8004526:	d825      	bhi.n	8004574 <RCCEx_PLLSAI1_Config+0xa4>
 8004528:	2b01      	cmp	r3, #1
 800452a:	d002      	beq.n	8004532 <RCCEx_PLLSAI1_Config+0x62>
 800452c:	2b02      	cmp	r3, #2
 800452e:	d009      	beq.n	8004544 <RCCEx_PLLSAI1_Config+0x74>
 8004530:	e020      	b.n	8004574 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004532:	4b60      	ldr	r3, [pc, #384]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d11d      	bne.n	800457a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004542:	e01a      	b.n	800457a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004544:	4b5b      	ldr	r3, [pc, #364]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d116      	bne.n	800457e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e013      	b.n	800457e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004556:	4b57      	ldr	r3, [pc, #348]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10f      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004562:	4b54      	ldr	r3, [pc, #336]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004572:	e006      	b.n	8004582 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	e004      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800457a:	bf00      	nop
 800457c:	e002      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004582:	bf00      	nop
    }

    if(status == HAL_OK)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800458a:	4b4a      	ldr	r3, [pc, #296]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	3b01      	subs	r3, #1
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	430b      	orrs	r3, r1
 80045a0:	4944      	ldr	r1, [pc, #272]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d17d      	bne.n	80046a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045ac:	4b41      	ldr	r3, [pc, #260]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a40      	ldr	r2, [pc, #256]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fe f8e6 	bl	8002788 <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045be:	e009      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c0:	f7fe f8e2 	bl	8002788 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d902      	bls.n	80045d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
        break;
 80045d2:	e005      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d4:	4b37      	ldr	r3, [pc, #220]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ef      	bne.n	80045c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d160      	bne.n	80046a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d111      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ec:	4b31      	ldr	r3, [pc, #196]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6892      	ldr	r2, [r2, #8]
 80045fc:	0211      	lsls	r1, r2, #8
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68d2      	ldr	r2, [r2, #12]
 8004602:	0912      	lsrs	r2, r2, #4
 8004604:	0452      	lsls	r2, r2, #17
 8004606:	430a      	orrs	r2, r1
 8004608:	492a      	ldr	r1, [pc, #168]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	610b      	str	r3, [r1, #16]
 800460e:	e027      	b.n	8004660 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d112      	bne.n	800463c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004616:	4b27      	ldr	r3, [pc, #156]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800461e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6892      	ldr	r2, [r2, #8]
 8004626:	0211      	lsls	r1, r2, #8
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6912      	ldr	r2, [r2, #16]
 800462c:	0852      	lsrs	r2, r2, #1
 800462e:	3a01      	subs	r2, #1
 8004630:	0552      	lsls	r2, r2, #21
 8004632:	430a      	orrs	r2, r1
 8004634:	491f      	ldr	r1, [pc, #124]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	610b      	str	r3, [r1, #16]
 800463a:	e011      	b.n	8004660 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800463c:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004644:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6892      	ldr	r2, [r2, #8]
 800464c:	0211      	lsls	r1, r2, #8
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6952      	ldr	r2, [r2, #20]
 8004652:	0852      	lsrs	r2, r2, #1
 8004654:	3a01      	subs	r2, #1
 8004656:	0652      	lsls	r2, r2, #25
 8004658:	430a      	orrs	r2, r1
 800465a:	4916      	ldr	r1, [pc, #88]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004660:	4b14      	ldr	r3, [pc, #80]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a13      	ldr	r2, [pc, #76]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004666:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800466a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fe f88c 	bl	8002788 <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004672:	e009      	b.n	8004688 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004674:	f7fe f888 	bl	8002788 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d902      	bls.n	8004688 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	73fb      	strb	r3, [r7, #15]
          break;
 8004686:	e005      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004688:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0ef      	beq.n	8004674 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800469a:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	4904      	ldr	r1, [pc, #16]	@ (80046b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000

080046b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d018      	beq.n	8004704 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046d2:	4b67      	ldr	r3, [pc, #412]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0203 	and.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d10d      	bne.n	80046fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
       ||
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046ea:	4b61      	ldr	r3, [pc, #388]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
       ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d047      	beq.n	800478e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	e044      	b.n	800478e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d018      	beq.n	800473e <RCCEx_PLLSAI2_Config+0x86>
 800470c:	2b03      	cmp	r3, #3
 800470e:	d825      	bhi.n	800475c <RCCEx_PLLSAI2_Config+0xa4>
 8004710:	2b01      	cmp	r3, #1
 8004712:	d002      	beq.n	800471a <RCCEx_PLLSAI2_Config+0x62>
 8004714:	2b02      	cmp	r3, #2
 8004716:	d009      	beq.n	800472c <RCCEx_PLLSAI2_Config+0x74>
 8004718:	e020      	b.n	800475c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800471a:	4b55      	ldr	r3, [pc, #340]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11d      	bne.n	8004762 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800472a:	e01a      	b.n	8004762 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800472c:	4b50      	ldr	r3, [pc, #320]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d116      	bne.n	8004766 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473c:	e013      	b.n	8004766 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800473e:	4b4c      	ldr	r3, [pc, #304]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800474a:	4b49      	ldr	r3, [pc, #292]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800475a:	e006      	b.n	800476a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      break;
 8004760:	e004      	b.n	800476c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800476a:	bf00      	nop
    }

    if(status == HAL_OK)
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004772:	4b3f      	ldr	r3, [pc, #252]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	430b      	orrs	r3, r1
 8004788:	4939      	ldr	r1, [pc, #228]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d167      	bne.n	8004864 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004794:	4b36      	ldr	r3, [pc, #216]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a35      	ldr	r2, [pc, #212]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a0:	f7fd fff2 	bl	8002788 <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047a6:	e009      	b.n	80047bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047a8:	f7fd ffee 	bl	8002788 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d902      	bls.n	80047bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ba:	e005      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ef      	bne.n	80047a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d14a      	bne.n	8004864 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d111      	bne.n	80047f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047d4:	4b26      	ldr	r3, [pc, #152]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	0211      	lsls	r1, r2, #8
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68d2      	ldr	r2, [r2, #12]
 80047ea:	0912      	lsrs	r2, r2, #4
 80047ec:	0452      	lsls	r2, r2, #17
 80047ee:	430a      	orrs	r2, r1
 80047f0:	491f      	ldr	r1, [pc, #124]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	614b      	str	r3, [r1, #20]
 80047f6:	e011      	b.n	800481c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004800:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	0211      	lsls	r1, r2, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6912      	ldr	r2, [r2, #16]
 800480e:	0852      	lsrs	r2, r2, #1
 8004810:	3a01      	subs	r2, #1
 8004812:	0652      	lsls	r2, r2, #25
 8004814:	430a      	orrs	r2, r1
 8004816:	4916      	ldr	r1, [pc, #88]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800481c:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a13      	ldr	r2, [pc, #76]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004826:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004828:	f7fd ffae 	bl	8002788 <HAL_GetTick>
 800482c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800482e:	e009      	b.n	8004844 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004830:	f7fd ffaa 	bl	8002788 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d902      	bls.n	8004844 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	73fb      	strb	r3, [r7, #15]
          break;
 8004842:	e005      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004844:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ef      	beq.n	8004830 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	4904      	ldr	r1, [pc, #16]	@ (8004870 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000

08004874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e095      	b.n	80049b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004896:	d009      	beq.n	80048ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	61da      	str	r2, [r3, #28]
 800489e:	e005      	b.n	80048ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fc74 	bl	80021b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048ec:	d902      	bls.n	80048f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e002      	b.n	80048fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004902:	d007      	beq.n	8004914 <HAL_SPI_Init+0xa0>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800490c:	d002      	beq.n	8004914 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004956:	ea42 0103 	orr.w	r1, r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	0c1b      	lsrs	r3, r3, #16
 8004970:	f003 0204 	and.w	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004990:	ea42 0103 	orr.w	r1, r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b088      	sub	sp, #32
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ca:	f7fd fedd 	bl	8002788 <HAL_GetTick>
 80049ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d001      	beq.n	80049e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
 80049e2:	e15c      	b.n	8004c9e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_Transmit+0x36>
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e154      	b.n	8004c9e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_SPI_Transmit+0x48>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e14d      	b.n	8004c9e <HAL_SPI_Transmit+0x2e4>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a54:	d10f      	bne.n	8004a76 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d007      	beq.n	8004a94 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a9c:	d952      	bls.n	8004b44 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Transmit+0xf2>
 8004aa6:	8b7b      	ldrh	r3, [r7, #26]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d145      	bne.n	8004b38 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abc:	1c9a      	adds	r2, r3, #2
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ad0:	e032      	b.n	8004b38 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d112      	bne.n	8004b06 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b04:	e018      	b.n	8004b38 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b06:	f7fd fe3f 	bl	8002788 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d803      	bhi.n	8004b1e <HAL_SPI_Transmit+0x164>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_Transmit+0x16a>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e0b2      	b.n	8004c9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1c7      	bne.n	8004ad2 <HAL_SPI_Transmit+0x118>
 8004b42:	e083      	b.n	8004c4c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_Transmit+0x198>
 8004b4c:	8b7b      	ldrh	r3, [r7, #26]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d177      	bne.n	8004c42 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d912      	bls.n	8004b82 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	1c9a      	adds	r2, r3, #2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b02      	subs	r3, #2
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b80:	e05f      	b.n	8004c42 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ba8:	e04b      	b.n	8004c42 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d12b      	bne.n	8004c10 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d912      	bls.n	8004be8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b02      	subs	r3, #2
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004be6:	e02c      	b.n	8004c42 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c0e:	e018      	b.n	8004c42 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c10:	f7fd fdba 	bl	8002788 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d803      	bhi.n	8004c28 <HAL_SPI_Transmit+0x26e>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Transmit+0x274>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e02d      	b.n	8004c9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1ae      	bne.n	8004baa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	6839      	ldr	r1, [r7, #0]
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fbd3 	bl	80053fc <SPI_EndRxTxTransaction>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d001      	beq.n	8004cc6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0d4      	b.n	8004e70 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_SPI_Transmit_DMA+0x2a>
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0cc      	b.n	8004e70 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_SPI_Transmit_DMA+0x3c>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e0c5      	b.n	8004e70 <HAL_SPI_Transmit_DMA+0x1c8>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d36:	d10f      	bne.n	8004d58 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	4a46      	ldr	r2, [pc, #280]	@ (8004e78 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	4a45      	ldr	r2, [pc, #276]	@ (8004e7c <HAL_SPI_Transmit_DMA+0x1d4>)
 8004d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	4a44      	ldr	r2, [pc, #272]	@ (8004e80 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004d6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d74:	2200      	movs	r2, #0
 8004d76:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d86:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d90:	d82d      	bhi.n	8004dee <HAL_SPI_Transmit_DMA+0x146>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9c:	d127      	bne.n	8004dee <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10f      	bne.n	8004dcc <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dca:	e010      	b.n	8004dee <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dda:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	4619      	mov	r1, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e04:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e06:	f7fd fe95 	bl	8002b34 <HAL_DMA_Start_IT>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e14:	f043 0210 	orr.w	r2, r3, #16
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e023      	b.n	8004e70 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e32:	2b40      	cmp	r3, #64	@ 0x40
 8004e34:	d007      	beq.n	8004e46 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0220 	orr.w	r2, r2, #32
 8004e5c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0202 	orr.w	r2, r2, #2
 8004e6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	0800513b 	.word	0x0800513b
 8004e7c:	08005095 	.word	0x08005095
 8004e80:	08005157 	.word	0x08005157

08004e84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
    return;
 8004ec2:	e0ce      	b.n	8005062 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_SPI_IRQHandler+0x5e>
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
    return;
 8004ee0:	e0bf      	b.n	8005062 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_SPI_IRQHandler+0x7e>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80b0 	beq.w	8005062 <HAL_SPI_IRQHandler+0x1de>
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80aa 	beq.w	8005062 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d023      	beq.n	8004f60 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d011      	beq.n	8004f48 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	e00b      	b.n	8004f60 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
        return;
 8004f5e:	e080      	b.n	8005062 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d014      	beq.n	8004f94 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa2:	f043 0208 	orr.w	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d04f      	beq.n	8005060 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <HAL_SPI_IRQHandler+0x168>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d034      	beq.n	8005056 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0203 	bic.w	r2, r2, #3
 8004ffa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	2b00      	cmp	r3, #0
 8005002:	d011      	beq.n	8005028 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005008:	4a17      	ldr	r2, [pc, #92]	@ (8005068 <HAL_SPI_IRQHandler+0x1e4>)
 800500a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005010:	4618      	mov	r0, r3
 8005012:	f7fd fe2d 	bl	8002c70 <HAL_DMA_Abort_IT>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005020:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502c:	2b00      	cmp	r3, #0
 800502e:	d016      	beq.n	800505e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005034:	4a0c      	ldr	r2, [pc, #48]	@ (8005068 <HAL_SPI_IRQHandler+0x1e4>)
 8005036:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503c:	4618      	mov	r0, r3
 800503e:	f7fd fe17 	bl	8002c70 <HAL_DMA_Abort_IT>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005054:	e003      	b.n	800505e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f812 	bl	8005080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800505c:	e000      	b.n	8005060 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800505e:	bf00      	nop
    return;
 8005060:	bf00      	nop
  }
}
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	08005197 	.word	0x08005197

0800506c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a2:	f7fd fb71 	bl	8002788 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d03b      	beq.n	800512e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0220 	bic.w	r2, r2, #32
 80050c4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0202 	bic.w	r2, r2, #2
 80050d4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	2164      	movs	r1, #100	@ 0x64
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f000 f98e 	bl	80053fc <SPI_EndRxTxTransaction>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2200      	movs	r2, #0
 8005114:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff ffaa 	bl	8005080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800512c:	e002      	b.n	8005134 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800512e:	6978      	ldr	r0, [r7, #20]
 8005130:	f7fc fefe 	bl	8001f30 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff ff8f 	bl	800506c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0203 	bic.w	r2, r2, #3
 8005172:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005178:	f043 0210 	orr.w	r2, r3, #16
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff ff79 	bl	8005080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff ff64 	bl	8005080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051d0:	f7fd fada 	bl	8002788 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	4413      	add	r3, r2
 80051de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051e0:	f7fd fad2 	bl	8002788 <HAL_GetTick>
 80051e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051e6:	4b39      	ldr	r3, [pc, #228]	@ (80052cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	015b      	lsls	r3, r3, #5
 80051ec:	0d1b      	lsrs	r3, r3, #20
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f6:	e054      	b.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d050      	beq.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005200:	f7fd fac2 	bl	8002788 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	429a      	cmp	r2, r3
 800520e:	d902      	bls.n	8005216 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d13d      	bne.n	8005292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800522e:	d111      	bne.n	8005254 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005238:	d004      	beq.n	8005244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005242:	d107      	bne.n	8005254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800525c:	d10f      	bne.n	800527e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800527c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e017      	b.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	3b01      	subs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d19b      	bne.n	80051f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000200 	.word	0x20000200

080052d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	@ 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052e2:	f7fd fa51 	bl	8002788 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	4413      	add	r3, r2
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80052f2:	f7fd fa49 	bl	8002788 <HAL_GetTick>
 80052f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005300:	4b3d      	ldr	r3, [pc, #244]	@ (80053f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	00da      	lsls	r2, r3, #3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	0d1b      	lsrs	r3, r3, #20
 8005310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005318:	e060      	b.n	80053dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005320:	d107      	bne.n	8005332 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005330:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d050      	beq.n	80053dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800533a:	f7fd fa25 	bl	8002788 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005346:	429a      	cmp	r2, r3
 8005348:	d902      	bls.n	8005350 <SPI_WaitFifoStateUntilTimeout+0x80>
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d13d      	bne.n	80053cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800535e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005368:	d111      	bne.n	800538e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005372:	d004      	beq.n	800537e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537c:	d107      	bne.n	800538e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800538c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005396:	d10f      	bne.n	80053b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e010      	b.n	80053ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	3b01      	subs	r3, #1
 80053da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d196      	bne.n	800531a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3728      	adds	r7, #40	@ 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000200 	.word	0x20000200

080053fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff ff5b 	bl	80052d0 <SPI_WaitFifoStateUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e027      	b.n	8005480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	2180      	movs	r1, #128	@ 0x80
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fec0 	bl	80051c0 <SPI_WaitFlagStateUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e014      	b.n	8005480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff ff34 	bl	80052d0 <SPI_WaitFifoStateUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e000      	b.n	8005480 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e040      	b.n	800551c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd f876 	bl	800259c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2224      	movs	r2, #36	@ 0x24
 80054b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fea6 	bl	8006220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fbeb 	bl	8005cb0 <UART_SetConfig>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e01b      	b.n	800551c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 ff25 	bl	8006364 <UART_CheckIdleState>
 800551a:	4603      	mov	r3, r0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005524:	b480      	push	{r7}
 8005526:	b08b      	sub	sp, #44	@ 0x2c
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005536:	2b20      	cmp	r3, #32
 8005538:	d147      	bne.n	80055ca <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_UART_Transmit_IT+0x22>
 8005540:	88fb      	ldrh	r3, [r7, #6]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e040      	b.n	80055cc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2221      	movs	r2, #33	@ 0x21
 8005572:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557c:	d107      	bne.n	800558e <HAL_UART_Transmit_IT+0x6a>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d103      	bne.n	800558e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a13      	ldr	r2, [pc, #76]	@ (80055d8 <HAL_UART_Transmit_IT+0xb4>)
 800558a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800558c:	e002      	b.n	8005594 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a12      	ldr	r2, [pc, #72]	@ (80055dc <HAL_UART_Transmit_IT+0xb8>)
 8005592:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	613b      	str	r3, [r7, #16]
   return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	69f9      	ldr	r1, [r7, #28]
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e6      	bne.n	8005594 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	372c      	adds	r7, #44	@ 0x2c
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	080068c7 	.word	0x080068c7
 80055dc:	08006811 	.word	0x08006811

080055e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	@ 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d137      	bne.n	8005668 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_UART_Receive_IT+0x24>
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e030      	b.n	800566a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <HAL_UART_Receive_IT+0x94>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01f      	beq.n	8005658 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	613b      	str	r3, [r7, #16]
   return(result);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	623b      	str	r3, [r7, #32]
 8005646:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	6a3a      	ldr	r2, [r7, #32]
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	61bb      	str	r3, [r7, #24]
   return(result);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e6      	bne.n	8005626 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	461a      	mov	r2, r3
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 ff96 	bl	8006590 <UART_Start_Receive_IT>
 8005664:	4603      	mov	r3, r0
 8005666:	e000      	b.n	800566a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3728      	adds	r7, #40	@ 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40008000 	.word	0x40008000

08005678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b0ba      	sub	sp, #232	@ 0xe8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800569e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056a6:	4013      	ands	r3, r2
 80056a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d115      	bne.n	80056e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00f      	beq.n	80056e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 82ca 	beq.w	8005c6a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
      }
      return;
 80056de:	e2c4      	b.n	8005c6a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80056e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8117 	beq.w	8005918 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80056fa:	4b85      	ldr	r3, [pc, #532]	@ (8005910 <HAL_UART_IRQHandler+0x298>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 810a 	beq.w	8005918 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d011      	beq.n	8005734 <HAL_UART_IRQHandler+0xbc>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800572a:	f043 0201 	orr.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d011      	beq.n	8005764 <HAL_UART_IRQHandler+0xec>
 8005740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00b      	beq.n	8005764 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2202      	movs	r2, #2
 8005752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575a:	f043 0204 	orr.w	r2, r3, #4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d011      	beq.n	8005794 <HAL_UART_IRQHandler+0x11c>
 8005770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2204      	movs	r2, #4
 8005782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800578a:	f043 0202 	orr.w	r2, r3, #2
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d017      	beq.n	80057d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2208      	movs	r2, #8
 80057be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c6:	f043 0208 	orr.w	r2, r3, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d012      	beq.n	8005802 <HAL_UART_IRQHandler+0x18a>
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00c      	beq.n	8005802 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8230 	beq.w	8005c6e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800581a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584a:	2b40      	cmp	r3, #64	@ 0x40
 800584c:	d005      	beq.n	800585a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800584e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005852:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04f      	beq.n	80058fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 ff5e 	bl	800671c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b40      	cmp	r3, #64	@ 0x40
 800586c:	d141      	bne.n	80058f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800588c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800589a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800589e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1d9      	bne.n	800586e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d013      	beq.n	80058ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c6:	4a13      	ldr	r2, [pc, #76]	@ (8005914 <HAL_UART_IRQHandler+0x29c>)
 80058c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd f9ce 	bl	8002c70 <HAL_DMA_Abort_IT>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058e4:	4610      	mov	r0, r2
 80058e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	e00f      	b.n	800590a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f9ca 	bl	8005c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	e00b      	b.n	800590a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9c6 	bl	8005c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e007      	b.n	800590a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f9c2 	bl	8005c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005908:	e1b1      	b.n	8005c6e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590a:	bf00      	nop
    return;
 800590c:	e1af      	b.n	8005c6e <HAL_UART_IRQHandler+0x5f6>
 800590e:	bf00      	nop
 8005910:	04000120 	.word	0x04000120
 8005914:	080067e5 	.word	0x080067e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591c:	2b01      	cmp	r3, #1
 800591e:	f040 816a 	bne.w	8005bf6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8163 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 815c 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2210      	movs	r2, #16
 8005944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005950:	2b40      	cmp	r3, #64	@ 0x40
 8005952:	f040 80d4 	bne.w	8005afe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005962:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80ad 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005976:	429a      	cmp	r2, r3
 8005978:	f080 80a5 	bcs.w	8005ac6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005982:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 8086 	bne.w	8005aa4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1da      	bne.n	8005998 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e1      	bne.n	80059e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3308      	adds	r3, #8
 8005a24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e3      	bne.n	8005a1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e4      	bne.n	8005a64 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd f8a8 	bl	8002bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8ea 	bl	8005c98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005ac4:	e0d5      	b.n	8005c72 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005acc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	f040 80ce 	bne.w	8005c72 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	f040 80c5 	bne.w	8005c72 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8ce 	bl	8005c98 <HAL_UARTEx_RxEventCallback>
      return;
 8005afc:	e0b9      	b.n	8005c72 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80ab 	beq.w	8005c76 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80a6 	beq.w	8005c76 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e4      	bne.n	8005b2a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3308      	adds	r3, #8
 8005b66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3308      	adds	r3, #8
 8005b80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b84:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e3      	bne.n	8005b60 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f023 0310 	bic.w	r3, r3, #16
 8005bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	617b      	str	r3, [r7, #20]
   return(result);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e4      	bne.n	8005bac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f852 	bl	8005c98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bf4:	e03f      	b.n	8005c76 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <HAL_UART_IRQHandler+0x5a8>
 8005c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f89b 	bl	8006d54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c1e:	e02d      	b.n	8005c7c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00e      	beq.n	8005c4a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01c      	beq.n	8005c7a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
    }
    return;
 8005c48:	e017      	b.n	8005c7a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <HAL_UART_IRQHandler+0x604>
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fe8f 	bl	8006986 <UART_EndTransmit_IT>
    return;
 8005c68:	e008      	b.n	8005c7c <HAL_UART_IRQHandler+0x604>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e006      	b.n	8005c7c <HAL_UART_IRQHandler+0x604>
    return;
 8005c6e:	bf00      	nop
 8005c70:	e004      	b.n	8005c7c <HAL_UART_IRQHandler+0x604>
      return;
 8005c72:	bf00      	nop
 8005c74:	e002      	b.n	8005c7c <HAL_UART_IRQHandler+0x604>
      return;
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <HAL_UART_IRQHandler+0x604>
    return;
 8005c7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c7c:	37e8      	adds	r7, #232	@ 0xe8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop

08005c84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb4:	b08a      	sub	sp, #40	@ 0x28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4ba4      	ldr	r3, [pc, #656]	@ (8005f70 <UART_SetConfig+0x2c0>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	6812      	ldr	r2, [r2, #0]
 8005ce6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a99      	ldr	r2, [pc, #612]	@ (8005f74 <UART_SetConfig+0x2c4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a90      	ldr	r2, [pc, #576]	@ (8005f78 <UART_SetConfig+0x2c8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d126      	bne.n	8005d88 <UART_SetConfig+0xd8>
 8005d3a:	4b90      	ldr	r3, [pc, #576]	@ (8005f7c <UART_SetConfig+0x2cc>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d81b      	bhi.n	8005d80 <UART_SetConfig+0xd0>
 8005d48:	a201      	add	r2, pc, #4	@ (adr r2, 8005d50 <UART_SetConfig+0xa0>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	08005d69 	.word	0x08005d69
 8005d5c:	08005d79 	.word	0x08005d79
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d66:	e116      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6e:	e112      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d76:	e10e      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7e:	e10a      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d86:	e106      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8005f80 <UART_SetConfig+0x2d0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d138      	bne.n	8005e04 <UART_SetConfig+0x154>
 8005d92:	4b7a      	ldr	r3, [pc, #488]	@ (8005f7c <UART_SetConfig+0x2cc>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d98:	f003 030c 	and.w	r3, r3, #12
 8005d9c:	2b0c      	cmp	r3, #12
 8005d9e:	d82d      	bhi.n	8005dfc <UART_SetConfig+0x14c>
 8005da0:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <UART_SetConfig+0xf8>)
 8005da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da6:	bf00      	nop
 8005da8:	08005ddd 	.word	0x08005ddd
 8005dac:	08005dfd 	.word	0x08005dfd
 8005db0:	08005dfd 	.word	0x08005dfd
 8005db4:	08005dfd 	.word	0x08005dfd
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005dfd 	.word	0x08005dfd
 8005dc0:	08005dfd 	.word	0x08005dfd
 8005dc4:	08005dfd 	.word	0x08005dfd
 8005dc8:	08005de5 	.word	0x08005de5
 8005dcc:	08005dfd 	.word	0x08005dfd
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de2:	e0d8      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005de4:	2302      	movs	r3, #2
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e0d4      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df2:	e0d0      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfa:	e0cc      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e02:	e0c8      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5e      	ldr	r2, [pc, #376]	@ (8005f84 <UART_SetConfig+0x2d4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d125      	bne.n	8005e5a <UART_SetConfig+0x1aa>
 8005e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8005f7c <UART_SetConfig+0x2cc>)
 8005e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e18:	2b30      	cmp	r3, #48	@ 0x30
 8005e1a:	d016      	beq.n	8005e4a <UART_SetConfig+0x19a>
 8005e1c:	2b30      	cmp	r3, #48	@ 0x30
 8005e1e:	d818      	bhi.n	8005e52 <UART_SetConfig+0x1a2>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d00a      	beq.n	8005e3a <UART_SetConfig+0x18a>
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d814      	bhi.n	8005e52 <UART_SetConfig+0x1a2>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <UART_SetConfig+0x182>
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d008      	beq.n	8005e42 <UART_SetConfig+0x192>
 8005e30:	e00f      	b.n	8005e52 <UART_SetConfig+0x1a2>
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e38:	e0ad      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e40:	e0a9      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e42:	2304      	movs	r3, #4
 8005e44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e48:	e0a5      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e50:	e0a1      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e52:	2310      	movs	r3, #16
 8005e54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e58:	e09d      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f88 <UART_SetConfig+0x2d8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d125      	bne.n	8005eb0 <UART_SetConfig+0x200>
 8005e64:	4b45      	ldr	r3, [pc, #276]	@ (8005f7c <UART_SetConfig+0x2cc>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e70:	d016      	beq.n	8005ea0 <UART_SetConfig+0x1f0>
 8005e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e74:	d818      	bhi.n	8005ea8 <UART_SetConfig+0x1f8>
 8005e76:	2b80      	cmp	r3, #128	@ 0x80
 8005e78:	d00a      	beq.n	8005e90 <UART_SetConfig+0x1e0>
 8005e7a:	2b80      	cmp	r3, #128	@ 0x80
 8005e7c:	d814      	bhi.n	8005ea8 <UART_SetConfig+0x1f8>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <UART_SetConfig+0x1d8>
 8005e82:	2b40      	cmp	r3, #64	@ 0x40
 8005e84:	d008      	beq.n	8005e98 <UART_SetConfig+0x1e8>
 8005e86:	e00f      	b.n	8005ea8 <UART_SetConfig+0x1f8>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e082      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e90:	2302      	movs	r3, #2
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e07e      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e07a      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e076      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eae:	e072      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a35      	ldr	r2, [pc, #212]	@ (8005f8c <UART_SetConfig+0x2dc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d12a      	bne.n	8005f10 <UART_SetConfig+0x260>
 8005eba:	4b30      	ldr	r3, [pc, #192]	@ (8005f7c <UART_SetConfig+0x2cc>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec8:	d01a      	beq.n	8005f00 <UART_SetConfig+0x250>
 8005eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ece:	d81b      	bhi.n	8005f08 <UART_SetConfig+0x258>
 8005ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed4:	d00c      	beq.n	8005ef0 <UART_SetConfig+0x240>
 8005ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eda:	d815      	bhi.n	8005f08 <UART_SetConfig+0x258>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <UART_SetConfig+0x238>
 8005ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ee4:	d008      	beq.n	8005ef8 <UART_SetConfig+0x248>
 8005ee6:	e00f      	b.n	8005f08 <UART_SetConfig+0x258>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eee:	e052      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef6:	e04e      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efe:	e04a      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f00:	2308      	movs	r3, #8
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e046      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0e:	e042      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <UART_SetConfig+0x2c4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d13a      	bne.n	8005f90 <UART_SetConfig+0x2e0>
 8005f1a:	4b18      	ldr	r3, [pc, #96]	@ (8005f7c <UART_SetConfig+0x2cc>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f28:	d01a      	beq.n	8005f60 <UART_SetConfig+0x2b0>
 8005f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f2e:	d81b      	bhi.n	8005f68 <UART_SetConfig+0x2b8>
 8005f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f34:	d00c      	beq.n	8005f50 <UART_SetConfig+0x2a0>
 8005f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f3a:	d815      	bhi.n	8005f68 <UART_SetConfig+0x2b8>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <UART_SetConfig+0x298>
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f44:	d008      	beq.n	8005f58 <UART_SetConfig+0x2a8>
 8005f46:	e00f      	b.n	8005f68 <UART_SetConfig+0x2b8>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e022      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f50:	2302      	movs	r3, #2
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e01e      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5e:	e01a      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f60:	2308      	movs	r3, #8
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f66:	e016      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f6e:	e012      	b.n	8005f96 <UART_SetConfig+0x2e6>
 8005f70:	efff69f3 	.word	0xefff69f3
 8005f74:	40008000 	.word	0x40008000
 8005f78:	40013800 	.word	0x40013800
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40004400 	.word	0x40004400
 8005f84:	40004800 	.word	0x40004800
 8005f88:	40004c00 	.word	0x40004c00
 8005f8c:	40005000 	.word	0x40005000
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a9f      	ldr	r2, [pc, #636]	@ (8006218 <UART_SetConfig+0x568>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d17a      	bne.n	8006096 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d824      	bhi.n	8005ff2 <UART_SetConfig+0x342>
 8005fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x300>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005fe3 	.word	0x08005fe3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08005ff3 	.word	0x08005ff3
 8005fd0:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fd ff06 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b8f      	ldr	r3, [pc, #572]	@ (800621c <UART_SetConfig+0x56c>)
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fe67 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61f8      	str	r0, [r7, #28]
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80fb 	beq.w	80061fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	4413      	add	r3, r2
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	429a      	cmp	r2, r3
 8006014:	d305      	bcc.n	8006022 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	429a      	cmp	r2, r3
 8006020:	d903      	bls.n	800602a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006028:	e0e8      	b.n	80061fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2200      	movs	r2, #0
 800602e:	461c      	mov	r4, r3
 8006030:	4615      	mov	r5, r2
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	022b      	lsls	r3, r5, #8
 800603c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006040:	0222      	lsls	r2, r4, #8
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	6849      	ldr	r1, [r1, #4]
 8006046:	0849      	lsrs	r1, r1, #1
 8006048:	2000      	movs	r0, #0
 800604a:	4688      	mov	r8, r1
 800604c:	4681      	mov	r9, r0
 800604e:	eb12 0a08 	adds.w	sl, r2, r8
 8006052:	eb43 0b09 	adc.w	fp, r3, r9
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	f7fa f90a 	bl	8000280 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4613      	mov	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800607a:	d308      	bcc.n	800608e <UART_SetConfig+0x3de>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006082:	d204      	bcs.n	800608e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	e0b6      	b.n	80061fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006094:	e0b2      	b.n	80061fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800609e:	d15e      	bne.n	800615e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80060a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d828      	bhi.n	80060fa <UART_SetConfig+0x44a>
 80060a8:	a201      	add	r2, pc, #4	@ (adr r2, 80060b0 <UART_SetConfig+0x400>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fd fe86 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e014      	b.n	8006106 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fd fe98 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 80060e0:	61f8      	str	r0, [r7, #28]
        break;
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b4d      	ldr	r3, [pc, #308]	@ (800621c <UART_SetConfig+0x56c>)
 80060e6:	61fb      	str	r3, [r7, #28]
        break;
 80060e8:	e00d      	b.n	8006106 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fd fde3 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 80060ee:	61f8      	str	r0, [r7, #28]
        break;
 80060f0:	e009      	b.n	8006106 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060f6:	61fb      	str	r3, [r7, #28]
        break;
 80060f8:	e005      	b.n	8006106 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d077      	beq.n	80061fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	005a      	lsls	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	441a      	add	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d916      	bls.n	8006156 <UART_SetConfig+0x4a6>
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800612e:	d212      	bcs.n	8006156 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f023 030f 	bic.w	r3, r3, #15
 8006138:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	b29a      	uxth	r2, r3
 8006146:	8afb      	ldrh	r3, [r7, #22]
 8006148:	4313      	orrs	r3, r2
 800614a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	8afa      	ldrh	r2, [r7, #22]
 8006152:	60da      	str	r2, [r3, #12]
 8006154:	e052      	b.n	80061fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800615c:	e04e      	b.n	80061fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800615e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006162:	2b08      	cmp	r3, #8
 8006164:	d827      	bhi.n	80061b6 <UART_SetConfig+0x506>
 8006166:	a201      	add	r2, pc, #4	@ (adr r2, 800616c <UART_SetConfig+0x4bc>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	08006191 	.word	0x08006191
 8006170:	08006199 	.word	0x08006199
 8006174:	080061a1 	.word	0x080061a1
 8006178:	080061b7 	.word	0x080061b7
 800617c:	080061a7 	.word	0x080061a7
 8006180:	080061b7 	.word	0x080061b7
 8006184:	080061b7 	.word	0x080061b7
 8006188:	080061b7 	.word	0x080061b7
 800618c:	080061af 	.word	0x080061af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006190:	f7fd fe28 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 8006194:	61f8      	str	r0, [r7, #28]
        break;
 8006196:	e014      	b.n	80061c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fd fe3a 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 800619c:	61f8      	str	r0, [r7, #28]
        break;
 800619e:	e010      	b.n	80061c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a0:	4b1e      	ldr	r3, [pc, #120]	@ (800621c <UART_SetConfig+0x56c>)
 80061a2:	61fb      	str	r3, [r7, #28]
        break;
 80061a4:	e00d      	b.n	80061c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a6:	f7fd fd85 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 80061aa:	61f8      	str	r0, [r7, #28]
        break;
 80061ac:	e009      	b.n	80061c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061b2:	61fb      	str	r3, [r7, #28]
        break;
 80061b4:	e005      	b.n	80061c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061c0:	bf00      	nop
    }

    if (pclk != 0U)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d019      	beq.n	80061fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	085a      	lsrs	r2, r3, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b0f      	cmp	r3, #15
 80061e0:	d909      	bls.n	80061f6 <UART_SetConfig+0x546>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e8:	d205      	bcs.n	80061f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60da      	str	r2, [r3, #12]
 80061f4:	e002      	b.n	80061fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006208:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800620c:	4618      	mov	r0, r3
 800620e:	3728      	adds	r7, #40	@ 0x28
 8006210:	46bd      	mov	sp, r7
 8006212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006216:	bf00      	nop
 8006218:	40008000 	.word	0x40008000
 800621c:	00f42400 	.word	0x00f42400

08006220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01a      	beq.n	8006336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800631e:	d10a      	bne.n	8006336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	605a      	str	r2, [r3, #4]
  }
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b098      	sub	sp, #96	@ 0x60
 8006368:	af02      	add	r7, sp, #8
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006374:	f7fc fa08 	bl	8002788 <HAL_GetTick>
 8006378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b08      	cmp	r3, #8
 8006386:	d12e      	bne.n	80063e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006390:	2200      	movs	r2, #0
 8006392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f88c 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d021      	beq.n	80063e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80063c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e062      	b.n	80064ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d149      	bne.n	8006488 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f856 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d03c      	beq.n	8006488 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	623b      	str	r3, [r7, #32]
   return(result);
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800642c:	633b      	str	r3, [r7, #48]	@ 0x30
 800642e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006460:	61fa      	str	r2, [r7, #28]
 8006462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	69b9      	ldr	r1, [r7, #24]
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	617b      	str	r3, [r7, #20]
   return(result);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e5      	bne.n	8006440 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e011      	b.n	80064ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3758      	adds	r7, #88	@ 0x58
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c4:	e04f      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d04b      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ce:	f7fc f95b 	bl	8002788 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d302      	bcc.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e04e      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d037      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b80      	cmp	r3, #128	@ 0x80
 80064fa:	d034      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b40      	cmp	r3, #64	@ 0x40
 8006500:	d031      	beq.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b08      	cmp	r3, #8
 800650e:	d110      	bne.n	8006532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2208      	movs	r2, #8
 8006516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f8ff 	bl	800671c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2208      	movs	r2, #8
 8006522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e029      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006540:	d111      	bne.n	8006566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800654a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f8e5 	bl	800671c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e00f      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4013      	ands	r3, r2
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	429a      	cmp	r2, r3
 8006574:	bf0c      	ite	eq
 8006576:	2301      	moveq	r3, #1
 8006578:	2300      	movne	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	429a      	cmp	r2, r3
 8006582:	d0a0      	beq.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006590:	b480      	push	{r7}
 8006592:	b097      	sub	sp, #92	@ 0x5c
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c2:	d10e      	bne.n	80065e2 <UART_Start_Receive_IT+0x52>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <UART_Start_Receive_IT+0x48>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80065d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065d6:	e02d      	b.n	8006634 <UART_Start_Receive_IT+0xa4>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	22ff      	movs	r2, #255	@ 0xff
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065e0:	e028      	b.n	8006634 <UART_Start_Receive_IT+0xa4>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <UART_Start_Receive_IT+0x76>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <UART_Start_Receive_IT+0x6c>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	22ff      	movs	r2, #255	@ 0xff
 80065f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065fa:	e01b      	b.n	8006634 <UART_Start_Receive_IT+0xa4>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	227f      	movs	r2, #127	@ 0x7f
 8006600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006604:	e016      	b.n	8006634 <UART_Start_Receive_IT+0xa4>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800660e:	d10d      	bne.n	800662c <UART_Start_Receive_IT+0x9c>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <UART_Start_Receive_IT+0x92>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	227f      	movs	r2, #127	@ 0x7f
 800661c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006620:	e008      	b.n	8006634 <UART_Start_Receive_IT+0xa4>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	223f      	movs	r2, #63	@ 0x3f
 8006626:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800662a:	e003      	b.n	8006634 <UART_Start_Receive_IT+0xa4>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2222      	movs	r2, #34	@ 0x22
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	657b      	str	r3, [r7, #84]	@ 0x54
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006664:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006666:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800666a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e5      	bne.n	8006644 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006680:	d107      	bne.n	8006692 <UART_Start_Receive_IT+0x102>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4a21      	ldr	r2, [pc, #132]	@ (8006714 <UART_Start_Receive_IT+0x184>)
 800668e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006690:	e002      	b.n	8006698 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4a20      	ldr	r2, [pc, #128]	@ (8006718 <UART_Start_Receive_IT+0x188>)
 8006696:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d019      	beq.n	80066d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80066cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e6      	bne.n	80066a0 <UART_Start_Receive_IT+0x110>
 80066d2:	e018      	b.n	8006706 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	613b      	str	r3, [r7, #16]
   return(result);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f043 0320 	orr.w	r3, r3, #32
 80066e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	69f9      	ldr	r1, [r7, #28]
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	375c      	adds	r7, #92	@ 0x5c
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	08006b99 	.word	0x08006b99
 8006718:	080069dd 	.word	0x080069dd

0800671c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b095      	sub	sp, #84	@ 0x54
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006742:	643b      	str	r3, [r7, #64]	@ 0x40
 8006744:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e6      	bne.n	8006724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	61fb      	str	r3, [r7, #28]
   return(result);
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800677c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e5      	bne.n	8006756 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800678e:	2b01      	cmp	r3, #1
 8006790:	d118      	bne.n	80067c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 0310 	bic.w	r3, r3, #16
 80067a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6979      	ldr	r1, [r7, #20]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	613b      	str	r3, [r7, #16]
   return(result);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e6      	bne.n	8006792 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80067d8:	bf00      	nop
 80067da:	3754      	adds	r7, #84	@ 0x54
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff fa3e 	bl	8005c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b08f      	sub	sp, #60	@ 0x3c
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800681c:	2b21      	cmp	r3, #33	@ 0x21
 800681e:	d14c      	bne.n	80068ba <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d132      	bne.n	8006892 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	61fb      	str	r3, [r7, #28]
   return(result);
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800684c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	60bb      	str	r3, [r7, #8]
   return(result);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006872:	633b      	str	r3, [r7, #48]	@ 0x30
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6979      	ldr	r1, [r7, #20]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	613b      	str	r3, [r7, #16]
   return(result);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e6      	bne.n	800685e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006890:	e013      	b.n	80068ba <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80068ba:	bf00      	nop
 80068bc:	373c      	adds	r7, #60	@ 0x3c
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b091      	sub	sp, #68	@ 0x44
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068d2:	2b21      	cmp	r3, #33	@ 0x21
 80068d4:	d151      	bne.n	800697a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d132      	bne.n	8006948 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	623b      	str	r3, [r7, #32]
   return(result);
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006900:	633b      	str	r3, [r7, #48]	@ 0x30
 8006902:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e6      	bne.n	80068e2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	60fb      	str	r3, [r7, #12]
   return(result);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006928:	637b      	str	r3, [r7, #52]	@ 0x34
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	69b9      	ldr	r1, [r7, #24]
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	617b      	str	r3, [r7, #20]
   return(result);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e6      	bne.n	8006914 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006946:	e018      	b.n	800697a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800694e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800695a:	b292      	uxth	r2, r2
 800695c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800697a:	bf00      	nop
 800697c:	3744      	adds	r7, #68	@ 0x44
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b088      	sub	sp, #32
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	60bb      	str	r3, [r7, #8]
   return(result);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6979      	ldr	r1, [r7, #20]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fb fd4d 	bl	800246c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d2:	bf00      	nop
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b09c      	sub	sp, #112	@ 0x70
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f4:	2b22      	cmp	r3, #34	@ 0x22
 80069f6:	f040 80be 	bne.w	8006b76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006a00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a08:	b2d9      	uxtb	r1, r3
 8006a0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a14:	400a      	ands	r2, r1
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 80a3 	bne.w	8006b8a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e6      	bne.n	8006a44 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a88:	f023 0301 	bic.w	r3, r3, #1
 8006a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3308      	adds	r3, #8
 8006a94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e5      	bne.n	8006a76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a34      	ldr	r2, [pc, #208]	@ (8006b94 <UART_RxISR_8BIT+0x1b8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d01f      	beq.n	8006b08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d018      	beq.n	8006b08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d12e      	bne.n	8006b6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0310 	bic.w	r3, r3, #16
 8006b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	617b      	str	r3, [r7, #20]
   return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e6      	bne.n	8006b16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d103      	bne.n	8006b5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff f896 	bl	8005c98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b6c:	e00d      	b.n	8006b8a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fb fca8 	bl	80024c4 <HAL_UART_RxCpltCallback>
}
 8006b74:	e009      	b.n	8006b8a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	8b1b      	ldrh	r3, [r3, #24]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0208 	orr.w	r2, r2, #8
 8006b86:	b292      	uxth	r2, r2
 8006b88:	831a      	strh	r2, [r3, #24]
}
 8006b8a:	bf00      	nop
 8006b8c:	3770      	adds	r7, #112	@ 0x70
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40008000 	.word	0x40008000

08006b98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b09c      	sub	sp, #112	@ 0x70
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ba6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb0:	2b22      	cmp	r3, #34	@ 0x22
 8006bb2:	f040 80be 	bne.w	8006d32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006bca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bda:	1c9a      	adds	r2, r3, #2
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 80a3 	bne.w	8006d46 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c14:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e6      	bne.n	8006c00 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c52:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e5      	bne.n	8006c32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a34      	ldr	r2, [pc, #208]	@ (8006d50 <UART_RxISR_16BIT+0x1b8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d01f      	beq.n	8006cc4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d018      	beq.n	8006cc4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e6      	bne.n	8006c92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d12e      	bne.n	8006d2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f023 0310 	bic.w	r3, r3, #16
 8006ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6979      	ldr	r1, [r7, #20]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e6      	bne.n	8006cd2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d103      	bne.n	8006d1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2210      	movs	r2, #16
 8006d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe ffb8 	bl	8005c98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d28:	e00d      	b.n	8006d46 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fb fbca 	bl	80024c4 <HAL_UART_RxCpltCallback>
}
 8006d30:	e009      	b.n	8006d46 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	8b1b      	ldrh	r3, [r3, #24]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0208 	orr.w	r2, r2, #8
 8006d42:	b292      	uxth	r2, r2
 8006d44:	831a      	strh	r2, [r3, #24]
}
 8006d46:	bf00      	nop
 8006d48:	3770      	adds	r7, #112	@ 0x70
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40008000 	.word	0x40008000

08006d54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	7992      	ldrb	r2, [r2, #6]
 8006d7a:	08d2      	lsrs	r2, r2, #3
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	fb13 f302 	smulbb	r3, r3, r2
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	889b      	ldrh	r3, [r3, #4]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	60da      	str	r2, [r3, #12]
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006dae:	b490      	push	{r4, r7}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	4604      	mov	r4, r0
 8006db6:	4608      	mov	r0, r1
 8006db8:	1d39      	adds	r1, r7, #4
 8006dba:	e881 000c 	stmia.w	r1, {r2, r3}
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	81fb      	strh	r3, [r7, #14]
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dce:	88ba      	ldrh	r2, [r7, #4]
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	da04      	bge.n	8006dde <code+0x30>
        code |= LEFT;
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	75fb      	strb	r3, [r7, #23]
 8006ddc:	e008      	b.n	8006df0 <code+0x42>
    } else if (x0 > window.x1) {
 8006dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006de2:	893a      	ldrh	r2, [r7, #8]
 8006de4:	4293      	cmp	r3, r2
 8006de6:	dd03      	ble.n	8006df0 <code+0x42>
        code |= RIGHT;
 8006de8:	2202      	movs	r2, #2
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006df0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006df4:	88fa      	ldrh	r2, [r7, #6]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	da04      	bge.n	8006e04 <code+0x56>
        code |= BOTTOM;
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	75fb      	strb	r3, [r7, #23]
 8006e02:	e008      	b.n	8006e16 <code+0x68>
    } else if (y0 > window.y1) {
 8006e04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e08:	897a      	ldrh	r2, [r7, #10]
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	dd03      	ble.n	8006e16 <code+0x68>
        code |= TOP;
 8006e0e:	2208      	movs	r2, #8
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc90      	pop	{r4, r7}
 8006e20:	4770      	bx	lr

08006e22 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b088      	sub	sp, #32
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e40:	cb0c      	ldmia	r3, {r2, r3}
 8006e42:	f7ff ffb4 	bl	8006dae <code>
 8006e46:	4603      	mov	r3, r0
 8006e48:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e5a:	cb0c      	ldmia	r3, {r2, r3}
 8006e5c:	f7ff ffa7 	bl	8006dae <code>
 8006e60:	4603      	mov	r3, r0
 8006e62:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006e64:	2300      	movs	r3, #0
 8006e66:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006e68:	7ffa      	ldrb	r2, [r7, #31]
 8006e6a:	7fbb      	ldrb	r3, [r7, #30]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006e74:	2301      	movs	r3, #1
 8006e76:	777b      	strb	r3, [r7, #29]
            break;
 8006e78:	e0e9      	b.n	800704e <clip_line+0x22c>
        } else if (code0 & code1) {
 8006e7a:	7ffa      	ldrb	r2, [r7, #31]
 8006e7c:	7fbb      	ldrb	r3, [r7, #30]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 80e2 	bne.w	800704c <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006e90:	7ffb      	ldrb	r3, [r7, #31]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <clip_line+0x78>
 8006e96:	7ffb      	ldrb	r3, [r7, #31]
 8006e98:	e000      	b.n	8006e9c <clip_line+0x7a>
 8006e9a:	7fbb      	ldrb	r3, [r7, #30]
 8006e9c:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d024      	beq.n	8006ef4 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ec0:	1acb      	subs	r3, r1, r3
 8006ec2:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ecc:	1a41      	subs	r1, r0, r1
 8006ece:	fb03 f101 	mul.w	r1, r3, r1
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee0:	1ac3      	subs	r3, r0, r3
 8006ee2:	fb91 f3f3 	sdiv	r3, r1, r3
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4413      	add	r3, r2
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006eee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ef0:	833b      	strh	r3, [r7, #24]
 8006ef2:	e07f      	b.n	8006ff4 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d024      	beq.n	8006f4a <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f16:	1acb      	subs	r3, r1, r3
 8006f18:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006f1a:	4608      	mov	r0, r1
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006f22:	1a41      	subs	r1, r0, r1
 8006f24:	fb03 f101 	mul.w	r1, r3, r1
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f36:	1ac3      	subs	r3, r0, r3
 8006f38:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006f44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f46:	833b      	strh	r3, [r7, #24]
 8006f48:	e054      	b.n	8006ff4 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d024      	beq.n	8006fa0 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f64:	4619      	mov	r1, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f6c:	1acb      	subs	r3, r1, r3
 8006f6e:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006f70:	4608      	mov	r0, r1
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006f78:	1a41      	subs	r1, r0, r1
 8006f7a:	fb03 f101 	mul.w	r1, r3, r1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f84:	4618      	mov	r0, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f8c:	1ac3      	subs	r3, r0, r3
 8006f8e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	4413      	add	r3, r2
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006f9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f9c:	837b      	strh	r3, [r7, #26]
 8006f9e:	e029      	b.n	8006ff4 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d023      	beq.n	8006ff4 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fc2:	1acb      	subs	r3, r1, r3
 8006fc4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	68f9      	ldr	r1, [r7, #12]
 8006fca:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006fce:	1a41      	subs	r1, r0, r1
 8006fd0:	fb03 f101 	mul.w	r1, r3, r1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fe2:	1ac3      	subs	r3, r0, r3
 8006fe4:	fb91 f3f3 	sdiv	r3, r1, r3
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4413      	add	r3, r2
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006ff0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ff2:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006ff4:	7dfa      	ldrb	r2, [r7, #23]
 8006ff6:	7ffb      	ldrb	r3, [r7, #31]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d113      	bne.n	8007024 <clip_line+0x202>
                *x0 = x;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8b7a      	ldrh	r2, [r7, #26]
 8007000:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	8b3a      	ldrh	r2, [r7, #24]
 8007006:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007018:	cb0c      	ldmia	r3, {r2, r3}
 800701a:	f7ff fec8 	bl	8006dae <code>
 800701e:	4603      	mov	r3, r0
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	e721      	b.n	8006e68 <clip_line+0x46>
            } else {
                *x1 = x;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8b7a      	ldrh	r2, [r7, #26]
 8007028:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	8b3a      	ldrh	r2, [r7, #24]
 800702e:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	f9b3 1000 	ldrsh.w	r1, [r3]
 800703c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007040:	cb0c      	ldmia	r3, {r2, r3}
 8007042:	f7ff feb4 	bl	8006dae <code>
 8007046:	4603      	mov	r3, r0
 8007048:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800704a:	e70d      	b.n	8006e68 <clip_line+0x46>
            break;
 800704c:	bf00      	nop
            }
        }
    }

    return accept;
 800704e:	7f7b      	ldrb	r3, [r7, #29]
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	3306      	adds	r3, #6
 8007068:	2208      	movs	r2, #8
 800706a:	4619      	mov	r1, r3
 800706c:	f001 fa56 	bl	800851c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	330e      	adds	r3, #14
 8007074:	781a      	ldrb	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	330f      	adds	r3, #15
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	3310      	adds	r3, #16
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	72da      	strb	r2, [r3, #11]

    return 0;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b08e      	sub	sp, #56	@ 0x38
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff ffd4 	bl	8007058 <fontx_meta>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 80070b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <fontx_glyph+0x2c>
        return status;
 80070be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e077      	b.n	80071b4 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80070c4:	7f7a      	ldrb	r2, [r7, #29]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80070ca:	7fba      	ldrb	r2, [r7, #30]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80070d0:	7f7b      	ldrb	r3, [r7, #29]
 80070d2:	3307      	adds	r3, #7
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da00      	bge.n	80070da <fontx_glyph+0x42>
 80070d8:	3307      	adds	r3, #7
 80070da:	10db      	asrs	r3, r3, #3
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	78da      	ldrb	r2, [r3, #3]
 80070e6:	7fbb      	ldrb	r3, [r7, #30]
 80070e8:	fb12 f303 	smulbb	r3, r2, r3
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80070f2:	7ffb      	ldrb	r3, [r7, #31]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10f      	bne.n	8007118 <fontx_glyph+0x80>
        if (code < 0x100) {
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2bff      	cmp	r3, #255	@ 0xff
 80070fc:	d859      	bhi.n	80071b2 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	789b      	ldrb	r3, [r3, #2]
 8007102:	461a      	mov	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	3311      	adds	r3, #17
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	441a      	add	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	e04d      	b.n	80071b4 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3312      	adds	r3, #18
 800711c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3311      	adds	r3, #17
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 800712a:	e03d      	b.n	80071a8 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007134:	3301      	adds	r3, #1
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	4413      	add	r3, r2
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	3302      	adds	r3, #2
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	3303      	adds	r3, #3
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	4413      	add	r3, r2
 8007150:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	429a      	cmp	r2, r3
 8007158:	d31c      	bcc.n	8007194 <fontx_glyph+0xfc>
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	429a      	cmp	r2, r3
 8007160:	d818      	bhi.n	8007194 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800716a:	4413      	add	r3, r2
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3311      	adds	r3, #17
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	461a      	mov	r2, r3
                    nc * glyph->size
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	789b      	ldrb	r3, [r3, #2]
 800717c:	4619      	mov	r1, r3
 800717e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007180:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007184:	4413      	add	r3, r2
 8007186:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	e00f      	b.n	80071b4 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8007194:	6a3a      	ldr	r2, [r7, #32]
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	1ad2      	subs	r2, r2, r3
 800719a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719c:	4413      	add	r3, r2
 800719e:	3301      	adds	r3, #1
 80071a0:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	3304      	adds	r3, #4
 80071a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	1e5a      	subs	r2, r3, #1
 80071ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1bc      	bne.n	800712c <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80071b2:	2301      	movs	r3, #1
 80071b4:	4618      	mov	r0, r3
 80071b6:	3738      	adds	r7, #56	@ 0x38
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	dd01      	ble.n	80071d2 <min+0x16>
        return b;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	e000      	b.n	80071d4 <min+0x18>
    };
    return a;
 80071d2:	687b      	ldr	r3, [r7, #4]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <max>:

static inline int max(int a, int b) {
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	dd01      	ble.n	80071f6 <max+0x16>
        return a;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	e000      	b.n	80071f8 <max+0x18>
    }
    return b;
 80071f6:	683b      	ldr	r3, [r7, #0]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	80fb      	strh	r3, [r7, #6]
 800720e:	460b      	mov	r3, r1
 8007210:	80bb      	strh	r3, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8007216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800721a:	4a12      	ldr	r2, [pc, #72]	@ (8007264 <hagl_put_pixel+0x60>)
 800721c:	8812      	ldrh	r2, [r2, #0]
 800721e:	4293      	cmp	r3, r2
 8007220:	db1a      	blt.n	8007258 <hagl_put_pixel+0x54>
 8007222:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007226:	4a0f      	ldr	r2, [pc, #60]	@ (8007264 <hagl_put_pixel+0x60>)
 8007228:	8852      	ldrh	r2, [r2, #2]
 800722a:	4293      	cmp	r3, r2
 800722c:	db14      	blt.n	8007258 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800722e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007232:	4a0c      	ldr	r2, [pc, #48]	@ (8007264 <hagl_put_pixel+0x60>)
 8007234:	8892      	ldrh	r2, [r2, #4]
 8007236:	4293      	cmp	r3, r2
 8007238:	dc10      	bgt.n	800725c <hagl_put_pixel+0x58>
 800723a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800723e:	4a09      	ldr	r2, [pc, #36]	@ (8007264 <hagl_put_pixel+0x60>)
 8007240:	88d2      	ldrh	r2, [r2, #6]
 8007242:	4293      	cmp	r3, r2
 8007244:	dc0a      	bgt.n	800725c <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8007246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800724a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800724e:	887a      	ldrh	r2, [r7, #2]
 8007250:	4618      	mov	r0, r3
 8007252:	f7fa fe45 	bl	8001ee0 <lcdPutPixel>
 8007256:	e002      	b.n	800725e <hagl_put_pixel+0x5a>
        return;
 8007258:	bf00      	nop
 800725a:	e000      	b.n	800725e <hagl_put_pixel+0x5a>
        return;
 800725c:	bf00      	nop
}
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	2000020c 	.word	0x2000020c

08007268 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b085      	sub	sp, #20
 800726c:	af02      	add	r7, sp, #8
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	461a      	mov	r2, r3
 8007276:	4623      	mov	r3, r4
 8007278:	80fb      	strh	r3, [r7, #6]
 800727a:	4603      	mov	r3, r0
 800727c:	80bb      	strh	r3, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	807b      	strh	r3, [r7, #2]
 8007282:	4613      	mov	r3, r2
 8007284:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	887b      	ldrh	r3, [r7, #2]
 800728a:	4413      	add	r3, r2
 800728c:	b29b      	uxth	r3, r3
 800728e:	b21a      	sxth	r2, r3
 8007290:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8007294:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007298:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800729c:	883b      	ldrh	r3, [r7, #0]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4623      	mov	r3, r4
 80072a2:	f000 f827 	bl	80072f4 <hagl_draw_line>
#endif
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}

080072ae <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 80072ae:	b590      	push	{r4, r7, lr}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af02      	add	r7, sp, #8
 80072b4:	4604      	mov	r4, r0
 80072b6:	4608      	mov	r0, r1
 80072b8:	4611      	mov	r1, r2
 80072ba:	461a      	mov	r2, r3
 80072bc:	4623      	mov	r3, r4
 80072be:	80fb      	strh	r3, [r7, #6]
 80072c0:	4603      	mov	r3, r0
 80072c2:	80bb      	strh	r3, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
 80072c8:	4613      	mov	r3, r2
 80072ca:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 80072cc:	88ba      	ldrh	r2, [r7, #4]
 80072ce:	887b      	ldrh	r3, [r7, #2]
 80072d0:	4413      	add	r3, r2
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	b21c      	sxth	r4, r3
 80072d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80072de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072e2:	883b      	ldrh	r3, [r7, #0]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4623      	mov	r3, r4
 80072e8:	f000 f804 	bl	80072f4 <hagl_draw_line>
#endif
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd90      	pop	{r4, r7, pc}

080072f4 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	b089      	sub	sp, #36	@ 0x24
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	461a      	mov	r2, r3
 8007302:	4623      	mov	r3, r4
 8007304:	80fb      	strh	r3, [r7, #6]
 8007306:	4603      	mov	r3, r0
 8007308:	80bb      	strh	r3, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	807b      	strh	r3, [r7, #2]
 800730e:	4613      	mov	r3, r2
 8007310:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8007312:	463b      	mov	r3, r7
 8007314:	1cba      	adds	r2, r7, #2
 8007316:	1d3d      	adds	r5, r7, #4
 8007318:	1dbc      	adds	r4, r7, #6
 800731a:	494a      	ldr	r1, [pc, #296]	@ (8007444 <hagl_draw_line+0x150>)
 800731c:	466e      	mov	r6, sp
 800731e:	c903      	ldmia	r1, {r0, r1}
 8007320:	e886 0003 	stmia.w	r6, {r0, r1}
 8007324:	4629      	mov	r1, r5
 8007326:	4620      	mov	r0, r4
 8007328:	f7ff fd7b 	bl	8006e22 <clip_line>
 800732c:	4603      	mov	r3, r0
 800732e:	f083 0301 	eor.w	r3, r3, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d17e      	bne.n	8007436 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007338:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800733c:	461a      	mov	r2, r3
 800733e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb8      	it	lt
 8007348:	425b      	neglt	r3, r3
 800734a:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 800734c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007350:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007354:	429a      	cmp	r2, r3
 8007356:	da01      	bge.n	800735c <hagl_draw_line+0x68>
 8007358:	2301      	movs	r3, #1
 800735a:	e001      	b.n	8007360 <hagl_draw_line+0x6c>
 800735c:	f04f 33ff 	mov.w	r3, #4294967295
 8007360:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8007362:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007366:	461a      	mov	r2, r3
 8007368:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	bfb8      	it	lt
 8007372:	425b      	neglt	r3, r3
 8007374:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8007376:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800737a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800737e:	429a      	cmp	r2, r3
 8007380:	da01      	bge.n	8007386 <hagl_draw_line+0x92>
 8007382:	2301      	movs	r3, #1
 8007384:	e001      	b.n	800738a <hagl_draw_line+0x96>
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
 800738a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 800738c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007390:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	dd06      	ble.n	80073a6 <hagl_draw_line+0xb2>
 8007398:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800739c:	0fda      	lsrs	r2, r3, #31
 800739e:	4413      	add	r3, r2
 80073a0:	105b      	asrs	r3, r3, #1
 80073a2:	b21b      	sxth	r3, r3
 80073a4:	e006      	b.n	80073b4 <hagl_draw_line+0xc0>
 80073a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80073aa:	0fda      	lsrs	r2, r3, #31
 80073ac:	4413      	add	r3, r2
 80073ae:	105b      	asrs	r3, r3, #1
 80073b0:	425b      	negs	r3, r3
 80073b2:	b21b      	sxth	r3, r3
 80073b4:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80073b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80073be:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff ff1f 	bl	8007204 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80073c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d105      	bne.n	80073de <hagl_draw_line+0xea>
 80073d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80073d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d02d      	beq.n	800743a <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80073de:	8afb      	ldrh	r3, [r7, #22]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80073e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80073ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80073ee:	425b      	negs	r3, r3
 80073f0:	429a      	cmp	r2, r3
 80073f2:	dd0c      	ble.n	800740e <hagl_draw_line+0x11a>
            err -= dy;
 80073f4:	8afa      	ldrh	r2, [r7, #22]
 80073f6:	8a3b      	ldrh	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80073fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007402:	b29a      	uxth	r2, r3
 8007404:	8a7b      	ldrh	r3, [r7, #18]
 8007406:	4413      	add	r3, r2
 8007408:	b29b      	uxth	r3, r3
 800740a:	b21b      	sxth	r3, r3
 800740c:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800740e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007412:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007416:	429a      	cmp	r2, r3
 8007418:	dacd      	bge.n	80073b6 <hagl_draw_line+0xc2>
            err += dx;
 800741a:	8afa      	ldrh	r2, [r7, #22]
 800741c:	8abb      	ldrh	r3, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8007424:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007428:	b29a      	uxth	r2, r3
 800742a:	89fb      	ldrh	r3, [r7, #14]
 800742c:	4413      	add	r3, r2
 800742e:	b29b      	uxth	r3, r3
 8007430:	b21b      	sxth	r3, r3
 8007432:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8007434:	e7bf      	b.n	80073b6 <hagl_draw_line+0xc2>
        return;
 8007436:	bf00      	nop
 8007438:	e000      	b.n	800743c <hagl_draw_line+0x148>
            break;
 800743a:	bf00      	nop
        }
    }
}
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007442:	bf00      	nop
 8007444:	2000020c 	.word	0x2000020c

08007448 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	461a      	mov	r2, r3
 8007456:	4623      	mov	r3, r4
 8007458:	80fb      	strh	r3, [r7, #6]
 800745a:	4603      	mov	r3, r0
 800745c:	80bb      	strh	r3, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	807b      	strh	r3, [r7, #2]
 8007462:	4613      	mov	r3, r2
 8007464:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007466:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800746a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800746e:	429a      	cmp	r2, r3
 8007470:	dd0e      	ble.n	8007490 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	887b      	ldrh	r3, [r7, #2]
 8007476:	4413      	add	r3, r2
 8007478:	b29b      	uxth	r3, r3
 800747a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800747c:	88fa      	ldrh	r2, [r7, #6]
 800747e:	887b      	ldrh	r3, [r7, #2]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	b29b      	uxth	r3, r3
 8007484:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007486:	88fa      	ldrh	r2, [r7, #6]
 8007488:	887b      	ldrh	r3, [r7, #2]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	b29b      	uxth	r3, r3
 800748e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007490:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007494:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007498:	429a      	cmp	r2, r3
 800749a:	dd0e      	ble.n	80074ba <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800749c:	88ba      	ldrh	r2, [r7, #4]
 800749e:	883b      	ldrh	r3, [r7, #0]
 80074a0:	4413      	add	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80074a6:	88ba      	ldrh	r2, [r7, #4]
 80074a8:	883b      	ldrh	r3, [r7, #0]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80074b0:	88ba      	ldrh	r2, [r7, #4]
 80074b2:	883b      	ldrh	r3, [r7, #0]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80074ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80074be:	4a24      	ldr	r2, [pc, #144]	@ (8007550 <hagl_draw_rectangle+0x108>)
 80074c0:	8812      	ldrh	r2, [r2, #0]
 80074c2:	4293      	cmp	r3, r2
 80074c4:	db3e      	blt.n	8007544 <hagl_draw_rectangle+0xfc>
 80074c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80074ca:	4a21      	ldr	r2, [pc, #132]	@ (8007550 <hagl_draw_rectangle+0x108>)
 80074cc:	8852      	ldrh	r2, [r2, #2]
 80074ce:	4293      	cmp	r3, r2
 80074d0:	db38      	blt.n	8007544 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80074d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007550 <hagl_draw_rectangle+0x108>)
 80074d8:	8892      	ldrh	r2, [r2, #4]
 80074da:	4293      	cmp	r3, r2
 80074dc:	dc34      	bgt.n	8007548 <hagl_draw_rectangle+0x100>
 80074de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80074e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007550 <hagl_draw_rectangle+0x108>)
 80074e4:	88d2      	ldrh	r2, [r2, #6]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	dc2e      	bgt.n	8007548 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80074ea:	887a      	ldrh	r2, [r7, #2]
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	3301      	adds	r3, #1
 80074f4:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80074f6:	883a      	ldrh	r2, [r7, #0]
 80074f8:	88bb      	ldrh	r3, [r7, #4]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3301      	adds	r3, #1
 8007500:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8007502:	8c3b      	ldrh	r3, [r7, #32]
 8007504:	89fa      	ldrh	r2, [r7, #14]
 8007506:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800750a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800750e:	f7ff feab 	bl	8007268 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8007512:	8c3b      	ldrh	r3, [r7, #32]
 8007514:	89fa      	ldrh	r2, [r7, #14]
 8007516:	f9b7 1000 	ldrsh.w	r1, [r7]
 800751a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800751e:	f7ff fea3 	bl	8007268 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8007522:	8c3b      	ldrh	r3, [r7, #32]
 8007524:	89ba      	ldrh	r2, [r7, #12]
 8007526:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800752a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800752e:	f7ff febe 	bl	80072ae <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8007532:	8c3b      	ldrh	r3, [r7, #32]
 8007534:	89ba      	ldrh	r2, [r7, #12]
 8007536:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800753a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800753e:	f7ff feb6 	bl	80072ae <hagl_draw_vline>
 8007542:	e002      	b.n	800754a <hagl_draw_rectangle+0x102>
        return;
 8007544:	bf00      	nop
 8007546:	e000      	b.n	800754a <hagl_draw_rectangle+0x102>
        return;
 8007548:	bf00      	nop
}
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	bd90      	pop	{r4, r7, pc}
 8007550:	2000020c 	.word	0x2000020c

08007554 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	4623      	mov	r3, r4
 8007564:	80fb      	strh	r3, [r7, #6]
 8007566:	4603      	mov	r3, r0
 8007568:	80bb      	strh	r3, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	807b      	strh	r3, [r7, #2]
 800756e:	4613      	mov	r3, r2
 8007570:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007576:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800757a:	429a      	cmp	r2, r3
 800757c:	dd0e      	ble.n	800759c <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	887b      	ldrh	r3, [r7, #2]
 8007582:	4413      	add	r3, r2
 8007584:	b29b      	uxth	r3, r3
 8007586:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007588:	88fa      	ldrh	r2, [r7, #6]
 800758a:	887b      	ldrh	r3, [r7, #2]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	b29b      	uxth	r3, r3
 8007590:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	887b      	ldrh	r3, [r7, #2]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	b29b      	uxth	r3, r3
 800759a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800759c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80075a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	dd0e      	ble.n	80075c6 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 80075a8:	88ba      	ldrh	r2, [r7, #4]
 80075aa:	883b      	ldrh	r3, [r7, #0]
 80075ac:	4413      	add	r3, r2
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80075b2:	88ba      	ldrh	r2, [r7, #4]
 80075b4:	883b      	ldrh	r3, [r7, #0]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80075bc:	88ba      	ldrh	r2, [r7, #4]
 80075be:	883b      	ldrh	r3, [r7, #0]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80075c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075ca:	4a33      	ldr	r2, [pc, #204]	@ (8007698 <hagl_fill_rectangle+0x144>)
 80075cc:	8812      	ldrh	r2, [r2, #0]
 80075ce:	4293      	cmp	r3, r2
 80075d0:	db5b      	blt.n	800768a <hagl_fill_rectangle+0x136>
 80075d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80075d6:	4a30      	ldr	r2, [pc, #192]	@ (8007698 <hagl_fill_rectangle+0x144>)
 80075d8:	8852      	ldrh	r2, [r2, #2]
 80075da:	4293      	cmp	r3, r2
 80075dc:	db55      	blt.n	800768a <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80075de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007698 <hagl_fill_rectangle+0x144>)
 80075e4:	8892      	ldrh	r2, [r2, #4]
 80075e6:	4293      	cmp	r3, r2
 80075e8:	dc51      	bgt.n	800768e <hagl_fill_rectangle+0x13a>
 80075ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007698 <hagl_fill_rectangle+0x144>)
 80075f0:	88d2      	ldrh	r2, [r2, #6]
 80075f2:	4293      	cmp	r3, r2
 80075f4:	dc4b      	bgt.n	800768e <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80075f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075fa:	4a27      	ldr	r2, [pc, #156]	@ (8007698 <hagl_fill_rectangle+0x144>)
 80075fc:	8812      	ldrh	r2, [r2, #0]
 80075fe:	4611      	mov	r1, r2
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fded 	bl	80071e0 <max>
 8007606:	4603      	mov	r3, r0
 8007608:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800760a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800760e:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <hagl_fill_rectangle+0x144>)
 8007610:	8852      	ldrh	r2, [r2, #2]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fde3 	bl	80071e0 <max>
 800761a:	4603      	mov	r3, r0
 800761c:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800761e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007622:	4a1d      	ldr	r2, [pc, #116]	@ (8007698 <hagl_fill_rectangle+0x144>)
 8007624:	8892      	ldrh	r2, [r2, #4]
 8007626:	4611      	mov	r1, r2
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fdc7 	bl	80071bc <min>
 800762e:	4603      	mov	r3, r0
 8007630:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8007632:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007636:	4a18      	ldr	r2, [pc, #96]	@ (8007698 <hagl_fill_rectangle+0x144>)
 8007638:	88d2      	ldrh	r2, [r2, #6]
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fdbd 	bl	80071bc <min>
 8007642:	4603      	mov	r3, r0
 8007644:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8007646:	887a      	ldrh	r2, [r7, #2]
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	b29b      	uxth	r3, r3
 800764e:	3301      	adds	r3, #1
 8007650:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8007652:	883a      	ldrh	r2, [r7, #0]
 8007654:	88bb      	ldrh	r3, [r7, #4]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	b29b      	uxth	r3, r3
 800765a:	3301      	adds	r3, #1
 800765c:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800765e:	2300      	movs	r3, #0
 8007660:	81fb      	strh	r3, [r7, #14]
 8007662:	e00d      	b.n	8007680 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8007664:	88ba      	ldrh	r2, [r7, #4]
 8007666:	89fb      	ldrh	r3, [r7, #14]
 8007668:	4413      	add	r3, r2
 800766a:	b29b      	uxth	r3, r3
 800766c:	b219      	sxth	r1, r3
 800766e:	8c3b      	ldrh	r3, [r7, #32]
 8007670:	89ba      	ldrh	r2, [r7, #12]
 8007672:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007676:	f7ff fdf7 	bl	8007268 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800767a:	89fb      	ldrh	r3, [r7, #14]
 800767c:	3301      	adds	r3, #1
 800767e:	81fb      	strh	r3, [r7, #14]
 8007680:	89fa      	ldrh	r2, [r7, #14]
 8007682:	897b      	ldrh	r3, [r7, #10]
 8007684:	429a      	cmp	r2, r3
 8007686:	d3ed      	bcc.n	8007664 <hagl_fill_rectangle+0x110>
 8007688:	e002      	b.n	8007690 <hagl_fill_rectangle+0x13c>
        return;
 800768a:	bf00      	nop
 800768c:	e000      	b.n	8007690 <hagl_fill_rectangle+0x13c>
        return;
 800768e:	bf00      	nop
#endif
    }
}
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	bd90      	pop	{r4, r7, pc}
 8007696:	bf00      	nop
 8007698:	2000020c 	.word	0x2000020c

0800769c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80076aa:	f844 0c24 	str.w	r0, [r4, #-36]
 80076ae:	460c      	mov	r4, r1
 80076b0:	4610      	mov	r0, r2
 80076b2:	4619      	mov	r1, r3
 80076b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076b8:	4622      	mov	r2, r4
 80076ba:	f823 2c26 	strh.w	r2, [r3, #-38]
 80076be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076c2:	4602      	mov	r2, r0
 80076c4:	f823 2c28 	strh.w	r2, [r3, #-40]
 80076c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076cc:	460a      	mov	r2, r1
 80076ce:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80076d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076d6:	4619      	mov	r1, r3
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80076e0:	6812      	ldr	r2, [r2, #0]
 80076e2:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fcd6 	bl	8007098 <fontx_glyph>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076f2:	f102 0209 	add.w	r2, r2, #9
 80076f6:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80076f8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80076fc:	f103 0309 	add.w	r3, r3, #9
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <hagl_put_char+0x6e>
        return 0;
 8007706:	2300      	movs	r3, #0
 8007708:	e0c0      	b.n	800788c <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 800770a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800770e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007712:	461a      	mov	r2, r3
 8007714:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007718:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 800771c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007720:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007724:	461a      	mov	r2, r3
 8007726:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800772a:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 800772e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007732:	2210      	movs	r2, #16
 8007734:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007738:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800773c:	3a08      	subs	r2, #8
 800773e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007742:	3b18      	subs	r3, #24
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fb0e 	bl	8006d68 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800774c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007750:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8007754:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007758:	f102 020c 	add.w	r2, r2, #12
 800775c:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800775e:	2300      	movs	r3, #0
 8007760:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007764:	f102 020b 	add.w	r2, r2, #11
 8007768:	7013      	strb	r3, [r2, #0]
 800776a:	e071      	b.n	8007850 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800776c:	2300      	movs	r3, #0
 800776e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007772:	f102 020a 	add.w	r2, r2, #10
 8007776:	7013      	strb	r3, [r2, #0]
 8007778:	e047      	b.n	800780a <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800777a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800777e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b25a      	sxtb	r2, r3
 8007786:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800778a:	f103 030a 	add.w	r3, r3, #10
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	2180      	movs	r1, #128	@ 0x80
 8007796:	fa41 f303 	asr.w	r3, r1, r3
 800779a:	b25b      	sxtb	r3, r3
 800779c:	4013      	ands	r3, r2
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80077a4:	f102 0208 	add.w	r2, r2, #8
 80077a8:	7013      	strb	r3, [r2, #0]
            if (set) {
 80077aa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077ae:	f103 0308 	add.w	r3, r3, #8
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d010      	beq.n	80077da <hagl_put_char+0x13e>
                *(ptr++) = color;
 80077b8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077bc:	f103 030c 	add.w	r3, r3, #12
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	1c9a      	adds	r2, r3, #2
 80077c4:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80077c8:	f101 010c 	add.w	r1, r1, #12
 80077cc:	600a      	str	r2, [r1, #0]
 80077ce:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077d2:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	e00c      	b.n	80077f4 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80077da:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077de:	f103 030c 	add.w	r3, r3, #12
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	1c9a      	adds	r2, r3, #2
 80077e6:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80077ea:	f101 010c 	add.w	r1, r1, #12
 80077ee:	600a      	str	r2, [r1, #0]
 80077f0:	2200      	movs	r2, #0
 80077f2:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80077f4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077f8:	f103 030a 	add.w	r3, r3, #10
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	3301      	adds	r3, #1
 8007800:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007804:	f102 020a 	add.w	r2, r2, #10
 8007808:	7013      	strb	r3, [r2, #0]
 800780a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800780e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007812:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007816:	f102 020a 	add.w	r2, r2, #10
 800781a:	7812      	ldrb	r2, [r2, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d3ac      	bcc.n	800777a <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8007820:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007824:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007828:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800782c:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8007830:	4413      	add	r3, r2
 8007832:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007836:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800783a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800783e:	f103 030b 	add.w	r3, r3, #11
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	3301      	adds	r3, #1
 8007846:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800784a:	f102 020b 	add.w	r2, r2, #11
 800784e:	7013      	strb	r3, [r2, #0]
 8007850:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007854:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007858:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800785c:	f102 020b 	add.w	r2, r2, #11
 8007860:	7812      	ldrb	r2, [r2, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d382      	bcc.n	800776c <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8007866:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800786a:	3b18      	subs	r3, #24
 800786c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007870:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8007874:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007878:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 800787c:	461a      	mov	r2, r3
 800787e:	f000 f85a 	bl	8007936 <hagl_blit>

    return bitmap.width;
 8007882:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007886:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800788a:	b2db      	uxtb	r3, r3
}
 800788c:	4618      	mov	r0, r3
 800788e:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	bd90      	pop	{r4, r7, pc}

08007898 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08c      	sub	sp, #48	@ 0x30
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	817b      	strh	r3, [r7, #10]
 80078aa:	460b      	mov	r3, r1
 80078ac:	813b      	strh	r3, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80078b2:	897b      	ldrh	r3, [r7, #10]
 80078b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80078b6:	f107 0314 	add.w	r3, r7, #20
 80078ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fbcb 	bl	8007058 <fontx_meta>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80078c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <hagl_put_text+0x3c>
        return 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e02c      	b.n	800792e <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	1d1a      	adds	r2, r3, #4
 80078d8:	60fa      	str	r2, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	2b0d      	cmp	r3, #13
 80078e2:	d002      	beq.n	80078ea <hagl_put_text+0x52>
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	2b0a      	cmp	r3, #10
 80078e8:	d108      	bne.n	80078fc <hagl_put_text+0x64>
            x0 = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80078ee:	7fbb      	ldrb	r3, [r7, #30]
 80078f0:	461a      	mov	r2, r3
 80078f2:	893b      	ldrh	r3, [r7, #8]
 80078f4:	4413      	add	r3, r2
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	813b      	strh	r3, [r7, #8]
 80078fa:	e010      	b.n	800791e <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80078fc:	88f8      	ldrh	r0, [r7, #6]
 80078fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007902:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4603      	mov	r3, r0
 800790c:	6a38      	ldr	r0, [r7, #32]
 800790e:	f7ff fec5 	bl	800769c <hagl_put_char>
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	897b      	ldrh	r3, [r7, #10]
 8007918:	4413      	add	r3, r2
 800791a:	b29b      	uxth	r3, r3
 800791c:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1d6      	bne.n	80078d4 <hagl_put_text+0x3c>

    return x0 - original;
 8007926:	897a      	ldrh	r2, [r7, #10]
 8007928:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	b29b      	uxth	r3, r3
}
 800792e:	4618      	mov	r0, r3
 8007930:	3728      	adds	r7, #40	@ 0x28
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8007936:	b580      	push	{r7, lr}
 8007938:	b086      	sub	sp, #24
 800793a:	af00      	add	r7, sp, #0
 800793c:	4603      	mov	r3, r0
 800793e:	603a      	str	r2, [r7, #0]
 8007940:	80fb      	strh	r3, [r7, #6]
 8007942:	460b      	mov	r3, r1
 8007944:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800794c:	2300      	movs	r3, #0
 800794e:	827b      	strh	r3, [r7, #18]
 8007950:	e020      	b.n	8007994 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8007952:	2300      	movs	r3, #0
 8007954:	823b      	strh	r3, [r7, #16]
 8007956:	e015      	b.n	8007984 <hagl_blit+0x4e>
            color = *(ptr++);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	1c9a      	adds	r2, r3, #2
 800795c:	617a      	str	r2, [r7, #20]
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8007962:	88fa      	ldrh	r2, [r7, #6]
 8007964:	8a3b      	ldrh	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	b29b      	uxth	r3, r3
 800796a:	b218      	sxth	r0, r3
 800796c:	88ba      	ldrh	r2, [r7, #4]
 800796e:	8a7b      	ldrh	r3, [r7, #18]
 8007970:	4413      	add	r3, r2
 8007972:	b29b      	uxth	r3, r3
 8007974:	b21b      	sxth	r3, r3
 8007976:	89fa      	ldrh	r2, [r7, #14]
 8007978:	4619      	mov	r1, r3
 800797a:	f7ff fc43 	bl	8007204 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800797e:	8a3b      	ldrh	r3, [r7, #16]
 8007980:	3301      	adds	r3, #1
 8007982:	823b      	strh	r3, [r7, #16]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	8a3a      	ldrh	r2, [r7, #16]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3e4      	bcc.n	8007958 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800798e:	8a7b      	ldrh	r3, [r7, #18]
 8007990:	3301      	adds	r3, #1
 8007992:	827b      	strh	r3, [r7, #18]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	885b      	ldrh	r3, [r3, #2]
 8007998:	8a7a      	ldrh	r2, [r7, #18]
 800799a:	429a      	cmp	r2, r3
 800799c:	d3d9      	bcc.n	8007952 <hagl_blit+0x1c>
        }
    }
#endif
};
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 80079a8:	b590      	push	{r4, r7, lr}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	4611      	mov	r1, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	4623      	mov	r3, r4
 80079b8:	80fb      	strh	r3, [r7, #6]
 80079ba:	4603      	mov	r3, r0
 80079bc:	80bb      	strh	r3, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	807b      	strh	r3, [r7, #2]
 80079c2:	4613      	mov	r3, r2
 80079c4:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80079ca:	887b      	ldrh	r3, [r7, #2]
 80079cc:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80079ce:	887b      	ldrh	r3, [r7, #2]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f1c3 0303 	rsb	r3, r3, #3
 80079d8:	b29b      	uxth	r3, r3
 80079da:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 80079dc:	88fa      	ldrh	r2, [r7, #6]
 80079de:	89fb      	ldrh	r3, [r7, #14]
 80079e0:	4413      	add	r3, r2
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	b218      	sxth	r0, r3
 80079e6:	88ba      	ldrh	r2, [r7, #4]
 80079e8:	89bb      	ldrh	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	b21b      	sxth	r3, r3
 80079f0:	883a      	ldrh	r2, [r7, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	f7ff fc06 	bl	8007204 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	89fb      	ldrh	r3, [r7, #14]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	b218      	sxth	r0, r3
 8007a02:	88ba      	ldrh	r2, [r7, #4]
 8007a04:	89bb      	ldrh	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	b21b      	sxth	r3, r3
 8007a0c:	883a      	ldrh	r2, [r7, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f7ff fbf8 	bl	8007204 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8007a14:	88fa      	ldrh	r2, [r7, #6]
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	4413      	add	r3, r2
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	b218      	sxth	r0, r3
 8007a1e:	88ba      	ldrh	r2, [r7, #4]
 8007a20:	89bb      	ldrh	r3, [r7, #12]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	b21b      	sxth	r3, r3
 8007a28:	883a      	ldrh	r2, [r7, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	f7ff fbea 	bl	8007204 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	89fb      	ldrh	r3, [r7, #14]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	b218      	sxth	r0, r3
 8007a3a:	88ba      	ldrh	r2, [r7, #4]
 8007a3c:	89bb      	ldrh	r3, [r7, #12]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	b21b      	sxth	r3, r3
 8007a44:	883a      	ldrh	r2, [r7, #0]
 8007a46:	4619      	mov	r1, r3
 8007a48:	f7ff fbdc 	bl	8007204 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8007a4c:	88fa      	ldrh	r2, [r7, #6]
 8007a4e:	89bb      	ldrh	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	b218      	sxth	r0, r3
 8007a56:	88ba      	ldrh	r2, [r7, #4]
 8007a58:	89fb      	ldrh	r3, [r7, #14]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	b21b      	sxth	r3, r3
 8007a60:	883a      	ldrh	r2, [r7, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	f7ff fbce 	bl	8007204 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8007a68:	88fa      	ldrh	r2, [r7, #6]
 8007a6a:	89bb      	ldrh	r3, [r7, #12]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	b218      	sxth	r0, r3
 8007a72:	88ba      	ldrh	r2, [r7, #4]
 8007a74:	89fb      	ldrh	r3, [r7, #14]
 8007a76:	4413      	add	r3, r2
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	b21b      	sxth	r3, r3
 8007a7c:	883a      	ldrh	r2, [r7, #0]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	f7ff fbc0 	bl	8007204 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8007a84:	88fa      	ldrh	r2, [r7, #6]
 8007a86:	89bb      	ldrh	r3, [r7, #12]
 8007a88:	4413      	add	r3, r2
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	b218      	sxth	r0, r3
 8007a8e:	88ba      	ldrh	r2, [r7, #4]
 8007a90:	89fb      	ldrh	r3, [r7, #14]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	b21b      	sxth	r3, r3
 8007a98:	883a      	ldrh	r2, [r7, #0]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f7ff fbb2 	bl	8007204 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007aa0:	88fa      	ldrh	r2, [r7, #6]
 8007aa2:	89bb      	ldrh	r3, [r7, #12]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	b218      	sxth	r0, r3
 8007aaa:	88ba      	ldrh	r2, [r7, #4]
 8007aac:	89fb      	ldrh	r3, [r7, #14]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b21b      	sxth	r3, r3
 8007ab4:	883a      	ldrh	r2, [r7, #0]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f7ff fba4 	bl	8007204 <hagl_put_pixel>

    while (y >= x) {
 8007abc:	e097      	b.n	8007bee <hagl_draw_circle+0x246>
        x++;
 8007abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007aca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd14      	ble.n	8007afc <hagl_draw_circle+0x154>
            y--;
 8007ad2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007ade:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007ae2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	897b      	ldrh	r3, [r7, #10]
 8007af0:	4413      	add	r3, r2
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	330a      	adds	r3, #10
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	817b      	strh	r3, [r7, #10]
 8007afa:	e008      	b.n	8007b0e <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8007afc:	89fb      	ldrh	r3, [r7, #14]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	897b      	ldrh	r3, [r7, #10]
 8007b04:	4413      	add	r3, r2
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3306      	adds	r3, #6
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	4413      	add	r3, r2
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	b218      	sxth	r0, r3
 8007b18:	88ba      	ldrh	r2, [r7, #4]
 8007b1a:	89bb      	ldrh	r3, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	883a      	ldrh	r2, [r7, #0]
 8007b24:	4619      	mov	r1, r3
 8007b26:	f7ff fb6d 	bl	8007204 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	89fb      	ldrh	r3, [r7, #14]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	b218      	sxth	r0, r3
 8007b34:	88ba      	ldrh	r2, [r7, #4]
 8007b36:	89bb      	ldrh	r3, [r7, #12]
 8007b38:	4413      	add	r3, r2
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	b21b      	sxth	r3, r3
 8007b3e:	883a      	ldrh	r2, [r7, #0]
 8007b40:	4619      	mov	r1, r3
 8007b42:	f7ff fb5f 	bl	8007204 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8007b46:	88fa      	ldrh	r2, [r7, #6]
 8007b48:	89fb      	ldrh	r3, [r7, #14]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	b218      	sxth	r0, r3
 8007b50:	88ba      	ldrh	r2, [r7, #4]
 8007b52:	89bb      	ldrh	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	b21b      	sxth	r3, r3
 8007b5a:	883a      	ldrh	r2, [r7, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	f7ff fb51 	bl	8007204 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	89fb      	ldrh	r3, [r7, #14]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	b218      	sxth	r0, r3
 8007b6c:	88ba      	ldrh	r2, [r7, #4]
 8007b6e:	89bb      	ldrh	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	b21b      	sxth	r3, r3
 8007b76:	883a      	ldrh	r2, [r7, #0]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f7ff fb43 	bl	8007204 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	89bb      	ldrh	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	b218      	sxth	r0, r3
 8007b88:	88ba      	ldrh	r2, [r7, #4]
 8007b8a:	89fb      	ldrh	r3, [r7, #14]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	b21b      	sxth	r3, r3
 8007b92:	883a      	ldrh	r2, [r7, #0]
 8007b94:	4619      	mov	r1, r3
 8007b96:	f7ff fb35 	bl	8007204 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8007b9a:	88fa      	ldrh	r2, [r7, #6]
 8007b9c:	89bb      	ldrh	r3, [r7, #12]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	b218      	sxth	r0, r3
 8007ba4:	88ba      	ldrh	r2, [r7, #4]
 8007ba6:	89fb      	ldrh	r3, [r7, #14]
 8007ba8:	4413      	add	r3, r2
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	b21b      	sxth	r3, r3
 8007bae:	883a      	ldrh	r2, [r7, #0]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f7ff fb27 	bl	8007204 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8007bb6:	88fa      	ldrh	r2, [r7, #6]
 8007bb8:	89bb      	ldrh	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	b218      	sxth	r0, r3
 8007bc0:	88ba      	ldrh	r2, [r7, #4]
 8007bc2:	89fb      	ldrh	r3, [r7, #14]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	b21b      	sxth	r3, r3
 8007bca:	883a      	ldrh	r2, [r7, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7ff fb19 	bl	8007204 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8007bd2:	88fa      	ldrh	r2, [r7, #6]
 8007bd4:	89bb      	ldrh	r3, [r7, #12]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	b218      	sxth	r0, r3
 8007bdc:	88ba      	ldrh	r2, [r7, #4]
 8007bde:	89fb      	ldrh	r3, [r7, #14]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	883a      	ldrh	r2, [r7, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	f7ff fb0b 	bl	8007204 <hagl_put_pixel>
    while (y >= x) {
 8007bee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007bf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	f6bf af61 	bge.w	8007abe <hagl_draw_circle+0x116>
    }
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd90      	pop	{r4, r7, pc}

08007c06 <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8007c06:	b590      	push	{r4, r7, lr}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	4608      	mov	r0, r1
 8007c10:	4611      	mov	r1, r2
 8007c12:	461a      	mov	r2, r3
 8007c14:	4623      	mov	r3, r4
 8007c16:	80fb      	strh	r3, [r7, #6]
 8007c18:	4603      	mov	r3, r0
 8007c1a:	80bb      	strh	r3, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
 8007c20:	4613      	mov	r3, r2
 8007c22:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007c28:	887b      	ldrh	r3, [r7, #2]
 8007c2a:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007c2c:	887b      	ldrh	r3, [r7, #2]
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f1c3 0303 	rsb	r3, r3, #3
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007c3a:	e067      	b.n	8007d0c <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007c3c:	88fa      	ldrh	r2, [r7, #6]
 8007c3e:	89fb      	ldrh	r3, [r7, #14]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	b218      	sxth	r0, r3
 8007c46:	88ba      	ldrh	r2, [r7, #4]
 8007c48:	89bb      	ldrh	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	b219      	sxth	r1, r3
 8007c50:	89fb      	ldrh	r3, [r7, #14]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	883b      	ldrh	r3, [r7, #0]
 8007c58:	f7ff fb06 	bl	8007268 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007c5c:	88fa      	ldrh	r2, [r7, #6]
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	b218      	sxth	r0, r3
 8007c66:	88ba      	ldrh	r2, [r7, #4]
 8007c68:	89bb      	ldrh	r3, [r7, #12]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	b219      	sxth	r1, r3
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	883b      	ldrh	r3, [r7, #0]
 8007c78:	f7ff faf6 	bl	8007268 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007c7c:	88fa      	ldrh	r2, [r7, #6]
 8007c7e:	89bb      	ldrh	r3, [r7, #12]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	b218      	sxth	r0, r3
 8007c86:	88ba      	ldrh	r2, [r7, #4]
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	b219      	sxth	r1, r3
 8007c90:	89bb      	ldrh	r3, [r7, #12]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	883b      	ldrh	r3, [r7, #0]
 8007c98:	f7ff fae6 	bl	8007268 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	89bb      	ldrh	r3, [r7, #12]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	b218      	sxth	r0, r3
 8007ca6:	88ba      	ldrh	r2, [r7, #4]
 8007ca8:	89fb      	ldrh	r3, [r7, #14]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	b219      	sxth	r1, r3
 8007cb0:	89bb      	ldrh	r3, [r7, #12]
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	883b      	ldrh	r3, [r7, #0]
 8007cb8:	f7ff fad6 	bl	8007268 <hagl_draw_hline>
        x++;
 8007cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007cc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dd14      	ble.n	8007cfa <hagl_fill_circle+0xf4>
            y--;
 8007cd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007cdc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	897b      	ldrh	r3, [r7, #10]
 8007cee:	4413      	add	r3, r2
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	330a      	adds	r3, #10
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	817b      	strh	r3, [r7, #10]
 8007cf8:	e008      	b.n	8007d0c <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007cfa:	89fb      	ldrh	r3, [r7, #14]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	897b      	ldrh	r3, [r7, #10]
 8007d02:	4413      	add	r3, r2
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3306      	adds	r3, #6
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007d0c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007d10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	da91      	bge.n	8007c3c <hagl_fill_circle+0x36>
        }
    }
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd90      	pop	{r4, r7, pc}

08007d22 <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007d22:	b590      	push	{r4, r7, lr}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af02      	add	r7, sp, #8
 8007d28:	4603      	mov	r3, r0
 8007d2a:	6039      	str	r1, [r7, #0]
 8007d2c:	80fb      	strh	r3, [r7, #6]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007d32:	2300      	movs	r3, #0
 8007d34:	81fb      	strh	r3, [r7, #14]
 8007d36:	e02a      	b.n	8007d8e <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4413      	add	r3, r2
        hagl_draw_line(
 8007d42:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	4413      	add	r3, r2
        hagl_draw_line(
 8007d52:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	4413      	add	r3, r2
        hagl_draw_line(
 8007d62:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	3306      	adds	r3, #6
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4413      	add	r3, r2
        hagl_draw_line(
 8007d72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007d76:	88bb      	ldrh	r3, [r7, #4]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	f7ff fab9 	bl	80072f4 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	3301      	adds	r3, #1
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	81fb      	strh	r3, [r7, #14]
 8007d8e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	dbcd      	blt.n	8007d38 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	3302      	adds	r3, #2
    hagl_draw_line(
 8007da6:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007db2:	3b01      	subs	r3, #1
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	4413      	add	r3, r2
    hagl_draw_line(
 8007dba:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	3b02      	subs	r3, #2
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	4413      	add	r3, r2
    hagl_draw_line(
 8007dca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007dce:	88bb      	ldrh	r3, [r7, #4]
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	f7ff fa8d 	bl	80072f4 <hagl_draw_line>
        color
    );
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}

08007de2 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b0ac      	sub	sp, #176	@ 0xb0
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	4603      	mov	r3, r0
 8007dea:	6039      	str	r1, [r7, #0]
 8007dec:	80fb      	strh	r3, [r7, #6]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007df2:	2380      	movs	r3, #128	@ 0x80
 8007df4:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007e04:	e02e      	b.n	8007e64 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007e06:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	4413      	add	r3, r2
 8007e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e16:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	dd08      	ble.n	8007e30 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007e1e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	3302      	adds	r3, #2
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	4413      	add	r3, r2
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007e30:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	3302      	adds	r3, #2
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e40:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007e44:	429a      	cmp	r2, r3
 8007e46:	da08      	bge.n	8007e5a <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007e48:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	3302      	adds	r3, #2
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	4413      	add	r3, r2
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007e5a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007e5e:	3301      	adds	r3, #1
 8007e60:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007e64:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	dbca      	blt.n	8007e06 <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007e70:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007e74:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007e78:	e144      	b.n	8008104 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007e80:	88fb      	ldrh	r3, [r7, #6]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007e90:	e0a6      	b.n	8007fe0 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007e92:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ea8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007eac:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ec4:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007ec8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ede:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007ee2:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	3302      	adds	r3, #2
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4413      	add	r3, r2
 8007eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007efa:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007efe:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007f0a:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f16:	d50c      	bpl.n	8007f32 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007f18:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f24:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f30:	da19      	bge.n	8007f66 <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007f32:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007f3e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4a:	d53e      	bpl.n	8007fca <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007f4c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f58:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f64:	db31      	blt.n	8007fca <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007f66:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f72:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007f76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007f7a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007f7e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8a:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007f8e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007f92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f9a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fa6:	ee17 3a90 	vmov	r3, s15
 8007faa:	b21a      	sxth	r2, r3
 8007fac:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	33b0      	adds	r3, #176	@ 0xb0
 8007fb6:	443b      	add	r3, r7
 8007fb8:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007fbc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007fca:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007fce:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007fd2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3301      	adds	r3, #1
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007fe0:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	f6ff af52 	blt.w	8007e92 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007ff4:	e046      	b.n	8008084 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007ff6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	33b0      	adds	r3, #176	@ 0xb0
 8007ffe:	443b      	add	r3, r7
 8008000:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8008004:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008008:	3301      	adds	r3, #1
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	33b0      	adds	r3, #176	@ 0xb0
 800800e:	443b      	add	r3, r7
 8008010:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8008014:	429a      	cmp	r2, r3
 8008016:	d92e      	bls.n	8008076 <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8008018:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	33b0      	adds	r3, #176	@ 0xb0
 8008020:	443b      	add	r3, r7
 8008022:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8008026:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 800802a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800802e:	3301      	adds	r3, #1
 8008030:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	33b0      	adds	r3, #176	@ 0xb0
 8008038:	443b      	add	r3, r7
 800803a:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 800803e:	0053      	lsls	r3, r2, #1
 8008040:	33b0      	adds	r3, #176	@ 0xb0
 8008042:	443b      	add	r3, r7
 8008044:	460a      	mov	r2, r1
 8008046:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 800804a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800804e:	3301      	adds	r3, #1
 8008050:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	33b0      	adds	r3, #176	@ 0xb0
 8008058:	443b      	add	r3, r7
 800805a:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 800805e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00e      	beq.n	8008084 <hagl_fill_polygon+0x2a2>
                    i--;
 8008066:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800806a:	b29b      	uxth	r3, r3
 800806c:	3b01      	subs	r3, #1
 800806e:	b29b      	uxth	r3, r3
 8008070:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8008074:	e006      	b.n	8008084 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8008076:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800807a:	b29b      	uxth	r3, r3
 800807c:	3301      	adds	r3, #1
 800807e:	b29b      	uxth	r3, r3
 8008080:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8008084:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8008088:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 800808c:	3b01      	subs	r3, #1
 800808e:	429a      	cmp	r2, r3
 8008090:	dbb1      	blt.n	8007ff6 <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8008092:	2300      	movs	r3, #0
 8008094:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8008098:	e027      	b.n	80080ea <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 800809a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 800809e:	3301      	adds	r3, #1
 80080a0:	005b      	lsls	r3, r3, #1
 80080a2:	33b0      	adds	r3, #176	@ 0xb0
 80080a4:	443b      	add	r3, r7
 80080a6:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 80080aa:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	33b0      	adds	r3, #176	@ 0xb0
 80080b2:	443b      	add	r3, r7
 80080b4:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 80080c0:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	33b0      	adds	r3, #176	@ 0xb0
 80080c8:	443b      	add	r3, r7
 80080ca:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 80080ce:	b218      	sxth	r0, r3
 80080d0:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 80080d4:	88bb      	ldrh	r3, [r7, #4]
 80080d6:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 80080da:	f7ff f8c5 	bl	8007268 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 80080de:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80080e2:	3302      	adds	r3, #2
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 80080ea:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 80080ee:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80080f2:	429a      	cmp	r2, r3
 80080f4:	dbd1      	blt.n	800809a <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 80080f6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3301      	adds	r3, #1
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8008104:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8008108:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 800810c:	429a      	cmp	r2, r3
 800810e:	f6ff aeb4 	blt.w	8007e7a <hagl_fill_polygon+0x98>
        }
    }
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	37b0      	adds	r7, #176	@ 0xb0
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	4604      	mov	r4, r0
 8008124:	4608      	mov	r0, r1
 8008126:	4611      	mov	r1, r2
 8008128:	461a      	mov	r2, r3
 800812a:	4623      	mov	r3, r4
 800812c:	80fb      	strh	r3, [r7, #6]
 800812e:	4603      	mov	r3, r0
 8008130:	80bb      	strh	r3, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	807b      	strh	r3, [r7, #2]
 8008136:	4613      	mov	r3, r2
 8008138:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	81bb      	strh	r3, [r7, #12]
 800813e:	88bb      	ldrh	r3, [r7, #4]
 8008140:	81fb      	strh	r3, [r7, #14]
 8008142:	887b      	ldrh	r3, [r7, #2]
 8008144:	823b      	strh	r3, [r7, #16]
 8008146:	883b      	ldrh	r3, [r7, #0]
 8008148:	827b      	strh	r3, [r7, #18]
 800814a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800814c:	82bb      	strh	r3, [r7, #20]
 800814e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008150:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8008152:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008154:	f107 030c 	add.w	r3, r7, #12
 8008158:	4619      	mov	r1, r3
 800815a:	2003      	movs	r0, #3
 800815c:	f7ff fde1 	bl	8007d22 <hagl_draw_polygon>
};
 8008160:	bf00      	nop
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	bd90      	pop	{r4, r7, pc}

08008168 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	461a      	mov	r2, r3
 8008176:	4623      	mov	r3, r4
 8008178:	80fb      	strh	r3, [r7, #6]
 800817a:	4603      	mov	r3, r0
 800817c:	80bb      	strh	r3, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	807b      	strh	r3, [r7, #2]
 8008182:	4613      	mov	r3, r2
 8008184:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	81bb      	strh	r3, [r7, #12]
 800818a:	88bb      	ldrh	r3, [r7, #4]
 800818c:	81fb      	strh	r3, [r7, #14]
 800818e:	887b      	ldrh	r3, [r7, #2]
 8008190:	823b      	strh	r3, [r7, #16]
 8008192:	883b      	ldrh	r3, [r7, #0]
 8008194:	827b      	strh	r3, [r7, #18]
 8008196:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008198:	82bb      	strh	r3, [r7, #20]
 800819a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800819c:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 800819e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80081a0:	f107 030c 	add.w	r3, r7, #12
 80081a4:	4619      	mov	r1, r3
 80081a6:	2003      	movs	r0, #3
 80081a8:	f7ff fe1b 	bl	8007de2 <hagl_fill_polygon>
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd90      	pop	{r4, r7, pc}

080081b4 <malloc>:
 80081b4:	4b02      	ldr	r3, [pc, #8]	@ (80081c0 <malloc+0xc>)
 80081b6:	4601      	mov	r1, r0
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	f000 b82d 	b.w	8008218 <_malloc_r>
 80081be:	bf00      	nop
 80081c0:	20000214 	.word	0x20000214

080081c4 <free>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	@ (80081d0 <free+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f000 b9b5 	b.w	8008538 <_free_r>
 80081ce:	bf00      	nop
 80081d0:	20000214 	.word	0x20000214

080081d4 <sbrk_aligned>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008214 <sbrk_aligned+0x40>)
 80081d8:	460c      	mov	r4, r1
 80081da:	6831      	ldr	r1, [r6, #0]
 80081dc:	4605      	mov	r5, r0
 80081de:	b911      	cbnz	r1, 80081e6 <sbrk_aligned+0x12>
 80081e0:	f000 f960 	bl	80084a4 <_sbrk_r>
 80081e4:	6030      	str	r0, [r6, #0]
 80081e6:	4621      	mov	r1, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 f95b 	bl	80084a4 <_sbrk_r>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d103      	bne.n	80081fa <sbrk_aligned+0x26>
 80081f2:	f04f 34ff 	mov.w	r4, #4294967295
 80081f6:	4620      	mov	r0, r4
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
 80081fa:	1cc4      	adds	r4, r0, #3
 80081fc:	f024 0403 	bic.w	r4, r4, #3
 8008200:	42a0      	cmp	r0, r4
 8008202:	d0f8      	beq.n	80081f6 <sbrk_aligned+0x22>
 8008204:	1a21      	subs	r1, r4, r0
 8008206:	4628      	mov	r0, r5
 8008208:	f000 f94c 	bl	80084a4 <_sbrk_r>
 800820c:	3001      	adds	r0, #1
 800820e:	d1f2      	bne.n	80081f6 <sbrk_aligned+0x22>
 8008210:	e7ef      	b.n	80081f2 <sbrk_aligned+0x1e>
 8008212:	bf00      	nop
 8008214:	2000af50 	.word	0x2000af50

08008218 <_malloc_r>:
 8008218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800821c:	1ccd      	adds	r5, r1, #3
 800821e:	f025 0503 	bic.w	r5, r5, #3
 8008222:	3508      	adds	r5, #8
 8008224:	2d0c      	cmp	r5, #12
 8008226:	bf38      	it	cc
 8008228:	250c      	movcc	r5, #12
 800822a:	2d00      	cmp	r5, #0
 800822c:	4606      	mov	r6, r0
 800822e:	db01      	blt.n	8008234 <_malloc_r+0x1c>
 8008230:	42a9      	cmp	r1, r5
 8008232:	d904      	bls.n	800823e <_malloc_r+0x26>
 8008234:	230c      	movs	r3, #12
 8008236:	6033      	str	r3, [r6, #0]
 8008238:	2000      	movs	r0, #0
 800823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008314 <_malloc_r+0xfc>
 8008242:	f000 f869 	bl	8008318 <__malloc_lock>
 8008246:	f8d8 3000 	ldr.w	r3, [r8]
 800824a:	461c      	mov	r4, r3
 800824c:	bb44      	cbnz	r4, 80082a0 <_malloc_r+0x88>
 800824e:	4629      	mov	r1, r5
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff ffbf 	bl	80081d4 <sbrk_aligned>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	4604      	mov	r4, r0
 800825a:	d158      	bne.n	800830e <_malloc_r+0xf6>
 800825c:	f8d8 4000 	ldr.w	r4, [r8]
 8008260:	4627      	mov	r7, r4
 8008262:	2f00      	cmp	r7, #0
 8008264:	d143      	bne.n	80082ee <_malloc_r+0xd6>
 8008266:	2c00      	cmp	r4, #0
 8008268:	d04b      	beq.n	8008302 <_malloc_r+0xea>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	4639      	mov	r1, r7
 800826e:	4630      	mov	r0, r6
 8008270:	eb04 0903 	add.w	r9, r4, r3
 8008274:	f000 f916 	bl	80084a4 <_sbrk_r>
 8008278:	4581      	cmp	r9, r0
 800827a:	d142      	bne.n	8008302 <_malloc_r+0xea>
 800827c:	6821      	ldr	r1, [r4, #0]
 800827e:	1a6d      	subs	r5, r5, r1
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffa6 	bl	80081d4 <sbrk_aligned>
 8008288:	3001      	adds	r0, #1
 800828a:	d03a      	beq.n	8008302 <_malloc_r+0xea>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	442b      	add	r3, r5
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	f8d8 3000 	ldr.w	r3, [r8]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	bb62      	cbnz	r2, 80082f4 <_malloc_r+0xdc>
 800829a:	f8c8 7000 	str.w	r7, [r8]
 800829e:	e00f      	b.n	80082c0 <_malloc_r+0xa8>
 80082a0:	6822      	ldr	r2, [r4, #0]
 80082a2:	1b52      	subs	r2, r2, r5
 80082a4:	d420      	bmi.n	80082e8 <_malloc_r+0xd0>
 80082a6:	2a0b      	cmp	r2, #11
 80082a8:	d917      	bls.n	80082da <_malloc_r+0xc2>
 80082aa:	1961      	adds	r1, r4, r5
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	6025      	str	r5, [r4, #0]
 80082b0:	bf18      	it	ne
 80082b2:	6059      	strne	r1, [r3, #4]
 80082b4:	6863      	ldr	r3, [r4, #4]
 80082b6:	bf08      	it	eq
 80082b8:	f8c8 1000 	streq.w	r1, [r8]
 80082bc:	5162      	str	r2, [r4, r5]
 80082be:	604b      	str	r3, [r1, #4]
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f82f 	bl	8008324 <__malloc_unlock>
 80082c6:	f104 000b 	add.w	r0, r4, #11
 80082ca:	1d23      	adds	r3, r4, #4
 80082cc:	f020 0007 	bic.w	r0, r0, #7
 80082d0:	1ac2      	subs	r2, r0, r3
 80082d2:	bf1c      	itt	ne
 80082d4:	1a1b      	subne	r3, r3, r0
 80082d6:	50a3      	strne	r3, [r4, r2]
 80082d8:	e7af      	b.n	800823a <_malloc_r+0x22>
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	42a3      	cmp	r3, r4
 80082de:	bf0c      	ite	eq
 80082e0:	f8c8 2000 	streq.w	r2, [r8]
 80082e4:	605a      	strne	r2, [r3, #4]
 80082e6:	e7eb      	b.n	80082c0 <_malloc_r+0xa8>
 80082e8:	4623      	mov	r3, r4
 80082ea:	6864      	ldr	r4, [r4, #4]
 80082ec:	e7ae      	b.n	800824c <_malloc_r+0x34>
 80082ee:	463c      	mov	r4, r7
 80082f0:	687f      	ldr	r7, [r7, #4]
 80082f2:	e7b6      	b.n	8008262 <_malloc_r+0x4a>
 80082f4:	461a      	mov	r2, r3
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d1fb      	bne.n	80082f4 <_malloc_r+0xdc>
 80082fc:	2300      	movs	r3, #0
 80082fe:	6053      	str	r3, [r2, #4]
 8008300:	e7de      	b.n	80082c0 <_malloc_r+0xa8>
 8008302:	230c      	movs	r3, #12
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	4630      	mov	r0, r6
 8008308:	f000 f80c 	bl	8008324 <__malloc_unlock>
 800830c:	e794      	b.n	8008238 <_malloc_r+0x20>
 800830e:	6005      	str	r5, [r0, #0]
 8008310:	e7d6      	b.n	80082c0 <_malloc_r+0xa8>
 8008312:	bf00      	nop
 8008314:	2000af54 	.word	0x2000af54

08008318 <__malloc_lock>:
 8008318:	4801      	ldr	r0, [pc, #4]	@ (8008320 <__malloc_lock+0x8>)
 800831a:	f000 b8fd 	b.w	8008518 <__retarget_lock_acquire_recursive>
 800831e:	bf00      	nop
 8008320:	2000b094 	.word	0x2000b094

08008324 <__malloc_unlock>:
 8008324:	4801      	ldr	r0, [pc, #4]	@ (800832c <__malloc_unlock+0x8>)
 8008326:	f000 b8f8 	b.w	800851a <__retarget_lock_release_recursive>
 800832a:	bf00      	nop
 800832c:	2000b094 	.word	0x2000b094

08008330 <sniprintf>:
 8008330:	b40c      	push	{r2, r3}
 8008332:	b530      	push	{r4, r5, lr}
 8008334:	4b17      	ldr	r3, [pc, #92]	@ (8008394 <sniprintf+0x64>)
 8008336:	1e0c      	subs	r4, r1, #0
 8008338:	681d      	ldr	r5, [r3, #0]
 800833a:	b09d      	sub	sp, #116	@ 0x74
 800833c:	da08      	bge.n	8008350 <sniprintf+0x20>
 800833e:	238b      	movs	r3, #139	@ 0x8b
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	b01d      	add	sp, #116	@ 0x74
 8008348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800834c:	b002      	add	sp, #8
 800834e:	4770      	bx	lr
 8008350:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008354:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008358:	bf14      	ite	ne
 800835a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800835e:	4623      	moveq	r3, r4
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	9307      	str	r3, [sp, #28]
 8008364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008368:	9002      	str	r0, [sp, #8]
 800836a:	9006      	str	r0, [sp, #24]
 800836c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008370:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008372:	ab21      	add	r3, sp, #132	@ 0x84
 8008374:	a902      	add	r1, sp, #8
 8008376:	4628      	mov	r0, r5
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	f000 f983 	bl	8008684 <_svfiprintf_r>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	bfbc      	itt	lt
 8008382:	238b      	movlt	r3, #139	@ 0x8b
 8008384:	602b      	strlt	r3, [r5, #0]
 8008386:	2c00      	cmp	r4, #0
 8008388:	d0dd      	beq.n	8008346 <sniprintf+0x16>
 800838a:	9b02      	ldr	r3, [sp, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e7d9      	b.n	8008346 <sniprintf+0x16>
 8008392:	bf00      	nop
 8008394:	20000214 	.word	0x20000214

08008398 <siprintf>:
 8008398:	b40e      	push	{r1, r2, r3}
 800839a:	b500      	push	{lr}
 800839c:	b09c      	sub	sp, #112	@ 0x70
 800839e:	ab1d      	add	r3, sp, #116	@ 0x74
 80083a0:	9002      	str	r0, [sp, #8]
 80083a2:	9006      	str	r0, [sp, #24]
 80083a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083a8:	4809      	ldr	r0, [pc, #36]	@ (80083d0 <siprintf+0x38>)
 80083aa:	9107      	str	r1, [sp, #28]
 80083ac:	9104      	str	r1, [sp, #16]
 80083ae:	4909      	ldr	r1, [pc, #36]	@ (80083d4 <siprintf+0x3c>)
 80083b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b4:	9105      	str	r1, [sp, #20]
 80083b6:	6800      	ldr	r0, [r0, #0]
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	a902      	add	r1, sp, #8
 80083bc:	f000 f962 	bl	8008684 <_svfiprintf_r>
 80083c0:	9b02      	ldr	r3, [sp, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	701a      	strb	r2, [r3, #0]
 80083c6:	b01c      	add	sp, #112	@ 0x70
 80083c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083cc:	b003      	add	sp, #12
 80083ce:	4770      	bx	lr
 80083d0:	20000214 	.word	0x20000214
 80083d4:	ffff0208 	.word	0xffff0208

080083d8 <_vsniprintf_r>:
 80083d8:	b530      	push	{r4, r5, lr}
 80083da:	4614      	mov	r4, r2
 80083dc:	2c00      	cmp	r4, #0
 80083de:	b09b      	sub	sp, #108	@ 0x6c
 80083e0:	4605      	mov	r5, r0
 80083e2:	461a      	mov	r2, r3
 80083e4:	da05      	bge.n	80083f2 <_vsniprintf_r+0x1a>
 80083e6:	238b      	movs	r3, #139	@ 0x8b
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	b01b      	add	sp, #108	@ 0x6c
 80083f0:	bd30      	pop	{r4, r5, pc}
 80083f2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80083fa:	bf14      	ite	ne
 80083fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008400:	4623      	moveq	r3, r4
 8008402:	9302      	str	r3, [sp, #8]
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800840a:	9100      	str	r1, [sp, #0]
 800840c:	9104      	str	r1, [sp, #16]
 800840e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008412:	4669      	mov	r1, sp
 8008414:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008416:	f000 f935 	bl	8008684 <_svfiprintf_r>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	bfbc      	itt	lt
 800841e:	238b      	movlt	r3, #139	@ 0x8b
 8008420:	602b      	strlt	r3, [r5, #0]
 8008422:	2c00      	cmp	r4, #0
 8008424:	d0e3      	beq.n	80083ee <_vsniprintf_r+0x16>
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e7df      	b.n	80083ee <_vsniprintf_r+0x16>
	...

08008430 <vsniprintf>:
 8008430:	b507      	push	{r0, r1, r2, lr}
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4613      	mov	r3, r2
 8008436:	460a      	mov	r2, r1
 8008438:	4601      	mov	r1, r0
 800843a:	4803      	ldr	r0, [pc, #12]	@ (8008448 <vsniprintf+0x18>)
 800843c:	6800      	ldr	r0, [r0, #0]
 800843e:	f7ff ffcb 	bl	80083d8 <_vsniprintf_r>
 8008442:	b003      	add	sp, #12
 8008444:	f85d fb04 	ldr.w	pc, [sp], #4
 8008448:	20000214 	.word	0x20000214

0800844c <memcmp>:
 800844c:	b510      	push	{r4, lr}
 800844e:	3901      	subs	r1, #1
 8008450:	4402      	add	r2, r0
 8008452:	4290      	cmp	r0, r2
 8008454:	d101      	bne.n	800845a <memcmp+0xe>
 8008456:	2000      	movs	r0, #0
 8008458:	e005      	b.n	8008466 <memcmp+0x1a>
 800845a:	7803      	ldrb	r3, [r0, #0]
 800845c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008460:	42a3      	cmp	r3, r4
 8008462:	d001      	beq.n	8008468 <memcmp+0x1c>
 8008464:	1b18      	subs	r0, r3, r4
 8008466:	bd10      	pop	{r4, pc}
 8008468:	3001      	adds	r0, #1
 800846a:	e7f2      	b.n	8008452 <memcmp+0x6>

0800846c <memset>:
 800846c:	4402      	add	r2, r0
 800846e:	4603      	mov	r3, r0
 8008470:	4293      	cmp	r3, r2
 8008472:	d100      	bne.n	8008476 <memset+0xa>
 8008474:	4770      	bx	lr
 8008476:	f803 1b01 	strb.w	r1, [r3], #1
 800847a:	e7f9      	b.n	8008470 <memset+0x4>

0800847c <strncpy>:
 800847c:	b510      	push	{r4, lr}
 800847e:	3901      	subs	r1, #1
 8008480:	4603      	mov	r3, r0
 8008482:	b132      	cbz	r2, 8008492 <strncpy+0x16>
 8008484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008488:	f803 4b01 	strb.w	r4, [r3], #1
 800848c:	3a01      	subs	r2, #1
 800848e:	2c00      	cmp	r4, #0
 8008490:	d1f7      	bne.n	8008482 <strncpy+0x6>
 8008492:	441a      	add	r2, r3
 8008494:	2100      	movs	r1, #0
 8008496:	4293      	cmp	r3, r2
 8008498:	d100      	bne.n	800849c <strncpy+0x20>
 800849a:	bd10      	pop	{r4, pc}
 800849c:	f803 1b01 	strb.w	r1, [r3], #1
 80084a0:	e7f9      	b.n	8008496 <strncpy+0x1a>
	...

080084a4 <_sbrk_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d06      	ldr	r5, [pc, #24]	@ (80084c0 <_sbrk_r+0x1c>)
 80084a8:	2300      	movs	r3, #0
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	602b      	str	r3, [r5, #0]
 80084b0:	f7f9 ff94 	bl	80023dc <_sbrk>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_sbrk_r+0x1a>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_sbrk_r+0x1a>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	2000b090 	.word	0x2000b090

080084c4 <__errno>:
 80084c4:	4b01      	ldr	r3, [pc, #4]	@ (80084cc <__errno+0x8>)
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20000214 	.word	0x20000214

080084d0 <__libc_init_array>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008508 <__libc_init_array+0x38>)
 80084d4:	4c0d      	ldr	r4, [pc, #52]	@ (800850c <__libc_init_array+0x3c>)
 80084d6:	1b64      	subs	r4, r4, r5
 80084d8:	10a4      	asrs	r4, r4, #2
 80084da:	2600      	movs	r6, #0
 80084dc:	42a6      	cmp	r6, r4
 80084de:	d109      	bne.n	80084f4 <__libc_init_array+0x24>
 80084e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008510 <__libc_init_array+0x40>)
 80084e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008514 <__libc_init_array+0x44>)
 80084e4:	f000 fba8 	bl	8008c38 <_init>
 80084e8:	1b64      	subs	r4, r4, r5
 80084ea:	10a4      	asrs	r4, r4, #2
 80084ec:	2600      	movs	r6, #0
 80084ee:	42a6      	cmp	r6, r4
 80084f0:	d105      	bne.n	80084fe <__libc_init_array+0x2e>
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f8:	4798      	blx	r3
 80084fa:	3601      	adds	r6, #1
 80084fc:	e7ee      	b.n	80084dc <__libc_init_array+0xc>
 80084fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008502:	4798      	blx	r3
 8008504:	3601      	adds	r6, #1
 8008506:	e7f2      	b.n	80084ee <__libc_init_array+0x1e>
 8008508:	080122f0 	.word	0x080122f0
 800850c:	080122f0 	.word	0x080122f0
 8008510:	080122f0 	.word	0x080122f0
 8008514:	080122f4 	.word	0x080122f4

08008518 <__retarget_lock_acquire_recursive>:
 8008518:	4770      	bx	lr

0800851a <__retarget_lock_release_recursive>:
 800851a:	4770      	bx	lr

0800851c <memcpy>:
 800851c:	440a      	add	r2, r1
 800851e:	4291      	cmp	r1, r2
 8008520:	f100 33ff 	add.w	r3, r0, #4294967295
 8008524:	d100      	bne.n	8008528 <memcpy+0xc>
 8008526:	4770      	bx	lr
 8008528:	b510      	push	{r4, lr}
 800852a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800852e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008532:	4291      	cmp	r1, r2
 8008534:	d1f9      	bne.n	800852a <memcpy+0xe>
 8008536:	bd10      	pop	{r4, pc}

08008538 <_free_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4605      	mov	r5, r0
 800853c:	2900      	cmp	r1, #0
 800853e:	d041      	beq.n	80085c4 <_free_r+0x8c>
 8008540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008544:	1f0c      	subs	r4, r1, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	bfb8      	it	lt
 800854a:	18e4      	addlt	r4, r4, r3
 800854c:	f7ff fee4 	bl	8008318 <__malloc_lock>
 8008550:	4a1d      	ldr	r2, [pc, #116]	@ (80085c8 <_free_r+0x90>)
 8008552:	6813      	ldr	r3, [r2, #0]
 8008554:	b933      	cbnz	r3, 8008564 <_free_r+0x2c>
 8008556:	6063      	str	r3, [r4, #4]
 8008558:	6014      	str	r4, [r2, #0]
 800855a:	4628      	mov	r0, r5
 800855c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008560:	f7ff bee0 	b.w	8008324 <__malloc_unlock>
 8008564:	42a3      	cmp	r3, r4
 8008566:	d908      	bls.n	800857a <_free_r+0x42>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	1821      	adds	r1, r4, r0
 800856c:	428b      	cmp	r3, r1
 800856e:	bf01      	itttt	eq
 8008570:	6819      	ldreq	r1, [r3, #0]
 8008572:	685b      	ldreq	r3, [r3, #4]
 8008574:	1809      	addeq	r1, r1, r0
 8008576:	6021      	streq	r1, [r4, #0]
 8008578:	e7ed      	b.n	8008556 <_free_r+0x1e>
 800857a:	461a      	mov	r2, r3
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	b10b      	cbz	r3, 8008584 <_free_r+0x4c>
 8008580:	42a3      	cmp	r3, r4
 8008582:	d9fa      	bls.n	800857a <_free_r+0x42>
 8008584:	6811      	ldr	r1, [r2, #0]
 8008586:	1850      	adds	r0, r2, r1
 8008588:	42a0      	cmp	r0, r4
 800858a:	d10b      	bne.n	80085a4 <_free_r+0x6c>
 800858c:	6820      	ldr	r0, [r4, #0]
 800858e:	4401      	add	r1, r0
 8008590:	1850      	adds	r0, r2, r1
 8008592:	4283      	cmp	r3, r0
 8008594:	6011      	str	r1, [r2, #0]
 8008596:	d1e0      	bne.n	800855a <_free_r+0x22>
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	6053      	str	r3, [r2, #4]
 800859e:	4408      	add	r0, r1
 80085a0:	6010      	str	r0, [r2, #0]
 80085a2:	e7da      	b.n	800855a <_free_r+0x22>
 80085a4:	d902      	bls.n	80085ac <_free_r+0x74>
 80085a6:	230c      	movs	r3, #12
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	e7d6      	b.n	800855a <_free_r+0x22>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	1821      	adds	r1, r4, r0
 80085b0:	428b      	cmp	r3, r1
 80085b2:	bf04      	itt	eq
 80085b4:	6819      	ldreq	r1, [r3, #0]
 80085b6:	685b      	ldreq	r3, [r3, #4]
 80085b8:	6063      	str	r3, [r4, #4]
 80085ba:	bf04      	itt	eq
 80085bc:	1809      	addeq	r1, r1, r0
 80085be:	6021      	streq	r1, [r4, #0]
 80085c0:	6054      	str	r4, [r2, #4]
 80085c2:	e7ca      	b.n	800855a <_free_r+0x22>
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	2000af54 	.word	0x2000af54

080085cc <__ssputs_r>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	688e      	ldr	r6, [r1, #8]
 80085d2:	461f      	mov	r7, r3
 80085d4:	42be      	cmp	r6, r7
 80085d6:	680b      	ldr	r3, [r1, #0]
 80085d8:	4682      	mov	sl, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	4690      	mov	r8, r2
 80085de:	d82d      	bhi.n	800863c <__ssputs_r+0x70>
 80085e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085e8:	d026      	beq.n	8008638 <__ssputs_r+0x6c>
 80085ea:	6965      	ldr	r5, [r4, #20]
 80085ec:	6909      	ldr	r1, [r1, #16]
 80085ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f2:	eba3 0901 	sub.w	r9, r3, r1
 80085f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085fa:	1c7b      	adds	r3, r7, #1
 80085fc:	444b      	add	r3, r9
 80085fe:	106d      	asrs	r5, r5, #1
 8008600:	429d      	cmp	r5, r3
 8008602:	bf38      	it	cc
 8008604:	461d      	movcc	r5, r3
 8008606:	0553      	lsls	r3, r2, #21
 8008608:	d527      	bpl.n	800865a <__ssputs_r+0x8e>
 800860a:	4629      	mov	r1, r5
 800860c:	f7ff fe04 	bl	8008218 <_malloc_r>
 8008610:	4606      	mov	r6, r0
 8008612:	b360      	cbz	r0, 800866e <__ssputs_r+0xa2>
 8008614:	6921      	ldr	r1, [r4, #16]
 8008616:	464a      	mov	r2, r9
 8008618:	f7ff ff80 	bl	800851c <memcpy>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	6126      	str	r6, [r4, #16]
 800862a:	6165      	str	r5, [r4, #20]
 800862c:	444e      	add	r6, r9
 800862e:	eba5 0509 	sub.w	r5, r5, r9
 8008632:	6026      	str	r6, [r4, #0]
 8008634:	60a5      	str	r5, [r4, #8]
 8008636:	463e      	mov	r6, r7
 8008638:	42be      	cmp	r6, r7
 800863a:	d900      	bls.n	800863e <__ssputs_r+0x72>
 800863c:	463e      	mov	r6, r7
 800863e:	6820      	ldr	r0, [r4, #0]
 8008640:	4632      	mov	r2, r6
 8008642:	4641      	mov	r1, r8
 8008644:	f000 faa8 	bl	8008b98 <memmove>
 8008648:	68a3      	ldr	r3, [r4, #8]
 800864a:	1b9b      	subs	r3, r3, r6
 800864c:	60a3      	str	r3, [r4, #8]
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	4433      	add	r3, r6
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	2000      	movs	r0, #0
 8008656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865a:	462a      	mov	r2, r5
 800865c:	f000 fab6 	bl	8008bcc <_realloc_r>
 8008660:	4606      	mov	r6, r0
 8008662:	2800      	cmp	r0, #0
 8008664:	d1e0      	bne.n	8008628 <__ssputs_r+0x5c>
 8008666:	6921      	ldr	r1, [r4, #16]
 8008668:	4650      	mov	r0, sl
 800866a:	f7ff ff65 	bl	8008538 <_free_r>
 800866e:	230c      	movs	r3, #12
 8008670:	f8ca 3000 	str.w	r3, [sl]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	e7e9      	b.n	8008656 <__ssputs_r+0x8a>
	...

08008684 <_svfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4698      	mov	r8, r3
 800868a:	898b      	ldrh	r3, [r1, #12]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	b09d      	sub	sp, #116	@ 0x74
 8008690:	4607      	mov	r7, r0
 8008692:	460d      	mov	r5, r1
 8008694:	4614      	mov	r4, r2
 8008696:	d510      	bpl.n	80086ba <_svfiprintf_r+0x36>
 8008698:	690b      	ldr	r3, [r1, #16]
 800869a:	b973      	cbnz	r3, 80086ba <_svfiprintf_r+0x36>
 800869c:	2140      	movs	r1, #64	@ 0x40
 800869e:	f7ff fdbb 	bl	8008218 <_malloc_r>
 80086a2:	6028      	str	r0, [r5, #0]
 80086a4:	6128      	str	r0, [r5, #16]
 80086a6:	b930      	cbnz	r0, 80086b6 <_svfiprintf_r+0x32>
 80086a8:	230c      	movs	r3, #12
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	b01d      	add	sp, #116	@ 0x74
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	2340      	movs	r3, #64	@ 0x40
 80086b8:	616b      	str	r3, [r5, #20]
 80086ba:	2300      	movs	r3, #0
 80086bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086be:	2320      	movs	r3, #32
 80086c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c8:	2330      	movs	r3, #48	@ 0x30
 80086ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008868 <_svfiprintf_r+0x1e4>
 80086ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086d2:	f04f 0901 	mov.w	r9, #1
 80086d6:	4623      	mov	r3, r4
 80086d8:	469a      	mov	sl, r3
 80086da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086de:	b10a      	cbz	r2, 80086e4 <_svfiprintf_r+0x60>
 80086e0:	2a25      	cmp	r2, #37	@ 0x25
 80086e2:	d1f9      	bne.n	80086d8 <_svfiprintf_r+0x54>
 80086e4:	ebba 0b04 	subs.w	fp, sl, r4
 80086e8:	d00b      	beq.n	8008702 <_svfiprintf_r+0x7e>
 80086ea:	465b      	mov	r3, fp
 80086ec:	4622      	mov	r2, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	4638      	mov	r0, r7
 80086f2:	f7ff ff6b 	bl	80085cc <__ssputs_r>
 80086f6:	3001      	adds	r0, #1
 80086f8:	f000 80a7 	beq.w	800884a <_svfiprintf_r+0x1c6>
 80086fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086fe:	445a      	add	r2, fp
 8008700:	9209      	str	r2, [sp, #36]	@ 0x24
 8008702:	f89a 3000 	ldrb.w	r3, [sl]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 809f 	beq.w	800884a <_svfiprintf_r+0x1c6>
 800870c:	2300      	movs	r3, #0
 800870e:	f04f 32ff 	mov.w	r2, #4294967295
 8008712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008716:	f10a 0a01 	add.w	sl, sl, #1
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	9307      	str	r3, [sp, #28]
 800871e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008722:	931a      	str	r3, [sp, #104]	@ 0x68
 8008724:	4654      	mov	r4, sl
 8008726:	2205      	movs	r2, #5
 8008728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872c:	484e      	ldr	r0, [pc, #312]	@ (8008868 <_svfiprintf_r+0x1e4>)
 800872e:	f7f7 fd57 	bl	80001e0 <memchr>
 8008732:	9a04      	ldr	r2, [sp, #16]
 8008734:	b9d8      	cbnz	r0, 800876e <_svfiprintf_r+0xea>
 8008736:	06d0      	lsls	r0, r2, #27
 8008738:	bf44      	itt	mi
 800873a:	2320      	movmi	r3, #32
 800873c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008740:	0711      	lsls	r1, r2, #28
 8008742:	bf44      	itt	mi
 8008744:	232b      	movmi	r3, #43	@ 0x2b
 8008746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800874a:	f89a 3000 	ldrb.w	r3, [sl]
 800874e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008750:	d015      	beq.n	800877e <_svfiprintf_r+0xfa>
 8008752:	9a07      	ldr	r2, [sp, #28]
 8008754:	4654      	mov	r4, sl
 8008756:	2000      	movs	r0, #0
 8008758:	f04f 0c0a 	mov.w	ip, #10
 800875c:	4621      	mov	r1, r4
 800875e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008762:	3b30      	subs	r3, #48	@ 0x30
 8008764:	2b09      	cmp	r3, #9
 8008766:	d94b      	bls.n	8008800 <_svfiprintf_r+0x17c>
 8008768:	b1b0      	cbz	r0, 8008798 <_svfiprintf_r+0x114>
 800876a:	9207      	str	r2, [sp, #28]
 800876c:	e014      	b.n	8008798 <_svfiprintf_r+0x114>
 800876e:	eba0 0308 	sub.w	r3, r0, r8
 8008772:	fa09 f303 	lsl.w	r3, r9, r3
 8008776:	4313      	orrs	r3, r2
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	46a2      	mov	sl, r4
 800877c:	e7d2      	b.n	8008724 <_svfiprintf_r+0xa0>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	1d19      	adds	r1, r3, #4
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	9103      	str	r1, [sp, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfbb      	ittet	lt
 800878a:	425b      	neglt	r3, r3
 800878c:	f042 0202 	orrlt.w	r2, r2, #2
 8008790:	9307      	strge	r3, [sp, #28]
 8008792:	9307      	strlt	r3, [sp, #28]
 8008794:	bfb8      	it	lt
 8008796:	9204      	strlt	r2, [sp, #16]
 8008798:	7823      	ldrb	r3, [r4, #0]
 800879a:	2b2e      	cmp	r3, #46	@ 0x2e
 800879c:	d10a      	bne.n	80087b4 <_svfiprintf_r+0x130>
 800879e:	7863      	ldrb	r3, [r4, #1]
 80087a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087a2:	d132      	bne.n	800880a <_svfiprintf_r+0x186>
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	1d1a      	adds	r2, r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	9203      	str	r2, [sp, #12]
 80087ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087b0:	3402      	adds	r4, #2
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008878 <_svfiprintf_r+0x1f4>
 80087b8:	7821      	ldrb	r1, [r4, #0]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4650      	mov	r0, sl
 80087be:	f7f7 fd0f 	bl	80001e0 <memchr>
 80087c2:	b138      	cbz	r0, 80087d4 <_svfiprintf_r+0x150>
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	eba0 000a 	sub.w	r0, r0, sl
 80087ca:	2240      	movs	r2, #64	@ 0x40
 80087cc:	4082      	lsls	r2, r0
 80087ce:	4313      	orrs	r3, r2
 80087d0:	3401      	adds	r4, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d8:	4824      	ldr	r0, [pc, #144]	@ (800886c <_svfiprintf_r+0x1e8>)
 80087da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087de:	2206      	movs	r2, #6
 80087e0:	f7f7 fcfe 	bl	80001e0 <memchr>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d036      	beq.n	8008856 <_svfiprintf_r+0x1d2>
 80087e8:	4b21      	ldr	r3, [pc, #132]	@ (8008870 <_svfiprintf_r+0x1ec>)
 80087ea:	bb1b      	cbnz	r3, 8008834 <_svfiprintf_r+0x1b0>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	3307      	adds	r3, #7
 80087f0:	f023 0307 	bic.w	r3, r3, #7
 80087f4:	3308      	adds	r3, #8
 80087f6:	9303      	str	r3, [sp, #12]
 80087f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087fa:	4433      	add	r3, r6
 80087fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fe:	e76a      	b.n	80086d6 <_svfiprintf_r+0x52>
 8008800:	fb0c 3202 	mla	r2, ip, r2, r3
 8008804:	460c      	mov	r4, r1
 8008806:	2001      	movs	r0, #1
 8008808:	e7a8      	b.n	800875c <_svfiprintf_r+0xd8>
 800880a:	2300      	movs	r3, #0
 800880c:	3401      	adds	r4, #1
 800880e:	9305      	str	r3, [sp, #20]
 8008810:	4619      	mov	r1, r3
 8008812:	f04f 0c0a 	mov.w	ip, #10
 8008816:	4620      	mov	r0, r4
 8008818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881c:	3a30      	subs	r2, #48	@ 0x30
 800881e:	2a09      	cmp	r2, #9
 8008820:	d903      	bls.n	800882a <_svfiprintf_r+0x1a6>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0c6      	beq.n	80087b4 <_svfiprintf_r+0x130>
 8008826:	9105      	str	r1, [sp, #20]
 8008828:	e7c4      	b.n	80087b4 <_svfiprintf_r+0x130>
 800882a:	fb0c 2101 	mla	r1, ip, r1, r2
 800882e:	4604      	mov	r4, r0
 8008830:	2301      	movs	r3, #1
 8008832:	e7f0      	b.n	8008816 <_svfiprintf_r+0x192>
 8008834:	ab03      	add	r3, sp, #12
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	462a      	mov	r2, r5
 800883a:	4b0e      	ldr	r3, [pc, #56]	@ (8008874 <_svfiprintf_r+0x1f0>)
 800883c:	a904      	add	r1, sp, #16
 800883e:	4638      	mov	r0, r7
 8008840:	f3af 8000 	nop.w
 8008844:	1c42      	adds	r2, r0, #1
 8008846:	4606      	mov	r6, r0
 8008848:	d1d6      	bne.n	80087f8 <_svfiprintf_r+0x174>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	065b      	lsls	r3, r3, #25
 800884e:	f53f af2d 	bmi.w	80086ac <_svfiprintf_r+0x28>
 8008852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008854:	e72c      	b.n	80086b0 <_svfiprintf_r+0x2c>
 8008856:	ab03      	add	r3, sp, #12
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	462a      	mov	r2, r5
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <_svfiprintf_r+0x1f0>)
 800885e:	a904      	add	r1, sp, #16
 8008860:	4638      	mov	r0, r7
 8008862:	f000 f879 	bl	8008958 <_printf_i>
 8008866:	e7ed      	b.n	8008844 <_svfiprintf_r+0x1c0>
 8008868:	080122b4 	.word	0x080122b4
 800886c:	080122be 	.word	0x080122be
 8008870:	00000000 	.word	0x00000000
 8008874:	080085cd 	.word	0x080085cd
 8008878:	080122ba 	.word	0x080122ba

0800887c <_printf_common>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	4616      	mov	r6, r2
 8008882:	4698      	mov	r8, r3
 8008884:	688a      	ldr	r2, [r1, #8]
 8008886:	690b      	ldr	r3, [r1, #16]
 8008888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800888c:	4293      	cmp	r3, r2
 800888e:	bfb8      	it	lt
 8008890:	4613      	movlt	r3, r2
 8008892:	6033      	str	r3, [r6, #0]
 8008894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008898:	4607      	mov	r7, r0
 800889a:	460c      	mov	r4, r1
 800889c:	b10a      	cbz	r2, 80088a2 <_printf_common+0x26>
 800889e:	3301      	adds	r3, #1
 80088a0:	6033      	str	r3, [r6, #0]
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	0699      	lsls	r1, r3, #26
 80088a6:	bf42      	ittt	mi
 80088a8:	6833      	ldrmi	r3, [r6, #0]
 80088aa:	3302      	addmi	r3, #2
 80088ac:	6033      	strmi	r3, [r6, #0]
 80088ae:	6825      	ldr	r5, [r4, #0]
 80088b0:	f015 0506 	ands.w	r5, r5, #6
 80088b4:	d106      	bne.n	80088c4 <_printf_common+0x48>
 80088b6:	f104 0a19 	add.w	sl, r4, #25
 80088ba:	68e3      	ldr	r3, [r4, #12]
 80088bc:	6832      	ldr	r2, [r6, #0]
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dc26      	bgt.n	8008912 <_printf_common+0x96>
 80088c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088c8:	6822      	ldr	r2, [r4, #0]
 80088ca:	3b00      	subs	r3, #0
 80088cc:	bf18      	it	ne
 80088ce:	2301      	movne	r3, #1
 80088d0:	0692      	lsls	r2, r2, #26
 80088d2:	d42b      	bmi.n	800892c <_printf_common+0xb0>
 80088d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088d8:	4641      	mov	r1, r8
 80088da:	4638      	mov	r0, r7
 80088dc:	47c8      	blx	r9
 80088de:	3001      	adds	r0, #1
 80088e0:	d01e      	beq.n	8008920 <_printf_common+0xa4>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	6922      	ldr	r2, [r4, #16]
 80088e6:	f003 0306 	and.w	r3, r3, #6
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	bf02      	ittt	eq
 80088ee:	68e5      	ldreq	r5, [r4, #12]
 80088f0:	6833      	ldreq	r3, [r6, #0]
 80088f2:	1aed      	subeq	r5, r5, r3
 80088f4:	68a3      	ldr	r3, [r4, #8]
 80088f6:	bf0c      	ite	eq
 80088f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088fc:	2500      	movne	r5, #0
 80088fe:	4293      	cmp	r3, r2
 8008900:	bfc4      	itt	gt
 8008902:	1a9b      	subgt	r3, r3, r2
 8008904:	18ed      	addgt	r5, r5, r3
 8008906:	2600      	movs	r6, #0
 8008908:	341a      	adds	r4, #26
 800890a:	42b5      	cmp	r5, r6
 800890c:	d11a      	bne.n	8008944 <_printf_common+0xc8>
 800890e:	2000      	movs	r0, #0
 8008910:	e008      	b.n	8008924 <_printf_common+0xa8>
 8008912:	2301      	movs	r3, #1
 8008914:	4652      	mov	r2, sl
 8008916:	4641      	mov	r1, r8
 8008918:	4638      	mov	r0, r7
 800891a:	47c8      	blx	r9
 800891c:	3001      	adds	r0, #1
 800891e:	d103      	bne.n	8008928 <_printf_common+0xac>
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008928:	3501      	adds	r5, #1
 800892a:	e7c6      	b.n	80088ba <_printf_common+0x3e>
 800892c:	18e1      	adds	r1, r4, r3
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	2030      	movs	r0, #48	@ 0x30
 8008932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008936:	4422      	add	r2, r4
 8008938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800893c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008940:	3302      	adds	r3, #2
 8008942:	e7c7      	b.n	80088d4 <_printf_common+0x58>
 8008944:	2301      	movs	r3, #1
 8008946:	4622      	mov	r2, r4
 8008948:	4641      	mov	r1, r8
 800894a:	4638      	mov	r0, r7
 800894c:	47c8      	blx	r9
 800894e:	3001      	adds	r0, #1
 8008950:	d0e6      	beq.n	8008920 <_printf_common+0xa4>
 8008952:	3601      	adds	r6, #1
 8008954:	e7d9      	b.n	800890a <_printf_common+0x8e>
	...

08008958 <_printf_i>:
 8008958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	7e0f      	ldrb	r7, [r1, #24]
 800895e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008960:	2f78      	cmp	r7, #120	@ 0x78
 8008962:	4691      	mov	r9, r2
 8008964:	4680      	mov	r8, r0
 8008966:	460c      	mov	r4, r1
 8008968:	469a      	mov	sl, r3
 800896a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800896e:	d807      	bhi.n	8008980 <_printf_i+0x28>
 8008970:	2f62      	cmp	r7, #98	@ 0x62
 8008972:	d80a      	bhi.n	800898a <_printf_i+0x32>
 8008974:	2f00      	cmp	r7, #0
 8008976:	f000 80d2 	beq.w	8008b1e <_printf_i+0x1c6>
 800897a:	2f58      	cmp	r7, #88	@ 0x58
 800897c:	f000 80b9 	beq.w	8008af2 <_printf_i+0x19a>
 8008980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008988:	e03a      	b.n	8008a00 <_printf_i+0xa8>
 800898a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800898e:	2b15      	cmp	r3, #21
 8008990:	d8f6      	bhi.n	8008980 <_printf_i+0x28>
 8008992:	a101      	add	r1, pc, #4	@ (adr r1, 8008998 <_printf_i+0x40>)
 8008994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008998:	080089f1 	.word	0x080089f1
 800899c:	08008a05 	.word	0x08008a05
 80089a0:	08008981 	.word	0x08008981
 80089a4:	08008981 	.word	0x08008981
 80089a8:	08008981 	.word	0x08008981
 80089ac:	08008981 	.word	0x08008981
 80089b0:	08008a05 	.word	0x08008a05
 80089b4:	08008981 	.word	0x08008981
 80089b8:	08008981 	.word	0x08008981
 80089bc:	08008981 	.word	0x08008981
 80089c0:	08008981 	.word	0x08008981
 80089c4:	08008b05 	.word	0x08008b05
 80089c8:	08008a2f 	.word	0x08008a2f
 80089cc:	08008abf 	.word	0x08008abf
 80089d0:	08008981 	.word	0x08008981
 80089d4:	08008981 	.word	0x08008981
 80089d8:	08008b27 	.word	0x08008b27
 80089dc:	08008981 	.word	0x08008981
 80089e0:	08008a2f 	.word	0x08008a2f
 80089e4:	08008981 	.word	0x08008981
 80089e8:	08008981 	.word	0x08008981
 80089ec:	08008ac7 	.word	0x08008ac7
 80089f0:	6833      	ldr	r3, [r6, #0]
 80089f2:	1d1a      	adds	r2, r3, #4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6032      	str	r2, [r6, #0]
 80089f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a00:	2301      	movs	r3, #1
 8008a02:	e09d      	b.n	8008b40 <_printf_i+0x1e8>
 8008a04:	6833      	ldr	r3, [r6, #0]
 8008a06:	6820      	ldr	r0, [r4, #0]
 8008a08:	1d19      	adds	r1, r3, #4
 8008a0a:	6031      	str	r1, [r6, #0]
 8008a0c:	0606      	lsls	r6, r0, #24
 8008a0e:	d501      	bpl.n	8008a14 <_printf_i+0xbc>
 8008a10:	681d      	ldr	r5, [r3, #0]
 8008a12:	e003      	b.n	8008a1c <_printf_i+0xc4>
 8008a14:	0645      	lsls	r5, r0, #25
 8008a16:	d5fb      	bpl.n	8008a10 <_printf_i+0xb8>
 8008a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a1c:	2d00      	cmp	r5, #0
 8008a1e:	da03      	bge.n	8008a28 <_printf_i+0xd0>
 8008a20:	232d      	movs	r3, #45	@ 0x2d
 8008a22:	426d      	negs	r5, r5
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a28:	4859      	ldr	r0, [pc, #356]	@ (8008b90 <_printf_i+0x238>)
 8008a2a:	230a      	movs	r3, #10
 8008a2c:	e011      	b.n	8008a52 <_printf_i+0xfa>
 8008a2e:	6821      	ldr	r1, [r4, #0]
 8008a30:	6833      	ldr	r3, [r6, #0]
 8008a32:	0608      	lsls	r0, r1, #24
 8008a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a38:	d402      	bmi.n	8008a40 <_printf_i+0xe8>
 8008a3a:	0649      	lsls	r1, r1, #25
 8008a3c:	bf48      	it	mi
 8008a3e:	b2ad      	uxthmi	r5, r5
 8008a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a42:	4853      	ldr	r0, [pc, #332]	@ (8008b90 <_printf_i+0x238>)
 8008a44:	6033      	str	r3, [r6, #0]
 8008a46:	bf14      	ite	ne
 8008a48:	230a      	movne	r3, #10
 8008a4a:	2308      	moveq	r3, #8
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a52:	6866      	ldr	r6, [r4, #4]
 8008a54:	60a6      	str	r6, [r4, #8]
 8008a56:	2e00      	cmp	r6, #0
 8008a58:	bfa2      	ittt	ge
 8008a5a:	6821      	ldrge	r1, [r4, #0]
 8008a5c:	f021 0104 	bicge.w	r1, r1, #4
 8008a60:	6021      	strge	r1, [r4, #0]
 8008a62:	b90d      	cbnz	r5, 8008a68 <_printf_i+0x110>
 8008a64:	2e00      	cmp	r6, #0
 8008a66:	d04b      	beq.n	8008b00 <_printf_i+0x1a8>
 8008a68:	4616      	mov	r6, r2
 8008a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8008a72:	5dc7      	ldrb	r7, [r0, r7]
 8008a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a78:	462f      	mov	r7, r5
 8008a7a:	42bb      	cmp	r3, r7
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	d9f4      	bls.n	8008a6a <_printf_i+0x112>
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d10b      	bne.n	8008a9c <_printf_i+0x144>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	07df      	lsls	r7, r3, #31
 8008a88:	d508      	bpl.n	8008a9c <_printf_i+0x144>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	6861      	ldr	r1, [r4, #4]
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	bfde      	ittt	le
 8008a92:	2330      	movle	r3, #48	@ 0x30
 8008a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a9c:	1b92      	subs	r2, r2, r6
 8008a9e:	6122      	str	r2, [r4, #16]
 8008aa0:	f8cd a000 	str.w	sl, [sp]
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	aa03      	add	r2, sp, #12
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f7ff fee6 	bl	800887c <_printf_common>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d14a      	bne.n	8008b4a <_printf_i+0x1f2>
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab8:	b004      	add	sp, #16
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	f043 0320 	orr.w	r3, r3, #32
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	4833      	ldr	r0, [pc, #204]	@ (8008b94 <_printf_i+0x23c>)
 8008ac8:	2778      	movs	r7, #120	@ 0x78
 8008aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	6831      	ldr	r1, [r6, #0]
 8008ad2:	061f      	lsls	r7, r3, #24
 8008ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ad8:	d402      	bmi.n	8008ae0 <_printf_i+0x188>
 8008ada:	065f      	lsls	r7, r3, #25
 8008adc:	bf48      	it	mi
 8008ade:	b2ad      	uxthmi	r5, r5
 8008ae0:	6031      	str	r1, [r6, #0]
 8008ae2:	07d9      	lsls	r1, r3, #31
 8008ae4:	bf44      	itt	mi
 8008ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8008aea:	6023      	strmi	r3, [r4, #0]
 8008aec:	b11d      	cbz	r5, 8008af6 <_printf_i+0x19e>
 8008aee:	2310      	movs	r3, #16
 8008af0:	e7ac      	b.n	8008a4c <_printf_i+0xf4>
 8008af2:	4827      	ldr	r0, [pc, #156]	@ (8008b90 <_printf_i+0x238>)
 8008af4:	e7e9      	b.n	8008aca <_printf_i+0x172>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	f023 0320 	bic.w	r3, r3, #32
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	e7f6      	b.n	8008aee <_printf_i+0x196>
 8008b00:	4616      	mov	r6, r2
 8008b02:	e7bd      	b.n	8008a80 <_printf_i+0x128>
 8008b04:	6833      	ldr	r3, [r6, #0]
 8008b06:	6825      	ldr	r5, [r4, #0]
 8008b08:	6961      	ldr	r1, [r4, #20]
 8008b0a:	1d18      	adds	r0, r3, #4
 8008b0c:	6030      	str	r0, [r6, #0]
 8008b0e:	062e      	lsls	r6, r5, #24
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	d501      	bpl.n	8008b18 <_printf_i+0x1c0>
 8008b14:	6019      	str	r1, [r3, #0]
 8008b16:	e002      	b.n	8008b1e <_printf_i+0x1c6>
 8008b18:	0668      	lsls	r0, r5, #25
 8008b1a:	d5fb      	bpl.n	8008b14 <_printf_i+0x1bc>
 8008b1c:	8019      	strh	r1, [r3, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	4616      	mov	r6, r2
 8008b24:	e7bc      	b.n	8008aa0 <_printf_i+0x148>
 8008b26:	6833      	ldr	r3, [r6, #0]
 8008b28:	1d1a      	adds	r2, r3, #4
 8008b2a:	6032      	str	r2, [r6, #0]
 8008b2c:	681e      	ldr	r6, [r3, #0]
 8008b2e:	6862      	ldr	r2, [r4, #4]
 8008b30:	2100      	movs	r1, #0
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7f7 fb54 	bl	80001e0 <memchr>
 8008b38:	b108      	cbz	r0, 8008b3e <_printf_i+0x1e6>
 8008b3a:	1b80      	subs	r0, r0, r6
 8008b3c:	6060      	str	r0, [r4, #4]
 8008b3e:	6863      	ldr	r3, [r4, #4]
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	2300      	movs	r3, #0
 8008b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b48:	e7aa      	b.n	8008aa0 <_printf_i+0x148>
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	4649      	mov	r1, r9
 8008b50:	4640      	mov	r0, r8
 8008b52:	47d0      	blx	sl
 8008b54:	3001      	adds	r0, #1
 8008b56:	d0ad      	beq.n	8008ab4 <_printf_i+0x15c>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	079b      	lsls	r3, r3, #30
 8008b5c:	d413      	bmi.n	8008b86 <_printf_i+0x22e>
 8008b5e:	68e0      	ldr	r0, [r4, #12]
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	4298      	cmp	r0, r3
 8008b64:	bfb8      	it	lt
 8008b66:	4618      	movlt	r0, r3
 8008b68:	e7a6      	b.n	8008ab8 <_printf_i+0x160>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	4649      	mov	r1, r9
 8008b70:	4640      	mov	r0, r8
 8008b72:	47d0      	blx	sl
 8008b74:	3001      	adds	r0, #1
 8008b76:	d09d      	beq.n	8008ab4 <_printf_i+0x15c>
 8008b78:	3501      	adds	r5, #1
 8008b7a:	68e3      	ldr	r3, [r4, #12]
 8008b7c:	9903      	ldr	r1, [sp, #12]
 8008b7e:	1a5b      	subs	r3, r3, r1
 8008b80:	42ab      	cmp	r3, r5
 8008b82:	dcf2      	bgt.n	8008b6a <_printf_i+0x212>
 8008b84:	e7eb      	b.n	8008b5e <_printf_i+0x206>
 8008b86:	2500      	movs	r5, #0
 8008b88:	f104 0619 	add.w	r6, r4, #25
 8008b8c:	e7f5      	b.n	8008b7a <_printf_i+0x222>
 8008b8e:	bf00      	nop
 8008b90:	080122c5 	.word	0x080122c5
 8008b94:	080122d6 	.word	0x080122d6

08008b98 <memmove>:
 8008b98:	4288      	cmp	r0, r1
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	eb01 0402 	add.w	r4, r1, r2
 8008ba0:	d902      	bls.n	8008ba8 <memmove+0x10>
 8008ba2:	4284      	cmp	r4, r0
 8008ba4:	4623      	mov	r3, r4
 8008ba6:	d807      	bhi.n	8008bb8 <memmove+0x20>
 8008ba8:	1e43      	subs	r3, r0, #1
 8008baa:	42a1      	cmp	r1, r4
 8008bac:	d008      	beq.n	8008bc0 <memmove+0x28>
 8008bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bb6:	e7f8      	b.n	8008baa <memmove+0x12>
 8008bb8:	4402      	add	r2, r0
 8008bba:	4601      	mov	r1, r0
 8008bbc:	428a      	cmp	r2, r1
 8008bbe:	d100      	bne.n	8008bc2 <memmove+0x2a>
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bca:	e7f7      	b.n	8008bbc <memmove+0x24>

08008bcc <_realloc_r>:
 8008bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	4615      	mov	r5, r2
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	b921      	cbnz	r1, 8008be2 <_realloc_r+0x16>
 8008bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	4611      	mov	r1, r2
 8008bde:	f7ff bb1b 	b.w	8008218 <_malloc_r>
 8008be2:	b92a      	cbnz	r2, 8008bf0 <_realloc_r+0x24>
 8008be4:	f7ff fca8 	bl	8008538 <_free_r>
 8008be8:	2400      	movs	r4, #0
 8008bea:	4620      	mov	r0, r4
 8008bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf0:	f000 f81a 	bl	8008c28 <_malloc_usable_size_r>
 8008bf4:	4285      	cmp	r5, r0
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	d802      	bhi.n	8008c00 <_realloc_r+0x34>
 8008bfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bfe:	d8f4      	bhi.n	8008bea <_realloc_r+0x1e>
 8008c00:	4629      	mov	r1, r5
 8008c02:	4640      	mov	r0, r8
 8008c04:	f7ff fb08 	bl	8008218 <_malloc_r>
 8008c08:	4607      	mov	r7, r0
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d0ec      	beq.n	8008be8 <_realloc_r+0x1c>
 8008c0e:	42b5      	cmp	r5, r6
 8008c10:	462a      	mov	r2, r5
 8008c12:	4621      	mov	r1, r4
 8008c14:	bf28      	it	cs
 8008c16:	4632      	movcs	r2, r6
 8008c18:	f7ff fc80 	bl	800851c <memcpy>
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	4640      	mov	r0, r8
 8008c20:	f7ff fc8a 	bl	8008538 <_free_r>
 8008c24:	463c      	mov	r4, r7
 8008c26:	e7e0      	b.n	8008bea <_realloc_r+0x1e>

08008c28 <_malloc_usable_size_r>:
 8008c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c2c:	1f18      	subs	r0, r3, #4
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	bfbc      	itt	lt
 8008c32:	580b      	ldrlt	r3, [r1, r0]
 8008c34:	18c0      	addlt	r0, r0, r3
 8008c36:	4770      	bx	lr

08008c38 <_init>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	bf00      	nop
 8008c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3e:	bc08      	pop	{r3}
 8008c40:	469e      	mov	lr, r3
 8008c42:	4770      	bx	lr

08008c44 <_fini>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	bf00      	nop
 8008c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4a:	bc08      	pop	{r3}
 8008c4c:	469e      	mov	lr, r3
 8008c4e:	4770      	bx	lr
