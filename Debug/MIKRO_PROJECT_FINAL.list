
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008670  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000095a8  08008800  08008800  00009800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011da8  08011da8  00013264  2**0
                  CONTENTS
  4 .ARM          00000008  08011da8  08011da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011db0  08011db0  00013264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011db0  08011db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011db4  08011db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08011db8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ada8  20000264  0801201c  00013264  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  2000b00c  0801201c  0001400c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cef  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003549  00000000  00000000  00025f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000294d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb9  00000000  00000000  0002a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289cc  00000000  00000000  0002afe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016367  00000000  00000000  000539ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec1f0  00000000  00000000  00069d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155f04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004238  00000000  00000000  00155f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087e8 	.word	0x080087e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080087e8 	.word	0x080087e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	60da      	str	r2, [r3, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <USART_kbhit+0x20>)
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <USART_kbhit+0x20>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d101      	bne.n	80005b4 <USART_kbhit+0x14>
		return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <USART_kbhit+0x16>
	}else{
		return 1;
 80005b4:	2301      	movs	r3, #1
	}
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000280 	.word	0x20000280

080005c4 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <USART_getchar+0x4c>)
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <USART_getchar+0x4c>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d013      	beq.n	80005fe <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <USART_getchar+0x4c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <USART_getchar+0x50>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <USART_getchar+0x4c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <USART_getchar+0x4c>)
 80005e8:	68d2      	ldr	r2, [r2, #12]
 80005ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80005ee:	fb01 f202 	mul.w	r2, r1, r2
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <USART_getchar+0x4c>)
 80005f6:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fc:	e001      	b.n	8000602 <USART_getchar+0x3e>
    }
    return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000280 	.word	0x20000280
 8000614:	20000a04 	.word	0x20000a04

08000618 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 8000622:	4b3a      	ldr	r3, [pc, #232]	@ (800070c <USART_sendFrame+0xf4>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 800062c:	4a38      	ldr	r2, [pc, #224]	@ (8000710 <USART_sendFrame+0xf8>)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	4413      	add	r3, r2
 8000632:	227e      	movs	r2, #126	@ 0x7e
 8000634:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) % txRingBuffer.mask;
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	461a      	mov	r2, r3
 800063c:	4b33      	ldr	r3, [pc, #204]	@ (800070c <USART_sendFrame+0xf4>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	fbb2 f1f3 	udiv	r1, r2, r3
 8000644:	fb01 f303 	mul.w	r3, r1, r3
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	e016      	b.n	8000680 <USART_sendFrame+0x68>
        USART_TxBuf[idx] = data[i];
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	4413      	add	r3, r2
 8000658:	7819      	ldrb	r1, [r3, #0]
 800065a:	4a2d      	ldr	r2, [pc, #180]	@ (8000710 <USART_sendFrame+0xf8>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	460a      	mov	r2, r1
 8000662:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) % txRingBuffer.mask;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	3301      	adds	r3, #1
 8000668:	461a      	mov	r2, r3
 800066a:	4b28      	ldr	r3, [pc, #160]	@ (800070c <USART_sendFrame+0xf4>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	3301      	adds	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d3e4      	bcc.n	8000652 <USART_sendFrame+0x3a>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <USART_sendFrame+0xf8>)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	2260      	movs	r2, #96	@ 0x60
 8000690:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) % txRingBuffer.mask;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	461a      	mov	r2, r3
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <USART_sendFrame+0xf4>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	fbb2 f1f3 	udiv	r1, r2, r3
 80006a0:	fb01 f303 	mul.w	r3, r1, r3
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <USART_sendFrame+0xf4>)
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <USART_sendFrame+0xf4>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d122      	bne.n	80006fa <USART_sendFrame+0xe2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <USART_sendFrame+0xfc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006be:	2b80      	cmp	r3, #128	@ 0x80
 80006c0:	d11b      	bne.n	80006fa <USART_sendFrame+0xe2>
        txRingBuffer.writeIndex = idx;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	4a11      	ldr	r2, [pc, #68]	@ (800070c <USART_sendFrame+0xf4>)
 80006c6:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <USART_sendFrame+0xf4>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	4a10      	ldr	r2, [pc, #64]	@ (8000710 <USART_sendFrame+0xf8>)
 80006ce:	5cd3      	ldrb	r3, [r2, r3]
 80006d0:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <USART_sendFrame+0xf4>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <USART_sendFrame+0xf4>)
 80006da:	68d2      	ldr	r2, [r2, #12]
 80006dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80006e0:	fb01 f202 	mul.w	r2, r1, r2
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	4a09      	ldr	r2, [pc, #36]	@ (800070c <USART_sendFrame+0xf4>)
 80006e8:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006ea:	f107 030f 	add.w	r3, r7, #15
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	@ (8000714 <USART_sendFrame+0xfc>)
 80006f4:	f004 fd0e 	bl	8005114 <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006f8:	e002      	b.n	8000700 <USART_sendFrame+0xe8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	4a03      	ldr	r2, [pc, #12]	@ (800070c <USART_sendFrame+0xf4>)
 80006fe:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000700:	b662      	cpsie	i
}
 8000702:	bf00      	nop
    }

    __enable_irq();
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000290 	.word	0x20000290
 8000710:	200002a0 	.word	0x200002a0
 8000714:	2000ae38 	.word	0x2000ae38

08000718 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	@ 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 8000724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000728:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	e019      	b.n	8000764 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 800073a:	8bfb      	ldrh	r3, [r7, #30]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b29b      	uxth	r3, r3
 8000740:	b2da      	uxtb	r2, r3
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	4053      	eors	r3, r2
 8000746:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 8000748:	8bfb      	ldrh	r3, [r7, #30]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21a      	sxth	r2, r3
 800074e:	7dbb      	ldrb	r3, [r7, #22]
 8000750:	490f      	ldr	r1, [pc, #60]	@ (8000790 <calculateCrc16+0x78>)
 8000752:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000756:	b21b      	sxth	r3, r3
 8000758:	4053      	eors	r3, r2
 800075a:	b21b      	sxth	r3, r3
 800075c:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	3301      	adds	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	429a      	cmp	r2, r3
 800076a:	d3e1      	bcc.n	8000730 <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 800076c:	8bfb      	ldrh	r3, [r7, #30]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b29b      	uxth	r3, r3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	8bfa      	ldrh	r2, [r7, #30]
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	3724      	adds	r7, #36	@ 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000

08000794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_DMA_Init+0x38>)
 800079c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800079e:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <MX_DMA_Init+0x38>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_DMA_Init+0x38>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	200f      	movs	r0, #15
 80007b8:	f001 fec5 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007bc:	200f      	movs	r0, #15
 80007be:	f001 fede 	bl	800257e <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <stopAnimation>:
uint8_t received_char;
Frame frame;
ScrollingTextState text = {0};

static void stopAnimation(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <stopAnimation+0x18>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000ca8 	.word	0x20000ca8

080007ec <safeCompare>:


static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <safeCompare+0x18>
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <safeCompare+0x1c>
	{
		return false;
 8000804:	2300      	movs	r3, #0
 8000806:	e00a      	b.n	800081e <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	68b9      	ldr	r1, [r7, #8]
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f007 fbf5 	bl	8007ffc <memcmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <parseColor+0x16>
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <parseColor+0x1a>
        return false;
 800083e:	2300      	movs	r3, #0
 8000840:	e026      	b.n	8000890 <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e01f      	b.n	8000888 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 8000848:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <parseColor+0x70>)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fcbd 	bl	80001d0 <strlen>
 8000856:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000858:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <parseColor+0x70>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	4619      	mov	r1, r3
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffc1 	bl	80007ec <safeCompare>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d008      	beq.n	8000882 <parseColor+0x5a>
            *color = color_map[i].value;
 8000870:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <parseColor+0x70>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	4413      	add	r3, r2
 8000878:	889a      	ldrh	r2, [r3, #4]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	801a      	strh	r2, [r3, #0]
            return true;
 800087e:	2301      	movs	r3, #1
 8000880:	e006      	b.n	8000890 <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9dc      	bls.n	8000848 <parseColor+0x20>
        }
    }
    return false;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	080088f0 	.word	0x080088f0

0800089c <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
    in_frame = false;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <resetFrameState+0x20>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <resetFrameState+0x24>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <resetFrameState+0x28>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	20000c1c 	.word	0x20000c1c
 80008c0:	20000c14 	.word	0x20000c14
 80008c4:	20000c18 	.word	0x20000c18

080008c8 <parseParameters>:
*      - Pomija białe znaki
*      - Wyodrębnia token do następnego przecinka
*      - Przetwarza token według odpowiedniego typu
*   4. Zwalnia va_list
************************************************************************/
bool parseParameters(const uint8_t* data, const char* format, ...) {
 80008c8:	b40e      	push	{r1, r2, r3}
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b09b      	sub	sp, #108	@ 0x6c
 80008ce:	af02      	add	r7, sp, #8
 80008d0:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <parseParameters+0x16>
 80008d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <parseParameters+0x1a>
        return false;
 80008de:	2300      	movs	r3, #0
 80008e0:	e0c7      	b.n	8000a72 <parseParameters+0x1aa>
    }
    va_list args;
    va_start(args, format);
 80008e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const uint8_t* data_ptr = data;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 80008ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t token[51];
    size_t token_idx = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	657b      	str	r3, [r7, #84]	@ 0x54



    // Store scrollSpeed for text length validation
    uint8_t scrollSpeed = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    bool hasScrollSpeed = false;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

    while (*fmt_ptr) {
 8000900:	e0b1      	b.n	8000a66 <parseParameters+0x19e>
        switch (*fmt_ptr) {
 8000902:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b75      	cmp	r3, #117	@ 0x75
 8000908:	d007      	beq.n	800091a <parseParameters+0x52>
 800090a:	2b75      	cmp	r3, #117	@ 0x75
 800090c:	f300 80a3 	bgt.w	8000a56 <parseParameters+0x18e>
 8000910:	2b73      	cmp	r3, #115	@ 0x73
 8000912:	d024      	beq.n	800095e <parseParameters+0x96>
 8000914:	2b74      	cmp	r3, #116	@ 0x74
 8000916:	d05b      	beq.n	80009d0 <parseParameters+0x108>
 8000918:	e09d      	b.n	8000a56 <parseParameters+0x18e>
            case 'u': {
                uint8_t* value_ptr = va_arg(args, uint8_t*);
 800091a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800091c:	1d1a      	adds	r2, r3, #4
 800091e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	64fb      	str	r3, [r7, #76]	@ 0x4c
                *value_ptr = *data_ptr++;  // Bezpośrednio odczytaj bajt
 8000924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800092e:	701a      	strb	r2, [r3, #0]

                // Store scrollSpeed for later validation
                if (!hasScrollSpeed) {
 8000930:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000934:	f083 0301 	eor.w	r3, r3, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d006      	beq.n	800094c <parseParameters+0x84>
                    scrollSpeed = *value_ptr;
 800093e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                    hasScrollSpeed = true;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
                }

                // Jeśli następny znak to przecinek, pomiń go
                if (*data_ptr == ',') {
 800094c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b2c      	cmp	r3, #44	@ 0x2c
 8000952:	f040 8082 	bne.w	8000a5a <parseParameters+0x192>
                    data_ptr++;
 8000956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000958:	3301      	adds	r3, #1
 800095a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
                break;
 800095c:	e07d      	b.n	8000a5a <parseParameters+0x192>
            }
            case 's': {
                // Zbierz znaki do przecinka
                token_idx = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 8000962:	e00a      	b.n	800097a <parseParameters+0xb2>
                    token[token_idx++] = *data_ptr++;
 8000964:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000966:	1c53      	adds	r3, r2, #1
 8000968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800096a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800096c:	1c59      	adds	r1, r3, #1
 800096e:	6579      	str	r1, [r7, #84]	@ 0x54
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	3360      	adds	r3, #96	@ 0x60
 8000974:	443b      	add	r3, r7
 8000976:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 800097a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d006      	beq.n	8000990 <parseParameters+0xc8>
 8000982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b2c      	cmp	r3, #44	@ 0x2c
 8000988:	d002      	beq.n	8000990 <parseParameters+0xc8>
 800098a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800098c:	2b31      	cmp	r3, #49	@ 0x31
 800098e:	d9e9      	bls.n	8000964 <parseParameters+0x9c>
                }
                token[token_idx] = '\0';
 8000990:	f107 0208 	add.w	r2, r7, #8
 8000994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000996:	4413      	add	r3, r2
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
                if (*data_ptr == ',') data_ptr++;
 800099c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b2c      	cmp	r3, #44	@ 0x2c
 80009a2:	d102      	bne.n	80009aa <parseParameters+0xe2>
 80009a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009a6:	3301      	adds	r3, #1
 80009a8:	65fb      	str	r3, [r7, #92]	@ 0x5c

                Color_t* color_ptr = va_arg(args, Color_t*);
 80009aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009ac:	1d1a      	adds	r2, r3, #4
 80009ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
                if (!parseColor((char*)token, color_ptr)) {
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff34 	bl	8000828 <parseColor>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f083 0301 	eor.w	r3, r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d048      	beq.n	8000a5e <parseParameters+0x196>
                    va_end(args);
                    return false;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e050      	b.n	8000a72 <parseParameters+0x1aa>
                }
                break;
            }
            case 't': {
                // Zbierz pozostały tekst
                token_idx = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && token_idx < 50) {
 80009d4:	e00a      	b.n	80009ec <parseParameters+0x124>
                    token[token_idx++] = *data_ptr++;
 80009d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80009d8:	1c53      	adds	r3, r2, #1
 80009da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80009dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009de:	1c59      	adds	r1, r3, #1
 80009e0:	6579      	str	r1, [r7, #84]	@ 0x54
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	3360      	adds	r3, #96	@ 0x60
 80009e6:	443b      	add	r3, r7
 80009e8:	f803 2c58 	strb.w	r2, [r3, #-88]
                while (*data_ptr && token_idx < 50) {
 80009ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <parseParameters+0x132>
 80009f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009f6:	2b31      	cmp	r3, #49	@ 0x31
 80009f8:	d9ed      	bls.n	80009d6 <parseParameters+0x10e>
                }
                token[token_idx] = '\0';
 80009fa:	f107 0208 	add.w	r2, r7, #8
 80009fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a00:	4413      	add	r3, r2
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]

                // Sprawdź długość tekstu na podstawie scrollSpeed
                size_t maxLength = (scrollSpeed == 0) ? 25 : 50;
 8000a06:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <parseParameters+0x14a>
 8000a0e:	2319      	movs	r3, #25
 8000a10:	e000      	b.n	8000a14 <parseParameters+0x14c>
 8000a12:	2332      	movs	r3, #50	@ 0x32
 8000a14:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (token_idx > maxLength) {
 8000a16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d909      	bls.n	8000a32 <parseParameters+0x16a>
                    va_end(args);
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "TOO_MUCH_TEXT%s", token_idx);
 8000a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <parseParameters+0x1b8>)
 8000a24:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <parseParameters+0x1bc>)
 8000a26:	2167      	movs	r1, #103	@ 0x67
 8000a28:	2068      	movs	r0, #104	@ 0x68
 8000a2a:	f000 fafd 	bl	8001028 <prepareFrame>
                    return false;  // Tekst jest za długi
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e01f      	b.n	8000a72 <parseParameters+0x1aa>
                }

                char* text_ptr = va_arg(args, char*);
 8000a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	647b      	str	r3, [r7, #68]	@ 0x44
                strncpy(text_ptr, (char*)token, token_idx);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000a42:	4619      	mov	r1, r3
 8000a44:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000a46:	f007 faf1 	bl	800802c <strncpy>
                text_ptr[token_idx] = '\0';
 8000a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a4e:	4413      	add	r3, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
                break;
 8000a54:	e004      	b.n	8000a60 <parseParameters+0x198>
            }
            default:
                va_end(args);
                return false;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e00b      	b.n	8000a72 <parseParameters+0x1aa>
                break;
 8000a5a:	bf00      	nop
 8000a5c:	e000      	b.n	8000a60 <parseParameters+0x198>
                break;
 8000a5e:	bf00      	nop
        }
        fmt_ptr++;
 8000a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a62:	3301      	adds	r3, #1
 8000a64:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000a66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f47f af49 	bne.w	8000902 <parseParameters+0x3a>
    }

    va_end(args);
    return true;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3764      	adds	r7, #100	@ 0x64
 8000a76:	46bd      	mov	sp, r7
 8000a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a7c:	b003      	add	sp, #12
 8000a7e:	4770      	bx	lr
 8000a80:	0800883c 	.word	0x0800883c
 8000a84:	0800884c 	.word	0x0800884c

08000a88 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00d      	beq.n	8000ab2 <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3305      	adds	r3, #5
 8000a9a:	2280      	movs	r2, #128	@ 0x80
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f007 fabc 	bl	800801c <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f007 fab5 	bl	800801c <memset>
    }
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73bb      	strb	r3, [r7, #14]
 8000acc:	2300      	movs	r3, #0
 8000ace:	737b      	strb	r3, [r7, #13]
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1d58      	adds	r0, r3, #5
 8000adc:	f107 010e 	add.w	r1, r7, #14
 8000ae0:	f107 020f 	add.w	r2, r7, #15
 8000ae4:	f107 030a 	add.w	r3, r7, #10
 8000ae8:	9302      	str	r3, [sp, #8]
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	f107 030d 	add.w	r3, r7, #13
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	460b      	mov	r3, r1
 8000af8:	4917      	ldr	r1, [pc, #92]	@ (8000b58 <executeONK+0x9c>)
 8000afa:	f7ff fee5 	bl	80008c8 <parseParameters>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f083 0301 	eor.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d009      	beq.n	8000b1e <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3305      	adds	r3, #5
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <executeONK+0xa0>)
 8000b12:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <executeONK+0xa4>)
 8000b14:	2167      	movs	r1, #103	@ 0x67
 8000b16:	2068      	movs	r0, #104	@ 0x68
 8000b18:	f000 fa86 	bl	8001028 <prepareFrame>
 8000b1c:	e019      	b.n	8000b52 <executeONK+0x96>
        return;
    }
	switch(filling)
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <executeONK+0x6e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d00a      	beq.n	8000b3e <executeONK+0x82>
 8000b28:	e013      	b.n	8000b52 <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	b218      	sxth	r0, r3
 8000b2e:	7bbb      	ldrb	r3, [r7, #14]
 8000b30:	b219      	sxth	r1, r3
 8000b32:	7b7b      	ldrb	r3, [r7, #13]
 8000b34:	b21a      	sxth	r2, r3
 8000b36:	897b      	ldrh	r3, [r7, #10]
 8000b38:	f006 fd2e 	bl	8007598 <hagl_draw_circle>
		break;
 8000b3c:	e009      	b.n	8000b52 <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	b218      	sxth	r0, r3
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	b219      	sxth	r1, r3
 8000b46:	7b7b      	ldrb	r3, [r7, #13]
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	897b      	ldrh	r3, [r7, #10]
 8000b4c:	f006 fe53 	bl	80077f6 <hagl_fill_circle>
		break;
 8000b50:	bf00      	nop
	}
}
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08008850 	.word	0x08008850
 8000b5c:	08008858 	.word	0x08008858
 8000b60:	0800884c 	.word	0x0800884c

08000b64 <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b089      	sub	sp, #36	@ 0x24
 8000b68:	af04      	add	r7, sp, #16
 8000b6a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	2300      	movs	r3, #0
 8000b72:	73bb      	strb	r3, [r7, #14]
 8000b74:	2300      	movs	r3, #0
 8000b76:	737b      	strb	r3, [r7, #13]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	733b      	strb	r3, [r7, #12]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	1d58      	adds	r0, r3, #5
 8000b88:	f107 010e 	add.w	r1, r7, #14
 8000b8c:	f107 020f 	add.w	r2, r7, #15
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	9303      	str	r3, [sp, #12]
 8000b96:	f107 030b 	add.w	r3, r7, #11
 8000b9a:	9302      	str	r3, [sp, #8]
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	f107 030d 	add.w	r3, r7, #13
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	491c      	ldr	r1, [pc, #112]	@ (8000c1c <executeONP+0xb8>)
 8000bac:	f7ff fe8c 	bl	80008c8 <parseParameters>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d009      	beq.n	8000bd0 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3305      	adds	r3, #5
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <executeONP+0xbc>)
 8000bc4:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <executeONP+0xc0>)
 8000bc6:	2167      	movs	r1, #103	@ 0x67
 8000bc8:	2068      	movs	r0, #104	@ 0x68
 8000bca:	f000 fa2d 	bl	8001028 <prepareFrame>
 8000bce:	e021      	b.n	8000c14 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000bd0:	7afb      	ldrb	r3, [r7, #11]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <executeONP+0x78>
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d00e      	beq.n	8000bf8 <executeONP+0x94>
 8000bda:	e01b      	b.n	8000c14 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	b218      	sxth	r0, r3
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	b219      	sxth	r1, r3
 8000be4:	7b7b      	ldrb	r3, [r7, #13]
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	7b3b      	ldrb	r3, [r7, #12]
 8000bea:	b21c      	sxth	r4, r3
 8000bec:	893b      	ldrh	r3, [r7, #8]
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	f006 fa21 	bl	8007038 <hagl_draw_rectangle>
		break;
 8000bf6:	e00d      	b.n	8000c14 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	b218      	sxth	r0, r3
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	b219      	sxth	r1, r3
 8000c00:	7b7b      	ldrb	r3, [r7, #13]
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	7b3b      	ldrb	r3, [r7, #12]
 8000c06:	b21c      	sxth	r4, r3
 8000c08:	893b      	ldrh	r3, [r7, #8]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	f006 fa99 	bl	8007144 <hagl_fill_rectangle>
		break;
 8000c12:	bf00      	nop
	}
}
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0800886c 	.word	0x0800886c
 8000c20:	08008858 	.word	0x08008858
 8000c24:	0800884c 	.word	0x0800884c

08000c28 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	b08d      	sub	sp, #52	@ 0x34
 8000c2c:	af06      	add	r7, sp, #24
 8000c2e:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	75fb      	strb	r3, [r7, #23]
 8000c34:	2300      	movs	r3, #0
 8000c36:	75bb      	strb	r3, [r7, #22]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	757b      	strb	r3, [r7, #21]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	753b      	strb	r3, [r7, #20]
 8000c40:	2300      	movs	r3, #0
 8000c42:	74fb      	strb	r3, [r7, #19]
 8000c44:	2300      	movs	r3, #0
 8000c46:	74bb      	strb	r3, [r7, #18]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	1d58      	adds	r0, r3, #5
 8000c54:	f107 0116 	add.w	r1, r7, #22
 8000c58:	f107 0217 	add.w	r2, r7, #23
 8000c5c:	f107 030e 	add.w	r3, r7, #14
 8000c60:	9305      	str	r3, [sp, #20]
 8000c62:	f107 0311 	add.w	r3, r7, #17
 8000c66:	9304      	str	r3, [sp, #16]
 8000c68:	f107 0312 	add.w	r3, r7, #18
 8000c6c:	9303      	str	r3, [sp, #12]
 8000c6e:	f107 0313 	add.w	r3, r7, #19
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	f107 0315 	add.w	r3, r7, #21
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	460b      	mov	r3, r1
 8000c82:	4924      	ldr	r1, [pc, #144]	@ (8000d14 <executeONT+0xec>)
 8000c84:	f7ff fe20 	bl	80008c8 <parseParameters>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d009      	beq.n	8000ca8 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3305      	adds	r3, #5
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <executeONT+0xf0>)
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000d1c <executeONT+0xf4>)
 8000c9e:	2167      	movs	r1, #103	@ 0x67
 8000ca0:	2068      	movs	r0, #104	@ 0x68
 8000ca2:	f000 f9c1 	bl	8001028 <prepareFrame>
 8000ca6:	e031      	b.n	8000d0c <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000ca8:	7c7b      	ldrb	r3, [r7, #17]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <executeONT+0x8c>
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d016      	beq.n	8000ce0 <executeONT+0xb8>
 8000cb2:	e02b      	b.n	8000d0c <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	b218      	sxth	r0, r3
 8000cb8:	7dbb      	ldrb	r3, [r7, #22]
 8000cba:	b21c      	sxth	r4, r3
 8000cbc:	7d7b      	ldrb	r3, [r7, #21]
 8000cbe:	b21d      	sxth	r5, r3
 8000cc0:	7d3b      	ldrb	r3, [r7, #20]
 8000cc2:	b21e      	sxth	r6, r3
 8000cc4:	7cfb      	ldrb	r3, [r7, #19]
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	7cba      	ldrb	r2, [r7, #18]
 8000cca:	b212      	sxth	r2, r2
 8000ccc:	89f9      	ldrh	r1, [r7, #14]
 8000cce:	9102      	str	r1, [sp, #8]
 8000cd0:	9201      	str	r2, [sp, #4]
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	4633      	mov	r3, r6
 8000cd6:	462a      	mov	r2, r5
 8000cd8:	4621      	mov	r1, r4
 8000cda:	f007 f817 	bl	8007d0c <hagl_draw_triangle>
            break;
 8000cde:	e015      	b.n	8000d0c <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	b218      	sxth	r0, r3
 8000ce4:	7dbb      	ldrb	r3, [r7, #22]
 8000ce6:	b21c      	sxth	r4, r3
 8000ce8:	7d7b      	ldrb	r3, [r7, #21]
 8000cea:	b21d      	sxth	r5, r3
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	b21e      	sxth	r6, r3
 8000cf0:	7cfb      	ldrb	r3, [r7, #19]
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	7cba      	ldrb	r2, [r7, #18]
 8000cf6:	b212      	sxth	r2, r2
 8000cf8:	89f9      	ldrh	r1, [r7, #14]
 8000cfa:	9102      	str	r1, [sp, #8]
 8000cfc:	9201      	str	r2, [sp, #4]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	4633      	mov	r3, r6
 8000d02:	462a      	mov	r2, r5
 8000d04:	4621      	mov	r1, r4
 8000d06:	f007 f827 	bl	8007d58 <hagl_fill_triangle>
            break;
 8000d0a:	bf00      	nop
    }
}
 8000d0c:	371c      	adds	r7, #28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08008874 	.word	0x08008874
 8000d18:	08008858 	.word	0x08008858
 8000d1c:	0800884c 	.word	0x0800884c

08000d20 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	@ 0x50
 8000d24:	af04      	add	r7, sp, #16
 8000d26:	6078      	str	r0, [r7, #4]
    const char charText[50] = {0};
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	222e      	movs	r2, #46	@ 0x2e
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f007 f971 	bl	800801c <memset>

    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	1d58      	adds	r0, r3, #5
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	9303      	str	r3, [sp, #12]
 8000d44:	4b4c      	ldr	r3, [pc, #304]	@ (8000e78 <executeONN+0x158>)
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	4b4c      	ldr	r3, [pc, #304]	@ (8000e7c <executeONN+0x15c>)
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e80 <executeONN+0x160>)
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	4b4c      	ldr	r3, [pc, #304]	@ (8000e84 <executeONN+0x164>)
 8000d52:	4a4d      	ldr	r2, [pc, #308]	@ (8000e88 <executeONN+0x168>)
 8000d54:	494d      	ldr	r1, [pc, #308]	@ (8000e8c <executeONN+0x16c>)
 8000d56:	f7ff fdb7 	bl	80008c8 <parseParameters>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d009      	beq.n	8000d7a <executeONN+0x5a>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3305      	adds	r3, #5
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4b48      	ldr	r3, [pc, #288]	@ (8000e90 <executeONN+0x170>)
 8000d6e:	4a49      	ldr	r2, [pc, #292]	@ (8000e94 <executeONN+0x174>)
 8000d70:	2167      	movs	r1, #103	@ 0x67
 8000d72:	2068      	movs	r0, #104	@ 0x68
 8000d74:	f000 f958 	bl	8001028 <prepareFrame>
 8000d78:	e07b      	b.n	8000e72 <executeONN+0x152>
        return;
    }

    // Zapisz początkowe pozycje
    memset(text.displayText, 0, sizeof(text.displayText));
 8000d7a:	22c8      	movs	r2, #200	@ 0xc8
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4846      	ldr	r0, [pc, #280]	@ (8000e98 <executeONN+0x178>)
 8000d80:	f007 f94c 	bl	800801c <memset>
    text.startX = text.x;
 8000d84:	4b44      	ldr	r3, [pc, #272]	@ (8000e98 <executeONN+0x178>)
 8000d86:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8000d8a:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <executeONN+0x178>)
 8000d8c:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
    text.startY = text.y;
 8000d90:	4b41      	ldr	r3, [pc, #260]	@ (8000e98 <executeONN+0x178>)
 8000d92:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8000d96:	4b40      	ldr	r3, [pc, #256]	@ (8000e98 <executeONN+0x178>)
 8000d98:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
    text.textLength = 0;
 8000d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e98 <executeONN+0x178>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    text.firstIteration = true;
 8000da4:	4b3c      	ldr	r3, [pc, #240]	@ (8000e98 <executeONN+0x178>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8000dac:	e015      	b.n	8000dda <executeONN+0xba>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 8000dae:	4b3a      	ldr	r3, [pc, #232]	@ (8000e98 <executeONN+0x178>)
 8000db0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000db4:	3340      	adds	r3, #64	@ 0x40
 8000db6:	443b      	add	r3, r7
 8000db8:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <executeONN+0x178>)
 8000dbe:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <executeONN+0x178>)
 8000dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <executeONN+0x178>)
 8000dcc:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <executeONN+0x178>)
 8000dd6:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    while (charText[text.textLength] && text.textLength < 50) {
 8000dda:	4b2f      	ldr	r3, [pc, #188]	@ (8000e98 <executeONN+0x178>)
 8000ddc:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000de0:	3340      	adds	r3, #64	@ 0x40
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <executeONN+0xd6>
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <executeONN+0x178>)
 8000dee:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000df2:	2b31      	cmp	r3, #49	@ 0x31
 8000df4:	d9db      	bls.n	8000dae <executeONN+0x8e>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 8000df6:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <executeONN+0x178>)
 8000df8:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <executeONN+0x178>)
 8000e08:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    text.lastUpdate = HAL_GetTick();
 8000e0c:	f001 fab4 	bl	8002378 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a21      	ldr	r2, [pc, #132]	@ (8000e98 <executeONN+0x178>)
 8000e14:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

    const uint8_t* font;
    switch(text.fontSize) {
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <executeONN+0x178>)
 8000e1a:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d00c      	beq.n	8000e3c <executeONN+0x11c>
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	dc0d      	bgt.n	8000e42 <executeONN+0x122>
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d002      	beq.n	8000e30 <executeONN+0x110>
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d003      	beq.n	8000e36 <executeONN+0x116>
 8000e2e:	e008      	b.n	8000e42 <executeONN+0x122>
        case 1: font = font5x7; break;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <executeONN+0x17c>)
 8000e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e34:	e007      	b.n	8000e46 <executeONN+0x126>
        case 2: font = font5x8; break;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <executeONN+0x180>)
 8000e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e3a:	e004      	b.n	8000e46 <executeONN+0x126>
        case 3: font = font6x9; break;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <executeONN+0x184>)
 8000e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e40:	e001      	b.n	8000e46 <executeONN+0x126>
        default: font = font5x7;
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <executeONN+0x17c>)
 8000e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <executeONN+0x178>)
 8000e48:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d110      	bne.n	8000e72 <executeONN+0x152>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <executeONN+0x178>)
 8000e52:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8000e56:	b219      	sxth	r1, r3
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <executeONN+0x178>)
 8000e5a:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <executeONN+0x178>)
 8000e62:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 8000e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	480a      	ldr	r0, [pc, #40]	@ (8000e98 <executeONN+0x178>)
 8000e6e:	f006 fb0b 	bl	8007488 <hagl_put_text>
    }
}
 8000e72:	3740      	adds	r7, #64	@ 0x40
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000d76 	.word	0x20000d76
 8000e7c:	20000d75 	.word	0x20000d75
 8000e80:	20000d74 	.word	0x20000d74
 8000e84:	20000d71 	.word	0x20000d71
 8000e88:	20000d70 	.word	0x20000d70
 8000e8c:	08008880 	.word	0x08008880
 8000e90:	08008858 	.word	0x08008858
 8000e94:	0800884c 	.word	0x0800884c
 8000e98:	20000ca8 	.word	0x20000ca8
 8000e9c:	08008930 	.word	0x08008930
 8000ea0:	0800be38 	.word	0x0800be38
 8000ea4:	0800ecdc 	.word	0x0800ecdc

08000ea8 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
* TODO naprawic wylaczenie oraz reset
************************************************************************/
static void executeOFF(Frame *frame)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	795b      	ldrb	r3, [r3, #5]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <executeOFF+0x16>
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d006      	beq.n	8000eca <executeOFF+0x22>
 8000ebc:	e008      	b.n	8000ed0 <executeOFF+0x28>
	{
	case 0:
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	480a      	ldr	r0, [pc, #40]	@ (8000eec <executeOFF+0x44>)
 8000ec4:	f001 ff96 	bl	8002df4 <HAL_GPIO_WritePin>
		break;
 8000ec8:	e00c      	b.n	8000ee4 <executeOFF+0x3c>
	case 1:
		lcdClear();
 8000eca:	f000 fda9 	bl	8001a20 <lcdClear>
		break;
 8000ece:	e009      	b.n	8000ee4 <executeOFF+0x3c>
	default:
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "WRONG_DATA%c", frame->data[0]);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <executeOFF+0x48>)
 8000ed8:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <executeOFF+0x4c>)
 8000eda:	2167      	movs	r1, #103	@ 0x67
 8000edc:	2068      	movs	r0, #104	@ 0x68
 8000ede:	f000 f8a3 	bl	8001028 <prepareFrame>
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	08008888 	.word	0x08008888
 8000ef4:	0800884c 	.word	0x0800884c

08000ef8 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <isWithinBounds+0x26>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f0c:	dc07      	bgt.n	8000f1e <isWithinBounds+0x26>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db04      	blt.n	8000f1e <isWithinBounds+0x26>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f18:	dc01      	bgt.n	8000f1e <isWithinBounds+0x26>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <isWithinBounds+0x28>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const uint8_t* data, int* x, int* y)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
	 *x = data[0];  // Pierwszy bajt to x
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	601a      	str	r2, [r3, #0]
	 *y = data[2];  // Drugi bajt to y
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
    return true;
 8000f54:	2301      	movs	r3, #1
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000f62:	b480      	push	{r7}
 8000f64:	b087      	sub	sp, #28
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	e04b      	b.n	8001010 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f82:	d10e      	bne.n	8000fa2 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	617a      	str	r2, [r7, #20]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	227d      	movs	r2, #125	@ 0x7d
 8000f90:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	617a      	str	r2, [r7, #20]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	225d      	movs	r2, #93	@ 0x5d
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e033      	b.n	800100a <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fac:	d10e      	bne.n	8000fcc <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	617a      	str	r2, [r7, #20]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	227d      	movs	r2, #125	@ 0x7d
 8000fba:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	617a      	str	r2, [r7, #20]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	225e      	movs	r2, #94	@ 0x5e
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e01e      	b.n	800100a <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b60      	cmp	r3, #96	@ 0x60
 8000fd6:	d10e      	bne.n	8000ff6 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	617a      	str	r2, [r7, #20]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	227d      	movs	r2, #125	@ 0x7d
 8000fe4:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	617a      	str	r2, [r7, #20]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	2226      	movs	r2, #38	@ 0x26
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e009      	b.n	800100a <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	441a      	add	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	1c59      	adds	r1, r3, #1
 8001000:	6179      	str	r1, [r7, #20]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	440b      	add	r3, r1
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3af      	bcc.n	8000f78 <byteStuffing+0x16>
        }
    }
    return j;
 8001018:	697b      	ldr	r3, [r7, #20]
}
 800101a:	4618      	mov	r0, r3
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8001028:	b408      	push	{r3}
 800102a:	b580      	push	{r7, lr}
 800102c:	b0b3      	sub	sp, #204	@ 0xcc
 800102e:	af02      	add	r7, sp, #8
 8001030:	4603      	mov	r3, r0
 8001032:	603a      	str	r2, [r7, #0]
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	460b      	mov	r3, r1
 8001038:	71bb      	strb	r3, [r7, #6]
	Frame frame = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2285      	movs	r2, #133	@ 0x85
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f006 ffea 	bl	800801c <memset>
    frame.sender = sender;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	763b      	strb	r3, [r7, #24]
    frame.receiver = receiver;
 800104c:	79bb      	ldrb	r3, [r7, #6]
 800104e:	767b      	strb	r3, [r7, #25]
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	3302      	adds	r3, #2
 8001056:	2203      	movs	r2, #3
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f006 ffe6 	bl	800802c <strncpy>

    // Użycie dynamicznej alokacji do przechowywania danych sformatowanych
    char *formatted_data = (char *)malloc(MAX_DATA_SIZE);
 8001060:	2080      	movs	r0, #128	@ 0x80
 8001062:	f006 fe9f 	bl	8007da4 <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (formatted_data == NULL) {
 800106c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80c2 	beq.w	80011fa <prepareFrame+0x1d2>
        // Obsługa błędu alokacji pamięci
        return;
    }

    va_list args;
    va_start(args, format);
 8001076:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800107a:	617b      	str	r3, [r7, #20]
    vsnprintf(formatted_data, MAX_DATA_SIZE, format, args);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001082:	2180      	movs	r1, #128	@ 0x80
 8001084:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001088:	f006 ffaa 	bl	8007fe0 <vsniprintf>
    va_end(args);

    size_t data_len = strlen(formatted_data);
 800108c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001090:	f7ff f89e 	bl	80001d0 <strlen>
 8001094:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    // Użycie dynamicznej alokacji do obliczeń CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 8001098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800109c:	3305      	adds	r3, #5
 800109e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint8_t *crc_input = (uint8_t *)malloc(crc_input_len);
 80010a2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80010a6:	f006 fe7d 	bl	8007da4 <malloc>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (crc_input == NULL) {
 80010b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d104      	bne.n	80010c2 <prepareFrame+0x9a>
        // Obsługa błędu alokacji pamięci
        free(formatted_data);
 80010b8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80010bc:	f006 fe7a 	bl	8007db4 <free>
        return;
 80010c0:	e09c      	b.n	80011fc <prepareFrame+0x1d4>
    }

    crc_input[0] = frame.sender;
 80010c2:	7e3a      	ldrb	r2, [r7, #24]
 80010c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010c8:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 80010ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010ce:	3301      	adds	r3, #1
 80010d0:	7e7a      	ldrb	r2, [r7, #25]
 80010d2:	701a      	strb	r2, [r3, #0]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 80010d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010d8:	3302      	adds	r3, #2
 80010da:	461a      	mov	r2, r3
 80010dc:	f107 031a 	add.w	r3, r7, #26
 80010e0:	8819      	ldrh	r1, [r3, #0]
 80010e2:	789b      	ldrb	r3, [r3, #2]
 80010e4:	8011      	strh	r1, [r2, #0]
 80010e6:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, formatted_data, data_len);
 80010e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010ec:	3305      	adds	r3, #5
 80010ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80010f2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 ffe8 	bl	80080cc <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	461a      	mov	r2, r3
 8001102:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001106:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800110a:	f7ff fb05 	bl	8000718 <calculateCrc16>
    free(crc_input);  // Zwolnienie pamięci po zakończeniu używania
 800110e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001112:	f006 fe4f 	bl	8007db4 <free>

    // Użycie dynamicznej alokacji do przechowywania ramki
    size_t raw_payload_len = 2 + COMMAND_LENGTH + data_len + 4;
 8001116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800111a:	3309      	adds	r3, #9
 800111c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint8_t *raw_payload = (uint8_t *)malloc(raw_payload_len);
 8001120:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001124:	f006 fe3e 	bl	8007da4 <malloc>
 8001128:	4603      	mov	r3, r0
 800112a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (raw_payload == NULL) {
 800112e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d104      	bne.n	8001140 <prepareFrame+0x118>
        free(formatted_data);
 8001136:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800113a:	f006 fe3b 	bl	8007db4 <free>
        return;
 800113e:	e05d      	b.n	80011fc <prepareFrame+0x1d4>
    }

    raw_payload[0] = frame.sender;
 8001140:	7e3a      	ldrb	r2, [r7, #24]
 8001142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001146:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 8001148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800114c:	3301      	adds	r3, #1
 800114e:	7e7a      	ldrb	r2, [r7, #25]
 8001150:	701a      	strb	r2, [r3, #0]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 8001152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001156:	3302      	adds	r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	f107 031a 	add.w	r3, r7, #26
 800115e:	8819      	ldrh	r1, [r3, #0]
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	8011      	strh	r1, [r2, #0]
 8001164:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, formatted_data, data_len);
 8001166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800116a:	3305      	adds	r3, #5
 800116c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001170:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001174:	4618      	mov	r0, r3
 8001176:	f006 ffa9 	bl	80080cc <memcpy>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 800117a:	7c3b      	ldrb	r3, [r7, #16]
 800117c:	461a      	mov	r2, r3
 800117e:	7c7b      	ldrb	r3, [r7, #17]
 8001180:	f107 0008 	add.w	r0, r7, #8
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	4613      	mov	r3, r2
 8001188:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <prepareFrame+0x1e0>)
 800118a:	2105      	movs	r1, #5
 800118c:	f006 fec8 	bl	8007f20 <sniprintf>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 8001190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001194:	3305      	adds	r3, #5
 8001196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800119a:	4413      	add	r3, r2
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	601a      	str	r2, [r3, #0]
    free(formatted_data);  // Zwolnienie pamięci po zakończeniu używania
 80011a0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80011a4:	f006 fe06 	bl	8007db4 <free>

    // Użycie dynamicznej alokacji do przechowywania danych po byte stuffing
    uint8_t *stuffed_payload = (uint8_t *)malloc(512);  // Maksymalny rozmiar bufora
 80011a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ac:	f006 fdfa 	bl	8007da4 <malloc>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (stuffed_payload == NULL) {
 80011b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d104      	bne.n	80011c8 <prepareFrame+0x1a0>
        free(raw_payload);
 80011be:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80011c2:	f006 fdf7 	bl	8007db4 <free>
        return;
 80011c6:	e019      	b.n	80011fc <prepareFrame+0x1d4>
    }

    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 80011c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80011cc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80011d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80011d4:	f7ff fec5 	bl	8000f62 <byteStuffing>
 80011d8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    free(raw_payload);  // Zwolnienie pamięci po zakończeniu używania
 80011dc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80011e0:	f006 fde8 	bl	8007db4 <free>

    // Wysyłanie ramki przez UART
    USART_sendFrame(stuffed_payload, stuffed_len);
 80011e4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80011e8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80011ec:	f7ff fa14 	bl	8000618 <USART_sendFrame>
    free(stuffed_payload);  // Zwolnienie pamięci po zakończeniu używania
 80011f0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80011f4:	f006 fdde 	bl	8007db4 <free>
 80011f8:	e000      	b.n	80011fc <prepareFrame+0x1d4>
        return;
 80011fa:	bf00      	nop
}
 80011fc:	37c4      	adds	r7, #196	@ 0xc4
 80011fe:	46bd      	mov	sp, r7
 8001200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001204:	b001      	add	sp, #4
 8001206:	4770      	bx	lr
 8001208:	08008898 	.word	0x08008898

0800120c <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	4613      	mov	r3, r2
 8001218:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];

    if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b06      	cmp	r3, #6
 800121e:	d953      	bls.n	80012c8 <decodeFrame+0xbc>
        uint8_t k = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]

        // Debug otrzymanych danych


        frame->sender = bx[k++];
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	75fa      	strb	r2, [r7, #23]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	701a      	strb	r2, [r3, #0]
        if(frame->sender != 'g')
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b67      	cmp	r3, #103	@ 0x67
 800123c:	d001      	beq.n	8001242 <decodeFrame+0x36>
        {
        	return false;
 800123e:	2300      	movs	r3, #0
 8001240:	e043      	b.n	80012ca <decodeFrame+0xbe>
        }
        frame->receiver = bx[k++];
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	75fa      	strb	r2, [r7, #23]
 8001248:	461a      	mov	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	705a      	strb	r2, [r3, #1]

        memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c98      	adds	r0, r3, #2
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	2203      	movs	r2, #3
 8001260:	4619      	mov	r1, r3
 8001262:	f006 ff33 	bl	80080cc <memcpy>
        k += COMMAND_LENGTH;
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	3303      	adds	r3, #3
 800126a:	75fb      	strb	r3, [r7, #23]

        uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	3b07      	subs	r3, #7
 8001270:	75bb      	strb	r3, [r7, #22]
        memcpy(frame->data, &bx[k], data_len);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1d58      	adds	r0, r3, #5
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	7dba      	ldrb	r2, [r7, #22]
 800127e:	4619      	mov	r1, r3
 8001280:	f006 ff24 	bl	80080cc <memcpy>
        frame->data[data_len] = '\0';
 8001284:	7dbb      	ldrb	r3, [r7, #22]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	4413      	add	r3, r2
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]
        k += data_len;
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	7dbb      	ldrb	r3, [r7, #22]
 8001292:	4413      	add	r3, r2
 8001294:	75fb      	strb	r3, [r7, #23]

        memcpy(incCrc, &bx[k], 2);
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	823b      	strh	r3, [r7, #16]
        calculateCrc16((uint8_t *)frame, k, ownCrc);
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	f107 0214 	add.w	r2, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff fa34 	bl	8000718 <calculateCrc16>
        if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80012b0:	7d3a      	ldrb	r2, [r7, #20]
 80012b2:	7c3b      	ldrb	r3, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d103      	bne.n	80012c0 <decodeFrame+0xb4>
 80012b8:	7d7a      	ldrb	r2, [r7, #21]
 80012ba:	7c7b      	ldrb	r3, [r7, #17]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <decodeFrame+0xb8>
            return false;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e002      	b.n	80012ca <decodeFrame+0xbe>
        }
        return true;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <decodeFrame+0xbe>
    }
    return false;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <processReceivedChar>:
* Błędy:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b7e      	cmp	r3, #126	@ 0x7e
 80012e2:	d112      	bne.n	800130a <processReceivedChar+0x36>
    	if(in_frame) {
 80012e4:	4b51      	ldr	r3, [pc, #324]	@ (800142c <processReceivedChar+0x158>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <processReceivedChar+0x22>
    		resetFrameState();
 80012ec:	f7ff fad6 	bl	800089c <resetFrameState>
    		in_frame = true;
 80012f0:	4b4e      	ldr	r3, [pc, #312]	@ (800142c <processReceivedChar+0x158>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    	}
    	in_frame = true;
 80012f6:	4b4d      	ldr	r3, [pc, #308]	@ (800142c <processReceivedChar+0x158>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
    	bx_index = 0;
 80012fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001430 <processReceivedChar+0x15c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
    	escape_detected = false;
 8001302:	4b4c      	ldr	r3, [pc, #304]	@ (8001434 <processReceivedChar+0x160>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
    } else {
    	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
    	resetFrameState();
    }
   }
}
 8001308:	e08b      	b.n	8001422 <processReceivedChar+0x14e>
    } else if (received_char == FRAME_END && escape_detected == false) {
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b60      	cmp	r3, #96	@ 0x60
 800130e:	d133      	bne.n	8001378 <processReceivedChar+0xa4>
 8001310:	4b48      	ldr	r3, [pc, #288]	@ (8001434 <processReceivedChar+0x160>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d02c      	beq.n	8001378 <processReceivedChar+0xa4>
        if (in_frame) {
 800131e:	4b43      	ldr	r3, [pc, #268]	@ (800142c <processReceivedChar+0x158>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d01f      	beq.n	8001366 <processReceivedChar+0x92>
            if (decodeFrame(bx, &frame, bx_index)) {
 8001326:	4b42      	ldr	r3, [pc, #264]	@ (8001430 <processReceivedChar+0x15c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	461a      	mov	r2, r3
 800132e:	4942      	ldr	r1, [pc, #264]	@ (8001438 <processReceivedChar+0x164>)
 8001330:	4842      	ldr	r0, [pc, #264]	@ (800143c <processReceivedChar+0x168>)
 8001332:	f7ff ff6b 	bl	800120c <decodeFrame>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00b      	beq.n	8001354 <processReceivedChar+0x80>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <processReceivedChar+0x16c>)
 800133e:	4a41      	ldr	r2, [pc, #260]	@ (8001444 <processReceivedChar+0x170>)
 8001340:	2167      	movs	r1, #103	@ 0x67
 8001342:	2068      	movs	r0, #104	@ 0x68
 8001344:	f7ff fe70 	bl	8001028 <prepareFrame>
            	stopAnimation();
 8001348:	f7ff fa42 	bl	80007d0 <stopAnimation>
                handleCommand(&frame);
 800134c:	483a      	ldr	r0, [pc, #232]	@ (8001438 <processReceivedChar+0x164>)
 800134e:	f000 f87d 	bl	800144c <handleCommand>
 8001352:	e005      	b.n	8001360 <processReceivedChar+0x8c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001354:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <processReceivedChar+0x174>)
 8001356:	4a3b      	ldr	r2, [pc, #236]	@ (8001444 <processReceivedChar+0x170>)
 8001358:	2167      	movs	r1, #103	@ 0x67
 800135a:	2068      	movs	r0, #104	@ 0x68
 800135c:	f7ff fe64 	bl	8001028 <prepareFrame>
            resetFrameState();
 8001360:	f7ff fa9c 	bl	800089c <resetFrameState>
        if (in_frame) {
 8001364:	e05d      	b.n	8001422 <processReceivedChar+0x14e>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <processReceivedChar+0x174>)
 8001368:	4a36      	ldr	r2, [pc, #216]	@ (8001444 <processReceivedChar+0x170>)
 800136a:	2167      	movs	r1, #103	@ 0x67
 800136c:	2068      	movs	r0, #104	@ 0x68
 800136e:	f7ff fe5b 	bl	8001028 <prepareFrame>
            resetFrameState();
 8001372:	f7ff fa93 	bl	800089c <resetFrameState>
        if (in_frame) {
 8001376:	e054      	b.n	8001422 <processReceivedChar+0x14e>
    } else if (in_frame) {
 8001378:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <processReceivedChar+0x158>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d050      	beq.n	8001422 <processReceivedChar+0x14e>
    	if(bx_index < MAX_FRAME_WITHOUT_STUFFING) {
 8001380:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <processReceivedChar+0x15c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b86      	cmp	r3, #134	@ 0x86
 8001386:	dc43      	bgt.n	8001410 <processReceivedChar+0x13c>
        if (escape_detected) {
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <processReceivedChar+0x160>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d02f      	beq.n	80013f0 <processReceivedChar+0x11c>
            if (received_char == FRAME_START_STUFF) {
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b5e      	cmp	r3, #94	@ 0x5e
 8001394:	d108      	bne.n	80013a8 <processReceivedChar+0xd4>
                bx[bx_index++] = FRAME_START;
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <processReceivedChar+0x15c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	4924      	ldr	r1, [pc, #144]	@ (8001430 <processReceivedChar+0x15c>)
 800139e:	600a      	str	r2, [r1, #0]
 80013a0:	4a26      	ldr	r2, [pc, #152]	@ (800143c <processReceivedChar+0x168>)
 80013a2:	217e      	movs	r1, #126	@ 0x7e
 80013a4:	54d1      	strb	r1, [r2, r3]
 80013a6:	e01f      	b.n	80013e8 <processReceivedChar+0x114>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b5d      	cmp	r3, #93	@ 0x5d
 80013ac:	d108      	bne.n	80013c0 <processReceivedChar+0xec>
                bx[bx_index++] = ESCAPE_CHAR;
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <processReceivedChar+0x15c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	491e      	ldr	r1, [pc, #120]	@ (8001430 <processReceivedChar+0x15c>)
 80013b6:	600a      	str	r2, [r1, #0]
 80013b8:	4a20      	ldr	r2, [pc, #128]	@ (800143c <processReceivedChar+0x168>)
 80013ba:	217d      	movs	r1, #125	@ 0x7d
 80013bc:	54d1      	strb	r1, [r2, r3]
 80013be:	e013      	b.n	80013e8 <processReceivedChar+0x114>
            } else if (received_char == FRAME_END_STUFF) {
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b26      	cmp	r3, #38	@ 0x26
 80013c4:	d108      	bne.n	80013d8 <processReceivedChar+0x104>
                bx[bx_index++] = FRAME_END;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <processReceivedChar+0x15c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	4918      	ldr	r1, [pc, #96]	@ (8001430 <processReceivedChar+0x15c>)
 80013ce:	600a      	str	r2, [r1, #0]
 80013d0:	4a1a      	ldr	r2, [pc, #104]	@ (800143c <processReceivedChar+0x168>)
 80013d2:	2160      	movs	r1, #96	@ 0x60
 80013d4:	54d1      	strb	r1, [r2, r3]
 80013d6:	e007      	b.n	80013e8 <processReceivedChar+0x114>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <processReceivedChar+0x174>)
 80013da:	4a1a      	ldr	r2, [pc, #104]	@ (8001444 <processReceivedChar+0x170>)
 80013dc:	2167      	movs	r1, #103	@ 0x67
 80013de:	2068      	movs	r0, #104	@ 0x68
 80013e0:	f7ff fe22 	bl	8001028 <prepareFrame>
                resetFrameState();
 80013e4:	f7ff fa5a 	bl	800089c <resetFrameState>
            escape_detected = false;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <processReceivedChar+0x160>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	e018      	b.n	8001422 <processReceivedChar+0x14e>
        } else if (received_char == ESCAPE_CHAR) {
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b7d      	cmp	r3, #125	@ 0x7d
 80013f4:	d103      	bne.n	80013fe <processReceivedChar+0x12a>
            escape_detected = true;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <processReceivedChar+0x160>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
}
 80013fc:	e011      	b.n	8001422 <processReceivedChar+0x14e>
        	bx[bx_index++] = received_char;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <processReceivedChar+0x15c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	490a      	ldr	r1, [pc, #40]	@ (8001430 <processReceivedChar+0x15c>)
 8001406:	600a      	str	r2, [r1, #0]
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <processReceivedChar+0x168>)
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	54ca      	strb	r2, [r1, r3]
}
 800140e:	e008      	b.n	8001422 <processReceivedChar+0x14e>
    	prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <processReceivedChar+0x174>)
 8001412:	4a0c      	ldr	r2, [pc, #48]	@ (8001444 <processReceivedChar+0x170>)
 8001414:	2167      	movs	r1, #103	@ 0x67
 8001416:	2068      	movs	r0, #104	@ 0x68
 8001418:	f7ff fe06 	bl	8001028 <prepareFrame>
    	resetFrameState();
 800141c:	f7ff fa3e 	bl	800089c <resetFrameState>
}
 8001420:	e7ff      	b.n	8001422 <processReceivedChar+0x14e>
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000c1c 	.word	0x20000c1c
 8001430:	20000c18 	.word	0x20000c18
 8001434:	20000c14 	.word	0x20000c14
 8001438:	20000c20 	.word	0x20000c20
 800143c:	20000b14 	.word	0x20000b14
 8001440:	080088a4 	.word	0x080088a4
 8001444:	0800884c 	.word	0x0800884c
 8001448:	080088ac 	.word	0x080088ac

0800144c <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b092      	sub	sp, #72	@ 0x48
 8001450:	af02      	add	r7, sp, #8
 8001452:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8084 	beq.w	8001564 <handleCommand+0x118>
        return;
    }

    CommandEntry commandTable[COMMAND_COUNT] = {
 800145c:	4b43      	ldr	r3, [pc, #268]	@ (800156c <handleCommand+0x120>)
 800145e:	f107 0414 	add.w	r4, r7, #20
 8001462:	461d      	mov	r5, r3
 8001464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001470:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };

    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001478:	e067      	b.n	800154a <handleCommand+0xfe>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1c98      	adds	r0, r3, #2
 800147e:	f107 0214 	add.w	r2, r7, #20
 8001482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	2203      	movs	r2, #3
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff f9ae 	bl	80007ec <safeCompare>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d056      	beq.n	8001544 <handleCommand+0xf8>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 8001496:	f107 0214 	add.w	r2, r7, #20
 800149a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	2203      	movs	r2, #3
 80014a2:	4933      	ldr	r1, [pc, #204]	@ (8001570 <handleCommand+0x124>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f9a1 	bl	80007ec <safeCompare>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00f      	beq.n	80014d0 <handleCommand+0x84>
                    lcdClear();
 80014b0:	f000 fab6 	bl	8001a20 <lcdClear>
                    commandTable[i].function(frame);
 80014b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	3340      	adds	r3, #64	@ 0x40
 80014ba:	443b      	add	r3, r7
 80014bc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
                    lcdCopy();
 80014c4:	f000 fa80 	bl	80019c8 <lcdCopy>
                    clearFrame(frame);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fadd 	bl	8000a88 <clearFrame>
                    return;
 80014ce:	e04a      	b.n	8001566 <handleCommand+0x11a>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3305      	adds	r3, #5
 80014d4:	f107 020c 	add.w	r2, r7, #12
 80014d8:	f107 0110 	add.w	r1, r7, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fd28 	bl	8000f32 <parseCoordinates>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01f      	beq.n	8001528 <handleCommand+0xdc>
                    if (isWithinBounds(x, y)) {
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd02 	bl	8000ef8 <isWithinBounds>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00f      	beq.n	800151a <handleCommand+0xce>
                        lcdClear();
 80014fa:	f000 fa91 	bl	8001a20 <lcdClear>
                        commandTable[i].function(frame);
 80014fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	3340      	adds	r3, #64	@ 0x40
 8001504:	443b      	add	r3, r7
 8001506:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
                        lcdCopy();
 800150e:	f000 fa5b 	bl	80019c8 <lcdCopy>
                        clearFrame(frame);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fab8 	bl	8000a88 <clearFrame>
                        return;
 8001518:	e025      	b.n	8001566 <handleCommand+0x11a>
                    } else {
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <handleCommand+0x128>)
 800151c:	4a16      	ldr	r2, [pc, #88]	@ (8001578 <handleCommand+0x12c>)
 800151e:	2167      	movs	r1, #103	@ 0x67
 8001520:	2068      	movs	r0, #104	@ 0x68
 8001522:	f7ff fd81 	bl	8001028 <prepareFrame>
                    return;
 8001526:	e01e      	b.n	8001566 <handleCommand+0x11a>
                }
            } else {
            	lcdClear();
 8001528:	f000 fa7a 	bl	8001a20 <lcdClear>
            	lcdCopy();
 800152c:	f000 fa4c 	bl	80019c8 <lcdCopy>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3305      	adds	r3, #5
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <handleCommand+0x130>)
 8001538:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <handleCommand+0x12c>)
 800153a:	2167      	movs	r1, #103	@ 0x67
 800153c:	2068      	movs	r0, #104	@ 0x68
 800153e:	f7ff fd73 	bl	8001028 <prepareFrame>
                return;
 8001542:	e010      	b.n	8001566 <handleCommand+0x11a>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001546:	3301      	adds	r3, #1
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800154a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800154c:	2b04      	cmp	r3, #4
 800154e:	dd94      	ble.n	800147a <handleCommand+0x2e>
            }
        }
    }
    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3302      	adds	r3, #2
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <handleCommand+0x130>)
 8001558:	4a07      	ldr	r2, [pc, #28]	@ (8001578 <handleCommand+0x12c>)
 800155a:	2167      	movs	r1, #103	@ 0x67
 800155c:	2068      	movs	r0, #104	@ 0x68
 800155e:	f7ff fd63 	bl	8001028 <prepareFrame>
 8001562:	e000      	b.n	8001566 <handleCommand+0x11a>
        return;
 8001564:	bf00      	nop
}
 8001566:	3740      	adds	r7, #64	@ 0x40
 8001568:	46bd      	mov	sp, r7
 800156a:	bdb0      	pop	{r4, r5, r7, pc}
 800156c:	080088c8 	.word	0x080088c8
 8001570:	080088b4 	.word	0x080088b4
 8001574:	080088b8 	.word	0x080088b8
 8001578:	0800884c 	.word	0x0800884c
 800157c:	08008858 	.word	0x08008858

08001580 <updateScrollingText>:



void updateScrollingText(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af02      	add	r7, sp, #8
	if (!text.isScrolling || text.scrollSpeed == 0) {
 8001586:	4b60      	ldr	r3, [pc, #384]	@ (8001708 <updateScrollingText+0x188>)
 8001588:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 800158c:	f083 0301 	eor.w	r3, r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 80b3 	bne.w	80016fe <updateScrollingText+0x17e>
 8001598:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <updateScrollingText+0x188>)
 800159a:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80ad 	beq.w	80016fe <updateScrollingText+0x17e>
	        return;
	}
    uint32_t currentTime = HAL_GetTick();
 80015a4:	f000 fee8 	bl	8002378 <HAL_GetTick>
 80015a8:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 80015aa:	4b57      	ldr	r3, [pc, #348]	@ (8001708 <updateScrollingText+0x188>)
 80015ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4a54      	ldr	r2, [pc, #336]	@ (8001708 <updateScrollingText+0x188>)
 80015b6:	f892 20cd 	ldrb.w	r2, [r2, #205]	@ 0xcd
 80015ba:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80015be:	4293      	cmp	r3, r2
 80015c0:	f0c0 809e 	bcc.w	8001700 <updateScrollingText+0x180>
        text.lastUpdate = currentTime;
 80015c4:	4a50      	ldr	r2, [pc, #320]	@ (8001708 <updateScrollingText+0x188>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

        // Oblicz szerokość znaku w zależności od fontu
        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 80015cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001708 <updateScrollingText+0x188>)
 80015ce:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d014      	beq.n	8001600 <updateScrollingText+0x80>
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	dc19      	bgt.n	800160e <updateScrollingText+0x8e>
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d002      	beq.n	80015e4 <updateScrollingText+0x64>
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d007      	beq.n	80015f2 <updateScrollingText+0x72>
 80015e2:	e014      	b.n	800160e <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 80015e4:	2305      	movs	r3, #5
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	2307      	movs	r3, #7
 80015ea:	73bb      	strb	r3, [r7, #14]
 80015ec:	4b47      	ldr	r3, [pc, #284]	@ (800170c <updateScrollingText+0x18c>)
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	e014      	b.n	800161c <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 80015f2:	2305      	movs	r3, #5
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	2308      	movs	r3, #8
 80015f8:	73bb      	strb	r3, [r7, #14]
 80015fa:	4b45      	ldr	r3, [pc, #276]	@ (8001710 <updateScrollingText+0x190>)
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	e00d      	b.n	800161c <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9;break;
 8001600:	2306      	movs	r3, #6
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	2309      	movs	r3, #9
 8001606:	73bb      	strb	r3, [r7, #14]
 8001608:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <updateScrollingText+0x194>)
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	e006      	b.n	800161c <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 800160e:	2305      	movs	r3, #5
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	2307      	movs	r3, #7
 8001614:	73bb      	strb	r3, [r7, #14]
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <updateScrollingText+0x18c>)
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	bf00      	nop
        }

        text.x += charWidth;
 800161c:	4b3a      	ldr	r3, [pc, #232]	@ (8001708 <updateScrollingText+0x188>)
 800161e:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4413      	add	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <updateScrollingText+0x188>)
 800162a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

                // Oblicz całkowitą szerokość tekstu

                // Jeśli tekst wyszedł całkowicie za ekran
                if (text.x >= LCD_WIDTH - (charWidth * text.textLength)) {
 800162e:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <updateScrollingText+0x188>)
 8001630:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001634:	4619      	mov	r1, r3
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	4a33      	ldr	r2, [pc, #204]	@ (8001708 <updateScrollingText+0x188>)
 800163a:	f892 20d0 	ldrb.w	r2, [r2, #208]	@ 0xd0
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001646:	4299      	cmp	r1, r3
 8001648:	db43      	blt.n	80016d2 <updateScrollingText+0x152>
                    if (text.firstIteration) {
 800164a:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <updateScrollingText+0x188>)
 800164c:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d024      	beq.n	800169e <updateScrollingText+0x11e>
                        // W pierwszej iteracji używamy startowych współrzędnych
                        text.x = text.startX;  // Zaczynamy zza lewej krawędzi
 8001654:	4b2c      	ldr	r3, [pc, #176]	@ (8001708 <updateScrollingText+0x188>)
 8001656:	f893 20ca 	ldrb.w	r2, [r3, #202]	@ 0xca
 800165a:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <updateScrollingText+0x188>)
 800165c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 8001660:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <updateScrollingText+0x188>)
 8001662:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	4413      	add	r3, r2
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <updateScrollingText+0x188>)
 800166e:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu w pierwszej iteracji
                        if (text.y >= LCD_HEIGHT - charHeight) {
 8001672:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <updateScrollingText+0x188>)
 8001674:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001678:	461a      	mov	r2, r3
 800167a:	7bbb      	ldrb	r3, [r7, #14]
 800167c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001680:	429a      	cmp	r2, r3
 8001682:	db26      	blt.n	80016d2 <updateScrollingText+0x152>
                            text.firstIteration = false;  // Kończymy pierwszą iterację
 8001684:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <updateScrollingText+0x188>)
 8001686:	2200      	movs	r2, #0
 8001688:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                            text.x = 0;
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <updateScrollingText+0x188>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                            text.y = 0;
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <updateScrollingText+0x188>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800169c:	e019      	b.n	80016d2 <updateScrollingText+0x152>
                        }
                    } else {
                        // W kolejnych iteracjach zaczynamy od lewej krawędzi
                        text.x = 0;
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <updateScrollingText+0x188>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <updateScrollingText+0x188>)
 80016a8:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	4413      	add	r3, r2
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <updateScrollingText+0x188>)
 80016b4:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu
                        if (text.y >= LCD_HEIGHT - charHeight) {
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <updateScrollingText+0x188>)
 80016ba:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80016be:	461a      	mov	r2, r3
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016c6:	429a      	cmp	r2, r3
 80016c8:	db03      	blt.n	80016d2 <updateScrollingText+0x152>
                            text.y = 0;
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <updateScrollingText+0x188>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
                        }
                    }
                }
            lcdClear();
 80016d2:	f000 f9a5 	bl	8001a20 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <updateScrollingText+0x188>)
 80016d8:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80016dc:	b219      	sxth	r1, r3
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <updateScrollingText+0x188>)
 80016e0:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <updateScrollingText+0x188>)
 80016e8:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4603      	mov	r3, r0
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <updateScrollingText+0x188>)
 80016f4:	f005 fec8 	bl	8007488 <hagl_put_text>
            lcdCopy();
 80016f8:	f000 f966 	bl	80019c8 <lcdCopy>
 80016fc:	e000      	b.n	8001700 <updateScrollingText+0x180>
	        return;
 80016fe:	bf00      	nop
    }
}
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000ca8 	.word	0x20000ca8
 800170c:	08008930 	.word	0x08008930
 8001710:	0800be38 	.word	0x0800be38
 8001714:	0800ecdc 	.word	0x0800ecdc

08001718 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	4b4a      	ldr	r3, [pc, #296]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	4a49      	ldr	r2, [pc, #292]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <MX_GPIO_Init+0x140>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	4b44      	ldr	r3, [pc, #272]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	4a43      	ldr	r2, [pc, #268]	@ (8001858 <MX_GPIO_Init+0x140>)
 800174c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001752:	4b41      	ldr	r3, [pc, #260]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b3e      	ldr	r3, [pc, #248]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a3d      	ldr	r2, [pc, #244]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <MX_GPIO_Init+0x140>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	4a37      	ldr	r2, [pc, #220]	@ (8001858 <MX_GPIO_Init+0x140>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001782:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178e:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	4a31      	ldr	r2, [pc, #196]	@ (8001858 <MX_GPIO_Init+0x140>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <MX_GPIO_Init+0x140>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f641 0106 	movw	r1, #6150	@ 0x1806
 80017ac:	482b      	ldr	r0, [pc, #172]	@ (800185c <MX_GPIO_Init+0x144>)
 80017ae:	f001 fb21 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80017b2:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80017b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b8:	2303      	movs	r3, #3
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4826      	ldr	r0, [pc, #152]	@ (8001860 <MX_GPIO_Init+0x148>)
 80017c8:	f001 f96a 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017cc:	2303      	movs	r3, #3
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4821      	ldr	r0, [pc, #132]	@ (8001864 <MX_GPIO_Init+0x14c>)
 80017e0:	f001 f95e 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80017e4:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80017e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f001 f950 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001800:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001804:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4811      	ldr	r0, [pc, #68]	@ (800185c <MX_GPIO_Init+0x144>)
 8001816:	f001 f943 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 800181a:	f641 0306 	movw	r3, #6150	@ 0x1806
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	480a      	ldr	r0, [pc, #40]	@ (800185c <MX_GPIO_Init+0x144>)
 8001834:	f001 f934 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001838:	2304      	movs	r3, #4
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183c:	2303      	movs	r3, #3
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	@ (8001868 <MX_GPIO_Init+0x150>)
 800184c:	f001 f928 	bl	8002aa0 <HAL_GPIO_Init>

}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	@ 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400
 8001860:	48000800 	.word	0x48000800
 8001864:	48001c00 	.word	0x48001c00
 8001868:	48000c00 	.word	0x48000c00

0800186c <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <lcdCmd+0x44>)
 800187e:	f001 fab9 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001888:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <lcdCmd+0x44>)
 800188a:	f001 fab3 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800188e:	1df9      	adds	r1, r7, #7
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	2201      	movs	r2, #1
 8001896:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <lcdCmd+0x48>)
 8001898:	f002 fe87 	bl	80045aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a2:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <lcdCmd+0x44>)
 80018a4:	f001 faa6 	bl	8002df4 <HAL_GPIO_WritePin>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	48000400 	.word	0x48000400
 80018b4:	2000ad88 	.word	0x2000ad88

080018b8 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c8:	480c      	ldr	r0, [pc, #48]	@ (80018fc <lcdData+0x44>)
 80018ca:	f001 fa93 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018d4:	4809      	ldr	r0, [pc, #36]	@ (80018fc <lcdData+0x44>)
 80018d6:	f001 fa8d 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80018da:	1df9      	adds	r1, r7, #7
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	2201      	movs	r2, #1
 80018e2:	4807      	ldr	r0, [pc, #28]	@ (8001900 <lcdData+0x48>)
 80018e4:	f002 fe61 	bl	80045aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ee:	4803      	ldr	r0, [pc, #12]	@ (80018fc <lcdData+0x44>)
 80018f0:	f001 fa80 	bl	8002df4 <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	48000400 	.word	0x48000400
 8001900:	2000ad88 	.word	0x2000ad88

08001904 <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <lcdSend+0x20>
		lcdCmd(value);
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffa5 	bl	800186c <lcdCmd>
	} else {
		lcdData(value);
	}
}
 8001922:	e004      	b.n	800192e <lcdSend+0x2a>
		lcdData(value);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffc5 	bl	80018b8 <lcdData>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ffb5 	bl	80018b8 <lcdData>
	lcdData(value);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ffb0 	bl	80018b8 <lcdData>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 800196e:	202a      	movs	r0, #42	@ 0x2a
 8001970:	f7ff ff7c 	bl	800186c <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	b29b      	uxth	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffda 	bl	8001936 <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b29b      	uxth	r3, r3
 800198a:	4413      	add	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ffd1 	bl	8001936 <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001994:	202b      	movs	r0, #43	@ 0x2b
 8001996:	f7ff ff69 	bl	800186c <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	b29b      	uxth	r3, r3
 800199e:	3302      	adds	r3, #2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffc7 	bl	8001936 <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ffbc 	bl	8001936 <lcdData16>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 80019cc:	f000 f894 	bl	8001af8 <lcdIsBusy>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11b      	bne.n	8001a0e <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	22a0      	movs	r2, #160	@ 0xa0
 80019da:	2100      	movs	r1, #0
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ffbf 	bl	8001960 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 80019e2:	202c      	movs	r0, #44	@ 0x2c
 80019e4:	f7ff ff42 	bl	800186c <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019ee:	4809      	ldr	r0, [pc, #36]	@ (8001a14 <lcdCopy+0x4c>)
 80019f0:	f001 fa00 	bl	8002df4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019fa:	4806      	ldr	r0, [pc, #24]	@ (8001a14 <lcdCopy+0x4c>)
 80019fc:	f001 f9fa 	bl	8002df4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001a00:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a04:	4904      	ldr	r1, [pc, #16]	@ (8001a18 <lcdCopy+0x50>)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <lcdCopy+0x54>)
 8001a08:	f002 ff46 	bl	8004898 <HAL_SPI_Transmit_DMA>
 8001a0c:	e000      	b.n	8001a10 <lcdCopy+0x48>
        return;
 8001a0e:	bf00      	nop
}
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	48000400 	.word	0x48000400
 8001a18:	20000d80 	.word	0x20000d80
 8001a1c:	2000ad88 	.word	0x2000ad88

08001a20 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001a24:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <lcdClear+0x14>)
 8001a2c:	f006 faf6 	bl	800801c <memset>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000d80 	.word	0x20000d80

08001a38 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2104      	movs	r1, #4
 8001a42:	481c      	ldr	r0, [pc, #112]	@ (8001ab4 <lcdInit+0x7c>)
 8001a44:	f001 f9d6 	bl	8002df4 <HAL_GPIO_WritePin>
    delay(100);
 8001a48:	2064      	movs	r0, #100	@ 0x64
 8001a4a:	f000 f8c9 	bl	8001be0 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2104      	movs	r1, #4
 8001a52:	4818      	ldr	r0, [pc, #96]	@ (8001ab4 <lcdInit+0x7c>)
 8001a54:	f001 f9ce 	bl	8002df4 <HAL_GPIO_WritePin>
    delay(100);
 8001a58:	2064      	movs	r0, #100	@ 0x64
 8001a5a:	f000 f8c1 	bl	8001be0 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	e009      	b.n	8001a78 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <lcdInit+0x80>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff49 	bl	8001904 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b4b      	cmp	r3, #75	@ 0x4b
 8001a7c:	d9f2      	bls.n	8001a64 <lcdInit+0x2c>
    }
    delay(200);
 8001a7e:	20c8      	movs	r0, #200	@ 0xc8
 8001a80:	f000 f8ae 	bl	8001be0 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001a84:	2011      	movs	r0, #17
 8001a86:	f7ff fef1 	bl	800186c <lcdCmd>
    delay(120);
 8001a8a:	2078      	movs	r0, #120	@ 0x78
 8001a8c:	f000 f8a8 	bl	8001be0 <delay>
    lcdCmd(ST7735S_DISPON);
 8001a90:	2029      	movs	r0, #41	@ 0x29
 8001a92:	f7ff feeb 	bl	800186c <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <lcdInit+0x7c>)
 8001a9c:	f001 f9aa 	bl	8002df4 <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001aa0:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <lcdInit+0x84>)
 8001aa8:	f006 fab8 	bl	800801c <memset>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	48000400 	.word	0x48000400
 8001ab8:	08011c94 	.word	0x08011c94
 8001abc:	20000d80 	.word	0x20000d80

08001ac0 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	4613      	mov	r3, r2
 8001acc:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	015b      	lsls	r3, r3, #5
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	4905      	ldr	r1, [pc, #20]	@ (8001af4 <lcdPutPixel+0x34>)
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000d80 	.word	0x20000d80

08001af8 <lcdIsBusy>:
bool lcdIsBusy(void) {
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <lcdIsBusy+0x14>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	2000ad80 	.word	0x2000ad80

08001b10 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <HAL_SPI_TxCpltCallback+0x2c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d108      	bne.n	8001b32 <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b26:	4806      	ldr	r0, [pc, #24]	@ (8001b40 <HAL_SPI_TxCpltCallback+0x30>)
 8001b28:	f001 f964 	bl	8002df4 <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_SPI_TxCpltCallback+0x34>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
    }
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000ad88 	.word	0x2000ad88
 8001b40:	48000400 	.word	0x48000400
 8001b44:	2000ad80 	.word	0x2000ad80

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	@ (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ffc2 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <delay+0x2c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001bee:	bf00      	nop
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <delay+0x2c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d8f8      	bhi.n	8001bf0 <delay+0x10>
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	2000ad84 	.word	0x2000ad84

08001c10 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001c16:	f7fe fcc3 	bl	80005a0 <USART_kbhit>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001c20:	f7fe fcd0 	bl	80005c4 <USART_getchar>
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fb52 	bl	80012d4 <processReceivedChar>
	 }
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3c:	f000 fb33 	bl	80022a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c40:	f000 f812 	bl	8001c68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001c44:	4807      	ldr	r0, [pc, #28]	@ (8001c64 <main+0x2c>)
 8001c46:	f7ff ffa9 	bl	8001b9c <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c4a:	f7ff fd65 	bl	8001718 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c4e:	f7fe fda1 	bl	8000794 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c52:	f000 fa53 	bl	80020fc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001c56:	f000 f85f 	bl	8001d18 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001c5a:	f7ff feed 	bl	8001a38 <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
	  waitForFrame();
 8001c5e:	f7ff ffd7 	bl	8001c10 <waitForFrame>
 8001c62:	e7fc      	b.n	8001c5e <main+0x26>
 8001c64:	00013880 	.word	0x00013880

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b096      	sub	sp, #88	@ 0x58
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	2244      	movs	r2, #68	@ 0x44
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 f9d0 	bl	800801c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c8e:	f001 f8d7 	bl	8002e40 <HAL_PWREx_ControlVoltageScaling>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c98:	f000 f838 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ca8:	2360      	movs	r3, #96	@ 0x60
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cac:	2302      	movs	r3, #2
 8001cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001cb8:	2328      	movs	r3, #40	@ 0x28
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 f90d 	bl	8002eec <HAL_RCC_OscConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001cd8:	f000 f818 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
 8001cde:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fcd5 	bl	80036a4 <HAL_RCC_ClockConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d00:	f000 f804 	bl	8001d0c <Error_Handler>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3758      	adds	r7, #88	@ 0x58
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <Error_Handler+0x8>

08001d18 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <MX_SPI2_Init+0x78>)
 8001d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d30:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d32:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d4e:	2210      	movs	r2, #16
 8001d50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d66:	2207      	movs	r2, #7
 8001d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <MX_SPI2_Init+0x74>)
 8001d78:	f002 fb74 	bl	8004464 <HAL_SPI_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d82:	f7ff ffc3 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000ad88 	.word	0x2000ad88
 8001d90:	40003800 	.word	0x40003800

08001d94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3e      	ldr	r2, [pc, #248]	@ (8001eac <HAL_SPI_MspInit+0x118>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d175      	bne.n	8001ea2 <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001db6:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	4a37      	ldr	r2, [pc, #220]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dda:	4b35      	ldr	r3, [pc, #212]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b32      	ldr	r3, [pc, #200]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4a31      	ldr	r2, [pc, #196]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df2:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <HAL_SPI_MspInit+0x11c>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001dfe:	2308      	movs	r3, #8
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4826      	ldr	r0, [pc, #152]	@ (8001eb4 <HAL_SPI_MspInit+0x120>)
 8001e1a:	f000 fe41 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e30:	2305      	movs	r3, #5
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	481f      	ldr	r0, [pc, #124]	@ (8001eb8 <HAL_SPI_MspInit+0x124>)
 8001e3c:	f000 fe30 	bl	8002aa0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e42:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec0 <HAL_SPI_MspInit+0x12c>)
 8001e44:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001e46:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e4e:	2210      	movs	r2, #16
 8001e50:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e5a:	2280      	movs	r2, #128	@ 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001e76:	4811      	ldr	r0, [pc, #68]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e78:	f000 fb9c 	bl	80025b4 <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001e82:	f7ff ff43 	bl	8001d0c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a0c      	ldr	r2, [pc, #48]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_SPI_MspInit+0x128>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2102      	movs	r1, #2
 8001e96:	2024      	movs	r0, #36	@ 0x24
 8001e98:	f000 fb55 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e9c:	2024      	movs	r0, #36	@ 0x24
 8001e9e:	f000 fb6e 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	@ 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40003800 	.word	0x40003800
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	48000800 	.word	0x48000800
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	2000adec 	.word	0x2000adec
 8001ec0:	40020058 	.word	0x40020058

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_MspInit+0x44>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <NMI_Handler+0x4>

08001f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <MemManage_Handler+0x4>

08001f24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 f9f4 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <SysTick_Handler+0x1c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a03      	ldr	r2, [pc, #12]	@ (8001f7c <SysTick_Handler+0x1c>)
 8001f70:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 8001f72:	f7ff fb05 	bl	8001580 <updateScrollingText>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000ad84 	.word	0x2000ad84

08001f80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <DMA1_Channel5_IRQHandler+0x10>)
 8001f86:	f000 fcac 	bl	80028e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000adec 	.word	0x2000adec

08001f94 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <SPI2_IRQHandler+0x10>)
 8001f9a:	f002 fd6b 	bl	8004a74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000ad88 	.word	0x2000ad88

08001fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <USART2_IRQHandler+0x10>)
 8001fae:	f003 f95b 	bl	8005268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000ae38 	.word	0x2000ae38

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f006 f842 	bl	8008074 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20018000 	.word	0x20018000
 800201c:	00001000 	.word	0x00001000
 8002020:	2000ae34 	.word	0x2000ae34
 8002024:	2000b010 	.word	0x2000b010

08002028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <HAL_UART_TxCpltCallback+0x54>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d11d      	bne.n	8002098 <HAL_UART_TxCpltCallback+0x4c>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_UART_TxCpltCallback+0x58>)
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_UART_TxCpltCallback+0x58>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d017      	beq.n	8002098 <HAL_UART_TxCpltCallback+0x4c>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002068:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <HAL_UART_TxCpltCallback+0x58>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a0e      	ldr	r2, [pc, #56]	@ (80020a8 <HAL_UART_TxCpltCallback+0x5c>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) % txRingBuffer.mask;
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <HAL_UART_TxCpltCallback+0x58>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	3301      	adds	r3, #1
 8002078:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <HAL_UART_TxCpltCallback+0x58>)
 800207a:	68d2      	ldr	r2, [r2, #12]
 800207c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002080:	fb01 f202 	mul.w	r2, r1, r2
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	4a07      	ldr	r2, [pc, #28]	@ (80020a4 <HAL_UART_TxCpltCallback+0x58>)
 8002088:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800208a:	f107 030f 	add.w	r3, r7, #15
 800208e:	2201      	movs	r2, #1
 8002090:	4619      	mov	r1, r3
 8002092:	4803      	ldr	r0, [pc, #12]	@ (80020a0 <HAL_UART_TxCpltCallback+0x54>)
 8002094:	f003 f83e 	bl	8005114 <HAL_UART_Transmit_IT>
	   }
   }
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2000ae38 	.word	0x2000ae38
 80020a4:	20000290 	.word	0x20000290
 80020a8:	200002a0 	.word	0x200002a0

080020ac <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0e      	ldr	r2, [pc, #56]	@ (80020f0 <HAL_UART_RxCpltCallback+0x44>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d114      	bne.n	80020e6 <HAL_UART_RxCpltCallback+0x3a>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) % rxRingBuffer.mask;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <HAL_UART_RxCpltCallback+0x48>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <HAL_UART_RxCpltCallback+0x48>)
 80020c4:	68d2      	ldr	r2, [r2, #12]
 80020c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80020ca:	fb01 f202 	mul.w	r2, r1, r2
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	4a08      	ldr	r2, [pc, #32]	@ (80020f4 <HAL_UART_RxCpltCallback+0x48>)
 80020d2:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80020d4:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_UART_RxCpltCallback+0x48>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <HAL_UART_RxCpltCallback+0x4c>)
 80020da:	4413      	add	r3, r2
 80020dc:	2201      	movs	r2, #1
 80020de:	4619      	mov	r1, r3
 80020e0:	4803      	ldr	r0, [pc, #12]	@ (80020f0 <HAL_UART_RxCpltCallback+0x44>)
 80020e2:	f003 f875 	bl	80051d0 <HAL_UART_Receive_IT>

	 }
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000ae38 	.word	0x2000ae38
 80020f4:	20000280 	.word	0x20000280
 80020f8:	20000a04 	.word	0x20000a04

080020fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002100:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002102:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <MX_USART2_UART_Init+0x7c>)
 8002104:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002106:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002108:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800210c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800210e:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800211a:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002122:	220c      	movs	r2, #12
 8002124:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002138:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213e:	480d      	ldr	r0, [pc, #52]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 8002140:	f002 ff9a 	bl	8005078 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800214a:	f7ff fddf 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 800214e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8002152:	490a      	ldr	r1, [pc, #40]	@ (800217c <MX_USART2_UART_Init+0x80>)
 8002154:	480a      	ldr	r0, [pc, #40]	@ (8002180 <MX_USART2_UART_Init+0x84>)
 8002156:	f7fe fa0b 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 800215a:	f240 7262 	movw	r2, #1890	@ 0x762
 800215e:	4909      	ldr	r1, [pc, #36]	@ (8002184 <MX_USART2_UART_Init+0x88>)
 8002160:	4809      	ldr	r0, [pc, #36]	@ (8002188 <MX_USART2_UART_Init+0x8c>)
 8002162:	f7fe fa05 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 8002166:	2201      	movs	r2, #1
 8002168:	4904      	ldr	r1, [pc, #16]	@ (800217c <MX_USART2_UART_Init+0x80>)
 800216a:	4802      	ldr	r0, [pc, #8]	@ (8002174 <MX_USART2_UART_Init+0x78>)
 800216c:	f003 f830 	bl	80051d0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000ae38 	.word	0x2000ae38
 8002178:	40004400 	.word	0x40004400
 800217c:	20000a04 	.word	0x20000a04
 8002180:	20000280 	.word	0x20000280
 8002184:	200002a0 	.word	0x200002a0
 8002188:	20000290 	.word	0x20000290

0800218c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0ac      	sub	sp, #176	@ 0xb0
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2288      	movs	r2, #136	@ 0x88
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f005 ff35 	bl	800801c <memset>
  if(uartHandle->Instance==USART2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a25      	ldr	r2, [pc, #148]	@ (800224c <HAL_UART_MspInit+0xc0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d143      	bne.n	8002244 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021bc:	2302      	movs	r3, #2
 80021be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 fc8f 	bl	8003aec <HAL_RCCEx_PeriphCLKConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021d4:	f7ff fd9a 	bl	8001d0c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_UART_MspInit+0xc4>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <HAL_UART_MspInit+0xc4>)
 80021de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_UART_MspInit+0xc4>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_UART_MspInit+0xc4>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f4:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <HAL_UART_MspInit+0xc4>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_UART_MspInit+0xc4>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002208:	230c      	movs	r3, #12
 800220a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002220:	2307      	movs	r3, #7
 8002222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002230:	f000 fc36 	bl	8002aa0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2101      	movs	r1, #1
 8002238:	2026      	movs	r0, #38	@ 0x26
 800223a:	f000 f984 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223e:	2026      	movs	r0, #38	@ 0x26
 8002240:	f000 f99d 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002244:	bf00      	nop
 8002246:	37b0      	adds	r7, #176	@ 0xb0
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40004400 	.word	0x40004400
 8002250:	40021000 	.word	0x40021000

08002254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800228c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002258:	f7ff fee6 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800225c:	480c      	ldr	r0, [pc, #48]	@ (8002290 <LoopForever+0x6>)
  ldr r1, =_edata
 800225e:	490d      	ldr	r1, [pc, #52]	@ (8002294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002260:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <LoopForever+0xe>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002274:	4c0a      	ldr	r4, [pc, #40]	@ (80022a0 <LoopForever+0x16>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002282:	f005 fefd 	bl	8008080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002286:	f7ff fcd7 	bl	8001c38 <main>

0800228a <LoopForever>:

LoopForever:
    b LoopForever
 800228a:	e7fe      	b.n	800228a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800228c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002298:	08011db8 	.word	0x08011db8
  ldr r2, =_sbss
 800229c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80022a0:	2000b00c 	.word	0x2000b00c

080022a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_2_IRQHandler>

080022a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f93d 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b6:	200f      	movs	r0, #15
 80022b8:	f000 f80e 	bl	80022d8 <HAL_InitTick>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	e001      	b.n	80022cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c8:	f7ff fdfc 	bl	8001ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022cc:	79fb      	ldrb	r3, [r7, #7]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_InitTick+0x6c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022ec:	4b16      	ldr	r3, [pc, #88]	@ (8002348 <HAL_InitTick+0x70>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <HAL_InitTick+0x6c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f949 	bl	800259a <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d809      	bhi.n	8002328 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f000 f913 	bl	8002546 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_InitTick+0x74>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e007      	b.n	8002338 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e004      	b.n	8002338 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e001      	b.n	8002338 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002338:	7bfb      	ldrb	r3, [r7, #15]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000208 	.word	0x20000208
 8002348:	20000200 	.word	0x20000200
 800234c:	20000204 	.word	0x20000204

08002350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_IncTick+0x20>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_IncTick+0x24>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <HAL_IncTick+0x24>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000208 	.word	0x20000208
 8002374:	2000aec0 	.word	0x2000aec0

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	@ (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000aec0 	.word	0x2000aec0

08002390 <__NVIC_SetPriorityGrouping>:
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	@ (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	@ (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	@ (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	@ 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Config>:
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff8e 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	@ (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff29 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff3e 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff8e 	bl	8002484 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5d 	bl	8002430 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff31 	bl	80023f4 <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e098      	b.n	80026f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002704 <HAL_DMA_Init+0x150>)
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d80f      	bhi.n	80025f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002708 <HAL_DMA_Init+0x154>)
 80025da:	4413      	add	r3, r2
 80025dc:	4a4b      	ldr	r2, [pc, #300]	@ (800270c <HAL_DMA_Init+0x158>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	009a      	lsls	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a48      	ldr	r2, [pc, #288]	@ (8002710 <HAL_DMA_Init+0x15c>)
 80025ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80025f0:	e00e      	b.n	8002610 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <HAL_DMA_Init+0x160>)
 80025fa:	4413      	add	r3, r2
 80025fc:	4a43      	ldr	r2, [pc, #268]	@ (800270c <HAL_DMA_Init+0x158>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	009a      	lsls	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a42      	ldr	r2, [pc, #264]	@ (8002718 <HAL_DMA_Init+0x164>)
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800262a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800266a:	d039      	beq.n	80026e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	4a27      	ldr	r2, [pc, #156]	@ (8002710 <HAL_DMA_Init+0x15c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d11a      	bne.n	80026ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002676:	4b29      	ldr	r3, [pc, #164]	@ (800271c <HAL_DMA_Init+0x168>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	f003 031c 	and.w	r3, r3, #28
 8002682:	210f      	movs	r1, #15
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	4924      	ldr	r1, [pc, #144]	@ (800271c <HAL_DMA_Init+0x168>)
 800268c:	4013      	ands	r3, r2
 800268e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002690:	4b22      	ldr	r3, [pc, #136]	@ (800271c <HAL_DMA_Init+0x168>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	f003 031c 	and.w	r3, r3, #28
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	491d      	ldr	r1, [pc, #116]	@ (800271c <HAL_DMA_Init+0x168>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
 80026aa:	e019      	b.n	80026e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <HAL_DMA_Init+0x16c>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b4:	f003 031c 	and.w	r3, r3, #28
 80026b8:	210f      	movs	r1, #15
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	4917      	ldr	r1, [pc, #92]	@ (8002720 <HAL_DMA_Init+0x16c>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026c6:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_DMA_Init+0x16c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f003 031c 	and.w	r3, r3, #28
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	4911      	ldr	r1, [pc, #68]	@ (8002720 <HAL_DMA_Init+0x16c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40020407 	.word	0x40020407
 8002708:	bffdfff8 	.word	0xbffdfff8
 800270c:	cccccccd 	.word	0xcccccccd
 8002710:	40020000 	.word	0x40020000
 8002714:	bffdfbf8 	.word	0xbffdfbf8
 8002718:	40020400 	.word	0x40020400
 800271c:	400200a8 	.word	0x400200a8
 8002720:	400204a8 	.word	0x400204a8

08002724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Start_IT+0x20>
 8002740:	2302      	movs	r3, #2
 8002742:	e04b      	b.n	80027dc <HAL_DMA_Start_IT+0xb8>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d13a      	bne.n	80027ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f95f 	bl	8002a40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 020e 	orr.w	r2, r2, #14
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e00f      	b.n	80027bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0204 	bic.w	r2, r2, #4
 80027aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 020a 	orr.w	r2, r2, #10
 80027ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e005      	b.n	80027da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027da:	7dfb      	ldrb	r3, [r7, #23]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2204      	movs	r2, #4
 8002800:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e022      	b.n	8002854 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 020e 	bic.w	r2, r2, #14
 800281c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f003 021c 	and.w	r2, r3, #28
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d005      	beq.n	8002884 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e029      	b.n	80028d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 020e 	bic.w	r2, r2, #14
 8002892:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a8:	f003 021c 	and.w	r2, r3, #28
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
    }
  }
  return status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fe:	f003 031c 	and.w	r3, r3, #28
 8002902:	2204      	movs	r2, #4
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d026      	beq.n	800295c <HAL_DMA_IRQHandler+0x7a>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d021      	beq.n	800295c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d107      	bne.n	8002936 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0204 	bic.w	r2, r2, #4
 8002934:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f003 021c 	and.w	r2, r3, #28
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	2104      	movs	r1, #4
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	2b00      	cmp	r3, #0
 8002950:	d071      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800295a:	e06c      	b.n	8002a36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	f003 031c 	and.w	r3, r3, #28
 8002964:	2202      	movs	r2, #2
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d02e      	beq.n	80029ce <HAL_DMA_IRQHandler+0xec>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d029      	beq.n	80029ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020a 	bic.w	r2, r2, #10
 8002996:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a4:	f003 021c 	and.w	r2, r3, #28
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	2102      	movs	r1, #2
 80029ae:	fa01 f202 	lsl.w	r2, r1, r2
 80029b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d038      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80029cc:	e033      	b.n	8002a36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f003 031c 	and.w	r3, r3, #28
 80029d6:	2208      	movs	r2, #8
 80029d8:	409a      	lsls	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02a      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x156>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d025      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 020e 	bic.w	r2, r2, #14
 80029fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	f003 021c 	and.w	r2, r3, #28
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
}
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f003 021c 	and.w	r2, r3, #28
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d108      	bne.n	8002a84 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a82:	e007      	b.n	8002a94 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aae:	e17f      	b.n	8002db0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8171 	beq.w	8002daa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d005      	beq.n	8002ae0 <HAL_GPIO_Init+0x40>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d130      	bne.n	8002b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b16:	2201      	movs	r2, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0201 	and.w	r2, r3, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d118      	bne.n	8002b80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b54:	2201      	movs	r2, #1
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	f003 0201 	and.w	r2, r3, #1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d017      	beq.n	8002bbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d123      	bne.n	8002c10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	08da      	lsrs	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3208      	adds	r2, #8
 8002bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80ac 	beq.w	8002daa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd0 <HAL_GPIO_Init+0x330>)
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd0 <HAL_GPIO_Init+0x330>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd0 <HAL_GPIO_Init+0x330>)
 8002c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd4 <HAL_GPIO_Init+0x334>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c94:	d025      	beq.n	8002ce2 <HAL_GPIO_Init+0x242>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4f      	ldr	r2, [pc, #316]	@ (8002dd8 <HAL_GPIO_Init+0x338>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01f      	beq.n	8002cde <HAL_GPIO_Init+0x23e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4e      	ldr	r2, [pc, #312]	@ (8002ddc <HAL_GPIO_Init+0x33c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x23a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8002de0 <HAL_GPIO_Init+0x340>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x236>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	@ (8002de4 <HAL_GPIO_Init+0x344>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x232>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002de8 <HAL_GPIO_Init+0x348>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x22e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002dec <HAL_GPIO_Init+0x34c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x22a>
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	e00c      	b.n	8002ce4 <HAL_GPIO_Init+0x244>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00a      	b.n	8002ce4 <HAL_GPIO_Init+0x244>
 8002cce:	2305      	movs	r3, #5
 8002cd0:	e008      	b.n	8002ce4 <HAL_GPIO_Init+0x244>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x244>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e004      	b.n	8002ce4 <HAL_GPIO_Init+0x244>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x244>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_GPIO_Init+0x244>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	f002 0203 	and.w	r2, r2, #3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4093      	lsls	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf4:	4937      	ldr	r1, [pc, #220]	@ (8002dd4 <HAL_GPIO_Init+0x334>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d02:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d26:	4a32      	ldr	r2, [pc, #200]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d2c:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d50:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d56:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002da4:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <HAL_GPIO_Init+0x350>)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3301      	adds	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f47f ae78 	bne.w	8002ab0 <HAL_GPIO_Init+0x10>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	48000400 	.word	0x48000400
 8002ddc:	48000800 	.word	0x48000800
 8002de0:	48000c00 	.word	0x48000c00
 8002de4:	48001000 	.word	0x48001000
 8002de8:	48001400 	.word	0x48001400
 8002dec:	48001800 	.word	0x48001800
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e10:	e002      	b.n	8002e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e28:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40007000 	.word	0x40007000

08002e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e4e:	d130      	bne.n	8002eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e50:	4b23      	ldr	r3, [pc, #140]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e5c:	d038      	beq.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2232      	movs	r2, #50	@ 0x32
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0c9b      	lsrs	r3, r3, #18
 8002e80:	3301      	adds	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e84:	e002      	b.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e98:	d102      	bne.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f2      	bne.n	8002e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eac:	d110      	bne.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e00f      	b.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ebe:	d007      	beq.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ec0:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ec8:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	20000200 	.word	0x20000200
 8002ee8:	431bde83 	.word	0x431bde83

08002eec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e3ca      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efe:	4b97      	ldr	r3, [pc, #604]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f08:	4b94      	ldr	r3, [pc, #592]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80e4 	beq.w	80030e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_RCC_OscConfig+0x4a>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	f040 808b 	bne.w	8003044 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f040 8087 	bne.w	8003044 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f36:	4b89      	ldr	r3, [pc, #548]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_RCC_OscConfig+0x62>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e3a2      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	4b82      	ldr	r3, [pc, #520]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_RCC_OscConfig+0x7c>
 8002f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_OscConfig+0x88>
 8002f68:	4b7c      	ldr	r3, [pc, #496]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d223      	bcs.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fd55 	bl	8003a2c <RCC_SetFlashLatencyFromMSIRange>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e383      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8c:	4b73      	ldr	r3, [pc, #460]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a72      	ldr	r2, [pc, #456]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f92:	f043 0308 	orr.w	r3, r3, #8
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b70      	ldr	r3, [pc, #448]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	496d      	ldr	r1, [pc, #436]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002faa:	4b6c      	ldr	r3, [pc, #432]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	4968      	ldr	r1, [pc, #416]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
 8002fbe:	e025      	b.n	800300c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc0:	4b66      	ldr	r3, [pc, #408]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a65      	ldr	r2, [pc, #404]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b63      	ldr	r3, [pc, #396]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4960      	ldr	r1, [pc, #384]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fde:	4b5f      	ldr	r3, [pc, #380]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	495b      	ldr	r1, [pc, #364]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fd15 	bl	8003a2c <RCC_SetFlashLatencyFromMSIRange>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e343      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800300c:	f000 fc4a 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b52      	ldr	r3, [pc, #328]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	4950      	ldr	r1, [pc, #320]	@ (8003160 <HAL_RCC_OscConfig+0x274>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
 8003028:	4a4e      	ldr	r2, [pc, #312]	@ (8003164 <HAL_RCC_OscConfig+0x278>)
 800302a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800302c:	4b4e      	ldr	r3, [pc, #312]	@ (8003168 <HAL_RCC_OscConfig+0x27c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f951 	bl	80022d8 <HAL_InitTick>
 8003036:	4603      	mov	r3, r0
 8003038:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d052      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	e327      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d032      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800304c:	4b43      	ldr	r3, [pc, #268]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a42      	ldr	r2, [pc, #264]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003058:	f7ff f98e 	bl	8002378 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003060:	f7ff f98a 	bl	8002378 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e310      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003072:	4b3a      	ldr	r3, [pc, #232]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800307e:	4b37      	ldr	r3, [pc, #220]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a36      	ldr	r2, [pc, #216]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4931      	ldr	r1, [pc, #196]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800309c:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	492c      	ldr	r1, [pc, #176]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
 80030b0:	e01a      	b.n	80030e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030b2:	4b2a      	ldr	r3, [pc, #168]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a29      	ldr	r2, [pc, #164]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030be:	f7ff f95b 	bl	8002378 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c6:	f7ff f957 	bl	8002378 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e2dd      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030d8:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x1da>
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d074      	beq.n	80031de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x21a>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d10e      	bne.n	800311e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d064      	beq.n	80031dc <HAL_RCC_OscConfig+0x2f0>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d160      	bne.n	80031dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e2ba      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x24a>
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e026      	b.n	8003184 <HAL_RCC_OscConfig+0x298>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800313e:	d115      	bne.n	800316c <HAL_RCC_OscConfig+0x280>
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a05      	ldr	r2, [pc, #20]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b03      	ldr	r3, [pc, #12]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a02      	ldr	r2, [pc, #8]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e014      	b.n	8003184 <HAL_RCC_OscConfig+0x298>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	08011d2c 	.word	0x08011d2c
 8003164:	20000200 	.word	0x20000200
 8003168:	20000204 	.word	0x20000204
 800316c:	4ba0      	ldr	r3, [pc, #640]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a9f      	ldr	r2, [pc, #636]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b9d      	ldr	r3, [pc, #628]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a9c      	ldr	r2, [pc, #624]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7ff f8f4 	bl	8002378 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7ff f8f0 	bl	8002378 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	@ 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e276      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a6:	4b92      	ldr	r3, [pc, #584]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x2a8>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7ff f8e0 	bl	8002378 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7ff f8dc 	bl	8002378 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e262      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ce:	4b88      	ldr	r3, [pc, #544]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x2d0>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d060      	beq.n	80032ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_OscConfig+0x310>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d119      	bne.n	800322a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d116      	bne.n	800322a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031fc:	4b7c      	ldr	r3, [pc, #496]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_OscConfig+0x328>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e23f      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003214:	4b76      	ldr	r3, [pc, #472]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	4973      	ldr	r1, [pc, #460]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003228:	e040      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d023      	beq.n	800327a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003232:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6e      	ldr	r2, [pc, #440]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7ff f89b 	bl	8002378 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003246:	f7ff f897 	bl	8002378 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e21d      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003258:	4b65      	ldr	r3, [pc, #404]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b62      	ldr	r3, [pc, #392]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	495f      	ldr	r1, [pc, #380]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	e018      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7ff f877 	bl	8002378 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7ff f873 	bl	8002378 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e1f9      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a0:	4b53      	ldr	r3, [pc, #332]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d03c      	beq.n	8003332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01c      	beq.n	80032fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c0:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c6:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7ff f852 	bl	8002378 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7ff f84e 	bl	8002378 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1d4      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ea:	4b41      	ldr	r3, [pc, #260]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ef      	beq.n	80032d8 <HAL_RCC_OscConfig+0x3ec>
 80032f8:	e01b      	b.n	8003332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fa:	4b3d      	ldr	r3, [pc, #244]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003300:	4a3b      	ldr	r2, [pc, #236]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7ff f835 	bl	8002378 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003312:	f7ff f831 	bl	8002378 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1b7      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003324:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ef      	bne.n	8003312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a6 	beq.w	800348c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003344:	4b2a      	ldr	r3, [pc, #168]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4b27      	ldr	r3, [pc, #156]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	4a26      	ldr	r2, [pc, #152]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	@ 0x58
 800335c:	4b24      	ldr	r3, [pc, #144]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336c:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d118      	bne.n	80033aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003378:	4b1e      	ldr	r3, [pc, #120]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003384:	f7fe fff8 	bl	8002378 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fe fff4 	bl	8002378 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e17a      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <HAL_RCC_OscConfig+0x4d8>
 80033b2:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033c2:	e029      	b.n	8003418 <HAL_RCC_OscConfig+0x52c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d115      	bne.n	80033f8 <HAL_RCC_OscConfig+0x50c>
 80033cc:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d2:	4a07      	ldr	r2, [pc, #28]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033dc:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e2:	4a03      	ldr	r2, [pc, #12]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ec:	e014      	b.n	8003418 <HAL_RCC_OscConfig+0x52c>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	4b9c      	ldr	r3, [pc, #624]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	4a9b      	ldr	r2, [pc, #620]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003408:	4b98      	ldr	r3, [pc, #608]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	4a97      	ldr	r2, [pc, #604]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d016      	beq.n	800344e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fe ffaa 	bl	8002378 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fe ffa6 	bl	8002378 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e12a      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343e:	4b8b      	ldr	r3, [pc, #556]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ed      	beq.n	8003428 <HAL_RCC_OscConfig+0x53c>
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe ff93 	bl	8002378 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe ff8f 	bl	8002378 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e113      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800346c:	4b7f      	ldr	r3, [pc, #508]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ed      	bne.n	8003456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003480:	4b7a      	ldr	r3, [pc, #488]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	4a79      	ldr	r2, [pc, #484]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80fe 	beq.w	8003692 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	2b02      	cmp	r3, #2
 800349c:	f040 80d0 	bne.w	8003640 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034a0:	4b72      	ldr	r3, [pc, #456]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d130      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	3b01      	subs	r3, #1
 80034c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d127      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d11f      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034e0:	2a07      	cmp	r2, #7
 80034e2:	bf14      	ite	ne
 80034e4:	2201      	movne	r2, #1
 80034e6:	2200      	moveq	r2, #0
 80034e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d113      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	3b01      	subs	r3, #1
 80034fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d109      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	3b01      	subs	r3, #1
 8003510:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d06e      	beq.n	80035f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d069      	beq.n	80035f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003528:	4b50      	ldr	r3, [pc, #320]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0ad      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003538:	4b4c      	ldr	r3, [pc, #304]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4b      	ldr	r2, [pc, #300]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800353e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003544:	f7fe ff18 	bl	8002378 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe ff14 	bl	8002378 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e09a      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355e:	4b43      	ldr	r3, [pc, #268]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356a:	4b40      	ldr	r3, [pc, #256]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	4b40      	ldr	r3, [pc, #256]	@ (8003670 <HAL_RCC_OscConfig+0x784>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800357a:	3a01      	subs	r2, #1
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003584:	0212      	lsls	r2, r2, #8
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800358c:	0852      	lsrs	r2, r2, #1
 800358e:	3a01      	subs	r2, #1
 8003590:	0552      	lsls	r2, r2, #21
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003598:	0852      	lsrs	r2, r2, #1
 800359a:	3a01      	subs	r2, #1
 800359c:	0652      	lsls	r2, r2, #25
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035a4:	0912      	lsrs	r2, r2, #4
 80035a6:	0452      	lsls	r2, r2, #17
 80035a8:	430a      	orrs	r2, r1
 80035aa:	4930      	ldr	r1, [pc, #192]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035b0:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c8:	f7fe fed6 	bl	8002378 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fed2 	bl	8002378 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e058      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	4b22      	ldr	r3, [pc, #136]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ee:	e050      	b.n	8003692 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e04f      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f4:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d148      	bne.n	8003692 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003600:	4b1a      	ldr	r3, [pc, #104]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a19      	ldr	r2, [pc, #100]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800360c:	4b17      	ldr	r3, [pc, #92]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003616:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003618:	f7fe feae 	bl	8002378 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fe feaa 	bl	8002378 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e030      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003632:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x734>
 800363e:	e028      	b.n	8003692 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d023      	beq.n	800368e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b09      	ldr	r3, [pc, #36]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a08      	ldr	r2, [pc, #32]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800364c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fe fe91 	bl	8002378 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	e00c      	b.n	8003674 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe fe8d 	bl	8002378 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d905      	bls.n	8003674 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e013      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800366c:	40021000 	.word	0x40021000
 8003670:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003674:	4b09      	ldr	r3, [pc, #36]	@ (800369c <HAL_RCC_OscConfig+0x7b0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ec      	bne.n	800365a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_OscConfig+0x7b0>)
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4905      	ldr	r1, [pc, #20]	@ (800369c <HAL_RCC_OscConfig+0x7b0>)
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCC_OscConfig+0x7b4>)
 8003688:	4013      	ands	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
 800368c:	e001      	b.n	8003692 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	feeefffc 	.word	0xfeeefffc

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0e7      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b75      	ldr	r3, [pc, #468]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d910      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b72      	ldr	r3, [pc, #456]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 0207 	bic.w	r2, r3, #7
 80036ce:	4970      	ldr	r1, [pc, #448]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0cf      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b66      	ldr	r3, [pc, #408]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003700:	429a      	cmp	r2, r3
 8003702:	d908      	bls.n	8003716 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b63      	ldr	r3, [pc, #396]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4960      	ldr	r1, [pc, #384]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04c      	beq.n	80037bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	4b5a      	ldr	r3, [pc, #360]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d121      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0a6      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003742:	4b54      	ldr	r3, [pc, #336]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d115      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e09a      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800375a:	4b4e      	ldr	r3, [pc, #312]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e08e      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376a:	4b4a      	ldr	r3, [pc, #296]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e086      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800377a:	4b46      	ldr	r3, [pc, #280]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4943      	ldr	r1, [pc, #268]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378c:	f7fe fdf4 	bl	8002378 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003794:	f7fe fdf0 	bl	8002378 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e06e      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4b31      	ldr	r3, [pc, #196]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d208      	bcs.n	80037ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	492b      	ldr	r1, [pc, #172]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ea:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d210      	bcs.n	800381a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f8:	4b25      	ldr	r3, [pc, #148]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 0207 	bic.w	r2, r3, #7
 8003800:	4923      	ldr	r1, [pc, #140]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003808:	4b21      	ldr	r3, [pc, #132]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e036      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003826:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	4918      	ldr	r1, [pc, #96]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003844:	4b13      	ldr	r3, [pc, #76]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4910      	ldr	r1, [pc, #64]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	4313      	orrs	r3, r2
 8003856:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003858:	f000 f824 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	490b      	ldr	r1, [pc, #44]	@ (8003898 <HAL_RCC_ClockConfig+0x1f4>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	4a09      	ldr	r2, [pc, #36]	@ (800389c <HAL_RCC_ClockConfig+0x1f8>)
 8003876:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_ClockConfig+0x1fc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fd2b 	bl	80022d8 <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	72fb      	strb	r3, [r7, #11]

  return status;
 8003886:	7afb      	ldrb	r3, [r7, #11]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40022000 	.word	0x40022000
 8003894:	40021000 	.word	0x40021000
 8003898:	08011d2c 	.word	0x08011d2c
 800389c:	20000200 	.word	0x20000200
 80038a0:	20000204 	.word	0x20000204

080038a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	@ 0x24
 80038a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b2:	4b3e      	ldr	r3, [pc, #248]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038bc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x34>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d121      	bne.n	8003916 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d11e      	bne.n	8003916 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038d8:	4b34      	ldr	r3, [pc, #208]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038e4:	4b31      	ldr	r3, [pc, #196]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e005      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038f4:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003900:	4a2b      	ldr	r2, [pc, #172]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10d      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003914:	e00a      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d102      	bne.n	8003922 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800391c:	4b25      	ldr	r3, [pc, #148]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e004      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d101      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003928:	4b23      	ldr	r3, [pc, #140]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800392a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d134      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d003      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0xa6>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d003      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0xac>
 8003948:	e005      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800394a:	4b1a      	ldr	r3, [pc, #104]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800394c:	617b      	str	r3, [r7, #20]
      break;
 800394e:	e005      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003952:	617b      	str	r3, [r7, #20]
      break;
 8003954:	e002      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	617b      	str	r3, [r7, #20]
      break;
 800395a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	3301      	adds	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	fb03 f202 	mul.w	r2, r3, r2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	0e5b      	lsrs	r3, r3, #25
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	3301      	adds	r3, #1
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800399c:	69bb      	ldr	r3, [r7, #24]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3724      	adds	r7, #36	@ 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08011d44 	.word	0x08011d44
 80039b4:	00f42400 	.word	0x00f42400
 80039b8:	007a1200 	.word	0x007a1200

080039bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b03      	ldr	r3, [pc, #12]	@ (80039d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000200 	.word	0x20000200

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039d8:	f7ff fff0 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4904      	ldr	r1, [pc, #16]	@ (80039fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08011d3c 	.word	0x08011d3c

08003a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a04:	f7ff ffda 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0adb      	lsrs	r3, r3, #11
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4904      	ldr	r1, [pc, #16]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08011d3c 	.word	0x08011d3c

08003a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a44:	f7ff f9ee 	bl	8002e24 <HAL_PWREx_GetVoltageRange>
 8003a48:	6178      	str	r0, [r7, #20]
 8003a4a:	e014      	b.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	4a24      	ldr	r2, [pc, #144]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a58:	4b22      	ldr	r3, [pc, #136]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a64:	f7ff f9de 	bl	8002e24 <HAL_PWREx_GetVoltageRange>
 8003a68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7c:	d10b      	bne.n	8003a96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b80      	cmp	r3, #128	@ 0x80
 8003a82:	d919      	bls.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a88:	d902      	bls.n	8003a90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	e013      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a90:	2301      	movs	r3, #1
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	e010      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b80      	cmp	r3, #128	@ 0x80
 8003a9a:	d902      	bls.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	e00a      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b80      	cmp	r3, #128	@ 0x80
 8003aa6:	d102      	bne.n	8003aae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	e004      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b70      	cmp	r3, #112	@ 0x70
 8003ab2:	d101      	bne.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 0207 	bic.w	r2, r3, #7
 8003ac0:	4909      	ldr	r1, [pc, #36]	@ (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ac8:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d001      	beq.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40022000 	.word	0x40022000

08003aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af4:	2300      	movs	r3, #0
 8003af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003af8:	2300      	movs	r3, #0
 8003afa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d041      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b10:	d02a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b16:	d824      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b1c:	d008      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b22:	d81e      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b2e:	e018      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b30:	4b86      	ldr	r3, [pc, #536]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a85      	ldr	r2, [pc, #532]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b3c:	e015      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fabb 	bl	80040c0 <RCCEx_PLLSAI1_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b4e:	e00c      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3320      	adds	r3, #32
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fba6 	bl	80042a8 <RCCEx_PLLSAI2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b60:	e003      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	74fb      	strb	r3, [r7, #19]
      break;
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b70:	4b76      	ldr	r3, [pc, #472]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b7e:	4973      	ldr	r1, [pc, #460]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b86:	e001      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d041      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ba0:	d02a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ba2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bb2:	d81e      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bbe:	e018      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bc0:	4b62      	ldr	r3, [pc, #392]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a61      	ldr	r2, [pc, #388]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bcc:	e015      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fa73 	bl	80040c0 <RCCEx_PLLSAI1_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bde:	e00c      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3320      	adds	r3, #32
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fb5e 	bl	80042a8 <RCCEx_PLLSAI2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c00:	4b52      	ldr	r3, [pc, #328]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c0e:	494f      	ldr	r1, [pc, #316]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c16:	e001      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a0 	beq.w	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c2e:	4b47      	ldr	r3, [pc, #284]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c48:	4a40      	ldr	r2, [pc, #256]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c50:	4b3e      	ldr	r3, [pc, #248]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c60:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3a      	ldr	r2, [pc, #232]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c6c:	f7fe fb84 	bl	8002378 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c72:	e009      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c74:	f7fe fb80 	bl	8002378 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d902      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	74fb      	strb	r3, [r7, #19]
        break;
 8003c86:	e005      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c88:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ef      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d15c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01f      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d019      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cc4:	4b21      	ldr	r3, [pc, #132]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	4a20      	ldr	r2, [pc, #128]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ce4:	4a19      	ldr	r2, [pc, #100]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fe fb3f 	bl	8002378 <HAL_GetTick>
 8003cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fe fb3b 	bl	8002378 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d902      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	74fb      	strb	r3, [r7, #19]
            break;
 8003d14:	e006      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ec      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d2a:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3a:	4904      	ldr	r1, [pc, #16]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d42:	e009      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
 8003d48:	e006      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d58:	7c7b      	ldrb	r3, [r7, #17]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	4a9d      	ldr	r2, [pc, #628]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d76:	4b98      	ldr	r3, [pc, #608]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7c:	f023 0203 	bic.w	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	4994      	ldr	r1, [pc, #592]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d98:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	f023 020c 	bic.w	r2, r3, #12
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	498c      	ldr	r1, [pc, #560]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dba:	4b87      	ldr	r3, [pc, #540]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	4983      	ldr	r1, [pc, #524]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	497b      	ldr	r1, [pc, #492]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dfe:	4b76      	ldr	r3, [pc, #472]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0c:	4972      	ldr	r1, [pc, #456]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e20:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	496a      	ldr	r1, [pc, #424]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e42:	4b65      	ldr	r3, [pc, #404]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	4961      	ldr	r1, [pc, #388]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e64:	4b5c      	ldr	r3, [pc, #368]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	4959      	ldr	r1, [pc, #356]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e86:	4b54      	ldr	r3, [pc, #336]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e94:	4950      	ldr	r1, [pc, #320]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb6:	4948      	ldr	r1, [pc, #288]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eca:	4b43      	ldr	r3, [pc, #268]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	493f      	ldr	r1, [pc, #252]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d028      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eec:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003efa:	4937      	ldr	r1, [pc, #220]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b32      	ldr	r3, [pc, #200]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a31      	ldr	r2, [pc, #196]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
 8003f18:	e011      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f22:	d10c      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f8c8 	bl	80040c0 <RCCEx_PLLSAI1_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d028      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f4a:	4b23      	ldr	r3, [pc, #140]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f58:	491f      	ldr	r1, [pc, #124]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f68:	d106      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f74:	60d3      	str	r3, [r2, #12]
 8003f76:	e011      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f899 	bl	80040c0 <RCCEx_PLLSAI1_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02b      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb6:	4908      	ldr	r1, [pc, #32]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fc6:	d109      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a02      	ldr	r2, [pc, #8]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd2:	60d3      	str	r3, [r2, #12]
 8003fd4:	e014      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f867 	bl	80040c0 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401a:	4928      	ldr	r1, [pc, #160]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800402a:	d10d      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f844 	bl	80040c0 <RCCEx_PLLSAI1_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d014      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	74bb      	strb	r3, [r7, #18]
 8004046:	e011      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800404c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004050:	d10c      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3320      	adds	r3, #32
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f925 	bl	80042a8 <RCCEx_PLLSAI2_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004078:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004086:	490d      	ldr	r1, [pc, #52]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040aa:	4904      	ldr	r1, [pc, #16]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000

080040c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ce:	4b75      	ldr	r3, [pc, #468]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d018      	beq.n	800410c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040da:	4b72      	ldr	r3, [pc, #456]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0203 	and.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10d      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
       ||
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040f2:	4b6c      	ldr	r3, [pc, #432]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
       ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d047      	beq.n	8004196 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e044      	b.n	8004196 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d018      	beq.n	8004146 <RCCEx_PLLSAI1_Config+0x86>
 8004114:	2b03      	cmp	r3, #3
 8004116:	d825      	bhi.n	8004164 <RCCEx_PLLSAI1_Config+0xa4>
 8004118:	2b01      	cmp	r3, #1
 800411a:	d002      	beq.n	8004122 <RCCEx_PLLSAI1_Config+0x62>
 800411c:	2b02      	cmp	r3, #2
 800411e:	d009      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x74>
 8004120:	e020      	b.n	8004164 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004122:	4b60      	ldr	r3, [pc, #384]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11d      	bne.n	800416a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004132:	e01a      	b.n	800416a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004134:	4b5b      	ldr	r3, [pc, #364]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d116      	bne.n	800416e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004144:	e013      	b.n	800416e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004146:	4b57      	ldr	r3, [pc, #348]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004152:	4b54      	ldr	r3, [pc, #336]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004162:	e006      	b.n	8004172 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e004      	b.n	8004174 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004172:	bf00      	nop
    }

    if(status == HAL_OK)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800417a:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	3b01      	subs	r3, #1
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	430b      	orrs	r3, r1
 8004190:	4944      	ldr	r1, [pc, #272]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d17d      	bne.n	8004298 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800419c:	4b41      	ldr	r3, [pc, #260]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a40      	ldr	r2, [pc, #256]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fe f8e6 	bl	8002378 <HAL_GetTick>
 80041ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ae:	e009      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041b0:	f7fe f8e2 	bl	8002378 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d902      	bls.n	80041c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	73fb      	strb	r3, [r7, #15]
        break;
 80041c2:	e005      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041c4:	4b37      	ldr	r3, [pc, #220]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ef      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d160      	bne.n	8004298 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d111      	bne.n	8004200 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041dc:	4b31      	ldr	r3, [pc, #196]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6892      	ldr	r2, [r2, #8]
 80041ec:	0211      	lsls	r1, r2, #8
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68d2      	ldr	r2, [r2, #12]
 80041f2:	0912      	lsrs	r2, r2, #4
 80041f4:	0452      	lsls	r2, r2, #17
 80041f6:	430a      	orrs	r2, r1
 80041f8:	492a      	ldr	r1, [pc, #168]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	610b      	str	r3, [r1, #16]
 80041fe:	e027      	b.n	8004250 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d112      	bne.n	800422c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004206:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800420e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6892      	ldr	r2, [r2, #8]
 8004216:	0211      	lsls	r1, r2, #8
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6912      	ldr	r2, [r2, #16]
 800421c:	0852      	lsrs	r2, r2, #1
 800421e:	3a01      	subs	r2, #1
 8004220:	0552      	lsls	r2, r2, #21
 8004222:	430a      	orrs	r2, r1
 8004224:	491f      	ldr	r1, [pc, #124]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]
 800422a:	e011      	b.n	8004250 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800422c:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004234:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6892      	ldr	r2, [r2, #8]
 800423c:	0211      	lsls	r1, r2, #8
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6952      	ldr	r2, [r2, #20]
 8004242:	0852      	lsrs	r2, r2, #1
 8004244:	3a01      	subs	r2, #1
 8004246:	0652      	lsls	r2, r2, #25
 8004248:	430a      	orrs	r2, r1
 800424a:	4916      	ldr	r1, [pc, #88]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004250:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800425a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fe f88c 	bl	8002378 <HAL_GetTick>
 8004260:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004262:	e009      	b.n	8004278 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004264:	f7fe f888 	bl	8002378 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d902      	bls.n	8004278 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	73fb      	strb	r3, [r7, #15]
          break;
 8004276:	e005      	b.n	8004284 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004278:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0ef      	beq.n	8004264 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	4904      	ldr	r1, [pc, #16]	@ (80042a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000

080042a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d018      	beq.n	80042f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042c2:	4b67      	ldr	r3, [pc, #412]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0203 	and.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d10d      	bne.n	80042ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
       ||
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042da:	4b61      	ldr	r3, [pc, #388]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	091b      	lsrs	r3, r3, #4
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
       ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d047      	beq.n	800437e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	e044      	b.n	800437e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d018      	beq.n	800432e <RCCEx_PLLSAI2_Config+0x86>
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d825      	bhi.n	800434c <RCCEx_PLLSAI2_Config+0xa4>
 8004300:	2b01      	cmp	r3, #1
 8004302:	d002      	beq.n	800430a <RCCEx_PLLSAI2_Config+0x62>
 8004304:	2b02      	cmp	r3, #2
 8004306:	d009      	beq.n	800431c <RCCEx_PLLSAI2_Config+0x74>
 8004308:	e020      	b.n	800434c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800430a:	4b55      	ldr	r3, [pc, #340]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d11d      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800431a:	e01a      	b.n	8004352 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800431c:	4b50      	ldr	r3, [pc, #320]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800432c:	e013      	b.n	8004356 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800432e:	4b4c      	ldr	r3, [pc, #304]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800433a:	4b49      	ldr	r3, [pc, #292]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800434a:	e006      	b.n	800435a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      break;
 8004350:	e004      	b.n	800435c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800435a:	bf00      	nop
    }

    if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10d      	bne.n	800437e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004362:	4b3f      	ldr	r3, [pc, #252]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	430b      	orrs	r3, r1
 8004378:	4939      	ldr	r1, [pc, #228]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d167      	bne.n	8004454 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004384:	4b36      	ldr	r3, [pc, #216]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a35      	ldr	r2, [pc, #212]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800438e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004390:	f7fd fff2 	bl	8002378 <HAL_GetTick>
 8004394:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004396:	e009      	b.n	80043ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004398:	f7fd ffee 	bl	8002378 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d902      	bls.n	80043ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	73fb      	strb	r3, [r7, #15]
        break;
 80043aa:	e005      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ef      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d14a      	bne.n	8004454 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d111      	bne.n	80043e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043c4:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6892      	ldr	r2, [r2, #8]
 80043d4:	0211      	lsls	r1, r2, #8
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68d2      	ldr	r2, [r2, #12]
 80043da:	0912      	lsrs	r2, r2, #4
 80043dc:	0452      	lsls	r2, r2, #17
 80043de:	430a      	orrs	r2, r1
 80043e0:	491f      	ldr	r1, [pc, #124]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	614b      	str	r3, [r1, #20]
 80043e6:	e011      	b.n	800440c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6892      	ldr	r2, [r2, #8]
 80043f8:	0211      	lsls	r1, r2, #8
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6912      	ldr	r2, [r2, #16]
 80043fe:	0852      	lsrs	r2, r2, #1
 8004400:	3a01      	subs	r2, #1
 8004402:	0652      	lsls	r2, r2, #25
 8004404:	430a      	orrs	r2, r1
 8004406:	4916      	ldr	r1, [pc, #88]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	4313      	orrs	r3, r2
 800440a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800440c:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a13      	ldr	r2, [pc, #76]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004416:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fd ffae 	bl	8002378 <HAL_GetTick>
 800441c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800441e:	e009      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004420:	f7fd ffaa 	bl	8002378 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d902      	bls.n	8004434 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	73fb      	strb	r3, [r7, #15]
          break;
 8004432:	e005      	b.n	8004440 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004434:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0ef      	beq.n	8004420 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004446:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4904      	ldr	r1, [pc, #16]	@ (8004460 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004450:	4313      	orrs	r3, r2
 8004452:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e095      	b.n	80045a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004486:	d009      	beq.n	800449c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	61da      	str	r2, [r3, #28]
 800448e:	e005      	b.n	800449c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fc6c 	bl	8001d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044dc:	d902      	bls.n	80044e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e002      	b.n	80044ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044f2:	d007      	beq.n	8004504 <HAL_SPI_Init+0xa0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004546:	ea42 0103 	orr.w	r1, r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	f003 0204 	and.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004580:	ea42 0103 	orr.w	r1, r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b088      	sub	sp, #32
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ba:	f7fd fedd 	bl	8002378 <HAL_GetTick>
 80045be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
 80045d2:	e15c      	b.n	800488e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0x36>
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e154      	b.n	800488e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_SPI_Transmit+0x48>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e14d      	b.n	800488e <HAL_SPI_Transmit+0x2e4>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2203      	movs	r2, #3
 80045fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004644:	d10f      	bne.n	8004666 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d007      	beq.n	8004684 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800468c:	d952      	bls.n	8004734 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_Transmit+0xf2>
 8004696:	8b7b      	ldrh	r3, [r7, #26]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d145      	bne.n	8004728 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046c0:	e032      	b.n	8004728 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d112      	bne.n	80046f6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046f4:	e018      	b.n	8004728 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f6:	f7fd fe3f 	bl	8002378 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d803      	bhi.n	800470e <HAL_SPI_Transmit+0x164>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d102      	bne.n	8004714 <HAL_SPI_Transmit+0x16a>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0b2      	b.n	800488e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1c7      	bne.n	80046c2 <HAL_SPI_Transmit+0x118>
 8004732:	e083      	b.n	800483c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_SPI_Transmit+0x198>
 800473c:	8b7b      	ldrh	r3, [r7, #26]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d177      	bne.n	8004832 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d912      	bls.n	8004772 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	881a      	ldrh	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	1c9a      	adds	r2, r3, #2
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b02      	subs	r3, #2
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004770:	e05f      	b.n	8004832 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004798:	e04b      	b.n	8004832 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d12b      	bne.n	8004800 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d912      	bls.n	80047d8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	881a      	ldrh	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c2:	1c9a      	adds	r2, r3, #2
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b02      	subs	r3, #2
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047d6:	e02c      	b.n	8004832 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	7812      	ldrb	r2, [r2, #0]
 80047e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047fe:	e018      	b.n	8004832 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004800:	f7fd fdba 	bl	8002378 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d803      	bhi.n	8004818 <HAL_SPI_Transmit+0x26e>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d102      	bne.n	800481e <HAL_SPI_Transmit+0x274>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e02d      	b.n	800488e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ae      	bne.n	800479a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fbd3 	bl	8004fec <SPI_EndRxTxTransaction>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800488c:	2300      	movs	r3, #0
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d001      	beq.n	80048b6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
 80048b4:	e0d4      	b.n	8004a60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_SPI_Transmit_DMA+0x2a>
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0cc      	b.n	8004a60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_SPI_Transmit_DMA+0x3c>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e0c5      	b.n	8004a60 <HAL_SPI_Transmit_DMA+0x1c8>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2203      	movs	r2, #3
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004926:	d10f      	bne.n	8004948 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004936:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004946:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	4a46      	ldr	r2, [pc, #280]	@ (8004a68 <HAL_SPI_Transmit_DMA+0x1d0>)
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	4a45      	ldr	r2, [pc, #276]	@ (8004a6c <HAL_SPI_Transmit_DMA+0x1d4>)
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	4a44      	ldr	r2, [pc, #272]	@ (8004a70 <HAL_SPI_Transmit_DMA+0x1d8>)
 800495e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004964:	2200      	movs	r2, #0
 8004966:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004976:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004980:	d82d      	bhi.n	80049de <HAL_SPI_Transmit_DMA+0x146>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800498c:	d127      	bne.n	80049de <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10f      	bne.n	80049bc <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049aa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049ba:	e010      	b.n	80049de <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ca:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	4619      	mov	r1, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80049f6:	f7fd fe95 	bl	8002724 <HAL_DMA_Start_IT>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a04:	f043 0210 	orr.w	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e023      	b.n	8004a60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a22:	2b40      	cmp	r3, #64	@ 0x40
 8004a24:	d007      	beq.n	8004a36 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a34:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0220 	orr.w	r2, r2, #32
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0202 	orr.w	r2, r2, #2
 8004a5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	08004d2b 	.word	0x08004d2b
 8004a6c:	08004c85 	.word	0x08004c85
 8004a70:	08004d47 	.word	0x08004d47

08004a74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10e      	bne.n	8004ab4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d009      	beq.n	8004ab4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
    return;
 8004ab2:	e0ce      	b.n	8004c52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_SPI_IRQHandler+0x5e>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	4798      	blx	r3
    return;
 8004ad0:	e0bf      	b.n	8004c52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <HAL_SPI_IRQHandler+0x7e>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d105      	bne.n	8004af2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80b0 	beq.w	8004c52 <HAL_SPI_IRQHandler+0x1de>
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80aa 	beq.w	8004c52 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d023      	beq.n	8004b50 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d011      	beq.n	8004b38 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	f043 0204 	orr.w	r2, r3, #4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	e00b      	b.n	8004b50 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	693b      	ldr	r3, [r7, #16]
        return;
 8004b4e:	e080      	b.n	8004c52 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d014      	beq.n	8004b84 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b92:	f043 0208 	orr.w	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d04f      	beq.n	8004c50 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bbe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d104      	bne.n	8004bdc <HAL_SPI_IRQHandler+0x168>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d034      	beq.n	8004c46 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0203 	bic.w	r2, r2, #3
 8004bea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	4a17      	ldr	r2, [pc, #92]	@ (8004c58 <HAL_SPI_IRQHandler+0x1e4>)
 8004bfa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fd fe2d 	bl	8002860 <HAL_DMA_Abort_IT>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d016      	beq.n	8004c4e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c24:	4a0c      	ldr	r2, [pc, #48]	@ (8004c58 <HAL_SPI_IRQHandler+0x1e4>)
 8004c26:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fd fe17 	bl	8002860 <HAL_DMA_Abort_IT>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004c44:	e003      	b.n	8004c4e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f812 	bl	8004c70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c4c:	e000      	b.n	8004c50 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004c4e:	bf00      	nop
    return;
 8004c50:	bf00      	nop
  }
}
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	08004d87 	.word	0x08004d87

08004c5c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c92:	f7fd fb71 	bl	8002378 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d03b      	beq.n	8004d1e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0220 	bic.w	r2, r2, #32
 8004cb4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0202 	bic.w	r2, r2, #2
 8004cc4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	2164      	movs	r1, #100	@ 0x64
 8004cca:	6978      	ldr	r0, [r7, #20]
 8004ccc:	f000 f98e 	bl	8004fec <SPI_EndRxTxTransaction>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2200      	movs	r2, #0
 8004d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ffaa 	bl	8004c70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d1c:	e002      	b.n	8004d24 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004d1e:	6978      	ldr	r0, [r7, #20]
 8004d20:	f7fc fef6 	bl	8001b10 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff ff8f 	bl	8004c5c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0203 	bic.w	r2, r2, #3
 8004d62:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d68:	f043 0210 	orr.w	r2, r3, #16
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff ff79 	bl	8004c70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff ff64 	bl	8004c70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dc0:	f7fd fada 	bl	8002378 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	4413      	add	r3, r2
 8004dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dd0:	f7fd fad2 	bl	8002378 <HAL_GetTick>
 8004dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dd6:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	015b      	lsls	r3, r3, #5
 8004ddc:	0d1b      	lsrs	r3, r3, #20
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	fb02 f303 	mul.w	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004de6:	e054      	b.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d050      	beq.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004df0:	f7fd fac2 	bl	8002378 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d902      	bls.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d13d      	bne.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e1e:	d111      	bne.n	8004e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e28:	d004      	beq.n	8004e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e32:	d107      	bne.n	8004e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e4c:	d10f      	bne.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e017      	b.n	8004eb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d19b      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000200 	.word	0x20000200

08004ec0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	@ 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ed2:	f7fd fa51 	bl	8002378 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	4413      	add	r3, r2
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004ee2:	f7fd fa49 	bl	8002378 <HAL_GetTick>
 8004ee6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	00da      	lsls	r2, r3, #3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	0d1b      	lsrs	r3, r3, #20
 8004f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f08:	e060      	b.n	8004fcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f10:	d107      	bne.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d050      	beq.n	8004fcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f2a:	f7fd fa25 	bl	8002378 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d902      	bls.n	8004f40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d13d      	bne.n	8004fbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f58:	d111      	bne.n	8004f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f62:	d004      	beq.n	8004f6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6c:	d107      	bne.n	8004f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f86:	d10f      	bne.n	8004fa8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fa6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e010      	b.n	8004fde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d196      	bne.n	8004f0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3728      	adds	r7, #40	@ 0x28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000200 	.word	0x20000200

08004fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ff5b 	bl	8004ec0 <SPI_WaitFifoStateUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e027      	b.n	8005070 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2200      	movs	r2, #0
 8005028:	2180      	movs	r1, #128	@ 0x80
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fec0 	bl	8004db0 <SPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e014      	b.n	8005070 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ff34 	bl	8004ec0 <SPI_WaitFifoStateUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e000      	b.n	8005070 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e040      	b.n	800510c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd f876 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	@ 0x24
 80050a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fea6 	bl	8005e10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fbeb 	bl	80058a0 <UART_SetConfig>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e01b      	b.n	800510c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 ff25 	bl	8005f54 <UART_CheckIdleState>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005114:	b480      	push	{r7}
 8005116:	b08b      	sub	sp, #44	@ 0x2c
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005126:	2b20      	cmp	r3, #32
 8005128:	d147      	bne.n	80051ba <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_UART_Transmit_IT+0x22>
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e040      	b.n	80051bc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2221      	movs	r2, #33	@ 0x21
 8005162:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516c:	d107      	bne.n	800517e <HAL_UART_Transmit_IT+0x6a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <HAL_UART_Transmit_IT+0xb4>)
 800517a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800517c:	e002      	b.n	8005184 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a12      	ldr	r2, [pc, #72]	@ (80051cc <HAL_UART_Transmit_IT+0xb8>)
 8005182:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	613b      	str	r3, [r7, #16]
   return(result);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e000      	b.n	80051bc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
  }
}
 80051bc:	4618      	mov	r0, r3
 80051be:	372c      	adds	r7, #44	@ 0x2c
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	080064b7 	.word	0x080064b7
 80051cc:	08006401 	.word	0x08006401

080051d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	@ 0x28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d137      	bne.n	8005258 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Receive_IT+0x24>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e030      	b.n	800525a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <HAL_UART_Receive_IT+0x94>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01f      	beq.n	8005248 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d018      	beq.n	8005248 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	613b      	str	r3, [r7, #16]
   return(result);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	69f9      	ldr	r1, [r7, #28]
 800523a:	6a3a      	ldr	r2, [r7, #32]
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	61bb      	str	r3, [r7, #24]
   return(result);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e6      	bne.n	8005216 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	461a      	mov	r2, r3
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 ff96 	bl	8006180 <UART_Start_Receive_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	e000      	b.n	800525a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3728      	adds	r7, #40	@ 0x28
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40008000 	.word	0x40008000

08005268 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b0ba      	sub	sp, #232	@ 0xe8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800528e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005292:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005296:	4013      	ands	r3, r2
 8005298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800529c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d115      	bne.n	80052d0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00f      	beq.n	80052d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 82ca 	beq.w	800585a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
      }
      return;
 80052ce:	e2c4      	b.n	800585a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80052d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8117 	beq.w	8005508 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052ea:	4b85      	ldr	r3, [pc, #532]	@ (8005500 <HAL_UART_IRQHandler+0x298>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 810a 	beq.w	8005508 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d011      	beq.n	8005324 <HAL_UART_IRQHandler+0xbc>
 8005300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800531a:	f043 0201 	orr.w	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <HAL_UART_IRQHandler+0xec>
 8005330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2202      	movs	r2, #2
 8005342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800534a:	f043 0204 	orr.w	r2, r3, #4
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d011      	beq.n	8005384 <HAL_UART_IRQHandler+0x11c>
 8005360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2204      	movs	r2, #4
 8005372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537a:	f043 0202 	orr.w	r2, r3, #2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d017      	beq.n	80053c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800539c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00b      	beq.n	80053c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2208      	movs	r2, #8
 80053ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b6:	f043 0208 	orr.w	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d012      	beq.n	80053f2 <HAL_UART_IRQHandler+0x18a>
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8230 	beq.w	800585e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00d      	beq.n	8005426 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800540a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800542c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b40      	cmp	r3, #64	@ 0x40
 800543c:	d005      	beq.n	800544a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800543e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005442:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005446:	2b00      	cmp	r3, #0
 8005448:	d04f      	beq.n	80054ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 ff5e 	bl	800630c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d141      	bne.n	80054e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800546c:	e853 3f00 	ldrex	r3, [r3]
 8005470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800548a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800548e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1d9      	bne.n	800545e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d013      	beq.n	80054da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b6:	4a13      	ldr	r2, [pc, #76]	@ (8005504 <HAL_UART_IRQHandler+0x29c>)
 80054b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fd f9ce 	bl	8002860 <HAL_DMA_Abort_IT>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d017      	beq.n	80054fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054d4:	4610      	mov	r0, r2
 80054d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	e00f      	b.n	80054fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9ca 	bl	8005874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	e00b      	b.n	80054fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9c6 	bl	8005874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e8:	e007      	b.n	80054fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9c2 	bl	8005874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80054f8:	e1b1      	b.n	800585e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fa:	bf00      	nop
    return;
 80054fc:	e1af      	b.n	800585e <HAL_UART_IRQHandler+0x5f6>
 80054fe:	bf00      	nop
 8005500:	04000120 	.word	0x04000120
 8005504:	080063d5 	.word	0x080063d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550c:	2b01      	cmp	r3, #1
 800550e:	f040 816a 	bne.w	80057e6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8163 	beq.w	80057e6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 815c 	beq.w	80057e6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2210      	movs	r2, #16
 8005534:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005540:	2b40      	cmp	r3, #64	@ 0x40
 8005542:	f040 80d4 	bne.w	80056ee <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005552:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80ad 	beq.w	80056b6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005566:	429a      	cmp	r2, r3
 8005568:	f080 80a5 	bcs.w	80056b6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005572:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 8086 	bne.w	8005694 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800559c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1da      	bne.n	8005588 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e1      	bne.n	80055d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800561e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e3      	bne.n	800560e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005664:	f023 0310 	bic.w	r3, r3, #16
 8005668:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005676:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005678:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800567c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e4      	bne.n	8005654 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd f8a8 	bl	80027e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f8ea 	bl	8005888 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056b4:	e0d5      	b.n	8005862 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056c0:	429a      	cmp	r2, r3
 80056c2:	f040 80ce 	bne.w	8005862 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	f040 80c5 	bne.w	8005862 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8ce 	bl	8005888 <HAL_UARTEx_RxEventCallback>
      return;
 80056ec:	e0b9      	b.n	8005862 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 80ab 	beq.w	8005866 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80a6 	beq.w	8005866 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800572e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800573c:	647b      	str	r3, [r7, #68]	@ 0x44
 800573e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e4      	bne.n	800571a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	623b      	str	r3, [r7, #32]
   return(result);
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005774:	633a      	str	r2, [r7, #48]	@ 0x30
 8005776:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800577a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e3      	bne.n	8005750 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f023 0310 	bic.w	r3, r3, #16
 80057b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	69b9      	ldr	r1, [r7, #24]
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	617b      	str	r3, [r7, #20]
   return(result);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e4      	bne.n	800579c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f852 	bl	8005888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e4:	e03f      	b.n	8005866 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00e      	beq.n	8005810 <HAL_UART_IRQHandler+0x5a8>
 80057f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005806:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 f89b 	bl	8006944 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800580e:	e02d      	b.n	800586c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00e      	beq.n	800583a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01c      	beq.n	800586a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
    }
    return;
 8005838:	e017      	b.n	800586a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d012      	beq.n	800586c <HAL_UART_IRQHandler+0x604>
 8005846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fe8f 	bl	8006576 <UART_EndTransmit_IT>
    return;
 8005858:	e008      	b.n	800586c <HAL_UART_IRQHandler+0x604>
      return;
 800585a:	bf00      	nop
 800585c:	e006      	b.n	800586c <HAL_UART_IRQHandler+0x604>
    return;
 800585e:	bf00      	nop
 8005860:	e004      	b.n	800586c <HAL_UART_IRQHandler+0x604>
      return;
 8005862:	bf00      	nop
 8005864:	e002      	b.n	800586c <HAL_UART_IRQHandler+0x604>
      return;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <HAL_UART_IRQHandler+0x604>
    return;
 800586a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800586c:	37e8      	adds	r7, #232	@ 0xe8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop

08005874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a4:	b08a      	sub	sp, #40	@ 0x28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	431a      	orrs	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4ba4      	ldr	r3, [pc, #656]	@ (8005b60 <UART_SetConfig+0x2c0>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058d8:	430b      	orrs	r3, r1
 80058da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a99      	ldr	r2, [pc, #612]	@ (8005b64 <UART_SetConfig+0x2c4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005908:	4313      	orrs	r3, r2
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591c:	430a      	orrs	r2, r1
 800591e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a90      	ldr	r2, [pc, #576]	@ (8005b68 <UART_SetConfig+0x2c8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d126      	bne.n	8005978 <UART_SetConfig+0xd8>
 800592a:	4b90      	ldr	r3, [pc, #576]	@ (8005b6c <UART_SetConfig+0x2cc>)
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	2b03      	cmp	r3, #3
 8005936:	d81b      	bhi.n	8005970 <UART_SetConfig+0xd0>
 8005938:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <UART_SetConfig+0xa0>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005951 	.word	0x08005951
 8005944:	08005961 	.word	0x08005961
 8005948:	08005959 	.word	0x08005959
 800594c:	08005969 	.word	0x08005969
 8005950:	2301      	movs	r3, #1
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005956:	e116      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595e:	e112      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005966:	e10e      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596e:	e10a      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005976:	e106      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a7c      	ldr	r2, [pc, #496]	@ (8005b70 <UART_SetConfig+0x2d0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d138      	bne.n	80059f4 <UART_SetConfig+0x154>
 8005982:	4b7a      	ldr	r3, [pc, #488]	@ (8005b6c <UART_SetConfig+0x2cc>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f003 030c 	and.w	r3, r3, #12
 800598c:	2b0c      	cmp	r3, #12
 800598e:	d82d      	bhi.n	80059ec <UART_SetConfig+0x14c>
 8005990:	a201      	add	r2, pc, #4	@ (adr r2, 8005998 <UART_SetConfig+0xf8>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059cd 	.word	0x080059cd
 800599c:	080059ed 	.word	0x080059ed
 80059a0:	080059ed 	.word	0x080059ed
 80059a4:	080059ed 	.word	0x080059ed
 80059a8:	080059dd 	.word	0x080059dd
 80059ac:	080059ed 	.word	0x080059ed
 80059b0:	080059ed 	.word	0x080059ed
 80059b4:	080059ed 	.word	0x080059ed
 80059b8:	080059d5 	.word	0x080059d5
 80059bc:	080059ed 	.word	0x080059ed
 80059c0:	080059ed 	.word	0x080059ed
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d2:	e0d8      	b.n	8005b86 <UART_SetConfig+0x2e6>
 80059d4:	2302      	movs	r3, #2
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059da:	e0d4      	b.n	8005b86 <UART_SetConfig+0x2e6>
 80059dc:	2304      	movs	r3, #4
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e2:	e0d0      	b.n	8005b86 <UART_SetConfig+0x2e6>
 80059e4:	2308      	movs	r3, #8
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ea:	e0cc      	b.n	8005b86 <UART_SetConfig+0x2e6>
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059f2:	e0c8      	b.n	8005b86 <UART_SetConfig+0x2e6>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a5e      	ldr	r2, [pc, #376]	@ (8005b74 <UART_SetConfig+0x2d4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d125      	bne.n	8005a4a <UART_SetConfig+0x1aa>
 80059fe:	4b5b      	ldr	r3, [pc, #364]	@ (8005b6c <UART_SetConfig+0x2cc>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a08:	2b30      	cmp	r3, #48	@ 0x30
 8005a0a:	d016      	beq.n	8005a3a <UART_SetConfig+0x19a>
 8005a0c:	2b30      	cmp	r3, #48	@ 0x30
 8005a0e:	d818      	bhi.n	8005a42 <UART_SetConfig+0x1a2>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d00a      	beq.n	8005a2a <UART_SetConfig+0x18a>
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d814      	bhi.n	8005a42 <UART_SetConfig+0x1a2>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <UART_SetConfig+0x182>
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d008      	beq.n	8005a32 <UART_SetConfig+0x192>
 8005a20:	e00f      	b.n	8005a42 <UART_SetConfig+0x1a2>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a28:	e0ad      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a30:	e0a9      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a32:	2304      	movs	r3, #4
 8005a34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a38:	e0a5      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a40:	e0a1      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a42:	2310      	movs	r3, #16
 8005a44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a48:	e09d      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8005b78 <UART_SetConfig+0x2d8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d125      	bne.n	8005aa0 <UART_SetConfig+0x200>
 8005a54:	4b45      	ldr	r3, [pc, #276]	@ (8005b6c <UART_SetConfig+0x2cc>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a60:	d016      	beq.n	8005a90 <UART_SetConfig+0x1f0>
 8005a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a64:	d818      	bhi.n	8005a98 <UART_SetConfig+0x1f8>
 8005a66:	2b80      	cmp	r3, #128	@ 0x80
 8005a68:	d00a      	beq.n	8005a80 <UART_SetConfig+0x1e0>
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d814      	bhi.n	8005a98 <UART_SetConfig+0x1f8>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <UART_SetConfig+0x1d8>
 8005a72:	2b40      	cmp	r3, #64	@ 0x40
 8005a74:	d008      	beq.n	8005a88 <UART_SetConfig+0x1e8>
 8005a76:	e00f      	b.n	8005a98 <UART_SetConfig+0x1f8>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7e:	e082      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a80:	2302      	movs	r3, #2
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a86:	e07e      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a8e:	e07a      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a96:	e076      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a9e:	e072      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a35      	ldr	r2, [pc, #212]	@ (8005b7c <UART_SetConfig+0x2dc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d12a      	bne.n	8005b00 <UART_SetConfig+0x260>
 8005aaa:	4b30      	ldr	r3, [pc, #192]	@ (8005b6c <UART_SetConfig+0x2cc>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab8:	d01a      	beq.n	8005af0 <UART_SetConfig+0x250>
 8005aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005abe:	d81b      	bhi.n	8005af8 <UART_SetConfig+0x258>
 8005ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac4:	d00c      	beq.n	8005ae0 <UART_SetConfig+0x240>
 8005ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aca:	d815      	bhi.n	8005af8 <UART_SetConfig+0x258>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <UART_SetConfig+0x238>
 8005ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad4:	d008      	beq.n	8005ae8 <UART_SetConfig+0x248>
 8005ad6:	e00f      	b.n	8005af8 <UART_SetConfig+0x258>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ade:	e052      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae6:	e04e      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aee:	e04a      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005af0:	2308      	movs	r3, #8
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005af6:	e046      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005af8:	2310      	movs	r3, #16
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afe:	e042      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a17      	ldr	r2, [pc, #92]	@ (8005b64 <UART_SetConfig+0x2c4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d13a      	bne.n	8005b80 <UART_SetConfig+0x2e0>
 8005b0a:	4b18      	ldr	r3, [pc, #96]	@ (8005b6c <UART_SetConfig+0x2cc>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b18:	d01a      	beq.n	8005b50 <UART_SetConfig+0x2b0>
 8005b1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b1e:	d81b      	bhi.n	8005b58 <UART_SetConfig+0x2b8>
 8005b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b24:	d00c      	beq.n	8005b40 <UART_SetConfig+0x2a0>
 8005b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b2a:	d815      	bhi.n	8005b58 <UART_SetConfig+0x2b8>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <UART_SetConfig+0x298>
 8005b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b34:	d008      	beq.n	8005b48 <UART_SetConfig+0x2a8>
 8005b36:	e00f      	b.n	8005b58 <UART_SetConfig+0x2b8>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3e:	e022      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005b40:	2302      	movs	r3, #2
 8005b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b46:	e01e      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4e:	e01a      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005b50:	2308      	movs	r3, #8
 8005b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b56:	e016      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b5e:	e012      	b.n	8005b86 <UART_SetConfig+0x2e6>
 8005b60:	efff69f3 	.word	0xefff69f3
 8005b64:	40008000 	.word	0x40008000
 8005b68:	40013800 	.word	0x40013800
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40004400 	.word	0x40004400
 8005b74:	40004800 	.word	0x40004800
 8005b78:	40004c00 	.word	0x40004c00
 8005b7c:	40005000 	.word	0x40005000
 8005b80:	2310      	movs	r3, #16
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a9f      	ldr	r2, [pc, #636]	@ (8005e08 <UART_SetConfig+0x568>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d17a      	bne.n	8005c86 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d824      	bhi.n	8005be2 <UART_SetConfig+0x342>
 8005b98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba0 <UART_SetConfig+0x300>)
 8005b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9e:	bf00      	nop
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005be3 	.word	0x08005be3
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005be3 	.word	0x08005be3
 8005bb0:	08005bd3 	.word	0x08005bd3
 8005bb4:	08005be3 	.word	0x08005be3
 8005bb8:	08005be3 	.word	0x08005be3
 8005bbc:	08005be3 	.word	0x08005be3
 8005bc0:	08005bdb 	.word	0x08005bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc4:	f7fd ff06 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8005bc8:	61f8      	str	r0, [r7, #28]
        break;
 8005bca:	e010      	b.n	8005bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8005e0c <UART_SetConfig+0x56c>)
 8005bce:	61fb      	str	r3, [r7, #28]
        break;
 8005bd0:	e00d      	b.n	8005bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd2:	f7fd fe67 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8005bd6:	61f8      	str	r0, [r7, #28]
        break;
 8005bd8:	e009      	b.n	8005bee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bde:	61fb      	str	r3, [r7, #28]
        break;
 8005be0:	e005      	b.n	8005bee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005bec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80fb 	beq.w	8005dec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d305      	bcc.n	8005c12 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d903      	bls.n	8005c1a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c18:	e0e8      	b.n	8005dec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	461c      	mov	r4, r3
 8005c20:	4615      	mov	r5, r2
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	022b      	lsls	r3, r5, #8
 8005c2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c30:	0222      	lsls	r2, r4, #8
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	6849      	ldr	r1, [r1, #4]
 8005c36:	0849      	lsrs	r1, r1, #1
 8005c38:	2000      	movs	r0, #0
 8005c3a:	4688      	mov	r8, r1
 8005c3c:	4681      	mov	r9, r0
 8005c3e:	eb12 0a08 	adds.w	sl, r2, r8
 8005c42:	eb43 0b09 	adc.w	fp, r3, r9
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c54:	4650      	mov	r0, sl
 8005c56:	4659      	mov	r1, fp
 8005c58:	f7fa fb12 	bl	8000280 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c6a:	d308      	bcc.n	8005c7e <UART_SetConfig+0x3de>
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c72:	d204      	bcs.n	8005c7e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	60da      	str	r2, [r3, #12]
 8005c7c:	e0b6      	b.n	8005dec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c84:	e0b2      	b.n	8005dec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8e:	d15e      	bne.n	8005d4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d828      	bhi.n	8005cea <UART_SetConfig+0x44a>
 8005c98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca0 <UART_SetConfig+0x400>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005ceb 	.word	0x08005ceb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fd fe86 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	61f8      	str	r0, [r7, #28]
        break;
 8005cca:	e014      	b.n	8005cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fd fe98 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	61f8      	str	r0, [r7, #28]
        break;
 8005cd2:	e010      	b.n	8005cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8005e0c <UART_SetConfig+0x56c>)
 8005cd6:	61fb      	str	r3, [r7, #28]
        break;
 8005cd8:	e00d      	b.n	8005cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fd fde3 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8005cde:	61f8      	str	r0, [r7, #28]
        break;
 8005ce0:	e009      	b.n	8005cf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce6:	61fb      	str	r3, [r7, #28]
        break;
 8005ce8:	e005      	b.n	8005cf6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d077      	beq.n	8005dec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	005a      	lsls	r2, r3, #1
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	441a      	add	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b0f      	cmp	r3, #15
 8005d16:	d916      	bls.n	8005d46 <UART_SetConfig+0x4a6>
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1e:	d212      	bcs.n	8005d46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f023 030f 	bic.w	r3, r3, #15
 8005d28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	8afb      	ldrh	r3, [r7, #22]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	8afa      	ldrh	r2, [r7, #22]
 8005d42:	60da      	str	r2, [r3, #12]
 8005d44:	e052      	b.n	8005dec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d4c:	e04e      	b.n	8005dec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d827      	bhi.n	8005da6 <UART_SetConfig+0x506>
 8005d56:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <UART_SetConfig+0x4bc>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005d81 	.word	0x08005d81
 8005d60:	08005d89 	.word	0x08005d89
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	08005da7 	.word	0x08005da7
 8005d6c:	08005d97 	.word	0x08005d97
 8005d70:	08005da7 	.word	0x08005da7
 8005d74:	08005da7 	.word	0x08005da7
 8005d78:	08005da7 	.word	0x08005da7
 8005d7c:	08005d9f 	.word	0x08005d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d80:	f7fd fe28 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8005d84:	61f8      	str	r0, [r7, #28]
        break;
 8005d86:	e014      	b.n	8005db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d88:	f7fd fe3a 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8005d8c:	61f8      	str	r0, [r7, #28]
        break;
 8005d8e:	e010      	b.n	8005db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b1e      	ldr	r3, [pc, #120]	@ (8005e0c <UART_SetConfig+0x56c>)
 8005d92:	61fb      	str	r3, [r7, #28]
        break;
 8005d94:	e00d      	b.n	8005db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d96:	f7fd fd85 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8005d9a:	61f8      	str	r0, [r7, #28]
        break;
 8005d9c:	e009      	b.n	8005db2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da2:	61fb      	str	r3, [r7, #28]
        break;
 8005da4:	e005      	b.n	8005db2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005db0:	bf00      	nop
    }

    if (pclk != 0U)
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d019      	beq.n	8005dec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	085a      	lsrs	r2, r3, #1
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b0f      	cmp	r3, #15
 8005dd0:	d909      	bls.n	8005de6 <UART_SetConfig+0x546>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd8:	d205      	bcs.n	8005de6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60da      	str	r2, [r3, #12]
 8005de4:	e002      	b.n	8005dec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005df8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3728      	adds	r7, #40	@ 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e06:	bf00      	nop
 8005e08:	40008000 	.word	0x40008000
 8005e0c:	00f42400 	.word	0x00f42400

08005e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01a      	beq.n	8005f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f0e:	d10a      	bne.n	8005f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]
  }
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b098      	sub	sp, #96	@ 0x60
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f64:	f7fc fa08 	bl	8002378 <HAL_GetTick>
 8005f68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d12e      	bne.n	8005fd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f80:	2200      	movs	r2, #0
 8005f82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f88c 	bl	80060a4 <UART_WaitOnFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d021      	beq.n	8005fd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e6      	bne.n	8005f92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e062      	b.n	800609c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d149      	bne.n	8006078 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fec:	2200      	movs	r2, #0
 8005fee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f856 	bl	80060a4 <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d03c      	beq.n	8006078 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	623b      	str	r3, [r7, #32]
   return(result);
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800601c:	633b      	str	r3, [r7, #48]	@ 0x30
 800601e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006050:	61fa      	str	r2, [r7, #28]
 8006052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	69b9      	ldr	r1, [r7, #24]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	617b      	str	r3, [r7, #20]
   return(result);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e011      	b.n	800609c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3758      	adds	r7, #88	@ 0x58
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b4:	e04f      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d04b      	beq.n	8006156 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fc f95b 	bl	8002378 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e04e      	b.n	8006176 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d037      	beq.n	8006156 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b80      	cmp	r3, #128	@ 0x80
 80060ea:	d034      	beq.n	8006156 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b40      	cmp	r3, #64	@ 0x40
 80060f0:	d031      	beq.n	8006156 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d110      	bne.n	8006122 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2208      	movs	r2, #8
 8006106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f8ff 	bl	800630c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2208      	movs	r2, #8
 8006112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e029      	b.n	8006176 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800612c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006130:	d111      	bne.n	8006156 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800613a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f8e5 	bl	800630c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e00f      	b.n	8006176 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4013      	ands	r3, r2
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	bf0c      	ite	eq
 8006166:	2301      	moveq	r3, #1
 8006168:	2300      	movne	r3, #0
 800616a:	b2db      	uxtb	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	429a      	cmp	r2, r3
 8006172:	d0a0      	beq.n	80060b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006180:	b480      	push	{r7}
 8006182:	b097      	sub	sp, #92	@ 0x5c
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	4613      	mov	r3, r2
 800618c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b2:	d10e      	bne.n	80061d2 <UART_Start_Receive_IT+0x52>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d105      	bne.n	80061c8 <UART_Start_Receive_IT+0x48>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80061c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061c6:	e02d      	b.n	8006224 <UART_Start_Receive_IT+0xa4>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	22ff      	movs	r2, #255	@ 0xff
 80061cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061d0:	e028      	b.n	8006224 <UART_Start_Receive_IT+0xa4>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10d      	bne.n	80061f6 <UART_Start_Receive_IT+0x76>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <UART_Start_Receive_IT+0x6c>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	22ff      	movs	r2, #255	@ 0xff
 80061e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061ea:	e01b      	b.n	8006224 <UART_Start_Receive_IT+0xa4>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	227f      	movs	r2, #127	@ 0x7f
 80061f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061f4:	e016      	b.n	8006224 <UART_Start_Receive_IT+0xa4>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061fe:	d10d      	bne.n	800621c <UART_Start_Receive_IT+0x9c>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <UART_Start_Receive_IT+0x92>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	227f      	movs	r2, #127	@ 0x7f
 800620c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006210:	e008      	b.n	8006224 <UART_Start_Receive_IT+0xa4>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	223f      	movs	r2, #63	@ 0x3f
 8006216:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800621a:	e003      	b.n	8006224 <UART_Start_Receive_IT+0xa4>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2222      	movs	r2, #34	@ 0x22
 8006230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	657b      	str	r3, [r7, #84]	@ 0x54
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3308      	adds	r3, #8
 8006252:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006254:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006256:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800625a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006270:	d107      	bne.n	8006282 <UART_Start_Receive_IT+0x102>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a21      	ldr	r2, [pc, #132]	@ (8006304 <UART_Start_Receive_IT+0x184>)
 800627e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006280:	e002      	b.n	8006288 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a20      	ldr	r2, [pc, #128]	@ (8006308 <UART_Start_Receive_IT+0x188>)
 8006286:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d019      	beq.n	80062c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80062a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e6      	bne.n	8006290 <UART_Start_Receive_IT+0x110>
 80062c2:	e018      	b.n	80062f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	613b      	str	r3, [r7, #16]
   return(result);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f043 0320 	orr.w	r3, r3, #32
 80062d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	69f9      	ldr	r1, [r7, #28]
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e6      	bne.n	80062c4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	375c      	adds	r7, #92	@ 0x5c
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	08006789 	.word	0x08006789
 8006308:	080065cd 	.word	0x080065cd

0800630c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b095      	sub	sp, #84	@ 0x54
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006332:	643b      	str	r3, [r7, #64]	@ 0x40
 8006334:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e6      	bne.n	8006314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	61fb      	str	r3, [r7, #28]
   return(result);
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006366:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800636c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e5      	bne.n	8006346 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800637e:	2b01      	cmp	r3, #1
 8006380:	d118      	bne.n	80063b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	647b      	str	r3, [r7, #68]	@ 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	613b      	str	r3, [r7, #16]
   return(result);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e6      	bne.n	8006382 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063c8:	bf00      	nop
 80063ca:	3754      	adds	r7, #84	@ 0x54
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff fa3e 	bl	8005874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b08f      	sub	sp, #60	@ 0x3c
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800640c:	2b21      	cmp	r3, #33	@ 0x21
 800640e:	d14c      	bne.n	80064aa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d132      	bne.n	8006482 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	61fb      	str	r3, [r7, #28]
   return(result);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800643c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e6      	bne.n	800641c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	60bb      	str	r3, [r7, #8]
   return(result);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006462:	633b      	str	r3, [r7, #48]	@ 0x30
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6979      	ldr	r1, [r7, #20]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	613b      	str	r3, [r7, #16]
   return(result);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e6      	bne.n	800644e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006480:	e013      	b.n	80064aa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80064aa:	bf00      	nop
 80064ac:	373c      	adds	r7, #60	@ 0x3c
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b091      	sub	sp, #68	@ 0x44
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064c2:	2b21      	cmp	r3, #33	@ 0x21
 80064c4:	d151      	bne.n	800656a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d132      	bne.n	8006538 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	623b      	str	r3, [r7, #32]
   return(result);
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e6      	bne.n	80064d2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	60fb      	str	r3, [r7, #12]
   return(result);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006518:	637b      	str	r3, [r7, #52]	@ 0x34
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	69b9      	ldr	r1, [r7, #24]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	617b      	str	r3, [r7, #20]
   return(result);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e6      	bne.n	8006504 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006536:	e018      	b.n	800656a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800653e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800654a:	b292      	uxth	r2, r2
 800654c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006552:	1c9a      	adds	r2, r3, #2
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800656a:	bf00      	nop
 800656c:	3744      	adds	r7, #68	@ 0x44
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b088      	sub	sp, #32
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	60bb      	str	r3, [r7, #8]
   return(result);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	613b      	str	r3, [r7, #16]
   return(result);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e6      	bne.n	800657e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fb fd45 	bl	800204c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c2:	bf00      	nop
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b09c      	sub	sp, #112	@ 0x70
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e4:	2b22      	cmp	r3, #34	@ 0x22
 80065e6:	f040 80be 	bne.w	8006766 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80065f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065f8:	b2d9      	uxtb	r1, r3
 80065fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006604:	400a      	ands	r2, r1
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 80a3 	bne.w	800677a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006652:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006654:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e6      	bne.n	8006634 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	667b      	str	r3, [r7, #100]	@ 0x64
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006686:	647a      	str	r2, [r7, #68]	@ 0x44
 8006688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800668c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a34      	ldr	r2, [pc, #208]	@ (8006784 <UART_RxISR_8BIT+0x1b8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d01f      	beq.n	80066f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d018      	beq.n	80066f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	623b      	str	r3, [r7, #32]
   return(result);
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066da:	663b      	str	r3, [r7, #96]	@ 0x60
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e6      	bne.n	80066c6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d12e      	bne.n	800675e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	60fb      	str	r3, [r7, #12]
   return(result);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0310 	bic.w	r3, r3, #16
 800671a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	69b9      	ldr	r1, [r7, #24]
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	617b      	str	r3, [r7, #20]
   return(result);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b10      	cmp	r3, #16
 8006744:	d103      	bne.n	800674e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2210      	movs	r2, #16
 800674c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff f896 	bl	8005888 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800675c:	e00d      	b.n	800677a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fb fca4 	bl	80020ac <HAL_UART_RxCpltCallback>
}
 8006764:	e009      	b.n	800677a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	8b1b      	ldrh	r3, [r3, #24]
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0208 	orr.w	r2, r2, #8
 8006776:	b292      	uxth	r2, r2
 8006778:	831a      	strh	r2, [r3, #24]
}
 800677a:	bf00      	nop
 800677c:	3770      	adds	r7, #112	@ 0x70
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40008000 	.word	0x40008000

08006788 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b09c      	sub	sp, #112	@ 0x70
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006796:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a0:	2b22      	cmp	r3, #34	@ 0x22
 80067a2:	f040 80be 	bne.w	8006922 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067be:	4013      	ands	r3, r2
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ca:	1c9a      	adds	r2, r3, #2
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f040 80a3 	bne.w	8006936 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006804:	667b      	str	r3, [r7, #100]	@ 0x64
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800680e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006810:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006814:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800681c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	663b      	str	r3, [r7, #96]	@ 0x60
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006842:	643a      	str	r2, [r7, #64]	@ 0x40
 8006844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a34      	ldr	r2, [pc, #208]	@ (8006940 <UART_RxISR_16BIT+0x1b8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d01f      	beq.n	80068b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d018      	beq.n	80068b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006896:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e6      	bne.n	8006882 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d12e      	bne.n	800691a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0310 	bic.w	r3, r3, #16
 80068d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6979      	ldr	r1, [r7, #20]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	613b      	str	r3, [r7, #16]
   return(result);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e6      	bne.n	80068c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d103      	bne.n	800690a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2210      	movs	r2, #16
 8006908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fe ffb8 	bl	8005888 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006918:	e00d      	b.n	8006936 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fb fbc6 	bl	80020ac <HAL_UART_RxCpltCallback>
}
 8006920:	e009      	b.n	8006936 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	8b1b      	ldrh	r3, [r3, #24]
 8006928:	b29a      	uxth	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0208 	orr.w	r2, r2, #8
 8006932:	b292      	uxth	r2, r2
 8006934:	831a      	strh	r2, [r3, #24]
}
 8006936:	bf00      	nop
 8006938:	3770      	adds	r7, #112	@ 0x70
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40008000 	.word	0x40008000

08006944 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	7992      	ldrb	r2, [r2, #6]
 800696a:	08d2      	lsrs	r2, r2, #3
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	fb13 f302 	smulbb	r3, r3, r2
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	889b      	ldrh	r3, [r3, #4]
 800697c:	461a      	mov	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	fb02 f303 	mul.w	r3, r2, r3
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	60da      	str	r2, [r3, #12]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800699e:	b490      	push	{r4, r7}
 80069a0:	b086      	sub	sp, #24
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	4604      	mov	r4, r0
 80069a6:	4608      	mov	r0, r1
 80069a8:	1d39      	adds	r1, r7, #4
 80069aa:	e881 000c 	stmia.w	r1, {r2, r3}
 80069ae:	4623      	mov	r3, r4
 80069b0:	81fb      	strh	r3, [r7, #14]
 80069b2:	4603      	mov	r3, r0
 80069b4:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80069ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069be:	88ba      	ldrh	r2, [r7, #4]
 80069c0:	4293      	cmp	r3, r2
 80069c2:	da04      	bge.n	80069ce <code+0x30>
        code |= LEFT;
 80069c4:	2201      	movs	r2, #1
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	75fb      	strb	r3, [r7, #23]
 80069cc:	e008      	b.n	80069e0 <code+0x42>
    } else if (x0 > window.x1) {
 80069ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069d2:	893a      	ldrh	r2, [r7, #8]
 80069d4:	4293      	cmp	r3, r2
 80069d6:	dd03      	ble.n	80069e0 <code+0x42>
        code |= RIGHT;
 80069d8:	2202      	movs	r2, #2
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	4313      	orrs	r3, r2
 80069de:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80069e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	da04      	bge.n	80069f4 <code+0x56>
        code |= BOTTOM;
 80069ea:	2204      	movs	r2, #4
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	75fb      	strb	r3, [r7, #23]
 80069f2:	e008      	b.n	8006a06 <code+0x68>
    } else if (y0 > window.y1) {
 80069f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069f8:	897a      	ldrh	r2, [r7, #10]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	dd03      	ble.n	8006a06 <code+0x68>
        code |= TOP;
 80069fe:	2208      	movs	r2, #8
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc90      	pop	{r4, r7}
 8006a10:	4770      	bx	lr

08006a12 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b088      	sub	sp, #32
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
 8006a1e:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a30:	cb0c      	ldmia	r3, {r2, r3}
 8006a32:	f7ff ffb4 	bl	800699e <code>
 8006a36:	4603      	mov	r3, r0
 8006a38:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a4a:	cb0c      	ldmia	r3, {r2, r3}
 8006a4c:	f7ff ffa7 	bl	800699e <code>
 8006a50:	4603      	mov	r3, r0
 8006a52:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006a54:	2300      	movs	r3, #0
 8006a56:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006a58:	7ffa      	ldrb	r2, [r7, #31]
 8006a5a:	7fbb      	ldrb	r3, [r7, #30]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006a64:	2301      	movs	r3, #1
 8006a66:	777b      	strb	r3, [r7, #29]
            break;
 8006a68:	e0e9      	b.n	8006c3e <clip_line+0x22c>
        } else if (code0 & code1) {
 8006a6a:	7ffa      	ldrb	r2, [r7, #31]
 8006a6c:	7fbb      	ldrb	r3, [r7, #30]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 80e2 	bne.w	8006c3c <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006a80:	7ffb      	ldrb	r3, [r7, #31]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <clip_line+0x78>
 8006a86:	7ffb      	ldrb	r3, [r7, #31]
 8006a88:	e000      	b.n	8006a8c <clip_line+0x7a>
 8006a8a:	7fbb      	ldrb	r3, [r7, #30]
 8006a8c:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006a8e:	2208      	movs	r2, #8
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	4013      	ands	r3, r2
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d024      	beq.n	8006ae4 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ab0:	1acb      	subs	r3, r1, r3
 8006ab2:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006abc:	1a41      	subs	r1, r0, r1
 8006abe:	fb03 f101 	mul.w	r1, r3, r1
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad0:	1ac3      	subs	r3, r0, r3
 8006ad2:	fb91 f3f3 	sdiv	r3, r1, r3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006ade:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ae0:	833b      	strh	r3, [r7, #24]
 8006ae2:	e07f      	b.n	8006be4 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d024      	beq.n	8006b3a <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006afe:	4619      	mov	r1, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b06:	1acb      	subs	r3, r1, r3
 8006b08:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006b0a:	4608      	mov	r0, r1
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b12:	1a41      	subs	r1, r0, r1
 8006b14:	fb03 f101 	mul.w	r1, r3, r1
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b26:	1ac3      	subs	r3, r0, r3
 8006b28:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	4413      	add	r3, r2
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006b34:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b36:	833b      	strh	r3, [r7, #24]
 8006b38:	e054      	b.n	8006be4 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d024      	beq.n	8006b90 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b54:	4619      	mov	r1, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b5c:	1acb      	subs	r3, r1, r3
 8006b5e:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006b60:	4608      	mov	r0, r1
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006b68:	1a41      	subs	r1, r0, r1
 8006b6a:	fb03 f101 	mul.w	r1, r3, r1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b74:	4618      	mov	r0, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b7c:	1ac3      	subs	r3, r0, r3
 8006b7e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006b8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b8c:	837b      	strh	r3, [r7, #26]
 8006b8e:	e029      	b.n	8006be4 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006b90:	2201      	movs	r2, #1
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	4013      	ands	r3, r2
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d023      	beq.n	8006be4 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006baa:	4619      	mov	r1, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bb2:	1acb      	subs	r3, r1, r3
 8006bb4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	68f9      	ldr	r1, [r7, #12]
 8006bba:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006bbe:	1a41      	subs	r1, r0, r1
 8006bc0:	fb03 f101 	mul.w	r1, r3, r1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd2:	1ac3      	subs	r3, r0, r3
 8006bd4:	fb91 f3f3 	sdiv	r3, r1, r3
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006be0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006be2:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006be4:	7dfa      	ldrb	r2, [r7, #23]
 8006be6:	7ffb      	ldrb	r3, [r7, #31]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d113      	bne.n	8006c14 <clip_line+0x202>
                *x0 = x;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8b7a      	ldrh	r2, [r7, #26]
 8006bf0:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	8b3a      	ldrh	r2, [r7, #24]
 8006bf6:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c08:	cb0c      	ldmia	r3, {r2, r3}
 8006c0a:	f7ff fec8 	bl	800699e <code>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e721      	b.n	8006a58 <clip_line+0x46>
            } else {
                *x1 = x;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8b7a      	ldrh	r2, [r7, #26]
 8006c18:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	8b3a      	ldrh	r2, [r7, #24]
 8006c1e:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006c2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006c30:	cb0c      	ldmia	r3, {r2, r3}
 8006c32:	f7ff feb4 	bl	800699e <code>
 8006c36:	4603      	mov	r3, r0
 8006c38:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006c3a:	e70d      	b.n	8006a58 <clip_line+0x46>
            break;
 8006c3c:	bf00      	nop
            }
        }
    }

    return accept;
 8006c3e:	7f7b      	ldrb	r3, [r7, #29]
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	3306      	adds	r3, #6
 8006c58:	2208      	movs	r2, #8
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	f001 fa36 	bl	80080cc <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	330e      	adds	r3, #14
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	330f      	adds	r3, #15
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	3310      	adds	r3, #16
 8006c78:	781a      	ldrb	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	72da      	strb	r2, [r3, #11]

    return 0;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08e      	sub	sp, #56	@ 0x38
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff ffd4 	bl	8006c48 <fontx_meta>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <fontx_glyph+0x2c>
        return status;
 8006cae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cb2:	e077      	b.n	8006da4 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006cb4:	7f7a      	ldrb	r2, [r7, #29]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006cba:	7fba      	ldrb	r2, [r7, #30]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006cc0:	7f7b      	ldrb	r3, [r7, #29]
 8006cc2:	3307      	adds	r3, #7
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	da00      	bge.n	8006cca <fontx_glyph+0x42>
 8006cc8:	3307      	adds	r3, #7
 8006cca:	10db      	asrs	r3, r3, #3
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	78da      	ldrb	r2, [r3, #3]
 8006cd6:	7fbb      	ldrb	r3, [r7, #30]
 8006cd8:	fb12 f303 	smulbb	r3, r2, r3
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10f      	bne.n	8006d08 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2bff      	cmp	r3, #255	@ 0xff
 8006cec:	d859      	bhi.n	8006da2 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	3311      	adds	r3, #17
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	441a      	add	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e04d      	b.n	8006da4 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3312      	adds	r3, #18
 8006d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3311      	adds	r3, #17
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006d1a:	e03d      	b.n	8006d98 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d24:	3301      	adds	r3, #1
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	4413      	add	r3, r2
 8006d2c:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d30:	3302      	adds	r3, #2
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d38:	3303      	adds	r3, #3
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	4413      	add	r3, r2
 8006d40:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d31c      	bcc.n	8006d84 <fontx_glyph+0xfc>
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d818      	bhi.n	8006d84 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d5a:	4413      	add	r3, r2
 8006d5c:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3311      	adds	r3, #17
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	461a      	mov	r2, r3
                    nc * glyph->size
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	789b      	ldrb	r3, [r3, #2]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006d74:	4413      	add	r3, r2
 8006d76:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e00f      	b.n	8006da4 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	1ad2      	subs	r2, r2, r3
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3301      	adds	r3, #1
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	3304      	adds	r3, #4
 8006d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1bc      	bne.n	8006d1c <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006da2:	2301      	movs	r3, #1
 8006da4:	4618      	mov	r0, r3
 8006da6:	3738      	adds	r7, #56	@ 0x38
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	dd01      	ble.n	8006dc2 <min+0x16>
        return b;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	e000      	b.n	8006dc4 <min+0x18>
    };
    return a;
 8006dc2:	687b      	ldr	r3, [r7, #4]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <max>:

static inline int max(int a, int b) {
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	dd01      	ble.n	8006de6 <max+0x16>
        return a;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	e000      	b.n	8006de8 <max+0x18>
    }
    return b;
 8006de6:	683b      	ldr	r3, [r7, #0]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	80fb      	strh	r3, [r7, #6]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	80bb      	strh	r3, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e0a:	4a12      	ldr	r2, [pc, #72]	@ (8006e54 <hagl_put_pixel+0x60>)
 8006e0c:	8812      	ldrh	r2, [r2, #0]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	db1a      	blt.n	8006e48 <hagl_put_pixel+0x54>
 8006e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e16:	4a0f      	ldr	r2, [pc, #60]	@ (8006e54 <hagl_put_pixel+0x60>)
 8006e18:	8852      	ldrh	r2, [r2, #2]
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	db14      	blt.n	8006e48 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e22:	4a0c      	ldr	r2, [pc, #48]	@ (8006e54 <hagl_put_pixel+0x60>)
 8006e24:	8892      	ldrh	r2, [r2, #4]
 8006e26:	4293      	cmp	r3, r2
 8006e28:	dc10      	bgt.n	8006e4c <hagl_put_pixel+0x58>
 8006e2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006e2e:	4a09      	ldr	r2, [pc, #36]	@ (8006e54 <hagl_put_pixel+0x60>)
 8006e30:	88d2      	ldrh	r2, [r2, #6]
 8006e32:	4293      	cmp	r3, r2
 8006e34:	dc0a      	bgt.n	8006e4c <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e3a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e3e:	887a      	ldrh	r2, [r7, #2]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fa fe3d 	bl	8001ac0 <lcdPutPixel>
 8006e46:	e002      	b.n	8006e4e <hagl_put_pixel+0x5a>
        return;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <hagl_put_pixel+0x5a>
        return;
 8006e4c:	bf00      	nop
}
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	2000020c 	.word	0x2000020c

08006e58 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	4604      	mov	r4, r0
 8006e60:	4608      	mov	r0, r1
 8006e62:	4611      	mov	r1, r2
 8006e64:	461a      	mov	r2, r3
 8006e66:	4623      	mov	r3, r4
 8006e68:	80fb      	strh	r3, [r7, #6]
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	80bb      	strh	r3, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	807b      	strh	r3, [r7, #2]
 8006e72:	4613      	mov	r3, r2
 8006e74:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	887b      	ldrh	r3, [r7, #2]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	b21a      	sxth	r2, r3
 8006e80:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006e84:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006e88:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006e8c:	883b      	ldrh	r3, [r7, #0]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	4623      	mov	r3, r4
 8006e92:	f000 f827 	bl	8006ee4 <hagl_draw_line>
#endif
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd90      	pop	{r4, r7, pc}

08006e9e <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006e9e:	b590      	push	{r4, r7, lr}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af02      	add	r7, sp, #8
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4623      	mov	r3, r4
 8006eae:	80fb      	strh	r3, [r7, #6]
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	80bb      	strh	r3, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	807b      	strh	r3, [r7, #2]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006ebc:	88ba      	ldrh	r2, [r7, #4]
 8006ebe:	887b      	ldrh	r3, [r7, #2]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	b21c      	sxth	r4, r3
 8006ec6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006eca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006ece:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006ed2:	883b      	ldrh	r3, [r7, #0]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	f000 f804 	bl	8006ee4 <hagl_draw_line>
#endif
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd90      	pop	{r4, r7, pc}

08006ee4 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee6:	b089      	sub	sp, #36	@ 0x24
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	4611      	mov	r1, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	80fb      	strh	r3, [r7, #6]
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	80bb      	strh	r3, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	807b      	strh	r3, [r7, #2]
 8006efe:	4613      	mov	r3, r2
 8006f00:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006f02:	463b      	mov	r3, r7
 8006f04:	1cba      	adds	r2, r7, #2
 8006f06:	1d3d      	adds	r5, r7, #4
 8006f08:	1dbc      	adds	r4, r7, #6
 8006f0a:	494a      	ldr	r1, [pc, #296]	@ (8007034 <hagl_draw_line+0x150>)
 8006f0c:	466e      	mov	r6, sp
 8006f0e:	c903      	ldmia	r1, {r0, r1}
 8006f10:	e886 0003 	stmia.w	r6, {r0, r1}
 8006f14:	4629      	mov	r1, r5
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff fd7b 	bl	8006a12 <clip_line>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f083 0301 	eor.w	r3, r3, #1
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d17e      	bne.n	8007026 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006f28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bfb8      	it	lt
 8006f38:	425b      	neglt	r3, r3
 8006f3a:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006f3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	da01      	bge.n	8006f4c <hagl_draw_line+0x68>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e001      	b.n	8006f50 <hagl_draw_line+0x6c>
 8006f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f50:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006f52:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfb8      	it	lt
 8006f62:	425b      	neglt	r3, r3
 8006f64:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006f66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006f6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	da01      	bge.n	8006f76 <hagl_draw_line+0x92>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e001      	b.n	8006f7a <hagl_draw_line+0x96>
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006f7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006f80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	dd06      	ble.n	8006f96 <hagl_draw_line+0xb2>
 8006f88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006f8c:	0fda      	lsrs	r2, r3, #31
 8006f8e:	4413      	add	r3, r2
 8006f90:	105b      	asrs	r3, r3, #1
 8006f92:	b21b      	sxth	r3, r3
 8006f94:	e006      	b.n	8006fa4 <hagl_draw_line+0xc0>
 8006f96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f9a:	0fda      	lsrs	r2, r3, #31
 8006f9c:	4413      	add	r3, r2
 8006f9e:	105b      	asrs	r3, r3, #1
 8006fa0:	425b      	negs	r3, r3
 8006fa2:	b21b      	sxth	r3, r3
 8006fa4:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8006fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006faa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006fae:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ff1f 	bl	8006df4 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8006fb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d105      	bne.n	8006fce <hagl_draw_line+0xea>
 8006fc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006fc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d02d      	beq.n	800702a <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006fce:	8afb      	ldrh	r3, [r7, #22]
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8006fd6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006fda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006fde:	425b      	negs	r3, r3
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	dd0c      	ble.n	8006ffe <hagl_draw_line+0x11a>
            err -= dy;
 8006fe4:	8afa      	ldrh	r2, [r7, #22]
 8006fe6:	8a3b      	ldrh	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	8a7b      	ldrh	r3, [r7, #18]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	b21b      	sxth	r3, r3
 8006ffc:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006ffe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007002:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007006:	429a      	cmp	r2, r3
 8007008:	dacd      	bge.n	8006fa6 <hagl_draw_line+0xc2>
            err += dx;
 800700a:	8afa      	ldrh	r2, [r7, #22]
 800700c:	8abb      	ldrh	r3, [r7, #20]
 800700e:	4413      	add	r3, r2
 8007010:	b29b      	uxth	r3, r3
 8007012:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8007014:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007018:	b29a      	uxth	r2, r3
 800701a:	89fb      	ldrh	r3, [r7, #14]
 800701c:	4413      	add	r3, r2
 800701e:	b29b      	uxth	r3, r3
 8007020:	b21b      	sxth	r3, r3
 8007022:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8007024:	e7bf      	b.n	8006fa6 <hagl_draw_line+0xc2>
        return;
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <hagl_draw_line+0x148>
            break;
 800702a:	bf00      	nop
        }
    }
}
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007032:	bf00      	nop
 8007034:	2000020c 	.word	0x2000020c

08007038 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4623      	mov	r3, r4
 8007048:	80fb      	strh	r3, [r7, #6]
 800704a:	4603      	mov	r3, r0
 800704c:	80bb      	strh	r3, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	807b      	strh	r3, [r7, #2]
 8007052:	4613      	mov	r3, r2
 8007054:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007056:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800705a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800705e:	429a      	cmp	r2, r3
 8007060:	dd0e      	ble.n	8007080 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	887b      	ldrh	r3, [r7, #2]
 8007066:	4413      	add	r3, r2
 8007068:	b29b      	uxth	r3, r3
 800706a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	887b      	ldrh	r3, [r7, #2]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	b29b      	uxth	r3, r3
 800707e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007080:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007084:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007088:	429a      	cmp	r2, r3
 800708a:	dd0e      	ble.n	80070aa <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800708c:	88ba      	ldrh	r2, [r7, #4]
 800708e:	883b      	ldrh	r3, [r7, #0]
 8007090:	4413      	add	r3, r2
 8007092:	b29b      	uxth	r3, r3
 8007094:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007096:	88ba      	ldrh	r2, [r7, #4]
 8007098:	883b      	ldrh	r3, [r7, #0]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	b29b      	uxth	r3, r3
 800709e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80070a0:	88ba      	ldrh	r2, [r7, #4]
 80070a2:	883b      	ldrh	r3, [r7, #0]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80070aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070ae:	4a24      	ldr	r2, [pc, #144]	@ (8007140 <hagl_draw_rectangle+0x108>)
 80070b0:	8812      	ldrh	r2, [r2, #0]
 80070b2:	4293      	cmp	r3, r2
 80070b4:	db3e      	blt.n	8007134 <hagl_draw_rectangle+0xfc>
 80070b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070ba:	4a21      	ldr	r2, [pc, #132]	@ (8007140 <hagl_draw_rectangle+0x108>)
 80070bc:	8852      	ldrh	r2, [r2, #2]
 80070be:	4293      	cmp	r3, r2
 80070c0:	db38      	blt.n	8007134 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80070c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007140 <hagl_draw_rectangle+0x108>)
 80070c8:	8892      	ldrh	r2, [r2, #4]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	dc34      	bgt.n	8007138 <hagl_draw_rectangle+0x100>
 80070ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80070d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007140 <hagl_draw_rectangle+0x108>)
 80070d4:	88d2      	ldrh	r2, [r2, #6]
 80070d6:	4293      	cmp	r3, r2
 80070d8:	dc2e      	bgt.n	8007138 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3301      	adds	r3, #1
 80070e4:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 80070e6:	883a      	ldrh	r2, [r7, #0]
 80070e8:	88bb      	ldrh	r3, [r7, #4]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3301      	adds	r3, #1
 80070f0:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 80070f2:	8c3b      	ldrh	r3, [r7, #32]
 80070f4:	89fa      	ldrh	r2, [r7, #14]
 80070f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80070fe:	f7ff feab 	bl	8006e58 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8007102:	8c3b      	ldrh	r3, [r7, #32]
 8007104:	89fa      	ldrh	r2, [r7, #14]
 8007106:	f9b7 1000 	ldrsh.w	r1, [r7]
 800710a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800710e:	f7ff fea3 	bl	8006e58 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 8007112:	8c3b      	ldrh	r3, [r7, #32]
 8007114:	89ba      	ldrh	r2, [r7, #12]
 8007116:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800711a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800711e:	f7ff febe 	bl	8006e9e <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 8007122:	8c3b      	ldrh	r3, [r7, #32]
 8007124:	89ba      	ldrh	r2, [r7, #12]
 8007126:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800712a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800712e:	f7ff feb6 	bl	8006e9e <hagl_draw_vline>
 8007132:	e002      	b.n	800713a <hagl_draw_rectangle+0x102>
        return;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <hagl_draw_rectangle+0x102>
        return;
 8007138:	bf00      	nop
}
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	bd90      	pop	{r4, r7, pc}
 8007140:	2000020c 	.word	0x2000020c

08007144 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007144:	b590      	push	{r4, r7, lr}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4623      	mov	r3, r4
 8007154:	80fb      	strh	r3, [r7, #6]
 8007156:	4603      	mov	r3, r0
 8007158:	80bb      	strh	r3, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	807b      	strh	r3, [r7, #2]
 800715e:	4613      	mov	r3, r2
 8007160:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007162:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007166:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800716a:	429a      	cmp	r2, r3
 800716c:	dd0e      	ble.n	800718c <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	887b      	ldrh	r3, [r7, #2]
 8007172:	4413      	add	r3, r2
 8007174:	b29b      	uxth	r3, r3
 8007176:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007178:	88fa      	ldrh	r2, [r7, #6]
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	b29b      	uxth	r3, r3
 8007180:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007182:	88fa      	ldrh	r2, [r7, #6]
 8007184:	887b      	ldrh	r3, [r7, #2]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	b29b      	uxth	r3, r3
 800718a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800718c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007190:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007194:	429a      	cmp	r2, r3
 8007196:	dd0e      	ble.n	80071b6 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007198:	88ba      	ldrh	r2, [r7, #4]
 800719a:	883b      	ldrh	r3, [r7, #0]
 800719c:	4413      	add	r3, r2
 800719e:	b29b      	uxth	r3, r3
 80071a0:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80071a2:	88ba      	ldrh	r2, [r7, #4]
 80071a4:	883b      	ldrh	r3, [r7, #0]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80071ac:	88ba      	ldrh	r2, [r7, #4]
 80071ae:	883b      	ldrh	r3, [r7, #0]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80071b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071ba:	4a33      	ldr	r2, [pc, #204]	@ (8007288 <hagl_fill_rectangle+0x144>)
 80071bc:	8812      	ldrh	r2, [r2, #0]
 80071be:	4293      	cmp	r3, r2
 80071c0:	db5b      	blt.n	800727a <hagl_fill_rectangle+0x136>
 80071c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071c6:	4a30      	ldr	r2, [pc, #192]	@ (8007288 <hagl_fill_rectangle+0x144>)
 80071c8:	8852      	ldrh	r2, [r2, #2]
 80071ca:	4293      	cmp	r3, r2
 80071cc:	db55      	blt.n	800727a <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80071ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007288 <hagl_fill_rectangle+0x144>)
 80071d4:	8892      	ldrh	r2, [r2, #4]
 80071d6:	4293      	cmp	r3, r2
 80071d8:	dc51      	bgt.n	800727e <hagl_fill_rectangle+0x13a>
 80071da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071de:	4a2a      	ldr	r2, [pc, #168]	@ (8007288 <hagl_fill_rectangle+0x144>)
 80071e0:	88d2      	ldrh	r2, [r2, #6]
 80071e2:	4293      	cmp	r3, r2
 80071e4:	dc4b      	bgt.n	800727e <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80071e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ea:	4a27      	ldr	r2, [pc, #156]	@ (8007288 <hagl_fill_rectangle+0x144>)
 80071ec:	8812      	ldrh	r2, [r2, #0]
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fded 	bl	8006dd0 <max>
 80071f6:	4603      	mov	r3, r0
 80071f8:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 80071fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071fe:	4a22      	ldr	r2, [pc, #136]	@ (8007288 <hagl_fill_rectangle+0x144>)
 8007200:	8852      	ldrh	r2, [r2, #2]
 8007202:	4611      	mov	r1, r2
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff fde3 	bl	8006dd0 <max>
 800720a:	4603      	mov	r3, r0
 800720c:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800720e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007212:	4a1d      	ldr	r2, [pc, #116]	@ (8007288 <hagl_fill_rectangle+0x144>)
 8007214:	8892      	ldrh	r2, [r2, #4]
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff fdc7 	bl	8006dac <min>
 800721e:	4603      	mov	r3, r0
 8007220:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8007222:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007226:	4a18      	ldr	r2, [pc, #96]	@ (8007288 <hagl_fill_rectangle+0x144>)
 8007228:	88d2      	ldrh	r2, [r2, #6]
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fdbd 	bl	8006dac <min>
 8007232:	4603      	mov	r3, r0
 8007234:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8007236:	887a      	ldrh	r2, [r7, #2]
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	b29b      	uxth	r3, r3
 800723e:	3301      	adds	r3, #1
 8007240:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8007242:	883a      	ldrh	r2, [r7, #0]
 8007244:	88bb      	ldrh	r3, [r7, #4]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	b29b      	uxth	r3, r3
 800724a:	3301      	adds	r3, #1
 800724c:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800724e:	2300      	movs	r3, #0
 8007250:	81fb      	strh	r3, [r7, #14]
 8007252:	e00d      	b.n	8007270 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8007254:	88ba      	ldrh	r2, [r7, #4]
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	4413      	add	r3, r2
 800725a:	b29b      	uxth	r3, r3
 800725c:	b219      	sxth	r1, r3
 800725e:	8c3b      	ldrh	r3, [r7, #32]
 8007260:	89ba      	ldrh	r2, [r7, #12]
 8007262:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007266:	f7ff fdf7 	bl	8006e58 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800726a:	89fb      	ldrh	r3, [r7, #14]
 800726c:	3301      	adds	r3, #1
 800726e:	81fb      	strh	r3, [r7, #14]
 8007270:	89fa      	ldrh	r2, [r7, #14]
 8007272:	897b      	ldrh	r3, [r7, #10]
 8007274:	429a      	cmp	r2, r3
 8007276:	d3ed      	bcc.n	8007254 <hagl_fill_rectangle+0x110>
 8007278:	e002      	b.n	8007280 <hagl_fill_rectangle+0x13c>
        return;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <hagl_fill_rectangle+0x13c>
        return;
 800727e:	bf00      	nop
#endif
    }
}
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	bd90      	pop	{r4, r7, pc}
 8007286:	bf00      	nop
 8007288:	2000020c 	.word	0x2000020c

0800728c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800728c:	b590      	push	{r4, r7, lr}
 800728e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800729a:	f844 0c24 	str.w	r0, [r4, #-36]
 800729e:	460c      	mov	r4, r1
 80072a0:	4610      	mov	r0, r2
 80072a2:	4619      	mov	r1, r3
 80072a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072a8:	4622      	mov	r2, r4
 80072aa:	f823 2c26 	strh.w	r2, [r3, #-38]
 80072ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072b2:	4602      	mov	r2, r0
 80072b4:	f823 2c28 	strh.w	r2, [r3, #-40]
 80072b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072bc:	460a      	mov	r2, r1
 80072be:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80072c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072c6:	4619      	mov	r1, r3
 80072c8:	f107 0310 	add.w	r3, r7, #16
 80072cc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff fcd6 	bl	8006c88 <fontx_glyph>
 80072dc:	4603      	mov	r3, r0
 80072de:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80072e2:	f102 0209 	add.w	r2, r2, #9
 80072e6:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80072e8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80072ec:	f103 0309 	add.w	r3, r3, #9
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <hagl_put_char+0x6e>
        return 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e0c0      	b.n	800747c <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 80072fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80072fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007302:	461a      	mov	r2, r3
 8007304:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007308:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 800730c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007310:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007314:	461a      	mov	r2, r3
 8007316:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800731a:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 800731e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007322:	2210      	movs	r2, #16
 8007324:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007328:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800732c:	3a08      	subs	r2, #8
 800732e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007332:	3b18      	subs	r3, #24
 8007334:	4611      	mov	r1, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff fb0e 	bl	8006958 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800733c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007340:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8007344:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007348:	f102 020c 	add.w	r2, r2, #12
 800734c:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800734e:	2300      	movs	r3, #0
 8007350:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007354:	f102 020b 	add.w	r2, r2, #11
 8007358:	7013      	strb	r3, [r2, #0]
 800735a:	e071      	b.n	8007440 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800735c:	2300      	movs	r3, #0
 800735e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007362:	f102 020a 	add.w	r2, r2, #10
 8007366:	7013      	strb	r3, [r2, #0]
 8007368:	e047      	b.n	80073fa <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800736a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800736e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b25a      	sxtb	r2, r3
 8007376:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800737a:	f103 030a 	add.w	r3, r3, #10
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	2180      	movs	r1, #128	@ 0x80
 8007386:	fa41 f303 	asr.w	r3, r1, r3
 800738a:	b25b      	sxtb	r3, r3
 800738c:	4013      	ands	r3, r2
 800738e:	b25b      	sxtb	r3, r3
 8007390:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007394:	f102 0208 	add.w	r2, r2, #8
 8007398:	7013      	strb	r3, [r2, #0]
            if (set) {
 800739a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800739e:	f103 0308 	add.w	r3, r3, #8
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d010      	beq.n	80073ca <hagl_put_char+0x13e>
                *(ptr++) = color;
 80073a8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073ac:	f103 030c 	add.w	r3, r3, #12
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	1c9a      	adds	r2, r3, #2
 80073b4:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80073b8:	f101 010c 	add.w	r1, r1, #12
 80073bc:	600a      	str	r2, [r1, #0]
 80073be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80073c2:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	e00c      	b.n	80073e4 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80073ca:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073ce:	f103 030c 	add.w	r3, r3, #12
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	1c9a      	adds	r2, r3, #2
 80073d6:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80073da:	f101 010c 	add.w	r1, r1, #12
 80073de:	600a      	str	r2, [r1, #0]
 80073e0:	2200      	movs	r2, #0
 80073e2:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80073e4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80073e8:	f103 030a 	add.w	r3, r3, #10
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80073f4:	f102 020a 	add.w	r2, r2, #10
 80073f8:	7013      	strb	r3, [r2, #0]
 80073fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007402:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007406:	f102 020a 	add.w	r2, r2, #10
 800740a:	7812      	ldrb	r2, [r2, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3ac      	bcc.n	800736a <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8007410:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007414:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007418:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800741c:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8007420:	4413      	add	r3, r2
 8007422:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007426:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800742a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800742e:	f103 030b 	add.w	r3, r3, #11
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800743a:	f102 020b 	add.w	r2, r2, #11
 800743e:	7013      	strb	r3, [r2, #0]
 8007440:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007444:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007448:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800744c:	f102 020b 	add.w	r2, r2, #11
 8007450:	7812      	ldrb	r2, [r2, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d382      	bcc.n	800735c <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8007456:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800745a:	3b18      	subs	r3, #24
 800745c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007460:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8007464:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007468:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 800746c:	461a      	mov	r2, r3
 800746e:	f000 f85a 	bl	8007526 <hagl_blit>

    return bitmap.width;
 8007472:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007476:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800747a:	b2db      	uxtb	r3, r3
}
 800747c:	4618      	mov	r0, r3
 800747e:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	bd90      	pop	{r4, r7, pc}

08007488 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08c      	sub	sp, #48	@ 0x30
 800748c:	af02      	add	r7, sp, #8
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	4608      	mov	r0, r1
 8007492:	4611      	mov	r1, r2
 8007494:	461a      	mov	r2, r3
 8007496:	4603      	mov	r3, r0
 8007498:	817b      	strh	r3, [r7, #10]
 800749a:	460b      	mov	r3, r1
 800749c:	813b      	strh	r3, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80074a2:	897b      	ldrh	r3, [r7, #10]
 80074a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80074a6:	f107 0314 	add.w	r3, r7, #20
 80074aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fbcb 	bl	8006c48 <fontx_meta>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80074b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <hagl_put_text+0x3c>
        return 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	e02c      	b.n	800751e <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	60fa      	str	r2, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	2b0d      	cmp	r3, #13
 80074d2:	d002      	beq.n	80074da <hagl_put_text+0x52>
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	2b0a      	cmp	r3, #10
 80074d8:	d108      	bne.n	80074ec <hagl_put_text+0x64>
            x0 = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80074de:	7fbb      	ldrb	r3, [r7, #30]
 80074e0:	461a      	mov	r2, r3
 80074e2:	893b      	ldrh	r3, [r7, #8]
 80074e4:	4413      	add	r3, r2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	813b      	strh	r3, [r7, #8]
 80074ea:	e010      	b.n	800750e <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80074ec:	88f8      	ldrh	r0, [r7, #6]
 80074ee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80074f2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	4603      	mov	r3, r0
 80074fc:	6a38      	ldr	r0, [r7, #32]
 80074fe:	f7ff fec5 	bl	800728c <hagl_put_char>
 8007502:	4603      	mov	r3, r0
 8007504:	461a      	mov	r2, r3
 8007506:	897b      	ldrh	r3, [r7, #10]
 8007508:	4413      	add	r3, r2
 800750a:	b29b      	uxth	r3, r3
 800750c:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1d6      	bne.n	80074c4 <hagl_put_text+0x3c>

    return x0 - original;
 8007516:	897a      	ldrh	r2, [r7, #10]
 8007518:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	b29b      	uxth	r3, r3
}
 800751e:	4618      	mov	r0, r3
 8007520:	3728      	adds	r7, #40	@ 0x28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	4603      	mov	r3, r0
 800752e:	603a      	str	r2, [r7, #0]
 8007530:	80fb      	strh	r3, [r7, #6]
 8007532:	460b      	mov	r3, r1
 8007534:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800753c:	2300      	movs	r3, #0
 800753e:	827b      	strh	r3, [r7, #18]
 8007540:	e020      	b.n	8007584 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8007542:	2300      	movs	r3, #0
 8007544:	823b      	strh	r3, [r7, #16]
 8007546:	e015      	b.n	8007574 <hagl_blit+0x4e>
            color = *(ptr++);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	1c9a      	adds	r2, r3, #2
 800754c:	617a      	str	r2, [r7, #20]
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	8a3b      	ldrh	r3, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	b29b      	uxth	r3, r3
 800755a:	b218      	sxth	r0, r3
 800755c:	88ba      	ldrh	r2, [r7, #4]
 800755e:	8a7b      	ldrh	r3, [r7, #18]
 8007560:	4413      	add	r3, r2
 8007562:	b29b      	uxth	r3, r3
 8007564:	b21b      	sxth	r3, r3
 8007566:	89fa      	ldrh	r2, [r7, #14]
 8007568:	4619      	mov	r1, r3
 800756a:	f7ff fc43 	bl	8006df4 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800756e:	8a3b      	ldrh	r3, [r7, #16]
 8007570:	3301      	adds	r3, #1
 8007572:	823b      	strh	r3, [r7, #16]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	8a3a      	ldrh	r2, [r7, #16]
 800757a:	429a      	cmp	r2, r3
 800757c:	d3e4      	bcc.n	8007548 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800757e:	8a7b      	ldrh	r3, [r7, #18]
 8007580:	3301      	adds	r3, #1
 8007582:	827b      	strh	r3, [r7, #18]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	885b      	ldrh	r3, [r3, #2]
 8007588:	8a7a      	ldrh	r2, [r7, #18]
 800758a:	429a      	cmp	r2, r3
 800758c:	d3d9      	bcc.n	8007542 <hagl_blit+0x1c>
        }
    }
#endif
};
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8007598:	b590      	push	{r4, r7, lr}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	4611      	mov	r1, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	4623      	mov	r3, r4
 80075a8:	80fb      	strh	r3, [r7, #6]
 80075aa:	4603      	mov	r3, r0
 80075ac:	80bb      	strh	r3, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	807b      	strh	r3, [r7, #2]
 80075b2:	4613      	mov	r3, r2
 80075b4:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80075ba:	887b      	ldrh	r3, [r7, #2]
 80075bc:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f1c3 0303 	rsb	r3, r3, #3
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 80075cc:	88fa      	ldrh	r2, [r7, #6]
 80075ce:	89fb      	ldrh	r3, [r7, #14]
 80075d0:	4413      	add	r3, r2
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	b218      	sxth	r0, r3
 80075d6:	88ba      	ldrh	r2, [r7, #4]
 80075d8:	89bb      	ldrh	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b21b      	sxth	r3, r3
 80075e0:	883a      	ldrh	r2, [r7, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	f7ff fc06 	bl	8006df4 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	89fb      	ldrh	r3, [r7, #14]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	b218      	sxth	r0, r3
 80075f2:	88ba      	ldrh	r2, [r7, #4]
 80075f4:	89bb      	ldrh	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	b21b      	sxth	r3, r3
 80075fc:	883a      	ldrh	r2, [r7, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	f7ff fbf8 	bl	8006df4 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8007604:	88fa      	ldrh	r2, [r7, #6]
 8007606:	89fb      	ldrh	r3, [r7, #14]
 8007608:	4413      	add	r3, r2
 800760a:	b29b      	uxth	r3, r3
 800760c:	b218      	sxth	r0, r3
 800760e:	88ba      	ldrh	r2, [r7, #4]
 8007610:	89bb      	ldrh	r3, [r7, #12]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	b29b      	uxth	r3, r3
 8007616:	b21b      	sxth	r3, r3
 8007618:	883a      	ldrh	r2, [r7, #0]
 800761a:	4619      	mov	r1, r3
 800761c:	f7ff fbea 	bl	8006df4 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	b29b      	uxth	r3, r3
 8007628:	b218      	sxth	r0, r3
 800762a:	88ba      	ldrh	r2, [r7, #4]
 800762c:	89bb      	ldrh	r3, [r7, #12]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	b29b      	uxth	r3, r3
 8007632:	b21b      	sxth	r3, r3
 8007634:	883a      	ldrh	r2, [r7, #0]
 8007636:	4619      	mov	r1, r3
 8007638:	f7ff fbdc 	bl	8006df4 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 800763c:	88fa      	ldrh	r2, [r7, #6]
 800763e:	89bb      	ldrh	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	b29b      	uxth	r3, r3
 8007644:	b218      	sxth	r0, r3
 8007646:	88ba      	ldrh	r2, [r7, #4]
 8007648:	89fb      	ldrh	r3, [r7, #14]
 800764a:	4413      	add	r3, r2
 800764c:	b29b      	uxth	r3, r3
 800764e:	b21b      	sxth	r3, r3
 8007650:	883a      	ldrh	r2, [r7, #0]
 8007652:	4619      	mov	r1, r3
 8007654:	f7ff fbce 	bl	8006df4 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	89bb      	ldrh	r3, [r7, #12]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	b29b      	uxth	r3, r3
 8007660:	b218      	sxth	r0, r3
 8007662:	88ba      	ldrh	r2, [r7, #4]
 8007664:	89fb      	ldrh	r3, [r7, #14]
 8007666:	4413      	add	r3, r2
 8007668:	b29b      	uxth	r3, r3
 800766a:	b21b      	sxth	r3, r3
 800766c:	883a      	ldrh	r2, [r7, #0]
 800766e:	4619      	mov	r1, r3
 8007670:	f7ff fbc0 	bl	8006df4 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	89bb      	ldrh	r3, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	b29b      	uxth	r3, r3
 800767c:	b218      	sxth	r0, r3
 800767e:	88ba      	ldrh	r2, [r7, #4]
 8007680:	89fb      	ldrh	r3, [r7, #14]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	b29b      	uxth	r3, r3
 8007686:	b21b      	sxth	r3, r3
 8007688:	883a      	ldrh	r2, [r7, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	f7ff fbb2 	bl	8006df4 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007690:	88fa      	ldrh	r2, [r7, #6]
 8007692:	89bb      	ldrh	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	b29b      	uxth	r3, r3
 8007698:	b218      	sxth	r0, r3
 800769a:	88ba      	ldrh	r2, [r7, #4]
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	883a      	ldrh	r2, [r7, #0]
 80076a6:	4619      	mov	r1, r3
 80076a8:	f7ff fba4 	bl	8006df4 <hagl_put_pixel>

    while (y >= x) {
 80076ac:	e097      	b.n	80077de <hagl_draw_circle+0x246>
        x++;
 80076ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3301      	adds	r3, #1
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80076ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dd14      	ble.n	80076ec <hagl_draw_circle+0x154>
            y--;
 80076c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80076ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80076d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	b29b      	uxth	r3, r3
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	b29a      	uxth	r2, r3
 80076de:	897b      	ldrh	r3, [r7, #10]
 80076e0:	4413      	add	r3, r2
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	330a      	adds	r3, #10
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	817b      	strh	r3, [r7, #10]
 80076ea:	e008      	b.n	80076fe <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 80076ec:	89fb      	ldrh	r3, [r7, #14]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	897b      	ldrh	r3, [r7, #10]
 80076f4:	4413      	add	r3, r2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3306      	adds	r3, #6
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 80076fe:	88fa      	ldrh	r2, [r7, #6]
 8007700:	89fb      	ldrh	r3, [r7, #14]
 8007702:	4413      	add	r3, r2
 8007704:	b29b      	uxth	r3, r3
 8007706:	b218      	sxth	r0, r3
 8007708:	88ba      	ldrh	r2, [r7, #4]
 800770a:	89bb      	ldrh	r3, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	b29b      	uxth	r3, r3
 8007710:	b21b      	sxth	r3, r3
 8007712:	883a      	ldrh	r2, [r7, #0]
 8007714:	4619      	mov	r1, r3
 8007716:	f7ff fb6d 	bl	8006df4 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	89fb      	ldrh	r3, [r7, #14]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	b218      	sxth	r0, r3
 8007724:	88ba      	ldrh	r2, [r7, #4]
 8007726:	89bb      	ldrh	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	b29b      	uxth	r3, r3
 800772c:	b21b      	sxth	r3, r3
 800772e:	883a      	ldrh	r2, [r7, #0]
 8007730:	4619      	mov	r1, r3
 8007732:	f7ff fb5f 	bl	8006df4 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	89fb      	ldrh	r3, [r7, #14]
 800773a:	4413      	add	r3, r2
 800773c:	b29b      	uxth	r3, r3
 800773e:	b218      	sxth	r0, r3
 8007740:	88ba      	ldrh	r2, [r7, #4]
 8007742:	89bb      	ldrh	r3, [r7, #12]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	b29b      	uxth	r3, r3
 8007748:	b21b      	sxth	r3, r3
 800774a:	883a      	ldrh	r2, [r7, #0]
 800774c:	4619      	mov	r1, r3
 800774e:	f7ff fb51 	bl	8006df4 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	89fb      	ldrh	r3, [r7, #14]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	b218      	sxth	r0, r3
 800775c:	88ba      	ldrh	r2, [r7, #4]
 800775e:	89bb      	ldrh	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	b29b      	uxth	r3, r3
 8007764:	b21b      	sxth	r3, r3
 8007766:	883a      	ldrh	r2, [r7, #0]
 8007768:	4619      	mov	r1, r3
 800776a:	f7ff fb43 	bl	8006df4 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 800776e:	88fa      	ldrh	r2, [r7, #6]
 8007770:	89bb      	ldrh	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	b29b      	uxth	r3, r3
 8007776:	b218      	sxth	r0, r3
 8007778:	88ba      	ldrh	r2, [r7, #4]
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	4413      	add	r3, r2
 800777e:	b29b      	uxth	r3, r3
 8007780:	b21b      	sxth	r3, r3
 8007782:	883a      	ldrh	r2, [r7, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	f7ff fb35 	bl	8006df4 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 800778a:	88fa      	ldrh	r2, [r7, #6]
 800778c:	89bb      	ldrh	r3, [r7, #12]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	b29b      	uxth	r3, r3
 8007792:	b218      	sxth	r0, r3
 8007794:	88ba      	ldrh	r2, [r7, #4]
 8007796:	89fb      	ldrh	r3, [r7, #14]
 8007798:	4413      	add	r3, r2
 800779a:	b29b      	uxth	r3, r3
 800779c:	b21b      	sxth	r3, r3
 800779e:	883a      	ldrh	r2, [r7, #0]
 80077a0:	4619      	mov	r1, r3
 80077a2:	f7ff fb27 	bl	8006df4 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	89bb      	ldrh	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	b218      	sxth	r0, r3
 80077b0:	88ba      	ldrh	r2, [r7, #4]
 80077b2:	89fb      	ldrh	r3, [r7, #14]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b21b      	sxth	r3, r3
 80077ba:	883a      	ldrh	r2, [r7, #0]
 80077bc:	4619      	mov	r1, r3
 80077be:	f7ff fb19 	bl	8006df4 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	89bb      	ldrh	r3, [r7, #12]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	b218      	sxth	r0, r3
 80077cc:	88ba      	ldrh	r2, [r7, #4]
 80077ce:	89fb      	ldrh	r3, [r7, #14]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	b21b      	sxth	r3, r3
 80077d6:	883a      	ldrh	r2, [r7, #0]
 80077d8:	4619      	mov	r1, r3
 80077da:	f7ff fb0b 	bl	8006df4 <hagl_put_pixel>
    while (y >= x) {
 80077de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80077e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	f6bf af61 	bge.w	80076ae <hagl_draw_circle+0x116>
    }
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd90      	pop	{r4, r7, pc}

080077f6 <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 80077f6:	b590      	push	{r4, r7, lr}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	4604      	mov	r4, r0
 80077fe:	4608      	mov	r0, r1
 8007800:	4611      	mov	r1, r2
 8007802:	461a      	mov	r2, r3
 8007804:	4623      	mov	r3, r4
 8007806:	80fb      	strh	r3, [r7, #6]
 8007808:	4603      	mov	r3, r0
 800780a:	80bb      	strh	r3, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
 8007810:	4613      	mov	r3, r2
 8007812:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007818:	887b      	ldrh	r3, [r7, #2]
 800781a:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	b29b      	uxth	r3, r3
 8007822:	f1c3 0303 	rsb	r3, r3, #3
 8007826:	b29b      	uxth	r3, r3
 8007828:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 800782a:	e067      	b.n	80078fc <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	89fb      	ldrh	r3, [r7, #14]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	b29b      	uxth	r3, r3
 8007834:	b218      	sxth	r0, r3
 8007836:	88ba      	ldrh	r2, [r7, #4]
 8007838:	89bb      	ldrh	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	b219      	sxth	r1, r3
 8007840:	89fb      	ldrh	r3, [r7, #14]
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	b29a      	uxth	r2, r3
 8007846:	883b      	ldrh	r3, [r7, #0]
 8007848:	f7ff fb06 	bl	8006e58 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 800784c:	88fa      	ldrh	r2, [r7, #6]
 800784e:	89fb      	ldrh	r3, [r7, #14]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	b29b      	uxth	r3, r3
 8007854:	b218      	sxth	r0, r3
 8007856:	88ba      	ldrh	r2, [r7, #4]
 8007858:	89bb      	ldrh	r3, [r7, #12]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	b29b      	uxth	r3, r3
 800785e:	b219      	sxth	r1, r3
 8007860:	89fb      	ldrh	r3, [r7, #14]
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	883b      	ldrh	r3, [r7, #0]
 8007868:	f7ff faf6 	bl	8006e58 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 800786c:	88fa      	ldrh	r2, [r7, #6]
 800786e:	89bb      	ldrh	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	b29b      	uxth	r3, r3
 8007874:	b218      	sxth	r0, r3
 8007876:	88ba      	ldrh	r2, [r7, #4]
 8007878:	89fb      	ldrh	r3, [r7, #14]
 800787a:	4413      	add	r3, r2
 800787c:	b29b      	uxth	r3, r3
 800787e:	b219      	sxth	r1, r3
 8007880:	89bb      	ldrh	r3, [r7, #12]
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	883b      	ldrh	r3, [r7, #0]
 8007888:	f7ff fae6 	bl	8006e58 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	89bb      	ldrh	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	b29b      	uxth	r3, r3
 8007894:	b218      	sxth	r0, r3
 8007896:	88ba      	ldrh	r2, [r7, #4]
 8007898:	89fb      	ldrh	r3, [r7, #14]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	b29b      	uxth	r3, r3
 800789e:	b219      	sxth	r1, r3
 80078a0:	89bb      	ldrh	r3, [r7, #12]
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	883b      	ldrh	r3, [r7, #0]
 80078a8:	f7ff fad6 	bl	8006e58 <hagl_draw_hline>
        x++;
 80078ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3301      	adds	r3, #1
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80078b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dd14      	ble.n	80078ea <hagl_fill_circle+0xf4>
            y--;
 80078c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80078cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80078d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	b29a      	uxth	r2, r3
 80078dc:	897b      	ldrh	r3, [r7, #10]
 80078de:	4413      	add	r3, r2
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	330a      	adds	r3, #10
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	817b      	strh	r3, [r7, #10]
 80078e8:	e008      	b.n	80078fc <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	897b      	ldrh	r3, [r7, #10]
 80078f2:	4413      	add	r3, r2
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	3306      	adds	r3, #6
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 80078fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007900:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007904:	429a      	cmp	r2, r3
 8007906:	da91      	bge.n	800782c <hagl_fill_circle+0x36>
        }
    }
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bd90      	pop	{r4, r7, pc}

08007912 <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007912:	b590      	push	{r4, r7, lr}
 8007914:	b087      	sub	sp, #28
 8007916:	af02      	add	r7, sp, #8
 8007918:	4603      	mov	r3, r0
 800791a:	6039      	str	r1, [r7, #0]
 800791c:	80fb      	strh	r3, [r7, #6]
 800791e:	4613      	mov	r3, r2
 8007920:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007922:	2300      	movs	r3, #0
 8007924:	81fb      	strh	r3, [r7, #14]
 8007926:	e02a      	b.n	800797e <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007928:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	4413      	add	r3, r2
        hagl_draw_line(
 8007932:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007936:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	3302      	adds	r3, #2
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	4413      	add	r3, r2
        hagl_draw_line(
 8007942:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800794a:	3301      	adds	r3, #1
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4413      	add	r3, r2
        hagl_draw_line(
 8007952:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	3306      	adds	r3, #6
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4413      	add	r3, r2
        hagl_draw_line(
 8007962:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007966:	88bb      	ldrh	r3, [r7, #4]
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	4613      	mov	r3, r2
 800796c:	4622      	mov	r2, r4
 800796e:	f7ff fab9 	bl	8006ee4 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007976:	b29b      	uxth	r3, r3
 8007978:	3301      	adds	r3, #1
 800797a:	b29b      	uxth	r3, r3
 800797c:	81fb      	strh	r3, [r7, #14]
 800797e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007986:	3b01      	subs	r3, #1
 8007988:	429a      	cmp	r2, r3
 800798a:	dbcd      	blt.n	8007928 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	3302      	adds	r3, #2
    hagl_draw_line(
 8007996:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 800799a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800799e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079a2:	3b01      	subs	r3, #1
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	4413      	add	r3, r2
    hagl_draw_line(
 80079aa:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 80079ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	3b02      	subs	r3, #2
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	4413      	add	r3, r2
    hagl_draw_line(
 80079ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80079be:	88bb      	ldrh	r3, [r7, #4]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	4613      	mov	r3, r2
 80079c4:	4622      	mov	r2, r4
 80079c6:	f7ff fa8d 	bl	8006ee4 <hagl_draw_line>
        color
    );
}
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd90      	pop	{r4, r7, pc}

080079d2 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b0ac      	sub	sp, #176	@ 0xb0
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	4603      	mov	r3, r0
 80079da:	6039      	str	r1, [r7, #0]
 80079dc:	80fb      	strh	r3, [r7, #6]
 80079de:	4613      	mov	r3, r2
 80079e0:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 80079e2:	2380      	movs	r3, #128	@ 0x80
 80079e4:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 80079ee:	2300      	movs	r3, #0
 80079f0:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80079f4:	e02e      	b.n	8007a54 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 80079f6:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	3302      	adds	r3, #2
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	4413      	add	r3, r2
 8007a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a06:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	dd08      	ble.n	8007a20 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007a0e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	3302      	adds	r3, #2
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4413      	add	r3, r2
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007a20:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	3302      	adds	r3, #2
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a30:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007a34:	429a      	cmp	r2, r3
 8007a36:	da08      	bge.n	8007a4a <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007a38:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	3302      	adds	r3, #2
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007a4a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007a4e:	3301      	adds	r3, #1
 8007a50:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007a54:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	dbca      	blt.n	80079f6 <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007a60:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007a64:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007a68:	e144      	b.n	8007cf4 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007a80:	e0a6      	b.n	8007bd0 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007a82:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a98:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007a9c:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab4:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007ab8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ace:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007ad2:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	3302      	adds	r3, #2
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	4413      	add	r3, r2
 8007ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aea:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007aee:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007afa:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b06:	d50c      	bpl.n	8007b22 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007b08:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b14:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	da19      	bge.n	8007b56 <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007b22:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007b2e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3a:	d53e      	bpl.n	8007bba <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007b3c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b40:	ee07 3a90 	vmov	s15, r3
 8007b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b48:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b54:	db31      	blt.n	8007bba <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007b56:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b62:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007b66:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b6a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007b6e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7a:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007b7e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007b82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b8a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b96:	ee17 3a90 	vmov	r3, s15
 8007b9a:	b21a      	sxth	r2, r3
 8007b9c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007ba0:	b292      	uxth	r2, r2
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	33b0      	adds	r3, #176	@ 0xb0
 8007ba6:	443b      	add	r3, r7
 8007ba8:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007bac:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007bba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007bbe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007bc2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3301      	adds	r3, #1
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007bd0:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	f6ff af52 	blt.w	8007a82 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007be4:	e046      	b.n	8007c74 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007be6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	33b0      	adds	r3, #176	@ 0xb0
 8007bee:	443b      	add	r3, r7
 8007bf0:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007bf4:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	33b0      	adds	r3, #176	@ 0xb0
 8007bfe:	443b      	add	r3, r7
 8007c00:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d92e      	bls.n	8007c66 <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007c08:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	33b0      	adds	r3, #176	@ 0xb0
 8007c10:	443b      	add	r3, r7
 8007c12:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007c16:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007c1a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	33b0      	adds	r3, #176	@ 0xb0
 8007c28:	443b      	add	r3, r7
 8007c2a:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007c2e:	0053      	lsls	r3, r2, #1
 8007c30:	33b0      	adds	r3, #176	@ 0xb0
 8007c32:	443b      	add	r3, r7
 8007c34:	460a      	mov	r2, r1
 8007c36:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007c3a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c3e:	3301      	adds	r3, #1
 8007c40:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	33b0      	adds	r3, #176	@ 0xb0
 8007c48:	443b      	add	r3, r7
 8007c4a:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007c4e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <hagl_fill_polygon+0x2a2>
                    i--;
 8007c56:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007c64:	e006      	b.n	8007c74 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007c66:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007c74:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007c78:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	dbb1      	blt.n	8007be6 <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007c82:	2300      	movs	r3, #0
 8007c84:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007c88:	e027      	b.n	8007cda <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007c8a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007c8e:	3301      	adds	r3, #1
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	33b0      	adds	r3, #176	@ 0xb0
 8007c94:	443b      	add	r3, r7
 8007c96:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007c9a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	33b0      	adds	r3, #176	@ 0xb0
 8007ca2:	443b      	add	r3, r7
 8007ca4:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007cb0:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	33b0      	adds	r3, #176	@ 0xb0
 8007cb8:	443b      	add	r3, r7
 8007cba:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007cbe:	b218      	sxth	r0, r3
 8007cc0:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007cc4:	88bb      	ldrh	r3, [r7, #4]
 8007cc6:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007cca:	f7ff f8c5 	bl	8006e58 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007cce:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007cda:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007cde:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	dbd1      	blt.n	8007c8a <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007ce6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3301      	adds	r3, #1
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007cf4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007cf8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	f6ff aeb4 	blt.w	8007a6a <hagl_fill_polygon+0x98>
        }
    }
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	37b0      	adds	r7, #176	@ 0xb0
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	80fb      	strh	r3, [r7, #6]
 8007d1e:	4603      	mov	r3, r0
 8007d20:	80bb      	strh	r3, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	807b      	strh	r3, [r7, #2]
 8007d26:	4613      	mov	r3, r2
 8007d28:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	81bb      	strh	r3, [r7, #12]
 8007d2e:	88bb      	ldrh	r3, [r7, #4]
 8007d30:	81fb      	strh	r3, [r7, #14]
 8007d32:	887b      	ldrh	r3, [r7, #2]
 8007d34:	823b      	strh	r3, [r7, #16]
 8007d36:	883b      	ldrh	r3, [r7, #0]
 8007d38:	827b      	strh	r3, [r7, #18]
 8007d3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d3c:	82bb      	strh	r3, [r7, #20]
 8007d3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d40:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007d42:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007d44:	f107 030c 	add.w	r3, r7, #12
 8007d48:	4619      	mov	r1, r3
 8007d4a:	2003      	movs	r0, #3
 8007d4c:	f7ff fde1 	bl	8007912 <hagl_draw_polygon>
};
 8007d50:	bf00      	nop
 8007d52:	371c      	adds	r7, #28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd90      	pop	{r4, r7, pc}

08007d58 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007d58:	b590      	push	{r4, r7, lr}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	461a      	mov	r2, r3
 8007d66:	4623      	mov	r3, r4
 8007d68:	80fb      	strh	r3, [r7, #6]
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	80bb      	strh	r3, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	807b      	strh	r3, [r7, #2]
 8007d72:	4613      	mov	r3, r2
 8007d74:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	81bb      	strh	r3, [r7, #12]
 8007d7a:	88bb      	ldrh	r3, [r7, #4]
 8007d7c:	81fb      	strh	r3, [r7, #14]
 8007d7e:	887b      	ldrh	r3, [r7, #2]
 8007d80:	823b      	strh	r3, [r7, #16]
 8007d82:	883b      	ldrh	r3, [r7, #0]
 8007d84:	827b      	strh	r3, [r7, #18]
 8007d86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d88:	82bb      	strh	r3, [r7, #20]
 8007d8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007d8c:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007d8e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007d90:	f107 030c 	add.w	r3, r7, #12
 8007d94:	4619      	mov	r1, r3
 8007d96:	2003      	movs	r0, #3
 8007d98:	f7ff fe1b 	bl	80079d2 <hagl_fill_polygon>
}
 8007d9c:	bf00      	nop
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd90      	pop	{r4, r7, pc}

08007da4 <malloc>:
 8007da4:	4b02      	ldr	r3, [pc, #8]	@ (8007db0 <malloc+0xc>)
 8007da6:	4601      	mov	r1, r0
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	f000 b82d 	b.w	8007e08 <_malloc_r>
 8007dae:	bf00      	nop
 8007db0:	20000214 	.word	0x20000214

08007db4 <free>:
 8007db4:	4b02      	ldr	r3, [pc, #8]	@ (8007dc0 <free+0xc>)
 8007db6:	4601      	mov	r1, r0
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	f000 b995 	b.w	80080e8 <_free_r>
 8007dbe:	bf00      	nop
 8007dc0:	20000214 	.word	0x20000214

08007dc4 <sbrk_aligned>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e04 <sbrk_aligned+0x40>)
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	b911      	cbnz	r1, 8007dd6 <sbrk_aligned+0x12>
 8007dd0:	f000 f940 	bl	8008054 <_sbrk_r>
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 f93b 	bl	8008054 <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d103      	bne.n	8007dea <sbrk_aligned+0x26>
 8007de2:	f04f 34ff 	mov.w	r4, #4294967295
 8007de6:	4620      	mov	r0, r4
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	1cc4      	adds	r4, r0, #3
 8007dec:	f024 0403 	bic.w	r4, r4, #3
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d0f8      	beq.n	8007de6 <sbrk_aligned+0x22>
 8007df4:	1a21      	subs	r1, r4, r0
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 f92c 	bl	8008054 <_sbrk_r>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d1f2      	bne.n	8007de6 <sbrk_aligned+0x22>
 8007e00:	e7ef      	b.n	8007de2 <sbrk_aligned+0x1e>
 8007e02:	bf00      	nop
 8007e04:	2000aec4 	.word	0x2000aec4

08007e08 <_malloc_r>:
 8007e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	1ccd      	adds	r5, r1, #3
 8007e0e:	f025 0503 	bic.w	r5, r5, #3
 8007e12:	3508      	adds	r5, #8
 8007e14:	2d0c      	cmp	r5, #12
 8007e16:	bf38      	it	cc
 8007e18:	250c      	movcc	r5, #12
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	db01      	blt.n	8007e24 <_malloc_r+0x1c>
 8007e20:	42a9      	cmp	r1, r5
 8007e22:	d904      	bls.n	8007e2e <_malloc_r+0x26>
 8007e24:	230c      	movs	r3, #12
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f04 <_malloc_r+0xfc>
 8007e32:	f000 f869 	bl	8007f08 <__malloc_lock>
 8007e36:	f8d8 3000 	ldr.w	r3, [r8]
 8007e3a:	461c      	mov	r4, r3
 8007e3c:	bb44      	cbnz	r4, 8007e90 <_malloc_r+0x88>
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4630      	mov	r0, r6
 8007e42:	f7ff ffbf 	bl	8007dc4 <sbrk_aligned>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	4604      	mov	r4, r0
 8007e4a:	d158      	bne.n	8007efe <_malloc_r+0xf6>
 8007e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e50:	4627      	mov	r7, r4
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d143      	bne.n	8007ede <_malloc_r+0xd6>
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d04b      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4630      	mov	r0, r6
 8007e60:	eb04 0903 	add.w	r9, r4, r3
 8007e64:	f000 f8f6 	bl	8008054 <_sbrk_r>
 8007e68:	4581      	cmp	r9, r0
 8007e6a:	d142      	bne.n	8007ef2 <_malloc_r+0xea>
 8007e6c:	6821      	ldr	r1, [r4, #0]
 8007e6e:	1a6d      	subs	r5, r5, r1
 8007e70:	4629      	mov	r1, r5
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ffa6 	bl	8007dc4 <sbrk_aligned>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d03a      	beq.n	8007ef2 <_malloc_r+0xea>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	442b      	add	r3, r5
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	f8d8 3000 	ldr.w	r3, [r8]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	bb62      	cbnz	r2, 8007ee4 <_malloc_r+0xdc>
 8007e8a:	f8c8 7000 	str.w	r7, [r8]
 8007e8e:	e00f      	b.n	8007eb0 <_malloc_r+0xa8>
 8007e90:	6822      	ldr	r2, [r4, #0]
 8007e92:	1b52      	subs	r2, r2, r5
 8007e94:	d420      	bmi.n	8007ed8 <_malloc_r+0xd0>
 8007e96:	2a0b      	cmp	r2, #11
 8007e98:	d917      	bls.n	8007eca <_malloc_r+0xc2>
 8007e9a:	1961      	adds	r1, r4, r5
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	6025      	str	r5, [r4, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	6059      	strne	r1, [r3, #4]
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	bf08      	it	eq
 8007ea8:	f8c8 1000 	streq.w	r1, [r8]
 8007eac:	5162      	str	r2, [r4, r5]
 8007eae:	604b      	str	r3, [r1, #4]
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 f82f 	bl	8007f14 <__malloc_unlock>
 8007eb6:	f104 000b 	add.w	r0, r4, #11
 8007eba:	1d23      	adds	r3, r4, #4
 8007ebc:	f020 0007 	bic.w	r0, r0, #7
 8007ec0:	1ac2      	subs	r2, r0, r3
 8007ec2:	bf1c      	itt	ne
 8007ec4:	1a1b      	subne	r3, r3, r0
 8007ec6:	50a3      	strne	r3, [r4, r2]
 8007ec8:	e7af      	b.n	8007e2a <_malloc_r+0x22>
 8007eca:	6862      	ldr	r2, [r4, #4]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	bf0c      	ite	eq
 8007ed0:	f8c8 2000 	streq.w	r2, [r8]
 8007ed4:	605a      	strne	r2, [r3, #4]
 8007ed6:	e7eb      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ed8:	4623      	mov	r3, r4
 8007eda:	6864      	ldr	r4, [r4, #4]
 8007edc:	e7ae      	b.n	8007e3c <_malloc_r+0x34>
 8007ede:	463c      	mov	r4, r7
 8007ee0:	687f      	ldr	r7, [r7, #4]
 8007ee2:	e7b6      	b.n	8007e52 <_malloc_r+0x4a>
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d1fb      	bne.n	8007ee4 <_malloc_r+0xdc>
 8007eec:	2300      	movs	r3, #0
 8007eee:	6053      	str	r3, [r2, #4]
 8007ef0:	e7de      	b.n	8007eb0 <_malloc_r+0xa8>
 8007ef2:	230c      	movs	r3, #12
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f000 f80c 	bl	8007f14 <__malloc_unlock>
 8007efc:	e794      	b.n	8007e28 <_malloc_r+0x20>
 8007efe:	6005      	str	r5, [r0, #0]
 8007f00:	e7d6      	b.n	8007eb0 <_malloc_r+0xa8>
 8007f02:	bf00      	nop
 8007f04:	2000aec8 	.word	0x2000aec8

08007f08 <__malloc_lock>:
 8007f08:	4801      	ldr	r0, [pc, #4]	@ (8007f10 <__malloc_lock+0x8>)
 8007f0a:	f000 b8dd 	b.w	80080c8 <__retarget_lock_acquire_recursive>
 8007f0e:	bf00      	nop
 8007f10:	2000b008 	.word	0x2000b008

08007f14 <__malloc_unlock>:
 8007f14:	4801      	ldr	r0, [pc, #4]	@ (8007f1c <__malloc_unlock+0x8>)
 8007f16:	f000 b8d8 	b.w	80080ca <__retarget_lock_release_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	2000b008 	.word	0x2000b008

08007f20 <sniprintf>:
 8007f20:	b40c      	push	{r2, r3}
 8007f22:	b530      	push	{r4, r5, lr}
 8007f24:	4b17      	ldr	r3, [pc, #92]	@ (8007f84 <sniprintf+0x64>)
 8007f26:	1e0c      	subs	r4, r1, #0
 8007f28:	681d      	ldr	r5, [r3, #0]
 8007f2a:	b09d      	sub	sp, #116	@ 0x74
 8007f2c:	da08      	bge.n	8007f40 <sniprintf+0x20>
 8007f2e:	238b      	movs	r3, #139	@ 0x8b
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	b01d      	add	sp, #116	@ 0x74
 8007f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f3c:	b002      	add	sp, #8
 8007f3e:	4770      	bx	lr
 8007f40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f48:	bf14      	ite	ne
 8007f4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f4e:	4623      	moveq	r3, r4
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	9307      	str	r3, [sp, #28]
 8007f54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f58:	9002      	str	r0, [sp, #8]
 8007f5a:	9006      	str	r0, [sp, #24]
 8007f5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f62:	ab21      	add	r3, sp, #132	@ 0x84
 8007f64:	a902      	add	r1, sp, #8
 8007f66:	4628      	mov	r0, r5
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	f000 f963 	bl	8008234 <_svfiprintf_r>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	bfbc      	itt	lt
 8007f72:	238b      	movlt	r3, #139	@ 0x8b
 8007f74:	602b      	strlt	r3, [r5, #0]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d0dd      	beq.n	8007f36 <sniprintf+0x16>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e7d9      	b.n	8007f36 <sniprintf+0x16>
 8007f82:	bf00      	nop
 8007f84:	20000214 	.word	0x20000214

08007f88 <_vsniprintf_r>:
 8007f88:	b530      	push	{r4, r5, lr}
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	b09b      	sub	sp, #108	@ 0x6c
 8007f90:	4605      	mov	r5, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	da05      	bge.n	8007fa2 <_vsniprintf_r+0x1a>
 8007f96:	238b      	movs	r3, #139	@ 0x8b
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9e:	b01b      	add	sp, #108	@ 0x6c
 8007fa0:	bd30      	pop	{r4, r5, pc}
 8007fa2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fa6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007faa:	bf14      	ite	ne
 8007fac:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fb0:	4623      	moveq	r3, r4
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fba:	9100      	str	r1, [sp, #0]
 8007fbc:	9104      	str	r1, [sp, #16]
 8007fbe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007fc2:	4669      	mov	r1, sp
 8007fc4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007fc6:	f000 f935 	bl	8008234 <_svfiprintf_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	bfbc      	itt	lt
 8007fce:	238b      	movlt	r3, #139	@ 0x8b
 8007fd0:	602b      	strlt	r3, [r5, #0]
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d0e3      	beq.n	8007f9e <_vsniprintf_r+0x16>
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e7df      	b.n	8007f9e <_vsniprintf_r+0x16>
	...

08007fe0 <vsniprintf>:
 8007fe0:	b507      	push	{r0, r1, r2, lr}
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	460a      	mov	r2, r1
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4803      	ldr	r0, [pc, #12]	@ (8007ff8 <vsniprintf+0x18>)
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f7ff ffcb 	bl	8007f88 <_vsniprintf_r>
 8007ff2:	b003      	add	sp, #12
 8007ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ff8:	20000214 	.word	0x20000214

08007ffc <memcmp>:
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	3901      	subs	r1, #1
 8008000:	4402      	add	r2, r0
 8008002:	4290      	cmp	r0, r2
 8008004:	d101      	bne.n	800800a <memcmp+0xe>
 8008006:	2000      	movs	r0, #0
 8008008:	e005      	b.n	8008016 <memcmp+0x1a>
 800800a:	7803      	ldrb	r3, [r0, #0]
 800800c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008010:	42a3      	cmp	r3, r4
 8008012:	d001      	beq.n	8008018 <memcmp+0x1c>
 8008014:	1b18      	subs	r0, r3, r4
 8008016:	bd10      	pop	{r4, pc}
 8008018:	3001      	adds	r0, #1
 800801a:	e7f2      	b.n	8008002 <memcmp+0x6>

0800801c <memset>:
 800801c:	4402      	add	r2, r0
 800801e:	4603      	mov	r3, r0
 8008020:	4293      	cmp	r3, r2
 8008022:	d100      	bne.n	8008026 <memset+0xa>
 8008024:	4770      	bx	lr
 8008026:	f803 1b01 	strb.w	r1, [r3], #1
 800802a:	e7f9      	b.n	8008020 <memset+0x4>

0800802c <strncpy>:
 800802c:	b510      	push	{r4, lr}
 800802e:	3901      	subs	r1, #1
 8008030:	4603      	mov	r3, r0
 8008032:	b132      	cbz	r2, 8008042 <strncpy+0x16>
 8008034:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008038:	f803 4b01 	strb.w	r4, [r3], #1
 800803c:	3a01      	subs	r2, #1
 800803e:	2c00      	cmp	r4, #0
 8008040:	d1f7      	bne.n	8008032 <strncpy+0x6>
 8008042:	441a      	add	r2, r3
 8008044:	2100      	movs	r1, #0
 8008046:	4293      	cmp	r3, r2
 8008048:	d100      	bne.n	800804c <strncpy+0x20>
 800804a:	bd10      	pop	{r4, pc}
 800804c:	f803 1b01 	strb.w	r1, [r3], #1
 8008050:	e7f9      	b.n	8008046 <strncpy+0x1a>
	...

08008054 <_sbrk_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d06      	ldr	r5, [pc, #24]	@ (8008070 <_sbrk_r+0x1c>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	602b      	str	r3, [r5, #0]
 8008060:	f7f9 ffac 	bl	8001fbc <_sbrk>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_sbrk_r+0x1a>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_sbrk_r+0x1a>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	2000b004 	.word	0x2000b004

08008074 <__errno>:
 8008074:	4b01      	ldr	r3, [pc, #4]	@ (800807c <__errno+0x8>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	20000214 	.word	0x20000214

08008080 <__libc_init_array>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	4d0d      	ldr	r5, [pc, #52]	@ (80080b8 <__libc_init_array+0x38>)
 8008084:	4c0d      	ldr	r4, [pc, #52]	@ (80080bc <__libc_init_array+0x3c>)
 8008086:	1b64      	subs	r4, r4, r5
 8008088:	10a4      	asrs	r4, r4, #2
 800808a:	2600      	movs	r6, #0
 800808c:	42a6      	cmp	r6, r4
 800808e:	d109      	bne.n	80080a4 <__libc_init_array+0x24>
 8008090:	4d0b      	ldr	r5, [pc, #44]	@ (80080c0 <__libc_init_array+0x40>)
 8008092:	4c0c      	ldr	r4, [pc, #48]	@ (80080c4 <__libc_init_array+0x44>)
 8008094:	f000 fba8 	bl	80087e8 <_init>
 8008098:	1b64      	subs	r4, r4, r5
 800809a:	10a4      	asrs	r4, r4, #2
 800809c:	2600      	movs	r6, #0
 800809e:	42a6      	cmp	r6, r4
 80080a0:	d105      	bne.n	80080ae <__libc_init_array+0x2e>
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a8:	4798      	blx	r3
 80080aa:	3601      	adds	r6, #1
 80080ac:	e7ee      	b.n	800808c <__libc_init_array+0xc>
 80080ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b2:	4798      	blx	r3
 80080b4:	3601      	adds	r6, #1
 80080b6:	e7f2      	b.n	800809e <__libc_init_array+0x1e>
 80080b8:	08011db0 	.word	0x08011db0
 80080bc:	08011db0 	.word	0x08011db0
 80080c0:	08011db0 	.word	0x08011db0
 80080c4:	08011db4 	.word	0x08011db4

080080c8 <__retarget_lock_acquire_recursive>:
 80080c8:	4770      	bx	lr

080080ca <__retarget_lock_release_recursive>:
 80080ca:	4770      	bx	lr

080080cc <memcpy>:
 80080cc:	440a      	add	r2, r1
 80080ce:	4291      	cmp	r1, r2
 80080d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d4:	d100      	bne.n	80080d8 <memcpy+0xc>
 80080d6:	4770      	bx	lr
 80080d8:	b510      	push	{r4, lr}
 80080da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e2:	4291      	cmp	r1, r2
 80080e4:	d1f9      	bne.n	80080da <memcpy+0xe>
 80080e6:	bd10      	pop	{r4, pc}

080080e8 <_free_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4605      	mov	r5, r0
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d041      	beq.n	8008174 <_free_r+0x8c>
 80080f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f4:	1f0c      	subs	r4, r1, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bfb8      	it	lt
 80080fa:	18e4      	addlt	r4, r4, r3
 80080fc:	f7ff ff04 	bl	8007f08 <__malloc_lock>
 8008100:	4a1d      	ldr	r2, [pc, #116]	@ (8008178 <_free_r+0x90>)
 8008102:	6813      	ldr	r3, [r2, #0]
 8008104:	b933      	cbnz	r3, 8008114 <_free_r+0x2c>
 8008106:	6063      	str	r3, [r4, #4]
 8008108:	6014      	str	r4, [r2, #0]
 800810a:	4628      	mov	r0, r5
 800810c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008110:	f7ff bf00 	b.w	8007f14 <__malloc_unlock>
 8008114:	42a3      	cmp	r3, r4
 8008116:	d908      	bls.n	800812a <_free_r+0x42>
 8008118:	6820      	ldr	r0, [r4, #0]
 800811a:	1821      	adds	r1, r4, r0
 800811c:	428b      	cmp	r3, r1
 800811e:	bf01      	itttt	eq
 8008120:	6819      	ldreq	r1, [r3, #0]
 8008122:	685b      	ldreq	r3, [r3, #4]
 8008124:	1809      	addeq	r1, r1, r0
 8008126:	6021      	streq	r1, [r4, #0]
 8008128:	e7ed      	b.n	8008106 <_free_r+0x1e>
 800812a:	461a      	mov	r2, r3
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	b10b      	cbz	r3, 8008134 <_free_r+0x4c>
 8008130:	42a3      	cmp	r3, r4
 8008132:	d9fa      	bls.n	800812a <_free_r+0x42>
 8008134:	6811      	ldr	r1, [r2, #0]
 8008136:	1850      	adds	r0, r2, r1
 8008138:	42a0      	cmp	r0, r4
 800813a:	d10b      	bne.n	8008154 <_free_r+0x6c>
 800813c:	6820      	ldr	r0, [r4, #0]
 800813e:	4401      	add	r1, r0
 8008140:	1850      	adds	r0, r2, r1
 8008142:	4283      	cmp	r3, r0
 8008144:	6011      	str	r1, [r2, #0]
 8008146:	d1e0      	bne.n	800810a <_free_r+0x22>
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	6053      	str	r3, [r2, #4]
 800814e:	4408      	add	r0, r1
 8008150:	6010      	str	r0, [r2, #0]
 8008152:	e7da      	b.n	800810a <_free_r+0x22>
 8008154:	d902      	bls.n	800815c <_free_r+0x74>
 8008156:	230c      	movs	r3, #12
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	e7d6      	b.n	800810a <_free_r+0x22>
 800815c:	6820      	ldr	r0, [r4, #0]
 800815e:	1821      	adds	r1, r4, r0
 8008160:	428b      	cmp	r3, r1
 8008162:	bf04      	itt	eq
 8008164:	6819      	ldreq	r1, [r3, #0]
 8008166:	685b      	ldreq	r3, [r3, #4]
 8008168:	6063      	str	r3, [r4, #4]
 800816a:	bf04      	itt	eq
 800816c:	1809      	addeq	r1, r1, r0
 800816e:	6021      	streq	r1, [r4, #0]
 8008170:	6054      	str	r4, [r2, #4]
 8008172:	e7ca      	b.n	800810a <_free_r+0x22>
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	2000aec8 	.word	0x2000aec8

0800817c <__ssputs_r>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	688e      	ldr	r6, [r1, #8]
 8008182:	461f      	mov	r7, r3
 8008184:	42be      	cmp	r6, r7
 8008186:	680b      	ldr	r3, [r1, #0]
 8008188:	4682      	mov	sl, r0
 800818a:	460c      	mov	r4, r1
 800818c:	4690      	mov	r8, r2
 800818e:	d82d      	bhi.n	80081ec <__ssputs_r+0x70>
 8008190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008198:	d026      	beq.n	80081e8 <__ssputs_r+0x6c>
 800819a:	6965      	ldr	r5, [r4, #20]
 800819c:	6909      	ldr	r1, [r1, #16]
 800819e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081a2:	eba3 0901 	sub.w	r9, r3, r1
 80081a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081aa:	1c7b      	adds	r3, r7, #1
 80081ac:	444b      	add	r3, r9
 80081ae:	106d      	asrs	r5, r5, #1
 80081b0:	429d      	cmp	r5, r3
 80081b2:	bf38      	it	cc
 80081b4:	461d      	movcc	r5, r3
 80081b6:	0553      	lsls	r3, r2, #21
 80081b8:	d527      	bpl.n	800820a <__ssputs_r+0x8e>
 80081ba:	4629      	mov	r1, r5
 80081bc:	f7ff fe24 	bl	8007e08 <_malloc_r>
 80081c0:	4606      	mov	r6, r0
 80081c2:	b360      	cbz	r0, 800821e <__ssputs_r+0xa2>
 80081c4:	6921      	ldr	r1, [r4, #16]
 80081c6:	464a      	mov	r2, r9
 80081c8:	f7ff ff80 	bl	80080cc <memcpy>
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	6126      	str	r6, [r4, #16]
 80081da:	6165      	str	r5, [r4, #20]
 80081dc:	444e      	add	r6, r9
 80081de:	eba5 0509 	sub.w	r5, r5, r9
 80081e2:	6026      	str	r6, [r4, #0]
 80081e4:	60a5      	str	r5, [r4, #8]
 80081e6:	463e      	mov	r6, r7
 80081e8:	42be      	cmp	r6, r7
 80081ea:	d900      	bls.n	80081ee <__ssputs_r+0x72>
 80081ec:	463e      	mov	r6, r7
 80081ee:	6820      	ldr	r0, [r4, #0]
 80081f0:	4632      	mov	r2, r6
 80081f2:	4641      	mov	r1, r8
 80081f4:	f000 faa8 	bl	8008748 <memmove>
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	1b9b      	subs	r3, r3, r6
 80081fc:	60a3      	str	r3, [r4, #8]
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	4433      	add	r3, r6
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	2000      	movs	r0, #0
 8008206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820a:	462a      	mov	r2, r5
 800820c:	f000 fab6 	bl	800877c <_realloc_r>
 8008210:	4606      	mov	r6, r0
 8008212:	2800      	cmp	r0, #0
 8008214:	d1e0      	bne.n	80081d8 <__ssputs_r+0x5c>
 8008216:	6921      	ldr	r1, [r4, #16]
 8008218:	4650      	mov	r0, sl
 800821a:	f7ff ff65 	bl	80080e8 <_free_r>
 800821e:	230c      	movs	r3, #12
 8008220:	f8ca 3000 	str.w	r3, [sl]
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800822a:	81a3      	strh	r3, [r4, #12]
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	e7e9      	b.n	8008206 <__ssputs_r+0x8a>
	...

08008234 <_svfiprintf_r>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	4698      	mov	r8, r3
 800823a:	898b      	ldrh	r3, [r1, #12]
 800823c:	061b      	lsls	r3, r3, #24
 800823e:	b09d      	sub	sp, #116	@ 0x74
 8008240:	4607      	mov	r7, r0
 8008242:	460d      	mov	r5, r1
 8008244:	4614      	mov	r4, r2
 8008246:	d510      	bpl.n	800826a <_svfiprintf_r+0x36>
 8008248:	690b      	ldr	r3, [r1, #16]
 800824a:	b973      	cbnz	r3, 800826a <_svfiprintf_r+0x36>
 800824c:	2140      	movs	r1, #64	@ 0x40
 800824e:	f7ff fddb 	bl	8007e08 <_malloc_r>
 8008252:	6028      	str	r0, [r5, #0]
 8008254:	6128      	str	r0, [r5, #16]
 8008256:	b930      	cbnz	r0, 8008266 <_svfiprintf_r+0x32>
 8008258:	230c      	movs	r3, #12
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	b01d      	add	sp, #116	@ 0x74
 8008262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008266:	2340      	movs	r3, #64	@ 0x40
 8008268:	616b      	str	r3, [r5, #20]
 800826a:	2300      	movs	r3, #0
 800826c:	9309      	str	r3, [sp, #36]	@ 0x24
 800826e:	2320      	movs	r3, #32
 8008270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008274:	f8cd 800c 	str.w	r8, [sp, #12]
 8008278:	2330      	movs	r3, #48	@ 0x30
 800827a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008418 <_svfiprintf_r+0x1e4>
 800827e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008282:	f04f 0901 	mov.w	r9, #1
 8008286:	4623      	mov	r3, r4
 8008288:	469a      	mov	sl, r3
 800828a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800828e:	b10a      	cbz	r2, 8008294 <_svfiprintf_r+0x60>
 8008290:	2a25      	cmp	r2, #37	@ 0x25
 8008292:	d1f9      	bne.n	8008288 <_svfiprintf_r+0x54>
 8008294:	ebba 0b04 	subs.w	fp, sl, r4
 8008298:	d00b      	beq.n	80082b2 <_svfiprintf_r+0x7e>
 800829a:	465b      	mov	r3, fp
 800829c:	4622      	mov	r2, r4
 800829e:	4629      	mov	r1, r5
 80082a0:	4638      	mov	r0, r7
 80082a2:	f7ff ff6b 	bl	800817c <__ssputs_r>
 80082a6:	3001      	adds	r0, #1
 80082a8:	f000 80a7 	beq.w	80083fa <_svfiprintf_r+0x1c6>
 80082ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082ae:	445a      	add	r2, fp
 80082b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80082b2:	f89a 3000 	ldrb.w	r3, [sl]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 809f 	beq.w	80083fa <_svfiprintf_r+0x1c6>
 80082bc:	2300      	movs	r3, #0
 80082be:	f04f 32ff 	mov.w	r2, #4294967295
 80082c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082c6:	f10a 0a01 	add.w	sl, sl, #1
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	9307      	str	r3, [sp, #28]
 80082ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80082d4:	4654      	mov	r4, sl
 80082d6:	2205      	movs	r2, #5
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	484e      	ldr	r0, [pc, #312]	@ (8008418 <_svfiprintf_r+0x1e4>)
 80082de:	f7f7 ff7f 	bl	80001e0 <memchr>
 80082e2:	9a04      	ldr	r2, [sp, #16]
 80082e4:	b9d8      	cbnz	r0, 800831e <_svfiprintf_r+0xea>
 80082e6:	06d0      	lsls	r0, r2, #27
 80082e8:	bf44      	itt	mi
 80082ea:	2320      	movmi	r3, #32
 80082ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082f0:	0711      	lsls	r1, r2, #28
 80082f2:	bf44      	itt	mi
 80082f4:	232b      	movmi	r3, #43	@ 0x2b
 80082f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082fa:	f89a 3000 	ldrb.w	r3, [sl]
 80082fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008300:	d015      	beq.n	800832e <_svfiprintf_r+0xfa>
 8008302:	9a07      	ldr	r2, [sp, #28]
 8008304:	4654      	mov	r4, sl
 8008306:	2000      	movs	r0, #0
 8008308:	f04f 0c0a 	mov.w	ip, #10
 800830c:	4621      	mov	r1, r4
 800830e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008312:	3b30      	subs	r3, #48	@ 0x30
 8008314:	2b09      	cmp	r3, #9
 8008316:	d94b      	bls.n	80083b0 <_svfiprintf_r+0x17c>
 8008318:	b1b0      	cbz	r0, 8008348 <_svfiprintf_r+0x114>
 800831a:	9207      	str	r2, [sp, #28]
 800831c:	e014      	b.n	8008348 <_svfiprintf_r+0x114>
 800831e:	eba0 0308 	sub.w	r3, r0, r8
 8008322:	fa09 f303 	lsl.w	r3, r9, r3
 8008326:	4313      	orrs	r3, r2
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	46a2      	mov	sl, r4
 800832c:	e7d2      	b.n	80082d4 <_svfiprintf_r+0xa0>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	1d19      	adds	r1, r3, #4
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	9103      	str	r1, [sp, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfbb      	ittet	lt
 800833a:	425b      	neglt	r3, r3
 800833c:	f042 0202 	orrlt.w	r2, r2, #2
 8008340:	9307      	strge	r3, [sp, #28]
 8008342:	9307      	strlt	r3, [sp, #28]
 8008344:	bfb8      	it	lt
 8008346:	9204      	strlt	r2, [sp, #16]
 8008348:	7823      	ldrb	r3, [r4, #0]
 800834a:	2b2e      	cmp	r3, #46	@ 0x2e
 800834c:	d10a      	bne.n	8008364 <_svfiprintf_r+0x130>
 800834e:	7863      	ldrb	r3, [r4, #1]
 8008350:	2b2a      	cmp	r3, #42	@ 0x2a
 8008352:	d132      	bne.n	80083ba <_svfiprintf_r+0x186>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	9203      	str	r2, [sp, #12]
 800835c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008360:	3402      	adds	r4, #2
 8008362:	9305      	str	r3, [sp, #20]
 8008364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008428 <_svfiprintf_r+0x1f4>
 8008368:	7821      	ldrb	r1, [r4, #0]
 800836a:	2203      	movs	r2, #3
 800836c:	4650      	mov	r0, sl
 800836e:	f7f7 ff37 	bl	80001e0 <memchr>
 8008372:	b138      	cbz	r0, 8008384 <_svfiprintf_r+0x150>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	eba0 000a 	sub.w	r0, r0, sl
 800837a:	2240      	movs	r2, #64	@ 0x40
 800837c:	4082      	lsls	r2, r0
 800837e:	4313      	orrs	r3, r2
 8008380:	3401      	adds	r4, #1
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	4824      	ldr	r0, [pc, #144]	@ (800841c <_svfiprintf_r+0x1e8>)
 800838a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800838e:	2206      	movs	r2, #6
 8008390:	f7f7 ff26 	bl	80001e0 <memchr>
 8008394:	2800      	cmp	r0, #0
 8008396:	d036      	beq.n	8008406 <_svfiprintf_r+0x1d2>
 8008398:	4b21      	ldr	r3, [pc, #132]	@ (8008420 <_svfiprintf_r+0x1ec>)
 800839a:	bb1b      	cbnz	r3, 80083e4 <_svfiprintf_r+0x1b0>
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	3307      	adds	r3, #7
 80083a0:	f023 0307 	bic.w	r3, r3, #7
 80083a4:	3308      	adds	r3, #8
 80083a6:	9303      	str	r3, [sp, #12]
 80083a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083aa:	4433      	add	r3, r6
 80083ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ae:	e76a      	b.n	8008286 <_svfiprintf_r+0x52>
 80083b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083b4:	460c      	mov	r4, r1
 80083b6:	2001      	movs	r0, #1
 80083b8:	e7a8      	b.n	800830c <_svfiprintf_r+0xd8>
 80083ba:	2300      	movs	r3, #0
 80083bc:	3401      	adds	r4, #1
 80083be:	9305      	str	r3, [sp, #20]
 80083c0:	4619      	mov	r1, r3
 80083c2:	f04f 0c0a 	mov.w	ip, #10
 80083c6:	4620      	mov	r0, r4
 80083c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083cc:	3a30      	subs	r2, #48	@ 0x30
 80083ce:	2a09      	cmp	r2, #9
 80083d0:	d903      	bls.n	80083da <_svfiprintf_r+0x1a6>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0c6      	beq.n	8008364 <_svfiprintf_r+0x130>
 80083d6:	9105      	str	r1, [sp, #20]
 80083d8:	e7c4      	b.n	8008364 <_svfiprintf_r+0x130>
 80083da:	fb0c 2101 	mla	r1, ip, r1, r2
 80083de:	4604      	mov	r4, r0
 80083e0:	2301      	movs	r3, #1
 80083e2:	e7f0      	b.n	80083c6 <_svfiprintf_r+0x192>
 80083e4:	ab03      	add	r3, sp, #12
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	462a      	mov	r2, r5
 80083ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008424 <_svfiprintf_r+0x1f0>)
 80083ec:	a904      	add	r1, sp, #16
 80083ee:	4638      	mov	r0, r7
 80083f0:	f3af 8000 	nop.w
 80083f4:	1c42      	adds	r2, r0, #1
 80083f6:	4606      	mov	r6, r0
 80083f8:	d1d6      	bne.n	80083a8 <_svfiprintf_r+0x174>
 80083fa:	89ab      	ldrh	r3, [r5, #12]
 80083fc:	065b      	lsls	r3, r3, #25
 80083fe:	f53f af2d 	bmi.w	800825c <_svfiprintf_r+0x28>
 8008402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008404:	e72c      	b.n	8008260 <_svfiprintf_r+0x2c>
 8008406:	ab03      	add	r3, sp, #12
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	462a      	mov	r2, r5
 800840c:	4b05      	ldr	r3, [pc, #20]	@ (8008424 <_svfiprintf_r+0x1f0>)
 800840e:	a904      	add	r1, sp, #16
 8008410:	4638      	mov	r0, r7
 8008412:	f000 f879 	bl	8008508 <_printf_i>
 8008416:	e7ed      	b.n	80083f4 <_svfiprintf_r+0x1c0>
 8008418:	08011d74 	.word	0x08011d74
 800841c:	08011d7e 	.word	0x08011d7e
 8008420:	00000000 	.word	0x00000000
 8008424:	0800817d 	.word	0x0800817d
 8008428:	08011d7a 	.word	0x08011d7a

0800842c <_printf_common>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	4616      	mov	r6, r2
 8008432:	4698      	mov	r8, r3
 8008434:	688a      	ldr	r2, [r1, #8]
 8008436:	690b      	ldr	r3, [r1, #16]
 8008438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800843c:	4293      	cmp	r3, r2
 800843e:	bfb8      	it	lt
 8008440:	4613      	movlt	r3, r2
 8008442:	6033      	str	r3, [r6, #0]
 8008444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008448:	4607      	mov	r7, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b10a      	cbz	r2, 8008452 <_printf_common+0x26>
 800844e:	3301      	adds	r3, #1
 8008450:	6033      	str	r3, [r6, #0]
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	0699      	lsls	r1, r3, #26
 8008456:	bf42      	ittt	mi
 8008458:	6833      	ldrmi	r3, [r6, #0]
 800845a:	3302      	addmi	r3, #2
 800845c:	6033      	strmi	r3, [r6, #0]
 800845e:	6825      	ldr	r5, [r4, #0]
 8008460:	f015 0506 	ands.w	r5, r5, #6
 8008464:	d106      	bne.n	8008474 <_printf_common+0x48>
 8008466:	f104 0a19 	add.w	sl, r4, #25
 800846a:	68e3      	ldr	r3, [r4, #12]
 800846c:	6832      	ldr	r2, [r6, #0]
 800846e:	1a9b      	subs	r3, r3, r2
 8008470:	42ab      	cmp	r3, r5
 8008472:	dc26      	bgt.n	80084c2 <_printf_common+0x96>
 8008474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	3b00      	subs	r3, #0
 800847c:	bf18      	it	ne
 800847e:	2301      	movne	r3, #1
 8008480:	0692      	lsls	r2, r2, #26
 8008482:	d42b      	bmi.n	80084dc <_printf_common+0xb0>
 8008484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008488:	4641      	mov	r1, r8
 800848a:	4638      	mov	r0, r7
 800848c:	47c8      	blx	r9
 800848e:	3001      	adds	r0, #1
 8008490:	d01e      	beq.n	80084d0 <_printf_common+0xa4>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	6922      	ldr	r2, [r4, #16]
 8008496:	f003 0306 	and.w	r3, r3, #6
 800849a:	2b04      	cmp	r3, #4
 800849c:	bf02      	ittt	eq
 800849e:	68e5      	ldreq	r5, [r4, #12]
 80084a0:	6833      	ldreq	r3, [r6, #0]
 80084a2:	1aed      	subeq	r5, r5, r3
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	bf0c      	ite	eq
 80084a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084ac:	2500      	movne	r5, #0
 80084ae:	4293      	cmp	r3, r2
 80084b0:	bfc4      	itt	gt
 80084b2:	1a9b      	subgt	r3, r3, r2
 80084b4:	18ed      	addgt	r5, r5, r3
 80084b6:	2600      	movs	r6, #0
 80084b8:	341a      	adds	r4, #26
 80084ba:	42b5      	cmp	r5, r6
 80084bc:	d11a      	bne.n	80084f4 <_printf_common+0xc8>
 80084be:	2000      	movs	r0, #0
 80084c0:	e008      	b.n	80084d4 <_printf_common+0xa8>
 80084c2:	2301      	movs	r3, #1
 80084c4:	4652      	mov	r2, sl
 80084c6:	4641      	mov	r1, r8
 80084c8:	4638      	mov	r0, r7
 80084ca:	47c8      	blx	r9
 80084cc:	3001      	adds	r0, #1
 80084ce:	d103      	bne.n	80084d8 <_printf_common+0xac>
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d8:	3501      	adds	r5, #1
 80084da:	e7c6      	b.n	800846a <_printf_common+0x3e>
 80084dc:	18e1      	adds	r1, r4, r3
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	2030      	movs	r0, #48	@ 0x30
 80084e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084e6:	4422      	add	r2, r4
 80084e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084f0:	3302      	adds	r3, #2
 80084f2:	e7c7      	b.n	8008484 <_printf_common+0x58>
 80084f4:	2301      	movs	r3, #1
 80084f6:	4622      	mov	r2, r4
 80084f8:	4641      	mov	r1, r8
 80084fa:	4638      	mov	r0, r7
 80084fc:	47c8      	blx	r9
 80084fe:	3001      	adds	r0, #1
 8008500:	d0e6      	beq.n	80084d0 <_printf_common+0xa4>
 8008502:	3601      	adds	r6, #1
 8008504:	e7d9      	b.n	80084ba <_printf_common+0x8e>
	...

08008508 <_printf_i>:
 8008508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800850c:	7e0f      	ldrb	r7, [r1, #24]
 800850e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008510:	2f78      	cmp	r7, #120	@ 0x78
 8008512:	4691      	mov	r9, r2
 8008514:	4680      	mov	r8, r0
 8008516:	460c      	mov	r4, r1
 8008518:	469a      	mov	sl, r3
 800851a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800851e:	d807      	bhi.n	8008530 <_printf_i+0x28>
 8008520:	2f62      	cmp	r7, #98	@ 0x62
 8008522:	d80a      	bhi.n	800853a <_printf_i+0x32>
 8008524:	2f00      	cmp	r7, #0
 8008526:	f000 80d2 	beq.w	80086ce <_printf_i+0x1c6>
 800852a:	2f58      	cmp	r7, #88	@ 0x58
 800852c:	f000 80b9 	beq.w	80086a2 <_printf_i+0x19a>
 8008530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008538:	e03a      	b.n	80085b0 <_printf_i+0xa8>
 800853a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800853e:	2b15      	cmp	r3, #21
 8008540:	d8f6      	bhi.n	8008530 <_printf_i+0x28>
 8008542:	a101      	add	r1, pc, #4	@ (adr r1, 8008548 <_printf_i+0x40>)
 8008544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008548:	080085a1 	.word	0x080085a1
 800854c:	080085b5 	.word	0x080085b5
 8008550:	08008531 	.word	0x08008531
 8008554:	08008531 	.word	0x08008531
 8008558:	08008531 	.word	0x08008531
 800855c:	08008531 	.word	0x08008531
 8008560:	080085b5 	.word	0x080085b5
 8008564:	08008531 	.word	0x08008531
 8008568:	08008531 	.word	0x08008531
 800856c:	08008531 	.word	0x08008531
 8008570:	08008531 	.word	0x08008531
 8008574:	080086b5 	.word	0x080086b5
 8008578:	080085df 	.word	0x080085df
 800857c:	0800866f 	.word	0x0800866f
 8008580:	08008531 	.word	0x08008531
 8008584:	08008531 	.word	0x08008531
 8008588:	080086d7 	.word	0x080086d7
 800858c:	08008531 	.word	0x08008531
 8008590:	080085df 	.word	0x080085df
 8008594:	08008531 	.word	0x08008531
 8008598:	08008531 	.word	0x08008531
 800859c:	08008677 	.word	0x08008677
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	1d1a      	adds	r2, r3, #4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6032      	str	r2, [r6, #0]
 80085a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085b0:	2301      	movs	r3, #1
 80085b2:	e09d      	b.n	80086f0 <_printf_i+0x1e8>
 80085b4:	6833      	ldr	r3, [r6, #0]
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	1d19      	adds	r1, r3, #4
 80085ba:	6031      	str	r1, [r6, #0]
 80085bc:	0606      	lsls	r6, r0, #24
 80085be:	d501      	bpl.n	80085c4 <_printf_i+0xbc>
 80085c0:	681d      	ldr	r5, [r3, #0]
 80085c2:	e003      	b.n	80085cc <_printf_i+0xc4>
 80085c4:	0645      	lsls	r5, r0, #25
 80085c6:	d5fb      	bpl.n	80085c0 <_printf_i+0xb8>
 80085c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	da03      	bge.n	80085d8 <_printf_i+0xd0>
 80085d0:	232d      	movs	r3, #45	@ 0x2d
 80085d2:	426d      	negs	r5, r5
 80085d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d8:	4859      	ldr	r0, [pc, #356]	@ (8008740 <_printf_i+0x238>)
 80085da:	230a      	movs	r3, #10
 80085dc:	e011      	b.n	8008602 <_printf_i+0xfa>
 80085de:	6821      	ldr	r1, [r4, #0]
 80085e0:	6833      	ldr	r3, [r6, #0]
 80085e2:	0608      	lsls	r0, r1, #24
 80085e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085e8:	d402      	bmi.n	80085f0 <_printf_i+0xe8>
 80085ea:	0649      	lsls	r1, r1, #25
 80085ec:	bf48      	it	mi
 80085ee:	b2ad      	uxthmi	r5, r5
 80085f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085f2:	4853      	ldr	r0, [pc, #332]	@ (8008740 <_printf_i+0x238>)
 80085f4:	6033      	str	r3, [r6, #0]
 80085f6:	bf14      	ite	ne
 80085f8:	230a      	movne	r3, #10
 80085fa:	2308      	moveq	r3, #8
 80085fc:	2100      	movs	r1, #0
 80085fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008602:	6866      	ldr	r6, [r4, #4]
 8008604:	60a6      	str	r6, [r4, #8]
 8008606:	2e00      	cmp	r6, #0
 8008608:	bfa2      	ittt	ge
 800860a:	6821      	ldrge	r1, [r4, #0]
 800860c:	f021 0104 	bicge.w	r1, r1, #4
 8008610:	6021      	strge	r1, [r4, #0]
 8008612:	b90d      	cbnz	r5, 8008618 <_printf_i+0x110>
 8008614:	2e00      	cmp	r6, #0
 8008616:	d04b      	beq.n	80086b0 <_printf_i+0x1a8>
 8008618:	4616      	mov	r6, r2
 800861a:	fbb5 f1f3 	udiv	r1, r5, r3
 800861e:	fb03 5711 	mls	r7, r3, r1, r5
 8008622:	5dc7      	ldrb	r7, [r0, r7]
 8008624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008628:	462f      	mov	r7, r5
 800862a:	42bb      	cmp	r3, r7
 800862c:	460d      	mov	r5, r1
 800862e:	d9f4      	bls.n	800861a <_printf_i+0x112>
 8008630:	2b08      	cmp	r3, #8
 8008632:	d10b      	bne.n	800864c <_printf_i+0x144>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	07df      	lsls	r7, r3, #31
 8008638:	d508      	bpl.n	800864c <_printf_i+0x144>
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	6861      	ldr	r1, [r4, #4]
 800863e:	4299      	cmp	r1, r3
 8008640:	bfde      	ittt	le
 8008642:	2330      	movle	r3, #48	@ 0x30
 8008644:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008648:	f106 36ff 	addle.w	r6, r6, #4294967295
 800864c:	1b92      	subs	r2, r2, r6
 800864e:	6122      	str	r2, [r4, #16]
 8008650:	f8cd a000 	str.w	sl, [sp]
 8008654:	464b      	mov	r3, r9
 8008656:	aa03      	add	r2, sp, #12
 8008658:	4621      	mov	r1, r4
 800865a:	4640      	mov	r0, r8
 800865c:	f7ff fee6 	bl	800842c <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	d14a      	bne.n	80086fa <_printf_i+0x1f2>
 8008664:	f04f 30ff 	mov.w	r0, #4294967295
 8008668:	b004      	add	sp, #16
 800866a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	f043 0320 	orr.w	r3, r3, #32
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	4833      	ldr	r0, [pc, #204]	@ (8008744 <_printf_i+0x23c>)
 8008678:	2778      	movs	r7, #120	@ 0x78
 800867a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	6831      	ldr	r1, [r6, #0]
 8008682:	061f      	lsls	r7, r3, #24
 8008684:	f851 5b04 	ldr.w	r5, [r1], #4
 8008688:	d402      	bmi.n	8008690 <_printf_i+0x188>
 800868a:	065f      	lsls	r7, r3, #25
 800868c:	bf48      	it	mi
 800868e:	b2ad      	uxthmi	r5, r5
 8008690:	6031      	str	r1, [r6, #0]
 8008692:	07d9      	lsls	r1, r3, #31
 8008694:	bf44      	itt	mi
 8008696:	f043 0320 	orrmi.w	r3, r3, #32
 800869a:	6023      	strmi	r3, [r4, #0]
 800869c:	b11d      	cbz	r5, 80086a6 <_printf_i+0x19e>
 800869e:	2310      	movs	r3, #16
 80086a0:	e7ac      	b.n	80085fc <_printf_i+0xf4>
 80086a2:	4827      	ldr	r0, [pc, #156]	@ (8008740 <_printf_i+0x238>)
 80086a4:	e7e9      	b.n	800867a <_printf_i+0x172>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	f023 0320 	bic.w	r3, r3, #32
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	e7f6      	b.n	800869e <_printf_i+0x196>
 80086b0:	4616      	mov	r6, r2
 80086b2:	e7bd      	b.n	8008630 <_printf_i+0x128>
 80086b4:	6833      	ldr	r3, [r6, #0]
 80086b6:	6825      	ldr	r5, [r4, #0]
 80086b8:	6961      	ldr	r1, [r4, #20]
 80086ba:	1d18      	adds	r0, r3, #4
 80086bc:	6030      	str	r0, [r6, #0]
 80086be:	062e      	lsls	r6, r5, #24
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	d501      	bpl.n	80086c8 <_printf_i+0x1c0>
 80086c4:	6019      	str	r1, [r3, #0]
 80086c6:	e002      	b.n	80086ce <_printf_i+0x1c6>
 80086c8:	0668      	lsls	r0, r5, #25
 80086ca:	d5fb      	bpl.n	80086c4 <_printf_i+0x1bc>
 80086cc:	8019      	strh	r1, [r3, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	4616      	mov	r6, r2
 80086d4:	e7bc      	b.n	8008650 <_printf_i+0x148>
 80086d6:	6833      	ldr	r3, [r6, #0]
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	6032      	str	r2, [r6, #0]
 80086dc:	681e      	ldr	r6, [r3, #0]
 80086de:	6862      	ldr	r2, [r4, #4]
 80086e0:	2100      	movs	r1, #0
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7f7 fd7c 	bl	80001e0 <memchr>
 80086e8:	b108      	cbz	r0, 80086ee <_printf_i+0x1e6>
 80086ea:	1b80      	subs	r0, r0, r6
 80086ec:	6060      	str	r0, [r4, #4]
 80086ee:	6863      	ldr	r3, [r4, #4]
 80086f0:	6123      	str	r3, [r4, #16]
 80086f2:	2300      	movs	r3, #0
 80086f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f8:	e7aa      	b.n	8008650 <_printf_i+0x148>
 80086fa:	6923      	ldr	r3, [r4, #16]
 80086fc:	4632      	mov	r2, r6
 80086fe:	4649      	mov	r1, r9
 8008700:	4640      	mov	r0, r8
 8008702:	47d0      	blx	sl
 8008704:	3001      	adds	r0, #1
 8008706:	d0ad      	beq.n	8008664 <_printf_i+0x15c>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	079b      	lsls	r3, r3, #30
 800870c:	d413      	bmi.n	8008736 <_printf_i+0x22e>
 800870e:	68e0      	ldr	r0, [r4, #12]
 8008710:	9b03      	ldr	r3, [sp, #12]
 8008712:	4298      	cmp	r0, r3
 8008714:	bfb8      	it	lt
 8008716:	4618      	movlt	r0, r3
 8008718:	e7a6      	b.n	8008668 <_printf_i+0x160>
 800871a:	2301      	movs	r3, #1
 800871c:	4632      	mov	r2, r6
 800871e:	4649      	mov	r1, r9
 8008720:	4640      	mov	r0, r8
 8008722:	47d0      	blx	sl
 8008724:	3001      	adds	r0, #1
 8008726:	d09d      	beq.n	8008664 <_printf_i+0x15c>
 8008728:	3501      	adds	r5, #1
 800872a:	68e3      	ldr	r3, [r4, #12]
 800872c:	9903      	ldr	r1, [sp, #12]
 800872e:	1a5b      	subs	r3, r3, r1
 8008730:	42ab      	cmp	r3, r5
 8008732:	dcf2      	bgt.n	800871a <_printf_i+0x212>
 8008734:	e7eb      	b.n	800870e <_printf_i+0x206>
 8008736:	2500      	movs	r5, #0
 8008738:	f104 0619 	add.w	r6, r4, #25
 800873c:	e7f5      	b.n	800872a <_printf_i+0x222>
 800873e:	bf00      	nop
 8008740:	08011d85 	.word	0x08011d85
 8008744:	08011d96 	.word	0x08011d96

08008748 <memmove>:
 8008748:	4288      	cmp	r0, r1
 800874a:	b510      	push	{r4, lr}
 800874c:	eb01 0402 	add.w	r4, r1, r2
 8008750:	d902      	bls.n	8008758 <memmove+0x10>
 8008752:	4284      	cmp	r4, r0
 8008754:	4623      	mov	r3, r4
 8008756:	d807      	bhi.n	8008768 <memmove+0x20>
 8008758:	1e43      	subs	r3, r0, #1
 800875a:	42a1      	cmp	r1, r4
 800875c:	d008      	beq.n	8008770 <memmove+0x28>
 800875e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008766:	e7f8      	b.n	800875a <memmove+0x12>
 8008768:	4402      	add	r2, r0
 800876a:	4601      	mov	r1, r0
 800876c:	428a      	cmp	r2, r1
 800876e:	d100      	bne.n	8008772 <memmove+0x2a>
 8008770:	bd10      	pop	{r4, pc}
 8008772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800877a:	e7f7      	b.n	800876c <memmove+0x24>

0800877c <_realloc_r>:
 800877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008780:	4680      	mov	r8, r0
 8008782:	4615      	mov	r5, r2
 8008784:	460c      	mov	r4, r1
 8008786:	b921      	cbnz	r1, 8008792 <_realloc_r+0x16>
 8008788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800878c:	4611      	mov	r1, r2
 800878e:	f7ff bb3b 	b.w	8007e08 <_malloc_r>
 8008792:	b92a      	cbnz	r2, 80087a0 <_realloc_r+0x24>
 8008794:	f7ff fca8 	bl	80080e8 <_free_r>
 8008798:	2400      	movs	r4, #0
 800879a:	4620      	mov	r0, r4
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	f000 f81a 	bl	80087d8 <_malloc_usable_size_r>
 80087a4:	4285      	cmp	r5, r0
 80087a6:	4606      	mov	r6, r0
 80087a8:	d802      	bhi.n	80087b0 <_realloc_r+0x34>
 80087aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087ae:	d8f4      	bhi.n	800879a <_realloc_r+0x1e>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4640      	mov	r0, r8
 80087b4:	f7ff fb28 	bl	8007e08 <_malloc_r>
 80087b8:	4607      	mov	r7, r0
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d0ec      	beq.n	8008798 <_realloc_r+0x1c>
 80087be:	42b5      	cmp	r5, r6
 80087c0:	462a      	mov	r2, r5
 80087c2:	4621      	mov	r1, r4
 80087c4:	bf28      	it	cs
 80087c6:	4632      	movcs	r2, r6
 80087c8:	f7ff fc80 	bl	80080cc <memcpy>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff fc8a 	bl	80080e8 <_free_r>
 80087d4:	463c      	mov	r4, r7
 80087d6:	e7e0      	b.n	800879a <_realloc_r+0x1e>

080087d8 <_malloc_usable_size_r>:
 80087d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087dc:	1f18      	subs	r0, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	bfbc      	itt	lt
 80087e2:	580b      	ldrlt	r3, [r1, r0]
 80087e4:	18c0      	addlt	r0, r0, r3
 80087e6:	4770      	bx	lr

080087e8 <_init>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr

080087f4 <_fini>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	bf00      	nop
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr
