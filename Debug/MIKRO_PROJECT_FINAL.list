
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009750  08009578  08009578  0000a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cc8  08012cc8  00014270  2**0
                  CONTENTS
  4 .ARM          00000008  08012cc8  08012cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cd0  08012cd0  00014270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cd0  08012cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012cd4  08012cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08012cd8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae38  20000270  08012f48  00014270  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  2000b0a8  08012f48  000150a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001344d  00000000  00000000  000142a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003761  00000000  00000000  000276ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0002ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2a  00000000  00000000  0002be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294c5  00000000  00000000  0002ca82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c3d  00000000  00000000  00055f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edd31  00000000  00000000  0006cb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a8b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  0015a8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015f4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009560 	.word	0x08009560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08009560 	.word	0x08009560

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	2000028c 	.word	0x2000028c

080005c8 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <USART_getchar+0x44>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <USART_getchar+0x44>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d00f      	beq.n	80005fa <USART_getchar+0x32>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <USART_getchar+0x44>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <USART_getchar+0x48>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) & rxRingBuffer.mask;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <USART_getchar+0x44>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <USART_getchar+0x44>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4013      	ands	r3, r2
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <USART_getchar+0x44>)
 80005f2:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f8:	e001      	b.n	80005fe <USART_getchar+0x36>
    }
    return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000028c 	.word	0x2000028c
 8000610:	20000aac 	.word	0x20000aac

08000614 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 8000628:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <USART_sendFrame+0xd8>)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	4413      	add	r3, r2
 800062e:	227e      	movs	r2, #126	@ 0x7e
 8000630:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	461a      	mov	r2, r3
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <USART_sendFrame+0xd4>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4013      	ands	r3, r2
 800063e:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e012      	b.n	800066c <USART_sendFrame+0x58>
        USART_TxBuf[idx] = data[i];
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <USART_sendFrame+0xd8>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) & txRingBuffer.mask;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	461a      	mov	r2, r3
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	4013      	ands	r3, r2
 8000664:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3e8      	bcc.n	8000646 <USART_sendFrame+0x32>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 8000674:	4a1d      	ldr	r2, [pc, #116]	@ (80006ec <USART_sendFrame+0xd8>)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	2260      	movs	r2, #96	@ 0x60
 800067c:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	461a      	mov	r2, r3
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4013      	ands	r3, r2
 800068a:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <USART_sendFrame+0xd4>)
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	d11e      	bne.n	80006d6 <USART_sendFrame+0xc2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <USART_sendFrame+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006a2:	2b80      	cmp	r3, #128	@ 0x80
 80006a4:	d117      	bne.n	80006d6 <USART_sendFrame+0xc2>
        txRingBuffer.writeIndex = idx;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006aa:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4a0e      	ldr	r2, [pc, #56]	@ (80006ec <USART_sendFrame+0xd8>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4013      	ands	r3, r2
 80006c2:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006c4:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <USART_sendFrame+0xdc>)
 80006d0:	f004 fdb4 	bl	800523c <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006d4:	e002      	b.n	80006dc <USART_sendFrame+0xc8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006da:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006dc:	b662      	cpsie	i
}
 80006de:	bf00      	nop
    }

    __enable_irq();
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000029c 	.word	0x2000029c
 80006ec:	200002ac 	.word	0x200002ac
 80006f0:	2000aed0 	.word	0x2000aed0

080006f4 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000700:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000704:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	e019      	b.n	8000740 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 8000716:	8bfb      	ldrh	r3, [r7, #30]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	4053      	eors	r3, r2
 8000722:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 8000724:	8bfb      	ldrh	r3, [r7, #30]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	490f      	ldr	r1, [pc, #60]	@ (800076c <calculateCrc16+0x78>)
 800072e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4053      	eors	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3301      	adds	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3e1      	bcc.n	800070c <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF); // bajt po lewej
 8000748:	8bfb      	ldrh	r3, [r7, #30]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);        // bajt po prawej
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	8bfa      	ldrh	r2, [r7, #30]
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	3724      	adds	r7, #36	@ 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_DMA_Init+0x38>)
 8000778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077a:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <MX_DMA_Init+0x38>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6493      	str	r3, [r2, #72]	@ 0x48
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_DMA_Init+0x38>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	200f      	movs	r0, #15
 8000794:	f001 ff6b 	bl	800266e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000798:	200f      	movs	r0, #15
 800079a:	f001 ff84 	bl	80026a6 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <stopAnimation>:
uint8_t received_char;
Frame frame;
ScrollingTextState text;

static void stopAnimation(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <stopAnimation+0x18>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000d40 	.word	0x20000d40

080007c8 <copyToBuffer>:

static void copyToBuffer(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	if (!lcdIsBusy()) {
 80007cc:	f001 f9a0 	bl	8001b10 <lcdIsBusy>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f083 0301 	eor.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <copyToBuffer+0x18>
		lcdCopy();
 80007dc:	f001 f900 	bl	80019e0 <lcdCopy>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <safeCompare>:
static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <safeCompare+0x18>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d101      	bne.n	8000800 <safeCompare+0x1c>
	{
		return false;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e00a      	b.n	8000816 <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f007 fe91 	bl	800852c <memcmp>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf0c      	ite	eq
 8000810:	2301      	moveq	r3, #1
 8000812:	2300      	movne	r3, #0
 8000814:	b2db      	uxtb	r3, r3
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <parseColor+0x16>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <parseColor+0x1a>
        return false;
 8000836:	2300      	movs	r3, #0
 8000838:	e026      	b.n	8000888 <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e01f      	b.n	8000880 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 8000840:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <parseColor+0x70>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fcc1 	bl	80001d0 <strlen>
 800084e:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000850:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <parseColor+0x70>)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	4619      	mov	r1, r3
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffc1 	bl	80007e4 <safeCompare>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <parseColor+0x5a>
            *color = color_map[i].value;
 8000868:	4a09      	ldr	r2, [pc, #36]	@ (8000890 <parseColor+0x70>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	4413      	add	r3, r2
 8000870:	889a      	ldrh	r2, [r3, #4]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	801a      	strh	r2, [r3, #0]
            return true;
 8000876:	2301      	movs	r3, #1
 8000878:	e006      	b.n	8000888 <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b07      	cmp	r3, #7
 8000884:	d9dc      	bls.n	8000840 <parseColor+0x20>
        }
    }
    return false;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08009660 	.word	0x08009660

08000894 <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
    in_frame = false;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <resetFrameState+0x20>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <resetFrameState+0x24>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <resetFrameState+0x28>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	20000cb4 	.word	0x20000cb4
 80008b8:	20000cac 	.word	0x20000cac
 80008bc:	20000cb0 	.word	0x20000cb0

080008c0 <parseParameters>:
*      - Pomija białe znaki
*      - Wyodrębnia token do następnego przecinka
*      - Przetwarza token według odpowiedniego typu
*   4. Zwalnia va_list
************************************************************************/
bool parseParameters(const char* data, const char* format, ...) {
 80008c0:	b40e      	push	{r1, r2, r3}
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b09b      	sub	sp, #108	@ 0x6c
 80008c6:	af02      	add	r7, sp, #8
 80008c8:	6078      	str	r0, [r7, #4]
    if (!data || !format) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <parseParameters+0x16>
 80008d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <parseParameters+0x1a>
        return false;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e0d3      	b.n	8000a82 <parseParameters+0x1c2>
    }
    va_list args;
    va_start(args, format);
 80008da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80008de:	643b      	str	r3, [r7, #64]	@ 0x40

    const char* data_ptr = data;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 80008e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    unsigned char token[51];  // Zmieniono na unsigned char
    size_t token_idx;

    while (*fmt_ptr) {
 80008e8:	e0bf      	b.n	8000a6a <parseParameters+0x1aa>

        while (isspace((unsigned char)*data_ptr)) data_ptr++;
 80008ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008ec:	3301      	adds	r3, #1
 80008ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80008f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a66      	ldr	r2, [pc, #408]	@ (8000a90 <parseParameters+0x1d0>)
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f2      	bne.n	80008ea <parseParameters+0x2a>

        token_idx = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	657b      	str	r3, [r7, #84]	@ 0x54

        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 8000908:	e00a      	b.n	8000920 <parseParameters+0x60>
            token[token_idx++] = (unsigned char)*data_ptr++;  // Zmieniono na unsigned char
 800090a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800090c:	1c53      	adds	r3, r2, #1
 800090e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000912:	1c59      	adds	r1, r3, #1
 8000914:	6579      	str	r1, [r7, #84]	@ 0x54
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	3360      	adds	r3, #96	@ 0x60
 800091a:	443b      	add	r3, r7
 800091c:	f803 2c54 	strb.w	r2, [r3, #-84]
        while (*data_ptr && *data_ptr != ',' && token_idx < 49) {
 8000920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <parseParameters+0x76>
 8000928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b2c      	cmp	r3, #44	@ 0x2c
 800092e:	d002      	beq.n	8000936 <parseParameters+0x76>
 8000930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000932:	2b30      	cmp	r3, #48	@ 0x30
 8000934:	d9e9      	bls.n	800090a <parseParameters+0x4a>
        }
        token[token_idx] = '\0';
 8000936:	f107 020c 	add.w	r2, r7, #12
 800093a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800093c:	4413      	add	r3, r2
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]

        if (*data_ptr == ',') data_ptr++;
 8000942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b2c      	cmp	r3, #44	@ 0x2c
 8000948:	d10c      	bne.n	8000964 <parseParameters+0xa4>
 800094a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800094c:	3301      	adds	r3, #1
 800094e:	65fb      	str	r3, [r7, #92]	@ 0x5c

        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 8000950:	e008      	b.n	8000964 <parseParameters+0xa4>
            token[--token_idx] = '\0';
 8000952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000954:	3b01      	subs	r3, #1
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800095e:	4413      	add	r3, r2
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
        while (token_idx > 0 && isspace(token[token_idx - 1])) {
 8000964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00d      	beq.n	8000986 <parseParameters+0xc6>
 800096a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800096c:	3b01      	subs	r3, #1
 800096e:	3360      	adds	r3, #96	@ 0x60
 8000970:	443b      	add	r3, r7
 8000972:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8000976:	3301      	adds	r3, #1
 8000978:	4a45      	ldr	r2, [pc, #276]	@ (8000a90 <parseParameters+0x1d0>)
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1e5      	bne.n	8000952 <parseParameters+0x92>
        }
        switch (*fmt_ptr) {
 8000986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b75      	cmp	r3, #117	@ 0x75
 800098c:	d006      	beq.n	800099c <parseParameters+0xdc>
 800098e:	2b75      	cmp	r3, #117	@ 0x75
 8000990:	dc65      	bgt.n	8000a5e <parseParameters+0x19e>
 8000992:	2b73      	cmp	r3, #115	@ 0x73
 8000994:	d01c      	beq.n	80009d0 <parseParameters+0x110>
 8000996:	2b74      	cmp	r3, #116	@ 0x74
 8000998:	d02d      	beq.n	80009f6 <parseParameters+0x136>
 800099a:	e060      	b.n	8000a5e <parseParameters+0x19e>
            case 'u': {
                char* endptr;
                unsigned long val = strtoul((char*)token, &endptr, 10);  // Zmieniono na (char*)
 800099c:	f107 0108 	add.w	r1, r7, #8
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	220a      	movs	r2, #10
 80009a6:	4618      	mov	r0, r3
 80009a8:	f007 fc44 	bl	8008234 <strtoul>
 80009ac:	6538      	str	r0, [r7, #80]	@ 0x50
                if (*endptr || val > 255) {
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d102      	bne.n	80009bc <parseParameters+0xfc>
 80009b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009b8:	2bff      	cmp	r3, #255	@ 0xff
 80009ba:	d901      	bls.n	80009c0 <parseParameters+0x100>
                    va_end(args);
                    return false;
 80009bc:	2300      	movs	r3, #0
 80009be:	e060      	b.n	8000a82 <parseParameters+0x1c2>
                }
                *va_arg(args, uint8_t*) = (uint8_t)val;
 80009c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009c2:	1d1a      	adds	r2, r3, #4
 80009c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e049      	b.n	8000a64 <parseParameters+0x1a4>
                break;
            }
            case 's': {
                Color_t* color_ptr = va_arg(args, Color_t*);
 80009d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009d2:	1d1a      	adds	r2, r3, #4
 80009d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	647b      	str	r3, [r7, #68]	@ 0x44
                if (!parseColor((char*)token, color_ptr)) {  // Zmieniono na (char*)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff1d 	bl	8000820 <parseColor>
 80009e6:	4603      	mov	r3, r0
 80009e8:	f083 0301 	eor.w	r3, r3, #1
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d037      	beq.n	8000a62 <parseParameters+0x1a2>
                    va_end(args);
                    return false;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e045      	b.n	8000a82 <parseParameters+0x1c2>
                }
                break;
            }
            case 't': {
            	size_t tokenLength = strlen((char*)token);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fbe8 	bl	80001d0 <strlen>
 8000a00:	64f8      	str	r0, [r7, #76]	@ 0x4c
            	    if (text.scrollSpeed > 0 && tokenLength > 50) {
 8000a02:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <parseParameters+0x1d4>)
 8000a04:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d004      	beq.n	8000a16 <parseParameters+0x156>
 8000a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a0e:	2b32      	cmp	r3, #50	@ 0x32
 8000a10:	d901      	bls.n	8000a16 <parseParameters+0x156>
            	        va_end(args);
            	        return false;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e035      	b.n	8000a82 <parseParameters+0x1c2>
            	    }
            	else if (text.scrollSpeed > 0 && tokenLength > 50) {
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <parseParameters+0x1d4>)
 8000a18:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00c      	beq.n	8000a3a <parseParameters+0x17a>
 8000a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a22:	2b32      	cmp	r3, #50	@ 0x32
 8000a24:	d909      	bls.n	8000a3a <parseParameters+0x17a>
            		va_end(args);
            		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%c", tokenLength);
 8000a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <parseParameters+0x1d8>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a9c <parseParameters+0x1dc>)
 8000a2e:	2167      	movs	r1, #103	@ 0x67
 8000a30:	2068      	movs	r0, #104	@ 0x68
 8000a32:	f000 fb0d 	bl	8001050 <prepareFrame>
            		return false;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e023      	b.n	8000a82 <parseParameters+0x1c2>
            	}
            	char* ptr = va_arg(args, char*);
 8000a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a3c:	1d1a      	adds	r2, r3, #4
 8000a3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	64bb      	str	r3, [r7, #72]	@ 0x48
            	strncpy(ptr, (char*)token, tokenLength);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a4e:	f007 fd85 	bl	800855c <strncpy>
            	ptr[tokenLength] = '\0';
 8000a52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a56:	4413      	add	r3, r2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
            	break;
 8000a5c:	e002      	b.n	8000a64 <parseParameters+0x1a4>
            }
            default:
            	va_end(args);
            	return false;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e00f      	b.n	8000a82 <parseParameters+0x1c2>
                break;
 8000a62:	bf00      	nop
        }
        fmt_ptr++;
 8000a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a66:	3301      	adds	r3, #1
 8000a68:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f47f af3e 	bne.w	80008f0 <parseParameters+0x30>
    }
    va_end(args);
    return !*data_ptr;
 8000a74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3764      	adds	r7, #100	@ 0x64
 8000a86:	46bd      	mov	sp, r7
 8000a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a8c:	b003      	add	sp, #12
 8000a8e:	4770      	bx	lr
 8000a90:	08012ae4 	.word	0x08012ae4
 8000a94:	20000d40 	.word	0x20000d40
 8000a98:	080095b4 	.word	0x080095b4
 8000a9c:	080095c8 	.word	0x080095c8

08000aa0 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d00d      	beq.n	8000aca <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3305      	adds	r3, #5
 8000ab2:	2280      	movs	r2, #128	@ 0x80
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f007 fd48 	bl	800854c <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3302      	adds	r3, #2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f007 fd41 	bl	800854c <memset>
    }
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73bb      	strb	r3, [r7, #14]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	737b      	strb	r3, [r7, #13]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	1d58      	adds	r0, r3, #5
 8000af4:	f107 010e 	add.w	r1, r7, #14
 8000af8:	f107 020f 	add.w	r2, r7, #15
 8000afc:	f107 030a 	add.w	r3, r7, #10
 8000b00:	9302      	str	r3, [sp, #8]
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	f107 030d 	add.w	r3, r7, #13
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4917      	ldr	r1, [pc, #92]	@ (8000b70 <executeONK+0x9c>)
 8000b12:	f7ff fed5 	bl	80008c0 <parseParameters>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f083 0301 	eor.w	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d009      	beq.n	8000b36 <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3305      	adds	r3, #5
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <executeONK+0xa0>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <executeONK+0xa4>)
 8000b2c:	2167      	movs	r1, #103	@ 0x67
 8000b2e:	2068      	movs	r0, #104	@ 0x68
 8000b30:	f000 fa8e 	bl	8001050 <prepareFrame>
 8000b34:	e019      	b.n	8000b6a <executeONK+0x96>
        return;
    }
	switch(filling)
 8000b36:	7b3b      	ldrb	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <executeONK+0x6e>
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d00a      	beq.n	8000b56 <executeONK+0x82>
 8000b40:	e013      	b.n	8000b6a <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	b218      	sxth	r0, r3
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	b219      	sxth	r1, r3
 8000b4a:	7b7b      	ldrb	r3, [r7, #13]
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	897b      	ldrh	r3, [r7, #10]
 8000b50:	f006 fdb6 	bl	80076c0 <hagl_draw_circle>
		break;
 8000b54:	e009      	b.n	8000b6a <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	b218      	sxth	r0, r3
 8000b5a:	7bbb      	ldrb	r3, [r7, #14]
 8000b5c:	b219      	sxth	r1, r3
 8000b5e:	7b7b      	ldrb	r3, [r7, #13]
 8000b60:	b21a      	sxth	r2, r3
 8000b62:	897b      	ldrh	r3, [r7, #10]
 8000b64:	f006 fedb 	bl	800791e <hagl_fill_circle>
		break;
 8000b68:	bf00      	nop
	}
}
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	080095cc 	.word	0x080095cc
 8000b74:	080095d4 	.word	0x080095d4
 8000b78:	080095c8 	.word	0x080095c8

08000b7c <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af04      	add	r7, sp, #16
 8000b82:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73bb      	strb	r3, [r7, #14]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	737b      	strb	r3, [r7, #13]
 8000b90:	2300      	movs	r3, #0
 8000b92:	733b      	strb	r3, [r7, #12]
 8000b94:	2300      	movs	r3, #0
 8000b96:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	1d58      	adds	r0, r3, #5
 8000ba0:	f107 010e 	add.w	r1, r7, #14
 8000ba4:	f107 020f 	add.w	r2, r7, #15
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	9303      	str	r3, [sp, #12]
 8000bae:	f107 030b 	add.w	r3, r7, #11
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	f107 030d 	add.w	r3, r7, #13
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	491c      	ldr	r1, [pc, #112]	@ (8000c34 <executeONP+0xb8>)
 8000bc4:	f7ff fe7c 	bl	80008c0 <parseParameters>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f083 0301 	eor.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d009      	beq.n	8000be8 <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3305      	adds	r3, #5
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <executeONP+0xbc>)
 8000bdc:	4a17      	ldr	r2, [pc, #92]	@ (8000c3c <executeONP+0xc0>)
 8000bde:	2167      	movs	r1, #103	@ 0x67
 8000be0:	2068      	movs	r0, #104	@ 0x68
 8000be2:	f000 fa35 	bl	8001050 <prepareFrame>
 8000be6:	e021      	b.n	8000c2c <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000be8:	7afb      	ldrb	r3, [r7, #11]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <executeONP+0x78>
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d00e      	beq.n	8000c10 <executeONP+0x94>
 8000bf2:	e01b      	b.n	8000c2c <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	b218      	sxth	r0, r3
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	b219      	sxth	r1, r3
 8000bfc:	7b7b      	ldrb	r3, [r7, #13]
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	7b3b      	ldrb	r3, [r7, #12]
 8000c02:	b21c      	sxth	r4, r3
 8000c04:	893b      	ldrh	r3, [r7, #8]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4623      	mov	r3, r4
 8000c0a:	f006 faa9 	bl	8007160 <hagl_draw_rectangle>
		break;
 8000c0e:	e00d      	b.n	8000c2c <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	b218      	sxth	r0, r3
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	b219      	sxth	r1, r3
 8000c18:	7b7b      	ldrb	r3, [r7, #13]
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	7b3b      	ldrb	r3, [r7, #12]
 8000c1e:	b21c      	sxth	r4, r3
 8000c20:	893b      	ldrh	r3, [r7, #8]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	4623      	mov	r3, r4
 8000c26:	f006 fb21 	bl	800726c <hagl_fill_rectangle>
		break;
 8000c2a:	bf00      	nop
	}
}
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	080095e8 	.word	0x080095e8
 8000c38:	080095d4 	.word	0x080095d4
 8000c3c:	080095c8 	.word	0x080095c8

08000c40 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	b08d      	sub	sp, #52	@ 0x34
 8000c44:	af06      	add	r7, sp, #24
 8000c46:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	75bb      	strb	r3, [r7, #22]
 8000c50:	2300      	movs	r3, #0
 8000c52:	757b      	strb	r3, [r7, #21]
 8000c54:	2300      	movs	r3, #0
 8000c56:	753b      	strb	r3, [r7, #20]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	74fb      	strb	r3, [r7, #19]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	74bb      	strb	r3, [r7, #18]
 8000c60:	2300      	movs	r3, #0
 8000c62:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	1d58      	adds	r0, r3, #5
 8000c6c:	f107 0116 	add.w	r1, r7, #22
 8000c70:	f107 0217 	add.w	r2, r7, #23
 8000c74:	f107 030e 	add.w	r3, r7, #14
 8000c78:	9305      	str	r3, [sp, #20]
 8000c7a:	f107 0311 	add.w	r3, r7, #17
 8000c7e:	9304      	str	r3, [sp, #16]
 8000c80:	f107 0312 	add.w	r3, r7, #18
 8000c84:	9303      	str	r3, [sp, #12]
 8000c86:	f107 0313 	add.w	r3, r7, #19
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	f107 0315 	add.w	r3, r7, #21
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4924      	ldr	r1, [pc, #144]	@ (8000d2c <executeONT+0xec>)
 8000c9c:	f7ff fe10 	bl	80008c0 <parseParameters>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d009      	beq.n	8000cc0 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3305      	adds	r3, #5
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <executeONT+0xf0>)
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <executeONT+0xf4>)
 8000cb6:	2167      	movs	r1, #103	@ 0x67
 8000cb8:	2068      	movs	r0, #104	@ 0x68
 8000cba:	f000 f9c9 	bl	8001050 <prepareFrame>
 8000cbe:	e031      	b.n	8000d24 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8000cc0:	7c7b      	ldrb	r3, [r7, #17]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <executeONT+0x8c>
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d016      	beq.n	8000cf8 <executeONT+0xb8>
 8000cca:	e02b      	b.n	8000d24 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
 8000cce:	b218      	sxth	r0, r3
 8000cd0:	7dbb      	ldrb	r3, [r7, #22]
 8000cd2:	b21c      	sxth	r4, r3
 8000cd4:	7d7b      	ldrb	r3, [r7, #21]
 8000cd6:	b21d      	sxth	r5, r3
 8000cd8:	7d3b      	ldrb	r3, [r7, #20]
 8000cda:	b21e      	sxth	r6, r3
 8000cdc:	7cfb      	ldrb	r3, [r7, #19]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	7cba      	ldrb	r2, [r7, #18]
 8000ce2:	b212      	sxth	r2, r2
 8000ce4:	89f9      	ldrh	r1, [r7, #14]
 8000ce6:	9102      	str	r1, [sp, #8]
 8000ce8:	9201      	str	r2, [sp, #4]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4633      	mov	r3, r6
 8000cee:	462a      	mov	r2, r5
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	f007 f89f 	bl	8007e34 <hagl_draw_triangle>
            break;
 8000cf6:	e015      	b.n	8000d24 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	b218      	sxth	r0, r3
 8000cfc:	7dbb      	ldrb	r3, [r7, #22]
 8000cfe:	b21c      	sxth	r4, r3
 8000d00:	7d7b      	ldrb	r3, [r7, #21]
 8000d02:	b21d      	sxth	r5, r3
 8000d04:	7d3b      	ldrb	r3, [r7, #20]
 8000d06:	b21e      	sxth	r6, r3
 8000d08:	7cfb      	ldrb	r3, [r7, #19]
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	7cba      	ldrb	r2, [r7, #18]
 8000d0e:	b212      	sxth	r2, r2
 8000d10:	89f9      	ldrh	r1, [r7, #14]
 8000d12:	9102      	str	r1, [sp, #8]
 8000d14:	9201      	str	r2, [sp, #4]
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	4633      	mov	r3, r6
 8000d1a:	462a      	mov	r2, r5
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	f007 f8af 	bl	8007e80 <hagl_fill_triangle>
            break;
 8000d22:	bf00      	nop
    }
}
 8000d24:	371c      	adds	r7, #28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	080095f0 	.word	0x080095f0
 8000d30:	080095d4 	.word	0x080095d4
 8000d34:	080095c8 	.word	0x080095c8

08000d38 <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	@ 0x50
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	6078      	str	r0, [r7, #4]
    const char charText[50];

    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	1d58      	adds	r0, r3, #5
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	9303      	str	r3, [sp, #12]
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e74 <executeONN+0x13c>)
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e78 <executeONN+0x140>)
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	4b4a      	ldr	r3, [pc, #296]	@ (8000e7c <executeONN+0x144>)
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <executeONN+0x148>)
 8000d58:	4a4a      	ldr	r2, [pc, #296]	@ (8000e84 <executeONN+0x14c>)
 8000d5a:	494b      	ldr	r1, [pc, #300]	@ (8000e88 <executeONN+0x150>)
 8000d5c:	f7ff fdb0 	bl	80008c0 <parseParameters>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f083 0301 	eor.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d009      	beq.n	8000d80 <executeONN+0x48>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3305      	adds	r3, #5
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4b46      	ldr	r3, [pc, #280]	@ (8000e8c <executeONN+0x154>)
 8000d74:	4a46      	ldr	r2, [pc, #280]	@ (8000e90 <executeONN+0x158>)
 8000d76:	2167      	movs	r1, #103	@ 0x67
 8000d78:	2068      	movs	r0, #104	@ 0x68
 8000d7a:	f000 f969 	bl	8001050 <prepareFrame>
 8000d7e:	e076      	b.n	8000e6e <executeONN+0x136>
        return;
    }

    // Zapisz początkowe pozycje
    text.startX = text.x;
 8000d80:	4b44      	ldr	r3, [pc, #272]	@ (8000e94 <executeONN+0x15c>)
 8000d82:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8000d86:	4b43      	ldr	r3, [pc, #268]	@ (8000e94 <executeONN+0x15c>)
 8000d88:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
    text.startY = text.y;
 8000d8c:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <executeONN+0x15c>)
 8000d8e:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8000d92:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <executeONN+0x15c>)
 8000d94:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
    text.textLength = 0;
 8000d98:	4b3e      	ldr	r3, [pc, #248]	@ (8000e94 <executeONN+0x15c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    text.firstIteration = true;
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <executeONN+0x15c>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8000da8:	e015      	b.n	8000dd6 <executeONN+0x9e>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 8000daa:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <executeONN+0x15c>)
 8000dac:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000db0:	3340      	adds	r3, #64	@ 0x40
 8000db2:	443b      	add	r3, r7
 8000db4:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <executeONN+0x15c>)
 8000dba:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <executeONN+0x15c>)
 8000dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 8000dc6:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <executeONN+0x15c>)
 8000dc8:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b30      	ldr	r3, [pc, #192]	@ (8000e94 <executeONN+0x15c>)
 8000dd2:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    while (charText[text.textLength] && text.textLength < 50) {
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <executeONN+0x15c>)
 8000dd8:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000ddc:	3340      	adds	r3, #64	@ 0x40
 8000dde:	443b      	add	r3, r7
 8000de0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <executeONN+0xba>
 8000de8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <executeONN+0x15c>)
 8000dea:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8000dee:	2b31      	cmp	r3, #49	@ 0x31
 8000df0:	d9db      	bls.n	8000daa <executeONN+0x72>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <executeONN+0x15c>)
 8000df4:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <executeONN+0x15c>)
 8000e04:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    text.lastUpdate = HAL_GetTick();
 8000e08:	f001 fb4a 	bl	80024a0 <HAL_GetTick>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a21      	ldr	r2, [pc, #132]	@ (8000e94 <executeONN+0x15c>)
 8000e10:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

    const uint8_t* font;
    switch(text.fontSize) {
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <executeONN+0x15c>)
 8000e16:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d00c      	beq.n	8000e38 <executeONN+0x100>
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	dc0d      	bgt.n	8000e3e <executeONN+0x106>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d002      	beq.n	8000e2c <executeONN+0xf4>
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d003      	beq.n	8000e32 <executeONN+0xfa>
 8000e2a:	e008      	b.n	8000e3e <executeONN+0x106>
        case 1: font = font5x7; break;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <executeONN+0x160>)
 8000e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e30:	e007      	b.n	8000e42 <executeONN+0x10a>
        case 2: font = font5x8; break;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <executeONN+0x164>)
 8000e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e36:	e004      	b.n	8000e42 <executeONN+0x10a>
        case 3: font = font6x9; break;
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <executeONN+0x168>)
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e3c:	e001      	b.n	8000e42 <executeONN+0x10a>
        default: font = font5x7;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <executeONN+0x160>)
 8000e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <executeONN+0x15c>)
 8000e44:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d110      	bne.n	8000e6e <executeONN+0x136>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <executeONN+0x15c>)
 8000e4e:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8000e52:	b219      	sxth	r1, r3
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <executeONN+0x15c>)
 8000e56:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <executeONN+0x15c>)
 8000e5e:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 8000e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4603      	mov	r3, r0
 8000e68:	480a      	ldr	r0, [pc, #40]	@ (8000e94 <executeONN+0x15c>)
 8000e6a:	f006 fba1 	bl	80075b0 <hagl_put_text>
    }
}
 8000e6e:	3740      	adds	r7, #64	@ 0x40
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000e0e 	.word	0x20000e0e
 8000e78:	20000e0d 	.word	0x20000e0d
 8000e7c:	20000e0c 	.word	0x20000e0c
 8000e80:	20000e09 	.word	0x20000e09
 8000e84:	20000e08 	.word	0x20000e08
 8000e88:	080095fc 	.word	0x080095fc
 8000e8c:	080095d4 	.word	0x080095d4
 8000e90:	080095c8 	.word	0x080095c8
 8000e94:	20000d40 	.word	0x20000d40
 8000e98:	080096a0 	.word	0x080096a0
 8000e9c:	0800cba8 	.word	0x0800cba8
 8000ea0:	0800fa4c 	.word	0x0800fa4c

08000ea4 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
* TODO naprawic wylaczenie oraz reset
************************************************************************/
static void executeOFF(Frame *frame)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	795b      	ldrb	r3, [r3, #5]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <executeOFF+0x16>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d006      	beq.n	8000ec6 <executeOFF+0x22>
		break;
	case 1:
		lcdClear();
		break;
	}
}
 8000eb8:	e008      	b.n	8000ecc <executeOFF+0x28>
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <executeOFF+0x30>)
 8000ec0:	f002 f82c 	bl	8002f1c <HAL_GPIO_WritePin>
		break;
 8000ec4:	e002      	b.n	8000ecc <executeOFF+0x28>
		lcdClear();
 8000ec6:	f000 fdb7 	bl	8001a38 <lcdClear>
		break;
 8000eca:	bf00      	nop
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <isWithinBounds+0x26>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b9f      	cmp	r3, #159	@ 0x9f
 8000eec:	dc07      	bgt.n	8000efe <isWithinBounds+0x26>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db04      	blt.n	8000efe <isWithinBounds+0x26>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef8:	dc01      	bgt.n	8000efe <isWithinBounds+0x26>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <isWithinBounds+0x28>
 8000efe:	2300      	movs	r3, #0
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const char *data, int *x, int *y)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0a6      	sub	sp, #152	@ 0x98
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	char *token;
	    char data_copy[MAX_DATA_SIZE];
	    strncpy(data_copy, data, MAX_DATA_SIZE);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	68f9      	ldr	r1, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fb17 	bl	800855c <strncpy>

	    token = strtok(data_copy, ",");
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4915      	ldr	r1, [pc, #84]	@ (8000f88 <parseCoordinates+0x74>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fb25 	bl	8008584 <strtok>
 8000f3a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <parseCoordinates+0x36>
	        return false;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e01a      	b.n	8000f80 <parseCoordinates+0x6c>
	    }
	    *x = atoi(token);
 8000f4a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000f4e:	f006 ffbd 	bl	8007ecc <atoi>
 8000f52:	4602      	mov	r2, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	601a      	str	r2, [r3, #0]

	    token = strtok(NULL, ",");
 8000f58:	490b      	ldr	r1, [pc, #44]	@ (8000f88 <parseCoordinates+0x74>)
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f007 fb12 	bl	8008584 <strtok>
 8000f60:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    if (token == NULL) {
 8000f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <parseCoordinates+0x5c>
	        return false;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e007      	b.n	8000f80 <parseCoordinates+0x6c>
	    }
	    *y = atoi(token);
 8000f70:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000f74:	f006 ffaa 	bl	8007ecc <atoi>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]

	    return true;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3798      	adds	r7, #152	@ 0x98
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08009604 	.word	0x08009604

08000f8c <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e04b      	b.n	800103a <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fac:	d10e      	bne.n	8000fcc <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	617a      	str	r2, [r7, #20]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	227d      	movs	r2, #125	@ 0x7d
 8000fba:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	617a      	str	r2, [r7, #20]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	225d      	movs	r2, #93	@ 0x5d
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e033      	b.n	8001034 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fd6:	d10e      	bne.n	8000ff6 <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	617a      	str	r2, [r7, #20]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	227d      	movs	r2, #125	@ 0x7d
 8000fe4:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	617a      	str	r2, [r7, #20]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	225e      	movs	r2, #94	@ 0x5e
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e01e      	b.n	8001034 <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b60      	cmp	r3, #96	@ 0x60
 8001000:	d10e      	bne.n	8001020 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	617a      	str	r2, [r7, #20]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	227d      	movs	r2, #125	@ 0x7d
 800100e:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	617a      	str	r2, [r7, #20]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	2226      	movs	r2, #38	@ 0x26
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e009      	b.n	8001034 <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	441a      	add	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	1c59      	adds	r1, r3, #1
 800102a:	6179      	str	r1, [r7, #20]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	440b      	add	r3, r1
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	3301      	adds	r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3af      	bcc.n	8000fa2 <byteStuffing+0x16>
        }
    }
    return j;
 8001042:	697b      	ldr	r3, [r7, #20]
}
 8001044:	4618      	mov	r0, r3
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8001050:	b408      	push	{r3}
 8001052:	b580      	push	{r7, lr}
 8001054:	b0b3      	sub	sp, #204	@ 0xcc
 8001056:	af02      	add	r7, sp, #8
 8001058:	4603      	mov	r3, r0
 800105a:	603a      	str	r2, [r7, #0]
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	460b      	mov	r3, r1
 8001060:	71bb      	strb	r3, [r7, #6]
	Frame frame = {0};
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	2285      	movs	r2, #133	@ 0x85
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f007 fa6e 	bl	800854c <memset>
    frame.sender = sender;
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	767b      	strb	r3, [r7, #25]
    frame.receiver = receiver;
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	763b      	strb	r3, [r7, #24]
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	3302      	adds	r3, #2
 800107e:	2203      	movs	r2, #3
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f007 fa6a 	bl	800855c <strncpy>

    // Użycie dynamicznej alokacji do przechowywania danych sformatowanych
    char *formatted_data = (char *)malloc(MAX_DATA_SIZE);
 8001088:	2080      	movs	r0, #128	@ 0x80
 800108a:	f006 ff23 	bl	8007ed4 <malloc>
 800108e:	4603      	mov	r3, r0
 8001090:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (formatted_data == NULL) {
 8001094:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80c2 	beq.w	8001222 <prepareFrame+0x1d2>
        // Obsługa błędu alokacji pamięci
        return;
    }

    va_list args;
    va_start(args, format);
 800109e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010a2:	617b      	str	r3, [r7, #20]
    vsnprintf(formatted_data, MAX_DATA_SIZE, format, args);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80010b0:	f007 fa2e 	bl	8008510 <vsniprintf>
    va_end(args);

    size_t data_len = strlen(formatted_data);
 80010b4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80010b8:	f7ff f88a 	bl	80001d0 <strlen>
 80010bc:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    // Użycie dynamicznej alokacji do obliczeń CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 80010c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010c4:	3305      	adds	r3, #5
 80010c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint8_t *crc_input = (uint8_t *)malloc(crc_input_len);
 80010ca:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80010ce:	f006 ff01 	bl	8007ed4 <malloc>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (crc_input == NULL) {
 80010d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d104      	bne.n	80010ea <prepareFrame+0x9a>
        // Obsługa błędu alokacji pamięci
        free(formatted_data);
 80010e0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80010e4:	f006 fefe 	bl	8007ee4 <free>
        return;
 80010e8:	e09c      	b.n	8001224 <prepareFrame+0x1d4>
    }

    crc_input[0] = frame.sender;
 80010ea:	7e7a      	ldrb	r2, [r7, #25]
 80010ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010f0:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 80010f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80010f6:	3301      	adds	r3, #1
 80010f8:	7e3a      	ldrb	r2, [r7, #24]
 80010fa:	701a      	strb	r2, [r3, #0]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 80010fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001100:	3302      	adds	r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	f107 031a 	add.w	r3, r7, #26
 8001108:	8819      	ldrh	r1, [r3, #0]
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	8011      	strh	r1, [r2, #0]
 800110e:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, formatted_data, data_len);
 8001110:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001114:	3305      	adds	r3, #5
 8001116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800111a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800111e:	4618      	mov	r0, r3
 8001120:	f007 fb0f 	bl	8008742 <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	461a      	mov	r2, r3
 800112a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800112e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001132:	f7ff fadf 	bl	80006f4 <calculateCrc16>
    free(crc_input);  // Zwolnienie pamięci po zakończeniu używania
 8001136:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800113a:	f006 fed3 	bl	8007ee4 <free>

    // Użycie dynamicznej alokacji do przechowywania ramki
    size_t raw_payload_len = 2 + COMMAND_LENGTH + data_len + 4;
 800113e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001142:	3309      	adds	r3, #9
 8001144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint8_t *raw_payload = (uint8_t *)malloc(raw_payload_len);
 8001148:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800114c:	f006 fec2 	bl	8007ed4 <malloc>
 8001150:	4603      	mov	r3, r0
 8001152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (raw_payload == NULL) {
 8001156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d104      	bne.n	8001168 <prepareFrame+0x118>
        free(formatted_data);
 800115e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001162:	f006 febf 	bl	8007ee4 <free>
        return;
 8001166:	e05d      	b.n	8001224 <prepareFrame+0x1d4>
    }

    raw_payload[0] = frame.sender;
 8001168:	7e7a      	ldrb	r2, [r7, #25]
 800116a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800116e:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 8001170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001174:	3301      	adds	r3, #1
 8001176:	7e3a      	ldrb	r2, [r7, #24]
 8001178:	701a      	strb	r2, [r3, #0]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 800117a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800117e:	3302      	adds	r3, #2
 8001180:	461a      	mov	r2, r3
 8001182:	f107 031a 	add.w	r3, r7, #26
 8001186:	8819      	ldrh	r1, [r3, #0]
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	8011      	strh	r1, [r2, #0]
 800118c:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, formatted_data, data_len);
 800118e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001192:	3305      	adds	r3, #5
 8001194:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001198:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800119c:	4618      	mov	r0, r3
 800119e:	f007 fad0 	bl	8008742 <memcpy>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 80011a2:	7c3b      	ldrb	r3, [r7, #16]
 80011a4:	461a      	mov	r2, r3
 80011a6:	7c7b      	ldrb	r3, [r7, #17]
 80011a8:	f107 0008 	add.w	r0, r7, #8
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4613      	mov	r3, r2
 80011b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001230 <prepareFrame+0x1e0>)
 80011b2:	2105      	movs	r1, #5
 80011b4:	f007 f90a 	bl	80083cc <sniprintf>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 80011b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011bc:	3305      	adds	r3, #5
 80011be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80011c2:	4413      	add	r3, r2
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	601a      	str	r2, [r3, #0]
    free(formatted_data);  // Zwolnienie pamięci po zakończeniu używania
 80011c8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80011cc:	f006 fe8a 	bl	8007ee4 <free>

    // Użycie dynamicznej alokacji do przechowywania danych po byte stuffing
    uint8_t *stuffed_payload = (uint8_t *)malloc(512);  // Maksymalny rozmiar bufora
 80011d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011d4:	f006 fe7e 	bl	8007ed4 <malloc>
 80011d8:	4603      	mov	r3, r0
 80011da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (stuffed_payload == NULL) {
 80011de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d104      	bne.n	80011f0 <prepareFrame+0x1a0>
        free(raw_payload);
 80011e6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80011ea:	f006 fe7b 	bl	8007ee4 <free>
        return;
 80011ee:	e019      	b.n	8001224 <prepareFrame+0x1d4>
    }

    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 80011f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80011f4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80011f8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80011fc:	f7ff fec6 	bl	8000f8c <byteStuffing>
 8001200:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    free(raw_payload);  // Zwolnienie pamięci po zakończeniu używania
 8001204:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001208:	f006 fe6c 	bl	8007ee4 <free>

    // Wysyłanie ramki przez UART
    USART_sendFrame(stuffed_payload, stuffed_len);
 800120c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001210:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001214:	f7ff f9fe 	bl	8000614 <USART_sendFrame>
    free(stuffed_payload);  // Zwolnienie pamięci po zakończeniu używania
 8001218:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800121c:	f006 fe62 	bl	8007ee4 <free>
 8001220:	e000      	b.n	8001224 <prepareFrame+0x1d4>
        return;
 8001222:	bf00      	nop
}
 8001224:	37c4      	adds	r7, #196	@ 0xc4
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800122c:	b001      	add	sp, #4
 800122e:	4770      	bx	lr
 8001230:	08009608 	.word	0x08009608

08001234 <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	4613      	mov	r3, r2
 8001240:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];
        if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b06      	cmp	r3, #6
 8001246:	d948      	bls.n	80012da <decodeFrame+0xa6>
            uint8_t k = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]
            frame->receiver = bx[k++];
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	75fa      	strb	r2, [r7, #23]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	701a      	strb	r2, [r3, #0]
            frame->sender = bx[k++];
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	75fa      	strb	r2, [r7, #23]
 8001264:	461a      	mov	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	705a      	strb	r2, [r3, #1]
            memcpy(frame->command, &bx[k],COMMAND_LENGTH);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c98      	adds	r0, r3, #2
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	2203      	movs	r2, #3
 800127c:	4619      	mov	r1, r3
 800127e:	f007 fa60 	bl	8008742 <memcpy>
            k += COMMAND_LENGTH;
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	3303      	adds	r3, #3
 8001286:	75fb      	strb	r3, [r7, #23]
            uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	3b07      	subs	r3, #7
 800128c:	75bb      	strb	r3, [r7, #22]
            memcpy(frame->data, &bx[k],data_len);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1d58      	adds	r0, r3, #5
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	7dba      	ldrb	r2, [r7, #22]
 800129a:	4619      	mov	r1, r3
 800129c:	f007 fa51 	bl	8008742 <memcpy>
            k += data_len;
 80012a0:	7dfa      	ldrb	r2, [r7, #23]
 80012a2:	7dbb      	ldrb	r3, [r7, #22]
 80012a4:	4413      	add	r3, r2
 80012a6:	75fb      	strb	r3, [r7, #23]
            memcpy(incCrc, &bx[k], 2);
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	823b      	strh	r3, [r7, #16]
            calculateCrc16((uint8_t *)frame, k, ownCrc);
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	f107 0214 	add.w	r2, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f7ff fa19 	bl	80006f4 <calculateCrc16>
            if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 80012c2:	7d3a      	ldrb	r2, [r7, #20]
 80012c4:	7c3b      	ldrb	r3, [r7, #16]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d103      	bne.n	80012d2 <decodeFrame+0x9e>
 80012ca:	7d7a      	ldrb	r2, [r7, #21]
 80012cc:	7c7b      	ldrb	r3, [r7, #17]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <decodeFrame+0xa2>
            	return false;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e002      	b.n	80012dc <decodeFrame+0xa8>
            }
            return true;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <decodeFrame+0xa8>
        }
        return false;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <processReceivedChar>:
* Błędy:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80012f2:	d112      	bne.n	800131a <processReceivedChar+0x36>
    	if(in_frame) {
 80012f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001434 <processReceivedChar+0x150>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <processReceivedChar+0x22>
    		resetFrameState();
 80012fc:	f7ff faca 	bl	8000894 <resetFrameState>
    		in_frame = true;
 8001300:	4b4c      	ldr	r3, [pc, #304]	@ (8001434 <processReceivedChar+0x150>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
    	}
    	in_frame = true;
 8001306:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <processReceivedChar+0x150>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
    	bx_index = 0;
 800130c:	4b4a      	ldr	r3, [pc, #296]	@ (8001438 <processReceivedChar+0x154>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
    	escape_detected = false;
 8001312:	4b4a      	ldr	r3, [pc, #296]	@ (800143c <processReceivedChar+0x158>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
    	resetFrameState();
    }
}
 8001318:	e088      	b.n	800142c <processReceivedChar+0x148>
    } else if (received_char == FRAME_END && escape_detected == false) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b60      	cmp	r3, #96	@ 0x60
 800131e:	d133      	bne.n	8001388 <processReceivedChar+0xa4>
 8001320:	4b46      	ldr	r3, [pc, #280]	@ (800143c <processReceivedChar+0x158>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	f083 0301 	eor.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d02c      	beq.n	8001388 <processReceivedChar+0xa4>
        if (in_frame) {
 800132e:	4b41      	ldr	r3, [pc, #260]	@ (8001434 <processReceivedChar+0x150>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01f      	beq.n	8001376 <processReceivedChar+0x92>
            if (decodeFrame(bx, &frame, bx_index)) {
 8001336:	4b40      	ldr	r3, [pc, #256]	@ (8001438 <processReceivedChar+0x154>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	4940      	ldr	r1, [pc, #256]	@ (8001440 <processReceivedChar+0x15c>)
 8001340:	4840      	ldr	r0, [pc, #256]	@ (8001444 <processReceivedChar+0x160>)
 8001342:	f7ff ff77 	bl	8001234 <decodeFrame>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <processReceivedChar+0x80>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 800134c:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <processReceivedChar+0x164>)
 800134e:	4a3f      	ldr	r2, [pc, #252]	@ (800144c <processReceivedChar+0x168>)
 8001350:	2167      	movs	r1, #103	@ 0x67
 8001352:	2068      	movs	r0, #104	@ 0x68
 8001354:	f7ff fe7c 	bl	8001050 <prepareFrame>
            	stopAnimation();
 8001358:	f7ff fa28 	bl	80007ac <stopAnimation>
                handleCommand(&frame);
 800135c:	4838      	ldr	r0, [pc, #224]	@ (8001440 <processReceivedChar+0x15c>)
 800135e:	f000 f879 	bl	8001454 <handleCommand>
 8001362:	e005      	b.n	8001370 <processReceivedChar+0x8c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001364:	4b3a      	ldr	r3, [pc, #232]	@ (8001450 <processReceivedChar+0x16c>)
 8001366:	4a39      	ldr	r2, [pc, #228]	@ (800144c <processReceivedChar+0x168>)
 8001368:	2167      	movs	r1, #103	@ 0x67
 800136a:	2068      	movs	r0, #104	@ 0x68
 800136c:	f7ff fe70 	bl	8001050 <prepareFrame>
            resetFrameState();
 8001370:	f7ff fa90 	bl	8000894 <resetFrameState>
        if (in_frame) {
 8001374:	e05a      	b.n	800142c <processReceivedChar+0x148>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001376:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <processReceivedChar+0x16c>)
 8001378:	4a34      	ldr	r2, [pc, #208]	@ (800144c <processReceivedChar+0x168>)
 800137a:	2167      	movs	r1, #103	@ 0x67
 800137c:	2068      	movs	r0, #104	@ 0x68
 800137e:	f7ff fe67 	bl	8001050 <prepareFrame>
            resetFrameState();
 8001382:	f7ff fa87 	bl	8000894 <resetFrameState>
        if (in_frame) {
 8001386:	e051      	b.n	800142c <processReceivedChar+0x148>
    } else if (in_frame) {
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <processReceivedChar+0x150>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d04a      	beq.n	8001426 <processReceivedChar+0x142>
        if (escape_detected) {
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <processReceivedChar+0x158>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d02f      	beq.n	80013f8 <processReceivedChar+0x114>
            if (received_char == FRAME_START_STUFF) {
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b5e      	cmp	r3, #94	@ 0x5e
 800139c:	d108      	bne.n	80013b0 <processReceivedChar+0xcc>
                bx[bx_index++] = FRAME_START;
 800139e:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <processReceivedChar+0x154>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	4924      	ldr	r1, [pc, #144]	@ (8001438 <processReceivedChar+0x154>)
 80013a6:	600a      	str	r2, [r1, #0]
 80013a8:	4a26      	ldr	r2, [pc, #152]	@ (8001444 <processReceivedChar+0x160>)
 80013aa:	217e      	movs	r1, #126	@ 0x7e
 80013ac:	54d1      	strb	r1, [r2, r3]
 80013ae:	e01f      	b.n	80013f0 <processReceivedChar+0x10c>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b5d      	cmp	r3, #93	@ 0x5d
 80013b4:	d108      	bne.n	80013c8 <processReceivedChar+0xe4>
                bx[bx_index++] = ESCAPE_CHAR;
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <processReceivedChar+0x154>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	491e      	ldr	r1, [pc, #120]	@ (8001438 <processReceivedChar+0x154>)
 80013be:	600a      	str	r2, [r1, #0]
 80013c0:	4a20      	ldr	r2, [pc, #128]	@ (8001444 <processReceivedChar+0x160>)
 80013c2:	217d      	movs	r1, #125	@ 0x7d
 80013c4:	54d1      	strb	r1, [r2, r3]
 80013c6:	e013      	b.n	80013f0 <processReceivedChar+0x10c>
            } else if (received_char == FRAME_END_STUFF) {
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b26      	cmp	r3, #38	@ 0x26
 80013cc:	d108      	bne.n	80013e0 <processReceivedChar+0xfc>
                bx[bx_index++] = FRAME_END;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <processReceivedChar+0x154>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	4918      	ldr	r1, [pc, #96]	@ (8001438 <processReceivedChar+0x154>)
 80013d6:	600a      	str	r2, [r1, #0]
 80013d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001444 <processReceivedChar+0x160>)
 80013da:	2160      	movs	r1, #96	@ 0x60
 80013dc:	54d1      	strb	r1, [r2, r3]
 80013de:	e007      	b.n	80013f0 <processReceivedChar+0x10c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <processReceivedChar+0x16c>)
 80013e2:	4a1a      	ldr	r2, [pc, #104]	@ (800144c <processReceivedChar+0x168>)
 80013e4:	2167      	movs	r1, #103	@ 0x67
 80013e6:	2068      	movs	r0, #104	@ 0x68
 80013e8:	f7ff fe32 	bl	8001050 <prepareFrame>
                resetFrameState();
 80013ec:	f7ff fa52 	bl	8000894 <resetFrameState>
            escape_detected = false;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <processReceivedChar+0x158>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
}
 80013f6:	e019      	b.n	800142c <processReceivedChar+0x148>
        } else if (received_char == ESCAPE_CHAR) {
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b7d      	cmp	r3, #125	@ 0x7d
 80013fc:	d103      	bne.n	8001406 <processReceivedChar+0x122>
            escape_detected = true;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <processReceivedChar+0x158>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
}
 8001404:	e012      	b.n	800142c <processReceivedChar+0x148>
            if (bx_index < sizeof(bx)) {
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <processReceivedChar+0x154>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2bff      	cmp	r3, #255	@ 0xff
 800140c:	d808      	bhi.n	8001420 <processReceivedChar+0x13c>
                bx[bx_index++] = received_char;
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <processReceivedChar+0x154>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	4908      	ldr	r1, [pc, #32]	@ (8001438 <processReceivedChar+0x154>)
 8001416:	600a      	str	r2, [r1, #0]
 8001418:	490a      	ldr	r1, [pc, #40]	@ (8001444 <processReceivedChar+0x160>)
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	54ca      	strb	r2, [r1, r3]
}
 800141e:	e005      	b.n	800142c <processReceivedChar+0x148>
            	resetFrameState();
 8001420:	f7ff fa38 	bl	8000894 <resetFrameState>
}
 8001424:	e002      	b.n	800142c <processReceivedChar+0x148>
    	resetFrameState();
 8001426:	f7ff fa35 	bl	8000894 <resetFrameState>
}
 800142a:	e7ff      	b.n	800142c <processReceivedChar+0x148>
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000cb4 	.word	0x20000cb4
 8001438:	20000cb0 	.word	0x20000cb0
 800143c:	20000cac 	.word	0x20000cac
 8001440:	20000cb8 	.word	0x20000cb8
 8001444:	20000bac 	.word	0x20000bac
 8001448:	08009614 	.word	0x08009614
 800144c:	080095c8 	.word	0x080095c8
 8001450:	0800961c 	.word	0x0800961c

08001454 <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b092      	sub	sp, #72	@ 0x48
 8001458:	af02      	add	r7, sp, #8
 800145a:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8084 	beq.w	800156c <handleCommand+0x118>
        return;
    }

    CommandEntry commandTable[COMMAND_COUNT] = {
 8001464:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <handleCommand+0x120>)
 8001466:	f107 0414 	add.w	r4, r7, #20
 800146a:	461d      	mov	r5, r3
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001478:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };

    for (int i = 0; i < COMMAND_COUNT; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001480:	e067      	b.n	8001552 <handleCommand+0xfe>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1c98      	adds	r0, r3, #2
 8001486:	f107 0214 	add.w	r2, r7, #20
 800148a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	2203      	movs	r2, #3
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff f9a6 	bl	80007e4 <safeCompare>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d056      	beq.n	800154c <handleCommand+0xf8>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 800149e:	f107 0214 	add.w	r2, r7, #20
 80014a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	2203      	movs	r2, #3
 80014aa:	4933      	ldr	r1, [pc, #204]	@ (8001578 <handleCommand+0x124>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f999 	bl	80007e4 <safeCompare>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00f      	beq.n	80014d8 <handleCommand+0x84>
                    lcdClear();
 80014b8:	f000 fabe 	bl	8001a38 <lcdClear>
                    commandTable[i].function(frame);
 80014bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	3340      	adds	r3, #64	@ 0x40
 80014c2:	443b      	add	r3, r7
 80014c4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
                    copyToBuffer();
 80014cc:	f7ff f97c 	bl	80007c8 <copyToBuffer>
                    clearFrame(frame);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fae5 	bl	8000aa0 <clearFrame>
                    return;
 80014d6:	e04a      	b.n	800156e <handleCommand+0x11a>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3305      	adds	r3, #5
 80014dc:	f107 020c 	add.w	r2, r7, #12
 80014e0:	f107 0110 	add.w	r1, r7, #16
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fd15 	bl	8000f14 <parseCoordinates>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01f      	beq.n	8001530 <handleCommand+0xdc>
                    if (isWithinBounds(x, y)) {
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fcee 	bl	8000ed8 <isWithinBounds>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00f      	beq.n	8001522 <handleCommand+0xce>
                        lcdClear();
 8001502:	f000 fa99 	bl	8001a38 <lcdClear>
                        commandTable[i].function(frame);
 8001506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	3340      	adds	r3, #64	@ 0x40
 800150c:	443b      	add	r3, r7
 800150e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
                        copyToBuffer();
 8001516:	f7ff f957 	bl	80007c8 <copyToBuffer>
                        clearFrame(frame);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fac0 	bl	8000aa0 <clearFrame>
                        return;
 8001520:	e025      	b.n	800156e <handleCommand+0x11a>
                    } else {
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <handleCommand+0x128>)
 8001524:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <handleCommand+0x12c>)
 8001526:	2167      	movs	r1, #103	@ 0x67
 8001528:	2068      	movs	r0, #104	@ 0x68
 800152a:	f7ff fd91 	bl	8001050 <prepareFrame>
                    return;
 800152e:	e01e      	b.n	800156e <handleCommand+0x11a>
                }
            } else {
            	lcdClear();
 8001530:	f000 fa82 	bl	8001a38 <lcdClear>
            	copyToBuffer();
 8001534:	f7ff f948 	bl	80007c8 <copyToBuffer>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3305      	adds	r3, #5
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <handleCommand+0x130>)
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <handleCommand+0x12c>)
 8001542:	2167      	movs	r1, #103	@ 0x67
 8001544:	2068      	movs	r0, #104	@ 0x68
 8001546:	f7ff fd83 	bl	8001050 <prepareFrame>
                return;
 800154a:	e010      	b.n	800156e <handleCommand+0x11a>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 800154c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800154e:	3301      	adds	r3, #1
 8001550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001554:	2b04      	cmp	r3, #4
 8001556:	dd94      	ble.n	8001482 <handleCommand+0x2e>
            }
        }
    }
    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3302      	adds	r3, #2
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <handleCommand+0x130>)
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <handleCommand+0x12c>)
 8001562:	2167      	movs	r1, #103	@ 0x67
 8001564:	2068      	movs	r0, #104	@ 0x68
 8001566:	f7ff fd73 	bl	8001050 <prepareFrame>
 800156a:	e000      	b.n	800156e <handleCommand+0x11a>
        return;
 800156c:	bf00      	nop
}
 800156e:	3740      	adds	r7, #64	@ 0x40
 8001570:	46bd      	mov	sp, r7
 8001572:	bdb0      	pop	{r4, r5, r7, pc}
 8001574:	08009638 	.word	0x08009638
 8001578:	08009624 	.word	0x08009624
 800157c:	08009628 	.word	0x08009628
 8001580:	080095c8 	.word	0x080095c8
 8001584:	080095d4 	.word	0x080095d4

08001588 <updateScrollingText>:



void updateScrollingText(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af02      	add	r7, sp, #8
	if (!text.isScrolling || text.scrollSpeed == 0) {
 800158e:	4b64      	ldr	r3, [pc, #400]	@ (8001720 <updateScrollingText+0x198>)
 8001590:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001594:	f083 0301 	eor.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80bb 	bne.w	8001716 <updateScrollingText+0x18e>
 80015a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001720 <updateScrollingText+0x198>)
 80015a2:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80b5 	beq.w	8001716 <updateScrollingText+0x18e>
	        return;
	}

    uint32_t currentTime = HAL_GetTick();
 80015ac:	f000 ff78 	bl	80024a0 <HAL_GetTick>
 80015b0:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 80015b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001720 <updateScrollingText+0x198>)
 80015b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	4a58      	ldr	r2, [pc, #352]	@ (8001720 <updateScrollingText+0x198>)
 80015be:	f892 20cd 	ldrb.w	r2, [r2, #205]	@ 0xcd
 80015c2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80015c6:	4293      	cmp	r3, r2
 80015c8:	f0c0 80a6 	bcc.w	8001718 <updateScrollingText+0x190>
        text.lastUpdate = currentTime;
 80015cc:	4a54      	ldr	r2, [pc, #336]	@ (8001720 <updateScrollingText+0x198>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

        // Oblicz szerokość znaku w zależności od fontu
        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 80015d4:	4b52      	ldr	r3, [pc, #328]	@ (8001720 <updateScrollingText+0x198>)
 80015d6:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d014      	beq.n	8001608 <updateScrollingText+0x80>
 80015de:	2b03      	cmp	r3, #3
 80015e0:	dc19      	bgt.n	8001616 <updateScrollingText+0x8e>
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d002      	beq.n	80015ec <updateScrollingText+0x64>
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d007      	beq.n	80015fa <updateScrollingText+0x72>
 80015ea:	e014      	b.n	8001616 <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 80015ec:	2305      	movs	r3, #5
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	2307      	movs	r3, #7
 80015f2:	73bb      	strb	r3, [r7, #14]
 80015f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <updateScrollingText+0x19c>)
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	e014      	b.n	8001624 <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 80015fa:	2305      	movs	r3, #5
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	2308      	movs	r3, #8
 8001600:	73bb      	strb	r3, [r7, #14]
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <updateScrollingText+0x1a0>)
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	e00d      	b.n	8001624 <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9;break;
 8001608:	2306      	movs	r3, #6
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	2309      	movs	r3, #9
 800160e:	73bb      	strb	r3, [r7, #14]
 8001610:	4b46      	ldr	r3, [pc, #280]	@ (800172c <updateScrollingText+0x1a4>)
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	e006      	b.n	8001624 <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 8001616:	2305      	movs	r3, #5
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	2307      	movs	r3, #7
 800161c:	73bb      	strb	r3, [r7, #14]
 800161e:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <updateScrollingText+0x19c>)
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	bf00      	nop
        }

        text.x += charWidth;
 8001624:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <updateScrollingText+0x198>)
 8001626:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4413      	add	r3, r2
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <updateScrollingText+0x198>)
 8001632:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

                // Oblicz całkowitą szerokość tekstu

                // Jeśli tekst wyszedł całkowicie za ekran
                if (text.x >= LCD_WIDTH - (charWidth * text.textLength)) {
 8001636:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <updateScrollingText+0x198>)
 8001638:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800163c:	4619      	mov	r1, r3
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4a37      	ldr	r2, [pc, #220]	@ (8001720 <updateScrollingText+0x198>)
 8001642:	f892 20d0 	ldrb.w	r2, [r2, #208]	@ 0xd0
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800164e:	4299      	cmp	r1, r3
 8001650:	db43      	blt.n	80016da <updateScrollingText+0x152>
                    if (text.firstIteration) {
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <updateScrollingText+0x198>)
 8001654:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d024      	beq.n	80016a6 <updateScrollingText+0x11e>
                        // W pierwszej iteracji używamy startowych współrzędnych
                        text.x = text.startX;  // Zaczynamy zza lewej krawędzi
 800165c:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <updateScrollingText+0x198>)
 800165e:	f893 20ca 	ldrb.w	r2, [r3, #202]	@ 0xca
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <updateScrollingText+0x198>)
 8001664:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <updateScrollingText+0x198>)
 800166a:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 800166e:	7bbb      	ldrb	r3, [r7, #14]
 8001670:	4413      	add	r3, r2
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <updateScrollingText+0x198>)
 8001676:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu w pierwszej iteracji
                        if (text.y >= LCD_HEIGHT - charHeight) {
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <updateScrollingText+0x198>)
 800167c:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001680:	461a      	mov	r2, r3
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001688:	429a      	cmp	r2, r3
 800168a:	db26      	blt.n	80016da <updateScrollingText+0x152>
                            text.firstIteration = false;  // Kończymy pierwszą iterację
 800168c:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <updateScrollingText+0x198>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                            text.x = 0;
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <updateScrollingText+0x198>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                            text.y = 0;
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <updateScrollingText+0x198>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 80016a4:	e019      	b.n	80016da <updateScrollingText+0x152>
                        }
                    } else {
                        // W kolejnych iteracjach zaczynamy od lewej krawędzi
                        text.x = 0;
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <updateScrollingText+0x198>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <updateScrollingText+0x198>)
 80016b0:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <updateScrollingText+0x198>)
 80016bc:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu
                        if (text.y >= LCD_HEIGHT - charHeight) {
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <updateScrollingText+0x198>)
 80016c2:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80016c6:	461a      	mov	r2, r3
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016ce:	429a      	cmp	r2, r3
 80016d0:	db03      	blt.n	80016da <updateScrollingText+0x152>
                            text.y = 0;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <updateScrollingText+0x198>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
                        }
                    }
                }

        if (!lcdIsBusy()) {
 80016da:	f000 fa19 	bl	8001b10 <lcdIsBusy>
 80016de:	4603      	mov	r3, r0
 80016e0:	f083 0301 	eor.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <updateScrollingText+0x190>
            lcdClear();
 80016ea:	f000 f9a5 	bl	8001a38 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 80016ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <updateScrollingText+0x198>)
 80016f0:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80016f4:	b219      	sxth	r1, r3
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <updateScrollingText+0x198>)
 80016f8:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <updateScrollingText+0x198>)
 8001700:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4603      	mov	r3, r0
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <updateScrollingText+0x198>)
 800170c:	f005 ff50 	bl	80075b0 <hagl_put_text>
            lcdCopy();
 8001710:	f000 f966 	bl	80019e0 <lcdCopy>
 8001714:	e000      	b.n	8001718 <updateScrollingText+0x190>
	        return;
 8001716:	bf00      	nop
        }
    }
}
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000d40 	.word	0x20000d40
 8001724:	080096a0 	.word	0x080096a0
 8001728:	0800cba8 	.word	0x0800cba8
 800172c:	0800fa4c 	.word	0x0800fa4c

08001730 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	4a49      	ldr	r2, [pc, #292]	@ (8001870 <MX_GPIO_Init+0x140>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	4b44      	ldr	r3, [pc, #272]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	4a43      	ldr	r2, [pc, #268]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176a:	4b41      	ldr	r3, [pc, #260]	@ (8001870 <MX_GPIO_Init+0x140>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b3e      	ldr	r3, [pc, #248]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	4a3d      	ldr	r2, [pc, #244]	@ (8001870 <MX_GPIO_Init+0x140>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001782:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	4a37      	ldr	r2, [pc, #220]	@ (8001870 <MX_GPIO_Init+0x140>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800179a:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <MX_GPIO_Init+0x140>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	4b32      	ldr	r3, [pc, #200]	@ (8001870 <MX_GPIO_Init+0x140>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	4a31      	ldr	r2, [pc, #196]	@ (8001870 <MX_GPIO_Init+0x140>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <MX_GPIO_Init+0x140>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	f641 0106 	movw	r1, #6150	@ 0x1806
 80017c4:	482b      	ldr	r0, [pc, #172]	@ (8001874 <MX_GPIO_Init+0x144>)
 80017c6:	f001 fba9 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80017ca:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80017ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4826      	ldr	r0, [pc, #152]	@ (8001878 <MX_GPIO_Init+0x148>)
 80017e0:	f001 f9f2 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e4:	2303      	movs	r3, #3
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e8:	2303      	movs	r3, #3
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4821      	ldr	r0, [pc, #132]	@ (800187c <MX_GPIO_Init+0x14c>)
 80017f8:	f001 f9e6 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80017fc:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001800:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001814:	f001 f9d8 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001818:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 800181c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4811      	ldr	r0, [pc, #68]	@ (8001874 <MX_GPIO_Init+0x144>)
 800182e:	f001 f9cb 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001832:	f641 0306 	movw	r3, #6150	@ 0x1806
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	480a      	ldr	r0, [pc, #40]	@ (8001874 <MX_GPIO_Init+0x144>)
 800184c:	f001 f9bc 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001850:	2304      	movs	r3, #4
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001854:	2303      	movs	r3, #3
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4807      	ldr	r0, [pc, #28]	@ (8001880 <MX_GPIO_Init+0x150>)
 8001864:	f001 f9b0 	bl	8002bc8 <HAL_GPIO_Init>

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000
 8001874:	48000400 	.word	0x48000400
 8001878:	48000800 	.word	0x48000800
 800187c:	48001c00 	.word	0x48001c00
 8001880:	48000c00 	.word	0x48000c00

08001884 <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <lcdCmd+0x44>)
 8001896:	f001 fb41 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018a0:	4809      	ldr	r0, [pc, #36]	@ (80018c8 <lcdCmd+0x44>)
 80018a2:	f001 fb3b 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80018a6:	1df9      	adds	r1, r7, #7
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	2201      	movs	r2, #1
 80018ae:	4807      	ldr	r0, [pc, #28]	@ (80018cc <lcdCmd+0x48>)
 80018b0:	f002 ff0f 	bl	80046d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ba:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <lcdCmd+0x44>)
 80018bc:	f001 fb2e 	bl	8002f1c <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	48000400 	.word	0x48000400
 80018cc:	2000ae20 	.word	0x2000ae20

080018d0 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <lcdData+0x44>)
 80018e2:	f001 fb1b 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ec:	4809      	ldr	r0, [pc, #36]	@ (8001914 <lcdData+0x44>)
 80018ee:	f001 fb15 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80018f2:	1df9      	adds	r1, r7, #7
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	2201      	movs	r2, #1
 80018fa:	4807      	ldr	r0, [pc, #28]	@ (8001918 <lcdData+0x48>)
 80018fc:	f002 fee9 	bl	80046d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001906:	4803      	ldr	r0, [pc, #12]	@ (8001914 <lcdData+0x44>)
 8001908:	f001 fb08 	bl	8002f1c <HAL_GPIO_WritePin>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	48000400 	.word	0x48000400
 8001918:	2000ae20 	.word	0x2000ae20

0800191c <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <lcdSend+0x20>
		lcdCmd(value);
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ffa5 	bl	8001884 <lcdCmd>
	} else {
		lcdData(value);
	}
}
 800193a:	e004      	b.n	8001946 <lcdSend+0x2a>
		lcdData(value);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffc5 	bl	80018d0 <lcdData>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ffb5 	bl	80018d0 <lcdData>
	lcdData(value);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ffb0 	bl	80018d0 <lcdData>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 8001986:	202a      	movs	r0, #42	@ 0x2a
 8001988:	f7ff ff7c 	bl	8001884 <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	b29b      	uxth	r3, r3
 8001990:	3301      	adds	r3, #1
 8001992:	b29b      	uxth	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffda 	bl	800194e <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	b29a      	uxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ffd1 	bl	800194e <lcdData16>

  lcdCmd(ST7735S_RASET);
 80019ac:	202b      	movs	r0, #43	@ 0x2b
 80019ae:	f7ff ff69 	bl	8001884 <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3302      	adds	r3, #2
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ffc7 	bl	800194e <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ffbc 	bl	800194e <lcdData16>
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 80019e4:	f000 f894 	bl	8001b10 <lcdIsBusy>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d11b      	bne.n	8001a26 <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	22a0      	movs	r2, #160	@ 0xa0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ffbf 	bl	8001978 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 80019fa:	202c      	movs	r0, #44	@ 0x2c
 80019fc:	f7ff ff42 	bl	8001884 <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a06:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <lcdCopy+0x4c>)
 8001a08:	f001 fa88 	bl	8002f1c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a12:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <lcdCopy+0x4c>)
 8001a14:	f001 fa82 	bl	8002f1c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001a18:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a1c:	4904      	ldr	r1, [pc, #16]	@ (8001a30 <lcdCopy+0x50>)
 8001a1e:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <lcdCopy+0x54>)
 8001a20:	f002 ffce 	bl	80049c0 <HAL_SPI_Transmit_DMA>
 8001a24:	e000      	b.n	8001a28 <lcdCopy+0x48>
        return;
 8001a26:	bf00      	nop
}
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	48000400 	.word	0x48000400
 8001a30:	20000e18 	.word	0x20000e18
 8001a34:	2000ae20 	.word	0x2000ae20

08001a38 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001a3c:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001a40:	2100      	movs	r1, #0
 8001a42:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <lcdClear+0x14>)
 8001a44:	f006 fd82 	bl	800854c <memset>
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000e18 	.word	0x20000e18

08001a50 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2104      	movs	r1, #4
 8001a5a:	481c      	ldr	r0, [pc, #112]	@ (8001acc <lcdInit+0x7c>)
 8001a5c:	f001 fa5e 	bl	8002f1c <HAL_GPIO_WritePin>
    delay(100);
 8001a60:	2064      	movs	r0, #100	@ 0x64
 8001a62:	f000 f8c9 	bl	8001bf8 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2104      	movs	r1, #4
 8001a6a:	4818      	ldr	r0, [pc, #96]	@ (8001acc <lcdInit+0x7c>)
 8001a6c:	f001 fa56 	bl	8002f1c <HAL_GPIO_WritePin>
    delay(100);
 8001a70:	2064      	movs	r0, #100	@ 0x64
 8001a72:	f000 f8c1 	bl	8001bf8 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	e009      	b.n	8001a90 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <lcdInit+0x80>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff49 	bl	800191c <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b4b      	cmp	r3, #75	@ 0x4b
 8001a94:	d9f2      	bls.n	8001a7c <lcdInit+0x2c>
    }
    delay(200);
 8001a96:	20c8      	movs	r0, #200	@ 0xc8
 8001a98:	f000 f8ae 	bl	8001bf8 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001a9c:	2011      	movs	r0, #17
 8001a9e:	f7ff fef1 	bl	8001884 <lcdCmd>
    delay(120);
 8001aa2:	2078      	movs	r0, #120	@ 0x78
 8001aa4:	f000 f8a8 	bl	8001bf8 <delay>
    lcdCmd(ST7735S_DISPON);
 8001aa8:	2029      	movs	r0, #41	@ 0x29
 8001aaa:	f7ff feeb 	bl	8001884 <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4806      	ldr	r0, [pc, #24]	@ (8001acc <lcdInit+0x7c>)
 8001ab4:	f001 fa32 	bl	8002f1c <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001ab8:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001abc:	2100      	movs	r1, #0
 8001abe:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <lcdInit+0x84>)
 8001ac0:	f006 fd44 	bl	800854c <memset>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	08012a04 	.word	0x08012a04
 8001ad4:	20000e18 	.word	0x20000e18

08001ad8 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	461a      	mov	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	4905      	ldr	r1, [pc, #20]	@ (8001b0c <lcdPutPixel+0x34>)
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000e18 	.word	0x20000e18

08001b10 <lcdIsBusy>:
bool lcdIsBusy(void) {
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <lcdIsBusy+0x14>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	2000ae18 	.word	0x2000ae18

08001b28 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <HAL_SPI_TxCpltCallback+0x2c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d108      	bne.n	8001b4a <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b3e:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <HAL_SPI_TxCpltCallback+0x30>)
 8001b40:	f001 f9ec 	bl	8002f1c <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_SPI_TxCpltCallback+0x34>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
    }
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000ae20 	.word	0x2000ae20
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	2000ae18 	.word	0x2000ae18

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	@ (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	@ (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ffc2 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <delay+0x2c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001c06:	bf00      	nop
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	441a      	add	r2, r3
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <delay+0x2c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d8f8      	bhi.n	8001c08 <delay+0x10>
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	2000ae1c 	.word	0x2000ae1c

08001c28 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001c2e:	f7fe fcb9 	bl	80005a4 <USART_kbhit>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001c38:	f7fe fcc6 	bl	80005c8 <USART_getchar>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fb4e 	bl	80012e4 <processReceivedChar>
	 }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c54:	f000 fbbb 	bl	80023ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c58:	f000 f812 	bl	8001c80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <main+0x2c>)
 8001c5e:	f7ff ffa9 	bl	8001bb4 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c62:	f7ff fd65 	bl	8001730 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c66:	f7fe fd83 	bl	8000770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c6a:	f000 fadb 	bl	8002224 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001c6e:	f000 f85f 	bl	8001d30 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001c72:	f7ff feed 	bl	8001a50 <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
	  waitForFrame();
 8001c76:	f7ff ffd7 	bl	8001c28 <waitForFrame>
 8001c7a:	e7fc      	b.n	8001c76 <main+0x26>
 8001c7c:	00013880 	.word	0x00013880

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b096      	sub	sp, #88	@ 0x58
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2244      	movs	r2, #68	@ 0x44
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f006 fc5c 	bl	800854c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	463b      	mov	r3, r7
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ca2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ca6:	f001 f95f 	bl	8002f68 <HAL_PWREx_ControlVoltageScaling>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cb0:	f000 f838 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001cc0:	2360      	movs	r3, #96	@ 0x60
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001cd0:	2328      	movs	r3, #40	@ 0x28
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 f995 	bl	8003014 <HAL_RCC_OscConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001cf0:	f000 f818 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fd5d 	bl	80037cc <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d18:	f000 f804 	bl	8001d24 <Error_Handler>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3758      	adds	r7, #88	@ 0x58
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <Error_Handler+0x8>

08001d30 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d36:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <MX_SPI2_Init+0x78>)
 8001d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d4e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d62:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d66:	2210      	movs	r2, #16
 8001d68:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d7e:	2207      	movs	r2, #7
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_SPI2_Init+0x74>)
 8001d90:	f002 fbfc 	bl	800458c <HAL_SPI_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d9a:	f7ff ffc3 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000ae20 	.word	0x2000ae20
 8001da8:	40003800 	.word	0x40003800

08001dac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	@ 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8001ec4 <HAL_SPI_MspInit+0x118>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d175      	bne.n	8001eba <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dce:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dda:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df2:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	4a31      	ldr	r2, [pc, #196]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <HAL_SPI_MspInit+0x11c>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 8001e16:	2308      	movs	r3, #8
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e26:	2305      	movs	r3, #5
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4826      	ldr	r0, [pc, #152]	@ (8001ecc <HAL_SPI_MspInit+0x120>)
 8001e32:	f000 fec9 	bl	8002bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 8001e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e48:	2305      	movs	r3, #5
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	481f      	ldr	r0, [pc, #124]	@ (8001ed0 <HAL_SPI_MspInit+0x124>)
 8001e54:	f000 feb8 	bl	8002bc8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <HAL_SPI_MspInit+0x12c>)
 8001e5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e66:	2210      	movs	r2, #16
 8001e68:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001e8e:	4811      	ldr	r0, [pc, #68]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001e90:	f000 fc24 	bl	80026dc <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001e9a:	f7ff ff43 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed4 <HAL_SPI_MspInit+0x128>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2102      	movs	r1, #2
 8001eae:	2024      	movs	r0, #36	@ 0x24
 8001eb0:	f000 fbdd 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001eb4:	2024      	movs	r0, #36	@ 0x24
 8001eb6:	f000 fbf6 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40003800 	.word	0x40003800
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	2000ae84 	.word	0x2000ae84
 8001ed8:	40020058 	.word	0x40020058

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <HAL_MspInit+0x44>)
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f20 <HAL_MspInit+0x44>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_MspInit+0x44>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_MspInit+0x44>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <HAL_MspInit+0x44>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_MspInit+0x44>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <NMI_Handler+0x4>

08001f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 fa7c 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <SysTick_Handler+0x1c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	4a03      	ldr	r2, [pc, #12]	@ (8001f94 <SysTick_Handler+0x1c>)
 8001f88:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 8001f8a:	f7ff fafd 	bl	8001588 <updateScrollingText>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000ae1c 	.word	0x2000ae1c

08001f98 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <DMA1_Channel5_IRQHandler+0x10>)
 8001f9e:	f000 fd34 	bl	8002a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000ae84 	.word	0x2000ae84

08001fac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001fb0:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <SPI2_IRQHandler+0x10>)
 8001fb2:	f002 fdf3 	bl	8004b9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000ae20 	.word	0x2000ae20

08001fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <USART2_IRQHandler+0x10>)
 8001fc6:	f003 f9e3 	bl	8005390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000aed0 	.word	0x2000aed0

08001fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_kill>:

int _kill(int pid, int sig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fee:	f006 fb7b 	bl	80086e8 <__errno>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2216      	movs	r2, #22
 8001ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_exit>:

void _exit (int status)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffe7 	bl	8001fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002016:	bf00      	nop
 8002018:	e7fd      	b.n	8002016 <_exit+0x12>

0800201a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e00a      	b.n	8002042 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202c:	f3af 8000 	nop.w
 8002030:	4601      	mov	r1, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	60ba      	str	r2, [r7, #8]
 8002038:	b2ca      	uxtb	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	dbf0      	blt.n	800202c <_read+0x12>
  }

  return len;
 800204a:	687b      	ldr	r3, [r7, #4]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e009      	b.n	800207a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	60ba      	str	r2, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3301      	adds	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	dbf1      	blt.n	8002066 <_write+0x12>
  }
  return len;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_close>:

int _close(int file)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b4:	605a      	str	r2, [r3, #4]
  return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_isatty>:

int _isatty(int file)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f006 fae0 	bl	80086e8 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20018000 	.word	0x20018000
 8002154:	00001000 	.word	0x00001000
 8002158:	2000aecc 	.word	0x2000aecc
 800215c:	2000b0a8 	.word	0x2000b0a8

08002160 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <HAL_UART_TxCpltCallback+0x4c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d119      	bne.n	80021c8 <HAL_UART_TxCpltCallback+0x44>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8002194:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d013      	beq.n	80021c8 <HAL_UART_TxCpltCallback+0x44>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	@ (80021d8 <HAL_UART_TxCpltCallback+0x54>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	4a07      	ldr	r2, [pc, #28]	@ (80021d4 <HAL_UART_TxCpltCallback+0x50>)
 80021b8:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80021ba:	f107 030f 	add.w	r3, r7, #15
 80021be:	2201      	movs	r2, #1
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	@ (80021d0 <HAL_UART_TxCpltCallback+0x4c>)
 80021c4:	f003 f83a 	bl	800523c <HAL_UART_Transmit_IT>
	   }
   }
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000aed0 	.word	0x2000aed0
 80021d4:	2000029c 	.word	0x2000029c
 80021d8:	200002ac 	.word	0x200002ac

080021dc <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002218 <HAL_UART_RxCpltCallback+0x3c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d110      	bne.n	800220e <HAL_UART_RxCpltCallback+0x32>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) & rxRingBuffer.mask;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_UART_RxCpltCallback+0x40>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_UART_RxCpltCallback+0x40>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	4a08      	ldr	r2, [pc, #32]	@ (800221c <HAL_UART_RxCpltCallback+0x40>)
 80021fa:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_UART_RxCpltCallback+0x40>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <HAL_UART_RxCpltCallback+0x44>)
 8002202:	4413      	add	r3, r2
 8002204:	2201      	movs	r2, #1
 8002206:	4619      	mov	r1, r3
 8002208:	4803      	ldr	r0, [pc, #12]	@ (8002218 <HAL_UART_RxCpltCallback+0x3c>)
 800220a:	f003 f875 	bl	80052f8 <HAL_UART_Receive_IT>

	 }
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	2000aed0 	.word	0x2000aed0
 800221c:	2000028c 	.word	0x2000028c
 8002220:	20000aac 	.word	0x20000aac

08002224 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <MX_USART2_UART_Init+0x78>)
 800222a:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <MX_USART2_UART_Init+0x7c>)
 800222c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b19      	ldr	r3, [pc, #100]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <MX_USART2_UART_Init+0x78>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002242:	4b16      	ldr	r3, [pc, #88]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <MX_USART2_UART_Init+0x78>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b13      	ldr	r3, [pc, #76]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <MX_USART2_UART_Init+0x78>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002260:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002266:	480d      	ldr	r0, [pc, #52]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002268:	f002 ff9a 	bl	80051a0 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002272:	f7ff fd57 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 8002276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800227a:	490a      	ldr	r1, [pc, #40]	@ (80022a4 <MX_USART2_UART_Init+0x80>)
 800227c:	480a      	ldr	r0, [pc, #40]	@ (80022a8 <MX_USART2_UART_Init+0x84>)
 800227e:	f7fe f977 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 8002282:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002286:	4909      	ldr	r1, [pc, #36]	@ (80022ac <MX_USART2_UART_Init+0x88>)
 8002288:	4809      	ldr	r0, [pc, #36]	@ (80022b0 <MX_USART2_UART_Init+0x8c>)
 800228a:	f7fe f971 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 800228e:	2201      	movs	r2, #1
 8002290:	4904      	ldr	r1, [pc, #16]	@ (80022a4 <MX_USART2_UART_Init+0x80>)
 8002292:	4802      	ldr	r0, [pc, #8]	@ (800229c <MX_USART2_UART_Init+0x78>)
 8002294:	f003 f830 	bl	80052f8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000aed0 	.word	0x2000aed0
 80022a0:	40004400 	.word	0x40004400
 80022a4:	20000aac 	.word	0x20000aac
 80022a8:	2000028c 	.word	0x2000028c
 80022ac:	200002ac 	.word	0x200002ac
 80022b0:	2000029c 	.word	0x2000029c

080022b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0ac      	sub	sp, #176	@ 0xb0
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2288      	movs	r2, #136	@ 0x88
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f006 f939 	bl	800854c <memset>
  if(uartHandle->Instance==USART2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a25      	ldr	r2, [pc, #148]	@ (8002374 <HAL_UART_MspInit+0xc0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d143      	bne.n	800236c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022e8:	2300      	movs	r3, #0
 80022ea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fc8f 	bl	8003c14 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022fc:	f7ff fd12 	bl	8001d24 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002300:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_UART_MspInit+0xc4>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <HAL_UART_MspInit+0xc4>)
 8002306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800230a:	6593      	str	r3, [r2, #88]	@ 0x58
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <HAL_UART_MspInit+0xc4>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <HAL_UART_MspInit+0xc4>)
 800231a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231c:	4a16      	ldr	r2, [pc, #88]	@ (8002378 <HAL_UART_MspInit+0xc4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002324:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <HAL_UART_MspInit+0xc4>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002330:	230c      	movs	r3, #12
 8002332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002348:	2307      	movs	r3, #7
 800234a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002352:	4619      	mov	r1, r3
 8002354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002358:	f000 fc36 	bl	8002bc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	2026      	movs	r0, #38	@ 0x26
 8002362:	f000 f984 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002366:	2026      	movs	r0, #38	@ 0x26
 8002368:	f000 f99d 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800236c:	bf00      	nop
 800236e:	37b0      	adds	r7, #176	@ 0xb0
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40004400 	.word	0x40004400
 8002378:	40021000 	.word	0x40021000

0800237c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002380:	f7ff feee 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	@ (80023bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <LoopForever+0xe>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	@ (80023c8 <LoopForever+0x16>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f006 f9a3 	bl	80086f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ae:	f7ff fc4f 	bl	8001c50 <main>

080023b2 <LoopForever>:

LoopForever:
    b LoopForever
 80023b2:	e7fe      	b.n	80023b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80023c0:	08012cd8 	.word	0x08012cd8
  ldr r2, =_sbss
 80023c4:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80023c8:	2000b0a8 	.word	0x2000b0a8

080023cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC1_2_IRQHandler>

080023ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f000 f93d 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023de:	200f      	movs	r0, #15
 80023e0:	f000 f80e 	bl	8002400 <HAL_InitTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	e001      	b.n	80023f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f0:	f7ff fd74 	bl	8001edc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800240c:	4b17      	ldr	r3, [pc, #92]	@ (800246c <HAL_InitTick+0x6c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_InitTick+0x70>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <HAL_InitTick+0x6c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002422:	fbb3 f3f1 	udiv	r3, r3, r1
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f949 	bl	80026c2 <HAL_SYSTICK_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d809      	bhi.n	8002450 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f000 f913 	bl	800266e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002448:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <HAL_InitTick+0x74>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e007      	b.n	8002460 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e004      	b.n	8002460 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e001      	b.n	8002460 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000208 	.word	0x20000208
 8002470:	20000200 	.word	0x20000200
 8002474:	20000204 	.word	0x20000204

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	@ (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000208 	.word	0x20000208
 800249c:	2000af58 	.word	0x2000af58

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	2000af58 	.word	0x2000af58

080024b8 <__NVIC_SetPriorityGrouping>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_EnableIRQ>:
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0b      	blt.n	8002546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4907      	ldr	r1, [pc, #28]	@ (8002554 <__NVIC_EnableIRQ+0x38>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2001      	movs	r0, #1
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000e100 	.word	0xe000e100

08002558 <__NVIC_SetPriority>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db0a      	blt.n	8002582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	490c      	ldr	r1, [pc, #48]	@ (80025a4 <__NVIC_SetPriority+0x4c>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002580:	e00a      	b.n	8002598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4908      	ldr	r1, [pc, #32]	@ (80025a8 <__NVIC_SetPriority+0x50>)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	3b04      	subs	r3, #4
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	440b      	add	r3, r1
 8002596:	761a      	strb	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <NVIC_EncodePriority>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	@ 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf28      	it	cs
 80025ca:	2304      	movcs	r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d902      	bls.n	80025dc <NVIC_EncodePriority+0x30>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3b03      	subs	r3, #3
 80025da:	e000      	b.n	80025de <NVIC_EncodePriority+0x32>
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43d9      	mvns	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	4313      	orrs	r3, r2
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	@ 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <SysTick_Config>:
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f7ff ff8e 	bl	8002558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff29 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002680:	f7ff ff3e 	bl	8002500 <__NVIC_GetPriorityGrouping>
 8002684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff ff8e 	bl	80025ac <NVIC_EncodePriority>
 8002690:	4602      	mov	r2, r0
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff5d 	bl	8002558 <__NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff31 	bl	800251c <__NVIC_EnableIRQ>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffa2 	bl	8002614 <SysTick_Config>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e098      	b.n	8002820 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b4d      	ldr	r3, [pc, #308]	@ (800282c <HAL_DMA_Init+0x150>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d80f      	bhi.n	800271a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <HAL_DMA_Init+0x154>)
 8002702:	4413      	add	r3, r2
 8002704:	4a4b      	ldr	r2, [pc, #300]	@ (8002834 <HAL_DMA_Init+0x158>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	009a      	lsls	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a48      	ldr	r2, [pc, #288]	@ (8002838 <HAL_DMA_Init+0x15c>)
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40
 8002718:	e00e      	b.n	8002738 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	4b46      	ldr	r3, [pc, #280]	@ (800283c <HAL_DMA_Init+0x160>)
 8002722:	4413      	add	r3, r2
 8002724:	4a43      	ldr	r2, [pc, #268]	@ (8002834 <HAL_DMA_Init+0x158>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	009a      	lsls	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a42      	ldr	r2, [pc, #264]	@ (8002840 <HAL_DMA_Init+0x164>)
 8002736:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800274e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002752:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002792:	d039      	beq.n	8002808 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	4a27      	ldr	r2, [pc, #156]	@ (8002838 <HAL_DMA_Init+0x15c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d11a      	bne.n	80027d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <HAL_DMA_Init+0x168>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	f003 031c 	and.w	r3, r3, #28
 80027aa:	210f      	movs	r1, #15
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4924      	ldr	r1, [pc, #144]	@ (8002844 <HAL_DMA_Init+0x168>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027b8:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_DMA_Init+0x168>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f003 031c 	and.w	r3, r3, #28
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	491d      	ldr	r1, [pc, #116]	@ (8002844 <HAL_DMA_Init+0x168>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
 80027d2:	e019      	b.n	8002808 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002848 <HAL_DMA_Init+0x16c>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	f003 031c 	and.w	r3, r3, #28
 80027e0:	210f      	movs	r1, #15
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4917      	ldr	r1, [pc, #92]	@ (8002848 <HAL_DMA_Init+0x16c>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027ee:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <HAL_DMA_Init+0x16c>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	f003 031c 	and.w	r3, r3, #28
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	4911      	ldr	r1, [pc, #68]	@ (8002848 <HAL_DMA_Init+0x16c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40020407 	.word	0x40020407
 8002830:	bffdfff8 	.word	0xbffdfff8
 8002834:	cccccccd 	.word	0xcccccccd
 8002838:	40020000 	.word	0x40020000
 800283c:	bffdfbf8 	.word	0xbffdfbf8
 8002840:	40020400 	.word	0x40020400
 8002844:	400200a8 	.word	0x400200a8
 8002848:	400204a8 	.word	0x400204a8

0800284c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_DMA_Start_IT+0x20>
 8002868:	2302      	movs	r3, #2
 800286a:	e04b      	b.n	8002904 <HAL_DMA_Start_IT+0xb8>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d13a      	bne.n	80028f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f95f 	bl	8002b68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 020e 	orr.w	r2, r2, #14
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e00f      	b.n	80028e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0204 	bic.w	r2, r2, #4
 80028d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 020a 	orr.w	r2, r2, #10
 80028e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e005      	b.n	8002902 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
 8002900:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002902:	7dfb      	ldrb	r3, [r7, #23]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e022      	b.n	800297c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 020e 	bic.w	r2, r2, #14
 8002944:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f003 021c 	and.w	r2, r3, #28
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d005      	beq.n	80029ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2204      	movs	r2, #4
 80029a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	e029      	b.n	8002a00 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 020e 	bic.w	r2, r2, #14
 80029ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d0:	f003 021c 	and.w	r2, r3, #28
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
    }
  }
  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f003 031c 	and.w	r3, r3, #28
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d026      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x7a>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d021      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d107      	bne.n	8002a5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0204 	bic.w	r2, r2, #4
 8002a5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f003 021c 	and.w	r2, r3, #28
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d071      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a82:	e06c      	b.n	8002b5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	f003 031c 	and.w	r3, r3, #28
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d02e      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xec>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d029      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 020a 	bic.w	r2, r2, #10
 8002abe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002acc:	f003 021c 	and.w	r2, r3, #28
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d038      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002af4:	e033      	b.n	8002b5e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f003 031c 	and.w	r3, r3, #28
 8002afe:	2208      	movs	r2, #8
 8002b00:	409a      	lsls	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d02a      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x156>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d025      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 020e 	bic.w	r2, r2, #14
 8002b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	f003 021c 	and.w	r2, r3, #28
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	2101      	movs	r1, #1
 8002b32:	fa01 f202 	lsl.w	r2, r1, r2
 8002b36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
}
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f003 021c 	and.w	r2, r3, #28
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d108      	bne.n	8002bac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002baa:	e007      	b.n	8002bbc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd6:	e17f      	b.n	8002ed8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2101      	movs	r1, #1
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8171 	beq.w	8002ed2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d005      	beq.n	8002c08 <HAL_GPIO_Init+0x40>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d130      	bne.n	8002c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c3e:	2201      	movs	r2, #1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 0201 	and.w	r2, r3, #1
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d118      	bne.n	8002ca8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d017      	beq.n	8002ce4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80ac 	beq.w	8002ed2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef8 <HAL_GPIO_Init+0x330>)
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef8 <HAL_GPIO_Init+0x330>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d86:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef8 <HAL_GPIO_Init+0x330>)
 8002d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d92:	4a5a      	ldr	r2, [pc, #360]	@ (8002efc <HAL_GPIO_Init+0x334>)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dbc:	d025      	beq.n	8002e0a <HAL_GPIO_Init+0x242>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8002f00 <HAL_GPIO_Init+0x338>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <HAL_GPIO_Init+0x23e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8002f04 <HAL_GPIO_Init+0x33c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x23a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_GPIO_Init+0x340>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x236>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_GPIO_Init+0x344>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x232>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4b      	ldr	r2, [pc, #300]	@ (8002f10 <HAL_GPIO_Init+0x348>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x22e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4a      	ldr	r2, [pc, #296]	@ (8002f14 <HAL_GPIO_Init+0x34c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x22a>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00c      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e00a      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e008      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e004      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	f002 0203 	and.w	r2, r2, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4093      	lsls	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e1c:	4937      	ldr	r1, [pc, #220]	@ (8002efc <HAL_GPIO_Init+0x334>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e4e:	4a32      	ldr	r2, [pc, #200]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e54:	4b30      	ldr	r3, [pc, #192]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e78:	4a27      	ldr	r2, [pc, #156]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e7e:	4b26      	ldr	r3, [pc, #152]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ecc:	4a12      	ldr	r2, [pc, #72]	@ (8002f18 <HAL_GPIO_Init+0x350>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f47f ae78 	bne.w	8002bd8 <HAL_GPIO_Init+0x10>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	48000c00 	.word	0x48000c00
 8002f0c:	48001000 	.word	0x48001000
 8002f10:	48001400 	.word	0x48001400
 8002f14:	48001800 	.word	0x48001800
 8002f18:	40010400 	.word	0x40010400

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40007000 	.word	0x40007000

08002f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f76:	d130      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f78:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	d038      	beq.n	8002ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f96:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2232      	movs	r2, #50	@ 0x32
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9b      	lsrs	r3, r3, #18
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fac:	e002      	b.n	8002fb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb4:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc0:	d102      	bne.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f2      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd4:	d110      	bne.n	8002ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00f      	b.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fda:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d007      	beq.n	8002ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fe8:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ff0:	4a05      	ldr	r2, [pc, #20]	@ (8003008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40007000 	.word	0x40007000
 800300c:	20000200 	.word	0x20000200
 8003010:	431bde83 	.word	0x431bde83

08003014 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e3ca      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003026:	4b97      	ldr	r3, [pc, #604]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003030:	4b94      	ldr	r3, [pc, #592]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80e4 	beq.w	8003210 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_RCC_OscConfig+0x4a>
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	f040 808b 	bne.w	800316c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b01      	cmp	r3, #1
 800305a:	f040 8087 	bne.w	800316c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800305e:	4b89      	ldr	r3, [pc, #548]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x62>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e3a2      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	4b82      	ldr	r3, [pc, #520]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <HAL_RCC_OscConfig+0x7c>
 8003086:	4b7f      	ldr	r3, [pc, #508]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800308e:	e005      	b.n	800309c <HAL_RCC_OscConfig+0x88>
 8003090:	4b7c      	ldr	r3, [pc, #496]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800309c:	4293      	cmp	r3, r2
 800309e:	d223      	bcs.n	80030e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fd55 	bl	8003b54 <RCC_SetFlashLatencyFromMSIRange>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e383      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b4:	4b73      	ldr	r3, [pc, #460]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a72      	ldr	r2, [pc, #456]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030ba:	f043 0308 	orr.w	r3, r3, #8
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b70      	ldr	r3, [pc, #448]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	496d      	ldr	r1, [pc, #436]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	4968      	ldr	r1, [pc, #416]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
 80030e6:	e025      	b.n	8003134 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e8:	4b66      	ldr	r3, [pc, #408]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a65      	ldr	r2, [pc, #404]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030ee:	f043 0308 	orr.w	r3, r3, #8
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b63      	ldr	r3, [pc, #396]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4960      	ldr	r1, [pc, #384]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003106:	4b5f      	ldr	r3, [pc, #380]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	495b      	ldr	r1, [pc, #364]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fd15 	bl	8003b54 <RCC_SetFlashLatencyFromMSIRange>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e343      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003134:	f000 fc4a 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b52      	ldr	r3, [pc, #328]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	4950      	ldr	r1, [pc, #320]	@ (8003288 <HAL_RCC_OscConfig+0x274>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	4a4e      	ldr	r2, [pc, #312]	@ (800328c <HAL_RCC_OscConfig+0x278>)
 8003152:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003154:	4b4e      	ldr	r3, [pc, #312]	@ (8003290 <HAL_RCC_OscConfig+0x27c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff f951 	bl	8002400 <HAL_InitTick>
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d052      	beq.n	800320e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	e327      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d032      	beq.n	80031da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003174:	4b43      	ldr	r3, [pc, #268]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a42      	ldr	r2, [pc, #264]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003180:	f7ff f98e 	bl	80024a0 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003188:	f7ff f98a 	bl	80024a0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e310      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800319a:	4b3a      	ldr	r3, [pc, #232]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a6:	4b37      	ldr	r3, [pc, #220]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a36      	ldr	r2, [pc, #216]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4931      	ldr	r1, [pc, #196]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	492c      	ldr	r1, [pc, #176]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
 80031d8:	e01a      	b.n	8003210 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031da:	4b2a      	ldr	r3, [pc, #168]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a29      	ldr	r2, [pc, #164]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031e6:	f7ff f95b 	bl	80024a0 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ee:	f7ff f957 	bl	80024a0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e2dd      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003200:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x1da>
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800320e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d074      	beq.n	8003306 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x21a>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d10e      	bne.n	8003246 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d064      	beq.n	8003304 <HAL_RCC_OscConfig+0x2f0>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d160      	bne.n	8003304 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e2ba      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x24a>
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0b      	ldr	r2, [pc, #44]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e026      	b.n	80032ac <HAL_RCC_OscConfig+0x298>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003266:	d115      	bne.n	8003294 <HAL_RCC_OscConfig+0x280>
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a05      	ldr	r2, [pc, #20]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 800326e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a02      	ldr	r2, [pc, #8]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	e014      	b.n	80032ac <HAL_RCC_OscConfig+0x298>
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	08012a9c 	.word	0x08012a9c
 800328c:	20000200 	.word	0x20000200
 8003290:	20000204 	.word	0x20000204
 8003294:	4ba0      	ldr	r3, [pc, #640]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a9f      	ldr	r2, [pc, #636]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800329a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b9d      	ldr	r3, [pc, #628]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a9c      	ldr	r2, [pc, #624]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80032a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7ff f8f4 	bl	80024a0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7ff f8f0 	bl	80024a0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	@ 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e276      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ce:	4b92      	ldr	r3, [pc, #584]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x2a8>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7ff f8e0 	bl	80024a0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e4:	f7ff f8dc 	bl	80024a0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	@ 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e262      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f6:	4b88      	ldr	r3, [pc, #544]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2d0>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d060      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d005      	beq.n	8003324 <HAL_RCC_OscConfig+0x310>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d119      	bne.n	8003352 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d116      	bne.n	8003352 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003324:	4b7c      	ldr	r3, [pc, #496]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_OscConfig+0x328>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e23f      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b76      	ldr	r3, [pc, #472]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	4973      	ldr	r1, [pc, #460]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	e040      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d023      	beq.n	80033a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335a:	4b6f      	ldr	r3, [pc, #444]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6e      	ldr	r2, [pc, #440]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7ff f89b 	bl	80024a0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7ff f897 	bl	80024a0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e21d      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	4b65      	ldr	r3, [pc, #404]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b62      	ldr	r3, [pc, #392]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	495f      	ldr	r1, [pc, #380]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
 80033a0:	e018      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80033a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ae:	f7ff f877 	bl	80024a0 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b6:	f7ff f873 	bl	80024a0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1f9      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c8:	4b53      	ldr	r3, [pc, #332]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d03c      	beq.n	800345a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01c      	beq.n	8003422 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7ff f852 	bl	80024a0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003400:	f7ff f84e 	bl	80024a0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1d4      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003412:	4b41      	ldr	r3, [pc, #260]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ef      	beq.n	8003400 <HAL_RCC_OscConfig+0x3ec>
 8003420:	e01b      	b.n	800345a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003422:	4b3d      	ldr	r3, [pc, #244]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003428:	4a3b      	ldr	r2, [pc, #236]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7ff f835 	bl	80024a0 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343a:	f7ff f831 	bl	80024a0 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1b7      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344c:	4b32      	ldr	r3, [pc, #200]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ef      	bne.n	800343a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a6 	beq.w	80035b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800346c:	4b2a      	ldr	r3, [pc, #168]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b27      	ldr	r3, [pc, #156]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347c:	4a26      	ldr	r2, [pc, #152]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	@ 0x58
 8003484:	4b24      	ldr	r3, [pc, #144]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	4b21      	ldr	r3, [pc, #132]	@ (800351c <HAL_RCC_OscConfig+0x508>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d118      	bne.n	80034d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a0:	4b1e      	ldr	r3, [pc, #120]	@ (800351c <HAL_RCC_OscConfig+0x508>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1d      	ldr	r2, [pc, #116]	@ (800351c <HAL_RCC_OscConfig+0x508>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fff8 	bl	80024a0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fe fff4 	bl	80024a0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e17a      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c6:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_RCC_OscConfig+0x508>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_RCC_OscConfig+0x4d8>
 80034da:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034ea:	e029      	b.n	8003540 <HAL_RCC_OscConfig+0x52c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d115      	bne.n	8003520 <HAL_RCC_OscConfig+0x50c>
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	4a07      	ldr	r2, [pc, #28]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	4a03      	ldr	r2, [pc, #12]	@ (8003518 <HAL_RCC_OscConfig+0x504>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003514:	e014      	b.n	8003540 <HAL_RCC_OscConfig+0x52c>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	4b9c      	ldr	r3, [pc, #624]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003526:	4a9b      	ldr	r2, [pc, #620]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003530:	4b98      	ldr	r3, [pc, #608]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a97      	ldr	r2, [pc, #604]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d016      	beq.n	8003576 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe ffaa 	bl	80024a0 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354e:	e00a      	b.n	8003566 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fe ffa6 	bl	80024a0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e12a      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003566:	4b8b      	ldr	r3, [pc, #556]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ed      	beq.n	8003550 <HAL_RCC_OscConfig+0x53c>
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fe ff93 	bl	80024a0 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fe ff8f 	bl	80024a0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e113      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003594:	4b7f      	ldr	r3, [pc, #508]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ed      	bne.n	800357e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	4a79      	ldr	r2, [pc, #484]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80035ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 80fe 	beq.w	80037ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	f040 80d0 	bne.w	8003768 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035c8:	4b72      	ldr	r3, [pc, #456]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0203 	and.w	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d130      	bne.n	800363e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	3b01      	subs	r3, #1
 80035e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d127      	bne.n	800363e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d11f      	bne.n	800363e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003608:	2a07      	cmp	r2, #7
 800360a:	bf14      	ite	ne
 800360c:	2201      	movne	r2, #1
 800360e:	2200      	moveq	r2, #0
 8003610:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003612:	4293      	cmp	r3, r2
 8003614:	d113      	bne.n	800363e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	3b01      	subs	r3, #1
 8003624:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d109      	bne.n	800363e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	3b01      	subs	r3, #1
 8003638:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d06e      	beq.n	800371c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d069      	beq.n	8003718 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003644:	4b53      	ldr	r3, [pc, #332]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003650:	4b50      	ldr	r3, [pc, #320]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0ad      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003660:	4b4c      	ldr	r3, [pc, #304]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4b      	ldr	r2, [pc, #300]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800366c:	f7fe ff18 	bl	80024a0 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe ff14 	bl	80024a0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e09a      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003686:	4b43      	ldr	r3, [pc, #268]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003692:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4b40      	ldr	r3, [pc, #256]	@ (8003798 <HAL_RCC_OscConfig+0x784>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036a2:	3a01      	subs	r2, #1
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	4311      	orrs	r1, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036ac:	0212      	lsls	r2, r2, #8
 80036ae:	4311      	orrs	r1, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036b4:	0852      	lsrs	r2, r2, #1
 80036b6:	3a01      	subs	r2, #1
 80036b8:	0552      	lsls	r2, r2, #21
 80036ba:	4311      	orrs	r1, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036c0:	0852      	lsrs	r2, r2, #1
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0652      	lsls	r2, r2, #25
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036cc:	0912      	lsrs	r2, r2, #4
 80036ce:	0452      	lsls	r2, r2, #17
 80036d0:	430a      	orrs	r2, r1
 80036d2:	4930      	ldr	r1, [pc, #192]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80036de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 80036ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f0:	f7fe fed6 	bl	80024a0 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fed2 	bl	80024a0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e058      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370a:	4b22      	ldr	r3, [pc, #136]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003716:	e050      	b.n	80037ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e04f      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371c:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d148      	bne.n	80037ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003728:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a19      	ldr	r2, [pc, #100]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003734:	4b17      	ldr	r3, [pc, #92]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003740:	f7fe feae 	bl	80024a0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe feaa 	bl	80024a0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e030      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x734>
 8003766:	e028      	b.n	80037ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d023      	beq.n	80037b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a08      	ldr	r2, [pc, #32]	@ (8003794 <HAL_RCC_OscConfig+0x780>)
 8003774:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fe fe91 	bl	80024a0 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003780:	e00c      	b.n	800379c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fe8d 	bl	80024a0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d905      	bls.n	800379c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e013      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
 8003794:	40021000 	.word	0x40021000
 8003798:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379c:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <HAL_RCC_OscConfig+0x7b0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ec      	bne.n	8003782 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <HAL_RCC_OscConfig+0x7b0>)
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	4905      	ldr	r1, [pc, #20]	@ (80037c4 <HAL_RCC_OscConfig+0x7b0>)
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_RCC_OscConfig+0x7b4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	60cb      	str	r3, [r1, #12]
 80037b4:	e001      	b.n	80037ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	feeefffc 	.word	0xfeeefffc

080037cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0e7      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b75      	ldr	r3, [pc, #468]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d910      	bls.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b72      	ldr	r3, [pc, #456]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 0207 	bic.w	r2, r3, #7
 80037f6:	4970      	ldr	r1, [pc, #448]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b6e      	ldr	r3, [pc, #440]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0cf      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b66      	ldr	r3, [pc, #408]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003828:	429a      	cmp	r2, r3
 800382a:	d908      	bls.n	800383e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b63      	ldr	r3, [pc, #396]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4960      	ldr	r1, [pc, #384]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d04c      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	4b5a      	ldr	r3, [pc, #360]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d121      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0a6      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386a:	4b54      	ldr	r3, [pc, #336]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d115      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e09a      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003882:	4b4e      	ldr	r3, [pc, #312]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e08e      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003892:	4b4a      	ldr	r3, [pc, #296]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e086      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038a2:	4b46      	ldr	r3, [pc, #280]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 0203 	bic.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4943      	ldr	r1, [pc, #268]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fe fdf4 	bl	80024a0 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fe fdf0 	bl	80024a0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e06e      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	4b3a      	ldr	r3, [pc, #232]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 020c 	and.w	r2, r3, #12
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1eb      	bne.n	80038bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d010      	beq.n	8003912 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	4b31      	ldr	r3, [pc, #196]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d208      	bcs.n	8003912 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b2e      	ldr	r3, [pc, #184]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	492b      	ldr	r1, [pc, #172]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003912:	4b29      	ldr	r3, [pc, #164]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d210      	bcs.n	8003942 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 0207 	bic.w	r2, r3, #7
 8003928:	4923      	ldr	r1, [pc, #140]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003930:	4b21      	ldr	r3, [pc, #132]	@ (80039b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d001      	beq.n	8003942 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e036      	b.n	80039b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394e:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4918      	ldr	r1, [pc, #96]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4910      	ldr	r1, [pc, #64]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003980:	f000 f824 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	490b      	ldr	r1, [pc, #44]	@ (80039c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	4a09      	ldr	r2, [pc, #36]	@ (80039c4 <HAL_RCC_ClockConfig+0x1f8>)
 800399e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCC_ClockConfig+0x1fc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fd2b 	bl	8002400 <HAL_InitTick>
 80039aa:	4603      	mov	r3, r0
 80039ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80039ae:	7afb      	ldrb	r3, [r7, #11]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40021000 	.word	0x40021000
 80039c0:	08012a9c 	.word	0x08012a9c
 80039c4:	20000200 	.word	0x20000200
 80039c8:	20000204 	.word	0x20000204

080039cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b089      	sub	sp, #36	@ 0x24
 80039d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039da:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x34>
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	d121      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d11e      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a00:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	e005      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a28:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d102      	bne.n	8003a4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x110>)
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e004      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a50:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d134      	bne.n	8003ac4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d003      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0xac>
 8003a70:	e005      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a72:	4b1a      	ldr	r3, [pc, #104]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x110>)
 8003a74:	617b      	str	r3, [r7, #20]
      break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a78:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a7a:	617b      	str	r3, [r7, #20]
      break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	617b      	str	r3, [r7, #20]
      break;
 8003a82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a84:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	3301      	adds	r3, #1
 8003a90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a92:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	fb03 f202 	mul.w	r2, r3, r2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	0e5b      	lsrs	r3, r3, #25
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ac4:	69bb      	ldr	r3, [r7, #24]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	@ 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08012ab4 	.word	0x08012ab4
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	007a1200 	.word	0x007a1200

08003ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000200 	.word	0x20000200

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4904      	ldr	r1, [pc, #16]	@ (8003b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08012aac 	.word	0x08012aac

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b2c:	f7ff ffda 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4904      	ldr	r1, [pc, #16]	@ (8003b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	08012aac 	.word	0x08012aac

08003b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b60:	4b2a      	ldr	r3, [pc, #168]	@ (8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b6c:	f7ff f9ee 	bl	8002f4c <HAL_PWREx_GetVoltageRange>
 8003b70:	6178      	str	r0, [r7, #20]
 8003b72:	e014      	b.n	8003b9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	4b25      	ldr	r3, [pc, #148]	@ (8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b78:	4a24      	ldr	r2, [pc, #144]	@ (8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b80:	4b22      	ldr	r3, [pc, #136]	@ (8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b8c:	f7ff f9de 	bl	8002f4c <HAL_PWREx_GetVoltageRange>
 8003b90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b92:	4b1e      	ldr	r3, [pc, #120]	@ (8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	4a1d      	ldr	r2, [pc, #116]	@ (8003c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba4:	d10b      	bne.n	8003bbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b80      	cmp	r3, #128	@ 0x80
 8003baa:	d919      	bls.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bb0:	d902      	bls.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	e013      	b.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb8:	2301      	movs	r3, #1
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	e010      	b.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b80      	cmp	r3, #128	@ 0x80
 8003bc2:	d902      	bls.n	8003bca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	e00a      	b.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b80      	cmp	r3, #128	@ 0x80
 8003bce:	d102      	bne.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e004      	b.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b70      	cmp	r3, #112	@ 0x70
 8003bda:	d101      	bne.n	8003be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bdc:	2301      	movs	r3, #1
 8003bde:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 0207 	bic.w	r2, r3, #7
 8003be8:	4909      	ldr	r1, [pc, #36]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d001      	beq.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40022000 	.word	0x40022000

08003c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c20:	2300      	movs	r3, #0
 8003c22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d041      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c38:	d02a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c3e:	d824      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c4a:	d81e      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c54:	d010      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c56:	e018      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c58:	4b86      	ldr	r3, [pc, #536]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a85      	ldr	r2, [pc, #532]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c64:	e015      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fabb 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c76:	e00c      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3320      	adds	r3, #32
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fba6 	bl	80043d0 <RCCEx_PLLSAI2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c88:	e003      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c98:	4b76      	ldr	r3, [pc, #472]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca6:	4973      	ldr	r1, [pc, #460]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cae:	e001      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d041      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cc8:	d02a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cce:	d824      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cd4:	d008      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cda:	d81e      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce4:	d010      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ce6:	e018      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ce8:	4b62      	ldr	r3, [pc, #392]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a61      	ldr	r2, [pc, #388]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cf4:	e015      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fa73 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d06:	e00c      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3320      	adds	r3, #32
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fb5e 	bl	80043d0 <RCCEx_PLLSAI2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d18:	e003      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d28:	4b52      	ldr	r3, [pc, #328]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d36:	494f      	ldr	r1, [pc, #316]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d3e:	e001      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a0 	beq.w	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d56:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6c:	4b41      	ldr	r3, [pc, #260]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d70:	4a40      	ldr	r2, [pc, #256]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d78:	4b3e      	ldr	r3, [pc, #248]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d84:	2301      	movs	r3, #1
 8003d86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d88:	4b3b      	ldr	r3, [pc, #236]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d94:	f7fe fb84 	bl	80024a0 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d9a:	e009      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fe fb80 	bl	80024a0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d902      	bls.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	74fb      	strb	r3, [r7, #19]
        break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003db0:	4b31      	ldr	r3, [pc, #196]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ef      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d15c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01f      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d019      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003de0:	4b24      	ldr	r3, [pc, #144]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dec:	4b21      	ldr	r3, [pc, #132]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a20      	ldr	r2, [pc, #128]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	4a1c      	ldr	r2, [pc, #112]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e0c:	4a19      	ldr	r2, [pc, #100]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fb3f 	bl	80024a0 <HAL_GetTick>
 8003e22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e24:	e00b      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fe fb3b 	bl	80024a0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d902      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	74fb      	strb	r3, [r7, #19]
            break;
 8003e3c:	e006      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ec      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e52:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e62:	4904      	ldr	r1, [pc, #16]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e6a:	e009      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e80:	7c7b      	ldrb	r3, [r7, #17]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b9e      	ldr	r3, [pc, #632]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	4a9d      	ldr	r2, [pc, #628]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9e:	4b98      	ldr	r3, [pc, #608]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f023 0203 	bic.w	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eac:	4994      	ldr	r1, [pc, #592]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec6:	f023 020c 	bic.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	498c      	ldr	r1, [pc, #560]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ee2:	4b87      	ldr	r3, [pc, #540]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	4983      	ldr	r1, [pc, #524]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f04:	4b7e      	ldr	r3, [pc, #504]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	497b      	ldr	r1, [pc, #492]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f26:	4b76      	ldr	r3, [pc, #472]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f34:	4972      	ldr	r1, [pc, #456]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f48:	4b6d      	ldr	r3, [pc, #436]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	496a      	ldr	r1, [pc, #424]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f6a:	4b65      	ldr	r3, [pc, #404]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	4961      	ldr	r1, [pc, #388]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	4959      	ldr	r1, [pc, #356]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fae:	4b54      	ldr	r3, [pc, #336]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fbc:	4950      	ldr	r1, [pc, #320]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fde:	4948      	ldr	r1, [pc, #288]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff2:	4b43      	ldr	r3, [pc, #268]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	493f      	ldr	r1, [pc, #252]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d028      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004014:	4b3a      	ldr	r3, [pc, #232]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004022:	4937      	ldr	r1, [pc, #220]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800402e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004032:	d106      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004034:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a31      	ldr	r2, [pc, #196]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800403e:	60d3      	str	r3, [r2, #12]
 8004040:	e011      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004046:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800404a:	d10c      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f8c8 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d028      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004072:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004078:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004080:	491f      	ldr	r1, [pc, #124]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004090:	d106      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004092:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4a1a      	ldr	r2, [pc, #104]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409c:	60d3      	str	r3, [r2, #12]
 800409e:	e011      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f899 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d02b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040de:	4908      	ldr	r1, [pc, #32]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ee:	d109      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f0:	4b03      	ldr	r3, [pc, #12]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a02      	ldr	r2, [pc, #8]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fa:	60d3      	str	r3, [r2, #12]
 80040fc:	e014      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004108:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800410c:	d10c      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	2101      	movs	r1, #1
 8004114:	4618      	mov	r0, r3
 8004116:	f000 f867 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004134:	4b2b      	ldr	r3, [pc, #172]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004142:	4928      	ldr	r1, [pc, #160]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800414e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004152:	d10d      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f844 	bl	80041e8 <RCCEx_PLLSAI1_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d014      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	74bb      	strb	r3, [r7, #18]
 800416e:	e011      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004178:	d10c      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3320      	adds	r3, #32
 800417e:	2102      	movs	r1, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f925 	bl	80043d0 <RCCEx_PLLSAI2_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ae:	490d      	ldr	r1, [pc, #52]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041c2:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d2:	4904      	ldr	r1, [pc, #16]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041da:	7cbb      	ldrb	r3, [r7, #18]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000

080041e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041f6:	4b75      	ldr	r3, [pc, #468]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d018      	beq.n	8004234 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004202:	4b72      	ldr	r3, [pc, #456]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0203 	and.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d10d      	bne.n	800422e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
       ||
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800421a:	4b6c      	ldr	r3, [pc, #432]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
       ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d047      	beq.n	80042be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	e044      	b.n	80042be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d018      	beq.n	800426e <RCCEx_PLLSAI1_Config+0x86>
 800423c:	2b03      	cmp	r3, #3
 800423e:	d825      	bhi.n	800428c <RCCEx_PLLSAI1_Config+0xa4>
 8004240:	2b01      	cmp	r3, #1
 8004242:	d002      	beq.n	800424a <RCCEx_PLLSAI1_Config+0x62>
 8004244:	2b02      	cmp	r3, #2
 8004246:	d009      	beq.n	800425c <RCCEx_PLLSAI1_Config+0x74>
 8004248:	e020      	b.n	800428c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800424a:	4b60      	ldr	r3, [pc, #384]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11d      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425a:	e01a      	b.n	8004292 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800425c:	4b5b      	ldr	r3, [pc, #364]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d116      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426c:	e013      	b.n	8004296 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800426e:	4b57      	ldr	r3, [pc, #348]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800427a:	4b54      	ldr	r3, [pc, #336]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800428a:	e006      	b.n	800429a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      break;
 8004290:	e004      	b.n	800429c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004292:	bf00      	nop
 8004294:	e002      	b.n	800429c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800429a:	bf00      	nop
    }

    if(status == HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042a2:	4b4a      	ldr	r3, [pc, #296]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	430b      	orrs	r3, r1
 80042b8:	4944      	ldr	r1, [pc, #272]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d17d      	bne.n	80043c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042c4:	4b41      	ldr	r3, [pc, #260]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a40      	ldr	r2, [pc, #256]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d0:	f7fe f8e6 	bl	80024a0 <HAL_GetTick>
 80042d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042d6:	e009      	b.n	80042ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042d8:	f7fe f8e2 	bl	80024a0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d902      	bls.n	80042ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ea:	e005      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ec:	4b37      	ldr	r3, [pc, #220]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ef      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d160      	bne.n	80043c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d111      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004304:	4b31      	ldr	r3, [pc, #196]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800430c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	0912      	lsrs	r2, r2, #4
 800431c:	0452      	lsls	r2, r2, #17
 800431e:	430a      	orrs	r2, r1
 8004320:	492a      	ldr	r1, [pc, #168]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	610b      	str	r3, [r1, #16]
 8004326:	e027      	b.n	8004378 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d112      	bne.n	8004354 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800432e:	4b27      	ldr	r3, [pc, #156]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004336:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6892      	ldr	r2, [r2, #8]
 800433e:	0211      	lsls	r1, r2, #8
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6912      	ldr	r2, [r2, #16]
 8004344:	0852      	lsrs	r2, r2, #1
 8004346:	3a01      	subs	r2, #1
 8004348:	0552      	lsls	r2, r2, #21
 800434a:	430a      	orrs	r2, r1
 800434c:	491f      	ldr	r1, [pc, #124]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	610b      	str	r3, [r1, #16]
 8004352:	e011      	b.n	8004378 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004354:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800435c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	0211      	lsls	r1, r2, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6952      	ldr	r2, [r2, #20]
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	3a01      	subs	r2, #1
 800436e:	0652      	lsls	r2, r2, #25
 8004370:	430a      	orrs	r2, r1
 8004372:	4916      	ldr	r1, [pc, #88]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004378:	4b14      	ldr	r3, [pc, #80]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a13      	ldr	r2, [pc, #76]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fe f88c 	bl	80024a0 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800438a:	e009      	b.n	80043a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800438c:	f7fe f888 	bl	80024a0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d902      	bls.n	80043a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	73fb      	strb	r3, [r7, #15]
          break;
 800439e:	e005      	b.n	80043ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043a0:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ef      	beq.n	800438c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043b2:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	4904      	ldr	r1, [pc, #16]	@ (80043cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000

080043d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043de:	4b6a      	ldr	r3, [pc, #424]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043ea:	4b67      	ldr	r3, [pc, #412]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0203 	and.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d10d      	bne.n	8004416 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
       ||
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004402:	4b61      	ldr	r3, [pc, #388]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
       ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d047      	beq.n	80044a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e044      	b.n	80044a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d018      	beq.n	8004456 <RCCEx_PLLSAI2_Config+0x86>
 8004424:	2b03      	cmp	r3, #3
 8004426:	d825      	bhi.n	8004474 <RCCEx_PLLSAI2_Config+0xa4>
 8004428:	2b01      	cmp	r3, #1
 800442a:	d002      	beq.n	8004432 <RCCEx_PLLSAI2_Config+0x62>
 800442c:	2b02      	cmp	r3, #2
 800442e:	d009      	beq.n	8004444 <RCCEx_PLLSAI2_Config+0x74>
 8004430:	e020      	b.n	8004474 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004432:	4b55      	ldr	r3, [pc, #340]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11d      	bne.n	800447a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004442:	e01a      	b.n	800447a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004444:	4b50      	ldr	r3, [pc, #320]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004454:	e013      	b.n	800447e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004456:	4b4c      	ldr	r3, [pc, #304]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004462:	4b49      	ldr	r3, [pc, #292]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004472:	e006      	b.n	8004482 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e004      	b.n	8004484 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800447a:	bf00      	nop
 800447c:	e002      	b.n	8004484 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800447e:	bf00      	nop
 8004480:	e000      	b.n	8004484 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004482:	bf00      	nop
    }

    if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800448a:	4b3f      	ldr	r3, [pc, #252]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	430b      	orrs	r3, r1
 80044a0:	4939      	ldr	r1, [pc, #228]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d167      	bne.n	800457c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044ac:	4b36      	ldr	r3, [pc, #216]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a35      	ldr	r2, [pc, #212]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fd fff2 	bl	80024a0 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044be:	e009      	b.n	80044d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044c0:	f7fd ffee 	bl	80024a0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
        break;
 80044d2:	e005      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ef      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d14a      	bne.n	800457c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d111      	bne.n	8004510 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044ec:	4b26      	ldr	r3, [pc, #152]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80044f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
 80044fc:	0211      	lsls	r1, r2, #8
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	0912      	lsrs	r2, r2, #4
 8004504:	0452      	lsls	r2, r2, #17
 8004506:	430a      	orrs	r2, r1
 8004508:	491f      	ldr	r1, [pc, #124]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	4313      	orrs	r3, r2
 800450c:	614b      	str	r3, [r1, #20]
 800450e:	e011      	b.n	8004534 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004510:	4b1d      	ldr	r3, [pc, #116]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004518:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6892      	ldr	r2, [r2, #8]
 8004520:	0211      	lsls	r1, r2, #8
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6912      	ldr	r2, [r2, #16]
 8004526:	0852      	lsrs	r2, r2, #1
 8004528:	3a01      	subs	r2, #1
 800452a:	0652      	lsls	r2, r2, #25
 800452c:	430a      	orrs	r2, r1
 800452e:	4916      	ldr	r1, [pc, #88]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	4313      	orrs	r3, r2
 8004532:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004534:	4b14      	ldr	r3, [pc, #80]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a13      	ldr	r2, [pc, #76]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800453e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fd ffae 	bl	80024a0 <HAL_GetTick>
 8004544:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004546:	e009      	b.n	800455c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004548:	f7fd ffaa 	bl	80024a0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d902      	bls.n	800455c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	73fb      	strb	r3, [r7, #15]
          break;
 800455a:	e005      	b.n	8004568 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800455c:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ef      	beq.n	8004548 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800456e:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	4904      	ldr	r1, [pc, #16]	@ (8004588 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004578:	4313      	orrs	r3, r2
 800457a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000

0800458c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e095      	b.n	80046ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ae:	d009      	beq.n	80045c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
 80045b6:	e005      	b.n	80045c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd fbe4 	bl	8001dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004604:	d902      	bls.n	800460c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e002      	b.n	8004612 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800460c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004610:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800461a:	d007      	beq.n	800462c <HAL_SPI_Init+0xa0>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004624:	d002      	beq.n	800462c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466e:	ea42 0103 	orr.w	r1, r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	0c1b      	lsrs	r3, r3, #16
 8004688:	f003 0204 	and.w	r2, r3, #4
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046a8:	ea42 0103 	orr.w	r1, r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b088      	sub	sp, #32
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e2:	f7fd fedd 	bl	80024a0 <HAL_GetTick>
 80046e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d001      	beq.n	80046fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
 80046fa:	e15c      	b.n	80049b6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_SPI_Transmit+0x36>
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e154      	b.n	80049b6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_SPI_Transmit+0x48>
 8004716:	2302      	movs	r3, #2
 8004718:	e14d      	b.n	80049b6 <HAL_SPI_Transmit+0x2e4>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800476c:	d10f      	bne.n	800478e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800477c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800478c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b40      	cmp	r3, #64	@ 0x40
 800479a:	d007      	beq.n	80047ac <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047b4:	d952      	bls.n	800485c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_SPI_Transmit+0xf2>
 80047be:	8b7b      	ldrh	r3, [r7, #26]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d145      	bne.n	8004850 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c8:	881a      	ldrh	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d4:	1c9a      	adds	r2, r3, #2
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047e8:	e032      	b.n	8004850 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d112      	bne.n	800481e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	881a      	ldrh	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800481c:	e018      	b.n	8004850 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800481e:	f7fd fe3f 	bl	80024a0 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d803      	bhi.n	8004836 <HAL_SPI_Transmit+0x164>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d102      	bne.n	800483c <HAL_SPI_Transmit+0x16a>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0b2      	b.n	80049b6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1c7      	bne.n	80047ea <HAL_SPI_Transmit+0x118>
 800485a:	e083      	b.n	8004964 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_SPI_Transmit+0x198>
 8004864:	8b7b      	ldrh	r3, [r7, #26]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d177      	bne.n	800495a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d912      	bls.n	800489a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	881a      	ldrh	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b02      	subs	r3, #2
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004898:	e05f      	b.n	800495a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80048c0:	e04b      	b.n	800495a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d12b      	bne.n	8004928 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d912      	bls.n	8004900 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	881a      	ldrh	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b02      	subs	r3, #2
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048fe:	e02c      	b.n	800495a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004926:	e018      	b.n	800495a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004928:	f7fd fdba 	bl	80024a0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_Transmit+0x26e>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Transmit+0x274>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e02d      	b.n	80049b6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ae      	bne.n	80048c2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	6839      	ldr	r1, [r7, #0]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fbd3 	bl	8005114 <SPI_EndRxTxTransaction>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80049da:	2302      	movs	r3, #2
 80049dc:	e0d4      	b.n	8004b88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_Transmit_DMA+0x2a>
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0cc      	b.n	8004b88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_SPI_Transmit_DMA+0x3c>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e0c5      	b.n	8004b88 <HAL_SPI_Transmit_DMA+0x1c8>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2203      	movs	r2, #3
 8004a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a4e:	d10f      	bne.n	8004a70 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a74:	4a46      	ldr	r2, [pc, #280]	@ (8004b90 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	4a45      	ldr	r2, [pc, #276]	@ (8004b94 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	4a44      	ldr	r2, [pc, #272]	@ (8004b98 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a9e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004aa8:	d82d      	bhi.n	8004b06 <HAL_SPI_Transmit_DMA+0x146>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab4:	d127      	bne.n	8004b06 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10f      	bne.n	8004ae4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ad2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ae2:	e010      	b.n	8004b06 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004af2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	4619      	mov	r1, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b1e:	f7fd fe95 	bl	800284c <HAL_DMA_Start_IT>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2c:	f043 0210 	orr.w	r2, r3, #16
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e023      	b.n	8004b88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d007      	beq.n	8004b5e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b5c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0220 	orr.w	r2, r2, #32
 8004b74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0202 	orr.w	r2, r2, #2
 8004b84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	08004e53 	.word	0x08004e53
 8004b94:	08004dad 	.word	0x08004dad
 8004b98:	08004e6f 	.word	0x08004e6f

08004b9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10e      	bne.n	8004bdc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
    return;
 8004bda:	e0ce      	b.n	8004d7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_SPI_IRQHandler+0x5e>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4798      	blx	r3
    return;
 8004bf8:	e0bf      	b.n	8004d7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <HAL_SPI_IRQHandler+0x7e>
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80b0 	beq.w	8004d7a <HAL_SPI_IRQHandler+0x1de>
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80aa 	beq.w	8004d7a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d023      	beq.n	8004c78 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d011      	beq.n	8004c60 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	e00b      	b.n	8004c78 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]
        return;
 8004c76:	e080      	b.n	8004d7a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d014      	beq.n	8004cac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c86:	f043 0201 	orr.w	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cba:	f043 0208 	orr.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d04f      	beq.n	8004d78 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ce6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <HAL_SPI_IRQHandler+0x168>
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d034      	beq.n	8004d6e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0203 	bic.w	r2, r2, #3
 8004d12:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d011      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d20:	4a17      	ldr	r2, [pc, #92]	@ (8004d80 <HAL_SPI_IRQHandler+0x1e4>)
 8004d22:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fd fe2d 	bl	8002988 <HAL_DMA_Abort_IT>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d016      	beq.n	8004d76 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d80 <HAL_SPI_IRQHandler+0x1e4>)
 8004d4e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fe17 	bl	8002988 <HAL_DMA_Abort_IT>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004d6c:	e003      	b.n	8004d76 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f812 	bl	8004d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d74:	e000      	b.n	8004d78 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004d76:	bf00      	nop
    return;
 8004d78:	bf00      	nop
  }
}
 8004d7a:	3720      	adds	r7, #32
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	08004eaf 	.word	0x08004eaf

08004d84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dba:	f7fd fb71 	bl	80024a0 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d03b      	beq.n	8004e46 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0220 	bic.w	r2, r2, #32
 8004ddc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0202 	bic.w	r2, r2, #2
 8004dec:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	2164      	movs	r1, #100	@ 0x64
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f000 f98e 	bl	8005114 <SPI_EndRxTxTransaction>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e3e:	6978      	ldr	r0, [r7, #20]
 8004e40:	f7ff ffaa 	bl	8004d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e44:	e002      	b.n	8004e4c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004e46:	6978      	ldr	r0, [r7, #20]
 8004e48:	f7fc fe6e 	bl	8001b28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff ff8f 	bl	8004d84 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0203 	bic.w	r2, r2, #3
 8004e8a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e90:	f043 0210 	orr.w	r2, r3, #16
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff ff79 	bl	8004d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff ff64 	bl	8004d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ee8:	f7fd fada 	bl	80024a0 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ef8:	f7fd fad2 	bl	80024a0 <HAL_GetTick>
 8004efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004efe:	4b39      	ldr	r3, [pc, #228]	@ (8004fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	015b      	lsls	r3, r3, #5
 8004f04:	0d1b      	lsrs	r3, r3, #20
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	fb02 f303 	mul.w	r3, r2, r3
 8004f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0e:	e054      	b.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d050      	beq.n	8004fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f18:	f7fd fac2 	bl	80024a0 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d902      	bls.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d13d      	bne.n	8004faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f46:	d111      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f50:	d004      	beq.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5a:	d107      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f74:	d10f      	bne.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e017      	b.n	8004fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d19b      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000200 	.word	0x20000200

08004fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	@ 0x28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ffa:	f7fd fa51 	bl	80024a0 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	4413      	add	r3, r2
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800500a:	f7fd fa49 	bl	80024a0 <HAL_GetTick>
 800500e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005018:	4b3d      	ldr	r3, [pc, #244]	@ (8005110 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00da      	lsls	r2, r3, #3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	0d1b      	lsrs	r3, r3, #20
 8005028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005030:	e060      	b.n	80050f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005038:	d107      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005048:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d050      	beq.n	80050f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005052:	f7fd fa25 	bl	80024a0 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	429a      	cmp	r2, r3
 8005060:	d902      	bls.n	8005068 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	d13d      	bne.n	80050e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005076:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005080:	d111      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508a:	d004      	beq.n	8005096 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005094:	d107      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ae:	d10f      	bne.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e010      	b.n	8005106 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d196      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	@ 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000200 	.word	0x20000200

08005114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff ff5b 	bl	8004fe8 <SPI_WaitFifoStateUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513c:	f043 0220 	orr.w	r2, r3, #32
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e027      	b.n	8005198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	2180      	movs	r1, #128	@ 0x80
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff fec0 	bl	8004ed8 <SPI_WaitFlagStateUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e014      	b.n	8005198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2200      	movs	r2, #0
 8005176:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff34 	bl	8004fe8 <SPI_WaitFifoStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e000      	b.n	8005198 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e040      	b.n	8005234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fd f876 	bl	80022b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	@ 0x24
 80051cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0201 	bic.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fea6 	bl	8005f38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fbeb 	bl	80059c8 <UART_SetConfig>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e01b      	b.n	8005234 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800520a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800521a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 ff25 	bl	800607c <UART_CheckIdleState>
 8005232:	4603      	mov	r3, r0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800523c:	b480      	push	{r7}
 800523e:	b08b      	sub	sp, #44	@ 0x2c
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800524e:	2b20      	cmp	r3, #32
 8005250:	d147      	bne.n	80052e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_UART_Transmit_IT+0x22>
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e040      	b.n	80052e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2221      	movs	r2, #33	@ 0x21
 800528a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005294:	d107      	bne.n	80052a6 <HAL_UART_Transmit_IT+0x6a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d103      	bne.n	80052a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4a13      	ldr	r2, [pc, #76]	@ (80052f0 <HAL_UART_Transmit_IT+0xb4>)
 80052a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80052a4:	e002      	b.n	80052ac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a12      	ldr	r2, [pc, #72]	@ (80052f4 <HAL_UART_Transmit_IT+0xb8>)
 80052aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	69f9      	ldr	r1, [r7, #28]
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e6      	bne.n	80052ac <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	e000      	b.n	80052e4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80052e2:	2302      	movs	r3, #2
  }
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	372c      	adds	r7, #44	@ 0x2c
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	080065df 	.word	0x080065df
 80052f4:	08006529 	.word	0x08006529

080052f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	@ 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530c:	2b20      	cmp	r3, #32
 800530e:	d137      	bne.n	8005380 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_UART_Receive_IT+0x24>
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e030      	b.n	8005382 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a18      	ldr	r2, [pc, #96]	@ (800538c <HAL_UART_Receive_IT+0x94>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d01f      	beq.n	8005370 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	613b      	str	r3, [r7, #16]
   return(result);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	69f9      	ldr	r1, [r7, #28]
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	61bb      	str	r3, [r7, #24]
   return(result);
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	461a      	mov	r2, r3
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 ff96 	bl	80062a8 <UART_Start_Receive_IT>
 800537c:	4603      	mov	r3, r0
 800537e:	e000      	b.n	8005382 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3728      	adds	r7, #40	@ 0x28
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40008000 	.word	0x40008000

08005390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b0ba      	sub	sp, #232	@ 0xe8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80053ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80053be:	4013      	ands	r3, r2
 80053c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80053c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d115      	bne.n	80053f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00f      	beq.n	80053f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 82ca 	beq.w	8005982 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
      }
      return;
 80053f6:	e2c4      	b.n	8005982 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80053f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8117 	beq.w	8005630 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800540e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005412:	4b85      	ldr	r3, [pc, #532]	@ (8005628 <HAL_UART_IRQHandler+0x298>)
 8005414:	4013      	ands	r3, r2
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 810a 	beq.w	8005630 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d011      	beq.n	800544c <HAL_UART_IRQHandler+0xbc>
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2201      	movs	r2, #1
 800543a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005442:	f043 0201 	orr.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d011      	beq.n	800547c <HAL_UART_IRQHandler+0xec>
 8005458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2202      	movs	r2, #2
 800546a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800547c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d011      	beq.n	80054ac <HAL_UART_IRQHandler+0x11c>
 8005488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2204      	movs	r2, #4
 800549a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054a2:	f043 0202 	orr.w	r2, r3, #2
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d017      	beq.n	80054e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2208      	movs	r2, #8
 80054d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054de:	f043 0208 	orr.w	r2, r3, #8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d012      	beq.n	800551a <HAL_UART_IRQHandler+0x18a>
 80054f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00c      	beq.n	800551a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8230 	beq.w	8005986 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00d      	beq.n	800554e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d005      	beq.n	8005572 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800556a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04f      	beq.n	8005612 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 ff5e 	bl	8006434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005582:	2b40      	cmp	r3, #64	@ 0x40
 8005584:	d141      	bne.n	800560a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800559c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1d9      	bne.n	8005586 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d013      	beq.n	8005602 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055de:	4a13      	ldr	r2, [pc, #76]	@ (800562c <HAL_UART_IRQHandler+0x29c>)
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd f9ce 	bl	8002988 <HAL_DMA_Abort_IT>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d017      	beq.n	8005622 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	e00f      	b.n	8005622 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f9ca 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	e00b      	b.n	8005622 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9c6 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	e007      	b.n	8005622 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9c2 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005620:	e1b1      	b.n	8005986 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005622:	bf00      	nop
    return;
 8005624:	e1af      	b.n	8005986 <HAL_UART_IRQHandler+0x5f6>
 8005626:	bf00      	nop
 8005628:	04000120 	.word	0x04000120
 800562c:	080064fd 	.word	0x080064fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005634:	2b01      	cmp	r3, #1
 8005636:	f040 816a 	bne.w	800590e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8163 	beq.w	800590e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 815c 	beq.w	800590e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2210      	movs	r2, #16
 800565c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005668:	2b40      	cmp	r3, #64	@ 0x40
 800566a:	f040 80d4 	bne.w	8005816 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800567a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80ad 	beq.w	80057de <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800568a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800568e:	429a      	cmp	r2, r3
 8005690:	f080 80a5 	bcs.w	80057de <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800569a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 8086 	bne.w	80057bc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1da      	bne.n	80056b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800570a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800571e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005722:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005726:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e1      	bne.n	80056fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800574c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800575a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800575c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005760:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e3      	bne.n	8005736 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800578a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800579e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e4      	bne.n	800577c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fd f8a8 	bl	800290c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8ea 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057dc:	e0d5      	b.n	800598a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057e8:	429a      	cmp	r2, r3
 80057ea:	f040 80ce 	bne.w	800598a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	f040 80c5 	bne.w	800598a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8ce 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
      return;
 8005814:	e0b9      	b.n	800598a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005822:	b29b      	uxth	r3, r3
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 80ab 	beq.w	800598e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80a6 	beq.w	800598e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005852:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005864:	647b      	str	r3, [r7, #68]	@ 0x44
 8005866:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800586a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e4      	bne.n	8005842 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3308      	adds	r3, #8
 800587e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	623b      	str	r3, [r7, #32]
   return(result);
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	f023 0301 	bic.w	r3, r3, #1
 800588e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800589c:	633a      	str	r2, [r7, #48]	@ 0x30
 800589e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e3      	bne.n	8005878 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f023 0310 	bic.w	r3, r3, #16
 80058d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	69b9      	ldr	r1, [r7, #24]
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	617b      	str	r3, [r7, #20]
   return(result);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e4      	bne.n	80058c4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f852 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800590c:	e03f      	b.n	800598e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <HAL_UART_IRQHandler+0x5a8>
 800591a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800591e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800592e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 f89b 	bl	8006a6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005936:	e02d      	b.n	8005994 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800593c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00e      	beq.n	8005962 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01c      	beq.n	8005992 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
    }
    return;
 8005960:	e017      	b.n	8005992 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d012      	beq.n	8005994 <HAL_UART_IRQHandler+0x604>
 800596e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00c      	beq.n	8005994 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fe8f 	bl	800669e <UART_EndTransmit_IT>
    return;
 8005980:	e008      	b.n	8005994 <HAL_UART_IRQHandler+0x604>
      return;
 8005982:	bf00      	nop
 8005984:	e006      	b.n	8005994 <HAL_UART_IRQHandler+0x604>
    return;
 8005986:	bf00      	nop
 8005988:	e004      	b.n	8005994 <HAL_UART_IRQHandler+0x604>
      return;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <HAL_UART_IRQHandler+0x604>
      return;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <HAL_UART_IRQHandler+0x604>
    return;
 8005992:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005994:	37e8      	adds	r7, #232	@ 0xe8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop

0800599c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059cc:	b08a      	sub	sp, #40	@ 0x28
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4ba4      	ldr	r3, [pc, #656]	@ (8005c88 <UART_SetConfig+0x2c0>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a99      	ldr	r2, [pc, #612]	@ (8005c8c <UART_SetConfig+0x2c4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a30:	4313      	orrs	r3, r2
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a90      	ldr	r2, [pc, #576]	@ (8005c90 <UART_SetConfig+0x2c8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d126      	bne.n	8005aa0 <UART_SetConfig+0xd8>
 8005a52:	4b90      	ldr	r3, [pc, #576]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d81b      	bhi.n	8005a98 <UART_SetConfig+0xd0>
 8005a60:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <UART_SetConfig+0xa0>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a79 	.word	0x08005a79
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005a91 	.word	0x08005a91
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7e:	e116      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005a80:	2302      	movs	r3, #2
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a86:	e112      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a8e:	e10e      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a96:	e10a      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a9e:	e106      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a7c      	ldr	r2, [pc, #496]	@ (8005c98 <UART_SetConfig+0x2d0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d138      	bne.n	8005b1c <UART_SetConfig+0x154>
 8005aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	f003 030c 	and.w	r3, r3, #12
 8005ab4:	2b0c      	cmp	r3, #12
 8005ab6:	d82d      	bhi.n	8005b14 <UART_SetConfig+0x14c>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <UART_SetConfig+0xf8>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005af5 	.word	0x08005af5
 8005ac4:	08005b15 	.word	0x08005b15
 8005ac8:	08005b15 	.word	0x08005b15
 8005acc:	08005b15 	.word	0x08005b15
 8005ad0:	08005b05 	.word	0x08005b05
 8005ad4:	08005b15 	.word	0x08005b15
 8005ad8:	08005b15 	.word	0x08005b15
 8005adc:	08005b15 	.word	0x08005b15
 8005ae0:	08005afd 	.word	0x08005afd
 8005ae4:	08005b15 	.word	0x08005b15
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afa:	e0d8      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b02:	e0d4      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0a:	e0d0      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b12:	e0cc      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1a:	e0c8      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a5e      	ldr	r2, [pc, #376]	@ (8005c9c <UART_SetConfig+0x2d4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d125      	bne.n	8005b72 <UART_SetConfig+0x1aa>
 8005b26:	4b5b      	ldr	r3, [pc, #364]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b30:	2b30      	cmp	r3, #48	@ 0x30
 8005b32:	d016      	beq.n	8005b62 <UART_SetConfig+0x19a>
 8005b34:	2b30      	cmp	r3, #48	@ 0x30
 8005b36:	d818      	bhi.n	8005b6a <UART_SetConfig+0x1a2>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d00a      	beq.n	8005b52 <UART_SetConfig+0x18a>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d814      	bhi.n	8005b6a <UART_SetConfig+0x1a2>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <UART_SetConfig+0x182>
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d008      	beq.n	8005b5a <UART_SetConfig+0x192>
 8005b48:	e00f      	b.n	8005b6a <UART_SetConfig+0x1a2>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b50:	e0ad      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b52:	2302      	movs	r3, #2
 8005b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b58:	e0a9      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b60:	e0a5      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b62:	2308      	movs	r3, #8
 8005b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b68:	e0a1      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b6a:	2310      	movs	r3, #16
 8005b6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b70:	e09d      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a4a      	ldr	r2, [pc, #296]	@ (8005ca0 <UART_SetConfig+0x2d8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d125      	bne.n	8005bc8 <UART_SetConfig+0x200>
 8005b7c:	4b45      	ldr	r3, [pc, #276]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b88:	d016      	beq.n	8005bb8 <UART_SetConfig+0x1f0>
 8005b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b8c:	d818      	bhi.n	8005bc0 <UART_SetConfig+0x1f8>
 8005b8e:	2b80      	cmp	r3, #128	@ 0x80
 8005b90:	d00a      	beq.n	8005ba8 <UART_SetConfig+0x1e0>
 8005b92:	2b80      	cmp	r3, #128	@ 0x80
 8005b94:	d814      	bhi.n	8005bc0 <UART_SetConfig+0x1f8>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <UART_SetConfig+0x1d8>
 8005b9a:	2b40      	cmp	r3, #64	@ 0x40
 8005b9c:	d008      	beq.n	8005bb0 <UART_SetConfig+0x1e8>
 8005b9e:	e00f      	b.n	8005bc0 <UART_SetConfig+0x1f8>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba6:	e082      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bae:	e07e      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb6:	e07a      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005bb8:	2308      	movs	r3, #8
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bbe:	e076      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc6:	e072      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a35      	ldr	r2, [pc, #212]	@ (8005ca4 <UART_SetConfig+0x2dc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d12a      	bne.n	8005c28 <UART_SetConfig+0x260>
 8005bd2:	4b30      	ldr	r3, [pc, #192]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be0:	d01a      	beq.n	8005c18 <UART_SetConfig+0x250>
 8005be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be6:	d81b      	bhi.n	8005c20 <UART_SetConfig+0x258>
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bec:	d00c      	beq.n	8005c08 <UART_SetConfig+0x240>
 8005bee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf2:	d815      	bhi.n	8005c20 <UART_SetConfig+0x258>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <UART_SetConfig+0x238>
 8005bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfc:	d008      	beq.n	8005c10 <UART_SetConfig+0x248>
 8005bfe:	e00f      	b.n	8005c20 <UART_SetConfig+0x258>
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c06:	e052      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c0e:	e04e      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c10:	2304      	movs	r3, #4
 8005c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c16:	e04a      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c18:	2308      	movs	r3, #8
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c1e:	e046      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c20:	2310      	movs	r3, #16
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c26:	e042      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a17      	ldr	r2, [pc, #92]	@ (8005c8c <UART_SetConfig+0x2c4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d13a      	bne.n	8005ca8 <UART_SetConfig+0x2e0>
 8005c32:	4b18      	ldr	r3, [pc, #96]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c40:	d01a      	beq.n	8005c78 <UART_SetConfig+0x2b0>
 8005c42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c46:	d81b      	bhi.n	8005c80 <UART_SetConfig+0x2b8>
 8005c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c4c:	d00c      	beq.n	8005c68 <UART_SetConfig+0x2a0>
 8005c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c52:	d815      	bhi.n	8005c80 <UART_SetConfig+0x2b8>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <UART_SetConfig+0x298>
 8005c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5c:	d008      	beq.n	8005c70 <UART_SetConfig+0x2a8>
 8005c5e:	e00f      	b.n	8005c80 <UART_SetConfig+0x2b8>
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c66:	e022      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c6e:	e01e      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c70:	2304      	movs	r3, #4
 8005c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c76:	e01a      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c78:	2308      	movs	r3, #8
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7e:	e016      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c80:	2310      	movs	r3, #16
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c86:	e012      	b.n	8005cae <UART_SetConfig+0x2e6>
 8005c88:	efff69f3 	.word	0xefff69f3
 8005c8c:	40008000 	.word	0x40008000
 8005c90:	40013800 	.word	0x40013800
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40004400 	.word	0x40004400
 8005c9c:	40004800 	.word	0x40004800
 8005ca0:	40004c00 	.word	0x40004c00
 8005ca4:	40005000 	.word	0x40005000
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a9f      	ldr	r2, [pc, #636]	@ (8005f30 <UART_SetConfig+0x568>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d17a      	bne.n	8005dae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d824      	bhi.n	8005d0a <UART_SetConfig+0x342>
 8005cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <UART_SetConfig+0x300>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005ced 	.word	0x08005ced
 8005ccc:	08005d0b 	.word	0x08005d0b
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005d0b 	.word	0x08005d0b
 8005cd8:	08005cfb 	.word	0x08005cfb
 8005cdc:	08005d0b 	.word	0x08005d0b
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d0b 	.word	0x08005d0b
 8005ce8:	08005d03 	.word	0x08005d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fd ff06 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005cf0:	61f8      	str	r0, [r7, #28]
        break;
 8005cf2:	e010      	b.n	8005d16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8005f34 <UART_SetConfig+0x56c>)
 8005cf6:	61fb      	str	r3, [r7, #28]
        break;
 8005cf8:	e00d      	b.n	8005d16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfa:	f7fd fe67 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 8005cfe:	61f8      	str	r0, [r7, #28]
        break;
 8005d00:	e009      	b.n	8005d16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d06:	61fb      	str	r3, [r7, #28]
        break;
 8005d08:	e005      	b.n	8005d16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80fb 	beq.w	8005f14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d305      	bcc.n	8005d3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d903      	bls.n	8005d42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d40:	e0e8      	b.n	8005f14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2200      	movs	r2, #0
 8005d46:	461c      	mov	r4, r3
 8005d48:	4615      	mov	r5, r2
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	022b      	lsls	r3, r5, #8
 8005d54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d58:	0222      	lsls	r2, r4, #8
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	6849      	ldr	r1, [r1, #4]
 8005d5e:	0849      	lsrs	r1, r1, #1
 8005d60:	2000      	movs	r0, #0
 8005d62:	4688      	mov	r8, r1
 8005d64:	4681      	mov	r9, r0
 8005d66:	eb12 0a08 	adds.w	sl, r2, r8
 8005d6a:	eb43 0b09 	adc.w	fp, r3, r9
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	603b      	str	r3, [r7, #0]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	4659      	mov	r1, fp
 8005d80:	f7fa fa7e 	bl	8000280 <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4613      	mov	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d92:	d308      	bcc.n	8005da6 <UART_SetConfig+0x3de>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d9a:	d204      	bcs.n	8005da6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	60da      	str	r2, [r3, #12]
 8005da4:	e0b6      	b.n	8005f14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005dac:	e0b2      	b.n	8005f14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db6:	d15e      	bne.n	8005e76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005db8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d828      	bhi.n	8005e12 <UART_SetConfig+0x44a>
 8005dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0x400>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	08005e13 	.word	0x08005e13
 8005dd8:	08005e03 	.word	0x08005e03
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e13 	.word	0x08005e13
 8005de8:	08005e0b 	.word	0x08005e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dec:	f7fd fe86 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005df0:	61f8      	str	r0, [r7, #28]
        break;
 8005df2:	e014      	b.n	8005e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df4:	f7fd fe98 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8005df8:	61f8      	str	r0, [r7, #28]
        break;
 8005dfa:	e010      	b.n	8005e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8005f34 <UART_SetConfig+0x56c>)
 8005dfe:	61fb      	str	r3, [r7, #28]
        break;
 8005e00:	e00d      	b.n	8005e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e02:	f7fd fde3 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 8005e06:	61f8      	str	r0, [r7, #28]
        break;
 8005e08:	e009      	b.n	8005e1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0e:	61fb      	str	r3, [r7, #28]
        break;
 8005e10:	e005      	b.n	8005e1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d077      	beq.n	8005f14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	005a      	lsls	r2, r3, #1
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	441a      	add	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	d916      	bls.n	8005e6e <UART_SetConfig+0x4a6>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e46:	d212      	bcs.n	8005e6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f023 030f 	bic.w	r3, r3, #15
 8005e50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	8afb      	ldrh	r3, [r7, #22]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	8afa      	ldrh	r2, [r7, #22]
 8005e6a:	60da      	str	r2, [r3, #12]
 8005e6c:	e052      	b.n	8005f14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e74:	e04e      	b.n	8005f14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d827      	bhi.n	8005ece <UART_SetConfig+0x506>
 8005e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <UART_SetConfig+0x4bc>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005eb1 	.word	0x08005eb1
 8005e8c:	08005eb9 	.word	0x08005eb9
 8005e90:	08005ecf 	.word	0x08005ecf
 8005e94:	08005ebf 	.word	0x08005ebf
 8005e98:	08005ecf 	.word	0x08005ecf
 8005e9c:	08005ecf 	.word	0x08005ecf
 8005ea0:	08005ecf 	.word	0x08005ecf
 8005ea4:	08005ec7 	.word	0x08005ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea8:	f7fd fe28 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005eac:	61f8      	str	r0, [r7, #28]
        break;
 8005eae:	e014      	b.n	8005eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eb0:	f7fd fe3a 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8005eb4:	61f8      	str	r0, [r7, #28]
        break;
 8005eb6:	e010      	b.n	8005eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <UART_SetConfig+0x56c>)
 8005eba:	61fb      	str	r3, [r7, #28]
        break;
 8005ebc:	e00d      	b.n	8005eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ebe:	f7fd fd85 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 8005ec2:	61f8      	str	r0, [r7, #28]
        break;
 8005ec4:	e009      	b.n	8005eda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eca:	61fb      	str	r3, [r7, #28]
        break;
 8005ecc:	e005      	b.n	8005eda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ed8:	bf00      	nop
    }

    if (pclk != 0U)
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d019      	beq.n	8005f14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	085a      	lsrs	r2, r3, #1
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	441a      	add	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d909      	bls.n	8005f0e <UART_SetConfig+0x546>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f00:	d205      	bcs.n	8005f0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
 8005f0c:	e002      	b.n	8005f14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3728      	adds	r7, #40	@ 0x28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2e:	bf00      	nop
 8005f30:	40008000 	.word	0x40008000
 8005f34:	00f42400 	.word	0x00f42400

08005f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01a      	beq.n	800604e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006036:	d10a      	bne.n	800604e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b098      	sub	sp, #96	@ 0x60
 8006080:	af02      	add	r7, sp, #8
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800608c:	f7fc fa08 	bl	80024a0 <HAL_GetTick>
 8006090:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b08      	cmp	r3, #8
 800609e:	d12e      	bne.n	80060fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f88c 	bl	80061cc <UART_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d021      	beq.n	80060fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e062      	b.n	80061c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b04      	cmp	r3, #4
 800610a:	d149      	bne.n	80061a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800610c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006114:	2200      	movs	r2, #0
 8006116:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f856 	bl	80061cc <UART_WaitOnFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d03c      	beq.n	80061a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	623b      	str	r3, [r7, #32]
   return(result);
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800613a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006144:	633b      	str	r3, [r7, #48]	@ 0x30
 8006146:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800614a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	60fb      	str	r3, [r7, #12]
   return(result);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006178:	61fa      	str	r2, [r7, #28]
 800617a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	69b9      	ldr	r1, [r7, #24]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	617b      	str	r3, [r7, #20]
   return(result);
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e5      	bne.n	8006158 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e011      	b.n	80061c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3758      	adds	r7, #88	@ 0x58
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061dc:	e04f      	b.n	800627e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d04b      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e6:	f7fc f95b 	bl	80024a0 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d302      	bcc.n	80061fc <UART_WaitOnFlagUntilTimeout+0x30>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e04e      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d037      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0xb2>
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b80      	cmp	r3, #128	@ 0x80
 8006212:	d034      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b40      	cmp	r3, #64	@ 0x40
 8006218:	d031      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b08      	cmp	r3, #8
 8006226:	d110      	bne.n	800624a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2208      	movs	r2, #8
 800622e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f8ff 	bl	8006434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2208      	movs	r2, #8
 800623a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e029      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006258:	d111      	bne.n	800627e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f8e5 	bl	8006434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e00f      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4013      	ands	r3, r2
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	429a      	cmp	r2, r3
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	429a      	cmp	r2, r3
 800629a:	d0a0      	beq.n	80061de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b097      	sub	sp, #92	@ 0x5c
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062da:	d10e      	bne.n	80062fa <UART_Start_Receive_IT+0x52>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d105      	bne.n	80062f0 <UART_Start_Receive_IT+0x48>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80062ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ee:	e02d      	b.n	800634c <UART_Start_Receive_IT+0xa4>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	22ff      	movs	r2, #255	@ 0xff
 80062f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062f8:	e028      	b.n	800634c <UART_Start_Receive_IT+0xa4>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10d      	bne.n	800631e <UART_Start_Receive_IT+0x76>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <UART_Start_Receive_IT+0x6c>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	@ 0xff
 800630e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006312:	e01b      	b.n	800634c <UART_Start_Receive_IT+0xa4>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	227f      	movs	r2, #127	@ 0x7f
 8006318:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800631c:	e016      	b.n	800634c <UART_Start_Receive_IT+0xa4>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006326:	d10d      	bne.n	8006344 <UART_Start_Receive_IT+0x9c>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <UART_Start_Receive_IT+0x92>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	227f      	movs	r2, #127	@ 0x7f
 8006334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006338:	e008      	b.n	800634c <UART_Start_Receive_IT+0xa4>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	223f      	movs	r2, #63	@ 0x3f
 800633e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006342:	e003      	b.n	800634c <UART_Start_Receive_IT+0xa4>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2222      	movs	r2, #34	@ 0x22
 8006358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3308      	adds	r3, #8
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	657b      	str	r3, [r7, #84]	@ 0x54
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800637c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800637e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800638a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006398:	d107      	bne.n	80063aa <UART_Start_Receive_IT+0x102>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a21      	ldr	r2, [pc, #132]	@ (800642c <UART_Start_Receive_IT+0x184>)
 80063a6:	669a      	str	r2, [r3, #104]	@ 0x68
 80063a8:	e002      	b.n	80063b0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a20      	ldr	r2, [pc, #128]	@ (8006430 <UART_Start_Receive_IT+0x188>)
 80063ae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d019      	beq.n	80063ec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80063cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e6      	bne.n	80063b8 <UART_Start_Receive_IT+0x110>
 80063ea:	e018      	b.n	800641e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	613b      	str	r3, [r7, #16]
   return(result);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f043 0320 	orr.w	r3, r3, #32
 8006400:	653b      	str	r3, [r7, #80]	@ 0x50
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	69f9      	ldr	r1, [r7, #28]
 8006410:	6a3a      	ldr	r2, [r7, #32]
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	61bb      	str	r3, [r7, #24]
   return(result);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e6      	bne.n	80063ec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	375c      	adds	r7, #92	@ 0x5c
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	080068b1 	.word	0x080068b1
 8006430:	080066f5 	.word	0x080066f5

08006434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b095      	sub	sp, #84	@ 0x54
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800645a:	643b      	str	r3, [r7, #64]	@ 0x40
 800645c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e6      	bne.n	800643c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	61fb      	str	r3, [r7, #28]
   return(result);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800648e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e5      	bne.n	800646e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d118      	bne.n	80064dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6979      	ldr	r1, [r7, #20]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	613b      	str	r3, [r7, #16]
   return(result);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e6      	bne.n	80064aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064f0:	bf00      	nop
 80064f2:	3754      	adds	r7, #84	@ 0x54
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff fa3e 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b08f      	sub	sp, #60	@ 0x3c
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006534:	2b21      	cmp	r3, #33	@ 0x21
 8006536:	d14c      	bne.n	80065d2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d132      	bne.n	80065aa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	61fb      	str	r3, [r7, #28]
   return(result);
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006558:	637b      	str	r3, [r7, #52]	@ 0x34
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006564:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e6      	bne.n	8006544 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	60bb      	str	r3, [r7, #8]
   return(result);
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658a:	633b      	str	r3, [r7, #48]	@ 0x30
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6979      	ldr	r1, [r7, #20]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	613b      	str	r3, [r7, #16]
   return(result);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80065a8:	e013      	b.n	80065d2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ae:	781a      	ldrb	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80065d2:	bf00      	nop
 80065d4:	373c      	adds	r7, #60	@ 0x3c
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065de:	b480      	push	{r7}
 80065e0:	b091      	sub	sp, #68	@ 0x44
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ea:	2b21      	cmp	r3, #33	@ 0x21
 80065ec:	d151      	bne.n	8006692 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d132      	bne.n	8006660 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	623b      	str	r3, [r7, #32]
   return(result);
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800660e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	633b      	str	r3, [r7, #48]	@ 0x30
 800661a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800661e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	60fb      	str	r3, [r7, #12]
   return(result);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006640:	637b      	str	r3, [r7, #52]	@ 0x34
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	69b9      	ldr	r1, [r7, #24]
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	617b      	str	r3, [r7, #20]
   return(result);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800665e:	e018      	b.n	8006692 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006672:	b292      	uxth	r2, r2
 8006674:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667a:	1c9a      	adds	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006692:	bf00      	nop
 8006694:	3744      	adds	r7, #68	@ 0x44
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b088      	sub	sp, #32
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6979      	ldr	r1, [r7, #20]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	613b      	str	r3, [r7, #16]
   return(result);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7fb fd4d 	bl	8002184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ea:	bf00      	nop
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b09c      	sub	sp, #112	@ 0x70
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006702:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800670c:	2b22      	cmp	r3, #34	@ 0x22
 800670e:	f040 80be 	bne.w	800688e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006718:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800671c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006720:	b2d9      	uxtb	r1, r3
 8006722:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006726:	b2da      	uxtb	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672c:	400a      	ands	r2, r1
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	f040 80a3 	bne.w	80068a2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800676a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800676c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800677a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800677c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800679e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80067b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a34      	ldr	r2, [pc, #208]	@ (80068ac <UART_RxISR_8BIT+0x1b8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d01f      	beq.n	8006820 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d018      	beq.n	8006820 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	623b      	str	r3, [r7, #32]
   return(result);
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006802:	663b      	str	r3, [r7, #96]	@ 0x60
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30
 800680e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006824:	2b01      	cmp	r3, #1
 8006826:	d12e      	bne.n	8006886 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60fb      	str	r3, [r7, #12]
   return(result);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0310 	bic.w	r3, r3, #16
 8006842:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	69b9      	ldr	r1, [r7, #24]
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	617b      	str	r3, [r7, #20]
   return(result);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b10      	cmp	r3, #16
 800686c:	d103      	bne.n	8006876 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2210      	movs	r2, #16
 8006874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff f896 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006884:	e00d      	b.n	80068a2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fb fca8 	bl	80021dc <HAL_UART_RxCpltCallback>
}
 800688c:	e009      	b.n	80068a2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	8b1b      	ldrh	r3, [r3, #24]
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	b292      	uxth	r2, r2
 80068a0:	831a      	strh	r2, [r3, #24]
}
 80068a2:	bf00      	nop
 80068a4:	3770      	adds	r7, #112	@ 0x70
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40008000 	.word	0x40008000

080068b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b09c      	sub	sp, #112	@ 0x70
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c8:	2b22      	cmp	r3, #34	@ 0x22
 80068ca:	f040 80be 	bne.w	8006a4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80068d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80068de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80068e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80068e6:	4013      	ands	r3, r2
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	1c9a      	adds	r2, r3, #2
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 80a3 	bne.w	8006a5e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800692c:	667b      	str	r3, [r7, #100]	@ 0x64
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006936:	657b      	str	r3, [r7, #84]	@ 0x54
 8006938:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800693c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e6      	bne.n	8006918 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	663b      	str	r3, [r7, #96]	@ 0x60
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800696a:	643a      	str	r2, [r7, #64]	@ 0x40
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e5      	bne.n	800694a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a34      	ldr	r2, [pc, #208]	@ (8006a68 <UART_RxISR_16BIT+0x1b8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d01f      	beq.n	80069dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d018      	beq.n	80069dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e6      	bne.n	80069aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d12e      	bne.n	8006a42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 0310 	bic.w	r3, r3, #16
 80069fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6979      	ldr	r1, [r7, #20]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	613b      	str	r3, [r7, #16]
   return(result);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d103      	bne.n	8006a32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2210      	movs	r2, #16
 8006a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fe ffb8 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a40:	e00d      	b.n	8006a5e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fb fbca 	bl	80021dc <HAL_UART_RxCpltCallback>
}
 8006a48:	e009      	b.n	8006a5e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	8b1b      	ldrh	r3, [r3, #24]
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0208 	orr.w	r2, r2, #8
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	831a      	strh	r2, [r3, #24]
}
 8006a5e:	bf00      	nop
 8006a60:	3770      	adds	r7, #112	@ 0x70
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40008000 	.word	0x40008000

08006a6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	7992      	ldrb	r2, [r2, #6]
 8006a92:	08d2      	lsrs	r2, r2, #3
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	fb13 f302 	smulbb	r3, r3, r2
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	889b      	ldrh	r3, [r3, #4]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	60da      	str	r2, [r3, #12]
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006ac6:	b490      	push	{r4, r7}
 8006ac8:	b086      	sub	sp, #24
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	4604      	mov	r4, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	1d39      	adds	r1, r7, #4
 8006ad2:	e881 000c 	stmia.w	r1, {r2, r3}
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	81fb      	strh	r3, [r7, #14]
 8006ada:	4603      	mov	r3, r0
 8006adc:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ae6:	88ba      	ldrh	r2, [r7, #4]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	da04      	bge.n	8006af6 <code+0x30>
        code |= LEFT;
 8006aec:	2201      	movs	r2, #1
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	75fb      	strb	r3, [r7, #23]
 8006af4:	e008      	b.n	8006b08 <code+0x42>
    } else if (x0 > window.x1) {
 8006af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006afa:	893a      	ldrh	r2, [r7, #8]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	dd03      	ble.n	8006b08 <code+0x42>
        code |= RIGHT;
 8006b00:	2202      	movs	r2, #2
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006b08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	da04      	bge.n	8006b1c <code+0x56>
        code |= BOTTOM;
 8006b12:	2204      	movs	r2, #4
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	75fb      	strb	r3, [r7, #23]
 8006b1a:	e008      	b.n	8006b2e <code+0x68>
    } else if (y0 > window.y1) {
 8006b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b20:	897a      	ldrh	r2, [r7, #10]
 8006b22:	4293      	cmp	r3, r2
 8006b24:	dd03      	ble.n	8006b2e <code+0x68>
        code |= TOP;
 8006b26:	2208      	movs	r2, #8
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc90      	pop	{r4, r7}
 8006b38:	4770      	bx	lr

08006b3a <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b088      	sub	sp, #32
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006b54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006b58:	cb0c      	ldmia	r3, {r2, r3}
 8006b5a:	f7ff ffb4 	bl	8006ac6 <code>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006b6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006b72:	cb0c      	ldmia	r3, {r2, r3}
 8006b74:	f7ff ffa7 	bl	8006ac6 <code>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006b80:	7ffa      	ldrb	r2, [r7, #31]
 8006b82:	7fbb      	ldrb	r3, [r7, #30]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	777b      	strb	r3, [r7, #29]
            break;
 8006b90:	e0e9      	b.n	8006d66 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006b92:	7ffa      	ldrb	r2, [r7, #31]
 8006b94:	7fbb      	ldrb	r3, [r7, #30]
 8006b96:	4013      	ands	r3, r2
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f040 80e2 	bne.w	8006d64 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006ba8:	7ffb      	ldrb	r3, [r7, #31]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <clip_line+0x78>
 8006bae:	7ffb      	ldrb	r3, [r7, #31]
 8006bb0:	e000      	b.n	8006bb4 <clip_line+0x7a>
 8006bb2:	7fbb      	ldrb	r3, [r7, #30]
 8006bb4:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d024      	beq.n	8006c0c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd8:	1acb      	subs	r3, r1, r3
 8006bda:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006bdc:	4608      	mov	r0, r1
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006be4:	1a41      	subs	r1, r0, r1
 8006be6:	fb03 f101 	mul.w	r1, r3, r1
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf8:	1ac3      	subs	r3, r0, r3
 8006bfa:	fb91 f3f3 	sdiv	r3, r1, r3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006c06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c08:	833b      	strh	r3, [r7, #24]
 8006c0a:	e07f      	b.n	8006d0c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	4013      	ands	r3, r2
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d024      	beq.n	8006c62 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c26:	4619      	mov	r1, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c2e:	1acb      	subs	r3, r1, r3
 8006c30:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006c32:	4608      	mov	r0, r1
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c3a:	1a41      	subs	r1, r0, r1
 8006c3c:	fb03 f101 	mul.w	r1, r3, r1
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c46:	4618      	mov	r0, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c4e:	1ac3      	subs	r3, r0, r3
 8006c50:	fb91 f3f3 	sdiv	r3, r1, r3
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006c5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c5e:	833b      	strh	r3, [r7, #24]
 8006c60:	e054      	b.n	8006d0c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006c62:	2202      	movs	r2, #2
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	4013      	ands	r3, r2
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d024      	beq.n	8006cb8 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c84:	1acb      	subs	r3, r1, r3
 8006c86:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006c88:	4608      	mov	r0, r1
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c90:	1a41      	subs	r1, r0, r1
 8006c92:	fb03 f101 	mul.w	r1, r3, r1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ca4:	1ac3      	subs	r3, r0, r3
 8006ca6:	fb91 f3f3 	sdiv	r3, r1, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006cb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cb4:	837b      	strh	r3, [r7, #26]
 8006cb6:	e029      	b.n	8006d0c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006cb8:	2201      	movs	r2, #1
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d023      	beq.n	8006d0c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cda:	1acb      	subs	r3, r1, r3
 8006cdc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006cde:	4608      	mov	r0, r1
 8006ce0:	68f9      	ldr	r1, [r7, #12]
 8006ce2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ce6:	1a41      	subs	r1, r0, r1
 8006ce8:	fb03 f101 	mul.w	r1, r3, r1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cfa:	1ac3      	subs	r3, r0, r3
 8006cfc:	fb91 f3f3 	sdiv	r3, r1, r3
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	4413      	add	r3, r2
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006d08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d0a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006d0c:	7dfa      	ldrb	r2, [r7, #23]
 8006d0e:	7ffb      	ldrb	r3, [r7, #31]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d113      	bne.n	8006d3c <clip_line+0x202>
                *x0 = x;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8b7a      	ldrh	r2, [r7, #26]
 8006d18:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	8b3a      	ldrh	r2, [r7, #24]
 8006d1e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006d2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d30:	cb0c      	ldmia	r3, {r2, r3}
 8006d32:	f7ff fec8 	bl	8006ac6 <code>
 8006d36:	4603      	mov	r3, r0
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e721      	b.n	8006b80 <clip_line+0x46>
            } else {
                *x1 = x;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8b7a      	ldrh	r2, [r7, #26]
 8006d40:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	8b3a      	ldrh	r2, [r7, #24]
 8006d46:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006d54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d58:	cb0c      	ldmia	r3, {r2, r3}
 8006d5a:	f7ff feb4 	bl	8006ac6 <code>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006d62:	e70d      	b.n	8006b80 <clip_line+0x46>
            break;
 8006d64:	bf00      	nop
            }
        }
    }

    return accept;
 8006d66:	7f7b      	ldrb	r3, [r7, #29]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	3306      	adds	r3, #6
 8006d80:	2208      	movs	r2, #8
 8006d82:	4619      	mov	r1, r3
 8006d84:	f001 fcdd 	bl	8008742 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	330e      	adds	r3, #14
 8006d8c:	781a      	ldrb	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	330f      	adds	r3, #15
 8006d96:	781a      	ldrb	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	3310      	adds	r3, #16
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	72da      	strb	r2, [r3, #11]

    return 0;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08e      	sub	sp, #56	@ 0x38
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006dbc:	f107 0314 	add.w	r3, r7, #20
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff ffd4 	bl	8006d70 <fontx_meta>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8006dce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <fontx_glyph+0x2c>
        return status;
 8006dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dda:	e077      	b.n	8006ecc <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006ddc:	7f7a      	ldrb	r2, [r7, #29]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006de2:	7fba      	ldrb	r2, [r7, #30]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006de8:	7f7b      	ldrb	r3, [r7, #29]
 8006dea:	3307      	adds	r3, #7
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	da00      	bge.n	8006df2 <fontx_glyph+0x42>
 8006df0:	3307      	adds	r3, #7
 8006df2:	10db      	asrs	r3, r3, #3
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	78da      	ldrb	r2, [r3, #3]
 8006dfe:	7fbb      	ldrb	r3, [r7, #30]
 8006e00:	fb12 f303 	smulbb	r3, r2, r3
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8006e0a:	7ffb      	ldrb	r3, [r7, #31]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <fontx_glyph+0x80>
        if (code < 0x100) {
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2bff      	cmp	r3, #255	@ 0xff
 8006e14:	d859      	bhi.n	8006eca <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	789b      	ldrb	r3, [r3, #2]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	3311      	adds	r3, #17
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	441a      	add	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e04d      	b.n	8006ecc <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3312      	adds	r3, #18
 8006e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3311      	adds	r3, #17
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 8006e42:	e03d      	b.n	8006ec0 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8006e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	4413      	add	r3, r2
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e58:	3302      	adds	r3, #2
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e60:	3303      	adds	r3, #3
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	4413      	add	r3, r2
 8006e68:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d31c      	bcc.n	8006eac <fontx_glyph+0xfc>
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d818      	bhi.n	8006eac <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e82:	4413      	add	r3, r2
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3311      	adds	r3, #17
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	461a      	mov	r2, r3
                    nc * glyph->size
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	789b      	ldrb	r3, [r3, #2]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	441a      	add	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e00f      	b.n	8006ecc <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006eac:	6a3a      	ldr	r2, [r7, #32]
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	1ad2      	subs	r2, r2, r3
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8006eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	1e5a      	subs	r2, r3, #1
 8006ec4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1bc      	bne.n	8006e44 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3738      	adds	r7, #56	@ 0x38
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	dd01      	ble.n	8006eea <min+0x16>
        return b;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	e000      	b.n	8006eec <min+0x18>
    };
    return a;
 8006eea:	687b      	ldr	r3, [r7, #4]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <max>:

static inline int max(int a, int b) {
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	dd01      	ble.n	8006f0e <max+0x16>
        return a;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	e000      	b.n	8006f10 <max+0x18>
    }
    return b;
 8006f0e:	683b      	ldr	r3, [r7, #0]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	80fb      	strh	r3, [r7, #6]
 8006f26:	460b      	mov	r3, r1
 8006f28:	80bb      	strh	r3, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f32:	4a12      	ldr	r2, [pc, #72]	@ (8006f7c <hagl_put_pixel+0x60>)
 8006f34:	8812      	ldrh	r2, [r2, #0]
 8006f36:	4293      	cmp	r3, r2
 8006f38:	db1a      	blt.n	8006f70 <hagl_put_pixel+0x54>
 8006f3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8006f7c <hagl_put_pixel+0x60>)
 8006f40:	8852      	ldrh	r2, [r2, #2]
 8006f42:	4293      	cmp	r3, r2
 8006f44:	db14      	blt.n	8006f70 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f7c <hagl_put_pixel+0x60>)
 8006f4c:	8892      	ldrh	r2, [r2, #4]
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	dc10      	bgt.n	8006f74 <hagl_put_pixel+0x58>
 8006f52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006f56:	4a09      	ldr	r2, [pc, #36]	@ (8006f7c <hagl_put_pixel+0x60>)
 8006f58:	88d2      	ldrh	r2, [r2, #6]
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	dc0a      	bgt.n	8006f74 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f62:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f66:	887a      	ldrh	r2, [r7, #2]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fa fdb5 	bl	8001ad8 <lcdPutPixel>
 8006f6e:	e002      	b.n	8006f76 <hagl_put_pixel+0x5a>
        return;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <hagl_put_pixel+0x5a>
        return;
 8006f74:	bf00      	nop
}
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	2000020c 	.word	0x2000020c

08006f80 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	4623      	mov	r3, r4
 8006f90:	80fb      	strh	r3, [r7, #6]
 8006f92:	4603      	mov	r3, r0
 8006f94:	80bb      	strh	r3, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	807b      	strh	r3, [r7, #2]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	887b      	ldrh	r3, [r7, #2]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	b21a      	sxth	r2, r3
 8006fa8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006fac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006fb0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006fb4:	883b      	ldrh	r3, [r7, #0]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4623      	mov	r3, r4
 8006fba:	f000 f827 	bl	800700c <hagl_draw_line>
#endif
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd90      	pop	{r4, r7, pc}

08006fc6 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8006fc6:	b590      	push	{r4, r7, lr}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af02      	add	r7, sp, #8
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4623      	mov	r3, r4
 8006fd6:	80fb      	strh	r3, [r7, #6]
 8006fd8:	4603      	mov	r3, r0
 8006fda:	80bb      	strh	r3, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8006fe4:	88ba      	ldrh	r2, [r7, #4]
 8006fe6:	887b      	ldrh	r3, [r7, #2]
 8006fe8:	4413      	add	r3, r2
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	b21c      	sxth	r4, r3
 8006fee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ff2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006ff6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006ffa:	883b      	ldrh	r3, [r7, #0]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4623      	mov	r3, r4
 8007000:	f000 f804 	bl	800700c <hagl_draw_line>
#endif
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	bd90      	pop	{r4, r7, pc}

0800700c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800700c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700e:	b089      	sub	sp, #36	@ 0x24
 8007010:	af02      	add	r7, sp, #8
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	4611      	mov	r1, r2
 8007018:	461a      	mov	r2, r3
 800701a:	4623      	mov	r3, r4
 800701c:	80fb      	strh	r3, [r7, #6]
 800701e:	4603      	mov	r3, r0
 8007020:	80bb      	strh	r3, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	807b      	strh	r3, [r7, #2]
 8007026:	4613      	mov	r3, r2
 8007028:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800702a:	463b      	mov	r3, r7
 800702c:	1cba      	adds	r2, r7, #2
 800702e:	1d3d      	adds	r5, r7, #4
 8007030:	1dbc      	adds	r4, r7, #6
 8007032:	494a      	ldr	r1, [pc, #296]	@ (800715c <hagl_draw_line+0x150>)
 8007034:	466e      	mov	r6, sp
 8007036:	c903      	ldmia	r1, {r0, r1}
 8007038:	e886 0003 	stmia.w	r6, {r0, r1}
 800703c:	4629      	mov	r1, r5
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff fd7b 	bl	8006b3a <clip_line>
 8007044:	4603      	mov	r3, r0
 8007046:	f083 0301 	eor.w	r3, r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d17e      	bne.n	800714e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007054:	461a      	mov	r2, r3
 8007056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	bfb8      	it	lt
 8007060:	425b      	neglt	r3, r3
 8007062:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007064:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007068:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800706c:	429a      	cmp	r2, r3
 800706e:	da01      	bge.n	8007074 <hagl_draw_line+0x68>
 8007070:	2301      	movs	r3, #1
 8007072:	e001      	b.n	8007078 <hagl_draw_line+0x6c>
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800707a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800707e:	461a      	mov	r2, r3
 8007080:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfb8      	it	lt
 800708a:	425b      	neglt	r3, r3
 800708c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800708e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007092:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007096:	429a      	cmp	r2, r3
 8007098:	da01      	bge.n	800709e <hagl_draw_line+0x92>
 800709a:	2301      	movs	r3, #1
 800709c:	e001      	b.n	80070a2 <hagl_draw_line+0x96>
 800709e:	f04f 33ff 	mov.w	r3, #4294967295
 80070a2:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 80070a4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80070a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	dd06      	ble.n	80070be <hagl_draw_line+0xb2>
 80070b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80070b4:	0fda      	lsrs	r2, r3, #31
 80070b6:	4413      	add	r3, r2
 80070b8:	105b      	asrs	r3, r3, #1
 80070ba:	b21b      	sxth	r3, r3
 80070bc:	e006      	b.n	80070cc <hagl_draw_line+0xc0>
 80070be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070c2:	0fda      	lsrs	r2, r3, #31
 80070c4:	4413      	add	r3, r2
 80070c6:	105b      	asrs	r3, r3, #1
 80070c8:	425b      	negs	r3, r3
 80070ca:	b21b      	sxth	r3, r3
 80070cc:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80070ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070d6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff ff1f 	bl	8006f1c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80070de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d105      	bne.n	80070f6 <hagl_draw_line+0xea>
 80070ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80070ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d02d      	beq.n	8007152 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80070f6:	8afb      	ldrh	r3, [r7, #22]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80070fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007102:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007106:	425b      	negs	r3, r3
 8007108:	429a      	cmp	r2, r3
 800710a:	dd0c      	ble.n	8007126 <hagl_draw_line+0x11a>
            err -= dy;
 800710c:	8afa      	ldrh	r2, [r7, #22]
 800710e:	8a3b      	ldrh	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	b29b      	uxth	r3, r3
 8007114:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8007116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800711a:	b29a      	uxth	r2, r3
 800711c:	8a7b      	ldrh	r3, [r7, #18]
 800711e:	4413      	add	r3, r2
 8007120:	b29b      	uxth	r3, r3
 8007122:	b21b      	sxth	r3, r3
 8007124:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8007126:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800712a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	dacd      	bge.n	80070ce <hagl_draw_line+0xc2>
            err += dx;
 8007132:	8afa      	ldrh	r2, [r7, #22]
 8007134:	8abb      	ldrh	r3, [r7, #20]
 8007136:	4413      	add	r3, r2
 8007138:	b29b      	uxth	r3, r3
 800713a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800713c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007140:	b29a      	uxth	r2, r3
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	4413      	add	r3, r2
 8007146:	b29b      	uxth	r3, r3
 8007148:	b21b      	sxth	r3, r3
 800714a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800714c:	e7bf      	b.n	80070ce <hagl_draw_line+0xc2>
        return;
 800714e:	bf00      	nop
 8007150:	e000      	b.n	8007154 <hagl_draw_line+0x148>
            break;
 8007152:	bf00      	nop
        }
    }
}
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715a:	bf00      	nop
 800715c:	2000020c 	.word	0x2000020c

08007160 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	461a      	mov	r2, r3
 800716e:	4623      	mov	r3, r4
 8007170:	80fb      	strh	r3, [r7, #6]
 8007172:	4603      	mov	r3, r0
 8007174:	80bb      	strh	r3, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	807b      	strh	r3, [r7, #2]
 800717a:	4613      	mov	r3, r2
 800717c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800717e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007182:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007186:	429a      	cmp	r2, r3
 8007188:	dd0e      	ble.n	80071a8 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	887b      	ldrh	r3, [r7, #2]
 800718e:	4413      	add	r3, r2
 8007190:	b29b      	uxth	r3, r3
 8007192:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007194:	88fa      	ldrh	r2, [r7, #6]
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	b29b      	uxth	r3, r3
 800719c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80071a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80071ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	dd0e      	ble.n	80071d2 <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 80071b4:	88ba      	ldrh	r2, [r7, #4]
 80071b6:	883b      	ldrh	r3, [r7, #0]
 80071b8:	4413      	add	r3, r2
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80071be:	88ba      	ldrh	r2, [r7, #4]
 80071c0:	883b      	ldrh	r3, [r7, #0]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80071c8:	88ba      	ldrh	r2, [r7, #4]
 80071ca:	883b      	ldrh	r3, [r7, #0]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80071d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071d6:	4a24      	ldr	r2, [pc, #144]	@ (8007268 <hagl_draw_rectangle+0x108>)
 80071d8:	8812      	ldrh	r2, [r2, #0]
 80071da:	4293      	cmp	r3, r2
 80071dc:	db3e      	blt.n	800725c <hagl_draw_rectangle+0xfc>
 80071de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80071e2:	4a21      	ldr	r2, [pc, #132]	@ (8007268 <hagl_draw_rectangle+0x108>)
 80071e4:	8852      	ldrh	r2, [r2, #2]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	db38      	blt.n	800725c <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80071ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007268 <hagl_draw_rectangle+0x108>)
 80071f0:	8892      	ldrh	r2, [r2, #4]
 80071f2:	4293      	cmp	r3, r2
 80071f4:	dc34      	bgt.n	8007260 <hagl_draw_rectangle+0x100>
 80071f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007268 <hagl_draw_rectangle+0x108>)
 80071fc:	88d2      	ldrh	r2, [r2, #6]
 80071fe:	4293      	cmp	r3, r2
 8007200:	dc2e      	bgt.n	8007260 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 8007202:	887a      	ldrh	r2, [r7, #2]
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	b29b      	uxth	r3, r3
 800720a:	3301      	adds	r3, #1
 800720c:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 800720e:	883a      	ldrh	r2, [r7, #0]
 8007210:	88bb      	ldrh	r3, [r7, #4]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	b29b      	uxth	r3, r3
 8007216:	3301      	adds	r3, #1
 8007218:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 800721a:	8c3b      	ldrh	r3, [r7, #32]
 800721c:	89fa      	ldrh	r2, [r7, #14]
 800721e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007222:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007226:	f7ff feab 	bl	8006f80 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 800722a:	8c3b      	ldrh	r3, [r7, #32]
 800722c:	89fa      	ldrh	r2, [r7, #14]
 800722e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007232:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007236:	f7ff fea3 	bl	8006f80 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 800723a:	8c3b      	ldrh	r3, [r7, #32]
 800723c:	89ba      	ldrh	r2, [r7, #12]
 800723e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007242:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007246:	f7ff febe 	bl	8006fc6 <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 800724a:	8c3b      	ldrh	r3, [r7, #32]
 800724c:	89ba      	ldrh	r2, [r7, #12]
 800724e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007252:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007256:	f7ff feb6 	bl	8006fc6 <hagl_draw_vline>
 800725a:	e002      	b.n	8007262 <hagl_draw_rectangle+0x102>
        return;
 800725c:	bf00      	nop
 800725e:	e000      	b.n	8007262 <hagl_draw_rectangle+0x102>
        return;
 8007260:	bf00      	nop
}
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	bd90      	pop	{r4, r7, pc}
 8007268:	2000020c 	.word	0x2000020c

0800726c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800726c:	b590      	push	{r4, r7, lr}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	4604      	mov	r4, r0
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	461a      	mov	r2, r3
 800727a:	4623      	mov	r3, r4
 800727c:	80fb      	strh	r3, [r7, #6]
 800727e:	4603      	mov	r3, r0
 8007280:	80bb      	strh	r3, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	807b      	strh	r3, [r7, #2]
 8007286:	4613      	mov	r3, r2
 8007288:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800728a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800728e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007292:	429a      	cmp	r2, r3
 8007294:	dd0e      	ble.n	80072b4 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007296:	88fa      	ldrh	r2, [r7, #6]
 8007298:	887b      	ldrh	r3, [r7, #2]
 800729a:	4413      	add	r3, r2
 800729c:	b29b      	uxth	r3, r3
 800729e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	887b      	ldrh	r3, [r7, #2]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	887b      	ldrh	r3, [r7, #2]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 80072b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80072b8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072bc:	429a      	cmp	r2, r3
 80072be:	dd0e      	ble.n	80072de <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 80072c0:	88ba      	ldrh	r2, [r7, #4]
 80072c2:	883b      	ldrh	r3, [r7, #0]
 80072c4:	4413      	add	r3, r2
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80072ca:	88ba      	ldrh	r2, [r7, #4]
 80072cc:	883b      	ldrh	r3, [r7, #0]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80072d4:	88ba      	ldrh	r2, [r7, #4]
 80072d6:	883b      	ldrh	r3, [r7, #0]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	b29b      	uxth	r3, r3
 80072dc:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80072de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072e2:	4a33      	ldr	r2, [pc, #204]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 80072e4:	8812      	ldrh	r2, [r2, #0]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	db5b      	blt.n	80073a2 <hagl_fill_rectangle+0x136>
 80072ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072ee:	4a30      	ldr	r2, [pc, #192]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 80072f0:	8852      	ldrh	r2, [r2, #2]
 80072f2:	4293      	cmp	r3, r2
 80072f4:	db55      	blt.n	80073a2 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80072f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072fa:	4a2d      	ldr	r2, [pc, #180]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 80072fc:	8892      	ldrh	r2, [r2, #4]
 80072fe:	4293      	cmp	r3, r2
 8007300:	dc51      	bgt.n	80073a6 <hagl_fill_rectangle+0x13a>
 8007302:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007306:	4a2a      	ldr	r2, [pc, #168]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 8007308:	88d2      	ldrh	r2, [r2, #6]
 800730a:	4293      	cmp	r3, r2
 800730c:	dc4b      	bgt.n	80073a6 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800730e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007312:	4a27      	ldr	r2, [pc, #156]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 8007314:	8812      	ldrh	r2, [r2, #0]
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fded 	bl	8006ef8 <max>
 800731e:	4603      	mov	r3, r0
 8007320:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8007322:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007326:	4a22      	ldr	r2, [pc, #136]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 8007328:	8852      	ldrh	r2, [r2, #2]
 800732a:	4611      	mov	r1, r2
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fde3 	bl	8006ef8 <max>
 8007332:	4603      	mov	r3, r0
 8007334:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8007336:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800733a:	4a1d      	ldr	r2, [pc, #116]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 800733c:	8892      	ldrh	r2, [r2, #4]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff fdc7 	bl	8006ed4 <min>
 8007346:	4603      	mov	r3, r0
 8007348:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800734a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800734e:	4a18      	ldr	r2, [pc, #96]	@ (80073b0 <hagl_fill_rectangle+0x144>)
 8007350:	88d2      	ldrh	r2, [r2, #6]
 8007352:	4611      	mov	r1, r2
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fdbd 	bl	8006ed4 <min>
 800735a:	4603      	mov	r3, r0
 800735c:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 800735e:	887a      	ldrh	r2, [r7, #2]
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	3301      	adds	r3, #1
 8007368:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800736a:	883a      	ldrh	r2, [r7, #0]
 800736c:	88bb      	ldrh	r3, [r7, #4]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	b29b      	uxth	r3, r3
 8007372:	3301      	adds	r3, #1
 8007374:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007376:	2300      	movs	r3, #0
 8007378:	81fb      	strh	r3, [r7, #14]
 800737a:	e00d      	b.n	8007398 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 800737c:	88ba      	ldrh	r2, [r7, #4]
 800737e:	89fb      	ldrh	r3, [r7, #14]
 8007380:	4413      	add	r3, r2
 8007382:	b29b      	uxth	r3, r3
 8007384:	b219      	sxth	r1, r3
 8007386:	8c3b      	ldrh	r3, [r7, #32]
 8007388:	89ba      	ldrh	r2, [r7, #12]
 800738a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800738e:	f7ff fdf7 	bl	8006f80 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007392:	89fb      	ldrh	r3, [r7, #14]
 8007394:	3301      	adds	r3, #1
 8007396:	81fb      	strh	r3, [r7, #14]
 8007398:	89fa      	ldrh	r2, [r7, #14]
 800739a:	897b      	ldrh	r3, [r7, #10]
 800739c:	429a      	cmp	r2, r3
 800739e:	d3ed      	bcc.n	800737c <hagl_fill_rectangle+0x110>
 80073a0:	e002      	b.n	80073a8 <hagl_fill_rectangle+0x13c>
        return;
 80073a2:	bf00      	nop
 80073a4:	e000      	b.n	80073a8 <hagl_fill_rectangle+0x13c>
        return;
 80073a6:	bf00      	nop
#endif
    }
}
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd90      	pop	{r4, r7, pc}
 80073ae:	bf00      	nop
 80073b0:	2000020c 	.word	0x2000020c

080073b4 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80073c2:	f844 0c24 	str.w	r0, [r4, #-36]
 80073c6:	460c      	mov	r4, r1
 80073c8:	4610      	mov	r0, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073d0:	4622      	mov	r2, r4
 80073d2:	f823 2c26 	strh.w	r2, [r3, #-38]
 80073d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073da:	4602      	mov	r2, r0
 80073dc:	f823 2c28 	strh.w	r2, [r3, #-40]
 80073e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073e4:	460a      	mov	r2, r1
 80073e6:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80073ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073ee:	4619      	mov	r1, r3
 80073f0:	f107 0310 	add.w	r3, r7, #16
 80073f4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80073f8:	6812      	ldr	r2, [r2, #0]
 80073fa:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fcd6 	bl	8006db0 <fontx_glyph>
 8007404:	4603      	mov	r3, r0
 8007406:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800740a:	f102 0209 	add.w	r2, r2, #9
 800740e:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8007410:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007414:	f103 0309 	add.w	r3, r3, #9
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <hagl_put_char+0x6e>
        return 0;
 800741e:	2300      	movs	r3, #0
 8007420:	e0c0      	b.n	80075a4 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8007422:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007426:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800742a:	461a      	mov	r2, r3
 800742c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007430:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8007434:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007438:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800743c:	461a      	mov	r2, r3
 800743e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007442:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8007446:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800744a:	2210      	movs	r2, #16
 800744c:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8007450:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007454:	3a08      	subs	r2, #8
 8007456:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800745a:	3b18      	subs	r3, #24
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fb0e 	bl	8006a80 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8007464:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007468:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800746c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007470:	f102 020c 	add.w	r2, r2, #12
 8007474:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8007476:	2300      	movs	r3, #0
 8007478:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800747c:	f102 020b 	add.w	r2, r2, #11
 8007480:	7013      	strb	r3, [r2, #0]
 8007482:	e071      	b.n	8007568 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007484:	2300      	movs	r3, #0
 8007486:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800748a:	f102 020a 	add.w	r2, r2, #10
 800748e:	7013      	strb	r3, [r2, #0]
 8007490:	e047      	b.n	8007522 <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8007492:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007496:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b25a      	sxtb	r2, r3
 800749e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074a2:	f103 030a 	add.w	r3, r3, #10
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	2180      	movs	r1, #128	@ 0x80
 80074ae:	fa41 f303 	asr.w	r3, r1, r3
 80074b2:	b25b      	sxtb	r3, r3
 80074b4:	4013      	ands	r3, r2
 80074b6:	b25b      	sxtb	r3, r3
 80074b8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80074bc:	f102 0208 	add.w	r2, r2, #8
 80074c0:	7013      	strb	r3, [r2, #0]
            if (set) {
 80074c2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074c6:	f103 0308 	add.w	r3, r3, #8
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d010      	beq.n	80074f2 <hagl_put_char+0x13e>
                *(ptr++) = color;
 80074d0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074d4:	f103 030c 	add.w	r3, r3, #12
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1c9a      	adds	r2, r3, #2
 80074dc:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80074e0:	f101 010c 	add.w	r1, r1, #12
 80074e4:	600a      	str	r2, [r1, #0]
 80074e6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80074ea:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80074ee:	801a      	strh	r2, [r3, #0]
 80074f0:	e00c      	b.n	800750c <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 80074f2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80074f6:	f103 030c 	add.w	r3, r3, #12
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8007502:	f101 010c 	add.w	r1, r1, #12
 8007506:	600a      	str	r2, [r1, #0]
 8007508:	2200      	movs	r2, #0
 800750a:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800750c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007510:	f103 030a 	add.w	r3, r3, #10
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800751c:	f102 020a 	add.w	r2, r2, #10
 8007520:	7013      	strb	r3, [r2, #0]
 8007522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007526:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800752a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800752e:	f102 020a 	add.w	r2, r2, #10
 8007532:	7812      	ldrb	r2, [r2, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d3ac      	bcc.n	8007492 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8007538:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800753c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007540:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007544:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8007548:	4413      	add	r3, r2
 800754a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800754e:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8007552:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007556:	f103 030b 	add.w	r3, r3, #11
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007562:	f102 020b 	add.w	r2, r2, #11
 8007566:	7013      	strb	r3, [r2, #0]
 8007568:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800756c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8007570:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007574:	f102 020b 	add.w	r2, r2, #11
 8007578:	7812      	ldrb	r2, [r2, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d382      	bcc.n	8007484 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800757e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007582:	3b18      	subs	r3, #24
 8007584:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007588:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800758c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007590:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8007594:	461a      	mov	r2, r3
 8007596:	f000 f85a 	bl	800764e <hagl_blit>

    return bitmap.width;
 800759a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800759e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80075a2:	b2db      	uxtb	r3, r3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd90      	pop	{r4, r7, pc}

080075b0 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08c      	sub	sp, #48	@ 0x30
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	4608      	mov	r0, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	461a      	mov	r2, r3
 80075be:	4603      	mov	r3, r0
 80075c0:	817b      	strh	r3, [r7, #10]
 80075c2:	460b      	mov	r3, r1
 80075c4:	813b      	strh	r3, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80075ce:	f107 0314 	add.w	r3, r7, #20
 80075d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fbcb 	bl	8006d70 <fontx_meta>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 80075e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <hagl_put_text+0x3c>
        return 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	e02c      	b.n	8007646 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	1d1a      	adds	r2, r3, #4
 80075f0:	60fa      	str	r2, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	2b0d      	cmp	r3, #13
 80075fa:	d002      	beq.n	8007602 <hagl_put_text+0x52>
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	2b0a      	cmp	r3, #10
 8007600:	d108      	bne.n	8007614 <hagl_put_text+0x64>
            x0 = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8007606:	7fbb      	ldrb	r3, [r7, #30]
 8007608:	461a      	mov	r2, r3
 800760a:	893b      	ldrh	r3, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	b29b      	uxth	r3, r3
 8007610:	813b      	strh	r3, [r7, #8]
 8007612:	e010      	b.n	8007636 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8007614:	88f8      	ldrh	r0, [r7, #6]
 8007616:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800761a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4603      	mov	r3, r0
 8007624:	6a38      	ldr	r0, [r7, #32]
 8007626:	f7ff fec5 	bl	80073b4 <hagl_put_char>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	897b      	ldrh	r3, [r7, #10]
 8007630:	4413      	add	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1d6      	bne.n	80075ec <hagl_put_text+0x3c>

    return x0 - original;
 800763e:	897a      	ldrh	r2, [r7, #10]
 8007640:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	b29b      	uxth	r3, r3
}
 8007646:	4618      	mov	r0, r3
 8007648:	3728      	adds	r7, #40	@ 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af00      	add	r7, sp, #0
 8007654:	4603      	mov	r3, r0
 8007656:	603a      	str	r2, [r7, #0]
 8007658:	80fb      	strh	r3, [r7, #6]
 800765a:	460b      	mov	r3, r1
 800765c:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007664:	2300      	movs	r3, #0
 8007666:	827b      	strh	r3, [r7, #18]
 8007668:	e020      	b.n	80076ac <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800766a:	2300      	movs	r3, #0
 800766c:	823b      	strh	r3, [r7, #16]
 800766e:	e015      	b.n	800769c <hagl_blit+0x4e>
            color = *(ptr++);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	1c9a      	adds	r2, r3, #2
 8007674:	617a      	str	r2, [r7, #20]
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	8a3b      	ldrh	r3, [r7, #16]
 800767e:	4413      	add	r3, r2
 8007680:	b29b      	uxth	r3, r3
 8007682:	b218      	sxth	r0, r3
 8007684:	88ba      	ldrh	r2, [r7, #4]
 8007686:	8a7b      	ldrh	r3, [r7, #18]
 8007688:	4413      	add	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	b21b      	sxth	r3, r3
 800768e:	89fa      	ldrh	r2, [r7, #14]
 8007690:	4619      	mov	r1, r3
 8007692:	f7ff fc43 	bl	8006f1c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007696:	8a3b      	ldrh	r3, [r7, #16]
 8007698:	3301      	adds	r3, #1
 800769a:	823b      	strh	r3, [r7, #16]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	8a3a      	ldrh	r2, [r7, #16]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d3e4      	bcc.n	8007670 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 80076a6:	8a7b      	ldrh	r3, [r7, #18]
 80076a8:	3301      	adds	r3, #1
 80076aa:	827b      	strh	r3, [r7, #18]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	885b      	ldrh	r3, [r3, #2]
 80076b0:	8a7a      	ldrh	r2, [r7, #18]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d3d9      	bcc.n	800766a <hagl_blit+0x1c>
        }
    }
#endif
};
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 80076c0:	b590      	push	{r4, r7, lr}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4623      	mov	r3, r4
 80076d0:	80fb      	strh	r3, [r7, #6]
 80076d2:	4603      	mov	r3, r0
 80076d4:	80bb      	strh	r3, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	807b      	strh	r3, [r7, #2]
 80076da:	4613      	mov	r3, r2
 80076dc:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 80076e2:	887b      	ldrh	r3, [r7, #2]
 80076e4:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 80076e6:	887b      	ldrh	r3, [r7, #2]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	f1c3 0303 	rsb	r3, r3, #3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	89fb      	ldrh	r3, [r7, #14]
 80076f8:	4413      	add	r3, r2
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	b218      	sxth	r0, r3
 80076fe:	88ba      	ldrh	r2, [r7, #4]
 8007700:	89bb      	ldrh	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	b29b      	uxth	r3, r3
 8007706:	b21b      	sxth	r3, r3
 8007708:	883a      	ldrh	r2, [r7, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	f7ff fc06 	bl	8006f1c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8007710:	88fa      	ldrh	r2, [r7, #6]
 8007712:	89fb      	ldrh	r3, [r7, #14]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	b29b      	uxth	r3, r3
 8007718:	b218      	sxth	r0, r3
 800771a:	88ba      	ldrh	r2, [r7, #4]
 800771c:	89bb      	ldrh	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	b29b      	uxth	r3, r3
 8007722:	b21b      	sxth	r3, r3
 8007724:	883a      	ldrh	r2, [r7, #0]
 8007726:	4619      	mov	r1, r3
 8007728:	f7ff fbf8 	bl	8006f1c <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 800772c:	88fa      	ldrh	r2, [r7, #6]
 800772e:	89fb      	ldrh	r3, [r7, #14]
 8007730:	4413      	add	r3, r2
 8007732:	b29b      	uxth	r3, r3
 8007734:	b218      	sxth	r0, r3
 8007736:	88ba      	ldrh	r2, [r7, #4]
 8007738:	89bb      	ldrh	r3, [r7, #12]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	b29b      	uxth	r3, r3
 800773e:	b21b      	sxth	r3, r3
 8007740:	883a      	ldrh	r2, [r7, #0]
 8007742:	4619      	mov	r1, r3
 8007744:	f7ff fbea 	bl	8006f1c <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 8007748:	88fa      	ldrh	r2, [r7, #6]
 800774a:	89fb      	ldrh	r3, [r7, #14]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	b29b      	uxth	r3, r3
 8007750:	b218      	sxth	r0, r3
 8007752:	88ba      	ldrh	r2, [r7, #4]
 8007754:	89bb      	ldrh	r3, [r7, #12]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	b29b      	uxth	r3, r3
 800775a:	b21b      	sxth	r3, r3
 800775c:	883a      	ldrh	r2, [r7, #0]
 800775e:	4619      	mov	r1, r3
 8007760:	f7ff fbdc 	bl	8006f1c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	89bb      	ldrh	r3, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	b29b      	uxth	r3, r3
 800776c:	b218      	sxth	r0, r3
 800776e:	88ba      	ldrh	r2, [r7, #4]
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	4413      	add	r3, r2
 8007774:	b29b      	uxth	r3, r3
 8007776:	b21b      	sxth	r3, r3
 8007778:	883a      	ldrh	r2, [r7, #0]
 800777a:	4619      	mov	r1, r3
 800777c:	f7ff fbce 	bl	8006f1c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	89bb      	ldrh	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	b29b      	uxth	r3, r3
 8007788:	b218      	sxth	r0, r3
 800778a:	88ba      	ldrh	r2, [r7, #4]
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	4413      	add	r3, r2
 8007790:	b29b      	uxth	r3, r3
 8007792:	b21b      	sxth	r3, r3
 8007794:	883a      	ldrh	r2, [r7, #0]
 8007796:	4619      	mov	r1, r3
 8007798:	f7ff fbc0 	bl	8006f1c <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	89bb      	ldrh	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	b218      	sxth	r0, r3
 80077a6:	88ba      	ldrh	r2, [r7, #4]
 80077a8:	89fb      	ldrh	r3, [r7, #14]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	b21b      	sxth	r3, r3
 80077b0:	883a      	ldrh	r2, [r7, #0]
 80077b2:	4619      	mov	r1, r3
 80077b4:	f7ff fbb2 	bl	8006f1c <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	89bb      	ldrh	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	b29b      	uxth	r3, r3
 80077c0:	b218      	sxth	r0, r3
 80077c2:	88ba      	ldrh	r2, [r7, #4]
 80077c4:	89fb      	ldrh	r3, [r7, #14]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	b21b      	sxth	r3, r3
 80077cc:	883a      	ldrh	r2, [r7, #0]
 80077ce:	4619      	mov	r1, r3
 80077d0:	f7ff fba4 	bl	8006f1c <hagl_put_pixel>

    while (y >= x) {
 80077d4:	e097      	b.n	8007906 <hagl_draw_circle+0x246>
        x++;
 80077d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3301      	adds	r3, #1
 80077de:	b29b      	uxth	r3, r3
 80077e0:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80077e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dd14      	ble.n	8007814 <hagl_draw_circle+0x154>
            y--;
 80077ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80077f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80077fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	b29b      	uxth	r3, r3
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	b29a      	uxth	r2, r3
 8007806:	897b      	ldrh	r3, [r7, #10]
 8007808:	4413      	add	r3, r2
 800780a:	b29b      	uxth	r3, r3
 800780c:	330a      	adds	r3, #10
 800780e:	b29b      	uxth	r3, r3
 8007810:	817b      	strh	r3, [r7, #10]
 8007812:	e008      	b.n	8007826 <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8007814:	89fb      	ldrh	r3, [r7, #14]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	b29a      	uxth	r2, r3
 800781a:	897b      	ldrh	r3, [r7, #10]
 800781c:	4413      	add	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	3306      	adds	r3, #6
 8007822:	b29b      	uxth	r3, r3
 8007824:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	89fb      	ldrh	r3, [r7, #14]
 800782a:	4413      	add	r3, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	b218      	sxth	r0, r3
 8007830:	88ba      	ldrh	r2, [r7, #4]
 8007832:	89bb      	ldrh	r3, [r7, #12]
 8007834:	4413      	add	r3, r2
 8007836:	b29b      	uxth	r3, r3
 8007838:	b21b      	sxth	r3, r3
 800783a:	883a      	ldrh	r2, [r7, #0]
 800783c:	4619      	mov	r1, r3
 800783e:	f7ff fb6d 	bl	8006f1c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	89fb      	ldrh	r3, [r7, #14]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	b29b      	uxth	r3, r3
 800784a:	b218      	sxth	r0, r3
 800784c:	88ba      	ldrh	r2, [r7, #4]
 800784e:	89bb      	ldrh	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	b29b      	uxth	r3, r3
 8007854:	b21b      	sxth	r3, r3
 8007856:	883a      	ldrh	r2, [r7, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	f7ff fb5f 	bl	8006f1c <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	89fb      	ldrh	r3, [r7, #14]
 8007862:	4413      	add	r3, r2
 8007864:	b29b      	uxth	r3, r3
 8007866:	b218      	sxth	r0, r3
 8007868:	88ba      	ldrh	r2, [r7, #4]
 800786a:	89bb      	ldrh	r3, [r7, #12]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	b29b      	uxth	r3, r3
 8007870:	b21b      	sxth	r3, r3
 8007872:	883a      	ldrh	r2, [r7, #0]
 8007874:	4619      	mov	r1, r3
 8007876:	f7ff fb51 	bl	8006f1c <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 800787a:	88fa      	ldrh	r2, [r7, #6]
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	b29b      	uxth	r3, r3
 8007882:	b218      	sxth	r0, r3
 8007884:	88ba      	ldrh	r2, [r7, #4]
 8007886:	89bb      	ldrh	r3, [r7, #12]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	b21b      	sxth	r3, r3
 800788e:	883a      	ldrh	r2, [r7, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	f7ff fb43 	bl	8006f1c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	89bb      	ldrh	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	b29b      	uxth	r3, r3
 800789e:	b218      	sxth	r0, r3
 80078a0:	88ba      	ldrh	r2, [r7, #4]
 80078a2:	89fb      	ldrh	r3, [r7, #14]
 80078a4:	4413      	add	r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	b21b      	sxth	r3, r3
 80078aa:	883a      	ldrh	r2, [r7, #0]
 80078ac:	4619      	mov	r1, r3
 80078ae:	f7ff fb35 	bl	8006f1c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	89bb      	ldrh	r3, [r7, #12]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	b218      	sxth	r0, r3
 80078bc:	88ba      	ldrh	r2, [r7, #4]
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	4413      	add	r3, r2
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	b21b      	sxth	r3, r3
 80078c6:	883a      	ldrh	r2, [r7, #0]
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7ff fb27 	bl	8006f1c <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 80078ce:	88fa      	ldrh	r2, [r7, #6]
 80078d0:	89bb      	ldrh	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	b218      	sxth	r0, r3
 80078d8:	88ba      	ldrh	r2, [r7, #4]
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	b29b      	uxth	r3, r3
 80078e0:	b21b      	sxth	r3, r3
 80078e2:	883a      	ldrh	r2, [r7, #0]
 80078e4:	4619      	mov	r1, r3
 80078e6:	f7ff fb19 	bl	8006f1c <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	89bb      	ldrh	r3, [r7, #12]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	b218      	sxth	r0, r3
 80078f4:	88ba      	ldrh	r2, [r7, #4]
 80078f6:	89fb      	ldrh	r3, [r7, #14]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	b21b      	sxth	r3, r3
 80078fe:	883a      	ldrh	r2, [r7, #0]
 8007900:	4619      	mov	r1, r3
 8007902:	f7ff fb0b 	bl	8006f1c <hagl_put_pixel>
    while (y >= x) {
 8007906:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800790a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800790e:	429a      	cmp	r2, r3
 8007910:	f6bf af61 	bge.w	80077d6 <hagl_draw_circle+0x116>
    }
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	bd90      	pop	{r4, r7, pc}

0800791e <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 800791e:	b590      	push	{r4, r7, lr}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	4604      	mov	r4, r0
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	461a      	mov	r2, r3
 800792c:	4623      	mov	r3, r4
 800792e:	80fb      	strh	r3, [r7, #6]
 8007930:	4603      	mov	r3, r0
 8007932:	80bb      	strh	r3, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	807b      	strh	r3, [r7, #2]
 8007938:	4613      	mov	r3, r2
 800793a:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007940:	887b      	ldrh	r3, [r7, #2]
 8007942:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007944:	887b      	ldrh	r3, [r7, #2]
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	b29b      	uxth	r3, r3
 800794a:	f1c3 0303 	rsb	r3, r3, #3
 800794e:	b29b      	uxth	r3, r3
 8007950:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007952:	e067      	b.n	8007a24 <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	89fb      	ldrh	r3, [r7, #14]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	b29b      	uxth	r3, r3
 800795c:	b218      	sxth	r0, r3
 800795e:	88ba      	ldrh	r2, [r7, #4]
 8007960:	89bb      	ldrh	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	b29b      	uxth	r3, r3
 8007966:	b219      	sxth	r1, r3
 8007968:	89fb      	ldrh	r3, [r7, #14]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	883b      	ldrh	r3, [r7, #0]
 8007970:	f7ff fb06 	bl	8006f80 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007974:	88fa      	ldrh	r2, [r7, #6]
 8007976:	89fb      	ldrh	r3, [r7, #14]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	b29b      	uxth	r3, r3
 800797c:	b218      	sxth	r0, r3
 800797e:	88ba      	ldrh	r2, [r7, #4]
 8007980:	89bb      	ldrh	r3, [r7, #12]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	b29b      	uxth	r3, r3
 8007986:	b219      	sxth	r1, r3
 8007988:	89fb      	ldrh	r3, [r7, #14]
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	883b      	ldrh	r3, [r7, #0]
 8007990:	f7ff faf6 	bl	8006f80 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	89bb      	ldrh	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	b218      	sxth	r0, r3
 800799e:	88ba      	ldrh	r2, [r7, #4]
 80079a0:	89fb      	ldrh	r3, [r7, #14]
 80079a2:	4413      	add	r3, r2
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	b219      	sxth	r1, r3
 80079a8:	89bb      	ldrh	r3, [r7, #12]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	883b      	ldrh	r3, [r7, #0]
 80079b0:	f7ff fae6 	bl	8006f80 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 80079b4:	88fa      	ldrh	r2, [r7, #6]
 80079b6:	89bb      	ldrh	r3, [r7, #12]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	b218      	sxth	r0, r3
 80079be:	88ba      	ldrh	r2, [r7, #4]
 80079c0:	89fb      	ldrh	r3, [r7, #14]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	b219      	sxth	r1, r3
 80079c8:	89bb      	ldrh	r3, [r7, #12]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	883b      	ldrh	r3, [r7, #0]
 80079d0:	f7ff fad6 	bl	8006f80 <hagl_draw_hline>
        x++;
 80079d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3301      	adds	r3, #1
 80079dc:	b29b      	uxth	r3, r3
 80079de:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 80079e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd14      	ble.n	8007a12 <hagl_fill_circle+0xf4>
            y--;
 80079e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 80079f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80079f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	897b      	ldrh	r3, [r7, #10]
 8007a06:	4413      	add	r3, r2
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	330a      	adds	r3, #10
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	817b      	strh	r3, [r7, #10]
 8007a10:	e008      	b.n	8007a24 <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007a12:	89fb      	ldrh	r3, [r7, #14]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	897b      	ldrh	r3, [r7, #10]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3306      	adds	r3, #6
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007a24:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	da91      	bge.n	8007954 <hagl_fill_circle+0x36>
        }
    }
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd90      	pop	{r4, r7, pc}

08007a3a <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007a3a:	b590      	push	{r4, r7, lr}
 8007a3c:	b087      	sub	sp, #28
 8007a3e:	af02      	add	r7, sp, #8
 8007a40:	4603      	mov	r3, r0
 8007a42:	6039      	str	r1, [r7, #0]
 8007a44:	80fb      	strh	r3, [r7, #6]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	81fb      	strh	r3, [r7, #14]
 8007a4e:	e02a      	b.n	8007aa6 <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4413      	add	r3, r2
        hagl_draw_line(
 8007a5a:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007a5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	3302      	adds	r3, #2
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	4413      	add	r3, r2
        hagl_draw_line(
 8007a6a:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a72:	3301      	adds	r3, #1
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	4413      	add	r3, r2
        hagl_draw_line(
 8007a7a:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	3306      	adds	r3, #6
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4413      	add	r3, r2
        hagl_draw_line(
 8007a8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007a8e:	88bb      	ldrh	r3, [r7, #4]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4613      	mov	r3, r2
 8007a94:	4622      	mov	r2, r4
 8007a96:	f7ff fab9 	bl	800700c <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	81fb      	strh	r3, [r7, #14]
 8007aa6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	dbcd      	blt.n	8007a50 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	3302      	adds	r3, #2
    hagl_draw_line(
 8007abe:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ac6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007aca:	3b01      	subs	r3, #1
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	4413      	add	r3, r2
    hagl_draw_line(
 8007ad2:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	3b02      	subs	r3, #2
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	4413      	add	r3, r2
    hagl_draw_line(
 8007ae2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007ae6:	88bb      	ldrh	r3, [r7, #4]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4613      	mov	r3, r2
 8007aec:	4622      	mov	r2, r4
 8007aee:	f7ff fa8d 	bl	800700c <hagl_draw_line>
        color
    );
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd90      	pop	{r4, r7, pc}

08007afa <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b0ac      	sub	sp, #176	@ 0xb0
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	4603      	mov	r3, r0
 8007b02:	6039      	str	r1, [r7, #0]
 8007b04:	80fb      	strh	r3, [r7, #6]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007b0a:	2380      	movs	r3, #128	@ 0x80
 8007b0c:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007b1c:	e02e      	b.n	8007b7c <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007b1e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	3302      	adds	r3, #2
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b2e:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007b32:	429a      	cmp	r2, r3
 8007b34:	dd08      	ble.n	8007b48 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007b36:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	3302      	adds	r3, #2
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4413      	add	r3, r2
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007b48:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	3302      	adds	r3, #2
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	4413      	add	r3, r2
 8007b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b58:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	da08      	bge.n	8007b72 <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007b60:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	3302      	adds	r3, #2
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007b72:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007b76:	3301      	adds	r3, #1
 8007b78:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007b7c:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	dbca      	blt.n	8007b1e <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007b88:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007b8c:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007b90:	e144      	b.n	8007e1c <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007ba8:	e0a6      	b.n	8007cf8 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007baa:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bc0:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007bc4:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	3302      	adds	r3, #2
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bd4:	ee07 3a90 	vmov	s15, r3
 8007bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bdc:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007be0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4413      	add	r3, r2
 8007bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bf6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007bfa:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	3302      	adds	r3, #2
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4413      	add	r3, r2
 8007c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c12:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007c16:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007c22:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2e:	d50c      	bpl.n	8007c4a <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007c30:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c3c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c48:	da19      	bge.n	8007c7e <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007c4a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007c56:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c62:	d53e      	bpl.n	8007ce2 <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007c64:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c70:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7c:	db31      	blt.n	8007ce2 <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007c7e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c8a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007c8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007c92:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007c96:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca2:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007ca6:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007caa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cb2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cbe:	ee17 3a90 	vmov	r3, s15
 8007cc2:	b21a      	sxth	r2, r3
 8007cc4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007cc8:	b292      	uxth	r2, r2
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	33b0      	adds	r3, #176	@ 0xb0
 8007cce:	443b      	add	r3, r7
 8007cd0:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007cd4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007ce2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007ce6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007cea:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007cf8:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	f6ff af52 	blt.w	8007baa <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007d0c:	e046      	b.n	8007d9c <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007d0e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	33b0      	adds	r3, #176	@ 0xb0
 8007d16:	443b      	add	r3, r7
 8007d18:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007d1c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d20:	3301      	adds	r3, #1
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	33b0      	adds	r3, #176	@ 0xb0
 8007d26:	443b      	add	r3, r7
 8007d28:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d92e      	bls.n	8007d8e <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007d30:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	33b0      	adds	r3, #176	@ 0xb0
 8007d38:	443b      	add	r3, r7
 8007d3a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007d3e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007d42:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d46:	3301      	adds	r3, #1
 8007d48:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	33b0      	adds	r3, #176	@ 0xb0
 8007d50:	443b      	add	r3, r7
 8007d52:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007d56:	0053      	lsls	r3, r2, #1
 8007d58:	33b0      	adds	r3, #176	@ 0xb0
 8007d5a:	443b      	add	r3, r7
 8007d5c:	460a      	mov	r2, r1
 8007d5e:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007d62:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d66:	3301      	adds	r3, #1
 8007d68:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	33b0      	adds	r3, #176	@ 0xb0
 8007d70:	443b      	add	r3, r7
 8007d72:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007d76:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00e      	beq.n	8007d9c <hagl_fill_polygon+0x2a2>
                    i--;
 8007d7e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007d8c:	e006      	b.n	8007d9c <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007d8e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	3301      	adds	r3, #1
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007d9c:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007da0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007da4:	3b01      	subs	r3, #1
 8007da6:	429a      	cmp	r2, r3
 8007da8:	dbb1      	blt.n	8007d0e <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8007daa:	2300      	movs	r3, #0
 8007dac:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007db0:	e027      	b.n	8007e02 <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 8007db2:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007db6:	3301      	adds	r3, #1
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	33b0      	adds	r3, #176	@ 0xb0
 8007dbc:	443b      	add	r3, r7
 8007dbe:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007dc2:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	33b0      	adds	r3, #176	@ 0xb0
 8007dca:	443b      	add	r3, r7
 8007dcc:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8007dd8:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	33b0      	adds	r3, #176	@ 0xb0
 8007de0:	443b      	add	r3, r7
 8007de2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007de6:	b218      	sxth	r0, r3
 8007de8:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8007dec:	88bb      	ldrh	r3, [r7, #4]
 8007dee:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8007df2:	f7ff f8c5 	bl	8006f80 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 8007df6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8007e02:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8007e06:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	dbd1      	blt.n	8007db2 <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8007e0e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	3301      	adds	r3, #1
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007e1c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8007e20:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8007e24:	429a      	cmp	r2, r3
 8007e26:	f6ff aeb4 	blt.w	8007b92 <hagl_fill_polygon+0x98>
        }
    }
}
 8007e2a:	bf00      	nop
 8007e2c:	bf00      	nop
 8007e2e:	37b0      	adds	r7, #176	@ 0xb0
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007e34:	b590      	push	{r4, r7, lr}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	461a      	mov	r2, r3
 8007e42:	4623      	mov	r3, r4
 8007e44:	80fb      	strh	r3, [r7, #6]
 8007e46:	4603      	mov	r3, r0
 8007e48:	80bb      	strh	r3, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	807b      	strh	r3, [r7, #2]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	81bb      	strh	r3, [r7, #12]
 8007e56:	88bb      	ldrh	r3, [r7, #4]
 8007e58:	81fb      	strh	r3, [r7, #14]
 8007e5a:	887b      	ldrh	r3, [r7, #2]
 8007e5c:	823b      	strh	r3, [r7, #16]
 8007e5e:	883b      	ldrh	r3, [r7, #0]
 8007e60:	827b      	strh	r3, [r7, #18]
 8007e62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e64:	82bb      	strh	r3, [r7, #20]
 8007e66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007e68:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 8007e6a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007e6c:	f107 030c 	add.w	r3, r7, #12
 8007e70:	4619      	mov	r1, r3
 8007e72:	2003      	movs	r0, #3
 8007e74:	f7ff fde1 	bl	8007a3a <hagl_draw_polygon>
};
 8007e78:	bf00      	nop
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd90      	pop	{r4, r7, pc}

08007e80 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 8007e80:	b590      	push	{r4, r7, lr}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4623      	mov	r3, r4
 8007e90:	80fb      	strh	r3, [r7, #6]
 8007e92:	4603      	mov	r3, r0
 8007e94:	80bb      	strh	r3, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	807b      	strh	r3, [r7, #2]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8007e9e:	88fb      	ldrh	r3, [r7, #6]
 8007ea0:	81bb      	strh	r3, [r7, #12]
 8007ea2:	88bb      	ldrh	r3, [r7, #4]
 8007ea4:	81fb      	strh	r3, [r7, #14]
 8007ea6:	887b      	ldrh	r3, [r7, #2]
 8007ea8:	823b      	strh	r3, [r7, #16]
 8007eaa:	883b      	ldrh	r3, [r7, #0]
 8007eac:	827b      	strh	r3, [r7, #18]
 8007eae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007eb0:	82bb      	strh	r3, [r7, #20]
 8007eb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007eb4:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 8007eb6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007eb8:	f107 030c 	add.w	r3, r7, #12
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	2003      	movs	r0, #3
 8007ec0:	f7ff fe1b 	bl	8007afa <hagl_fill_polygon>
}
 8007ec4:	bf00      	nop
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd90      	pop	{r4, r7, pc}

08007ecc <atoi>:
 8007ecc:	220a      	movs	r2, #10
 8007ece:	2100      	movs	r1, #0
 8007ed0:	f000 b938 	b.w	8008144 <strtol>

08007ed4 <malloc>:
 8007ed4:	4b02      	ldr	r3, [pc, #8]	@ (8007ee0 <malloc+0xc>)
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	f000 b82d 	b.w	8007f38 <_malloc_r>
 8007ede:	bf00      	nop
 8007ee0:	20000220 	.word	0x20000220

08007ee4 <free>:
 8007ee4:	4b02      	ldr	r3, [pc, #8]	@ (8007ef0 <free+0xc>)
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f000 bc57 	b.w	800879c <_free_r>
 8007eee:	bf00      	nop
 8007ef0:	20000220 	.word	0x20000220

08007ef4 <sbrk_aligned>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8007f34 <sbrk_aligned+0x40>)
 8007ef8:	460c      	mov	r4, r1
 8007efa:	6831      	ldr	r1, [r6, #0]
 8007efc:	4605      	mov	r5, r0
 8007efe:	b911      	cbnz	r1, 8007f06 <sbrk_aligned+0x12>
 8007f00:	f000 fbd0 	bl	80086a4 <_sbrk_r>
 8007f04:	6030      	str	r0, [r6, #0]
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 fbcb 	bl	80086a4 <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d103      	bne.n	8007f1a <sbrk_aligned+0x26>
 8007f12:	f04f 34ff 	mov.w	r4, #4294967295
 8007f16:	4620      	mov	r0, r4
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d0f8      	beq.n	8007f16 <sbrk_aligned+0x22>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fbbc 	bl	80086a4 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d1f2      	bne.n	8007f16 <sbrk_aligned+0x22>
 8007f30:	e7ef      	b.n	8007f12 <sbrk_aligned+0x1e>
 8007f32:	bf00      	nop
 8007f34:	2000af5c 	.word	0x2000af5c

08007f38 <_malloc_r>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	1ccd      	adds	r5, r1, #3
 8007f3e:	f025 0503 	bic.w	r5, r5, #3
 8007f42:	3508      	adds	r5, #8
 8007f44:	2d0c      	cmp	r5, #12
 8007f46:	bf38      	it	cc
 8007f48:	250c      	movcc	r5, #12
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	db01      	blt.n	8007f54 <_malloc_r+0x1c>
 8007f50:	42a9      	cmp	r1, r5
 8007f52:	d904      	bls.n	8007f5e <_malloc_r+0x26>
 8007f54:	230c      	movs	r3, #12
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008034 <_malloc_r+0xfc>
 8007f62:	f000 f869 	bl	8008038 <__malloc_lock>
 8007f66:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	bb44      	cbnz	r4, 8007fc0 <_malloc_r+0x88>
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff ffbf 	bl	8007ef4 <sbrk_aligned>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	4604      	mov	r4, r0
 8007f7a:	d158      	bne.n	800802e <_malloc_r+0xf6>
 8007f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f80:	4627      	mov	r7, r4
 8007f82:	2f00      	cmp	r7, #0
 8007f84:	d143      	bne.n	800800e <_malloc_r+0xd6>
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	d04b      	beq.n	8008022 <_malloc_r+0xea>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4630      	mov	r0, r6
 8007f90:	eb04 0903 	add.w	r9, r4, r3
 8007f94:	f000 fb86 	bl	80086a4 <_sbrk_r>
 8007f98:	4581      	cmp	r9, r0
 8007f9a:	d142      	bne.n	8008022 <_malloc_r+0xea>
 8007f9c:	6821      	ldr	r1, [r4, #0]
 8007f9e:	1a6d      	subs	r5, r5, r1
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffa6 	bl	8007ef4 <sbrk_aligned>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d03a      	beq.n	8008022 <_malloc_r+0xea>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	442b      	add	r3, r5
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	bb62      	cbnz	r2, 8008014 <_malloc_r+0xdc>
 8007fba:	f8c8 7000 	str.w	r7, [r8]
 8007fbe:	e00f      	b.n	8007fe0 <_malloc_r+0xa8>
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	1b52      	subs	r2, r2, r5
 8007fc4:	d420      	bmi.n	8008008 <_malloc_r+0xd0>
 8007fc6:	2a0b      	cmp	r2, #11
 8007fc8:	d917      	bls.n	8007ffa <_malloc_r+0xc2>
 8007fca:	1961      	adds	r1, r4, r5
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	6025      	str	r5, [r4, #0]
 8007fd0:	bf18      	it	ne
 8007fd2:	6059      	strne	r1, [r3, #4]
 8007fd4:	6863      	ldr	r3, [r4, #4]
 8007fd6:	bf08      	it	eq
 8007fd8:	f8c8 1000 	streq.w	r1, [r8]
 8007fdc:	5162      	str	r2, [r4, r5]
 8007fde:	604b      	str	r3, [r1, #4]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f82f 	bl	8008044 <__malloc_unlock>
 8007fe6:	f104 000b 	add.w	r0, r4, #11
 8007fea:	1d23      	adds	r3, r4, #4
 8007fec:	f020 0007 	bic.w	r0, r0, #7
 8007ff0:	1ac2      	subs	r2, r0, r3
 8007ff2:	bf1c      	itt	ne
 8007ff4:	1a1b      	subne	r3, r3, r0
 8007ff6:	50a3      	strne	r3, [r4, r2]
 8007ff8:	e7af      	b.n	8007f5a <_malloc_r+0x22>
 8007ffa:	6862      	ldr	r2, [r4, #4]
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	bf0c      	ite	eq
 8008000:	f8c8 2000 	streq.w	r2, [r8]
 8008004:	605a      	strne	r2, [r3, #4]
 8008006:	e7eb      	b.n	8007fe0 <_malloc_r+0xa8>
 8008008:	4623      	mov	r3, r4
 800800a:	6864      	ldr	r4, [r4, #4]
 800800c:	e7ae      	b.n	8007f6c <_malloc_r+0x34>
 800800e:	463c      	mov	r4, r7
 8008010:	687f      	ldr	r7, [r7, #4]
 8008012:	e7b6      	b.n	8007f82 <_malloc_r+0x4a>
 8008014:	461a      	mov	r2, r3
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	42a3      	cmp	r3, r4
 800801a:	d1fb      	bne.n	8008014 <_malloc_r+0xdc>
 800801c:	2300      	movs	r3, #0
 800801e:	6053      	str	r3, [r2, #4]
 8008020:	e7de      	b.n	8007fe0 <_malloc_r+0xa8>
 8008022:	230c      	movs	r3, #12
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	4630      	mov	r0, r6
 8008028:	f000 f80c 	bl	8008044 <__malloc_unlock>
 800802c:	e794      	b.n	8007f58 <_malloc_r+0x20>
 800802e:	6005      	str	r5, [r0, #0]
 8008030:	e7d6      	b.n	8007fe0 <_malloc_r+0xa8>
 8008032:	bf00      	nop
 8008034:	2000af60 	.word	0x2000af60

08008038 <__malloc_lock>:
 8008038:	4801      	ldr	r0, [pc, #4]	@ (8008040 <__malloc_lock+0x8>)
 800803a:	f000 bb80 	b.w	800873e <__retarget_lock_acquire_recursive>
 800803e:	bf00      	nop
 8008040:	2000b0a4 	.word	0x2000b0a4

08008044 <__malloc_unlock>:
 8008044:	4801      	ldr	r0, [pc, #4]	@ (800804c <__malloc_unlock+0x8>)
 8008046:	f000 bb7b 	b.w	8008740 <__retarget_lock_release_recursive>
 800804a:	bf00      	nop
 800804c:	2000b0a4 	.word	0x2000b0a4

08008050 <_strtol_l.constprop.0>:
 8008050:	2b24      	cmp	r3, #36	@ 0x24
 8008052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008056:	4686      	mov	lr, r0
 8008058:	4690      	mov	r8, r2
 800805a:	d801      	bhi.n	8008060 <_strtol_l.constprop.0+0x10>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d106      	bne.n	800806e <_strtol_l.constprop.0+0x1e>
 8008060:	f000 fb42 	bl	80086e8 <__errno>
 8008064:	2316      	movs	r3, #22
 8008066:	6003      	str	r3, [r0, #0]
 8008068:	2000      	movs	r0, #0
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	4834      	ldr	r0, [pc, #208]	@ (8008140 <_strtol_l.constprop.0+0xf0>)
 8008070:	460d      	mov	r5, r1
 8008072:	462a      	mov	r2, r5
 8008074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008078:	5d06      	ldrb	r6, [r0, r4]
 800807a:	f016 0608 	ands.w	r6, r6, #8
 800807e:	d1f8      	bne.n	8008072 <_strtol_l.constprop.0+0x22>
 8008080:	2c2d      	cmp	r4, #45	@ 0x2d
 8008082:	d12d      	bne.n	80080e0 <_strtol_l.constprop.0+0x90>
 8008084:	782c      	ldrb	r4, [r5, #0]
 8008086:	2601      	movs	r6, #1
 8008088:	1c95      	adds	r5, r2, #2
 800808a:	f033 0210 	bics.w	r2, r3, #16
 800808e:	d109      	bne.n	80080a4 <_strtol_l.constprop.0+0x54>
 8008090:	2c30      	cmp	r4, #48	@ 0x30
 8008092:	d12a      	bne.n	80080ea <_strtol_l.constprop.0+0x9a>
 8008094:	782a      	ldrb	r2, [r5, #0]
 8008096:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800809a:	2a58      	cmp	r2, #88	@ 0x58
 800809c:	d125      	bne.n	80080ea <_strtol_l.constprop.0+0x9a>
 800809e:	786c      	ldrb	r4, [r5, #1]
 80080a0:	2310      	movs	r3, #16
 80080a2:	3502      	adds	r5, #2
 80080a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80080a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80080ac:	2200      	movs	r2, #0
 80080ae:	fbbc f9f3 	udiv	r9, ip, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80080b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80080bc:	2f09      	cmp	r7, #9
 80080be:	d81b      	bhi.n	80080f8 <_strtol_l.constprop.0+0xa8>
 80080c0:	463c      	mov	r4, r7
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	dd27      	ble.n	8008116 <_strtol_l.constprop.0+0xc6>
 80080c6:	1c57      	adds	r7, r2, #1
 80080c8:	d007      	beq.n	80080da <_strtol_l.constprop.0+0x8a>
 80080ca:	4581      	cmp	r9, r0
 80080cc:	d320      	bcc.n	8008110 <_strtol_l.constprop.0+0xc0>
 80080ce:	d101      	bne.n	80080d4 <_strtol_l.constprop.0+0x84>
 80080d0:	45a2      	cmp	sl, r4
 80080d2:	db1d      	blt.n	8008110 <_strtol_l.constprop.0+0xc0>
 80080d4:	fb00 4003 	mla	r0, r0, r3, r4
 80080d8:	2201      	movs	r2, #1
 80080da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080de:	e7eb      	b.n	80080b8 <_strtol_l.constprop.0+0x68>
 80080e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80080e2:	bf04      	itt	eq
 80080e4:	782c      	ldrbeq	r4, [r5, #0]
 80080e6:	1c95      	addeq	r5, r2, #2
 80080e8:	e7cf      	b.n	800808a <_strtol_l.constprop.0+0x3a>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1da      	bne.n	80080a4 <_strtol_l.constprop.0+0x54>
 80080ee:	2c30      	cmp	r4, #48	@ 0x30
 80080f0:	bf0c      	ite	eq
 80080f2:	2308      	moveq	r3, #8
 80080f4:	230a      	movne	r3, #10
 80080f6:	e7d5      	b.n	80080a4 <_strtol_l.constprop.0+0x54>
 80080f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080fc:	2f19      	cmp	r7, #25
 80080fe:	d801      	bhi.n	8008104 <_strtol_l.constprop.0+0xb4>
 8008100:	3c37      	subs	r4, #55	@ 0x37
 8008102:	e7de      	b.n	80080c2 <_strtol_l.constprop.0+0x72>
 8008104:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008108:	2f19      	cmp	r7, #25
 800810a:	d804      	bhi.n	8008116 <_strtol_l.constprop.0+0xc6>
 800810c:	3c57      	subs	r4, #87	@ 0x57
 800810e:	e7d8      	b.n	80080c2 <_strtol_l.constprop.0+0x72>
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	e7e1      	b.n	80080da <_strtol_l.constprop.0+0x8a>
 8008116:	1c53      	adds	r3, r2, #1
 8008118:	d108      	bne.n	800812c <_strtol_l.constprop.0+0xdc>
 800811a:	2322      	movs	r3, #34	@ 0x22
 800811c:	f8ce 3000 	str.w	r3, [lr]
 8008120:	4660      	mov	r0, ip
 8008122:	f1b8 0f00 	cmp.w	r8, #0
 8008126:	d0a0      	beq.n	800806a <_strtol_l.constprop.0+0x1a>
 8008128:	1e69      	subs	r1, r5, #1
 800812a:	e006      	b.n	800813a <_strtol_l.constprop.0+0xea>
 800812c:	b106      	cbz	r6, 8008130 <_strtol_l.constprop.0+0xe0>
 800812e:	4240      	negs	r0, r0
 8008130:	f1b8 0f00 	cmp.w	r8, #0
 8008134:	d099      	beq.n	800806a <_strtol_l.constprop.0+0x1a>
 8008136:	2a00      	cmp	r2, #0
 8008138:	d1f6      	bne.n	8008128 <_strtol_l.constprop.0+0xd8>
 800813a:	f8c8 1000 	str.w	r1, [r8]
 800813e:	e794      	b.n	800806a <_strtol_l.constprop.0+0x1a>
 8008140:	08012ae5 	.word	0x08012ae5

08008144 <strtol>:
 8008144:	4613      	mov	r3, r2
 8008146:	460a      	mov	r2, r1
 8008148:	4601      	mov	r1, r0
 800814a:	4802      	ldr	r0, [pc, #8]	@ (8008154 <strtol+0x10>)
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	f7ff bf7f 	b.w	8008050 <_strtol_l.constprop.0>
 8008152:	bf00      	nop
 8008154:	20000220 	.word	0x20000220

08008158 <_strtoul_l.constprop.0>:
 8008158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800815c:	4e34      	ldr	r6, [pc, #208]	@ (8008230 <_strtoul_l.constprop.0+0xd8>)
 800815e:	4686      	mov	lr, r0
 8008160:	460d      	mov	r5, r1
 8008162:	4628      	mov	r0, r5
 8008164:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008168:	5d37      	ldrb	r7, [r6, r4]
 800816a:	f017 0708 	ands.w	r7, r7, #8
 800816e:	d1f8      	bne.n	8008162 <_strtoul_l.constprop.0+0xa>
 8008170:	2c2d      	cmp	r4, #45	@ 0x2d
 8008172:	d12f      	bne.n	80081d4 <_strtoul_l.constprop.0+0x7c>
 8008174:	782c      	ldrb	r4, [r5, #0]
 8008176:	2701      	movs	r7, #1
 8008178:	1c85      	adds	r5, r0, #2
 800817a:	f033 0010 	bics.w	r0, r3, #16
 800817e:	d109      	bne.n	8008194 <_strtoul_l.constprop.0+0x3c>
 8008180:	2c30      	cmp	r4, #48	@ 0x30
 8008182:	d12c      	bne.n	80081de <_strtoul_l.constprop.0+0x86>
 8008184:	7828      	ldrb	r0, [r5, #0]
 8008186:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800818a:	2858      	cmp	r0, #88	@ 0x58
 800818c:	d127      	bne.n	80081de <_strtoul_l.constprop.0+0x86>
 800818e:	786c      	ldrb	r4, [r5, #1]
 8008190:	2310      	movs	r3, #16
 8008192:	3502      	adds	r5, #2
 8008194:	f04f 38ff 	mov.w	r8, #4294967295
 8008198:	2600      	movs	r6, #0
 800819a:	fbb8 f8f3 	udiv	r8, r8, r3
 800819e:	fb03 f908 	mul.w	r9, r3, r8
 80081a2:	ea6f 0909 	mvn.w	r9, r9
 80081a6:	4630      	mov	r0, r6
 80081a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80081ac:	f1bc 0f09 	cmp.w	ip, #9
 80081b0:	d81c      	bhi.n	80081ec <_strtoul_l.constprop.0+0x94>
 80081b2:	4664      	mov	r4, ip
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	dd2a      	ble.n	800820e <_strtoul_l.constprop.0+0xb6>
 80081b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80081bc:	d007      	beq.n	80081ce <_strtoul_l.constprop.0+0x76>
 80081be:	4580      	cmp	r8, r0
 80081c0:	d322      	bcc.n	8008208 <_strtoul_l.constprop.0+0xb0>
 80081c2:	d101      	bne.n	80081c8 <_strtoul_l.constprop.0+0x70>
 80081c4:	45a1      	cmp	r9, r4
 80081c6:	db1f      	blt.n	8008208 <_strtoul_l.constprop.0+0xb0>
 80081c8:	fb00 4003 	mla	r0, r0, r3, r4
 80081cc:	2601      	movs	r6, #1
 80081ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081d2:	e7e9      	b.n	80081a8 <_strtoul_l.constprop.0+0x50>
 80081d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80081d6:	bf04      	itt	eq
 80081d8:	782c      	ldrbeq	r4, [r5, #0]
 80081da:	1c85      	addeq	r5, r0, #2
 80081dc:	e7cd      	b.n	800817a <_strtoul_l.constprop.0+0x22>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1d8      	bne.n	8008194 <_strtoul_l.constprop.0+0x3c>
 80081e2:	2c30      	cmp	r4, #48	@ 0x30
 80081e4:	bf0c      	ite	eq
 80081e6:	2308      	moveq	r3, #8
 80081e8:	230a      	movne	r3, #10
 80081ea:	e7d3      	b.n	8008194 <_strtoul_l.constprop.0+0x3c>
 80081ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80081f0:	f1bc 0f19 	cmp.w	ip, #25
 80081f4:	d801      	bhi.n	80081fa <_strtoul_l.constprop.0+0xa2>
 80081f6:	3c37      	subs	r4, #55	@ 0x37
 80081f8:	e7dc      	b.n	80081b4 <_strtoul_l.constprop.0+0x5c>
 80081fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80081fe:	f1bc 0f19 	cmp.w	ip, #25
 8008202:	d804      	bhi.n	800820e <_strtoul_l.constprop.0+0xb6>
 8008204:	3c57      	subs	r4, #87	@ 0x57
 8008206:	e7d5      	b.n	80081b4 <_strtoul_l.constprop.0+0x5c>
 8008208:	f04f 36ff 	mov.w	r6, #4294967295
 800820c:	e7df      	b.n	80081ce <_strtoul_l.constprop.0+0x76>
 800820e:	1c73      	adds	r3, r6, #1
 8008210:	d106      	bne.n	8008220 <_strtoul_l.constprop.0+0xc8>
 8008212:	2322      	movs	r3, #34	@ 0x22
 8008214:	f8ce 3000 	str.w	r3, [lr]
 8008218:	4630      	mov	r0, r6
 800821a:	b932      	cbnz	r2, 800822a <_strtoul_l.constprop.0+0xd2>
 800821c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008220:	b107      	cbz	r7, 8008224 <_strtoul_l.constprop.0+0xcc>
 8008222:	4240      	negs	r0, r0
 8008224:	2a00      	cmp	r2, #0
 8008226:	d0f9      	beq.n	800821c <_strtoul_l.constprop.0+0xc4>
 8008228:	b106      	cbz	r6, 800822c <_strtoul_l.constprop.0+0xd4>
 800822a:	1e69      	subs	r1, r5, #1
 800822c:	6011      	str	r1, [r2, #0]
 800822e:	e7f5      	b.n	800821c <_strtoul_l.constprop.0+0xc4>
 8008230:	08012ae5 	.word	0x08012ae5

08008234 <strtoul>:
 8008234:	4613      	mov	r3, r2
 8008236:	460a      	mov	r2, r1
 8008238:	4601      	mov	r1, r0
 800823a:	4802      	ldr	r0, [pc, #8]	@ (8008244 <strtoul+0x10>)
 800823c:	6800      	ldr	r0, [r0, #0]
 800823e:	f7ff bf8b 	b.w	8008158 <_strtoul_l.constprop.0>
 8008242:	bf00      	nop
 8008244:	20000220 	.word	0x20000220

08008248 <std>:
 8008248:	2300      	movs	r3, #0
 800824a:	b510      	push	{r4, lr}
 800824c:	4604      	mov	r4, r0
 800824e:	e9c0 3300 	strd	r3, r3, [r0]
 8008252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008256:	6083      	str	r3, [r0, #8]
 8008258:	8181      	strh	r1, [r0, #12]
 800825a:	6643      	str	r3, [r0, #100]	@ 0x64
 800825c:	81c2      	strh	r2, [r0, #14]
 800825e:	6183      	str	r3, [r0, #24]
 8008260:	4619      	mov	r1, r3
 8008262:	2208      	movs	r2, #8
 8008264:	305c      	adds	r0, #92	@ 0x5c
 8008266:	f000 f971 	bl	800854c <memset>
 800826a:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <std+0x58>)
 800826c:	6263      	str	r3, [r4, #36]	@ 0x24
 800826e:	4b0d      	ldr	r3, [pc, #52]	@ (80082a4 <std+0x5c>)
 8008270:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008272:	4b0d      	ldr	r3, [pc, #52]	@ (80082a8 <std+0x60>)
 8008274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008276:	4b0d      	ldr	r3, [pc, #52]	@ (80082ac <std+0x64>)
 8008278:	6323      	str	r3, [r4, #48]	@ 0x30
 800827a:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <std+0x68>)
 800827c:	6224      	str	r4, [r4, #32]
 800827e:	429c      	cmp	r4, r3
 8008280:	d006      	beq.n	8008290 <std+0x48>
 8008282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008286:	4294      	cmp	r4, r2
 8008288:	d002      	beq.n	8008290 <std+0x48>
 800828a:	33d0      	adds	r3, #208	@ 0xd0
 800828c:	429c      	cmp	r4, r3
 800828e:	d105      	bne.n	800829c <std+0x54>
 8008290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008298:	f000 ba50 	b.w	800873c <__retarget_lock_init_recursive>
 800829c:	bd10      	pop	{r4, pc}
 800829e:	bf00      	nop
 80082a0:	08008435 	.word	0x08008435
 80082a4:	08008457 	.word	0x08008457
 80082a8:	0800848f 	.word	0x0800848f
 80082ac:	080084b3 	.word	0x080084b3
 80082b0:	2000af64 	.word	0x2000af64

080082b4 <stdio_exit_handler>:
 80082b4:	4a02      	ldr	r2, [pc, #8]	@ (80082c0 <stdio_exit_handler+0xc>)
 80082b6:	4903      	ldr	r1, [pc, #12]	@ (80082c4 <stdio_exit_handler+0x10>)
 80082b8:	4803      	ldr	r0, [pc, #12]	@ (80082c8 <stdio_exit_handler+0x14>)
 80082ba:	f000 b869 	b.w	8008390 <_fwalk_sglue>
 80082be:	bf00      	nop
 80082c0:	20000214 	.word	0x20000214
 80082c4:	08008f05 	.word	0x08008f05
 80082c8:	20000224 	.word	0x20000224

080082cc <cleanup_stdio>:
 80082cc:	6841      	ldr	r1, [r0, #4]
 80082ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008300 <cleanup_stdio+0x34>)
 80082d0:	4299      	cmp	r1, r3
 80082d2:	b510      	push	{r4, lr}
 80082d4:	4604      	mov	r4, r0
 80082d6:	d001      	beq.n	80082dc <cleanup_stdio+0x10>
 80082d8:	f000 fe14 	bl	8008f04 <_fflush_r>
 80082dc:	68a1      	ldr	r1, [r4, #8]
 80082de:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <cleanup_stdio+0x38>)
 80082e0:	4299      	cmp	r1, r3
 80082e2:	d002      	beq.n	80082ea <cleanup_stdio+0x1e>
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fe0d 	bl	8008f04 <_fflush_r>
 80082ea:	68e1      	ldr	r1, [r4, #12]
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <cleanup_stdio+0x3c>)
 80082ee:	4299      	cmp	r1, r3
 80082f0:	d004      	beq.n	80082fc <cleanup_stdio+0x30>
 80082f2:	4620      	mov	r0, r4
 80082f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f8:	f000 be04 	b.w	8008f04 <_fflush_r>
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	bf00      	nop
 8008300:	2000af64 	.word	0x2000af64
 8008304:	2000afcc 	.word	0x2000afcc
 8008308:	2000b034 	.word	0x2000b034

0800830c <global_stdio_init.part.0>:
 800830c:	b510      	push	{r4, lr}
 800830e:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <global_stdio_init.part.0+0x30>)
 8008310:	4c0b      	ldr	r4, [pc, #44]	@ (8008340 <global_stdio_init.part.0+0x34>)
 8008312:	4a0c      	ldr	r2, [pc, #48]	@ (8008344 <global_stdio_init.part.0+0x38>)
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	4620      	mov	r0, r4
 8008318:	2200      	movs	r2, #0
 800831a:	2104      	movs	r1, #4
 800831c:	f7ff ff94 	bl	8008248 <std>
 8008320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008324:	2201      	movs	r2, #1
 8008326:	2109      	movs	r1, #9
 8008328:	f7ff ff8e 	bl	8008248 <std>
 800832c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008330:	2202      	movs	r2, #2
 8008332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008336:	2112      	movs	r1, #18
 8008338:	f7ff bf86 	b.w	8008248 <std>
 800833c:	2000b09c 	.word	0x2000b09c
 8008340:	2000af64 	.word	0x2000af64
 8008344:	080082b5 	.word	0x080082b5

08008348 <__sfp_lock_acquire>:
 8008348:	4801      	ldr	r0, [pc, #4]	@ (8008350 <__sfp_lock_acquire+0x8>)
 800834a:	f000 b9f8 	b.w	800873e <__retarget_lock_acquire_recursive>
 800834e:	bf00      	nop
 8008350:	2000b0a5 	.word	0x2000b0a5

08008354 <__sfp_lock_release>:
 8008354:	4801      	ldr	r0, [pc, #4]	@ (800835c <__sfp_lock_release+0x8>)
 8008356:	f000 b9f3 	b.w	8008740 <__retarget_lock_release_recursive>
 800835a:	bf00      	nop
 800835c:	2000b0a5 	.word	0x2000b0a5

08008360 <__sinit>:
 8008360:	b510      	push	{r4, lr}
 8008362:	4604      	mov	r4, r0
 8008364:	f7ff fff0 	bl	8008348 <__sfp_lock_acquire>
 8008368:	6a23      	ldr	r3, [r4, #32]
 800836a:	b11b      	cbz	r3, 8008374 <__sinit+0x14>
 800836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008370:	f7ff bff0 	b.w	8008354 <__sfp_lock_release>
 8008374:	4b04      	ldr	r3, [pc, #16]	@ (8008388 <__sinit+0x28>)
 8008376:	6223      	str	r3, [r4, #32]
 8008378:	4b04      	ldr	r3, [pc, #16]	@ (800838c <__sinit+0x2c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f5      	bne.n	800836c <__sinit+0xc>
 8008380:	f7ff ffc4 	bl	800830c <global_stdio_init.part.0>
 8008384:	e7f2      	b.n	800836c <__sinit+0xc>
 8008386:	bf00      	nop
 8008388:	080082cd 	.word	0x080082cd
 800838c:	2000b09c 	.word	0x2000b09c

08008390 <_fwalk_sglue>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	4607      	mov	r7, r0
 8008396:	4688      	mov	r8, r1
 8008398:	4614      	mov	r4, r2
 800839a:	2600      	movs	r6, #0
 800839c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083a0:	f1b9 0901 	subs.w	r9, r9, #1
 80083a4:	d505      	bpl.n	80083b2 <_fwalk_sglue+0x22>
 80083a6:	6824      	ldr	r4, [r4, #0]
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	d1f7      	bne.n	800839c <_fwalk_sglue+0xc>
 80083ac:	4630      	mov	r0, r6
 80083ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d907      	bls.n	80083c8 <_fwalk_sglue+0x38>
 80083b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083bc:	3301      	adds	r3, #1
 80083be:	d003      	beq.n	80083c8 <_fwalk_sglue+0x38>
 80083c0:	4629      	mov	r1, r5
 80083c2:	4638      	mov	r0, r7
 80083c4:	47c0      	blx	r8
 80083c6:	4306      	orrs	r6, r0
 80083c8:	3568      	adds	r5, #104	@ 0x68
 80083ca:	e7e9      	b.n	80083a0 <_fwalk_sglue+0x10>

080083cc <sniprintf>:
 80083cc:	b40c      	push	{r2, r3}
 80083ce:	b530      	push	{r4, r5, lr}
 80083d0:	4b17      	ldr	r3, [pc, #92]	@ (8008430 <sniprintf+0x64>)
 80083d2:	1e0c      	subs	r4, r1, #0
 80083d4:	681d      	ldr	r5, [r3, #0]
 80083d6:	b09d      	sub	sp, #116	@ 0x74
 80083d8:	da08      	bge.n	80083ec <sniprintf+0x20>
 80083da:	238b      	movs	r3, #139	@ 0x8b
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	f04f 30ff 	mov.w	r0, #4294967295
 80083e2:	b01d      	add	sp, #116	@ 0x74
 80083e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e8:	b002      	add	sp, #8
 80083ea:	4770      	bx	lr
 80083ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083f4:	bf14      	ite	ne
 80083f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083fa:	4623      	moveq	r3, r4
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008404:	9002      	str	r0, [sp, #8]
 8008406:	9006      	str	r0, [sp, #24]
 8008408:	f8ad 3016 	strh.w	r3, [sp, #22]
 800840c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800840e:	ab21      	add	r3, sp, #132	@ 0x84
 8008410:	a902      	add	r1, sp, #8
 8008412:	4628      	mov	r0, r5
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	f000 fa67 	bl	80088e8 <_svfiprintf_r>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	bfbc      	itt	lt
 800841e:	238b      	movlt	r3, #139	@ 0x8b
 8008420:	602b      	strlt	r3, [r5, #0]
 8008422:	2c00      	cmp	r4, #0
 8008424:	d0dd      	beq.n	80083e2 <sniprintf+0x16>
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e7d9      	b.n	80083e2 <sniprintf+0x16>
 800842e:	bf00      	nop
 8008430:	20000220 	.word	0x20000220

08008434 <__sread>:
 8008434:	b510      	push	{r4, lr}
 8008436:	460c      	mov	r4, r1
 8008438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843c:	f000 f920 	bl	8008680 <_read_r>
 8008440:	2800      	cmp	r0, #0
 8008442:	bfab      	itete	ge
 8008444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008446:	89a3      	ldrhlt	r3, [r4, #12]
 8008448:	181b      	addge	r3, r3, r0
 800844a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800844e:	bfac      	ite	ge
 8008450:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008452:	81a3      	strhlt	r3, [r4, #12]
 8008454:	bd10      	pop	{r4, pc}

08008456 <__swrite>:
 8008456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845a:	461f      	mov	r7, r3
 800845c:	898b      	ldrh	r3, [r1, #12]
 800845e:	05db      	lsls	r3, r3, #23
 8008460:	4605      	mov	r5, r0
 8008462:	460c      	mov	r4, r1
 8008464:	4616      	mov	r6, r2
 8008466:	d505      	bpl.n	8008474 <__swrite+0x1e>
 8008468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846c:	2302      	movs	r3, #2
 800846e:	2200      	movs	r2, #0
 8008470:	f000 f8f4 	bl	800865c <_lseek_r>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800847a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	4632      	mov	r2, r6
 8008482:	463b      	mov	r3, r7
 8008484:	4628      	mov	r0, r5
 8008486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800848a:	f000 b91b 	b.w	80086c4 <_write_r>

0800848e <__sseek>:
 800848e:	b510      	push	{r4, lr}
 8008490:	460c      	mov	r4, r1
 8008492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008496:	f000 f8e1 	bl	800865c <_lseek_r>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	bf15      	itete	ne
 80084a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80084a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80084aa:	81a3      	strheq	r3, [r4, #12]
 80084ac:	bf18      	it	ne
 80084ae:	81a3      	strhne	r3, [r4, #12]
 80084b0:	bd10      	pop	{r4, pc}

080084b2 <__sclose>:
 80084b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b6:	f000 b8c1 	b.w	800863c <_close_r>

080084ba <_vsniprintf_r>:
 80084ba:	b530      	push	{r4, r5, lr}
 80084bc:	4614      	mov	r4, r2
 80084be:	2c00      	cmp	r4, #0
 80084c0:	b09b      	sub	sp, #108	@ 0x6c
 80084c2:	4605      	mov	r5, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	da05      	bge.n	80084d4 <_vsniprintf_r+0x1a>
 80084c8:	238b      	movs	r3, #139	@ 0x8b
 80084ca:	6003      	str	r3, [r0, #0]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	b01b      	add	sp, #108	@ 0x6c
 80084d2:	bd30      	pop	{r4, r5, pc}
 80084d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80084dc:	bf14      	ite	ne
 80084de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084e2:	4623      	moveq	r3, r4
 80084e4:	9302      	str	r3, [sp, #8]
 80084e6:	9305      	str	r3, [sp, #20]
 80084e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084ec:	9100      	str	r1, [sp, #0]
 80084ee:	9104      	str	r1, [sp, #16]
 80084f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80084f4:	4669      	mov	r1, sp
 80084f6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80084f8:	f000 f9f6 	bl	80088e8 <_svfiprintf_r>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	bfbc      	itt	lt
 8008500:	238b      	movlt	r3, #139	@ 0x8b
 8008502:	602b      	strlt	r3, [r5, #0]
 8008504:	2c00      	cmp	r4, #0
 8008506:	d0e3      	beq.n	80084d0 <_vsniprintf_r+0x16>
 8008508:	9b00      	ldr	r3, [sp, #0]
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
 800850e:	e7df      	b.n	80084d0 <_vsniprintf_r+0x16>

08008510 <vsniprintf>:
 8008510:	b507      	push	{r0, r1, r2, lr}
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4613      	mov	r3, r2
 8008516:	460a      	mov	r2, r1
 8008518:	4601      	mov	r1, r0
 800851a:	4803      	ldr	r0, [pc, #12]	@ (8008528 <vsniprintf+0x18>)
 800851c:	6800      	ldr	r0, [r0, #0]
 800851e:	f7ff ffcc 	bl	80084ba <_vsniprintf_r>
 8008522:	b003      	add	sp, #12
 8008524:	f85d fb04 	ldr.w	pc, [sp], #4
 8008528:	20000220 	.word	0x20000220

0800852c <memcmp>:
 800852c:	b510      	push	{r4, lr}
 800852e:	3901      	subs	r1, #1
 8008530:	4402      	add	r2, r0
 8008532:	4290      	cmp	r0, r2
 8008534:	d101      	bne.n	800853a <memcmp+0xe>
 8008536:	2000      	movs	r0, #0
 8008538:	e005      	b.n	8008546 <memcmp+0x1a>
 800853a:	7803      	ldrb	r3, [r0, #0]
 800853c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008540:	42a3      	cmp	r3, r4
 8008542:	d001      	beq.n	8008548 <memcmp+0x1c>
 8008544:	1b18      	subs	r0, r3, r4
 8008546:	bd10      	pop	{r4, pc}
 8008548:	3001      	adds	r0, #1
 800854a:	e7f2      	b.n	8008532 <memcmp+0x6>

0800854c <memset>:
 800854c:	4402      	add	r2, r0
 800854e:	4603      	mov	r3, r0
 8008550:	4293      	cmp	r3, r2
 8008552:	d100      	bne.n	8008556 <memset+0xa>
 8008554:	4770      	bx	lr
 8008556:	f803 1b01 	strb.w	r1, [r3], #1
 800855a:	e7f9      	b.n	8008550 <memset+0x4>

0800855c <strncpy>:
 800855c:	b510      	push	{r4, lr}
 800855e:	3901      	subs	r1, #1
 8008560:	4603      	mov	r3, r0
 8008562:	b132      	cbz	r2, 8008572 <strncpy+0x16>
 8008564:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008568:	f803 4b01 	strb.w	r4, [r3], #1
 800856c:	3a01      	subs	r2, #1
 800856e:	2c00      	cmp	r4, #0
 8008570:	d1f7      	bne.n	8008562 <strncpy+0x6>
 8008572:	441a      	add	r2, r3
 8008574:	2100      	movs	r1, #0
 8008576:	4293      	cmp	r3, r2
 8008578:	d100      	bne.n	800857c <strncpy+0x20>
 800857a:	bd10      	pop	{r4, pc}
 800857c:	f803 1b01 	strb.w	r1, [r3], #1
 8008580:	e7f9      	b.n	8008576 <strncpy+0x1a>
	...

08008584 <strtok>:
 8008584:	4b16      	ldr	r3, [pc, #88]	@ (80085e0 <strtok+0x5c>)
 8008586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858a:	681f      	ldr	r7, [r3, #0]
 800858c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800858e:	4605      	mov	r5, r0
 8008590:	460e      	mov	r6, r1
 8008592:	b9ec      	cbnz	r4, 80085d0 <strtok+0x4c>
 8008594:	2050      	movs	r0, #80	@ 0x50
 8008596:	f7ff fc9d 	bl	8007ed4 <malloc>
 800859a:	4602      	mov	r2, r0
 800859c:	6478      	str	r0, [r7, #68]	@ 0x44
 800859e:	b920      	cbnz	r0, 80085aa <strtok+0x26>
 80085a0:	4b10      	ldr	r3, [pc, #64]	@ (80085e4 <strtok+0x60>)
 80085a2:	4811      	ldr	r0, [pc, #68]	@ (80085e8 <strtok+0x64>)
 80085a4:	215b      	movs	r1, #91	@ 0x5b
 80085a6:	f000 f8db 	bl	8008760 <__assert_func>
 80085aa:	e9c0 4400 	strd	r4, r4, [r0]
 80085ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80085ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80085be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80085c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80085c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80085ca:	6184      	str	r4, [r0, #24]
 80085cc:	7704      	strb	r4, [r0, #28]
 80085ce:	6244      	str	r4, [r0, #36]	@ 0x24
 80085d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d2:	4631      	mov	r1, r6
 80085d4:	4628      	mov	r0, r5
 80085d6:	2301      	movs	r3, #1
 80085d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085dc:	f000 b806 	b.w	80085ec <__strtok_r>
 80085e0:	20000220 	.word	0x20000220
 80085e4:	08012be5 	.word	0x08012be5
 80085e8:	08012bfc 	.word	0x08012bfc

080085ec <__strtok_r>:
 80085ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ee:	4604      	mov	r4, r0
 80085f0:	b908      	cbnz	r0, 80085f6 <__strtok_r+0xa>
 80085f2:	6814      	ldr	r4, [r2, #0]
 80085f4:	b144      	cbz	r4, 8008608 <__strtok_r+0x1c>
 80085f6:	4620      	mov	r0, r4
 80085f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80085fc:	460f      	mov	r7, r1
 80085fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008602:	b91e      	cbnz	r6, 800860c <__strtok_r+0x20>
 8008604:	b965      	cbnz	r5, 8008620 <__strtok_r+0x34>
 8008606:	6015      	str	r5, [r2, #0]
 8008608:	2000      	movs	r0, #0
 800860a:	e005      	b.n	8008618 <__strtok_r+0x2c>
 800860c:	42b5      	cmp	r5, r6
 800860e:	d1f6      	bne.n	80085fe <__strtok_r+0x12>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f0      	bne.n	80085f6 <__strtok_r+0xa>
 8008614:	6014      	str	r4, [r2, #0]
 8008616:	7003      	strb	r3, [r0, #0]
 8008618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800861a:	461c      	mov	r4, r3
 800861c:	e00c      	b.n	8008638 <__strtok_r+0x4c>
 800861e:	b915      	cbnz	r5, 8008626 <__strtok_r+0x3a>
 8008620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008624:	460e      	mov	r6, r1
 8008626:	f816 5b01 	ldrb.w	r5, [r6], #1
 800862a:	42ab      	cmp	r3, r5
 800862c:	d1f7      	bne.n	800861e <__strtok_r+0x32>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0f3      	beq.n	800861a <__strtok_r+0x2e>
 8008632:	2300      	movs	r3, #0
 8008634:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008638:	6014      	str	r4, [r2, #0]
 800863a:	e7ed      	b.n	8008618 <__strtok_r+0x2c>

0800863c <_close_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d06      	ldr	r5, [pc, #24]	@ (8008658 <_close_r+0x1c>)
 8008640:	2300      	movs	r3, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	f7f9 fd20 	bl	800208c <_close>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_close_r+0x1a>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_close_r+0x1a>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	2000b0a0 	.word	0x2000b0a0

0800865c <_lseek_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	4d07      	ldr	r5, [pc, #28]	@ (800867c <_lseek_r+0x20>)
 8008660:	4604      	mov	r4, r0
 8008662:	4608      	mov	r0, r1
 8008664:	4611      	mov	r1, r2
 8008666:	2200      	movs	r2, #0
 8008668:	602a      	str	r2, [r5, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	f7f9 fd35 	bl	80020da <_lseek>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_lseek_r+0x1e>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_lseek_r+0x1e>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	2000b0a0 	.word	0x2000b0a0

08008680 <_read_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d07      	ldr	r5, [pc, #28]	@ (80086a0 <_read_r+0x20>)
 8008684:	4604      	mov	r4, r0
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	2200      	movs	r2, #0
 800868c:	602a      	str	r2, [r5, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	f7f9 fcc3 	bl	800201a <_read>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	d102      	bne.n	800869e <_read_r+0x1e>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	b103      	cbz	r3, 800869e <_read_r+0x1e>
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	bd38      	pop	{r3, r4, r5, pc}
 80086a0:	2000b0a0 	.word	0x2000b0a0

080086a4 <_sbrk_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d06      	ldr	r5, [pc, #24]	@ (80086c0 <_sbrk_r+0x1c>)
 80086a8:	2300      	movs	r3, #0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	f7f9 fd20 	bl	80020f4 <_sbrk>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_sbrk_r+0x1a>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_sbrk_r+0x1a>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	2000b0a0 	.word	0x2000b0a0

080086c4 <_write_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d07      	ldr	r5, [pc, #28]	@ (80086e4 <_write_r+0x20>)
 80086c8:	4604      	mov	r4, r0
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	2200      	movs	r2, #0
 80086d0:	602a      	str	r2, [r5, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f7f9 fcbe 	bl	8002054 <_write>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_write_r+0x1e>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_write_r+0x1e>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	2000b0a0 	.word	0x2000b0a0

080086e8 <__errno>:
 80086e8:	4b01      	ldr	r3, [pc, #4]	@ (80086f0 <__errno+0x8>)
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20000220 	.word	0x20000220

080086f4 <__libc_init_array>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4d0d      	ldr	r5, [pc, #52]	@ (800872c <__libc_init_array+0x38>)
 80086f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008730 <__libc_init_array+0x3c>)
 80086fa:	1b64      	subs	r4, r4, r5
 80086fc:	10a4      	asrs	r4, r4, #2
 80086fe:	2600      	movs	r6, #0
 8008700:	42a6      	cmp	r6, r4
 8008702:	d109      	bne.n	8008718 <__libc_init_array+0x24>
 8008704:	4d0b      	ldr	r5, [pc, #44]	@ (8008734 <__libc_init_array+0x40>)
 8008706:	4c0c      	ldr	r4, [pc, #48]	@ (8008738 <__libc_init_array+0x44>)
 8008708:	f000 ff2a 	bl	8009560 <_init>
 800870c:	1b64      	subs	r4, r4, r5
 800870e:	10a4      	asrs	r4, r4, #2
 8008710:	2600      	movs	r6, #0
 8008712:	42a6      	cmp	r6, r4
 8008714:	d105      	bne.n	8008722 <__libc_init_array+0x2e>
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	f855 3b04 	ldr.w	r3, [r5], #4
 800871c:	4798      	blx	r3
 800871e:	3601      	adds	r6, #1
 8008720:	e7ee      	b.n	8008700 <__libc_init_array+0xc>
 8008722:	f855 3b04 	ldr.w	r3, [r5], #4
 8008726:	4798      	blx	r3
 8008728:	3601      	adds	r6, #1
 800872a:	e7f2      	b.n	8008712 <__libc_init_array+0x1e>
 800872c:	08012cd0 	.word	0x08012cd0
 8008730:	08012cd0 	.word	0x08012cd0
 8008734:	08012cd0 	.word	0x08012cd0
 8008738:	08012cd4 	.word	0x08012cd4

0800873c <__retarget_lock_init_recursive>:
 800873c:	4770      	bx	lr

0800873e <__retarget_lock_acquire_recursive>:
 800873e:	4770      	bx	lr

08008740 <__retarget_lock_release_recursive>:
 8008740:	4770      	bx	lr

08008742 <memcpy>:
 8008742:	440a      	add	r2, r1
 8008744:	4291      	cmp	r1, r2
 8008746:	f100 33ff 	add.w	r3, r0, #4294967295
 800874a:	d100      	bne.n	800874e <memcpy+0xc>
 800874c:	4770      	bx	lr
 800874e:	b510      	push	{r4, lr}
 8008750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008758:	4291      	cmp	r1, r2
 800875a:	d1f9      	bne.n	8008750 <memcpy+0xe>
 800875c:	bd10      	pop	{r4, pc}
	...

08008760 <__assert_func>:
 8008760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008762:	4614      	mov	r4, r2
 8008764:	461a      	mov	r2, r3
 8008766:	4b09      	ldr	r3, [pc, #36]	@ (800878c <__assert_func+0x2c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4605      	mov	r5, r0
 800876c:	68d8      	ldr	r0, [r3, #12]
 800876e:	b954      	cbnz	r4, 8008786 <__assert_func+0x26>
 8008770:	4b07      	ldr	r3, [pc, #28]	@ (8008790 <__assert_func+0x30>)
 8008772:	461c      	mov	r4, r3
 8008774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008778:	9100      	str	r1, [sp, #0]
 800877a:	462b      	mov	r3, r5
 800877c:	4905      	ldr	r1, [pc, #20]	@ (8008794 <__assert_func+0x34>)
 800877e:	f000 fbe9 	bl	8008f54 <fiprintf>
 8008782:	f000 fc13 	bl	8008fac <abort>
 8008786:	4b04      	ldr	r3, [pc, #16]	@ (8008798 <__assert_func+0x38>)
 8008788:	e7f4      	b.n	8008774 <__assert_func+0x14>
 800878a:	bf00      	nop
 800878c:	20000220 	.word	0x20000220
 8008790:	08012c91 	.word	0x08012c91
 8008794:	08012c63 	.word	0x08012c63
 8008798:	08012c56 	.word	0x08012c56

0800879c <_free_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4605      	mov	r5, r0
 80087a0:	2900      	cmp	r1, #0
 80087a2:	d041      	beq.n	8008828 <_free_r+0x8c>
 80087a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a8:	1f0c      	subs	r4, r1, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bfb8      	it	lt
 80087ae:	18e4      	addlt	r4, r4, r3
 80087b0:	f7ff fc42 	bl	8008038 <__malloc_lock>
 80087b4:	4a1d      	ldr	r2, [pc, #116]	@ (800882c <_free_r+0x90>)
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	b933      	cbnz	r3, 80087c8 <_free_r+0x2c>
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	6014      	str	r4, [r2, #0]
 80087be:	4628      	mov	r0, r5
 80087c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c4:	f7ff bc3e 	b.w	8008044 <__malloc_unlock>
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d908      	bls.n	80087de <_free_r+0x42>
 80087cc:	6820      	ldr	r0, [r4, #0]
 80087ce:	1821      	adds	r1, r4, r0
 80087d0:	428b      	cmp	r3, r1
 80087d2:	bf01      	itttt	eq
 80087d4:	6819      	ldreq	r1, [r3, #0]
 80087d6:	685b      	ldreq	r3, [r3, #4]
 80087d8:	1809      	addeq	r1, r1, r0
 80087da:	6021      	streq	r1, [r4, #0]
 80087dc:	e7ed      	b.n	80087ba <_free_r+0x1e>
 80087de:	461a      	mov	r2, r3
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b10b      	cbz	r3, 80087e8 <_free_r+0x4c>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d9fa      	bls.n	80087de <_free_r+0x42>
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	1850      	adds	r0, r2, r1
 80087ec:	42a0      	cmp	r0, r4
 80087ee:	d10b      	bne.n	8008808 <_free_r+0x6c>
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	4401      	add	r1, r0
 80087f4:	1850      	adds	r0, r2, r1
 80087f6:	4283      	cmp	r3, r0
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	d1e0      	bne.n	80087be <_free_r+0x22>
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	4408      	add	r0, r1
 8008804:	6010      	str	r0, [r2, #0]
 8008806:	e7da      	b.n	80087be <_free_r+0x22>
 8008808:	d902      	bls.n	8008810 <_free_r+0x74>
 800880a:	230c      	movs	r3, #12
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	e7d6      	b.n	80087be <_free_r+0x22>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	1821      	adds	r1, r4, r0
 8008814:	428b      	cmp	r3, r1
 8008816:	bf04      	itt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	bf04      	itt	eq
 8008820:	1809      	addeq	r1, r1, r0
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	6054      	str	r4, [r2, #4]
 8008826:	e7ca      	b.n	80087be <_free_r+0x22>
 8008828:	bd38      	pop	{r3, r4, r5, pc}
 800882a:	bf00      	nop
 800882c:	2000af60 	.word	0x2000af60

08008830 <__ssputs_r>:
 8008830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	688e      	ldr	r6, [r1, #8]
 8008836:	461f      	mov	r7, r3
 8008838:	42be      	cmp	r6, r7
 800883a:	680b      	ldr	r3, [r1, #0]
 800883c:	4682      	mov	sl, r0
 800883e:	460c      	mov	r4, r1
 8008840:	4690      	mov	r8, r2
 8008842:	d82d      	bhi.n	80088a0 <__ssputs_r+0x70>
 8008844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008848:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800884c:	d026      	beq.n	800889c <__ssputs_r+0x6c>
 800884e:	6965      	ldr	r5, [r4, #20]
 8008850:	6909      	ldr	r1, [r1, #16]
 8008852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008856:	eba3 0901 	sub.w	r9, r3, r1
 800885a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800885e:	1c7b      	adds	r3, r7, #1
 8008860:	444b      	add	r3, r9
 8008862:	106d      	asrs	r5, r5, #1
 8008864:	429d      	cmp	r5, r3
 8008866:	bf38      	it	cc
 8008868:	461d      	movcc	r5, r3
 800886a:	0553      	lsls	r3, r2, #21
 800886c:	d527      	bpl.n	80088be <__ssputs_r+0x8e>
 800886e:	4629      	mov	r1, r5
 8008870:	f7ff fb62 	bl	8007f38 <_malloc_r>
 8008874:	4606      	mov	r6, r0
 8008876:	b360      	cbz	r0, 80088d2 <__ssputs_r+0xa2>
 8008878:	6921      	ldr	r1, [r4, #16]
 800887a:	464a      	mov	r2, r9
 800887c:	f7ff ff61 	bl	8008742 <memcpy>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	6126      	str	r6, [r4, #16]
 800888e:	6165      	str	r5, [r4, #20]
 8008890:	444e      	add	r6, r9
 8008892:	eba5 0509 	sub.w	r5, r5, r9
 8008896:	6026      	str	r6, [r4, #0]
 8008898:	60a5      	str	r5, [r4, #8]
 800889a:	463e      	mov	r6, r7
 800889c:	42be      	cmp	r6, r7
 800889e:	d900      	bls.n	80088a2 <__ssputs_r+0x72>
 80088a0:	463e      	mov	r6, r7
 80088a2:	6820      	ldr	r0, [r4, #0]
 80088a4:	4632      	mov	r2, r6
 80088a6:	4641      	mov	r1, r8
 80088a8:	f000 fb66 	bl	8008f78 <memmove>
 80088ac:	68a3      	ldr	r3, [r4, #8]
 80088ae:	1b9b      	subs	r3, r3, r6
 80088b0:	60a3      	str	r3, [r4, #8]
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	4433      	add	r3, r6
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	2000      	movs	r0, #0
 80088ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088be:	462a      	mov	r2, r5
 80088c0:	f000 fb7b 	bl	8008fba <_realloc_r>
 80088c4:	4606      	mov	r6, r0
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d1e0      	bne.n	800888c <__ssputs_r+0x5c>
 80088ca:	6921      	ldr	r1, [r4, #16]
 80088cc:	4650      	mov	r0, sl
 80088ce:	f7ff ff65 	bl	800879c <_free_r>
 80088d2:	230c      	movs	r3, #12
 80088d4:	f8ca 3000 	str.w	r3, [sl]
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	e7e9      	b.n	80088ba <__ssputs_r+0x8a>
	...

080088e8 <_svfiprintf_r>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	4698      	mov	r8, r3
 80088ee:	898b      	ldrh	r3, [r1, #12]
 80088f0:	061b      	lsls	r3, r3, #24
 80088f2:	b09d      	sub	sp, #116	@ 0x74
 80088f4:	4607      	mov	r7, r0
 80088f6:	460d      	mov	r5, r1
 80088f8:	4614      	mov	r4, r2
 80088fa:	d510      	bpl.n	800891e <_svfiprintf_r+0x36>
 80088fc:	690b      	ldr	r3, [r1, #16]
 80088fe:	b973      	cbnz	r3, 800891e <_svfiprintf_r+0x36>
 8008900:	2140      	movs	r1, #64	@ 0x40
 8008902:	f7ff fb19 	bl	8007f38 <_malloc_r>
 8008906:	6028      	str	r0, [r5, #0]
 8008908:	6128      	str	r0, [r5, #16]
 800890a:	b930      	cbnz	r0, 800891a <_svfiprintf_r+0x32>
 800890c:	230c      	movs	r3, #12
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	b01d      	add	sp, #116	@ 0x74
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	2340      	movs	r3, #64	@ 0x40
 800891c:	616b      	str	r3, [r5, #20]
 800891e:	2300      	movs	r3, #0
 8008920:	9309      	str	r3, [sp, #36]	@ 0x24
 8008922:	2320      	movs	r3, #32
 8008924:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008928:	f8cd 800c 	str.w	r8, [sp, #12]
 800892c:	2330      	movs	r3, #48	@ 0x30
 800892e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008acc <_svfiprintf_r+0x1e4>
 8008932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008936:	f04f 0901 	mov.w	r9, #1
 800893a:	4623      	mov	r3, r4
 800893c:	469a      	mov	sl, r3
 800893e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008942:	b10a      	cbz	r2, 8008948 <_svfiprintf_r+0x60>
 8008944:	2a25      	cmp	r2, #37	@ 0x25
 8008946:	d1f9      	bne.n	800893c <_svfiprintf_r+0x54>
 8008948:	ebba 0b04 	subs.w	fp, sl, r4
 800894c:	d00b      	beq.n	8008966 <_svfiprintf_r+0x7e>
 800894e:	465b      	mov	r3, fp
 8008950:	4622      	mov	r2, r4
 8008952:	4629      	mov	r1, r5
 8008954:	4638      	mov	r0, r7
 8008956:	f7ff ff6b 	bl	8008830 <__ssputs_r>
 800895a:	3001      	adds	r0, #1
 800895c:	f000 80a7 	beq.w	8008aae <_svfiprintf_r+0x1c6>
 8008960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008962:	445a      	add	r2, fp
 8008964:	9209      	str	r2, [sp, #36]	@ 0x24
 8008966:	f89a 3000 	ldrb.w	r3, [sl]
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 809f 	beq.w	8008aae <_svfiprintf_r+0x1c6>
 8008970:	2300      	movs	r3, #0
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800897a:	f10a 0a01 	add.w	sl, sl, #1
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	9307      	str	r3, [sp, #28]
 8008982:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008986:	931a      	str	r3, [sp, #104]	@ 0x68
 8008988:	4654      	mov	r4, sl
 800898a:	2205      	movs	r2, #5
 800898c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008990:	484e      	ldr	r0, [pc, #312]	@ (8008acc <_svfiprintf_r+0x1e4>)
 8008992:	f7f7 fc25 	bl	80001e0 <memchr>
 8008996:	9a04      	ldr	r2, [sp, #16]
 8008998:	b9d8      	cbnz	r0, 80089d2 <_svfiprintf_r+0xea>
 800899a:	06d0      	lsls	r0, r2, #27
 800899c:	bf44      	itt	mi
 800899e:	2320      	movmi	r3, #32
 80089a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089a4:	0711      	lsls	r1, r2, #28
 80089a6:	bf44      	itt	mi
 80089a8:	232b      	movmi	r3, #43	@ 0x2b
 80089aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ae:	f89a 3000 	ldrb.w	r3, [sl]
 80089b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b4:	d015      	beq.n	80089e2 <_svfiprintf_r+0xfa>
 80089b6:	9a07      	ldr	r2, [sp, #28]
 80089b8:	4654      	mov	r4, sl
 80089ba:	2000      	movs	r0, #0
 80089bc:	f04f 0c0a 	mov.w	ip, #10
 80089c0:	4621      	mov	r1, r4
 80089c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089c6:	3b30      	subs	r3, #48	@ 0x30
 80089c8:	2b09      	cmp	r3, #9
 80089ca:	d94b      	bls.n	8008a64 <_svfiprintf_r+0x17c>
 80089cc:	b1b0      	cbz	r0, 80089fc <_svfiprintf_r+0x114>
 80089ce:	9207      	str	r2, [sp, #28]
 80089d0:	e014      	b.n	80089fc <_svfiprintf_r+0x114>
 80089d2:	eba0 0308 	sub.w	r3, r0, r8
 80089d6:	fa09 f303 	lsl.w	r3, r9, r3
 80089da:	4313      	orrs	r3, r2
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	46a2      	mov	sl, r4
 80089e0:	e7d2      	b.n	8008988 <_svfiprintf_r+0xa0>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	1d19      	adds	r1, r3, #4
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	9103      	str	r1, [sp, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bfbb      	ittet	lt
 80089ee:	425b      	neglt	r3, r3
 80089f0:	f042 0202 	orrlt.w	r2, r2, #2
 80089f4:	9307      	strge	r3, [sp, #28]
 80089f6:	9307      	strlt	r3, [sp, #28]
 80089f8:	bfb8      	it	lt
 80089fa:	9204      	strlt	r2, [sp, #16]
 80089fc:	7823      	ldrb	r3, [r4, #0]
 80089fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a00:	d10a      	bne.n	8008a18 <_svfiprintf_r+0x130>
 8008a02:	7863      	ldrb	r3, [r4, #1]
 8008a04:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a06:	d132      	bne.n	8008a6e <_svfiprintf_r+0x186>
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	9203      	str	r2, [sp, #12]
 8008a10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a14:	3402      	adds	r4, #2
 8008a16:	9305      	str	r3, [sp, #20]
 8008a18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008adc <_svfiprintf_r+0x1f4>
 8008a1c:	7821      	ldrb	r1, [r4, #0]
 8008a1e:	2203      	movs	r2, #3
 8008a20:	4650      	mov	r0, sl
 8008a22:	f7f7 fbdd 	bl	80001e0 <memchr>
 8008a26:	b138      	cbz	r0, 8008a38 <_svfiprintf_r+0x150>
 8008a28:	9b04      	ldr	r3, [sp, #16]
 8008a2a:	eba0 000a 	sub.w	r0, r0, sl
 8008a2e:	2240      	movs	r2, #64	@ 0x40
 8008a30:	4082      	lsls	r2, r0
 8008a32:	4313      	orrs	r3, r2
 8008a34:	3401      	adds	r4, #1
 8008a36:	9304      	str	r3, [sp, #16]
 8008a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3c:	4824      	ldr	r0, [pc, #144]	@ (8008ad0 <_svfiprintf_r+0x1e8>)
 8008a3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a42:	2206      	movs	r2, #6
 8008a44:	f7f7 fbcc 	bl	80001e0 <memchr>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d036      	beq.n	8008aba <_svfiprintf_r+0x1d2>
 8008a4c:	4b21      	ldr	r3, [pc, #132]	@ (8008ad4 <_svfiprintf_r+0x1ec>)
 8008a4e:	bb1b      	cbnz	r3, 8008a98 <_svfiprintf_r+0x1b0>
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	3307      	adds	r3, #7
 8008a54:	f023 0307 	bic.w	r3, r3, #7
 8008a58:	3308      	adds	r3, #8
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a5e:	4433      	add	r3, r6
 8008a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a62:	e76a      	b.n	800893a <_svfiprintf_r+0x52>
 8008a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a68:	460c      	mov	r4, r1
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	e7a8      	b.n	80089c0 <_svfiprintf_r+0xd8>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	3401      	adds	r4, #1
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	4619      	mov	r1, r3
 8008a76:	f04f 0c0a 	mov.w	ip, #10
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a80:	3a30      	subs	r2, #48	@ 0x30
 8008a82:	2a09      	cmp	r2, #9
 8008a84:	d903      	bls.n	8008a8e <_svfiprintf_r+0x1a6>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0c6      	beq.n	8008a18 <_svfiprintf_r+0x130>
 8008a8a:	9105      	str	r1, [sp, #20]
 8008a8c:	e7c4      	b.n	8008a18 <_svfiprintf_r+0x130>
 8008a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a92:	4604      	mov	r4, r0
 8008a94:	2301      	movs	r3, #1
 8008a96:	e7f0      	b.n	8008a7a <_svfiprintf_r+0x192>
 8008a98:	ab03      	add	r3, sp, #12
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <_svfiprintf_r+0x1f0>)
 8008aa0:	a904      	add	r1, sp, #16
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f3af 8000 	nop.w
 8008aa8:	1c42      	adds	r2, r0, #1
 8008aaa:	4606      	mov	r6, r0
 8008aac:	d1d6      	bne.n	8008a5c <_svfiprintf_r+0x174>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	065b      	lsls	r3, r3, #25
 8008ab2:	f53f af2d 	bmi.w	8008910 <_svfiprintf_r+0x28>
 8008ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ab8:	e72c      	b.n	8008914 <_svfiprintf_r+0x2c>
 8008aba:	ab03      	add	r3, sp, #12
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	462a      	mov	r2, r5
 8008ac0:	4b05      	ldr	r3, [pc, #20]	@ (8008ad8 <_svfiprintf_r+0x1f0>)
 8008ac2:	a904      	add	r1, sp, #16
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f000 f879 	bl	8008bbc <_printf_i>
 8008aca:	e7ed      	b.n	8008aa8 <_svfiprintf_r+0x1c0>
 8008acc:	08012c92 	.word	0x08012c92
 8008ad0:	08012c9c 	.word	0x08012c9c
 8008ad4:	00000000 	.word	0x00000000
 8008ad8:	08008831 	.word	0x08008831
 8008adc:	08012c98 	.word	0x08012c98

08008ae0 <_printf_common>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	4616      	mov	r6, r2
 8008ae6:	4698      	mov	r8, r3
 8008ae8:	688a      	ldr	r2, [r1, #8]
 8008aea:	690b      	ldr	r3, [r1, #16]
 8008aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	bfb8      	it	lt
 8008af4:	4613      	movlt	r3, r2
 8008af6:	6033      	str	r3, [r6, #0]
 8008af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008afc:	4607      	mov	r7, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	b10a      	cbz	r2, 8008b06 <_printf_common+0x26>
 8008b02:	3301      	adds	r3, #1
 8008b04:	6033      	str	r3, [r6, #0]
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	0699      	lsls	r1, r3, #26
 8008b0a:	bf42      	ittt	mi
 8008b0c:	6833      	ldrmi	r3, [r6, #0]
 8008b0e:	3302      	addmi	r3, #2
 8008b10:	6033      	strmi	r3, [r6, #0]
 8008b12:	6825      	ldr	r5, [r4, #0]
 8008b14:	f015 0506 	ands.w	r5, r5, #6
 8008b18:	d106      	bne.n	8008b28 <_printf_common+0x48>
 8008b1a:	f104 0a19 	add.w	sl, r4, #25
 8008b1e:	68e3      	ldr	r3, [r4, #12]
 8008b20:	6832      	ldr	r2, [r6, #0]
 8008b22:	1a9b      	subs	r3, r3, r2
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dc26      	bgt.n	8008b76 <_printf_common+0x96>
 8008b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b2c:	6822      	ldr	r2, [r4, #0]
 8008b2e:	3b00      	subs	r3, #0
 8008b30:	bf18      	it	ne
 8008b32:	2301      	movne	r3, #1
 8008b34:	0692      	lsls	r2, r2, #26
 8008b36:	d42b      	bmi.n	8008b90 <_printf_common+0xb0>
 8008b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b3c:	4641      	mov	r1, r8
 8008b3e:	4638      	mov	r0, r7
 8008b40:	47c8      	blx	r9
 8008b42:	3001      	adds	r0, #1
 8008b44:	d01e      	beq.n	8008b84 <_printf_common+0xa4>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	6922      	ldr	r2, [r4, #16]
 8008b4a:	f003 0306 	and.w	r3, r3, #6
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	bf02      	ittt	eq
 8008b52:	68e5      	ldreq	r5, [r4, #12]
 8008b54:	6833      	ldreq	r3, [r6, #0]
 8008b56:	1aed      	subeq	r5, r5, r3
 8008b58:	68a3      	ldr	r3, [r4, #8]
 8008b5a:	bf0c      	ite	eq
 8008b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b60:	2500      	movne	r5, #0
 8008b62:	4293      	cmp	r3, r2
 8008b64:	bfc4      	itt	gt
 8008b66:	1a9b      	subgt	r3, r3, r2
 8008b68:	18ed      	addgt	r5, r5, r3
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	341a      	adds	r4, #26
 8008b6e:	42b5      	cmp	r5, r6
 8008b70:	d11a      	bne.n	8008ba8 <_printf_common+0xc8>
 8008b72:	2000      	movs	r0, #0
 8008b74:	e008      	b.n	8008b88 <_printf_common+0xa8>
 8008b76:	2301      	movs	r3, #1
 8008b78:	4652      	mov	r2, sl
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	47c8      	blx	r9
 8008b80:	3001      	adds	r0, #1
 8008b82:	d103      	bne.n	8008b8c <_printf_common+0xac>
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	e7c6      	b.n	8008b1e <_printf_common+0x3e>
 8008b90:	18e1      	adds	r1, r4, r3
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	2030      	movs	r0, #48	@ 0x30
 8008b96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b9a:	4422      	add	r2, r4
 8008b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	e7c7      	b.n	8008b38 <_printf_common+0x58>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4622      	mov	r2, r4
 8008bac:	4641      	mov	r1, r8
 8008bae:	4638      	mov	r0, r7
 8008bb0:	47c8      	blx	r9
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d0e6      	beq.n	8008b84 <_printf_common+0xa4>
 8008bb6:	3601      	adds	r6, #1
 8008bb8:	e7d9      	b.n	8008b6e <_printf_common+0x8e>
	...

08008bbc <_printf_i>:
 8008bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc0:	7e0f      	ldrb	r7, [r1, #24]
 8008bc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bc4:	2f78      	cmp	r7, #120	@ 0x78
 8008bc6:	4691      	mov	r9, r2
 8008bc8:	4680      	mov	r8, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	469a      	mov	sl, r3
 8008bce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bd2:	d807      	bhi.n	8008be4 <_printf_i+0x28>
 8008bd4:	2f62      	cmp	r7, #98	@ 0x62
 8008bd6:	d80a      	bhi.n	8008bee <_printf_i+0x32>
 8008bd8:	2f00      	cmp	r7, #0
 8008bda:	f000 80d2 	beq.w	8008d82 <_printf_i+0x1c6>
 8008bde:	2f58      	cmp	r7, #88	@ 0x58
 8008be0:	f000 80b9 	beq.w	8008d56 <_printf_i+0x19a>
 8008be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008be8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bec:	e03a      	b.n	8008c64 <_printf_i+0xa8>
 8008bee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bf2:	2b15      	cmp	r3, #21
 8008bf4:	d8f6      	bhi.n	8008be4 <_printf_i+0x28>
 8008bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8008bfc <_printf_i+0x40>)
 8008bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bfc:	08008c55 	.word	0x08008c55
 8008c00:	08008c69 	.word	0x08008c69
 8008c04:	08008be5 	.word	0x08008be5
 8008c08:	08008be5 	.word	0x08008be5
 8008c0c:	08008be5 	.word	0x08008be5
 8008c10:	08008be5 	.word	0x08008be5
 8008c14:	08008c69 	.word	0x08008c69
 8008c18:	08008be5 	.word	0x08008be5
 8008c1c:	08008be5 	.word	0x08008be5
 8008c20:	08008be5 	.word	0x08008be5
 8008c24:	08008be5 	.word	0x08008be5
 8008c28:	08008d69 	.word	0x08008d69
 8008c2c:	08008c93 	.word	0x08008c93
 8008c30:	08008d23 	.word	0x08008d23
 8008c34:	08008be5 	.word	0x08008be5
 8008c38:	08008be5 	.word	0x08008be5
 8008c3c:	08008d8b 	.word	0x08008d8b
 8008c40:	08008be5 	.word	0x08008be5
 8008c44:	08008c93 	.word	0x08008c93
 8008c48:	08008be5 	.word	0x08008be5
 8008c4c:	08008be5 	.word	0x08008be5
 8008c50:	08008d2b 	.word	0x08008d2b
 8008c54:	6833      	ldr	r3, [r6, #0]
 8008c56:	1d1a      	adds	r2, r3, #4
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6032      	str	r2, [r6, #0]
 8008c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c64:	2301      	movs	r3, #1
 8008c66:	e09d      	b.n	8008da4 <_printf_i+0x1e8>
 8008c68:	6833      	ldr	r3, [r6, #0]
 8008c6a:	6820      	ldr	r0, [r4, #0]
 8008c6c:	1d19      	adds	r1, r3, #4
 8008c6e:	6031      	str	r1, [r6, #0]
 8008c70:	0606      	lsls	r6, r0, #24
 8008c72:	d501      	bpl.n	8008c78 <_printf_i+0xbc>
 8008c74:	681d      	ldr	r5, [r3, #0]
 8008c76:	e003      	b.n	8008c80 <_printf_i+0xc4>
 8008c78:	0645      	lsls	r5, r0, #25
 8008c7a:	d5fb      	bpl.n	8008c74 <_printf_i+0xb8>
 8008c7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c80:	2d00      	cmp	r5, #0
 8008c82:	da03      	bge.n	8008c8c <_printf_i+0xd0>
 8008c84:	232d      	movs	r3, #45	@ 0x2d
 8008c86:	426d      	negs	r5, r5
 8008c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c8c:	4859      	ldr	r0, [pc, #356]	@ (8008df4 <_printf_i+0x238>)
 8008c8e:	230a      	movs	r3, #10
 8008c90:	e011      	b.n	8008cb6 <_printf_i+0xfa>
 8008c92:	6821      	ldr	r1, [r4, #0]
 8008c94:	6833      	ldr	r3, [r6, #0]
 8008c96:	0608      	lsls	r0, r1, #24
 8008c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c9c:	d402      	bmi.n	8008ca4 <_printf_i+0xe8>
 8008c9e:	0649      	lsls	r1, r1, #25
 8008ca0:	bf48      	it	mi
 8008ca2:	b2ad      	uxthmi	r5, r5
 8008ca4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ca6:	4853      	ldr	r0, [pc, #332]	@ (8008df4 <_printf_i+0x238>)
 8008ca8:	6033      	str	r3, [r6, #0]
 8008caa:	bf14      	ite	ne
 8008cac:	230a      	movne	r3, #10
 8008cae:	2308      	moveq	r3, #8
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cb6:	6866      	ldr	r6, [r4, #4]
 8008cb8:	60a6      	str	r6, [r4, #8]
 8008cba:	2e00      	cmp	r6, #0
 8008cbc:	bfa2      	ittt	ge
 8008cbe:	6821      	ldrge	r1, [r4, #0]
 8008cc0:	f021 0104 	bicge.w	r1, r1, #4
 8008cc4:	6021      	strge	r1, [r4, #0]
 8008cc6:	b90d      	cbnz	r5, 8008ccc <_printf_i+0x110>
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	d04b      	beq.n	8008d64 <_printf_i+0x1a8>
 8008ccc:	4616      	mov	r6, r2
 8008cce:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cd2:	fb03 5711 	mls	r7, r3, r1, r5
 8008cd6:	5dc7      	ldrb	r7, [r0, r7]
 8008cd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cdc:	462f      	mov	r7, r5
 8008cde:	42bb      	cmp	r3, r7
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	d9f4      	bls.n	8008cce <_printf_i+0x112>
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d10b      	bne.n	8008d00 <_printf_i+0x144>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07df      	lsls	r7, r3, #31
 8008cec:	d508      	bpl.n	8008d00 <_printf_i+0x144>
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	6861      	ldr	r1, [r4, #4]
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	bfde      	ittt	le
 8008cf6:	2330      	movle	r3, #48	@ 0x30
 8008cf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d00:	1b92      	subs	r2, r2, r6
 8008d02:	6122      	str	r2, [r4, #16]
 8008d04:	f8cd a000 	str.w	sl, [sp]
 8008d08:	464b      	mov	r3, r9
 8008d0a:	aa03      	add	r2, sp, #12
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4640      	mov	r0, r8
 8008d10:	f7ff fee6 	bl	8008ae0 <_printf_common>
 8008d14:	3001      	adds	r0, #1
 8008d16:	d14a      	bne.n	8008dae <_printf_i+0x1f2>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	b004      	add	sp, #16
 8008d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f043 0320 	orr.w	r3, r3, #32
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	4833      	ldr	r0, [pc, #204]	@ (8008df8 <_printf_i+0x23c>)
 8008d2c:	2778      	movs	r7, #120	@ 0x78
 8008d2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	6831      	ldr	r1, [r6, #0]
 8008d36:	061f      	lsls	r7, r3, #24
 8008d38:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d3c:	d402      	bmi.n	8008d44 <_printf_i+0x188>
 8008d3e:	065f      	lsls	r7, r3, #25
 8008d40:	bf48      	it	mi
 8008d42:	b2ad      	uxthmi	r5, r5
 8008d44:	6031      	str	r1, [r6, #0]
 8008d46:	07d9      	lsls	r1, r3, #31
 8008d48:	bf44      	itt	mi
 8008d4a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d4e:	6023      	strmi	r3, [r4, #0]
 8008d50:	b11d      	cbz	r5, 8008d5a <_printf_i+0x19e>
 8008d52:	2310      	movs	r3, #16
 8008d54:	e7ac      	b.n	8008cb0 <_printf_i+0xf4>
 8008d56:	4827      	ldr	r0, [pc, #156]	@ (8008df4 <_printf_i+0x238>)
 8008d58:	e7e9      	b.n	8008d2e <_printf_i+0x172>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	f023 0320 	bic.w	r3, r3, #32
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	e7f6      	b.n	8008d52 <_printf_i+0x196>
 8008d64:	4616      	mov	r6, r2
 8008d66:	e7bd      	b.n	8008ce4 <_printf_i+0x128>
 8008d68:	6833      	ldr	r3, [r6, #0]
 8008d6a:	6825      	ldr	r5, [r4, #0]
 8008d6c:	6961      	ldr	r1, [r4, #20]
 8008d6e:	1d18      	adds	r0, r3, #4
 8008d70:	6030      	str	r0, [r6, #0]
 8008d72:	062e      	lsls	r6, r5, #24
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	d501      	bpl.n	8008d7c <_printf_i+0x1c0>
 8008d78:	6019      	str	r1, [r3, #0]
 8008d7a:	e002      	b.n	8008d82 <_printf_i+0x1c6>
 8008d7c:	0668      	lsls	r0, r5, #25
 8008d7e:	d5fb      	bpl.n	8008d78 <_printf_i+0x1bc>
 8008d80:	8019      	strh	r1, [r3, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	6123      	str	r3, [r4, #16]
 8008d86:	4616      	mov	r6, r2
 8008d88:	e7bc      	b.n	8008d04 <_printf_i+0x148>
 8008d8a:	6833      	ldr	r3, [r6, #0]
 8008d8c:	1d1a      	adds	r2, r3, #4
 8008d8e:	6032      	str	r2, [r6, #0]
 8008d90:	681e      	ldr	r6, [r3, #0]
 8008d92:	6862      	ldr	r2, [r4, #4]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7f7 fa22 	bl	80001e0 <memchr>
 8008d9c:	b108      	cbz	r0, 8008da2 <_printf_i+0x1e6>
 8008d9e:	1b80      	subs	r0, r0, r6
 8008da0:	6060      	str	r0, [r4, #4]
 8008da2:	6863      	ldr	r3, [r4, #4]
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	2300      	movs	r3, #0
 8008da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dac:	e7aa      	b.n	8008d04 <_printf_i+0x148>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	4632      	mov	r2, r6
 8008db2:	4649      	mov	r1, r9
 8008db4:	4640      	mov	r0, r8
 8008db6:	47d0      	blx	sl
 8008db8:	3001      	adds	r0, #1
 8008dba:	d0ad      	beq.n	8008d18 <_printf_i+0x15c>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	079b      	lsls	r3, r3, #30
 8008dc0:	d413      	bmi.n	8008dea <_printf_i+0x22e>
 8008dc2:	68e0      	ldr	r0, [r4, #12]
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	4298      	cmp	r0, r3
 8008dc8:	bfb8      	it	lt
 8008dca:	4618      	movlt	r0, r3
 8008dcc:	e7a6      	b.n	8008d1c <_printf_i+0x160>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	47d0      	blx	sl
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d09d      	beq.n	8008d18 <_printf_i+0x15c>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	9903      	ldr	r1, [sp, #12]
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dcf2      	bgt.n	8008dce <_printf_i+0x212>
 8008de8:	e7eb      	b.n	8008dc2 <_printf_i+0x206>
 8008dea:	2500      	movs	r5, #0
 8008dec:	f104 0619 	add.w	r6, r4, #25
 8008df0:	e7f5      	b.n	8008dde <_printf_i+0x222>
 8008df2:	bf00      	nop
 8008df4:	08012ca3 	.word	0x08012ca3
 8008df8:	08012cb4 	.word	0x08012cb4

08008dfc <__sflush_r>:
 8008dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	0716      	lsls	r6, r2, #28
 8008e06:	4605      	mov	r5, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	d454      	bmi.n	8008eb6 <__sflush_r+0xba>
 8008e0c:	684b      	ldr	r3, [r1, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dc02      	bgt.n	8008e18 <__sflush_r+0x1c>
 8008e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dd48      	ble.n	8008eaa <__sflush_r+0xae>
 8008e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e1a:	2e00      	cmp	r6, #0
 8008e1c:	d045      	beq.n	8008eaa <__sflush_r+0xae>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e24:	682f      	ldr	r7, [r5, #0]
 8008e26:	6a21      	ldr	r1, [r4, #32]
 8008e28:	602b      	str	r3, [r5, #0]
 8008e2a:	d030      	beq.n	8008e8e <__sflush_r+0x92>
 8008e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	0759      	lsls	r1, r3, #29
 8008e32:	d505      	bpl.n	8008e40 <__sflush_r+0x44>
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e3a:	b10b      	cbz	r3, 8008e40 <__sflush_r+0x44>
 8008e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	2300      	movs	r3, #0
 8008e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e44:	6a21      	ldr	r1, [r4, #32]
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b0      	blx	r6
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	d106      	bne.n	8008e5e <__sflush_r+0x62>
 8008e50:	6829      	ldr	r1, [r5, #0]
 8008e52:	291d      	cmp	r1, #29
 8008e54:	d82b      	bhi.n	8008eae <__sflush_r+0xb2>
 8008e56:	4a2a      	ldr	r2, [pc, #168]	@ (8008f00 <__sflush_r+0x104>)
 8008e58:	410a      	asrs	r2, r1
 8008e5a:	07d6      	lsls	r6, r2, #31
 8008e5c:	d427      	bmi.n	8008eae <__sflush_r+0xb2>
 8008e5e:	2200      	movs	r2, #0
 8008e60:	6062      	str	r2, [r4, #4]
 8008e62:	04d9      	lsls	r1, r3, #19
 8008e64:	6922      	ldr	r2, [r4, #16]
 8008e66:	6022      	str	r2, [r4, #0]
 8008e68:	d504      	bpl.n	8008e74 <__sflush_r+0x78>
 8008e6a:	1c42      	adds	r2, r0, #1
 8008e6c:	d101      	bne.n	8008e72 <__sflush_r+0x76>
 8008e6e:	682b      	ldr	r3, [r5, #0]
 8008e70:	b903      	cbnz	r3, 8008e74 <__sflush_r+0x78>
 8008e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e76:	602f      	str	r7, [r5, #0]
 8008e78:	b1b9      	cbz	r1, 8008eaa <__sflush_r+0xae>
 8008e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	d002      	beq.n	8008e88 <__sflush_r+0x8c>
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7ff fc8a 	bl	800879c <_free_r>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e8c:	e00d      	b.n	8008eaa <__sflush_r+0xae>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4628      	mov	r0, r5
 8008e92:	47b0      	blx	r6
 8008e94:	4602      	mov	r2, r0
 8008e96:	1c50      	adds	r0, r2, #1
 8008e98:	d1c9      	bne.n	8008e2e <__sflush_r+0x32>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0c6      	beq.n	8008e2e <__sflush_r+0x32>
 8008ea0:	2b1d      	cmp	r3, #29
 8008ea2:	d001      	beq.n	8008ea8 <__sflush_r+0xac>
 8008ea4:	2b16      	cmp	r3, #22
 8008ea6:	d11e      	bne.n	8008ee6 <__sflush_r+0xea>
 8008ea8:	602f      	str	r7, [r5, #0]
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e022      	b.n	8008ef4 <__sflush_r+0xf8>
 8008eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eb2:	b21b      	sxth	r3, r3
 8008eb4:	e01b      	b.n	8008eee <__sflush_r+0xf2>
 8008eb6:	690f      	ldr	r7, [r1, #16]
 8008eb8:	2f00      	cmp	r7, #0
 8008eba:	d0f6      	beq.n	8008eaa <__sflush_r+0xae>
 8008ebc:	0793      	lsls	r3, r2, #30
 8008ebe:	680e      	ldr	r6, [r1, #0]
 8008ec0:	bf08      	it	eq
 8008ec2:	694b      	ldreq	r3, [r1, #20]
 8008ec4:	600f      	str	r7, [r1, #0]
 8008ec6:	bf18      	it	ne
 8008ec8:	2300      	movne	r3, #0
 8008eca:	eba6 0807 	sub.w	r8, r6, r7
 8008ece:	608b      	str	r3, [r1, #8]
 8008ed0:	f1b8 0f00 	cmp.w	r8, #0
 8008ed4:	dde9      	ble.n	8008eaa <__sflush_r+0xae>
 8008ed6:	6a21      	ldr	r1, [r4, #32]
 8008ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008eda:	4643      	mov	r3, r8
 8008edc:	463a      	mov	r2, r7
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b0      	blx	r6
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	dc08      	bgt.n	8008ef8 <__sflush_r+0xfc>
 8008ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eee:	81a3      	strh	r3, [r4, #12]
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ef8:	4407      	add	r7, r0
 8008efa:	eba8 0800 	sub.w	r8, r8, r0
 8008efe:	e7e7      	b.n	8008ed0 <__sflush_r+0xd4>
 8008f00:	dfbffffe 	.word	0xdfbffffe

08008f04 <_fflush_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	690b      	ldr	r3, [r1, #16]
 8008f08:	4605      	mov	r5, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b913      	cbnz	r3, 8008f14 <_fflush_r+0x10>
 8008f0e:	2500      	movs	r5, #0
 8008f10:	4628      	mov	r0, r5
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	b118      	cbz	r0, 8008f1e <_fflush_r+0x1a>
 8008f16:	6a03      	ldr	r3, [r0, #32]
 8008f18:	b90b      	cbnz	r3, 8008f1e <_fflush_r+0x1a>
 8008f1a:	f7ff fa21 	bl	8008360 <__sinit>
 8008f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f3      	beq.n	8008f0e <_fflush_r+0xa>
 8008f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f28:	07d0      	lsls	r0, r2, #31
 8008f2a:	d404      	bmi.n	8008f36 <_fflush_r+0x32>
 8008f2c:	0599      	lsls	r1, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_fflush_r+0x32>
 8008f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f32:	f7ff fc04 	bl	800873e <__retarget_lock_acquire_recursive>
 8008f36:	4628      	mov	r0, r5
 8008f38:	4621      	mov	r1, r4
 8008f3a:	f7ff ff5f 	bl	8008dfc <__sflush_r>
 8008f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f40:	07da      	lsls	r2, r3, #31
 8008f42:	4605      	mov	r5, r0
 8008f44:	d4e4      	bmi.n	8008f10 <_fflush_r+0xc>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	059b      	lsls	r3, r3, #22
 8008f4a:	d4e1      	bmi.n	8008f10 <_fflush_r+0xc>
 8008f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f4e:	f7ff fbf7 	bl	8008740 <__retarget_lock_release_recursive>
 8008f52:	e7dd      	b.n	8008f10 <_fflush_r+0xc>

08008f54 <fiprintf>:
 8008f54:	b40e      	push	{r1, r2, r3}
 8008f56:	b503      	push	{r0, r1, lr}
 8008f58:	4601      	mov	r1, r0
 8008f5a:	ab03      	add	r3, sp, #12
 8008f5c:	4805      	ldr	r0, [pc, #20]	@ (8008f74 <fiprintf+0x20>)
 8008f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f62:	6800      	ldr	r0, [r0, #0]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	f000 f87f 	bl	8009068 <_vfiprintf_r>
 8008f6a:	b002      	add	sp, #8
 8008f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f70:	b003      	add	sp, #12
 8008f72:	4770      	bx	lr
 8008f74:	20000220 	.word	0x20000220

08008f78 <memmove>:
 8008f78:	4288      	cmp	r0, r1
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	eb01 0402 	add.w	r4, r1, r2
 8008f80:	d902      	bls.n	8008f88 <memmove+0x10>
 8008f82:	4284      	cmp	r4, r0
 8008f84:	4623      	mov	r3, r4
 8008f86:	d807      	bhi.n	8008f98 <memmove+0x20>
 8008f88:	1e43      	subs	r3, r0, #1
 8008f8a:	42a1      	cmp	r1, r4
 8008f8c:	d008      	beq.n	8008fa0 <memmove+0x28>
 8008f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f96:	e7f8      	b.n	8008f8a <memmove+0x12>
 8008f98:	4402      	add	r2, r0
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	428a      	cmp	r2, r1
 8008f9e:	d100      	bne.n	8008fa2 <memmove+0x2a>
 8008fa0:	bd10      	pop	{r4, pc}
 8008fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008faa:	e7f7      	b.n	8008f9c <memmove+0x24>

08008fac <abort>:
 8008fac:	b508      	push	{r3, lr}
 8008fae:	2006      	movs	r0, #6
 8008fb0:	f000 fa2e 	bl	8009410 <raise>
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	f7f9 f825 	bl	8002004 <_exit>

08008fba <_realloc_r>:
 8008fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	b921      	cbnz	r1, 8008fd0 <_realloc_r+0x16>
 8008fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	4611      	mov	r1, r2
 8008fcc:	f7fe bfb4 	b.w	8007f38 <_malloc_r>
 8008fd0:	b92a      	cbnz	r2, 8008fde <_realloc_r+0x24>
 8008fd2:	f7ff fbe3 	bl	800879c <_free_r>
 8008fd6:	2400      	movs	r4, #0
 8008fd8:	4620      	mov	r0, r4
 8008fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fde:	f000 fa33 	bl	8009448 <_malloc_usable_size_r>
 8008fe2:	4285      	cmp	r5, r0
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	d802      	bhi.n	8008fee <_realloc_r+0x34>
 8008fe8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fec:	d8f4      	bhi.n	8008fd8 <_realloc_r+0x1e>
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	f7fe ffa1 	bl	8007f38 <_malloc_r>
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d0ec      	beq.n	8008fd6 <_realloc_r+0x1c>
 8008ffc:	42b5      	cmp	r5, r6
 8008ffe:	462a      	mov	r2, r5
 8009000:	4621      	mov	r1, r4
 8009002:	bf28      	it	cs
 8009004:	4632      	movcs	r2, r6
 8009006:	f7ff fb9c 	bl	8008742 <memcpy>
 800900a:	4621      	mov	r1, r4
 800900c:	4640      	mov	r0, r8
 800900e:	f7ff fbc5 	bl	800879c <_free_r>
 8009012:	463c      	mov	r4, r7
 8009014:	e7e0      	b.n	8008fd8 <_realloc_r+0x1e>

08009016 <__sfputc_r>:
 8009016:	6893      	ldr	r3, [r2, #8]
 8009018:	3b01      	subs	r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	b410      	push	{r4}
 800901e:	6093      	str	r3, [r2, #8]
 8009020:	da08      	bge.n	8009034 <__sfputc_r+0x1e>
 8009022:	6994      	ldr	r4, [r2, #24]
 8009024:	42a3      	cmp	r3, r4
 8009026:	db01      	blt.n	800902c <__sfputc_r+0x16>
 8009028:	290a      	cmp	r1, #10
 800902a:	d103      	bne.n	8009034 <__sfputc_r+0x1e>
 800902c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009030:	f000 b932 	b.w	8009298 <__swbuf_r>
 8009034:	6813      	ldr	r3, [r2, #0]
 8009036:	1c58      	adds	r0, r3, #1
 8009038:	6010      	str	r0, [r2, #0]
 800903a:	7019      	strb	r1, [r3, #0]
 800903c:	4608      	mov	r0, r1
 800903e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009042:	4770      	bx	lr

08009044 <__sfputs_r>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	4606      	mov	r6, r0
 8009048:	460f      	mov	r7, r1
 800904a:	4614      	mov	r4, r2
 800904c:	18d5      	adds	r5, r2, r3
 800904e:	42ac      	cmp	r4, r5
 8009050:	d101      	bne.n	8009056 <__sfputs_r+0x12>
 8009052:	2000      	movs	r0, #0
 8009054:	e007      	b.n	8009066 <__sfputs_r+0x22>
 8009056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905a:	463a      	mov	r2, r7
 800905c:	4630      	mov	r0, r6
 800905e:	f7ff ffda 	bl	8009016 <__sfputc_r>
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	d1f3      	bne.n	800904e <__sfputs_r+0xa>
 8009066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009068 <_vfiprintf_r>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	460d      	mov	r5, r1
 800906e:	b09d      	sub	sp, #116	@ 0x74
 8009070:	4614      	mov	r4, r2
 8009072:	4698      	mov	r8, r3
 8009074:	4606      	mov	r6, r0
 8009076:	b118      	cbz	r0, 8009080 <_vfiprintf_r+0x18>
 8009078:	6a03      	ldr	r3, [r0, #32]
 800907a:	b90b      	cbnz	r3, 8009080 <_vfiprintf_r+0x18>
 800907c:	f7ff f970 	bl	8008360 <__sinit>
 8009080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009082:	07d9      	lsls	r1, r3, #31
 8009084:	d405      	bmi.n	8009092 <_vfiprintf_r+0x2a>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	059a      	lsls	r2, r3, #22
 800908a:	d402      	bmi.n	8009092 <_vfiprintf_r+0x2a>
 800908c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800908e:	f7ff fb56 	bl	800873e <__retarget_lock_acquire_recursive>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	071b      	lsls	r3, r3, #28
 8009096:	d501      	bpl.n	800909c <_vfiprintf_r+0x34>
 8009098:	692b      	ldr	r3, [r5, #16]
 800909a:	b99b      	cbnz	r3, 80090c4 <_vfiprintf_r+0x5c>
 800909c:	4629      	mov	r1, r5
 800909e:	4630      	mov	r0, r6
 80090a0:	f000 f938 	bl	8009314 <__swsetup_r>
 80090a4:	b170      	cbz	r0, 80090c4 <_vfiprintf_r+0x5c>
 80090a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090a8:	07dc      	lsls	r4, r3, #31
 80090aa:	d504      	bpl.n	80090b6 <_vfiprintf_r+0x4e>
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	b01d      	add	sp, #116	@ 0x74
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	0598      	lsls	r0, r3, #22
 80090ba:	d4f7      	bmi.n	80090ac <_vfiprintf_r+0x44>
 80090bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090be:	f7ff fb3f 	bl	8008740 <__retarget_lock_release_recursive>
 80090c2:	e7f3      	b.n	80090ac <_vfiprintf_r+0x44>
 80090c4:	2300      	movs	r3, #0
 80090c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80090c8:	2320      	movs	r3, #32
 80090ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80090d2:	2330      	movs	r3, #48	@ 0x30
 80090d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009284 <_vfiprintf_r+0x21c>
 80090d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090dc:	f04f 0901 	mov.w	r9, #1
 80090e0:	4623      	mov	r3, r4
 80090e2:	469a      	mov	sl, r3
 80090e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090e8:	b10a      	cbz	r2, 80090ee <_vfiprintf_r+0x86>
 80090ea:	2a25      	cmp	r2, #37	@ 0x25
 80090ec:	d1f9      	bne.n	80090e2 <_vfiprintf_r+0x7a>
 80090ee:	ebba 0b04 	subs.w	fp, sl, r4
 80090f2:	d00b      	beq.n	800910c <_vfiprintf_r+0xa4>
 80090f4:	465b      	mov	r3, fp
 80090f6:	4622      	mov	r2, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	4630      	mov	r0, r6
 80090fc:	f7ff ffa2 	bl	8009044 <__sfputs_r>
 8009100:	3001      	adds	r0, #1
 8009102:	f000 80a7 	beq.w	8009254 <_vfiprintf_r+0x1ec>
 8009106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009108:	445a      	add	r2, fp
 800910a:	9209      	str	r2, [sp, #36]	@ 0x24
 800910c:	f89a 3000 	ldrb.w	r3, [sl]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 809f 	beq.w	8009254 <_vfiprintf_r+0x1ec>
 8009116:	2300      	movs	r3, #0
 8009118:	f04f 32ff 	mov.w	r2, #4294967295
 800911c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009120:	f10a 0a01 	add.w	sl, sl, #1
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	9307      	str	r3, [sp, #28]
 8009128:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800912c:	931a      	str	r3, [sp, #104]	@ 0x68
 800912e:	4654      	mov	r4, sl
 8009130:	2205      	movs	r2, #5
 8009132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009136:	4853      	ldr	r0, [pc, #332]	@ (8009284 <_vfiprintf_r+0x21c>)
 8009138:	f7f7 f852 	bl	80001e0 <memchr>
 800913c:	9a04      	ldr	r2, [sp, #16]
 800913e:	b9d8      	cbnz	r0, 8009178 <_vfiprintf_r+0x110>
 8009140:	06d1      	lsls	r1, r2, #27
 8009142:	bf44      	itt	mi
 8009144:	2320      	movmi	r3, #32
 8009146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800914a:	0713      	lsls	r3, r2, #28
 800914c:	bf44      	itt	mi
 800914e:	232b      	movmi	r3, #43	@ 0x2b
 8009150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009154:	f89a 3000 	ldrb.w	r3, [sl]
 8009158:	2b2a      	cmp	r3, #42	@ 0x2a
 800915a:	d015      	beq.n	8009188 <_vfiprintf_r+0x120>
 800915c:	9a07      	ldr	r2, [sp, #28]
 800915e:	4654      	mov	r4, sl
 8009160:	2000      	movs	r0, #0
 8009162:	f04f 0c0a 	mov.w	ip, #10
 8009166:	4621      	mov	r1, r4
 8009168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800916c:	3b30      	subs	r3, #48	@ 0x30
 800916e:	2b09      	cmp	r3, #9
 8009170:	d94b      	bls.n	800920a <_vfiprintf_r+0x1a2>
 8009172:	b1b0      	cbz	r0, 80091a2 <_vfiprintf_r+0x13a>
 8009174:	9207      	str	r2, [sp, #28]
 8009176:	e014      	b.n	80091a2 <_vfiprintf_r+0x13a>
 8009178:	eba0 0308 	sub.w	r3, r0, r8
 800917c:	fa09 f303 	lsl.w	r3, r9, r3
 8009180:	4313      	orrs	r3, r2
 8009182:	9304      	str	r3, [sp, #16]
 8009184:	46a2      	mov	sl, r4
 8009186:	e7d2      	b.n	800912e <_vfiprintf_r+0xc6>
 8009188:	9b03      	ldr	r3, [sp, #12]
 800918a:	1d19      	adds	r1, r3, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	9103      	str	r1, [sp, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	bfbb      	ittet	lt
 8009194:	425b      	neglt	r3, r3
 8009196:	f042 0202 	orrlt.w	r2, r2, #2
 800919a:	9307      	strge	r3, [sp, #28]
 800919c:	9307      	strlt	r3, [sp, #28]
 800919e:	bfb8      	it	lt
 80091a0:	9204      	strlt	r2, [sp, #16]
 80091a2:	7823      	ldrb	r3, [r4, #0]
 80091a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80091a6:	d10a      	bne.n	80091be <_vfiprintf_r+0x156>
 80091a8:	7863      	ldrb	r3, [r4, #1]
 80091aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ac:	d132      	bne.n	8009214 <_vfiprintf_r+0x1ac>
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	1d1a      	adds	r2, r3, #4
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	9203      	str	r2, [sp, #12]
 80091b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091ba:	3402      	adds	r4, #2
 80091bc:	9305      	str	r3, [sp, #20]
 80091be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009294 <_vfiprintf_r+0x22c>
 80091c2:	7821      	ldrb	r1, [r4, #0]
 80091c4:	2203      	movs	r2, #3
 80091c6:	4650      	mov	r0, sl
 80091c8:	f7f7 f80a 	bl	80001e0 <memchr>
 80091cc:	b138      	cbz	r0, 80091de <_vfiprintf_r+0x176>
 80091ce:	9b04      	ldr	r3, [sp, #16]
 80091d0:	eba0 000a 	sub.w	r0, r0, sl
 80091d4:	2240      	movs	r2, #64	@ 0x40
 80091d6:	4082      	lsls	r2, r0
 80091d8:	4313      	orrs	r3, r2
 80091da:	3401      	adds	r4, #1
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e2:	4829      	ldr	r0, [pc, #164]	@ (8009288 <_vfiprintf_r+0x220>)
 80091e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091e8:	2206      	movs	r2, #6
 80091ea:	f7f6 fff9 	bl	80001e0 <memchr>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d03f      	beq.n	8009272 <_vfiprintf_r+0x20a>
 80091f2:	4b26      	ldr	r3, [pc, #152]	@ (800928c <_vfiprintf_r+0x224>)
 80091f4:	bb1b      	cbnz	r3, 800923e <_vfiprintf_r+0x1d6>
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	3307      	adds	r3, #7
 80091fa:	f023 0307 	bic.w	r3, r3, #7
 80091fe:	3308      	adds	r3, #8
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009204:	443b      	add	r3, r7
 8009206:	9309      	str	r3, [sp, #36]	@ 0x24
 8009208:	e76a      	b.n	80090e0 <_vfiprintf_r+0x78>
 800920a:	fb0c 3202 	mla	r2, ip, r2, r3
 800920e:	460c      	mov	r4, r1
 8009210:	2001      	movs	r0, #1
 8009212:	e7a8      	b.n	8009166 <_vfiprintf_r+0xfe>
 8009214:	2300      	movs	r3, #0
 8009216:	3401      	adds	r4, #1
 8009218:	9305      	str	r3, [sp, #20]
 800921a:	4619      	mov	r1, r3
 800921c:	f04f 0c0a 	mov.w	ip, #10
 8009220:	4620      	mov	r0, r4
 8009222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009226:	3a30      	subs	r2, #48	@ 0x30
 8009228:	2a09      	cmp	r2, #9
 800922a:	d903      	bls.n	8009234 <_vfiprintf_r+0x1cc>
 800922c:	2b00      	cmp	r3, #0
 800922e:	d0c6      	beq.n	80091be <_vfiprintf_r+0x156>
 8009230:	9105      	str	r1, [sp, #20]
 8009232:	e7c4      	b.n	80091be <_vfiprintf_r+0x156>
 8009234:	fb0c 2101 	mla	r1, ip, r1, r2
 8009238:	4604      	mov	r4, r0
 800923a:	2301      	movs	r3, #1
 800923c:	e7f0      	b.n	8009220 <_vfiprintf_r+0x1b8>
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	462a      	mov	r2, r5
 8009244:	4b12      	ldr	r3, [pc, #72]	@ (8009290 <_vfiprintf_r+0x228>)
 8009246:	a904      	add	r1, sp, #16
 8009248:	4630      	mov	r0, r6
 800924a:	f3af 8000 	nop.w
 800924e:	4607      	mov	r7, r0
 8009250:	1c78      	adds	r0, r7, #1
 8009252:	d1d6      	bne.n	8009202 <_vfiprintf_r+0x19a>
 8009254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009256:	07d9      	lsls	r1, r3, #31
 8009258:	d405      	bmi.n	8009266 <_vfiprintf_r+0x1fe>
 800925a:	89ab      	ldrh	r3, [r5, #12]
 800925c:	059a      	lsls	r2, r3, #22
 800925e:	d402      	bmi.n	8009266 <_vfiprintf_r+0x1fe>
 8009260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009262:	f7ff fa6d 	bl	8008740 <__retarget_lock_release_recursive>
 8009266:	89ab      	ldrh	r3, [r5, #12]
 8009268:	065b      	lsls	r3, r3, #25
 800926a:	f53f af1f 	bmi.w	80090ac <_vfiprintf_r+0x44>
 800926e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009270:	e71e      	b.n	80090b0 <_vfiprintf_r+0x48>
 8009272:	ab03      	add	r3, sp, #12
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	462a      	mov	r2, r5
 8009278:	4b05      	ldr	r3, [pc, #20]	@ (8009290 <_vfiprintf_r+0x228>)
 800927a:	a904      	add	r1, sp, #16
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff fc9d 	bl	8008bbc <_printf_i>
 8009282:	e7e4      	b.n	800924e <_vfiprintf_r+0x1e6>
 8009284:	08012c92 	.word	0x08012c92
 8009288:	08012c9c 	.word	0x08012c9c
 800928c:	00000000 	.word	0x00000000
 8009290:	08009045 	.word	0x08009045
 8009294:	08012c98 	.word	0x08012c98

08009298 <__swbuf_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	460e      	mov	r6, r1
 800929c:	4614      	mov	r4, r2
 800929e:	4605      	mov	r5, r0
 80092a0:	b118      	cbz	r0, 80092aa <__swbuf_r+0x12>
 80092a2:	6a03      	ldr	r3, [r0, #32]
 80092a4:	b90b      	cbnz	r3, 80092aa <__swbuf_r+0x12>
 80092a6:	f7ff f85b 	bl	8008360 <__sinit>
 80092aa:	69a3      	ldr	r3, [r4, #24]
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	071a      	lsls	r2, r3, #28
 80092b2:	d501      	bpl.n	80092b8 <__swbuf_r+0x20>
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b943      	cbnz	r3, 80092ca <__swbuf_r+0x32>
 80092b8:	4621      	mov	r1, r4
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 f82a 	bl	8009314 <__swsetup_r>
 80092c0:	b118      	cbz	r0, 80092ca <__swbuf_r+0x32>
 80092c2:	f04f 37ff 	mov.w	r7, #4294967295
 80092c6:	4638      	mov	r0, r7
 80092c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	1a98      	subs	r0, r3, r2
 80092d0:	6963      	ldr	r3, [r4, #20]
 80092d2:	b2f6      	uxtb	r6, r6
 80092d4:	4283      	cmp	r3, r0
 80092d6:	4637      	mov	r7, r6
 80092d8:	dc05      	bgt.n	80092e6 <__swbuf_r+0x4e>
 80092da:	4621      	mov	r1, r4
 80092dc:	4628      	mov	r0, r5
 80092de:	f7ff fe11 	bl	8008f04 <_fflush_r>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d1ed      	bne.n	80092c2 <__swbuf_r+0x2a>
 80092e6:	68a3      	ldr	r3, [r4, #8]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	60a3      	str	r3, [r4, #8]
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	6022      	str	r2, [r4, #0]
 80092f2:	701e      	strb	r6, [r3, #0]
 80092f4:	6962      	ldr	r2, [r4, #20]
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d004      	beq.n	8009306 <__swbuf_r+0x6e>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	07db      	lsls	r3, r3, #31
 8009300:	d5e1      	bpl.n	80092c6 <__swbuf_r+0x2e>
 8009302:	2e0a      	cmp	r6, #10
 8009304:	d1df      	bne.n	80092c6 <__swbuf_r+0x2e>
 8009306:	4621      	mov	r1, r4
 8009308:	4628      	mov	r0, r5
 800930a:	f7ff fdfb 	bl	8008f04 <_fflush_r>
 800930e:	2800      	cmp	r0, #0
 8009310:	d0d9      	beq.n	80092c6 <__swbuf_r+0x2e>
 8009312:	e7d6      	b.n	80092c2 <__swbuf_r+0x2a>

08009314 <__swsetup_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4b29      	ldr	r3, [pc, #164]	@ (80093bc <__swsetup_r+0xa8>)
 8009318:	4605      	mov	r5, r0
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	460c      	mov	r4, r1
 800931e:	b118      	cbz	r0, 8009328 <__swsetup_r+0x14>
 8009320:	6a03      	ldr	r3, [r0, #32]
 8009322:	b90b      	cbnz	r3, 8009328 <__swsetup_r+0x14>
 8009324:	f7ff f81c 	bl	8008360 <__sinit>
 8009328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932c:	0719      	lsls	r1, r3, #28
 800932e:	d422      	bmi.n	8009376 <__swsetup_r+0x62>
 8009330:	06da      	lsls	r2, r3, #27
 8009332:	d407      	bmi.n	8009344 <__swsetup_r+0x30>
 8009334:	2209      	movs	r2, #9
 8009336:	602a      	str	r2, [r5, #0]
 8009338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	f04f 30ff 	mov.w	r0, #4294967295
 8009342:	e033      	b.n	80093ac <__swsetup_r+0x98>
 8009344:	0758      	lsls	r0, r3, #29
 8009346:	d512      	bpl.n	800936e <__swsetup_r+0x5a>
 8009348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800934a:	b141      	cbz	r1, 800935e <__swsetup_r+0x4a>
 800934c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009350:	4299      	cmp	r1, r3
 8009352:	d002      	beq.n	800935a <__swsetup_r+0x46>
 8009354:	4628      	mov	r0, r5
 8009356:	f7ff fa21 	bl	800879c <_free_r>
 800935a:	2300      	movs	r3, #0
 800935c:	6363      	str	r3, [r4, #52]	@ 0x34
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	2300      	movs	r3, #0
 8009368:	6063      	str	r3, [r4, #4]
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	b94b      	cbnz	r3, 800938e <__swsetup_r+0x7a>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009384:	d003      	beq.n	800938e <__swsetup_r+0x7a>
 8009386:	4621      	mov	r1, r4
 8009388:	4628      	mov	r0, r5
 800938a:	f000 f88b 	bl	80094a4 <__smakebuf_r>
 800938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009392:	f013 0201 	ands.w	r2, r3, #1
 8009396:	d00a      	beq.n	80093ae <__swsetup_r+0x9a>
 8009398:	2200      	movs	r2, #0
 800939a:	60a2      	str	r2, [r4, #8]
 800939c:	6962      	ldr	r2, [r4, #20]
 800939e:	4252      	negs	r2, r2
 80093a0:	61a2      	str	r2, [r4, #24]
 80093a2:	6922      	ldr	r2, [r4, #16]
 80093a4:	b942      	cbnz	r2, 80093b8 <__swsetup_r+0xa4>
 80093a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093aa:	d1c5      	bne.n	8009338 <__swsetup_r+0x24>
 80093ac:	bd38      	pop	{r3, r4, r5, pc}
 80093ae:	0799      	lsls	r1, r3, #30
 80093b0:	bf58      	it	pl
 80093b2:	6962      	ldrpl	r2, [r4, #20]
 80093b4:	60a2      	str	r2, [r4, #8]
 80093b6:	e7f4      	b.n	80093a2 <__swsetup_r+0x8e>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7f7      	b.n	80093ac <__swsetup_r+0x98>
 80093bc:	20000220 	.word	0x20000220

080093c0 <_raise_r>:
 80093c0:	291f      	cmp	r1, #31
 80093c2:	b538      	push	{r3, r4, r5, lr}
 80093c4:	4605      	mov	r5, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	d904      	bls.n	80093d4 <_raise_r+0x14>
 80093ca:	2316      	movs	r3, #22
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093d6:	b112      	cbz	r2, 80093de <_raise_r+0x1e>
 80093d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093dc:	b94b      	cbnz	r3, 80093f2 <_raise_r+0x32>
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 f830 	bl	8009444 <_getpid_r>
 80093e4:	4622      	mov	r2, r4
 80093e6:	4601      	mov	r1, r0
 80093e8:	4628      	mov	r0, r5
 80093ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093ee:	f000 b817 	b.w	8009420 <_kill_r>
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d00a      	beq.n	800940c <_raise_r+0x4c>
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	d103      	bne.n	8009402 <_raise_r+0x42>
 80093fa:	2316      	movs	r3, #22
 80093fc:	6003      	str	r3, [r0, #0]
 80093fe:	2001      	movs	r0, #1
 8009400:	e7e7      	b.n	80093d2 <_raise_r+0x12>
 8009402:	2100      	movs	r1, #0
 8009404:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009408:	4620      	mov	r0, r4
 800940a:	4798      	blx	r3
 800940c:	2000      	movs	r0, #0
 800940e:	e7e0      	b.n	80093d2 <_raise_r+0x12>

08009410 <raise>:
 8009410:	4b02      	ldr	r3, [pc, #8]	@ (800941c <raise+0xc>)
 8009412:	4601      	mov	r1, r0
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	f7ff bfd3 	b.w	80093c0 <_raise_r>
 800941a:	bf00      	nop
 800941c:	20000220 	.word	0x20000220

08009420 <_kill_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	@ (8009440 <_kill_r+0x20>)
 8009424:	2300      	movs	r3, #0
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	4611      	mov	r1, r2
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f7f8 fdd9 	bl	8001fe4 <_kill>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	d102      	bne.n	800943c <_kill_r+0x1c>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b103      	cbz	r3, 800943c <_kill_r+0x1c>
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	bf00      	nop
 8009440:	2000b0a0 	.word	0x2000b0a0

08009444 <_getpid_r>:
 8009444:	f7f8 bdc6 	b.w	8001fd4 <_getpid>

08009448 <_malloc_usable_size_r>:
 8009448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800944c:	1f18      	subs	r0, r3, #4
 800944e:	2b00      	cmp	r3, #0
 8009450:	bfbc      	itt	lt
 8009452:	580b      	ldrlt	r3, [r1, r0]
 8009454:	18c0      	addlt	r0, r0, r3
 8009456:	4770      	bx	lr

08009458 <__swhatbuf_r>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	460c      	mov	r4, r1
 800945c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009460:	2900      	cmp	r1, #0
 8009462:	b096      	sub	sp, #88	@ 0x58
 8009464:	4615      	mov	r5, r2
 8009466:	461e      	mov	r6, r3
 8009468:	da0d      	bge.n	8009486 <__swhatbuf_r+0x2e>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009470:	f04f 0100 	mov.w	r1, #0
 8009474:	bf14      	ite	ne
 8009476:	2340      	movne	r3, #64	@ 0x40
 8009478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800947c:	2000      	movs	r0, #0
 800947e:	6031      	str	r1, [r6, #0]
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	b016      	add	sp, #88	@ 0x58
 8009484:	bd70      	pop	{r4, r5, r6, pc}
 8009486:	466a      	mov	r2, sp
 8009488:	f000 f848 	bl	800951c <_fstat_r>
 800948c:	2800      	cmp	r0, #0
 800948e:	dbec      	blt.n	800946a <__swhatbuf_r+0x12>
 8009490:	9901      	ldr	r1, [sp, #4]
 8009492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800949a:	4259      	negs	r1, r3
 800949c:	4159      	adcs	r1, r3
 800949e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094a2:	e7eb      	b.n	800947c <__swhatbuf_r+0x24>

080094a4 <__smakebuf_r>:
 80094a4:	898b      	ldrh	r3, [r1, #12]
 80094a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a8:	079d      	lsls	r5, r3, #30
 80094aa:	4606      	mov	r6, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	d507      	bpl.n	80094c0 <__smakebuf_r+0x1c>
 80094b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	2301      	movs	r3, #1
 80094ba:	6163      	str	r3, [r4, #20]
 80094bc:	b003      	add	sp, #12
 80094be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c0:	ab01      	add	r3, sp, #4
 80094c2:	466a      	mov	r2, sp
 80094c4:	f7ff ffc8 	bl	8009458 <__swhatbuf_r>
 80094c8:	9f00      	ldr	r7, [sp, #0]
 80094ca:	4605      	mov	r5, r0
 80094cc:	4639      	mov	r1, r7
 80094ce:	4630      	mov	r0, r6
 80094d0:	f7fe fd32 	bl	8007f38 <_malloc_r>
 80094d4:	b948      	cbnz	r0, 80094ea <__smakebuf_r+0x46>
 80094d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094da:	059a      	lsls	r2, r3, #22
 80094dc:	d4ee      	bmi.n	80094bc <__smakebuf_r+0x18>
 80094de:	f023 0303 	bic.w	r3, r3, #3
 80094e2:	f043 0302 	orr.w	r3, r3, #2
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	e7e2      	b.n	80094b0 <__smakebuf_r+0xc>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	6020      	str	r0, [r4, #0]
 80094ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094fa:	b15b      	cbz	r3, 8009514 <__smakebuf_r+0x70>
 80094fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009500:	4630      	mov	r0, r6
 8009502:	f000 f81d 	bl	8009540 <_isatty_r>
 8009506:	b128      	cbz	r0, 8009514 <__smakebuf_r+0x70>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	f043 0301 	orr.w	r3, r3, #1
 8009512:	81a3      	strh	r3, [r4, #12]
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	431d      	orrs	r5, r3
 8009518:	81a5      	strh	r5, [r4, #12]
 800951a:	e7cf      	b.n	80094bc <__smakebuf_r+0x18>

0800951c <_fstat_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4d07      	ldr	r5, [pc, #28]	@ (800953c <_fstat_r+0x20>)
 8009520:	2300      	movs	r3, #0
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	4611      	mov	r1, r2
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	f7f8 fdbb 	bl	80020a4 <_fstat>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d102      	bne.n	8009538 <_fstat_r+0x1c>
 8009532:	682b      	ldr	r3, [r5, #0]
 8009534:	b103      	cbz	r3, 8009538 <_fstat_r+0x1c>
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	bd38      	pop	{r3, r4, r5, pc}
 800953a:	bf00      	nop
 800953c:	2000b0a0 	.word	0x2000b0a0

08009540 <_isatty_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d06      	ldr	r5, [pc, #24]	@ (800955c <_isatty_r+0x1c>)
 8009544:	2300      	movs	r3, #0
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	602b      	str	r3, [r5, #0]
 800954c:	f7f8 fdba 	bl	80020c4 <_isatty>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_isatty_r+0x1a>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	b103      	cbz	r3, 800955a <_isatty_r+0x1a>
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	2000b0a0 	.word	0x2000b0a0

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr
