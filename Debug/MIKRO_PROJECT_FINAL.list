
MIKRO_PROJECT_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009678  08008bd0  08008bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012248  08012248  00014264  2**0
                  CONTENTS
  4 .ARM          00000008  08012248  08012248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012250  08012250  00014264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012250  08012250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012254  08012254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08012258  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae34  20000264  080124bc  00014264  2**2
                  ALLOC
 10 ._user_heap_stack 00001300  2000b098  080124bc  00015098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f6f  00000000  00000000  00014294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003604  00000000  00000000  00027203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0002a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb8  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289c6  00000000  00000000  0002c338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001655b  00000000  00000000  00054cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec201  00000000  00000000  0006b259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015745a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  001574a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bb8 	.word	0x08008bb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	08008bb8 	.word	0x08008bb8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ringBufferSetup>:
/************************************************************************
* Funkcja: ringBufferSetup()
* (Utworzenie instancji bufora)
************************************************************************/
void ringBufferSetup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	60da      	str	r2, [r3, #12]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <USART_kbhit>:
/************************************************************************
* Funkcja: USART_kbhit()
* (Sprawdza czy w buforze odbiorczym znajdują się dane
* Zwraca 1 jeśli bufor zawiera dane do odczytu)
************************************************************************/
uint8_t USART_kbhit(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(rxRingBuffer.writeIndex == rxRingBuffer.readIndex){
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <USART_kbhit+0x20>)
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <USART_kbhit+0x20>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d101      	bne.n	80005b8 <USART_kbhit+0x14>
		return 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <USART_kbhit+0x16>
	}else{
		return 1;
 80005b8:	2301      	movs	r3, #1
	}
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000280 	.word	0x20000280

080005c8 <USART_getchar>:
* Jeśli bufor pusty = -1
* Jeśli jest dostępny bajt to funkcja zwraca jesgo wartość
* oraz aktualizuje index RX_Busy tak aby wskazywał na kolejny
* bajt do odczytu)
************************************************************************/
int16_t USART_getchar() {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <USART_getchar+0x44>)
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <USART_getchar+0x44>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d00f      	beq.n	80005fa <USART_getchar+0x32>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <USART_getchar+0x44>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <USART_getchar+0x48>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) & rxRingBuffer.mask;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <USART_getchar+0x44>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <USART_getchar+0x44>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4013      	ands	r3, r2
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <USART_getchar+0x44>)
 80005f2:	6053      	str	r3, [r2, #4]
        return tmp;
 80005f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f8:	e001      	b.n	80005fe <USART_getchar+0x36>
    }
    return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000280 	.word	0x20000280
 8000610:	20000aa0 	.word	0x20000aa0

08000614 <USART_sendFrame>:
*    - bufor był pusty (writeIndex == readIndex)
*    - rejestr nadawczy jest gotowy (TXE = 1)
* 6. Aktualizuje wskaźnik zapisu w buforze kołowym
* 7. Włącza przerwania
************************************************************************/
void USART_sendFrame(const uint8_t* data, size_t length) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    int idx = txRingBuffer.writeIndex;
 800061e:	4b32      	ldr	r3, [pc, #200]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	617b      	str	r3, [r7, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop

    __disable_irq();

    // Dodaj początek ramki
    USART_TxBuf[idx] = FRAME_START;
 8000628:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <USART_sendFrame+0xd8>)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	4413      	add	r3, r2
 800062e:	227e      	movs	r2, #126	@ 0x7e
 8000630:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	461a      	mov	r2, r3
 8000638:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <USART_sendFrame+0xd4>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4013      	ands	r3, r2
 800063e:	617b      	str	r3, [r7, #20]

    // Kopiuj dane do bufora nadawczego
    for(size_t i = 0; i < length; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	e012      	b.n	800066c <USART_sendFrame+0x58>
        USART_TxBuf[idx] = data[i];
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <USART_sendFrame+0xd8>)
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
        idx = (idx + 1) & txRingBuffer.mask;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	461a      	mov	r2, r3
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	4013      	ands	r3, r2
 8000664:	617b      	str	r3, [r7, #20]
    for(size_t i = 0; i < length; i++) {
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3e8      	bcc.n	8000646 <USART_sendFrame+0x32>
    }

    // Dodaj koniec ramki
    USART_TxBuf[idx] = FRAME_END;
 8000674:	4a1d      	ldr	r2, [pc, #116]	@ (80006ec <USART_sendFrame+0xd8>)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	2260      	movs	r2, #96	@ 0x60
 800067c:	701a      	strb	r2, [r3, #0]
    idx = (idx + 1) & txRingBuffer.mask;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	461a      	mov	r2, r3
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4013      	ands	r3, r2
 800068a:	617b      	str	r3, [r7, #20]

    // Rozpocznij transmisję jeśli bufor był pusty
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <USART_sendFrame+0xd4>)
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <USART_sendFrame+0xd4>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	d11e      	bne.n	80006d6 <USART_sendFrame+0xc2>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <USART_sendFrame+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    if((txRingBuffer.writeIndex == txRingBuffer.readIndex) &&
 80006a2:	2b80      	cmp	r3, #128	@ 0x80
 80006a4:	d117      	bne.n	80006d6 <USART_sendFrame+0xc2>
        txRingBuffer.writeIndex = idx;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006aa:	6093      	str	r3, [r2, #8]
        uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4a0e      	ldr	r2, [pc, #56]	@ (80006ec <USART_sendFrame+0xd8>)
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	73fb      	strb	r3, [r7, #15]
        txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4013      	ands	r3, r2
 80006c2:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006c4:	6053      	str	r3, [r2, #4]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <USART_sendFrame+0xdc>)
 80006d0:	f004 fee8 	bl	80054a4 <HAL_UART_Transmit_IT>
       (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80006d4:	e002      	b.n	80006dc <USART_sendFrame+0xc8>
    } else {
        txRingBuffer.writeIndex = idx;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <USART_sendFrame+0xd4>)
 80006da:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80006dc:	b662      	cpsie	i
}
 80006de:	bf00      	nop
    }

    __enable_irq();
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000290 	.word	0x20000290
 80006ec:	200002a0 	.word	0x200002a0
 80006f0:	2000aec4 	.word	0x2000aec4

080006f4 <calculateCrc16>:
*      - crc_out[1] = crc & 0xFF (młodszy bajt)
*
* Korzysta z:
*   - crc16_table: Tablica lookup z wstępnie obliczonymi wartościami
************************************************************************/
void calculateCrc16(uint8_t *data, size_t length, char crc_out[2]) {
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF;
 8000700:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000704:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	e019      	b.n	8000740 <calculateCrc16+0x4c>
        uint8_t byte = data[i];
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	4413      	add	r3, r2
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte;
 8000716:	8bfb      	ldrh	r3, [r7, #30]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	4053      	eors	r3, r2
 8000722:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index];
 8000724:	8bfb      	ldrh	r3, [r7, #30]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	490f      	ldr	r1, [pc, #60]	@ (800076c <calculateCrc16+0x78>)
 800072e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4053      	eors	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3301      	adds	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69ba      	ldr	r2, [r7, #24]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3e1      	bcc.n	800070c <calculateCrc16+0x18>
    }
    crc_out[0] = ((crc >> 8) & 0xFF);
 8000748:	8bfb      	ldrh	r3, [r7, #30]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (crc & 0xFF);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	8bfa      	ldrh	r2, [r7, #30]
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	3724      	adds	r7, #36	@ 0x24
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000

08000770 <debugCRCCalculation>:
void debugCRCCalculation(uint8_t *data, size_t length) {
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b0a5      	sub	sp, #148	@ 0x94
 8000774:	af04      	add	r7, sp, #16
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800077a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800077e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    USART_sendFrame((uint8_t*)"CRC Calculation:\r\n", 17);
 8000782:	2111      	movs	r1, #17
 8000784:	484c      	ldr	r0, [pc, #304]	@ (80008b8 <debugCRCCalculation+0x148>)
 8000786:	f7ff ff45 	bl	8000614 <USART_sendFrame>

    char buf[100];
    int idx;

    // Pokaż dane wejściowe
    idx = sprintf(buf, "Input data: ");
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	494b      	ldr	r1, [pc, #300]	@ (80008bc <debugCRCCalculation+0x14c>)
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fdc1 	bl	8008318 <siprintf>
 8000796:	67b8      	str	r0, [r7, #120]	@ 0x78
    for(size_t i = 0; i < length; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	@ 0x74
 800079c:	e012      	b.n	80007c4 <debugCRCCalculation+0x54>
        idx += sprintf(buf + idx, "%02X ", data[i]);
 800079e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007a0:	f107 0208 	add.w	r2, r7, #8
 80007a4:	18d0      	adds	r0, r2, r3
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4943      	ldr	r1, [pc, #268]	@ (80008c0 <debugCRCCalculation+0x150>)
 80007b2:	f007 fdb1 	bl	8008318 <siprintf>
 80007b6:	4602      	mov	r2, r0
 80007b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007ba:	4413      	add	r3, r2
 80007bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    for(size_t i = 0; i < length; i++) {
 80007be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007c0:	3301      	adds	r3, #1
 80007c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80007c4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d3e8      	bcc.n	800079e <debugCRCCalculation+0x2e>
    }
    sprintf(buf + idx, "\r\n");
 80007cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	4413      	add	r3, r2
 80007d4:	493b      	ldr	r1, [pc, #236]	@ (80008c4 <debugCRCCalculation+0x154>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fd9e 	bl	8008318 <siprintf>
    USART_sendFrame((uint8_t*)buf, strlen(buf));
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcf5 	bl	80001d0 <strlen>
 80007e6:	4602      	mov	r2, r0
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff10 	bl	8000614 <USART_sendFrame>

    // Pokaż proces
    for (size_t i = 0; i < length; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80007f8:	e03d      	b.n	8000876 <debugCRCCalculation+0x106>
        uint8_t byte = data[i];
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        uint8_t table_index = (crc >> 8) ^ byte;
 8000806:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800080a:	0a1b      	lsrs	r3, r3, #8
 800080c:	b29b      	uxth	r3, r3
 800080e:	b2da      	uxtb	r2, r3
 8000810:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000814:	4053      	eors	r3, r2
 8000816:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        uint16_t old_crc = crc;
 800081a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800081e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        crc = (crc << 8) ^ crc16_table[table_index];
 8000822:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21a      	sxth	r2, r3
 800082a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800082e:	4926      	ldr	r1, [pc, #152]	@ (80008c8 <debugCRCCalculation+0x158>)
 8000830:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4053      	eors	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

        idx = sprintf(buf, "Step %zu: byte=%02X, index=%02X, old_crc=%04X, new_crc=%04X\r\n",
 800083e:	f897 406f 	ldrb.w	r4, [r7, #111]	@ 0x6f
 8000842:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000846:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800084a:	f8b7 107e 	ldrh.w	r1, [r7, #126]	@ 0x7e
 800084e:	f107 0008 	add.w	r0, r7, #8
 8000852:	9102      	str	r1, [sp, #8]
 8000854:	9201      	str	r2, [sp, #4]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4623      	mov	r3, r4
 800085a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800085c:	491b      	ldr	r1, [pc, #108]	@ (80008cc <debugCRCCalculation+0x15c>)
 800085e:	f007 fd5b 	bl	8008318 <siprintf>
 8000862:	67b8      	str	r0, [r7, #120]	@ 0x78
                     i, byte, table_index, old_crc, crc);
        USART_sendFrame((uint8_t*)buf, idx);
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fed2 	bl	8000614 <USART_sendFrame>
    for (size_t i = 0; i < length; i++) {
 8000870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000872:	3301      	adds	r3, #1
 8000874:	673b      	str	r3, [r7, #112]	@ 0x70
 8000876:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3bd      	bcc.n	80007fa <debugCRCCalculation+0x8a>
    }

    // Pokaż wynik końcowy
    sprintf(buf, "Final CRC: %02X %02X\r\n", (crc >> 8) & 0xFF, crc & 0xFF);
 800087e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f107 0008 	add.w	r0, r7, #8
 8000892:	490f      	ldr	r1, [pc, #60]	@ (80008d0 <debugCRCCalculation+0x160>)
 8000894:	f007 fd40 	bl	8008318 <siprintf>
    USART_sendFrame((uint8_t*)buf, strlen(buf));
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fc97 	bl	80001d0 <strlen>
 80008a2:	4602      	mov	r2, r0
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff feb2 	bl	8000614 <USART_sendFrame>
}
 80008b0:	bf00      	nop
 80008b2:	3784      	adds	r7, #132	@ 0x84
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	08008bd0 	.word	0x08008bd0
 80008bc:	08008be4 	.word	0x08008be4
 80008c0:	08008bf4 	.word	0x08008bf4
 80008c4:	08008bfc 	.word	0x08008bfc
 80008c8:	20000000 	.word	0x20000000
 80008cc:	08008c00 	.word	0x08008c00
 80008d0:	08008c40 	.word	0x08008c40

080008d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_DMA_Init+0x38>)
 80008dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <MX_DMA_Init+0x38>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_DMA_Init+0x38>)
 80008e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	200f      	movs	r0, #15
 80008f8:	f001 ffed 	bl	80028d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008fc:	200f      	movs	r0, #15
 80008fe:	f002 f806 	bl	800290e <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <debugData>:
int bx_index = 0;
bool in_frame = false;
uint8_t received_char;
Frame frame;
ScrollingTextState text = {0};
static void debugData(const char* message, uint8_t *data, size_t len) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b0c8      	sub	sp, #288	@ 0x120
 8000914:	af00      	add	r7, sp, #0
 8000916:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800091a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800091e:	6018      	str	r0, [r3, #0]
 8000920:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000924:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000928:	6019      	str	r1, [r3, #0]
 800092a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800092e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000932:	601a      	str	r2, [r3, #0]
    // Bufor na wiadomość debugową (zakładając maksymalną długość)
    uint8_t debug_buffer[256];
    uint8_t hex_str[4];  // Bufor na pojedynczą wartość hex
    int idx = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    // Kopiuj wiadomość
    while (*message) {
 800093a:	e015      	b.n	8000968 <debugData+0x58>
        debug_buffer[idx++] = *message++;
 800093c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000940:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800094a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800094e:	1c51      	adds	r1, r2, #1
 8000950:	6019      	str	r1, [r3, #0]
 8000952:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000956:	1c59      	adds	r1, r3, #1
 8000958:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 800095c:	7811      	ldrb	r1, [r2, #0]
 800095e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000962:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000966:	54d1      	strb	r1, [r2, r3]
    while (*message) {
 8000968:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800096c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1e1      	bne.n	800093c <debugData+0x2c>
    }

    debug_buffer[idx++] = ':';
 8000978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000982:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000986:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800098a:	213a      	movs	r1, #58	@ 0x3a
 800098c:	54d1      	strb	r1, [r2, r3]
    debug_buffer[idx++] = ' ';
 800098e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000998:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800099c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009a0:	2120      	movs	r1, #32
 80009a2:	54d1      	strb	r1, [r2, r3]

    // Konwertuj każdy bajt na hex string
    for(size_t i = 0; i < len; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80009aa:	e03d      	b.n	8000a28 <debugData+0x118>
        // Konwersja na hex (np. 0xFF -> "FF ")
        sprintf((char*)hex_str, "%02X ", data[i]);
 80009ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	492e      	ldr	r1, [pc, #184]	@ (8000a80 <debugData+0x170>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 fca6 	bl	8008318 <siprintf>
        debug_buffer[idx++] = hex_str[0];
 80009cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80009d6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009da:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009de:	7811      	ldrb	r1, [r2, #0]
 80009e0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009e4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009e8:	54d1      	strb	r1, [r2, r3]
        debug_buffer[idx++] = hex_str[1];
 80009ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80009f4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80009fc:	7851      	ldrb	r1, [r2, #1]
 80009fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a02:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a06:	54d1      	strb	r1, [r2, r3]
        debug_buffer[idx++] = ' ';
 8000a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a12:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a16:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	54d1      	strb	r1, [r2, r3]
    for(size_t i = 0; i < len; i++) {
 8000a1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000a22:	3301      	adds	r3, #1
 8000a24:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000a28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000a30:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d3b8      	bcc.n	80009ac <debugData+0x9c>
    }

    debug_buffer[idx++] = '\r';
 8000a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a44:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a48:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a4c:	210d      	movs	r1, #13
 8000a4e:	54d1      	strb	r1, [r2, r3]
    debug_buffer[idx++] = '\n';
 8000a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000a5a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a5e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a62:	210a      	movs	r1, #10
 8000a64:	54d1      	strb	r1, [r2, r3]

    // Wyślij przez UART
    USART_sendFrame(debug_buffer, idx);
 8000a66:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fdcf 	bl	8000614 <USART_sendFrame>
}
 8000a76:	bf00      	nop
 8000a78:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08008c94 	.word	0x08008c94

08000a84 <stopAnimation>:
static void stopAnimation(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	text.isScrolling = false;
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <stopAnimation+0x18>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000d34 	.word	0x20000d34

08000aa0 <copyToBuffer>:

static void copyToBuffer(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	if (!lcdIsBusy()) {
 8000aa4:	f001 f9f8 	bl	8001e98 <lcdIsBusy>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <copyToBuffer+0x18>
		lcdCopy();
 8000ab4:	f001 f958 	bl	8001d68 <lcdCopy>
	}
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <safeCompare>:
static bool safeCompare(const char* str1, const char* str2, size_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	if(str1 == NULL || str2 == NULL)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <safeCompare+0x18>
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <safeCompare+0x1c>
	{
		return false;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e00a      	b.n	8000aee <safeCompare+0x32>
	}
	return memcmp(str1, str2, len) == 0;
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	68b9      	ldr	r1, [r7, #8]
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f007 fc75 	bl	80083cc <memcmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <parseColor>:
* Korzysta z:
*   - color_map: Globalna tablica struktur ColorMap zawierająca:
*   - name: string z nazwą koloru
*   - value: wartość Color_t w formacie RGB565
************************************************************************/
bool parseColor(const char* color_name, Color_t* color) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    if (color_name == NULL || color == NULL) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <parseColor+0x16>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <parseColor+0x1a>
        return false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e026      	b.n	8000b60 <parseColor+0x68>
    }

    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e01f      	b.n	8000b58 <parseColor+0x60>
        size_t color_len = strlen(color_map[i].name); // Get the expected color name length
 8000b18:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <parseColor+0x70>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fb55 	bl	80001d0 <strlen>
 8000b26:	60b8      	str	r0, [r7, #8]
        if (safeCompare(color_name, color_map[i].name, color_len)) {
 8000b28:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <parseColor+0x70>)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4619      	mov	r1, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ffc1 	bl	8000abc <safeCompare>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <parseColor+0x5a>
            *color = color_map[i].value;
 8000b40:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <parseColor+0x70>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	889a      	ldrh	r2, [r3, #4]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	801a      	strh	r2, [r3, #0]
            return true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e006      	b.n	8000b60 <parseColor+0x68>
    for (int i = 0; i < sizeof(color_map) / sizeof(ColorMap); i++) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d9dc      	bls.n	8000b18 <parseColor+0x20>
        }
    }
    return false;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08008d90 	.word	0x08008d90

08000b6c <resetFrameState>:
* Zmienne globalne:
*   - in_frame: Flaga oznaczająca czy jesteśmy w trakcie odbierania ramki
*   - escape_detected: Flaga oznaczająca wykrycie znaku escape
*   - bx_index: Indeks w buforze odbiorczym
************************************************************************/
static void resetFrameState() {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
    in_frame = false;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <resetFrameState+0x20>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    escape_detected = false;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <resetFrameState+0x24>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
    bx_index = 0;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <resetFrameState+0x28>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	20000ca8 	.word	0x20000ca8
 8000b90:	20000ca0 	.word	0x20000ca0
 8000b94:	20000ca4 	.word	0x20000ca4

08000b98 <debugData.0>:
    const char* fmt_ptr = format;
    uint8_t token[51];
    size_t token_idx = 0;

    // Debug helper
    void debugData(const char* msg, const uint8_t* data, size_t len) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a0      	sub	sp, #128	@ 0x80
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	f8c7 c000 	str.w	ip, [r7]
        uint8_t buf[100];
        int idx = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (*msg) buf[idx++] = *msg++;
 8000bac:	e00a      	b.n	8000bc4 <debugData.0+0x2c>
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	1c53      	adds	r3, r2, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bb6:	1c59      	adds	r1, r3, #1
 8000bb8:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	3380      	adds	r3, #128	@ 0x80
 8000bbe:	443b      	add	r3, r7
 8000bc0:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f0      	bne.n	8000bae <debugData.0+0x16>
        buf[idx++] = ':';
 8000bcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000bd2:	3380      	adds	r3, #128	@ 0x80
 8000bd4:	443b      	add	r3, r7
 8000bd6:	223a      	movs	r2, #58	@ 0x3a
 8000bd8:	f803 2c6c 	strb.w	r2, [r3, #-108]
        buf[idx++] = ' ';
 8000bdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000be2:	3380      	adds	r3, #128	@ 0x80
 8000be4:	443b      	add	r3, r7
 8000be6:	2220      	movs	r2, #32
 8000be8:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (size_t i = 0; i < len; i++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000bf0:	e00d      	b.n	8000c0e <debugData.0+0x76>
            buf[idx++] = data[i];
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000bf6:	441a      	add	r2, r3
 8000bf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000bfa:	1c59      	adds	r1, r3, #1
 8000bfc:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	3380      	adds	r3, #128	@ 0x80
 8000c02:	443b      	add	r3, r7
 8000c04:	f803 2c6c 	strb.w	r2, [r3, #-108]
        for (size_t i = 0; i < len; i++) {
 8000c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000c0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3ed      	bcc.n	8000bf2 <debugData.0+0x5a>
        }
        buf[idx++] = '\r';
 8000c16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000c1c:	3380      	adds	r3, #128	@ 0x80
 8000c1e:	443b      	add	r3, r7
 8000c20:	220d      	movs	r2, #13
 8000c22:	f803 2c6c 	strb.w	r2, [r3, #-108]
        buf[idx++] = '\n';
 8000c26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000c2c:	3380      	adds	r3, #128	@ 0x80
 8000c2e:	443b      	add	r3, r7
 8000c30:	220a      	movs	r2, #10
 8000c32:	f803 2c6c 	strb.w	r2, [r3, #-108]
        USART_sendFrame(buf, idx);
 8000c36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fce8 	bl	8000614 <USART_sendFrame>
    }
 8000c44:	bf00      	nop
 8000c46:	3780      	adds	r7, #128	@ 0x80
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <parseParameters>:
bool parseParameters(const uint8_t* data, const char* format, ...) {
 8000c4c:	b40e      	push	{r1, r2, r3}
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b099      	sub	sp, #100	@ 0x64
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c5a:	60fb      	str	r3, [r7, #12]
    if (!data || !format) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <parseParameters+0x1c>
 8000c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <parseParameters+0x20>
        return false;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e0b6      	b.n	8000dda <parseParameters+0x18e>
    va_start(args, format);
 8000c6c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c70:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint8_t* data_ptr = data;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const char* fmt_ptr = format;
 8000c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c78:	65bb      	str	r3, [r7, #88]	@ 0x58
    size_t token_idx = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	657b      	str	r3, [r7, #84]	@ 0x54

    while (*fmt_ptr) {
 8000c7e:	e0a6      	b.n	8000dce <parseParameters+0x182>
        switch (*fmt_ptr) {
 8000c80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b75      	cmp	r3, #117	@ 0x75
 8000c86:	d007      	beq.n	8000c98 <parseParameters+0x4c>
 8000c88:	2b75      	cmp	r3, #117	@ 0x75
 8000c8a:	f300 809b 	bgt.w	8000dc4 <parseParameters+0x178>
 8000c8e:	2b73      	cmp	r3, #115	@ 0x73
 8000c90:	d01d      	beq.n	8000cce <parseParameters+0x82>
 8000c92:	2b74      	cmp	r3, #116	@ 0x74
 8000c94:	d05f      	beq.n	8000d56 <parseParameters+0x10a>
 8000c96:	e095      	b.n	8000dc4 <parseParameters+0x178>
            case 'u': {
                uint8_t* value_ptr = va_arg(args, uint8_t*);
 8000c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c9a:	1d1a      	adds	r2, r3, #4
 8000c9c:	647a      	str	r2, [r7, #68]	@ 0x44
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	653b      	str	r3, [r7, #80]	@ 0x50
                *value_ptr = *data_ptr++;  // Bezpośrednio odczytaj bajt
 8000ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000cac:	701a      	strb	r2, [r3, #0]

                // Jeśli następny znak to przecinek, pomiń go
                if (*data_ptr == ',') {
 8000cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cb4:	d102      	bne.n	8000cbc <parseParameters+0x70>
                    data_ptr++;
 8000cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cb8:	3301      	adds	r3, #1
 8000cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
                debugData("read u", value_ptr, 1);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	469c      	mov	ip, r3
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000cc6:	4848      	ldr	r0, [pc, #288]	@ (8000de8 <parseParameters+0x19c>)
 8000cc8:	f7ff ff66 	bl	8000b98 <debugData.0>
                break;
 8000ccc:	e07c      	b.n	8000dc8 <parseParameters+0x17c>
            }
            case 's': {
                // Zbierz znaki do przecinka
                token_idx = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 8000cd2:	e00a      	b.n	8000cea <parseParameters+0x9e>
                    token[token_idx++] = *data_ptr++;
 8000cd4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000cd6:	1c53      	adds	r3, r2, #1
 8000cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cdc:	1c59      	adds	r1, r3, #1
 8000cde:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	3360      	adds	r3, #96	@ 0x60
 8000ce4:	443b      	add	r3, r7
 8000ce6:	f803 2c50 	strb.w	r2, [r3, #-80]
                while (*data_ptr && *data_ptr != ',' && token_idx < 50) {
 8000cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <parseParameters+0xb4>
 8000cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cf8:	d002      	beq.n	8000d00 <parseParameters+0xb4>
 8000cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cfc:	2b31      	cmp	r3, #49	@ 0x31
 8000cfe:	d9e9      	bls.n	8000cd4 <parseParameters+0x88>
                }
                token[token_idx] = '\0';
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d06:	4413      	add	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
                if (*data_ptr == ',') data_ptr++;
 8000d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d12:	d102      	bne.n	8000d1a <parseParameters+0xce>
 8000d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d16:	3301      	adds	r3, #1
 8000d18:	65fb      	str	r3, [r7, #92]	@ 0x5c

                Color_t* color_ptr = va_arg(args, Color_t*);
 8000d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d1c:	1d1a      	adds	r2, r3, #4
 8000d1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (!parseColor((char*)token, color_ptr)) {
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fee4 	bl	8000af8 <parseColor>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f083 0301 	eor.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <parseParameters+0xf4>
                    va_end(args);
                    return false;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e04c      	b.n	8000dda <parseParameters+0x18e>
                }
                debugData("read color", token, token_idx);
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	4694      	mov	ip, r2
 8000d4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4827      	ldr	r0, [pc, #156]	@ (8000dec <parseParameters+0x1a0>)
 8000d50:	f7ff ff22 	bl	8000b98 <debugData.0>
                break;
 8000d54:	e038      	b.n	8000dc8 <parseParameters+0x17c>
            }
            case 't': {
                // Zbierz pozostały tekst
                token_idx = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	657b      	str	r3, [r7, #84]	@ 0x54
                while (*data_ptr && token_idx < 50) {
 8000d5a:	e00a      	b.n	8000d72 <parseParameters+0x126>
                    token[token_idx++] = *data_ptr++;
 8000d5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d5e:	1c53      	adds	r3, r2, #1
 8000d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d64:	1c59      	adds	r1, r3, #1
 8000d66:	6579      	str	r1, [r7, #84]	@ 0x54
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	3360      	adds	r3, #96	@ 0x60
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f803 2c50 	strb.w	r2, [r3, #-80]
                while (*data_ptr && token_idx < 50) {
 8000d72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <parseParameters+0x134>
 8000d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d7c:	2b31      	cmp	r3, #49	@ 0x31
 8000d7e:	d9ed      	bls.n	8000d5c <parseParameters+0x110>
                }
                token[token_idx] = '\0';
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d86:	4413      	add	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]

                char* text_ptr = va_arg(args, char*);
 8000d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d8e:	1d1a      	adds	r2, r3, #4
 8000d90:	647a      	str	r2, [r7, #68]	@ 0x44
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
                strncpy(text_ptr, (char*)token, token_idx);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000da0:	f007 fb2c 	bl	80083fc <strncpy>
                text_ptr[token_idx] = '\0';
 8000da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000da8:	4413      	add	r3, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
                debugData("read text", token, token_idx);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	4694      	mov	ip, r2
 8000db8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <parseParameters+0x1a4>)
 8000dbe:	f7ff feeb 	bl	8000b98 <debugData.0>
                break;
 8000dc2:	e001      	b.n	8000dc8 <parseParameters+0x17c>
            }
            default:
                va_end(args);
                return false;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e008      	b.n	8000dda <parseParameters+0x18e>
        }
        fmt_ptr++;
 8000dc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dca:	3301      	adds	r3, #1
 8000dcc:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*fmt_ptr) {
 8000dce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f47f af54 	bne.w	8000c80 <parseParameters+0x34>
    }

    va_end(args);
    return true;
 8000dd8:	2301      	movs	r3, #1
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3764      	adds	r7, #100	@ 0x64
 8000dde:	46bd      	mov	sp, r7
 8000de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de4:	b003      	add	sp, #12
 8000de6:	4770      	bx	lr
 8000de8:	08008c9c 	.word	0x08008c9c
 8000dec:	08008ca4 	.word	0x08008ca4
 8000df0:	08008cb0 	.word	0x08008cb0

08000df4 <clearFrame>:
*   - Parametry: (void* ptr, int value, size_t num)
*   - ptr: Wskaźnik na początek bloku pamięci
*   - value: Wartość do wypełnienia (0 dla wyzerowania)
*   - num: Liczba bajtów do wypełnienia
************************************************************************/
void clearFrame(Frame* frame) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
    if (frame) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00d      	beq.n	8000e1e <clearFrame+0x2a>
        memset(frame->data, 0, sizeof(frame->data));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3305      	adds	r3, #5
 8000e06:	2280      	movs	r2, #128	@ 0x80
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 faee 	bl	80083ec <memset>
        memset(frame->command, 0, sizeof(frame->command));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3302      	adds	r3, #2
 8000e14:	2203      	movs	r2, #3
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f007 fae7 	bl	80083ec <memset>
    }
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <executeONK>:
*      - Parametry: (x, y, r, color)
*
*   3. prepareFrame(): Wysyła odpowiedź w przypadku błędu
************************************************************************/
static void executeONK(Frame *frame)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, r = 0, filling = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	2300      	movs	r3, #0
 8000e36:	73bb      	strb	r3, [r7, #14]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	737b      	strb	r3, [r7, #13]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	733b      	strb	r3, [r7, #12]
	Color_t color = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	817b      	strh	r3, [r7, #10]
    if (!parseParameters(frame->data, "uuuus", &x, &y, &r, &filling, &color))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	1d58      	adds	r0, r3, #5
 8000e48:	f107 010e 	add.w	r1, r7, #14
 8000e4c:	f107 020f 	add.w	r2, r7, #15
 8000e50:	f107 030a 	add.w	r3, r7, #10
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f107 030d 	add.w	r3, r7, #13
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	460b      	mov	r3, r1
 8000e64:	4917      	ldr	r1, [pc, #92]	@ (8000ec4 <executeONK+0x9c>)
 8000e66:	f7ff fef1 	bl	8000c4c <parseParameters>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f083 0301 	eor.w	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d009      	beq.n	8000e8a <executeONK+0x62>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3305      	adds	r3, #5
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <executeONK+0xa0>)
 8000e7e:	4a13      	ldr	r2, [pc, #76]	@ (8000ecc <executeONK+0xa4>)
 8000e80:	2167      	movs	r1, #103	@ 0x67
 8000e82:	2068      	movs	r0, #104	@ 0x68
 8000e84:	f000 fa78 	bl	8001378 <prepareFrame>
 8000e88:	e019      	b.n	8000ebe <executeONK+0x96>
        return;
    }
	switch(filling)
 8000e8a:	7b3b      	ldrb	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <executeONK+0x6e>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d00a      	beq.n	8000eaa <executeONK+0x82>
 8000e94:	e013      	b.n	8000ebe <executeONK+0x96>
	{
	case 0:
		hagl_draw_circle(x, y, r, color);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	b218      	sxth	r0, r3
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	b219      	sxth	r1, r3
 8000e9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	897b      	ldrh	r3, [r7, #10]
 8000ea4:	f006 fd40 	bl	8007928 <hagl_draw_circle>
		break;
 8000ea8:	e009      	b.n	8000ebe <executeONK+0x96>
	case 1:
		hagl_fill_circle(x, y, r, color);
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	b218      	sxth	r0, r3
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	b219      	sxth	r1, r3
 8000eb2:	7b7b      	ldrb	r3, [r7, #13]
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	897b      	ldrh	r3, [r7, #10]
 8000eb8:	f006 fe65 	bl	8007b86 <hagl_fill_circle>
		break;
 8000ebc:	bf00      	nop
	}
}
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08008cbc 	.word	0x08008cbc
 8000ec8:	08008cc4 	.word	0x08008cc4
 8000ecc:	08008cd8 	.word	0x08008cd8

08000ed0 <executeONP>:
*   2. hagl_draw_rectangle() / hagl_fill_rectangle():
*      Funkcje HAGL do rysowania prostokątów
*      - Parametry: (x, y, width, height, color)
************************************************************************/
static void executeONP(Frame *frame)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	6078      	str	r0, [r7, #4]
	uint8_t x = 0, y = 0, width = 0, height = 0, filling = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	737b      	strb	r3, [r7, #13]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	733b      	strb	r3, [r7, #12]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	72fb      	strb	r3, [r7, #11]
	Color_t color = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	813b      	strh	r3, [r7, #8]
	if (!parseParameters(frame->data, "uuuuus", &x, &y, &width, &height, &filling, &color)) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1d58      	adds	r0, r3, #5
 8000ef4:	f107 010e 	add.w	r1, r7, #14
 8000ef8:	f107 020f 	add.w	r2, r7, #15
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	9303      	str	r3, [sp, #12]
 8000f02:	f107 030b 	add.w	r3, r7, #11
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	f107 030d 	add.w	r3, r7, #13
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	460b      	mov	r3, r1
 8000f16:	491c      	ldr	r1, [pc, #112]	@ (8000f88 <executeONP+0xb8>)
 8000f18:	f7ff fe98 	bl	8000c4c <parseParameters>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f083 0301 	eor.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d009      	beq.n	8000f3c <executeONP+0x6c>
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3305      	adds	r3, #5
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <executeONP+0xbc>)
 8000f30:	4a17      	ldr	r2, [pc, #92]	@ (8000f90 <executeONP+0xc0>)
 8000f32:	2167      	movs	r1, #103	@ 0x67
 8000f34:	2068      	movs	r0, #104	@ 0x68
 8000f36:	f000 fa1f 	bl	8001378 <prepareFrame>
 8000f3a:	e021      	b.n	8000f80 <executeONP+0xb0>
		return;
	}

	switch(filling)
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <executeONP+0x78>
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d00e      	beq.n	8000f64 <executeONP+0x94>
 8000f46:	e01b      	b.n	8000f80 <executeONP+0xb0>
	{
	case 0:
		hagl_draw_rectangle(x, y, width, height, color);
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b218      	sxth	r0, r3
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	b219      	sxth	r1, r3
 8000f50:	7b7b      	ldrb	r3, [r7, #13]
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	b21c      	sxth	r4, r3
 8000f58:	893b      	ldrh	r3, [r7, #8]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	4623      	mov	r3, r4
 8000f5e:	f006 fa33 	bl	80073c8 <hagl_draw_rectangle>
		break;
 8000f62:	e00d      	b.n	8000f80 <executeONP+0xb0>
	case 1:
		hagl_fill_rectangle(x, y, width, height, color);
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	b218      	sxth	r0, r3
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	b219      	sxth	r1, r3
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	b21c      	sxth	r4, r3
 8000f74:	893b      	ldrh	r3, [r7, #8]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	f006 faab 	bl	80074d4 <hagl_fill_rectangle>
		break;
 8000f7e:	bf00      	nop
	}
}
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08008cdc 	.word	0x08008cdc
 8000f8c:	08008cc4 	.word	0x08008cc4
 8000f90:	08008cd8 	.word	0x08008cd8

08000f94 <executeONT>:
*   2. hagl_draw_triangle() / hagl_fill_triangle():
*      Funkcje HAGL do rysowania trójkątów
*      - Parametry: (x1,y1, x2,y2, x3,y3, color)
************************************************************************/
static void executeONT(Frame *frame)
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	b08d      	sub	sp, #52	@ 0x34
 8000f98:	af06      	add	r7, sp, #24
 8000f9a:	6078      	str	r0, [r7, #4]
    uint8_t x1 = 0, y1 = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0, filling = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	75bb      	strb	r3, [r7, #22]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	757b      	strb	r3, [r7, #21]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	753b      	strb	r3, [r7, #20]
 8000fac:	2300      	movs	r3, #0
 8000fae:	74fb      	strb	r3, [r7, #19]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	74bb      	strb	r3, [r7, #18]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	747b      	strb	r3, [r7, #17]
    Color_t color = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	81fb      	strh	r3, [r7, #14]
    if (!parseParameters(frame->data, "uuuuuuus", &x1, &y1, &x2, &y2, &x3, &y3, &filling, &color))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	1d58      	adds	r0, r3, #5
 8000fc0:	f107 0116 	add.w	r1, r7, #22
 8000fc4:	f107 0217 	add.w	r2, r7, #23
 8000fc8:	f107 030e 	add.w	r3, r7, #14
 8000fcc:	9305      	str	r3, [sp, #20]
 8000fce:	f107 0311 	add.w	r3, r7, #17
 8000fd2:	9304      	str	r3, [sp, #16]
 8000fd4:	f107 0312 	add.w	r3, r7, #18
 8000fd8:	9303      	str	r3, [sp, #12]
 8000fda:	f107 0313 	add.w	r3, r7, #19
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f107 0315 	add.w	r3, r7, #21
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	460b      	mov	r3, r1
 8000fee:	4924      	ldr	r1, [pc, #144]	@ (8001080 <executeONT+0xec>)
 8000ff0:	f7ff fe2c 	bl	8000c4c <parseParameters>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f083 0301 	eor.w	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d009      	beq.n	8001014 <executeONT+0x80>
    {
		prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3305      	adds	r3, #5
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <executeONT+0xf0>)
 8001008:	4a1f      	ldr	r2, [pc, #124]	@ (8001088 <executeONT+0xf4>)
 800100a:	2167      	movs	r1, #103	@ 0x67
 800100c:	2068      	movs	r0, #104	@ 0x68
 800100e:	f000 f9b3 	bl	8001378 <prepareFrame>
 8001012:	e031      	b.n	8001078 <executeONT+0xe4>
        return;
    }
    switch(filling)
 8001014:	7c7b      	ldrb	r3, [r7, #17]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <executeONT+0x8c>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d016      	beq.n	800104c <executeONT+0xb8>
 800101e:	e02b      	b.n	8001078 <executeONT+0xe4>
    {
        case 0:
            hagl_draw_triangle(x1, y1, x2, y2, x3, y3, color);
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	b218      	sxth	r0, r3
 8001024:	7dbb      	ldrb	r3, [r7, #22]
 8001026:	b21c      	sxth	r4, r3
 8001028:	7d7b      	ldrb	r3, [r7, #21]
 800102a:	b21d      	sxth	r5, r3
 800102c:	7d3b      	ldrb	r3, [r7, #20]
 800102e:	b21e      	sxth	r6, r3
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	b21b      	sxth	r3, r3
 8001034:	7cba      	ldrb	r2, [r7, #18]
 8001036:	b212      	sxth	r2, r2
 8001038:	89f9      	ldrh	r1, [r7, #14]
 800103a:	9102      	str	r1, [sp, #8]
 800103c:	9201      	str	r2, [sp, #4]
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	4633      	mov	r3, r6
 8001042:	462a      	mov	r2, r5
 8001044:	4621      	mov	r1, r4
 8001046:	f007 f829 	bl	800809c <hagl_draw_triangle>
            break;
 800104a:	e015      	b.n	8001078 <executeONT+0xe4>
        case 1:
            hagl_fill_triangle(x1, y1, x2, y2, x3, y3, color);
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	b218      	sxth	r0, r3
 8001050:	7dbb      	ldrb	r3, [r7, #22]
 8001052:	b21c      	sxth	r4, r3
 8001054:	7d7b      	ldrb	r3, [r7, #21]
 8001056:	b21d      	sxth	r5, r3
 8001058:	7d3b      	ldrb	r3, [r7, #20]
 800105a:	b21e      	sxth	r6, r3
 800105c:	7cfb      	ldrb	r3, [r7, #19]
 800105e:	b21b      	sxth	r3, r3
 8001060:	7cba      	ldrb	r2, [r7, #18]
 8001062:	b212      	sxth	r2, r2
 8001064:	89f9      	ldrh	r1, [r7, #14]
 8001066:	9102      	str	r1, [sp, #8]
 8001068:	9201      	str	r2, [sp, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	4633      	mov	r3, r6
 800106e:	462a      	mov	r2, r5
 8001070:	4621      	mov	r1, r4
 8001072:	f007 f839 	bl	80080e8 <hagl_fill_triangle>
            break;
 8001076:	bf00      	nop
    }
}
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107e:	bf00      	nop
 8001080:	08008ce4 	.word	0x08008ce4
 8001084:	08008cc4 	.word	0x08008cc4
 8001088:	08008cd8 	.word	0x08008cd8

0800108c <executeONN>:
*      - Parametry: (wtext, x, y, color, font)
*      - Dostępne fonty: font5x7, font5x8, font6x9

************************************************************************/
static void executeONN(Frame *frame)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	@ 0x50
 8001090:	af04      	add	r7, sp, #16
 8001092:	6078      	str	r0, [r7, #4]
    const char charText[50] = {0};
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	222e      	movs	r2, #46	@ 0x2e
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 f9a3 	bl	80083ec <memset>

    if (!parseParameters(frame->data, "uuuust", &text.x, &text.y, &text.fontSize, &text.scrollSpeed, &text.color, charText)) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	1d58      	adds	r0, r3, #5
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	9303      	str	r3, [sp, #12]
 80010b0:	4b4c      	ldr	r3, [pc, #304]	@ (80011e4 <executeONN+0x158>)
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	4b4c      	ldr	r3, [pc, #304]	@ (80011e8 <executeONN+0x15c>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	4b4c      	ldr	r3, [pc, #304]	@ (80011ec <executeONN+0x160>)
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4b4c      	ldr	r3, [pc, #304]	@ (80011f0 <executeONN+0x164>)
 80010be:	4a4d      	ldr	r2, [pc, #308]	@ (80011f4 <executeONN+0x168>)
 80010c0:	494d      	ldr	r1, [pc, #308]	@ (80011f8 <executeONN+0x16c>)
 80010c2:	f7ff fdc3 	bl	8000c4c <parseParameters>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f083 0301 	eor.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <executeONN+0x5a>
        prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3305      	adds	r3, #5
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4b48      	ldr	r3, [pc, #288]	@ (80011fc <executeONN+0x170>)
 80010da:	4a49      	ldr	r2, [pc, #292]	@ (8001200 <executeONN+0x174>)
 80010dc:	2167      	movs	r1, #103	@ 0x67
 80010de:	2068      	movs	r0, #104	@ 0x68
 80010e0:	f000 f94a 	bl	8001378 <prepareFrame>
 80010e4:	e07b      	b.n	80011de <executeONN+0x152>
        return;
    }

    // Zapisz początkowe pozycje
    memset(text.displayText, 0, sizeof(text.displayText));
 80010e6:	22c8      	movs	r2, #200	@ 0xc8
 80010e8:	2100      	movs	r1, #0
 80010ea:	4846      	ldr	r0, [pc, #280]	@ (8001204 <executeONN+0x178>)
 80010ec:	f007 f97e 	bl	80083ec <memset>
    text.startX = text.x;
 80010f0:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <executeONN+0x178>)
 80010f2:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 80010f6:	4b43      	ldr	r3, [pc, #268]	@ (8001204 <executeONN+0x178>)
 80010f8:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
    text.startY = text.y;
 80010fc:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <executeONN+0x178>)
 80010fe:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8001102:	4b40      	ldr	r3, [pc, #256]	@ (8001204 <executeONN+0x178>)
 8001104:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
    text.textLength = 0;
 8001108:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <executeONN+0x178>)
 800110a:	2200      	movs	r2, #0
 800110c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    text.firstIteration = true;
 8001110:	4b3c      	ldr	r3, [pc, #240]	@ (8001204 <executeONN+0x178>)
 8001112:	2201      	movs	r2, #1
 8001114:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
    // Konwersja tekstu
    while (charText[text.textLength] && text.textLength < 50) {
 8001118:	e015      	b.n	8001146 <executeONN+0xba>
        text.displayText[text.textLength] = (wchar_t)charText[text.textLength];
 800111a:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <executeONN+0x178>)
 800111c:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001120:	3340      	adds	r3, #64	@ 0x40
 8001122:	443b      	add	r3, r7
 8001124:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8001128:	4b36      	ldr	r3, [pc, #216]	@ (8001204 <executeONN+0x178>)
 800112a:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800112e:	461a      	mov	r2, r3
 8001130:	4b34      	ldr	r3, [pc, #208]	@ (8001204 <executeONN+0x178>)
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        text.textLength++;
 8001136:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <executeONN+0x178>)
 8001138:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800113c:	3301      	adds	r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <executeONN+0x178>)
 8001142:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    while (charText[text.textLength] && text.textLength < 50) {
 8001146:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <executeONN+0x178>)
 8001148:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800114c:	3340      	adds	r3, #64	@ 0x40
 800114e:	443b      	add	r3, r7
 8001150:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <executeONN+0xd6>
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <executeONN+0x178>)
 800115a:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800115e:	2b31      	cmp	r3, #49	@ 0x31
 8001160:	d9db      	bls.n	800111a <executeONN+0x8e>
    }

    text.isScrolling = (text.scrollSpeed > 0);
 8001162:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <executeONN+0x178>)
 8001164:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf14      	ite	ne
 800116c:	2301      	movne	r3, #1
 800116e:	2300      	moveq	r3, #0
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <executeONN+0x178>)
 8001174:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    text.lastUpdate = HAL_GetTick();
 8001178:	f001 fac6 	bl	8002708 <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <executeONN+0x178>)
 8001180:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

    const uint8_t* font;
    switch(text.fontSize) {
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <executeONN+0x178>)
 8001186:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800118a:	2b03      	cmp	r3, #3
 800118c:	d00c      	beq.n	80011a8 <executeONN+0x11c>
 800118e:	2b03      	cmp	r3, #3
 8001190:	dc0d      	bgt.n	80011ae <executeONN+0x122>
 8001192:	2b01      	cmp	r3, #1
 8001194:	d002      	beq.n	800119c <executeONN+0x110>
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <executeONN+0x116>
 800119a:	e008      	b.n	80011ae <executeONN+0x122>
        case 1: font = font5x7; break;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <executeONN+0x17c>)
 800119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011a0:	e007      	b.n	80011b2 <executeONN+0x126>
        case 2: font = font5x8; break;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <executeONN+0x180>)
 80011a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011a6:	e004      	b.n	80011b2 <executeONN+0x126>
        case 3: font = font6x9; break;
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <executeONN+0x184>)
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011ac:	e001      	b.n	80011b2 <executeONN+0x126>
        default: font = font5x7;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <executeONN+0x17c>)
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(!text.scrollSpeed) {
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <executeONN+0x178>)
 80011b4:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d110      	bne.n	80011de <executeONN+0x152>
        hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <executeONN+0x178>)
 80011be:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80011c2:	b219      	sxth	r1, r3
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <executeONN+0x178>)
 80011c6:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <executeONN+0x178>)
 80011ce:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 80011d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	4603      	mov	r3, r0
 80011d8:	480a      	ldr	r0, [pc, #40]	@ (8001204 <executeONN+0x178>)
 80011da:	f006 fb1d 	bl	8007818 <hagl_put_text>
    }
}
 80011de:	3740      	adds	r7, #64	@ 0x40
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000e02 	.word	0x20000e02
 80011e8:	20000e01 	.word	0x20000e01
 80011ec:	20000e00 	.word	0x20000e00
 80011f0:	20000dfd 	.word	0x20000dfd
 80011f4:	20000dfc 	.word	0x20000dfc
 80011f8:	08008cf0 	.word	0x08008cf0
 80011fc:	08008cc4 	.word	0x08008cc4
 8001200:	08008cd8 	.word	0x08008cd8
 8001204:	20000d34 	.word	0x20000d34
 8001208:	08008dd0 	.word	0x08008dd0
 800120c:	0800c2d8 	.word	0x0800c2d8
 8001210:	0800f17c 	.word	0x0800f17c

08001214 <executeOFF>:
*     - Używa hagl_fill_rectangle(0,0, LCD_WIDTH, LCD_HEIGHT, BLACK)
*
* TODO naprawic wylaczenie oraz reset
************************************************************************/
static void executeOFF(Frame *frame)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	switch(frame->data[0])
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	795b      	ldrb	r3, [r3, #5]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <executeOFF+0x16>
 8001224:	2b01      	cmp	r3, #1
 8001226:	d006      	beq.n	8001236 <executeOFF+0x22>
		break;
	case 1:
		lcdClear();
		break;
	}
}
 8001228:	e008      	b.n	800123c <executeOFF+0x28>
		HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2102      	movs	r1, #2
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <executeOFF+0x30>)
 8001230:	f001 ffa8 	bl	8003184 <HAL_GPIO_WritePin>
		break;
 8001234:	e002      	b.n	800123c <executeOFF+0x28>
		lcdClear();
 8001236:	f000 fdc3 	bl	8001dc0 <lcdClear>
		break;
 800123a:	bf00      	nop
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	48000400 	.word	0x48000400

08001248 <isWithinBounds>:
* Korzysta z:
*   - LCD_WIDTH: Stała określająca szerokość ekranu
*   - LCD_HEIGHT: Stała określająca wysokość ekranu
************************************************************************/
bool isWithinBounds(int x, int y)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	return (x >= 0 && x < LCD_WIDTH)&&(y >= 0 && y < LCD_HEIGHT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <isWithinBounds+0x26>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b9f      	cmp	r3, #159	@ 0x9f
 800125c:	dc07      	bgt.n	800126e <isWithinBounds+0x26>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db04      	blt.n	800126e <isWithinBounds+0x26>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b7f      	cmp	r3, #127	@ 0x7f
 8001268:	dc01      	bgt.n	800126e <isWithinBounds+0x26>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <isWithinBounds+0x28>
 800126e:	2300      	movs	r3, #0
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <parseCoordinates>:
*      - Kolejne z NULL
*
*   3. atoi(): Konwertuje string na int
************************************************************************/
bool parseCoordinates(const uint8_t* data, int* x, int* y)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
	 *x = data[0];  // Pierwszy bajt to x
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	601a      	str	r2, [r3, #0]
	 *y = data[2];  // Drugi bajt to y
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3302      	adds	r3, #2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	601a      	str	r2, [r3, #0]
    return true;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <byteStuffing>:
*   '}' 			 	-> "}]"
*   '~'              	-> "}^"
*   '`'              	-> "}&"

************************************************************************/
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 80012b2:	b480      	push	{r7}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
    size_t j = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_len; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	e04b      	b.n	8001360 <byteStuffing+0xae>
        if (input[i] == ESCAPE_CHAR) {
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b7d      	cmp	r3, #125	@ 0x7d
 80012d2:	d10e      	bne.n	80012f2 <byteStuffing+0x40>
            output[j++] = ESCAPE_CHAR;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	617a      	str	r2, [r7, #20]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	227d      	movs	r2, #125	@ 0x7d
 80012e0:	701a      	strb	r2, [r3, #0]
            output[j++] = ESCAPE_CHAR_STUFF;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	617a      	str	r2, [r7, #20]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	225d      	movs	r2, #93	@ 0x5d
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	e033      	b.n	800135a <byteStuffing+0xa8>
        } else if (input[i] == FRAME_START) {
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80012fc:	d10e      	bne.n	800131c <byteStuffing+0x6a>
            output[j++] = ESCAPE_CHAR;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	617a      	str	r2, [r7, #20]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	227d      	movs	r2, #125	@ 0x7d
 800130a:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_START_STUFF;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	617a      	str	r2, [r7, #20]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	225e      	movs	r2, #94	@ 0x5e
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e01e      	b.n	800135a <byteStuffing+0xa8>
        } else if (input[i] == FRAME_END) {
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b60      	cmp	r3, #96	@ 0x60
 8001326:	d10e      	bne.n	8001346 <byteStuffing+0x94>
            output[j++] = ESCAPE_CHAR;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	617a      	str	r2, [r7, #20]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	227d      	movs	r2, #125	@ 0x7d
 8001334:	701a      	strb	r2, [r3, #0]
            output[j++] = FRAME_END_STUFF;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	617a      	str	r2, [r7, #20]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	2226      	movs	r2, #38	@ 0x26
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e009      	b.n	800135a <byteStuffing+0xa8>
        } else {
            output[j++] = input[i];
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	441a      	add	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1c59      	adds	r1, r3, #1
 8001350:	6179      	str	r1, [r7, #20]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	440b      	add	r3, r1
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; i++) {
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	3301      	adds	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3af      	bcc.n	80012c8 <byteStuffing+0x16>
        }
    }
    return j;
 8001368:	697b      	ldr	r3, [r7, #20]
}
 800136a:	4618      	mov	r0, r3
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <prepareFrame>:
*   4. Konwertuje CRC na hex
*   5. Przygotowuje payload
*   6. Wykonuje byte stuffing
*   7. Wysyła ramkę
************************************************************************/
void prepareFrame(uint8_t sender, uint8_t receiver, const char *command, const char *format, ...) {
 8001378:	b408      	push	{r3}
 800137a:	b580      	push	{r7, lr}
 800137c:	b0b3      	sub	sp, #204	@ 0xcc
 800137e:	af02      	add	r7, sp, #8
 8001380:	4603      	mov	r3, r0
 8001382:	603a      	str	r2, [r7, #0]
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	460b      	mov	r3, r1
 8001388:	71bb      	strb	r3, [r7, #6]
	Frame frame = {0};
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	2285      	movs	r2, #133	@ 0x85
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f007 f82a 	bl	80083ec <memset>
    frame.sender = sender;
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	763b      	strb	r3, [r7, #24]
    frame.receiver = receiver;
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	767b      	strb	r3, [r7, #25]
    strncpy((char *)frame.command, command, COMMAND_LENGTH);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	3302      	adds	r3, #2
 80013a6:	2203      	movs	r2, #3
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f007 f826 	bl	80083fc <strncpy>

    // Użycie dynamicznej alokacji do przechowywania danych sformatowanych
    char *formatted_data = (char *)malloc(MAX_DATA_SIZE);
 80013b0:	2080      	movs	r0, #128	@ 0x80
 80013b2:	f006 febf 	bl	8008134 <malloc>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (formatted_data == NULL) {
 80013bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80c2 	beq.w	800154a <prepareFrame+0x1d2>
        // Obsługa błędu alokacji pamięci
        return;
    }

    va_list args;
    va_start(args, format);
 80013c6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80013ca:	617b      	str	r3, [r7, #20]
    vsnprintf(formatted_data, MAX_DATA_SIZE, format, args);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80013d2:	2180      	movs	r1, #128	@ 0x80
 80013d4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80013d8:	f006 ffea 	bl	80083b0 <vsniprintf>
    va_end(args);

    size_t data_len = strlen(formatted_data);
 80013dc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80013e0:	f7fe fef6 	bl	80001d0 <strlen>
 80013e4:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

    // Użycie dynamicznej alokacji do obliczeń CRC
    size_t crc_input_len = 2 + COMMAND_LENGTH + data_len;
 80013e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80013ec:	3305      	adds	r3, #5
 80013ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    uint8_t *crc_input = (uint8_t *)malloc(crc_input_len);
 80013f2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80013f6:	f006 fe9d 	bl	8008134 <malloc>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (crc_input == NULL) {
 8001400:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d104      	bne.n	8001412 <prepareFrame+0x9a>
        // Obsługa błędu alokacji pamięci
        free(formatted_data);
 8001408:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800140c:	f006 fe9a 	bl	8008144 <free>
        return;
 8001410:	e09c      	b.n	800154c <prepareFrame+0x1d4>
    }

    crc_input[0] = frame.sender;
 8001412:	7e3a      	ldrb	r2, [r7, #24]
 8001414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001418:	701a      	strb	r2, [r3, #0]
    crc_input[1] = frame.receiver;
 800141a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800141e:	3301      	adds	r3, #1
 8001420:	7e7a      	ldrb	r2, [r7, #25]
 8001422:	701a      	strb	r2, [r3, #0]
    memcpy(crc_input + 2, frame.command, COMMAND_LENGTH);
 8001424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001428:	3302      	adds	r3, #2
 800142a:	461a      	mov	r2, r3
 800142c:	f107 031a 	add.w	r3, r7, #26
 8001430:	8819      	ldrh	r1, [r3, #0]
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	8011      	strh	r1, [r2, #0]
 8001436:	7093      	strb	r3, [r2, #2]
    memcpy(crc_input + 2 + COMMAND_LENGTH, formatted_data, data_len);
 8001438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800143c:	3305      	adds	r3, #5
 800143e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001442:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001446:	4618      	mov	r0, r3
 8001448:	f007 f828 	bl	800849c <memcpy>

    char crc_output[2];
    calculateCrc16(crc_input, crc_input_len, crc_output);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	461a      	mov	r2, r3
 8001452:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001456:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800145a:	f7ff f94b 	bl	80006f4 <calculateCrc16>
    free(crc_input);  // Zwolnienie pamięci po zakończeniu używania
 800145e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001462:	f006 fe6f 	bl	8008144 <free>

    // Użycie dynamicznej alokacji do przechowywania ramki
    size_t raw_payload_len = 2 + COMMAND_LENGTH + data_len + 4;
 8001466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800146a:	3309      	adds	r3, #9
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    uint8_t *raw_payload = (uint8_t *)malloc(raw_payload_len);
 8001470:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001474:	f006 fe5e 	bl	8008134 <malloc>
 8001478:	4603      	mov	r3, r0
 800147a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (raw_payload == NULL) {
 800147e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d104      	bne.n	8001490 <prepareFrame+0x118>
        free(formatted_data);
 8001486:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800148a:	f006 fe5b 	bl	8008144 <free>
        return;
 800148e:	e05d      	b.n	800154c <prepareFrame+0x1d4>
    }

    raw_payload[0] = frame.sender;
 8001490:	7e3a      	ldrb	r2, [r7, #24]
 8001492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001496:	701a      	strb	r2, [r3, #0]
    raw_payload[1] = frame.receiver;
 8001498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800149c:	3301      	adds	r3, #1
 800149e:	7e7a      	ldrb	r2, [r7, #25]
 80014a0:	701a      	strb	r2, [r3, #0]
    memcpy(raw_payload + 2, frame.command, COMMAND_LENGTH);
 80014a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014a6:	3302      	adds	r3, #2
 80014a8:	461a      	mov	r2, r3
 80014aa:	f107 031a 	add.w	r3, r7, #26
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	789b      	ldrb	r3, [r3, #2]
 80014b2:	8011      	strh	r1, [r2, #0]
 80014b4:	7093      	strb	r3, [r2, #2]
    memcpy(raw_payload + 2 + COMMAND_LENGTH, formatted_data, data_len);
 80014b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014ba:	3305      	adds	r3, #5
 80014bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80014c0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 ffe9 	bl	800849c <memcpy>

    char crc_hex[5];
    snprintf(crc_hex, sizeof(crc_hex), "%02X%02X", (uint8_t)crc_output[0], (uint8_t)crc_output[1]);
 80014ca:	7c3b      	ldrb	r3, [r7, #16]
 80014cc:	461a      	mov	r2, r3
 80014ce:	7c7b      	ldrb	r3, [r7, #17]
 80014d0:	f107 0008 	add.w	r0, r7, #8
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <prepareFrame+0x1e0>)
 80014da:	2105      	movs	r1, #5
 80014dc:	f006 fee8 	bl	80082b0 <sniprintf>
    memcpy(raw_payload + 2 + COMMAND_LENGTH + data_len, crc_hex, 4);
 80014e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014e4:	3305      	adds	r3, #5
 80014e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80014ea:	4413      	add	r3, r2
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	601a      	str	r2, [r3, #0]
    free(formatted_data);  // Zwolnienie pamięci po zakończeniu używania
 80014f0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80014f4:	f006 fe26 	bl	8008144 <free>

    // Użycie dynamicznej alokacji do przechowywania danych po byte stuffing
    uint8_t *stuffed_payload = (uint8_t *)malloc(512);  // Maksymalny rozmiar bufora
 80014f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014fc:	f006 fe1a 	bl	8008134 <malloc>
 8001500:	4603      	mov	r3, r0
 8001502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (stuffed_payload == NULL) {
 8001506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d104      	bne.n	8001518 <prepareFrame+0x1a0>
        free(raw_payload);
 800150e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001512:	f006 fe17 	bl	8008144 <free>
        return;
 8001516:	e019      	b.n	800154c <prepareFrame+0x1d4>
    }

    size_t stuffed_len = byteStuffing(raw_payload, raw_payload_len, stuffed_payload);
 8001518:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800151c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001520:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001524:	f7ff fec5 	bl	80012b2 <byteStuffing>
 8001528:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    free(raw_payload);  // Zwolnienie pamięci po zakończeniu używania
 800152c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001530:	f006 fe08 	bl	8008144 <free>

    // Wysyłanie ramki przez UART
    USART_sendFrame(stuffed_payload, stuffed_len);
 8001534:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001538:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800153c:	f7ff f86a 	bl	8000614 <USART_sendFrame>
    free(stuffed_payload);  // Zwolnienie pamięci po zakończeniu używania
 8001540:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001544:	f006 fdfe 	bl	8008144 <free>
 8001548:	e000      	b.n	800154c <prepareFrame+0x1d4>
        return;
 800154a:	bf00      	nop
}
 800154c:	37c4      	adds	r7, #196	@ 0xc4
 800154e:	46bd      	mov	sp, r7
 8001550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001554:	b001      	add	sp, #4
 8001556:	4770      	bx	lr
 8001558:	08008cf8 	.word	0x08008cf8

0800155c <decodeFrame>:
*
* Używa:
*   - memcpy: Kopiowanie danych
*   - calculateCrc16: Obliczanie sumy kontrolnej
************************************************************************/
bool decodeFrame(uint8_t *bx, Frame *frame, uint8_t len) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	4613      	mov	r3, r2
 8001568:	71fb      	strb	r3, [r7, #7]
    char ownCrc[2];
    char incCrc[2];

    if(len >= MIN_DECODED_FRAME_LEN && len <= MAX_FRAME_LEN) {
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d970      	bls.n	8001652 <decodeFrame+0xf6>
        uint8_t k = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	75fb      	strb	r3, [r7, #23]

        // Debug otrzymanych danych
        debugData("Received data", bx, len);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	461a      	mov	r2, r3
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	4838      	ldr	r0, [pc, #224]	@ (800165c <decodeFrame+0x100>)
 800157c:	f7ff f9c8 	bl	8000910 <debugData>


        frame->sender = bx[k++];
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	75fa      	strb	r2, [r7, #23]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	701a      	strb	r2, [r3, #0]
        if(frame->sender != 'g')
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b67      	cmp	r3, #103	@ 0x67
 8001598:	d001      	beq.n	800159e <decodeFrame+0x42>
        {
        	return false;
 800159a:	2300      	movs	r3, #0
 800159c:	e05a      	b.n	8001654 <decodeFrame+0xf8>
        }
        frame->receiver = bx[k++];
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	75fa      	strb	r2, [r7, #23]
 80015a4:	461a      	mov	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	705a      	strb	r2, [r3, #1]

        memcpy(frame->command, &bx[k], COMMAND_LENGTH);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c98      	adds	r0, r3, #2
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	2203      	movs	r2, #3
 80015bc:	4619      	mov	r1, r3
 80015be:	f006 ff6d 	bl	800849c <memcpy>
        k += COMMAND_LENGTH;
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	3303      	adds	r3, #3
 80015c6:	75fb      	strb	r3, [r7, #23]

        uint8_t data_len = len - MIN_DECODED_FRAME_LEN;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	3b07      	subs	r3, #7
 80015cc:	75bb      	strb	r3, [r7, #22]
        memcpy(frame->data, &bx[k], data_len);
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1d58      	adds	r0, r3, #5
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	7dba      	ldrb	r2, [r7, #22]
 80015da:	4619      	mov	r1, r3
 80015dc:	f006 ff5e 	bl	800849c <memcpy>
        frame->data[data_len] = '\0';
 80015e0:	7dbb      	ldrb	r3, [r7, #22]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	4413      	add	r3, r2
 80015e6:	2200      	movs	r2, #0
 80015e8:	715a      	strb	r2, [r3, #5]
        k += data_len;
 80015ea:	7dfa      	ldrb	r2, [r7, #23]
 80015ec:	7dbb      	ldrb	r3, [r7, #22]
 80015ee:	4413      	add	r3, r2
 80015f0:	75fb      	strb	r3, [r7, #23]

        memcpy(incCrc, &bx[k], 2);
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	823b      	strh	r3, [r7, #16]
        debugCRCCalculation((uint8_t*)frame, k);
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	4619      	mov	r1, r3
 8001602:	68b8      	ldr	r0, [r7, #8]
 8001604:	f7ff f8b4 	bl	8000770 <debugCRCCalculation>
        calculateCrc16((uint8_t *)frame, k, ownCrc);
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	f107 0214 	add.w	r2, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	68b8      	ldr	r0, [r7, #8]
 8001612:	f7ff f86f 	bl	80006f4 <calculateCrc16>

        // Debug CRC
        debugData("Calculated CRC", ownCrc, 2);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	2202      	movs	r2, #2
 800161c:	4619      	mov	r1, r3
 800161e:	4810      	ldr	r0, [pc, #64]	@ (8001660 <decodeFrame+0x104>)
 8001620:	f7ff f976 	bl	8000910 <debugData>
        debugData("Received CRC", incCrc, 2);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2202      	movs	r2, #2
 800162a:	4619      	mov	r1, r3
 800162c:	480d      	ldr	r0, [pc, #52]	@ (8001664 <decodeFrame+0x108>)
 800162e:	f7ff f96f 	bl	8000910 <debugData>

        if(ownCrc[0] != incCrc[0] || ownCrc[1] != incCrc[1]) {
 8001632:	7d3a      	ldrb	r2, [r7, #20]
 8001634:	7c3b      	ldrb	r3, [r7, #16]
 8001636:	429a      	cmp	r2, r3
 8001638:	d103      	bne.n	8001642 <decodeFrame+0xe6>
 800163a:	7d7a      	ldrb	r2, [r7, #21]
 800163c:	7c7b      	ldrb	r3, [r7, #17]
 800163e:	429a      	cmp	r2, r3
 8001640:	d005      	beq.n	800164e <decodeFrame+0xf2>
            USART_sendFrame((uint8_t*)"CRC mismatch\r\n", 13);
 8001642:	210d      	movs	r1, #13
 8001644:	4808      	ldr	r0, [pc, #32]	@ (8001668 <decodeFrame+0x10c>)
 8001646:	f7fe ffe5 	bl	8000614 <USART_sendFrame>
            return false;
 800164a:	2300      	movs	r3, #0
 800164c:	e002      	b.n	8001654 <decodeFrame+0xf8>
        }
        return true;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <decodeFrame+0xf8>
    }
    return false;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	08008d04 	.word	0x08008d04
 8001660:	08008d14 	.word	0x08008d14
 8001664:	08008d24 	.word	0x08008d24
 8001668:	08008d34 	.word	0x08008d34

0800166c <processReceivedChar>:
* Błędy:
*   - Nieprawidłowe sekwencje escape
*   - Przepełnienie bufora
*   - Nieoczekiwane znaki początku/końca
************************************************************************/
void processReceivedChar(uint8_t received_char) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
    if (received_char == FRAME_START) {
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b7e      	cmp	r3, #126	@ 0x7e
 800167a:	d112      	bne.n	80016a2 <processReceivedChar+0x36>
    	if(in_frame) {
 800167c:	4b4f      	ldr	r3, [pc, #316]	@ (80017bc <processReceivedChar+0x150>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <processReceivedChar+0x22>
    		resetFrameState();
 8001684:	f7ff fa72 	bl	8000b6c <resetFrameState>
    		in_frame = true;
 8001688:	4b4c      	ldr	r3, [pc, #304]	@ (80017bc <processReceivedChar+0x150>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
    	}
    	in_frame = true;
 800168e:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <processReceivedChar+0x150>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
    	bx_index = 0;
 8001694:	4b4a      	ldr	r3, [pc, #296]	@ (80017c0 <processReceivedChar+0x154>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    	escape_detected = false;
 800169a:	4b4a      	ldr	r3, [pc, #296]	@ (80017c4 <processReceivedChar+0x158>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
    	resetFrameState();
    }
}
 80016a0:	e088      	b.n	80017b4 <processReceivedChar+0x148>
    } else if (received_char == FRAME_END && escape_detected == false) {
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b60      	cmp	r3, #96	@ 0x60
 80016a6:	d133      	bne.n	8001710 <processReceivedChar+0xa4>
 80016a8:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <processReceivedChar+0x158>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f083 0301 	eor.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d02c      	beq.n	8001710 <processReceivedChar+0xa4>
        if (in_frame) {
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <processReceivedChar+0x150>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01f      	beq.n	80016fe <processReceivedChar+0x92>
            if (decodeFrame(bx, &frame, bx_index)) {
 80016be:	4b40      	ldr	r3, [pc, #256]	@ (80017c0 <processReceivedChar+0x154>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4940      	ldr	r1, [pc, #256]	@ (80017c8 <processReceivedChar+0x15c>)
 80016c8:	4840      	ldr	r0, [pc, #256]	@ (80017cc <processReceivedChar+0x160>)
 80016ca:	f7ff ff47 	bl	800155c <decodeFrame>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <processReceivedChar+0x80>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "GOOD");
 80016d4:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <processReceivedChar+0x164>)
 80016d6:	4a3f      	ldr	r2, [pc, #252]	@ (80017d4 <processReceivedChar+0x168>)
 80016d8:	2167      	movs	r1, #103	@ 0x67
 80016da:	2068      	movs	r0, #104	@ 0x68
 80016dc:	f7ff fe4c 	bl	8001378 <prepareFrame>
            	stopAnimation();
 80016e0:	f7ff f9d0 	bl	8000a84 <stopAnimation>
                handleCommand(&frame);
 80016e4:	4838      	ldr	r0, [pc, #224]	@ (80017c8 <processReceivedChar+0x15c>)
 80016e6:	f000 f879 	bl	80017dc <handleCommand>
 80016ea:	e005      	b.n	80016f8 <processReceivedChar+0x8c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80016ec:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <processReceivedChar+0x16c>)
 80016ee:	4a39      	ldr	r2, [pc, #228]	@ (80017d4 <processReceivedChar+0x168>)
 80016f0:	2167      	movs	r1, #103	@ 0x67
 80016f2:	2068      	movs	r0, #104	@ 0x68
 80016f4:	f7ff fe40 	bl	8001378 <prepareFrame>
            resetFrameState();
 80016f8:	f7ff fa38 	bl	8000b6c <resetFrameState>
        if (in_frame) {
 80016fc:	e05a      	b.n	80017b4 <processReceivedChar+0x148>
            prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 80016fe:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <processReceivedChar+0x16c>)
 8001700:	4a34      	ldr	r2, [pc, #208]	@ (80017d4 <processReceivedChar+0x168>)
 8001702:	2167      	movs	r1, #103	@ 0x67
 8001704:	2068      	movs	r0, #104	@ 0x68
 8001706:	f7ff fe37 	bl	8001378 <prepareFrame>
            resetFrameState();
 800170a:	f7ff fa2f 	bl	8000b6c <resetFrameState>
        if (in_frame) {
 800170e:	e051      	b.n	80017b4 <processReceivedChar+0x148>
    } else if (in_frame) {
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <processReceivedChar+0x150>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d04a      	beq.n	80017ae <processReceivedChar+0x142>
        if (escape_detected) {
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <processReceivedChar+0x158>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d02f      	beq.n	8001780 <processReceivedChar+0x114>
            if (received_char == FRAME_START_STUFF) {
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b5e      	cmp	r3, #94	@ 0x5e
 8001724:	d108      	bne.n	8001738 <processReceivedChar+0xcc>
                bx[bx_index++] = FRAME_START;
 8001726:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <processReceivedChar+0x154>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	4924      	ldr	r1, [pc, #144]	@ (80017c0 <processReceivedChar+0x154>)
 800172e:	600a      	str	r2, [r1, #0]
 8001730:	4a26      	ldr	r2, [pc, #152]	@ (80017cc <processReceivedChar+0x160>)
 8001732:	217e      	movs	r1, #126	@ 0x7e
 8001734:	54d1      	strb	r1, [r2, r3]
 8001736:	e01f      	b.n	8001778 <processReceivedChar+0x10c>
            } else if (received_char == ESCAPE_CHAR_STUFF) {
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b5d      	cmp	r3, #93	@ 0x5d
 800173c:	d108      	bne.n	8001750 <processReceivedChar+0xe4>
                bx[bx_index++] = ESCAPE_CHAR;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <processReceivedChar+0x154>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	491e      	ldr	r1, [pc, #120]	@ (80017c0 <processReceivedChar+0x154>)
 8001746:	600a      	str	r2, [r1, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	@ (80017cc <processReceivedChar+0x160>)
 800174a:	217d      	movs	r1, #125	@ 0x7d
 800174c:	54d1      	strb	r1, [r2, r3]
 800174e:	e013      	b.n	8001778 <processReceivedChar+0x10c>
            } else if (received_char == FRAME_END_STUFF) {
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b26      	cmp	r3, #38	@ 0x26
 8001754:	d108      	bne.n	8001768 <processReceivedChar+0xfc>
                bx[bx_index++] = FRAME_END;
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <processReceivedChar+0x154>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	4918      	ldr	r1, [pc, #96]	@ (80017c0 <processReceivedChar+0x154>)
 800175e:	600a      	str	r2, [r1, #0]
 8001760:	4a1a      	ldr	r2, [pc, #104]	@ (80017cc <processReceivedChar+0x160>)
 8001762:	2160      	movs	r1, #96	@ 0x60
 8001764:	54d1      	strb	r1, [r2, r3]
 8001766:	e007      	b.n	8001778 <processReceivedChar+0x10c>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "FAIL");
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <processReceivedChar+0x16c>)
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <processReceivedChar+0x168>)
 800176c:	2167      	movs	r1, #103	@ 0x67
 800176e:	2068      	movs	r0, #104	@ 0x68
 8001770:	f7ff fe02 	bl	8001378 <prepareFrame>
                resetFrameState();
 8001774:	f7ff f9fa 	bl	8000b6c <resetFrameState>
            escape_detected = false;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <processReceivedChar+0x158>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	e019      	b.n	80017b4 <processReceivedChar+0x148>
        } else if (received_char == ESCAPE_CHAR) {
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b7d      	cmp	r3, #125	@ 0x7d
 8001784:	d103      	bne.n	800178e <processReceivedChar+0x122>
            escape_detected = true;
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <processReceivedChar+0x158>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
}
 800178c:	e012      	b.n	80017b4 <processReceivedChar+0x148>
            if (bx_index < sizeof(bx)) {
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <processReceivedChar+0x154>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d808      	bhi.n	80017a8 <processReceivedChar+0x13c>
                bx[bx_index++] = received_char;
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <processReceivedChar+0x154>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	4908      	ldr	r1, [pc, #32]	@ (80017c0 <processReceivedChar+0x154>)
 800179e:	600a      	str	r2, [r1, #0]
 80017a0:	490a      	ldr	r1, [pc, #40]	@ (80017cc <processReceivedChar+0x160>)
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	54ca      	strb	r2, [r1, r3]
}
 80017a6:	e005      	b.n	80017b4 <processReceivedChar+0x148>
            	resetFrameState();
 80017a8:	f7ff f9e0 	bl	8000b6c <resetFrameState>
}
 80017ac:	e002      	b.n	80017b4 <processReceivedChar+0x148>
    	resetFrameState();
 80017ae:	f7ff f9dd 	bl	8000b6c <resetFrameState>
}
 80017b2:	e7ff      	b.n	80017b4 <processReceivedChar+0x148>
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000ca8 	.word	0x20000ca8
 80017c0:	20000ca4 	.word	0x20000ca4
 80017c4:	20000ca0 	.word	0x20000ca0
 80017c8:	20000cac 	.word	0x20000cac
 80017cc:	20000ba0 	.word	0x20000ba0
 80017d0:	08008d44 	.word	0x08008d44
 80017d4:	08008cd8 	.word	0x08008cd8
 80017d8:	08008d4c 	.word	0x08008d4c

080017dc <handleCommand>:
* Błędy:
*   - Nieznana komenda
*   - Nieprawidłowe współrzędne
*   - Przekroczenie obszaru wyświetlacza
************************************************************************/
void handleCommand(Frame *frame) {
 80017dc:	b5b0      	push	{r4, r5, r7, lr}
 80017de:	b092      	sub	sp, #72	@ 0x48
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	6078      	str	r0, [r7, #4]
    if (frame == NULL) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8084 	beq.w	80018f4 <handleCommand+0x118>
        return;
    }

    CommandEntry commandTable[COMMAND_COUNT] = {
 80017ec:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <handleCommand+0x120>)
 80017ee:	f107 0414 	add.w	r4, r7, #20
 80017f2:	461d      	mov	r5, r3
 80017f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001800:	e884 0003 	stmia.w	r4, {r0, r1}
        {"ONT", executeONT},
        {"ONN", executeONN},
        {"OFF", executeOFF}
    };

    for (int i = 0; i < COMMAND_COUNT; i++) {
 8001804:	2300      	movs	r3, #0
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001808:	e067      	b.n	80018da <handleCommand+0xfe>
            if (safeCompare(frame->command, commandTable[i].command, COMMAND_LENGTH)) {
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	1c98      	adds	r0, r3, #2
 800180e:	f107 0214 	add.w	r2, r7, #20
 8001812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	2203      	movs	r2, #3
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f94e 	bl	8000abc <safeCompare>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d056      	beq.n	80018d4 <handleCommand+0xf8>
                if (safeCompare(commandTable[i].command, "OFF", COMMAND_LENGTH)) {
 8001826:	f107 0214 	add.w	r2, r7, #20
 800182a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	2203      	movs	r2, #3
 8001832:	4933      	ldr	r1, [pc, #204]	@ (8001900 <handleCommand+0x124>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f941 	bl	8000abc <safeCompare>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00f      	beq.n	8001860 <handleCommand+0x84>
                    lcdClear();
 8001840:	f000 fabe 	bl	8001dc0 <lcdClear>
                    commandTable[i].function(frame);
 8001844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	3340      	adds	r3, #64	@ 0x40
 800184a:	443b      	add	r3, r7
 800184c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
                    copyToBuffer();
 8001854:	f7ff f924 	bl	8000aa0 <copyToBuffer>
                    clearFrame(frame);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff facb 	bl	8000df4 <clearFrame>
                    return;
 800185e:	e04a      	b.n	80018f6 <handleCommand+0x11a>
                }

                int x, y;
                if (parseCoordinates(frame->data, &x, &y)) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3305      	adds	r3, #5
 8001864:	f107 020c 	add.w	r2, r7, #12
 8001868:	f107 0110 	add.w	r1, r7, #16
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fd08 	bl	8001282 <parseCoordinates>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01f      	beq.n	80018b8 <handleCommand+0xdc>
                    if (isWithinBounds(x, y)) {
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fce2 	bl	8001248 <isWithinBounds>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00f      	beq.n	80018aa <handleCommand+0xce>
                        lcdClear();
 800188a:	f000 fa99 	bl	8001dc0 <lcdClear>
                        commandTable[i].function(frame);
 800188e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	3340      	adds	r3, #64	@ 0x40
 8001894:	443b      	add	r3, r7
 8001896:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
                        copyToBuffer();
 800189e:	f7ff f8ff 	bl	8000aa0 <copyToBuffer>
                        clearFrame(frame);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff faa6 	bl	8000df4 <clearFrame>
                        return;
 80018a8:	e025      	b.n	80018f6 <handleCommand+0x11a>
                    } else {
                    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "DISPLAY_AREA");
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <handleCommand+0x128>)
 80018ac:	4a16      	ldr	r2, [pc, #88]	@ (8001908 <handleCommand+0x12c>)
 80018ae:	2167      	movs	r1, #103	@ 0x67
 80018b0:	2068      	movs	r0, #104	@ 0x68
 80018b2:	f7ff fd61 	bl	8001378 <prepareFrame>
                    return;
 80018b6:	e01e      	b.n	80018f6 <handleCommand+0x11a>
                }
            } else {
            	lcdClear();
 80018b8:	f000 fa82 	bl	8001dc0 <lcdClear>
            	copyToBuffer();
 80018bc:	f7ff f8f0 	bl	8000aa0 <copyToBuffer>
                prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->data);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3305      	adds	r3, #5
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <handleCommand+0x130>)
 80018c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <handleCommand+0x12c>)
 80018ca:	2167      	movs	r1, #103	@ 0x67
 80018cc:	2068      	movs	r0, #104	@ 0x68
 80018ce:	f7ff fd53 	bl	8001378 <prepareFrame>
                return;
 80018d2:	e010      	b.n	80018f6 <handleCommand+0x11a>
    for (int i = 0; i < COMMAND_COUNT; i++) {
 80018d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018d6:	3301      	adds	r3, #1
 80018d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018dc:	2b04      	cmp	r3, #4
 80018de:	dd94      	ble.n	800180a <handleCommand+0x2e>
            }
        }
    }
    prepareFrame(STM32_ADDR, PC_ADDR, "BCK", "NOT_RECOGNIZED%s", frame->command);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3302      	adds	r3, #2
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <handleCommand+0x130>)
 80018e8:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <handleCommand+0x12c>)
 80018ea:	2167      	movs	r1, #103	@ 0x67
 80018ec:	2068      	movs	r0, #104	@ 0x68
 80018ee:	f7ff fd43 	bl	8001378 <prepareFrame>
 80018f2:	e000      	b.n	80018f6 <handleCommand+0x11a>
        return;
 80018f4:	bf00      	nop
}
 80018f6:	3740      	adds	r7, #64	@ 0x40
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdb0      	pop	{r4, r5, r7, pc}
 80018fc:	08008d68 	.word	0x08008d68
 8001900:	08008d54 	.word	0x08008d54
 8001904:	08008d58 	.word	0x08008d58
 8001908:	08008cd8 	.word	0x08008cd8
 800190c:	08008cc4 	.word	0x08008cc4

08001910 <updateScrollingText>:



void updateScrollingText(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af02      	add	r7, sp, #8
	if (!text.isScrolling || text.scrollSpeed == 0) {
 8001916:	4b64      	ldr	r3, [pc, #400]	@ (8001aa8 <updateScrollingText+0x198>)
 8001918:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 800191c:	f083 0301 	eor.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80bb 	bne.w	8001a9e <updateScrollingText+0x18e>
 8001928:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa8 <updateScrollingText+0x198>)
 800192a:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80b5 	beq.w	8001a9e <updateScrollingText+0x18e>
	        return;
	}
    uint32_t currentTime = HAL_GetTick();
 8001934:	f000 fee8 	bl	8002708 <HAL_GetTick>
 8001938:	6078      	str	r0, [r7, #4]
    if ((currentTime - text.lastUpdate) >= (256 - text.scrollSpeed)) {
 800193a:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa8 <updateScrollingText+0x198>)
 800193c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <updateScrollingText+0x198>)
 8001946:	f892 20cd 	ldrb.w	r2, [r2, #205]	@ 0xcd
 800194a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 800194e:	4293      	cmp	r3, r2
 8001950:	f0c0 80a6 	bcc.w	8001aa0 <updateScrollingText+0x190>
        text.lastUpdate = currentTime;
 8001954:	4a54      	ldr	r2, [pc, #336]	@ (8001aa8 <updateScrollingText+0x198>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

        // Oblicz szerokość znaku w zależności od fontu
        uint8_t charWidth;
        uint8_t charHeight;
        const uint8_t* font;
        switch(text.fontSize) {
 800195c:	4b52      	ldr	r3, [pc, #328]	@ (8001aa8 <updateScrollingText+0x198>)
 800195e:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8001962:	2b03      	cmp	r3, #3
 8001964:	d014      	beq.n	8001990 <updateScrollingText+0x80>
 8001966:	2b03      	cmp	r3, #3
 8001968:	dc19      	bgt.n	800199e <updateScrollingText+0x8e>
 800196a:	2b01      	cmp	r3, #1
 800196c:	d002      	beq.n	8001974 <updateScrollingText+0x64>
 800196e:	2b02      	cmp	r3, #2
 8001970:	d007      	beq.n	8001982 <updateScrollingText+0x72>
 8001972:	e014      	b.n	800199e <updateScrollingText+0x8e>
            case 1: charWidth = 5; charHeight = 7; font=font5x7; break;
 8001974:	2305      	movs	r3, #5
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	2307      	movs	r3, #7
 800197a:	73bb      	strb	r3, [r7, #14]
 800197c:	4b4b      	ldr	r3, [pc, #300]	@ (8001aac <updateScrollingText+0x19c>)
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e014      	b.n	80019ac <updateScrollingText+0x9c>
            case 2: charWidth = 5; charHeight = 8; font=font5x8; break;
 8001982:	2305      	movs	r3, #5
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	2308      	movs	r3, #8
 8001988:	73bb      	strb	r3, [r7, #14]
 800198a:	4b49      	ldr	r3, [pc, #292]	@ (8001ab0 <updateScrollingText+0x1a0>)
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	e00d      	b.n	80019ac <updateScrollingText+0x9c>
            case 3: charWidth = 6; charHeight = 9; font=font6x9;break;
 8001990:	2306      	movs	r3, #6
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	2309      	movs	r3, #9
 8001996:	73bb      	strb	r3, [r7, #14]
 8001998:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <updateScrollingText+0x1a4>)
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	e006      	b.n	80019ac <updateScrollingText+0x9c>
            default: charWidth = 5; charHeight = 7; font=font5x7; break;
 800199e:	2305      	movs	r3, #5
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	2307      	movs	r3, #7
 80019a4:	73bb      	strb	r3, [r7, #14]
 80019a6:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <updateScrollingText+0x19c>)
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	bf00      	nop
        }

        text.x += charWidth;
 80019ac:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa8 <updateScrollingText+0x198>)
 80019ae:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	4413      	add	r3, r2
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa8 <updateScrollingText+0x198>)
 80019ba:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

                // Oblicz całkowitą szerokość tekstu

                // Jeśli tekst wyszedł całkowicie za ekran
                if (text.x >= LCD_WIDTH - (charWidth * text.textLength)) {
 80019be:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <updateScrollingText+0x198>)
 80019c0:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80019c4:	4619      	mov	r1, r3
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	4a37      	ldr	r2, [pc, #220]	@ (8001aa8 <updateScrollingText+0x198>)
 80019ca:	f892 20d0 	ldrb.w	r2, [r2, #208]	@ 0xd0
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80019d6:	4299      	cmp	r1, r3
 80019d8:	db43      	blt.n	8001a62 <updateScrollingText+0x152>
                    if (text.firstIteration) {
 80019da:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <updateScrollingText+0x198>)
 80019dc:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d024      	beq.n	8001a2e <updateScrollingText+0x11e>
                        // W pierwszej iteracji używamy startowych współrzędnych
                        text.x = text.startX;  // Zaczynamy zza lewej krawędzi
 80019e4:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <updateScrollingText+0x198>)
 80019e6:	f893 20ca 	ldrb.w	r2, [r3, #202]	@ 0xca
 80019ea:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa8 <updateScrollingText+0x198>)
 80019ec:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 80019f0:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <updateScrollingText+0x198>)
 80019f2:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	4413      	add	r3, r2
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <updateScrollingText+0x198>)
 80019fe:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu w pierwszej iteracji
                        if (text.y >= LCD_HEIGHT - charHeight) {
 8001a02:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a04:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001a08:	461a      	mov	r2, r3
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001a10:	429a      	cmp	r2, r3
 8001a12:	db26      	blt.n	8001a62 <updateScrollingText+0x152>
                            text.firstIteration = false;  // Kończymy pierwszą iterację
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                            text.x = 0;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                            text.y = 0;
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 8001a2c:	e019      	b.n	8001a62 <updateScrollingText+0x152>
                        }
                    } else {
                        // W kolejnych iteracjach zaczynamy od lewej krawędzi
                        text.x = 0;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
                        text.y += charHeight;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a38:	f893 20c9 	ldrb.w	r2, [r3, #201]	@ 0xc9
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a44:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9

                        // Jeśli doszliśmy do dołu ekranu
                        if (text.y >= LCD_HEIGHT - charHeight) {
 8001a48:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a4a:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001a4e:	461a      	mov	r2, r3
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001a56:	429a      	cmp	r2, r3
 8001a58:	db03      	blt.n	8001a62 <updateScrollingText+0x152>
                            text.y = 0;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
                        }
                    }
                }

        if (!lcdIsBusy()) {
 8001a62:	f000 fa19 	bl	8001e98 <lcdIsBusy>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d016      	beq.n	8001aa0 <updateScrollingText+0x190>
            lcdClear();
 8001a72:	f000 f9a5 	bl	8001dc0 <lcdClear>
            hagl_put_text(text.displayText, text.x, text.y, text.color, font);
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a78:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8001a7c:	b219      	sxth	r1, r3
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a80:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a88:	f8b3 00ce 	ldrh.w	r0, [r3, #206]	@ 0xce
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4603      	mov	r3, r0
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <updateScrollingText+0x198>)
 8001a94:	f005 fec0 	bl	8007818 <hagl_put_text>
            lcdCopy();
 8001a98:	f000 f966 	bl	8001d68 <lcdCopy>
 8001a9c:	e000      	b.n	8001aa0 <updateScrollingText+0x190>
	        return;
 8001a9e:	bf00      	nop
        }
    }
}
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000d34 	.word	0x20000d34
 8001aac:	08008dd0 	.word	0x08008dd0
 8001ab0:	0800c2d8 	.word	0x0800c2d8
 8001ab4:	0800f17c 	.word	0x0800f17c

08001ab8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	4a49      	ldr	r2, [pc, #292]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ada:	4b47      	ldr	r3, [pc, #284]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae6:	4b44      	ldr	r3, [pc, #272]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	4a43      	ldr	r2, [pc, #268]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af2:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	4b38      	ldr	r3, [pc, #224]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	4a37      	ldr	r2, [pc, #220]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b22:	4b35      	ldr	r3, [pc, #212]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	4b32      	ldr	r3, [pc, #200]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	4a31      	ldr	r2, [pc, #196]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf8 <MX_GPIO_Init+0x140>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f641 0106 	movw	r1, #6150	@ 0x1806
 8001b4c:	482b      	ldr	r0, [pc, #172]	@ (8001bfc <MX_GPIO_Init+0x144>)
 8001b4e:	f001 fb19 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001b52:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8001b56:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4826      	ldr	r0, [pc, #152]	@ (8001c00 <MX_GPIO_Init+0x148>)
 8001b68:	f001 f962 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b70:	2303      	movs	r3, #3
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4821      	ldr	r0, [pc, #132]	@ (8001c04 <MX_GPIO_Init+0x14c>)
 8001b80:	f001 f956 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001b84:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001b88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9c:	f001 f948 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001ba0:	f24e 33f9 	movw	r3, #58361	@ 0xe3f9
 8001ba4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4811      	ldr	r0, [pc, #68]	@ (8001bfc <MX_GPIO_Init+0x144>)
 8001bb6:	f001 f93b 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|RST_Pin|DC_Pin|CS_Pin;
 8001bba:	f641 0306 	movw	r3, #6150	@ 0x1806
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480a      	ldr	r0, [pc, #40]	@ (8001bfc <MX_GPIO_Init+0x144>)
 8001bd4:	f001 f92c 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <MX_GPIO_Init+0x150>)
 8001bec:	f001 f920 	bl	8002e30 <HAL_GPIO_Init>

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	48000400 	.word	0x48000400
 8001c00:	48000800 	.word	0x48000800
 8001c04:	48001c00 	.word	0x48001c00
 8001c08:	48000c00 	.word	0x48000c00

08001c0c <lcdCmd>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdCmd(uint8_t cmd)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <lcdCmd+0x44>)
 8001c1e:	f001 fab1 	bl	8003184 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c28:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <lcdCmd+0x44>)
 8001c2a:	f001 faab 	bl	8003184 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001c2e:	1df9      	adds	r1, r7, #7
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	2201      	movs	r2, #1
 8001c36:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <lcdCmd+0x48>)
 8001c38:	f002 fe7f 	bl	800493a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c42:	4803      	ldr	r0, [pc, #12]	@ (8001c50 <lcdCmd+0x44>)
 8001c44:	f001 fa9e 	bl	8003184 <HAL_GPIO_WritePin>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	48000400 	.word	0x48000400
 8001c54:	2000ae14 	.word	0x2000ae14

08001c58 <lcdData>:
* Korzysta z:
*   - HAL_GPIO_WritePin: ustawienie pinów CS i DC
*   - HAL_SPI_Transmit: transmisja przez SPI
************************************************************************/
static void lcdData(uint8_t data)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c68:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <lcdData+0x44>)
 8001c6a:	f001 fa8b 	bl	8003184 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c74:	4809      	ldr	r0, [pc, #36]	@ (8001c9c <lcdData+0x44>)
 8001c76:	f001 fa85 	bl	8003184 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001c7a:	1df9      	adds	r1, r7, #7
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <lcdData+0x48>)
 8001c84:	f002 fe59 	bl	800493a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <lcdData+0x44>)
 8001c90:	f001 fa78 	bl	8003184 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	2000ae14 	.word	0x2000ae14

08001ca4 <lcdSend>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komendy
*   - lcd_data: wysyłanie danych
************************************************************************/
static void lcdSend(uint16_t value)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <lcdSend+0x20>
		lcdCmd(value);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ffa5 	bl	8001c0c <lcdCmd>
	} else {
		lcdData(value);
	}
}
 8001cc2:	e004      	b.n	8001cce <lcdSend+0x2a>
		lcdData(value);
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffc5 	bl	8001c58 <lcdData>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <lcdData16>:
*   - value: 16-bitowa wartość do wysłania
* Korzysta z:
*   - lcd_data: wysyłanie pojedynczych bajtów
************************************************************************/
static void lcdData16(uint16_t value)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	80fb      	strh	r3, [r7, #6]
	lcdData(value >> 8);
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ffb5 	bl	8001c58 <lcdData>
	lcdData(value);
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ffb0 	bl	8001c58 <lcdData>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <lcdSetWindow>:
* Korzysta z:
*   - lcd_cmd: wysyłanie komend CASET i RASET
*   - lcd_data16: wysyłanie współrzędnych
************************************************************************/
static void lcdSetWindow(int x, int y, int width, int height)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  lcdCmd(ST7735S_CASET);
 8001d0e:	202a      	movs	r0, #42	@ 0x2a
 8001d10:	f7ff ff7c 	bl	8001c0c <lcdCmd>
  lcdData16(LCD_OFFSET_X + x);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ffda 	bl	8001cd6 <lcdData16>
  lcdData16(LCD_OFFSET_X + x + width - 1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ffd1 	bl	8001cd6 <lcdData16>

  lcdCmd(ST7735S_RASET);
 8001d34:	202b      	movs	r0, #43	@ 0x2b
 8001d36:	f7ff ff69 	bl	8001c0c <lcdCmd>
  lcdData16(LCD_OFFSET_Y + y);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3302      	adds	r3, #2
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ffc7 	bl	8001cd6 <lcdData16>
  lcdData16(LCD_OFFSET_Y + y + height- 1);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ffbc 	bl	8001cd6 <lcdData16>
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <lcdCopy>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdCopy(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    if (lcdIsBusy()) {
 8001d6c:	f000 f894 	bl	8001e98 <lcdIsBusy>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d11b      	bne.n	8001dae <lcdCopy+0x46>
        return;
    }

    lcdSetWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001d76:	2380      	movs	r3, #128	@ 0x80
 8001d78:	22a0      	movs	r2, #160	@ 0xa0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ffbf 	bl	8001d00 <lcdSetWindow>
    lcdCmd(ST7735S_RAMWR);
 8001d82:	202c      	movs	r0, #44	@ 0x2c
 8001d84:	f7ff ff42 	bl	8001c0c <lcdCmd>
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d8e:	4809      	ldr	r0, [pc, #36]	@ (8001db4 <lcdCopy+0x4c>)
 8001d90:	f001 f9f8 	bl	8003184 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d9a:	4806      	ldr	r0, [pc, #24]	@ (8001db4 <lcdCopy+0x4c>)
 8001d9c:	f001 f9f2 	bl	8003184 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, sizeof(frameBuffer));
 8001da0:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001da4:	4904      	ldr	r1, [pc, #16]	@ (8001db8 <lcdCopy+0x50>)
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <lcdCopy+0x54>)
 8001da8:	f002 ff3e 	bl	8004c28 <HAL_SPI_Transmit_DMA>
 8001dac:	e000      	b.n	8001db0 <lcdCopy+0x48>
        return;
 8001dae:	bf00      	nop
}
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	48000400 	.word	0x48000400
 8001db8:	20000e0c 	.word	0x20000e0c
 8001dbc:	2000ae14 	.word	0x2000ae14

08001dc0 <lcdClear>:
* Korzysta z:
*   - lcd_set_window: ustawienie obszaru zapisu
*   - HAL_SPI_Transmit: przesłanie danych
************************************************************************/
void lcdClear(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001dc4:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <lcdClear+0x14>)
 8001dcc:	f006 fb0e 	bl	80083ec <memset>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000e0c 	.word	0x20000e0c

08001dd8 <lcdInit>:
*   4. Włącza wyświetlacz i podświetlenie
* Korzysta z:
*   - lcd_send: wysyłanie komend inicjalizacyjnych
*   - HAL_GPIO_WritePin: sterowanie pinami RST i BL
************************************************************************/
void lcdInit(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
    int i;
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2104      	movs	r1, #4
 8001de2:	481c      	ldr	r0, [pc, #112]	@ (8001e54 <lcdInit+0x7c>)
 8001de4:	f001 f9ce 	bl	8003184 <HAL_GPIO_WritePin>
    delay(100);
 8001de8:	2064      	movs	r0, #100	@ 0x64
 8001dea:	f000 f8c9 	bl	8001f80 <delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	2104      	movs	r1, #4
 8001df2:	4818      	ldr	r0, [pc, #96]	@ (8001e54 <lcdInit+0x7c>)
 8001df4:	f001 f9c6 	bl	8003184 <HAL_GPIO_WritePin>
    delay(100);
 8001df8:	2064      	movs	r0, #100	@ 0x64
 8001dfa:	f000 f8c1 	bl	8001f80 <delay>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	e009      	b.n	8001e18 <lcdInit+0x40>
        lcdSend(init_table[i]);
 8001e04:	4a14      	ldr	r2, [pc, #80]	@ (8001e58 <lcdInit+0x80>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff49 	bl	8001ca4 <lcdSend>
    for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3301      	adds	r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b4b      	cmp	r3, #75	@ 0x4b
 8001e1c:	d9f2      	bls.n	8001e04 <lcdInit+0x2c>
    }
    delay(200);
 8001e1e:	20c8      	movs	r0, #200	@ 0xc8
 8001e20:	f000 f8ae 	bl	8001f80 <delay>
    lcdCmd(ST7735S_SLPOUT);
 8001e24:	2011      	movs	r0, #17
 8001e26:	f7ff fef1 	bl	8001c0c <lcdCmd>
    delay(120);
 8001e2a:	2078      	movs	r0, #120	@ 0x78
 8001e2c:	f000 f8a8 	bl	8001f80 <delay>
    lcdCmd(ST7735S_DISPON);
 8001e30:	2029      	movs	r0, #41	@ 0x29
 8001e32:	f7ff feeb 	bl	8001c0c <lcdCmd>
    HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <lcdInit+0x7c>)
 8001e3c:	f001 f9a2 	bl	8003184 <HAL_GPIO_WritePin>
    memset(frameBuffer, 0, sizeof(frameBuffer));
 8001e40:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8001e44:	2100      	movs	r1, #0
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <lcdInit+0x84>)
 8001e48:	f006 fad0 	bl	80083ec <memset>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	48000400 	.word	0x48000400
 8001e58:	08012134 	.word	0x08012134
 8001e5c:	20000e0c 	.word	0x20000e0c

08001e60 <lcdPutPixel>:
* Parametry:
*   - x, y: Współrzędne piksela
*   - color: Kolor w formacie RGB565
************************************************************************/
void lcdPutPixel(int x, int y, uint16_t color)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	80fb      	strh	r3, [r7, #6]
        frameBuffer[y * LCD_WIDTH + x] = color;
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4905      	ldr	r1, [pc, #20]	@ (8001e94 <lcdPutPixel+0x34>)
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000e0c 	.word	0x20000e0c

08001e98 <lcdIsBusy>:
bool lcdIsBusy(void) {
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
    return transferInProgress;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <lcdIsBusy+0x14>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	2000ae0c 	.word	0x2000ae0c

08001eb0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi2) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a08      	ldr	r2, [pc, #32]	@ (8001edc <HAL_SPI_TxCpltCallback+0x2c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d108      	bne.n	8001ed2 <HAL_SPI_TxCpltCallback+0x22>
        HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ec6:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <HAL_SPI_TxCpltCallback+0x30>)
 8001ec8:	f001 f95c 	bl	8003184 <HAL_GPIO_WritePin>
        transferInProgress = false;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_SPI_TxCpltCallback+0x34>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
    }
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000ae14 	.word	0x2000ae14
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	2000ae0c 	.word	0x2000ae0c

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	@ (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f7ff ffc2 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <delay>:
*   - delayMs: Liczba milisekund do odczekania

* Korzysta z:
*   - tick: Globalna zmienna zwiększana w przerwaniu systemowym
************************************************************************/
void delay(uint32_t delayMs){
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	uint32_t startTime = tick;
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <delay+0x2c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
	while(tick < (startTime+delayMs));
 8001f8e:	bf00      	nop
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	441a      	add	r2, r3
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <delay+0x2c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d8f8      	bhi.n	8001f90 <delay+0x10>
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	2000ae10 	.word	0x2000ae10

08001fb0 <waitForFrame>:
*   - USART_kbhit: Sprawdzenie dostępności danych
*   - USART_getchar: Pobranie znaku z UART
*   - processReceivedChar: Przetworzenie odebranego znaku
************************************************************************/
void waitForFrame(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
	if (USART_kbhit()) {
 8001fb6:	f7fe faf5 	bl	80005a4 <USART_kbhit>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <waitForFrame+0x20>
	        uint8_t received_char = USART_getchar();
 8001fc0:	f7fe fb02 	bl	80005c8 <USART_getchar>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	71fb      	strb	r3, [r7, #7]
	        processReceivedChar(received_char);
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fb4e 	bl	800166c <processReceivedChar>
	 }
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fdc:	f000 fb2b 	bl	8002636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe0:	f000 f812 	bl	8002008 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  SysTick_Config( 80000000 / 1000 ); //ustawienie systicka na 1 ms
 8001fe4:	4807      	ldr	r0, [pc, #28]	@ (8002004 <main+0x2c>)
 8001fe6:	f7ff ffa9 	bl	8001f3c <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fea:	f7ff fd65 	bl	8001ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fee:	f7fe fc71 	bl	80008d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ff2:	f000 fa4b 	bl	800248c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001ff6:	f000 f85f 	bl	80020b8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  lcdInit(); // inicjalizacja wyświetlacza
 8001ffa:	f7ff feed 	bl	8001dd8 <lcdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //TODO umieścić resetowanie wyświetlacza po wyktyciu np. dwóch ramek albo kolejnej ramki.
  while (1)
  {
	  waitForFrame();
 8001ffe:	f7ff ffd7 	bl	8001fb0 <waitForFrame>
 8002002:	e7fc      	b.n	8001ffe <main+0x26>
 8002004:	00013880 	.word	0x00013880

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b096      	sub	sp, #88	@ 0x58
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2244      	movs	r2, #68	@ 0x44
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f006 f9e8 	bl	80083ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	463b      	mov	r3, r7
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800202a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800202e:	f001 f8cf 	bl	80031d0 <HAL_PWREx_ControlVoltageScaling>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002038:	f000 f838 	bl	80020ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800203c:	2310      	movs	r3, #16
 800203e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002040:	2301      	movs	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002048:	2360      	movs	r3, #96	@ 0x60
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204c:	2302      	movs	r3, #2
 800204e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002050:	2301      	movs	r3, #1
 8002052:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002058:	2328      	movs	r3, #40	@ 0x28
 800205a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800205c:	2307      	movs	r3, #7
 800205e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002060:	2302      	movs	r3, #2
 8002062:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002064:	2302      	movs	r3, #2
 8002066:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4618      	mov	r0, r3
 800206e:	f001 f905 	bl	800327c <HAL_RCC_OscConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002078:	f000 f818 	bl	80020ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207c:	230f      	movs	r3, #15
 800207e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002080:	2303      	movs	r3, #3
 8002082:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	2104      	movs	r1, #4
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fccd 	bl	8003a34 <HAL_RCC_ClockConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80020a0:	f000 f804 	bl	80020ac <Error_Handler>
  }
}
 80020a4:	bf00      	nop
 80020a6:	3758      	adds	r7, #88	@ 0x58
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <Error_Handler+0x8>

080020b8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <MX_SPI2_Init+0x74>)
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <MX_SPI2_Init+0x78>)
 80020c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <MX_SPI2_Init+0x74>)
 80020c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <MX_SPI2_Init+0x74>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <MX_SPI2_Init+0x74>)
 80020d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <MX_SPI2_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020de:	4b13      	ldr	r3, [pc, #76]	@ (800212c <MX_SPI2_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <MX_SPI2_Init+0x74>)
 80020e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <MX_SPI2_Init+0x74>)
 80020ee:	2210      	movs	r2, #16
 80020f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <MX_SPI2_Init+0x74>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <MX_SPI2_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <MX_SPI2_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <MX_SPI2_Init+0x74>)
 8002106:	2207      	movs	r2, #7
 8002108:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <MX_SPI2_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <MX_SPI2_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002116:	4805      	ldr	r0, [pc, #20]	@ (800212c <MX_SPI2_Init+0x74>)
 8002118:	f002 fb6c 	bl	80047f4 <HAL_SPI_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002122:	f7ff ffc3 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000ae14 	.word	0x2000ae14
 8002130:	40003800 	.word	0x40003800

08002134 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a3e      	ldr	r2, [pc, #248]	@ (800224c <HAL_SPI_MspInit+0x118>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d175      	bne.n	8002242 <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002156:	4b3e      	ldr	r3, [pc, #248]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	4a3d      	ldr	r2, [pc, #244]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002160:	6593      	str	r3, [r2, #88]	@ 0x58
 8002162:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216e:	4b38      	ldr	r3, [pc, #224]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a37      	ldr	r2, [pc, #220]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b35      	ldr	r3, [pc, #212]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b32      	ldr	r3, [pc, #200]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	4a31      	ldr	r2, [pc, #196]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002192:	4b2f      	ldr	r3, [pc, #188]	@ (8002250 <HAL_SPI_MspInit+0x11c>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = DIN_Pin;
 800219e:	2308      	movs	r3, #8
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021ae:	2305      	movs	r3, #5
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4826      	ldr	r0, [pc, #152]	@ (8002254 <HAL_SPI_MspInit+0x120>)
 80021ba:	f000 fe39 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_Pin;
 80021be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d0:	2305      	movs	r3, #5
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	481f      	ldr	r0, [pc, #124]	@ (8002258 <HAL_SPI_MspInit+0x124>)
 80021dc:	f000 fe28 	bl	8002e30 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80021e0:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <HAL_SPI_MspInit+0x128>)
 80021e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002260 <HAL_SPI_MspInit+0x12c>)
 80021e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80021e6:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <HAL_SPI_MspInit+0x128>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_SPI_MspInit+0x128>)
 80021ee:	2210      	movs	r2, #16
 80021f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <HAL_SPI_MspInit+0x128>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f8:	4b18      	ldr	r3, [pc, #96]	@ (800225c <HAL_SPI_MspInit+0x128>)
 80021fa:	2280      	movs	r2, #128	@ 0x80
 80021fc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fe:	4b17      	ldr	r3, [pc, #92]	@ (800225c <HAL_SPI_MspInit+0x128>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002204:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_SPI_MspInit+0x128>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800220a:	4b14      	ldr	r3, [pc, #80]	@ (800225c <HAL_SPI_MspInit+0x128>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_SPI_MspInit+0x128>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002216:	4811      	ldr	r0, [pc, #68]	@ (800225c <HAL_SPI_MspInit+0x128>)
 8002218:	f000 fb94 	bl	8002944 <HAL_DMA_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8002222:	f7ff ff43 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a0c      	ldr	r2, [pc, #48]	@ (800225c <HAL_SPI_MspInit+0x128>)
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
 800222c:	4a0b      	ldr	r2, [pc, #44]	@ (800225c <HAL_SPI_MspInit+0x128>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2102      	movs	r1, #2
 8002236:	2024      	movs	r0, #36	@ 0x24
 8002238:	f000 fb4d 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800223c:	2024      	movs	r0, #36	@ 0x24
 800223e:	f000 fb66 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	@ 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40003800 	.word	0x40003800
 8002250:	40021000 	.word	0x40021000
 8002254:	48000800 	.word	0x48000800
 8002258:	48000400 	.word	0x48000400
 800225c:	2000ae78 	.word	0x2000ae78
 8002260:	40020058 	.word	0x40020058

08002264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_MspInit+0x44>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	4a0e      	ldr	r2, [pc, #56]	@ (80022a8 <HAL_MspInit+0x44>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6613      	str	r3, [r2, #96]	@ 0x60
 8002276:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_MspInit+0x44>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_MspInit+0x44>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <HAL_MspInit+0x44>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	@ 0x58
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_MspInit+0x44>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <NMI_Handler+0x4>

080022b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <MemManage_Handler+0x4>

080022c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f000 f9ec 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  tick++; // zwiększanie zmiennej dla funkcji delay()
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <SysTick_Handler+0x1c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a03      	ldr	r2, [pc, #12]	@ (800231c <SysTick_Handler+0x1c>)
 8002310:	6013      	str	r3, [r2, #0]
  updateScrollingText();
 8002312:	f7ff fafd 	bl	8001910 <updateScrollingText>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000ae10 	.word	0x2000ae10

08002320 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002324:	4802      	ldr	r0, [pc, #8]	@ (8002330 <DMA1_Channel5_IRQHandler+0x10>)
 8002326:	f000 fca4 	bl	8002c72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000ae78 	.word	0x2000ae78

08002334 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002338:	4802      	ldr	r0, [pc, #8]	@ (8002344 <SPI2_IRQHandler+0x10>)
 800233a:	f002 fd63 	bl	8004e04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000ae14 	.word	0x2000ae14

08002348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800234c:	4802      	ldr	r0, [pc, #8]	@ (8002358 <USART2_IRQHandler+0x10>)
 800234e:	f003 f953 	bl	80055f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000aec4 	.word	0x2000aec4

0800235c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <_sbrk+0x5c>)
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <_sbrk+0x60>)
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <_sbrk+0x64>)
 800237a:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <_sbrk+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d207      	bcs.n	800239c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800238c:	f006 f85a 	bl	8008444 <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	220c      	movs	r2, #12
 8002394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e009      	b.n	80023b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a2:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <_sbrk+0x64>)
 80023ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20018000 	.word	0x20018000
 80023bc:	00001000 	.word	0x00001000
 80023c0:	2000aec0 	.word	0x2000aec0
 80023c4:	2000b098 	.word	0x2000b098

080023c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <SystemInit+0x20>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <SystemInit+0x20>)
 80023d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <HAL_UART_TxCpltCallback>:
* Korzysta z:
*   txRingBuffer - struktura bufora kołowego transmisji
*   USART_TxBuf - bufor danych do transmisji
*   HAL_UART_Transmit_IT - funkcja HAL rozpoczynająca transmisję
************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a10      	ldr	r2, [pc, #64]	@ (8002438 <HAL_UART_TxCpltCallback+0x4c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d119      	bne.n	8002430 <HAL_UART_TxCpltCallback+0x44>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 80023fc:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <HAL_UART_TxCpltCallback+0x50>)
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <HAL_UART_TxCpltCallback+0x50>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d013      	beq.n	8002430 <HAL_UART_TxCpltCallback+0x44>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <HAL_UART_TxCpltCallback+0x50>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a0c      	ldr	r2, [pc, #48]	@ (8002440 <HAL_UART_TxCpltCallback+0x54>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex = (txRingBuffer.readIndex + 1) & txRingBuffer.mask;
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_UART_TxCpltCallback+0x50>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_UART_TxCpltCallback+0x50>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4013      	ands	r3, r2
 800241e:	4a07      	ldr	r2, [pc, #28]	@ (800243c <HAL_UART_TxCpltCallback+0x50>)
 8002420:	6053      	str	r3, [r2, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8002422:	f107 030f 	add.w	r3, r7, #15
 8002426:	2201      	movs	r2, #1
 8002428:	4619      	mov	r1, r3
 800242a:	4803      	ldr	r0, [pc, #12]	@ (8002438 <HAL_UART_TxCpltCallback+0x4c>)
 800242c:	f003 f83a 	bl	80054a4 <HAL_UART_Transmit_IT>
	   }
   }
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000aec4 	.word	0x2000aec4
 800243c:	20000290 	.word	0x20000290
 8002440:	200002a0 	.word	0x200002a0

08002444 <HAL_UART_RxCpltCallback>:
* Korzysta z:
*   rxRingBuffer - struktura bufora kołowego odbioru
*   USART_RxBuf - bufor danych odebranych
*   HAL_UART_Receive_IT - funkcja HAL rozpoczynająca odbiór
************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a0c      	ldr	r2, [pc, #48]	@ (8002480 <HAL_UART_RxCpltCallback+0x3c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d110      	bne.n	8002476 <HAL_UART_RxCpltCallback+0x32>
		 rxRingBuffer.writeIndex = (rxRingBuffer.writeIndex + 1) & rxRingBuffer.mask;
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_UART_RxCpltCallback+0x40>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_UART_RxCpltCallback+0x40>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	4a08      	ldr	r2, [pc, #32]	@ (8002484 <HAL_UART_RxCpltCallback+0x40>)
 8002462:	6093      	str	r3, [r2, #8]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8002464:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <HAL_UART_RxCpltCallback+0x40>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <HAL_UART_RxCpltCallback+0x44>)
 800246a:	4413      	add	r3, r2
 800246c:	2201      	movs	r2, #1
 800246e:	4619      	mov	r1, r3
 8002470:	4803      	ldr	r0, [pc, #12]	@ (8002480 <HAL_UART_RxCpltCallback+0x3c>)
 8002472:	f003 f875 	bl	8005560 <HAL_UART_Receive_IT>

	 }
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000aec4 	.word	0x2000aec4
 8002484:	20000280 	.word	0x20000280
 8002488:	20000aa0 	.word	0x20000aa0

0800248c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 8002492:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <MX_USART2_UART_Init+0x7c>)
 8002494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002496:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 8002498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800249c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ce:	480d      	ldr	r0, [pc, #52]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024d0:	f002 ff9a 	bl	8005408 <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024da:	f7ff fde7 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ringBufferSetup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE); // inicjalizacja buforu odbiorczego
 80024de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024e2:	490a      	ldr	r1, [pc, #40]	@ (800250c <MX_USART2_UART_Init+0x80>)
 80024e4:	480a      	ldr	r0, [pc, #40]	@ (8002510 <MX_USART2_UART_Init+0x84>)
 80024e6:	f7fe f843 	bl	8000570 <ringBufferSetup>
  ringBufferSetup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE); // inicjalizacja buforu nadawczego
 80024ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024ee:	4909      	ldr	r1, [pc, #36]	@ (8002514 <MX_USART2_UART_Init+0x88>)
 80024f0:	4809      	ldr	r0, [pc, #36]	@ (8002518 <MX_USART2_UART_Init+0x8c>)
 80024f2:	f7fe f83d 	bl	8000570 <ringBufferSetup>
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1); // włączenie przerwań
 80024f6:	2201      	movs	r2, #1
 80024f8:	4904      	ldr	r1, [pc, #16]	@ (800250c <MX_USART2_UART_Init+0x80>)
 80024fa:	4802      	ldr	r0, [pc, #8]	@ (8002504 <MX_USART2_UART_Init+0x78>)
 80024fc:	f003 f830 	bl	8005560 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	2000aec4 	.word	0x2000aec4
 8002508:	40004400 	.word	0x40004400
 800250c:	20000aa0 	.word	0x20000aa0
 8002510:	20000280 	.word	0x20000280
 8002514:	200002a0 	.word	0x200002a0
 8002518:	20000290 	.word	0x20000290

0800251c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0ac      	sub	sp, #176	@ 0xb0
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2288      	movs	r2, #136	@ 0x88
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f005 ff55 	bl	80083ec <memset>
  if(uartHandle->Instance==USART2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a25      	ldr	r2, [pc, #148]	@ (80025dc <HAL_UART_MspInit+0xc0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d143      	bne.n	80025d4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800254c:	2302      	movs	r3, #2
 800254e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002550:	2300      	movs	r3, #0
 8002552:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4618      	mov	r0, r3
 800255a:	f001 fc8f 	bl	8003e7c <HAL_RCCEx_PeriphCLKConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002564:	f7ff fda2 	bl	80020ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002568:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <HAL_UART_MspInit+0xc4>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <HAL_UART_MspInit+0xc4>)
 800256e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002572:	6593      	str	r3, [r2, #88]	@ 0x58
 8002574:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <HAL_UART_MspInit+0xc4>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <HAL_UART_MspInit+0xc4>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002584:	4a16      	ldr	r2, [pc, #88]	@ (80025e0 <HAL_UART_MspInit+0xc4>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <HAL_UART_MspInit+0xc4>)
 800258e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002598:	230c      	movs	r3, #12
 800259a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025b0:	2307      	movs	r3, #7
 80025b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c0:	f000 fc36 	bl	8002e30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2101      	movs	r1, #1
 80025c8:	2026      	movs	r0, #38	@ 0x26
 80025ca:	f000 f984 	bl	80028d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025ce:	2026      	movs	r0, #38	@ 0x26
 80025d0:	f000 f99d 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025d4:	bf00      	nop
 80025d6:	37b0      	adds	r7, #176	@ 0xb0
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40021000 	.word	0x40021000

080025e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800261c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025e8:	f7ff feee 	bl	80023c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	@ (8002620 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	@ (8002624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002628 <LoopForever+0xe>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	@ (8002630 <LoopForever+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002612:	f005 ff1d 	bl	8008450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002616:	f7ff fcdf 	bl	8001fd8 <main>

0800261a <LoopForever>:

LoopForever:
    b LoopForever
 800261a:	e7fe      	b.n	800261a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800261c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002628:	08012258 	.word	0x08012258
  ldr r2, =_sbss
 800262c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002630:	2000b098 	.word	0x2000b098

08002634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC1_2_IRQHandler>

08002636 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 f93d 	bl	80028c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002646:	200f      	movs	r0, #15
 8002648:	f000 f80e 	bl	8002668 <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	e001      	b.n	800265c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002658:	f7ff fe04 	bl	8002264 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800265c:	79fb      	ldrb	r3, [r7, #7]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002674:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <HAL_InitTick+0x6c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d023      	beq.n	80026c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800267c:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <HAL_InitTick+0x70>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_InitTick+0x6c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f949 	bl	800292a <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d809      	bhi.n	80026b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f000 f913 	bl	80028d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b0:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_InitTick+0x74>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e007      	b.n	80026c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e004      	b.n	80026c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e001      	b.n	80026c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000208 	.word	0x20000208
 80026d8:	20000200 	.word	0x20000200
 80026dc:	20000204 	.word	0x20000204

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000208 	.word	0x20000208
 8002704:	2000af4c 	.word	0x2000af4c

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	@ (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000af4c 	.word	0x2000af4c

08002720 <__NVIC_SetPriorityGrouping>:
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4907      	ldr	r1, [pc, #28]	@ (80027bc <__NVIC_EnableIRQ+0x38>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_SetPriority>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	@ (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	@ (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <NVIC_EncodePriority>:
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	@ 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f1c3 0307 	rsb	r3, r3, #7
 800282e:	2b04      	cmp	r3, #4
 8002830:	bf28      	it	cs
 8002832:	2304      	movcs	r3, #4
 8002834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3304      	adds	r3, #4
 800283a:	2b06      	cmp	r3, #6
 800283c:	d902      	bls.n	8002844 <NVIC_EncodePriority+0x30>
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3b03      	subs	r3, #3
 8002842:	e000      	b.n	8002846 <NVIC_EncodePriority+0x32>
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	f04f 32ff 	mov.w	r2, #4294967295
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43d9      	mvns	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	4313      	orrs	r3, r2
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	@ 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <SysTick_Config>:
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800288c:	d301      	bcc.n	8002892 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002892:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <SysTick_Config+0x40>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289a:	210f      	movs	r1, #15
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f7ff ff8e 	bl	80027c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <SysTick_Config+0x40>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028aa:	4b04      	ldr	r3, [pc, #16]	@ (80028bc <SysTick_Config+0x40>)
 80028ac:	2207      	movs	r2, #7
 80028ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	e000e010 	.word	0xe000e010

080028c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff29 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff3e 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff8e 	bl	8002814 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5d 	bl	80027c0 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff31 	bl	8002784 <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa2 	bl	800287c <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e098      	b.n	8002a88 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a94 <HAL_DMA_Init+0x150>)
 800295e:	429a      	cmp	r2, r3
 8002960:	d80f      	bhi.n	8002982 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_DMA_Init+0x154>)
 800296a:	4413      	add	r3, r2
 800296c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a9c <HAL_DMA_Init+0x158>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	009a      	lsls	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a48      	ldr	r2, [pc, #288]	@ (8002aa0 <HAL_DMA_Init+0x15c>)
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002980:	e00e      	b.n	80029a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b46      	ldr	r3, [pc, #280]	@ (8002aa4 <HAL_DMA_Init+0x160>)
 800298a:	4413      	add	r3, r2
 800298c:	4a43      	ldr	r2, [pc, #268]	@ (8002a9c <HAL_DMA_Init+0x158>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	009a      	lsls	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a42      	ldr	r2, [pc, #264]	@ (8002aa8 <HAL_DMA_Init+0x164>)
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80029b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029fa:	d039      	beq.n	8002a70 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	4a27      	ldr	r2, [pc, #156]	@ (8002aa0 <HAL_DMA_Init+0x15c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11a      	bne.n	8002a3c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a06:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <HAL_DMA_Init+0x168>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f003 031c 	and.w	r3, r3, #28
 8002a12:	210f      	movs	r1, #15
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	4924      	ldr	r1, [pc, #144]	@ (8002aac <HAL_DMA_Init+0x168>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a20:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <HAL_DMA_Init+0x168>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	f003 031c 	and.w	r3, r3, #28
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	491d      	ldr	r1, [pc, #116]	@ (8002aac <HAL_DMA_Init+0x168>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
 8002a3a:	e019      	b.n	8002a70 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab0 <HAL_DMA_Init+0x16c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	f003 031c 	and.w	r3, r3, #28
 8002a48:	210f      	movs	r1, #15
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4917      	ldr	r1, [pc, #92]	@ (8002ab0 <HAL_DMA_Init+0x16c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a56:	4b16      	ldr	r3, [pc, #88]	@ (8002ab0 <HAL_DMA_Init+0x16c>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	f003 031c 	and.w	r3, r3, #28
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	4911      	ldr	r1, [pc, #68]	@ (8002ab0 <HAL_DMA_Init+0x16c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40020407 	.word	0x40020407
 8002a98:	bffdfff8 	.word	0xbffdfff8
 8002a9c:	cccccccd 	.word	0xcccccccd
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	bffdfbf8 	.word	0xbffdfbf8
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	400200a8 	.word	0x400200a8
 8002ab0:	400204a8 	.word	0x400204a8

08002ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_DMA_Start_IT+0x20>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e04b      	b.n	8002b6c <HAL_DMA_Start_IT+0xb8>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d13a      	bne.n	8002b5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f95f 	bl	8002dd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 020e 	orr.w	r2, r2, #14
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e00f      	b.n	8002b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 020a 	orr.w	r2, r2, #10
 8002b4a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e005      	b.n	8002b6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d008      	beq.n	8002b9e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e022      	b.n	8002be4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 020e 	bic.w	r2, r2, #14
 8002bac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f003 021c 	and.w	r2, r3, #28
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d005      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e029      	b.n	8002c68 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 020e 	bic.w	r2, r2, #14
 8002c22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c38:	f003 021c 	and.w	r2, r3, #28
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    }
  }
  return status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f003 031c 	and.w	r3, r3, #28
 8002c92:	2204      	movs	r2, #4
 8002c94:	409a      	lsls	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d026      	beq.n	8002cec <HAL_DMA_IRQHandler+0x7a>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d021      	beq.n	8002cec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0204 	bic.w	r2, r2, #4
 8002cc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f003 021c 	and.w	r2, r3, #28
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d071      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cea:	e06c      	b.n	8002dc6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	f003 031c 	and.w	r3, r3, #28
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02e      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xec>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d029      	beq.n	8002d5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020a 	bic.w	r2, r2, #10
 8002d26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	f003 021c 	and.w	r2, r3, #28
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d038      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d5c:	e033      	b.n	8002dc6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f003 031c 	and.w	r3, r3, #28
 8002d66:	2208      	movs	r2, #8
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d02a      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x156>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d025      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	f003 021c 	and.w	r2, r3, #28
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
}
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f003 021c 	and.w	r2, r3, #28
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d108      	bne.n	8002e14 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e12:	e007      	b.n	8002e24 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3e:	e17f      	b.n	8003140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8171 	beq.w	800313a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d005      	beq.n	8002e70 <HAL_GPIO_Init+0x40>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d130      	bne.n	8002ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0201 	and.w	r2, r3, #1
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d118      	bne.n	8002f10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	08db      	lsrs	r3, r3, #3
 8002efa:	f003 0201 	and.w	r2, r3, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d017      	beq.n	8002f4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d123      	bne.n	8002fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	08da      	lsrs	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	220f      	movs	r2, #15
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	6939      	ldr	r1, [r7, #16]
 8002f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0203 	and.w	r2, r3, #3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80ac 	beq.w	800313a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8003160 <HAL_GPIO_Init+0x330>)
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8003160 <HAL_GPIO_Init+0x330>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fee:	4b5c      	ldr	r3, [pc, #368]	@ (8003160 <HAL_GPIO_Init+0x330>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8003164 <HAL_GPIO_Init+0x334>)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	3302      	adds	r3, #2
 8003002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003024:	d025      	beq.n	8003072 <HAL_GPIO_Init+0x242>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4f      	ldr	r2, [pc, #316]	@ (8003168 <HAL_GPIO_Init+0x338>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <HAL_GPIO_Init+0x23e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4e      	ldr	r2, [pc, #312]	@ (800316c <HAL_GPIO_Init+0x33c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d019      	beq.n	800306a <HAL_GPIO_Init+0x23a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4d      	ldr	r2, [pc, #308]	@ (8003170 <HAL_GPIO_Init+0x340>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0x236>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4c      	ldr	r2, [pc, #304]	@ (8003174 <HAL_GPIO_Init+0x344>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x232>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4b      	ldr	r2, [pc, #300]	@ (8003178 <HAL_GPIO_Init+0x348>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_Init+0x22e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4a      	ldr	r2, [pc, #296]	@ (800317c <HAL_GPIO_Init+0x34c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_Init+0x22a>
 8003056:	2306      	movs	r3, #6
 8003058:	e00c      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800305a:	2307      	movs	r3, #7
 800305c:	e00a      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800305e:	2305      	movs	r3, #5
 8003060:	e008      	b.n	8003074 <HAL_GPIO_Init+0x244>
 8003062:	2304      	movs	r3, #4
 8003064:	e006      	b.n	8003074 <HAL_GPIO_Init+0x244>
 8003066:	2303      	movs	r3, #3
 8003068:	e004      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800306a:	2302      	movs	r3, #2
 800306c:	e002      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_GPIO_Init+0x244>
 8003072:	2300      	movs	r3, #0
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	f002 0203 	and.w	r2, r2, #3
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	4093      	lsls	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003084:	4937      	ldr	r1, [pc, #220]	@ (8003164 <HAL_GPIO_Init+0x334>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003092:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_GPIO_Init+0x350>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	43db      	mvns	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b6:	4a32      	ldr	r2, [pc, #200]	@ (8003180 <HAL_GPIO_Init+0x350>)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030bc:	4b30      	ldr	r3, [pc, #192]	@ (8003180 <HAL_GPIO_Init+0x350>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e0:	4a27      	ldr	r2, [pc, #156]	@ (8003180 <HAL_GPIO_Init+0x350>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030e6:	4b26      	ldr	r3, [pc, #152]	@ (8003180 <HAL_GPIO_Init+0x350>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800310a:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <HAL_GPIO_Init+0x350>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_GPIO_Init+0x350>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003134:	4a12      	ldr	r2, [pc, #72]	@ (8003180 <HAL_GPIO_Init+0x350>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3301      	adds	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	f47f ae78 	bne.w	8002e40 <HAL_GPIO_Init+0x10>
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	40010000 	.word	0x40010000
 8003168:	48000400 	.word	0x48000400
 800316c:	48000800 	.word	0x48000800
 8003170:	48000c00 	.word	0x48000c00
 8003174:	48001000 	.word	0x48001000
 8003178:	48001400 	.word	0x48001400
 800317c:	48001800 	.word	0x48001800
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <HAL_PWREx_GetVoltageRange+0x18>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40007000 	.word	0x40007000

080031d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031de:	d130      	bne.n	8003242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e0:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ec:	d038      	beq.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2232      	movs	r2, #50	@ 0x32
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	4a1b      	ldr	r2, [pc, #108]	@ (8003278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0c9b      	lsrs	r3, r3, #18
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003214:	e002      	b.n	800321c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3b01      	subs	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321c:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003228:	d102      	bne.n	8003230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f2      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003230:	4b0f      	ldr	r3, [pc, #60]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323c:	d110      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e00f      	b.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324e:	d007      	beq.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003250:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003258:	4a05      	ldr	r2, [pc, #20]	@ (8003270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800325e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000
 8003274:	20000200 	.word	0x20000200
 8003278:	431bde83 	.word	0x431bde83

0800327c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e3ca      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328e:	4b97      	ldr	r3, [pc, #604]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003298:	4b94      	ldr	r3, [pc, #592]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80e4 	beq.w	8003478 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4a>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	f040 808b 	bne.w	80033d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 8087 	bne.w	80033d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032c6:	4b89      	ldr	r3, [pc, #548]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e3a2      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	4b82      	ldr	r3, [pc, #520]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_RCC_OscConfig+0x7c>
 80032ee:	4b7f      	ldr	r3, [pc, #508]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f6:	e005      	b.n	8003304 <HAL_RCC_OscConfig+0x88>
 80032f8:	4b7c      	ldr	r3, [pc, #496]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003304:	4293      	cmp	r3, r2
 8003306:	d223      	bcs.n	8003350 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fd55 	bl	8003dbc <RCC_SetFlashLatencyFromMSIRange>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e383      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800331c:	4b73      	ldr	r3, [pc, #460]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a72      	ldr	r2, [pc, #456]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003322:	f043 0308 	orr.w	r3, r3, #8
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b70      	ldr	r3, [pc, #448]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	496d      	ldr	r1, [pc, #436]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800333a:	4b6c      	ldr	r3, [pc, #432]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	4968      	ldr	r1, [pc, #416]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
 800334e:	e025      	b.n	800339c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003350:	4b66      	ldr	r3, [pc, #408]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a65      	ldr	r2, [pc, #404]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003356:	f043 0308 	orr.w	r3, r3, #8
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b63      	ldr	r3, [pc, #396]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4960      	ldr	r1, [pc, #384]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336e:	4b5f      	ldr	r3, [pc, #380]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	495b      	ldr	r1, [pc, #364]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd15 	bl	8003dbc <RCC_SetFlashLatencyFromMSIRange>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e343      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800339c:	f000 fc4a 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b52      	ldr	r3, [pc, #328]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	4950      	ldr	r1, [pc, #320]	@ (80034f0 <HAL_RCC_OscConfig+0x274>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	4a4e      	ldr	r2, [pc, #312]	@ (80034f4 <HAL_RCC_OscConfig+0x278>)
 80033ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033bc:	4b4e      	ldr	r3, [pc, #312]	@ (80034f8 <HAL_RCC_OscConfig+0x27c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff f951 	bl	8002668 <HAL_InitTick>
 80033c6:	4603      	mov	r3, r0
 80033c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d052      	beq.n	8003476 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	e327      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d032      	beq.n	8003442 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033dc:	4b43      	ldr	r3, [pc, #268]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033e8:	f7ff f98e 	bl	8002708 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f0:	f7ff f98a 	bl	8002708 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e310      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003402:	4b3a      	ldr	r3, [pc, #232]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340e:	4b37      	ldr	r3, [pc, #220]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a36      	ldr	r2, [pc, #216]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b34      	ldr	r3, [pc, #208]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4931      	ldr	r1, [pc, #196]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342c:	4b2f      	ldr	r3, [pc, #188]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	492c      	ldr	r1, [pc, #176]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
 8003440:	e01a      	b.n	8003478 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003442:	4b2a      	ldr	r3, [pc, #168]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a29      	ldr	r2, [pc, #164]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344e:	f7ff f95b 	bl	8002708 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003456:	f7ff f957 	bl	8002708 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e2dd      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003468:	4b20      	ldr	r3, [pc, #128]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x1da>
 8003474:	e000      	b.n	8003478 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003476:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d074      	beq.n	800356e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b08      	cmp	r3, #8
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x21a>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d10e      	bne.n	80034ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d10b      	bne.n	80034ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d064      	beq.n	800356c <HAL_RCC_OscConfig+0x2f0>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d160      	bne.n	800356c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e2ba      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x24a>
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0b      	ldr	r2, [pc, #44]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e026      	b.n	8003514 <HAL_RCC_OscConfig+0x298>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034ce:	d115      	bne.n	80034fc <HAL_RCC_OscConfig+0x280>
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a05      	ldr	r2, [pc, #20]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80034d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b03      	ldr	r3, [pc, #12]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a02      	ldr	r2, [pc, #8]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x298>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	080121cc 	.word	0x080121cc
 80034f4:	20000200 	.word	0x20000200
 80034f8:	20000204 	.word	0x20000204
 80034fc:	4ba0      	ldr	r3, [pc, #640]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a9f      	ldr	r2, [pc, #636]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	4b9d      	ldr	r3, [pc, #628]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a9c      	ldr	r2, [pc, #624]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800350e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7ff f8f4 	bl	8002708 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7ff f8f0 	bl	8002708 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	@ 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e276      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003536:	4b92      	ldr	r3, [pc, #584]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x2a8>
 8003542:	e014      	b.n	800356e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7ff f8e0 	bl	8002708 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7ff f8dc 	bl	8002708 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e262      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800355e:	4b88      	ldr	r3, [pc, #544]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x2d0>
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d060      	beq.n	800363c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d005      	beq.n	800358c <HAL_RCC_OscConfig+0x310>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d119      	bne.n	80035ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d116      	bne.n	80035ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358c:	4b7c      	ldr	r3, [pc, #496]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x328>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e23f      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b76      	ldr	r3, [pc, #472]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	4973      	ldr	r1, [pc, #460]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b8:	e040      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d023      	beq.n	800360a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7ff f89b 	bl	8002708 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d6:	f7ff f897 	bl	8002708 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e21d      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e8:	4b65      	ldr	r3, [pc, #404]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f4:	4b62      	ldr	r3, [pc, #392]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	495f      	ldr	r1, [pc, #380]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
 8003608:	e018      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360a:	4b5d      	ldr	r3, [pc, #372]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5c      	ldr	r2, [pc, #368]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7ff f877 	bl	8002708 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361e:	f7ff f873 	bl	8002708 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1f9      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003630:	4b53      	ldr	r3, [pc, #332]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03c      	beq.n	80036c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01c      	beq.n	800368a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003650:	4b4b      	ldr	r3, [pc, #300]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003656:	4a4a      	ldr	r2, [pc, #296]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7ff f852 	bl	8002708 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003668:	f7ff f84e 	bl	8002708 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1d4      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800367a:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800367c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ef      	beq.n	8003668 <HAL_RCC_OscConfig+0x3ec>
 8003688:	e01b      	b.n	80036c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368a:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800368c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003690:	4a3b      	ldr	r2, [pc, #236]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7ff f835 	bl	8002708 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a2:	f7ff f831 	bl	8002708 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1b7      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b4:	4b32      	ldr	r3, [pc, #200]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1ef      	bne.n	80036a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a6 	beq.w	800381c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b27      	ldr	r3, [pc, #156]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	4a26      	ldr	r2, [pc, #152]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ec:	4b24      	ldr	r3, [pc, #144]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036fc:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <HAL_RCC_OscConfig+0x508>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d118      	bne.n	800373a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003708:	4b1e      	ldr	r3, [pc, #120]	@ (8003784 <HAL_RCC_OscConfig+0x508>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <HAL_RCC_OscConfig+0x508>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003714:	f7fe fff8 	bl	8002708 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fe fff4 	bl	8002708 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e17a      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <HAL_RCC_OscConfig+0x508>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <HAL_RCC_OscConfig+0x4d8>
 8003742:	4b0f      	ldr	r3, [pc, #60]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003748:	4a0d      	ldr	r2, [pc, #52]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003752:	e029      	b.n	80037a8 <HAL_RCC_OscConfig+0x52c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b05      	cmp	r3, #5
 800375a:	d115      	bne.n	8003788 <HAL_RCC_OscConfig+0x50c>
 800375c:	4b08      	ldr	r3, [pc, #32]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003762:	4a07      	ldr	r2, [pc, #28]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	4a03      	ldr	r2, [pc, #12]	@ (8003780 <HAL_RCC_OscConfig+0x504>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800377c:	e014      	b.n	80037a8 <HAL_RCC_OscConfig+0x52c>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	40007000 	.word	0x40007000
 8003788:	4b9c      	ldr	r3, [pc, #624]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378e:	4a9b      	ldr	r2, [pc, #620]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003798:	4b98      	ldr	r3, [pc, #608]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379e:	4a97      	ldr	r2, [pc, #604]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d016      	beq.n	80037de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fe ffaa 	bl	8002708 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe ffa6 	bl	8002708 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e12a      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ce:	4b8b      	ldr	r3, [pc, #556]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ed      	beq.n	80037b8 <HAL_RCC_OscConfig+0x53c>
 80037dc:	e015      	b.n	800380a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fe ff93 	bl	8002708 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe ff8f 	bl	8002708 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e113      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037fc:	4b7f      	ldr	r3, [pc, #508]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ed      	bne.n	80037e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b7a      	ldr	r3, [pc, #488]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003814:	4a79      	ldr	r2, [pc, #484]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80fe 	beq.w	8003a22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382a:	2b02      	cmp	r3, #2
 800382c:	f040 80d0 	bne.w	80039d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003830:	4b72      	ldr	r3, [pc, #456]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	429a      	cmp	r2, r3
 8003842:	d130      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	3b01      	subs	r3, #1
 8003850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d127      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003860:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d11f      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003870:	2a07      	cmp	r2, #7
 8003872:	bf14      	ite	ne
 8003874:	2201      	movne	r2, #1
 8003876:	2200      	moveq	r2, #0
 8003878:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800387a:	4293      	cmp	r3, r2
 800387c:	d113      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d06e      	beq.n	8003984 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d069      	beq.n	8003980 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038ac:	4b53      	ldr	r3, [pc, #332]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038b8:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0ad      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038c8:	4b4c      	ldr	r3, [pc, #304]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4b      	ldr	r2, [pc, #300]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d4:	f7fe ff18 	bl	8002708 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe ff14 	bl	8002708 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e09a      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ee:	4b43      	ldr	r3, [pc, #268]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fa:	4b40      	ldr	r3, [pc, #256]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	4b40      	ldr	r3, [pc, #256]	@ (8003a00 <HAL_RCC_OscConfig+0x784>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800390a:	3a01      	subs	r2, #1
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003914:	0212      	lsls	r2, r2, #8
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800391c:	0852      	lsrs	r2, r2, #1
 800391e:	3a01      	subs	r2, #1
 8003920:	0552      	lsls	r2, r2, #21
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0652      	lsls	r2, r2, #25
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003934:	0912      	lsrs	r2, r2, #4
 8003936:	0452      	lsls	r2, r2, #17
 8003938:	430a      	orrs	r2, r1
 800393a:	4930      	ldr	r1, [pc, #192]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 800393c:	4313      	orrs	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003940:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2d      	ldr	r2, [pc, #180]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800394a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a2a      	ldr	r2, [pc, #168]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003958:	f7fe fed6 	bl	8002708 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe fed2 	bl	8002708 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e058      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397e:	e050      	b.n	8003a22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04f      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003984:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d148      	bne.n	8003a22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003990:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800399c:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a16      	ldr	r2, [pc, #88]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a8:	f7fe feae 	bl	8002708 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe feaa 	bl	8002708 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e030      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c2:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x734>
 80039ce:	e028      	b.n	8003a22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d023      	beq.n	8003a1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a08      	ldr	r2, [pc, #32]	@ (80039fc <HAL_RCC_OscConfig+0x780>)
 80039dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe fe91 	bl	8002708 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e8:	e00c      	b.n	8003a04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe fe8d 	bl	8002708 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d905      	bls.n	8003a04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e013      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
 80039fc:	40021000 	.word	0x40021000
 8003a00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_RCC_OscConfig+0x7b0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ec      	bne.n	80039ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a10:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_RCC_OscConfig+0x7b0>)
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	4905      	ldr	r1, [pc, #20]	@ (8003a2c <HAL_RCC_OscConfig+0x7b0>)
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_RCC_OscConfig+0x7b4>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
 8003a1c:	e001      	b.n	8003a22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	feeefffc 	.word	0xfeeefffc

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0e7      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b75      	ldr	r3, [pc, #468]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b72      	ldr	r3, [pc, #456]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0207 	bic.w	r2, r3, #7
 8003a5e:	4970      	ldr	r1, [pc, #448]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b6e      	ldr	r3, [pc, #440]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0cf      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	4b66      	ldr	r3, [pc, #408]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d908      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4960      	ldr	r1, [pc, #384]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04c      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	4b5a      	ldr	r3, [pc, #360]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d121      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0a6      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad2:	4b54      	ldr	r3, [pc, #336]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d115      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e09a      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aea:	4b4e      	ldr	r3, [pc, #312]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e08e      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003afa:	4b4a      	ldr	r3, [pc, #296]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e086      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	4b46      	ldr	r3, [pc, #280]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4943      	ldr	r1, [pc, #268]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1c:	f7fe fdf4 	bl	8002708 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fe fdf0 	bl	8002708 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e06e      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 020c 	and.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1eb      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d208      	bcs.n	8003b7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b2e      	ldr	r3, [pc, #184]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	492b      	ldr	r1, [pc, #172]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7a:	4b29      	ldr	r3, [pc, #164]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d210      	bcs.n	8003baa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b88:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 0207 	bic.w	r2, r3, #7
 8003b90:	4923      	ldr	r1, [pc, #140]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b98:	4b21      	ldr	r3, [pc, #132]	@ (8003c20 <HAL_RCC_ClockConfig+0x1ec>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e036      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	4918      	ldr	r1, [pc, #96]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd4:	4b13      	ldr	r3, [pc, #76]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4910      	ldr	r1, [pc, #64]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be8:	f000 f824 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	490b      	ldr	r1, [pc, #44]	@ (8003c28 <HAL_RCC_ClockConfig+0x1f4>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	4a09      	ldr	r2, [pc, #36]	@ (8003c2c <HAL_RCC_ClockConfig+0x1f8>)
 8003c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c08:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_RCC_ClockConfig+0x1fc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fd2b 	bl	8002668 <HAL_InitTick>
 8003c12:	4603      	mov	r3, r0
 8003c14:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c16:	7afb      	ldrb	r3, [r7, #11]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40022000 	.word	0x40022000
 8003c24:	40021000 	.word	0x40021000
 8003c28:	080121cc 	.word	0x080121cc
 8003c2c:	20000200 	.word	0x20000200
 8003c30:	20000204 	.word	0x20000204

08003c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b089      	sub	sp, #36	@ 0x24
 8003c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c42:	4b3e      	ldr	r3, [pc, #248]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x34>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d121      	bne.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d11e      	bne.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c68:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c74:	4b31      	ldr	r3, [pc, #196]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e005      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c84:	4b2d      	ldr	r3, [pc, #180]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c90:	4a2b      	ldr	r2, [pc, #172]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cac:	4b25      	ldr	r3, [pc, #148]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e004      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cb8:	4b23      	ldr	r3, [pc, #140]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d134      	bne.n	8003d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0xa6>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d003      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8003cd8:	e005      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cda:	4b1a      	ldr	r3, [pc, #104]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cdc:	617b      	str	r3, [r7, #20]
      break;
 8003cde:	e005      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ce0:	4b19      	ldr	r3, [pc, #100]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ce2:	617b      	str	r3, [r7, #20]
      break;
 8003ce4:	e002      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	617b      	str	r3, [r7, #20]
      break;
 8003cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cec:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	fb03 f202 	mul.w	r2, r3, r2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	0e5b      	lsrs	r3, r3, #25
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3724      	adds	r7, #36	@ 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	080121e4 	.word	0x080121e4
 8003d44:	00f42400 	.word	0x00f42400
 8003d48:	007a1200 	.word	0x007a1200

08003d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000200 	.word	0x20000200

08003d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d68:	f7ff fff0 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0a1b      	lsrs	r3, r3, #8
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4904      	ldr	r1, [pc, #16]	@ (8003d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	080121dc 	.word	0x080121dc

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d94:	f7ff ffda 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0adb      	lsrs	r3, r3, #11
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4904      	ldr	r1, [pc, #16]	@ (8003db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	080121dc 	.word	0x080121dc

08003dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dd4:	f7ff f9ee 	bl	80031b4 <HAL_PWREx_GetVoltageRange>
 8003dd8:	6178      	str	r0, [r7, #20]
 8003dda:	e014      	b.n	8003e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ddc:	4b25      	ldr	r3, [pc, #148]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de0:	4a24      	ldr	r2, [pc, #144]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de8:	4b22      	ldr	r3, [pc, #136]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003df4:	f7ff f9de 	bl	80031b4 <HAL_PWREx_GetVoltageRange>
 8003df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0c:	d10b      	bne.n	8003e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b80      	cmp	r3, #128	@ 0x80
 8003e12:	d919      	bls.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e18:	d902      	bls.n	8003e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	e013      	b.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e20:	2301      	movs	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e010      	b.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b80      	cmp	r3, #128	@ 0x80
 8003e2a:	d902      	bls.n	8003e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	e00a      	b.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b80      	cmp	r3, #128	@ 0x80
 8003e36:	d102      	bne.n	8003e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e38:	2302      	movs	r3, #2
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	e004      	b.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b70      	cmp	r3, #112	@ 0x70
 8003e42:	d101      	bne.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e44:	2301      	movs	r3, #1
 8003e46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 0207 	bic.w	r2, r3, #7
 8003e50:	4909      	ldr	r1, [pc, #36]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e58:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d001      	beq.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40022000 	.word	0x40022000

08003e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e84:	2300      	movs	r3, #0
 8003e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e88:	2300      	movs	r3, #0
 8003e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d041      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ea0:	d02a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ea2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ea6:	d824      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eac:	d008      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eb2:	d81e      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ebc:	d010      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ebe:	e018      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ec0:	4b86      	ldr	r3, [pc, #536]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a85      	ldr	r2, [pc, #532]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ecc:	e015      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fabb 	bl	8004450 <RCCEx_PLLSAI1_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ede:	e00c      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3320      	adds	r3, #32
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fba6 	bl	8004638 <RCCEx_PLLSAI2_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ef6:	e000      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f00:	4b76      	ldr	r3, [pc, #472]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f0e:	4973      	ldr	r1, [pc, #460]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f16:	e001      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d041      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f30:	d02a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f36:	d824      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f3c:	d008      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f42:	d81e      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f4c:	d010      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f4e:	e018      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f50:	4b62      	ldr	r3, [pc, #392]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a61      	ldr	r2, [pc, #388]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f5c:	e015      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fa73 	bl	8004450 <RCCEx_PLLSAI1_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f6e:	e00c      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3320      	adds	r3, #32
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fb5e 	bl	8004638 <RCCEx_PLLSAI2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	74fb      	strb	r3, [r7, #19]
      break;
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f90:	4b52      	ldr	r3, [pc, #328]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f9e:	494f      	ldr	r1, [pc, #316]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fa6:	e001      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80a0 	beq.w	80040fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fbe:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd4:	4b41      	ldr	r3, [pc, #260]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	4a40      	ldr	r2, [pc, #256]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fec:	2301      	movs	r3, #1
 8003fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ffc:	f7fe fb84 	bl	8002708 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004002:	e009      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004004:	f7fe fb80 	bl	8002708 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d902      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	74fb      	strb	r3, [r7, #19]
        break;
 8004016:	e005      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004018:	4b31      	ldr	r3, [pc, #196]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ef      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d15c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800402a:	4b2c      	ldr	r3, [pc, #176]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01f      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	d019      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004048:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004054:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	4a20      	ldr	r2, [pc, #128]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004064:	4b1d      	ldr	r3, [pc, #116]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	4a1c      	ldr	r2, [pc, #112]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004074:	4a19      	ldr	r2, [pc, #100]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fe fb3f 	bl	8002708 <HAL_GetTick>
 800408a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408c:	e00b      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fe fb3b 	bl	8002708 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d902      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	74fb      	strb	r3, [r7, #19]
            break;
 80040a4:	e006      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ec      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ca:	4904      	ldr	r1, [pc, #16]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040d2:	e009      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
 80040d8:	e006      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040e8:	7c7b      	ldrb	r3, [r7, #17]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	4a9d      	ldr	r2, [pc, #628]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004106:	4b98      	ldr	r3, [pc, #608]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f023 0203 	bic.w	r2, r3, #3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	4994      	ldr	r1, [pc, #592]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004128:	4b8f      	ldr	r3, [pc, #572]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 020c 	bic.w	r2, r3, #12
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	498c      	ldr	r1, [pc, #560]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800414a:	4b87      	ldr	r3, [pc, #540]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004158:	4983      	ldr	r1, [pc, #524]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800416c:	4b7e      	ldr	r3, [pc, #504]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	497b      	ldr	r1, [pc, #492]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800418e:	4b76      	ldr	r3, [pc, #472]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419c:	4972      	ldr	r1, [pc, #456]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041be:	496a      	ldr	r1, [pc, #424]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d2:	4b65      	ldr	r3, [pc, #404]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e0:	4961      	ldr	r1, [pc, #388]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004202:	4959      	ldr	r1, [pc, #356]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004216:	4b54      	ldr	r3, [pc, #336]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004224:	4950      	ldr	r1, [pc, #320]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004238:	4b4b      	ldr	r3, [pc, #300]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	4948      	ldr	r1, [pc, #288]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800425a:	4b43      	ldr	r3, [pc, #268]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	493f      	ldr	r1, [pc, #252]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d028      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800427c:	4b3a      	ldr	r3, [pc, #232]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800428a:	4937      	ldr	r1, [pc, #220]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800429a:	d106      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800429c:	4b32      	ldr	r3, [pc, #200]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a31      	ldr	r2, [pc, #196]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042a6:	60d3      	str	r3, [r2, #12]
 80042a8:	e011      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042b2:	d10c      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	2101      	movs	r1, #1
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f8c8 	bl	8004450 <RCCEx_PLLSAI1_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d028      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042da:	4b23      	ldr	r3, [pc, #140]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e8:	491f      	ldr	r1, [pc, #124]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042f8:	d106      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004304:	60d3      	str	r3, [r2, #12]
 8004306:	e011      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004310:	d10c      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f899 	bl	8004450 <RCCEx_PLLSAI1_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02b      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004338:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004346:	4908      	ldr	r1, [pc, #32]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004356:	d109      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004358:	4b03      	ldr	r3, [pc, #12]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a02      	ldr	r2, [pc, #8]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004362:	60d3      	str	r3, [r2, #12]
 8004364:	e014      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004374:	d10c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2101      	movs	r1, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f867 	bl	8004450 <RCCEx_PLLSAI1_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800439c:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043aa:	4928      	ldr	r1, [pc, #160]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	2102      	movs	r1, #2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f844 	bl	8004450 <RCCEx_PLLSAI1_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d014      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	74bb      	strb	r3, [r7, #18]
 80043d6:	e011      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043e0:	d10c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3320      	adds	r3, #32
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f925 	bl	8004638 <RCCEx_PLLSAI2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f2:	7cfb      	ldrb	r3, [r7, #19]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004408:	4b10      	ldr	r3, [pc, #64]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004416:	490d      	ldr	r1, [pc, #52]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800442a:	4b08      	ldr	r3, [pc, #32]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443a:	4904      	ldr	r1, [pc, #16]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004442:	7cbb      	ldrb	r3, [r7, #18]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000

08004450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800445e:	4b75      	ldr	r3, [pc, #468]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800446a:	4b72      	ldr	r3, [pc, #456]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0203 	and.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d10d      	bne.n	8004496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
       ||
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004482:	4b6c      	ldr	r3, [pc, #432]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
       ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d047      	beq.n	8004526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	e044      	b.n	8004526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d018      	beq.n	80044d6 <RCCEx_PLLSAI1_Config+0x86>
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d825      	bhi.n	80044f4 <RCCEx_PLLSAI1_Config+0xa4>
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d002      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0x62>
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d009      	beq.n	80044c4 <RCCEx_PLLSAI1_Config+0x74>
 80044b0:	e020      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044b2:	4b60      	ldr	r3, [pc, #384]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11d      	bne.n	80044fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c2:	e01a      	b.n	80044fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d4:	e013      	b.n	80044fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044d6:	4b57      	ldr	r3, [pc, #348]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10f      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044e2:	4b54      	ldr	r3, [pc, #336]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044f2:	e006      	b.n	8004502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      break;
 80044f8:	e004      	b.n	8004504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fa:	bf00      	nop
 80044fc:	e002      	b.n	8004504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044fe:	bf00      	nop
 8004500:	e000      	b.n	8004504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004502:	bf00      	nop
    }

    if(status == HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800450a:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6819      	ldr	r1, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	430b      	orrs	r3, r1
 8004520:	4944      	ldr	r1, [pc, #272]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d17d      	bne.n	8004628 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800452c:	4b41      	ldr	r3, [pc, #260]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a40      	ldr	r2, [pc, #256]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004538:	f7fe f8e6 	bl	8002708 <HAL_GetTick>
 800453c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800453e:	e009      	b.n	8004554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004540:	f7fe f8e2 	bl	8002708 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d902      	bls.n	8004554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	73fb      	strb	r3, [r7, #15]
        break;
 8004552:	e005      	b.n	8004560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004554:	4b37      	ldr	r3, [pc, #220]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ef      	bne.n	8004540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d160      	bne.n	8004628 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d111      	bne.n	8004590 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800456c:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	0211      	lsls	r1, r2, #8
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68d2      	ldr	r2, [r2, #12]
 8004582:	0912      	lsrs	r2, r2, #4
 8004584:	0452      	lsls	r2, r2, #17
 8004586:	430a      	orrs	r2, r1
 8004588:	492a      	ldr	r1, [pc, #168]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	4313      	orrs	r3, r2
 800458c:	610b      	str	r3, [r1, #16]
 800458e:	e027      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d112      	bne.n	80045bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004596:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800459e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6892      	ldr	r2, [r2, #8]
 80045a6:	0211      	lsls	r1, r2, #8
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6912      	ldr	r2, [r2, #16]
 80045ac:	0852      	lsrs	r2, r2, #1
 80045ae:	3a01      	subs	r2, #1
 80045b0:	0552      	lsls	r2, r2, #21
 80045b2:	430a      	orrs	r2, r1
 80045b4:	491f      	ldr	r1, [pc, #124]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	610b      	str	r3, [r1, #16]
 80045ba:	e011      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6892      	ldr	r2, [r2, #8]
 80045cc:	0211      	lsls	r1, r2, #8
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6952      	ldr	r2, [r2, #20]
 80045d2:	0852      	lsrs	r2, r2, #1
 80045d4:	3a01      	subs	r2, #1
 80045d6:	0652      	lsls	r2, r2, #25
 80045d8:	430a      	orrs	r2, r1
 80045da:	4916      	ldr	r1, [pc, #88]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045e0:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a13      	ldr	r2, [pc, #76]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fe f88c 	bl	8002708 <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f2:	e009      	b.n	8004608 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f4:	f7fe f888 	bl	8002708 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	73fb      	strb	r3, [r7, #15]
          break;
 8004606:	e005      	b.n	8004614 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004608:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ef      	beq.n	80045f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800461a:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	4904      	ldr	r1, [pc, #16]	@ (8004634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000

08004638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004646:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d018      	beq.n	8004684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004652:	4b67      	ldr	r3, [pc, #412]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0203 	and.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d10d      	bne.n	800467e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
       ||
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800466a:	4b61      	ldr	r3, [pc, #388]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
       ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d047      	beq.n	800470e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e044      	b.n	800470e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d018      	beq.n	80046be <RCCEx_PLLSAI2_Config+0x86>
 800468c:	2b03      	cmp	r3, #3
 800468e:	d825      	bhi.n	80046dc <RCCEx_PLLSAI2_Config+0xa4>
 8004690:	2b01      	cmp	r3, #1
 8004692:	d002      	beq.n	800469a <RCCEx_PLLSAI2_Config+0x62>
 8004694:	2b02      	cmp	r3, #2
 8004696:	d009      	beq.n	80046ac <RCCEx_PLLSAI2_Config+0x74>
 8004698:	e020      	b.n	80046dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800469a:	4b55      	ldr	r3, [pc, #340]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d11d      	bne.n	80046e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046aa:	e01a      	b.n	80046e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046ac:	4b50      	ldr	r3, [pc, #320]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046bc:	e013      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046be:	4b4c      	ldr	r3, [pc, #304]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ca:	4b49      	ldr	r3, [pc, #292]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046da:	e006      	b.n	80046ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e004      	b.n	80046ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046e2:	bf00      	nop
 80046e4:	e002      	b.n	80046ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046e6:	bf00      	nop
 80046e8:	e000      	b.n	80046ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046f2:	4b3f      	ldr	r3, [pc, #252]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	430b      	orrs	r3, r1
 8004708:	4939      	ldr	r1, [pc, #228]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d167      	bne.n	80047e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004714:	4b36      	ldr	r3, [pc, #216]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a35      	ldr	r2, [pc, #212]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800471e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fd fff2 	bl	8002708 <HAL_GetTick>
 8004724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004726:	e009      	b.n	800473c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004728:	f7fd ffee 	bl	8002708 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d902      	bls.n	800473c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	73fb      	strb	r3, [r7, #15]
        break;
 800473a:	e005      	b.n	8004748 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800473c:	4b2c      	ldr	r3, [pc, #176]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ef      	bne.n	8004728 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d14a      	bne.n	80047e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004754:	4b26      	ldr	r3, [pc, #152]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800475c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6892      	ldr	r2, [r2, #8]
 8004764:	0211      	lsls	r1, r2, #8
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	0912      	lsrs	r2, r2, #4
 800476c:	0452      	lsls	r2, r2, #17
 800476e:	430a      	orrs	r2, r1
 8004770:	491f      	ldr	r1, [pc, #124]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	614b      	str	r3, [r1, #20]
 8004776:	e011      	b.n	800479c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004778:	4b1d      	ldr	r3, [pc, #116]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004780:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6892      	ldr	r2, [r2, #8]
 8004788:	0211      	lsls	r1, r2, #8
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6912      	ldr	r2, [r2, #16]
 800478e:	0852      	lsrs	r2, r2, #1
 8004790:	3a01      	subs	r2, #1
 8004792:	0652      	lsls	r2, r2, #25
 8004794:	430a      	orrs	r2, r1
 8004796:	4916      	ldr	r1, [pc, #88]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800479c:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a13      	ldr	r2, [pc, #76]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fd ffae 	bl	8002708 <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ae:	e009      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b0:	f7fd ffaa 	bl	8002708 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d902      	bls.n	80047c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	73fb      	strb	r3, [r7, #15]
          break;
 80047c2:	e005      	b.n	80047d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047c4:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ef      	beq.n	80047b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047d6:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	4904      	ldr	r1, [pc, #16]	@ (80047f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e095      	b.n	8004932 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004816:	d009      	beq.n	800482c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	61da      	str	r2, [r3, #28]
 800481e:	e005      	b.n	800482c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd fc74 	bl	8002134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004862:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800486c:	d902      	bls.n	8004874 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e002      	b.n	800487a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004878:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004882:	d007      	beq.n	8004894 <HAL_SPI_Init+0xa0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800488c:	d002      	beq.n	8004894 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d6:	ea42 0103 	orr.w	r1, r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 0204 	and.w	r2, r3, #4
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004910:	ea42 0103 	orr.w	r1, r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b088      	sub	sp, #32
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800494a:	f7fd fedd 	bl	8002708 <HAL_GetTick>
 800494e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
 8004962:	e15c      	b.n	8004c1e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_SPI_Transmit+0x36>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e154      	b.n	8004c1e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Transmit+0x48>
 800497e:	2302      	movs	r3, #2
 8004980:	e14d      	b.n	8004c1e <HAL_SPI_Transmit+0x2e4>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2203      	movs	r2, #3
 800498e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d4:	d10f      	bne.n	80049f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a00:	2b40      	cmp	r3, #64	@ 0x40
 8004a02:	d007      	beq.n	8004a14 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a1c:	d952      	bls.n	8004ac4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_Transmit+0xf2>
 8004a26:	8b7b      	ldrh	r3, [r7, #26]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d145      	bne.n	8004ab8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	881a      	ldrh	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3c:	1c9a      	adds	r2, r3, #2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a50:	e032      	b.n	8004ab8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d112      	bne.n	8004a86 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a84:	e018      	b.n	8004ab8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a86:	f7fd fe3f 	bl	8002708 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d803      	bhi.n	8004a9e <HAL_SPI_Transmit+0x164>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d102      	bne.n	8004aa4 <HAL_SPI_Transmit+0x16a>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e0b2      	b.n	8004c1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1c7      	bne.n	8004a52 <HAL_SPI_Transmit+0x118>
 8004ac2:	e083      	b.n	8004bcc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_SPI_Transmit+0x198>
 8004acc:	8b7b      	ldrh	r3, [r7, #26]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d177      	bne.n	8004bc2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d912      	bls.n	8004b02 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b02      	subs	r3, #2
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b00:	e05f      	b.n	8004bc2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	7812      	ldrb	r2, [r2, #0]
 8004b0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b28:	e04b      	b.n	8004bc2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d12b      	bne.n	8004b90 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d912      	bls.n	8004b68 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b66:	e02c      	b.n	8004bc2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b8e:	e018      	b.n	8004bc2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b90:	f7fd fdba 	bl	8002708 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d803      	bhi.n	8004ba8 <HAL_SPI_Transmit+0x26e>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d102      	bne.n	8004bae <HAL_SPI_Transmit+0x274>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e02d      	b.n	8004c1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ae      	bne.n	8004b2a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fbd3 	bl	800537c <SPI_EndRxTxTransaction>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
 8004c44:	e0d4      	b.n	8004df0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_SPI_Transmit_DMA+0x2a>
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e0cc      	b.n	8004df0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_SPI_Transmit_DMA+0x3c>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e0c5      	b.n	8004df0 <HAL_SPI_Transmit_DMA+0x1c8>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2203      	movs	r2, #3
 8004c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	88fa      	ldrh	r2, [r7, #6]
 8004c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb6:	d10f      	bne.n	8004cd8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	4a46      	ldr	r2, [pc, #280]	@ (8004df8 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce4:	4a45      	ldr	r2, [pc, #276]	@ (8004dfc <HAL_SPI_Transmit_DMA+0x1d4>)
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cec:	4a44      	ldr	r2, [pc, #272]	@ (8004e00 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004cee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d06:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d10:	d82d      	bhi.n	8004d6e <HAL_SPI_Transmit_DMA+0x146>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1c:	d127      	bne.n	8004d6e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d3a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d4a:	e010      	b.n	8004d6e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d5a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d76:	4619      	mov	r1, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d86:	f7fd fe95 	bl	8002ab4 <HAL_DMA_Start_IT>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00b      	beq.n	8004da8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d94:	f043 0210 	orr.w	r2, r3, #16
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e023      	b.n	8004df0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d007      	beq.n	8004dc6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dc4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0220 	orr.w	r2, r2, #32
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0202 	orr.w	r2, r2, #2
 8004dec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	080050bb 	.word	0x080050bb
 8004dfc:	08005015 	.word	0x08005015
 8004e00:	080050d7 	.word	0x080050d7

08004e04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10e      	bne.n	8004e44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
    return;
 8004e42:	e0ce      	b.n	8004fe2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_SPI_IRQHandler+0x5e>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
    return;
 8004e60:	e0bf      	b.n	8004fe2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <HAL_SPI_IRQHandler+0x7e>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80b0 	beq.w	8004fe2 <HAL_SPI_IRQHandler+0x1de>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80aa 	beq.w	8004fe2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d023      	beq.n	8004ee0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d011      	beq.n	8004ec8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea8:	f043 0204 	orr.w	r2, r3, #4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	693b      	ldr	r3, [r7, #16]
        return;
 8004ede:	e080      	b.n	8004fe2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d014      	beq.n	8004f14 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f22:	f043 0208 	orr.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d04f      	beq.n	8004fe0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <HAL_SPI_IRQHandler+0x168>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d034      	beq.n	8004fd6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0203 	bic.w	r2, r2, #3
 8004f7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f88:	4a17      	ldr	r2, [pc, #92]	@ (8004fe8 <HAL_SPI_IRQHandler+0x1e4>)
 8004f8a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fd fe2d 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d016      	beq.n	8004fde <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe8 <HAL_SPI_IRQHandler+0x1e4>)
 8004fb6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fd fe17 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004fd4:	e003      	b.n	8004fde <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f812 	bl	8005000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fdc:	e000      	b.n	8004fe0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004fde:	bf00      	nop
    return;
 8004fe0:	bf00      	nop
  }
}
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	08005117 	.word	0x08005117

08004fec <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005022:	f7fd fb71 	bl	8002708 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d03b      	beq.n	80050ae <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0220 	bic.w	r2, r2, #32
 8005044:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0202 	bic.w	r2, r2, #2
 8005054:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	2164      	movs	r1, #100	@ 0x64
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f000 f98e 	bl	800537c <SPI_EndRxTxTransaction>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2200      	movs	r2, #0
 8005094:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050a6:	6978      	ldr	r0, [r7, #20]
 80050a8:	f7ff ffaa 	bl	8005000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80050ac:	e002      	b.n	80050b4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7fc fefe 	bl	8001eb0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff ff8f 	bl	8004fec <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0203 	bic.w	r2, r2, #3
 80050f2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f8:	f043 0210 	orr.w	r2, r3, #16
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ff79 	bl	8005000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff ff64 	bl	8005000 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005150:	f7fd fada 	bl	8002708 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	4413      	add	r3, r2
 800515e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005160:	f7fd fad2 	bl	8002708 <HAL_GetTick>
 8005164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005166:	4b39      	ldr	r3, [pc, #228]	@ (800524c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	015b      	lsls	r3, r3, #5
 800516c:	0d1b      	lsrs	r3, r3, #20
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	fb02 f303 	mul.w	r3, r2, r3
 8005174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005176:	e054      	b.n	8005222 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d050      	beq.n	8005222 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005180:	f7fd fac2 	bl	8002708 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	429a      	cmp	r2, r3
 800518e:	d902      	bls.n	8005196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d13d      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051ae:	d111      	bne.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051b8:	d004      	beq.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c2:	d107      	bne.n	80051d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051dc:	d10f      	bne.n	80051fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e017      	b.n	8005242 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	3b01      	subs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4013      	ands	r3, r2
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	429a      	cmp	r2, r3
 800523e:	d19b      	bne.n	8005178 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000200 	.word	0x20000200

08005250 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	@ 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005262:	f7fd fa51 	bl	8002708 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	4413      	add	r3, r2
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005272:	f7fd fa49 	bl	8002708 <HAL_GetTick>
 8005276:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005280:	4b3d      	ldr	r3, [pc, #244]	@ (8005378 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	00da      	lsls	r2, r3, #3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	0d1b      	lsrs	r3, r3, #20
 8005290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005298:	e060      	b.n	800535c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052a0:	d107      	bne.n	80052b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d050      	beq.n	800535c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ba:	f7fd fa25 	bl	8002708 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d902      	bls.n	80052d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d13d      	bne.n	800534c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e8:	d111      	bne.n	800530e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052f2:	d004      	beq.n	80052fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fc:	d107      	bne.n	800530e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800530c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005316:	d10f      	bne.n	8005338 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005336:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e010      	b.n	800536e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	3b01      	subs	r3, #1
 800535a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d196      	bne.n	800529a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3728      	adds	r7, #40	@ 0x28
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000200 	.word	0x20000200

0800537c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff ff5b 	bl	8005250 <SPI_WaitFifoStateUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e027      	b.n	8005400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	2180      	movs	r1, #128	@ 0x80
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fec0 	bl	8005140 <SPI_WaitFlagStateUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e014      	b.n	8005400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2200      	movs	r2, #0
 80053de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff ff34 	bl	8005250 <SPI_WaitFifoStateUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e000      	b.n	8005400 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e040      	b.n	800549c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fd f876 	bl	800251c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	@ 0x24
 8005434:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fea6 	bl	80061a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fbeb 	bl	8005c30 <UART_SetConfig>
 800545a:	4603      	mov	r3, r0
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e01b      	b.n	800549c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005482:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 ff25 	bl	80062e4 <UART_CheckIdleState>
 800549a:	4603      	mov	r3, r0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b08b      	sub	sp, #44	@ 0x2c
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d147      	bne.n	800554a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_UART_Transmit_IT+0x22>
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e040      	b.n	800554c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	@ 0x21
 80054f2:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fc:	d107      	bne.n	800550e <HAL_UART_Transmit_IT+0x6a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a13      	ldr	r2, [pc, #76]	@ (8005558 <HAL_UART_Transmit_IT+0xb4>)
 800550a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800550c:	e002      	b.n	8005514 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a12      	ldr	r2, [pc, #72]	@ (800555c <HAL_UART_Transmit_IT+0xb8>)
 8005512:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	613b      	str	r3, [r7, #16]
   return(result);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	623b      	str	r3, [r7, #32]
 8005534:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	69f9      	ldr	r1, [r7, #28]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e6      	bne.n	8005514 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	372c      	adds	r7, #44	@ 0x2c
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	08006847 	.word	0x08006847
 800555c:	08006791 	.word	0x08006791

08005560 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	@ 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005574:	2b20      	cmp	r3, #32
 8005576:	d137      	bne.n	80055e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_UART_Receive_IT+0x24>
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e030      	b.n	80055ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <HAL_UART_Receive_IT+0x94>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d01f      	beq.n	80055d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d018      	beq.n	80055d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	613b      	str	r3, [r7, #16]
   return(result);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	461a      	mov	r2, r3
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 ff96 	bl	8006510 <UART_Start_Receive_IT>
 80055e4:	4603      	mov	r3, r0
 80055e6:	e000      	b.n	80055ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055e8:	2302      	movs	r3, #2
  }
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3728      	adds	r7, #40	@ 0x28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40008000 	.word	0x40008000

080055f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b0ba      	sub	sp, #232	@ 0xe8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800561e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005622:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005626:	4013      	ands	r3, r2
 8005628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800562c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d115      	bne.n	8005660 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00f      	beq.n	8005660 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 82ca 	beq.w	8005bea <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	4798      	blx	r3
      }
      return;
 800565e:	e2c4      	b.n	8005bea <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8117 	beq.w	8005898 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800566a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005676:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800567a:	4b85      	ldr	r3, [pc, #532]	@ (8005890 <HAL_UART_IRQHandler+0x298>)
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 810a 	beq.w	8005898 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d011      	beq.n	80056b4 <HAL_UART_IRQHandler+0xbc>
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d011      	beq.n	80056e4 <HAL_UART_IRQHandler+0xec>
 80056c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2202      	movs	r2, #2
 80056d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d011      	beq.n	8005714 <HAL_UART_IRQHandler+0x11c>
 80056f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2204      	movs	r2, #4
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570a:	f043 0202 	orr.w	r2, r3, #2
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800572c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005730:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00b      	beq.n	8005750 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2208      	movs	r2, #8
 800573e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005746:	f043 0208 	orr.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005758:	2b00      	cmp	r3, #0
 800575a:	d012      	beq.n	8005782 <HAL_UART_IRQHandler+0x18a>
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00c      	beq.n	8005782 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8230 	beq.w	8005bee <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800579a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ca:	2b40      	cmp	r3, #64	@ 0x40
 80057cc:	d005      	beq.n	80057da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04f      	beq.n	800587a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 ff5e 	bl	800669c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d141      	bne.n	8005872 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800581a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800581e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1d9      	bne.n	80057ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005846:	4a13      	ldr	r2, [pc, #76]	@ (8005894 <HAL_UART_IRQHandler+0x29c>)
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd f9ce 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d017      	beq.n	800588a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00f      	b.n	800588a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9ca 	bl	8005c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e00b      	b.n	800588a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9c6 	bl	8005c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e007      	b.n	800588a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9c2 	bl	8005c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005888:	e1b1      	b.n	8005bee <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	bf00      	nop
    return;
 800588c:	e1af      	b.n	8005bee <HAL_UART_IRQHandler+0x5f6>
 800588e:	bf00      	nop
 8005890:	04000120 	.word	0x04000120
 8005894:	08006765 	.word	0x08006765

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589c:	2b01      	cmp	r3, #1
 800589e:	f040 816a 	bne.w	8005b76 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8163 	beq.w	8005b76 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 815c 	beq.w	8005b76 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2210      	movs	r2, #16
 80058c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d0:	2b40      	cmp	r3, #64	@ 0x40
 80058d2:	f040 80d4 	bne.w	8005a7e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80ad 	beq.w	8005a46 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f080 80a5 	bcs.w	8005a46 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005902:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 8086 	bne.w	8005a24 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800592c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005946:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800594e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800595a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1da      	bne.n	8005918 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005986:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800598a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800598e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e1      	bne.n	8005962 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3308      	adds	r3, #8
 80059a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3308      	adds	r3, #8
 80059be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e3      	bne.n	800599e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f4:	f023 0310 	bic.w	r3, r3, #16
 80059f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e4      	bne.n	80059e4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd f8a8 	bl	8002b74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8ea 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a44:	e0d5      	b.n	8005bf2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a50:	429a      	cmp	r2, r3
 8005a52:	f040 80ce 	bne.w	8005bf2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	f040 80c5 	bne.w	8005bf2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f8ce 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
      return;
 8005a7c:	e0b9      	b.n	8005bf2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80ab 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80a6 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005abe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ace:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e4      	bne.n	8005aaa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	623b      	str	r3, [r7, #32]
   return(result);
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b04:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e3      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f023 0310 	bic.w	r3, r3, #16
 8005b40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	69b9      	ldr	r1, [r7, #24]
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e4      	bne.n	8005b2c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f852 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b74:	e03f      	b.n	8005bf6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00e      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x5a8>
 8005b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 f89b 	bl	8006cd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b9e:	e02d      	b.n	8005bfc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00e      	beq.n	8005bca <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01c      	beq.n	8005bfa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
    }
    return;
 8005bc8:	e017      	b.n	8005bfa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d012      	beq.n	8005bfc <HAL_UART_IRQHandler+0x604>
 8005bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fe8f 	bl	8006906 <UART_EndTransmit_IT>
    return;
 8005be8:	e008      	b.n	8005bfc <HAL_UART_IRQHandler+0x604>
      return;
 8005bea:	bf00      	nop
 8005bec:	e006      	b.n	8005bfc <HAL_UART_IRQHandler+0x604>
    return;
 8005bee:	bf00      	nop
 8005bf0:	e004      	b.n	8005bfc <HAL_UART_IRQHandler+0x604>
      return;
 8005bf2:	bf00      	nop
 8005bf4:	e002      	b.n	8005bfc <HAL_UART_IRQHandler+0x604>
      return;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <HAL_UART_IRQHandler+0x604>
    return;
 8005bfa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bfc:	37e8      	adds	r7, #232	@ 0xe8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop

08005c04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c34:	b08a      	sub	sp, #40	@ 0x28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4ba4      	ldr	r3, [pc, #656]	@ (8005ef0 <UART_SetConfig+0x2c0>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a99      	ldr	r2, [pc, #612]	@ (8005ef4 <UART_SetConfig+0x2c4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cac:	430a      	orrs	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a90      	ldr	r2, [pc, #576]	@ (8005ef8 <UART_SetConfig+0x2c8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d126      	bne.n	8005d08 <UART_SetConfig+0xd8>
 8005cba:	4b90      	ldr	r3, [pc, #576]	@ (8005efc <UART_SetConfig+0x2cc>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d81b      	bhi.n	8005d00 <UART_SetConfig+0xd0>
 8005cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <UART_SetConfig+0xa0>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005ce9 	.word	0x08005ce9
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce6:	e116      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cee:	e112      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cf6:	e10e      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cfe:	e10a      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005d00:	2310      	movs	r3, #16
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d06:	e106      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a7c      	ldr	r2, [pc, #496]	@ (8005f00 <UART_SetConfig+0x2d0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d138      	bne.n	8005d84 <UART_SetConfig+0x154>
 8005d12:	4b7a      	ldr	r3, [pc, #488]	@ (8005efc <UART_SetConfig+0x2cc>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	f003 030c 	and.w	r3, r3, #12
 8005d1c:	2b0c      	cmp	r3, #12
 8005d1e:	d82d      	bhi.n	8005d7c <UART_SetConfig+0x14c>
 8005d20:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <UART_SetConfig+0xf8>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d5d 	.word	0x08005d5d
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	08005d7d 	.word	0x08005d7d
 8005d34:	08005d7d 	.word	0x08005d7d
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005d7d 	.word	0x08005d7d
 8005d40:	08005d7d 	.word	0x08005d7d
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	08005d7d 	.word	0x08005d7d
 8005d50:	08005d7d 	.word	0x08005d7d
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d75 	.word	0x08005d75
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d62:	e0d8      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005d64:	2302      	movs	r3, #2
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6a:	e0d4      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d72:	e0d0      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7a:	e0cc      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d82:	e0c8      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a5e      	ldr	r2, [pc, #376]	@ (8005f04 <UART_SetConfig+0x2d4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d125      	bne.n	8005dda <UART_SetConfig+0x1aa>
 8005d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8005efc <UART_SetConfig+0x2cc>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d98:	2b30      	cmp	r3, #48	@ 0x30
 8005d9a:	d016      	beq.n	8005dca <UART_SetConfig+0x19a>
 8005d9c:	2b30      	cmp	r3, #48	@ 0x30
 8005d9e:	d818      	bhi.n	8005dd2 <UART_SetConfig+0x1a2>
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d00a      	beq.n	8005dba <UART_SetConfig+0x18a>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d814      	bhi.n	8005dd2 <UART_SetConfig+0x1a2>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <UART_SetConfig+0x182>
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d008      	beq.n	8005dc2 <UART_SetConfig+0x192>
 8005db0:	e00f      	b.n	8005dd2 <UART_SetConfig+0x1a2>
 8005db2:	2300      	movs	r3, #0
 8005db4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db8:	e0ad      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dc0:	e0a9      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dc8:	e0a5      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd0:	e0a1      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005dd2:	2310      	movs	r3, #16
 8005dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd8:	e09d      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a4a      	ldr	r2, [pc, #296]	@ (8005f08 <UART_SetConfig+0x2d8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d125      	bne.n	8005e30 <UART_SetConfig+0x200>
 8005de4:	4b45      	ldr	r3, [pc, #276]	@ (8005efc <UART_SetConfig+0x2cc>)
 8005de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8005df0:	d016      	beq.n	8005e20 <UART_SetConfig+0x1f0>
 8005df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005df4:	d818      	bhi.n	8005e28 <UART_SetConfig+0x1f8>
 8005df6:	2b80      	cmp	r3, #128	@ 0x80
 8005df8:	d00a      	beq.n	8005e10 <UART_SetConfig+0x1e0>
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d814      	bhi.n	8005e28 <UART_SetConfig+0x1f8>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <UART_SetConfig+0x1d8>
 8005e02:	2b40      	cmp	r3, #64	@ 0x40
 8005e04:	d008      	beq.n	8005e18 <UART_SetConfig+0x1e8>
 8005e06:	e00f      	b.n	8005e28 <UART_SetConfig+0x1f8>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0e:	e082      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e10:	2302      	movs	r3, #2
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e16:	e07e      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1e:	e07a      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e20:	2308      	movs	r3, #8
 8005e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e26:	e076      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2e:	e072      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a35      	ldr	r2, [pc, #212]	@ (8005f0c <UART_SetConfig+0x2dc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d12a      	bne.n	8005e90 <UART_SetConfig+0x260>
 8005e3a:	4b30      	ldr	r3, [pc, #192]	@ (8005efc <UART_SetConfig+0x2cc>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e48:	d01a      	beq.n	8005e80 <UART_SetConfig+0x250>
 8005e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e4e:	d81b      	bhi.n	8005e88 <UART_SetConfig+0x258>
 8005e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e54:	d00c      	beq.n	8005e70 <UART_SetConfig+0x240>
 8005e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e5a:	d815      	bhi.n	8005e88 <UART_SetConfig+0x258>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <UART_SetConfig+0x238>
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e64:	d008      	beq.n	8005e78 <UART_SetConfig+0x248>
 8005e66:	e00f      	b.n	8005e88 <UART_SetConfig+0x258>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6e:	e052      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e70:	2302      	movs	r3, #2
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e76:	e04e      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e04a      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e80:	2308      	movs	r3, #8
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e046      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e042      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a17      	ldr	r2, [pc, #92]	@ (8005ef4 <UART_SetConfig+0x2c4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d13a      	bne.n	8005f10 <UART_SetConfig+0x2e0>
 8005e9a:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <UART_SetConfig+0x2cc>)
 8005e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ea4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ea8:	d01a      	beq.n	8005ee0 <UART_SetConfig+0x2b0>
 8005eaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005eae:	d81b      	bhi.n	8005ee8 <UART_SetConfig+0x2b8>
 8005eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb4:	d00c      	beq.n	8005ed0 <UART_SetConfig+0x2a0>
 8005eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eba:	d815      	bhi.n	8005ee8 <UART_SetConfig+0x2b8>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <UART_SetConfig+0x298>
 8005ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ec4:	d008      	beq.n	8005ed8 <UART_SetConfig+0x2a8>
 8005ec6:	e00f      	b.n	8005ee8 <UART_SetConfig+0x2b8>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ece:	e022      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed6:	e01e      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ede:	e01a      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee6:	e016      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eee:	e012      	b.n	8005f16 <UART_SetConfig+0x2e6>
 8005ef0:	efff69f3 	.word	0xefff69f3
 8005ef4:	40008000 	.word	0x40008000
 8005ef8:	40013800 	.word	0x40013800
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40004400 	.word	0x40004400
 8005f04:	40004800 	.word	0x40004800
 8005f08:	40004c00 	.word	0x40004c00
 8005f0c:	40005000 	.word	0x40005000
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a9f      	ldr	r2, [pc, #636]	@ (8006198 <UART_SetConfig+0x568>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d17a      	bne.n	8006016 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d824      	bhi.n	8005f72 <UART_SetConfig+0x342>
 8005f28:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <UART_SetConfig+0x300>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f73 	.word	0x08005f73
 8005f38:	08005f5d 	.word	0x08005f5d
 8005f3c:	08005f73 	.word	0x08005f73
 8005f40:	08005f63 	.word	0x08005f63
 8005f44:	08005f73 	.word	0x08005f73
 8005f48:	08005f73 	.word	0x08005f73
 8005f4c:	08005f73 	.word	0x08005f73
 8005f50:	08005f6b 	.word	0x08005f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fd ff06 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8005f58:	61f8      	str	r0, [r7, #28]
        break;
 8005f5a:	e010      	b.n	8005f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800619c <UART_SetConfig+0x56c>)
 8005f5e:	61fb      	str	r3, [r7, #28]
        break;
 8005f60:	e00d      	b.n	8005f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f62:	f7fd fe67 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8005f66:	61f8      	str	r0, [r7, #28]
        break;
 8005f68:	e009      	b.n	8005f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f6e:	61fb      	str	r3, [r7, #28]
        break;
 8005f70:	e005      	b.n	8005f7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80fb 	beq.w	800617c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4413      	add	r3, r2
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d305      	bcc.n	8005fa2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d903      	bls.n	8005faa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fa8:	e0e8      	b.n	800617c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	2200      	movs	r2, #0
 8005fae:	461c      	mov	r4, r3
 8005fb0:	4615      	mov	r5, r2
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	022b      	lsls	r3, r5, #8
 8005fbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fc0:	0222      	lsls	r2, r4, #8
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	6849      	ldr	r1, [r1, #4]
 8005fc6:	0849      	lsrs	r1, r1, #1
 8005fc8:	2000      	movs	r0, #0
 8005fca:	4688      	mov	r8, r1
 8005fcc:	4681      	mov	r9, r0
 8005fce:	eb12 0a08 	adds.w	sl, r2, r8
 8005fd2:	eb43 0b09 	adc.w	fp, r3, r9
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe4:	4650      	mov	r0, sl
 8005fe6:	4659      	mov	r1, fp
 8005fe8:	f7fa f94a 	bl	8000280 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ffa:	d308      	bcc.n	800600e <UART_SetConfig+0x3de>
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006002:	d204      	bcs.n	800600e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	e0b6      	b.n	800617c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006014:	e0b2      	b.n	800617c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800601e:	d15e      	bne.n	80060de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006020:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006024:	2b08      	cmp	r3, #8
 8006026:	d828      	bhi.n	800607a <UART_SetConfig+0x44a>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <UART_SetConfig+0x400>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006055 	.word	0x08006055
 8006034:	0800605d 	.word	0x0800605d
 8006038:	08006065 	.word	0x08006065
 800603c:	0800607b 	.word	0x0800607b
 8006040:	0800606b 	.word	0x0800606b
 8006044:	0800607b 	.word	0x0800607b
 8006048:	0800607b 	.word	0x0800607b
 800604c:	0800607b 	.word	0x0800607b
 8006050:	08006073 	.word	0x08006073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006054:	f7fd fe86 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8006058:	61f8      	str	r0, [r7, #28]
        break;
 800605a:	e014      	b.n	8006086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800605c:	f7fd fe98 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 8006060:	61f8      	str	r0, [r7, #28]
        break;
 8006062:	e010      	b.n	8006086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006064:	4b4d      	ldr	r3, [pc, #308]	@ (800619c <UART_SetConfig+0x56c>)
 8006066:	61fb      	str	r3, [r7, #28]
        break;
 8006068:	e00d      	b.n	8006086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800606a:	f7fd fde3 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 800606e:	61f8      	str	r0, [r7, #28]
        break;
 8006070:	e009      	b.n	8006086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006076:	61fb      	str	r3, [r7, #28]
        break;
 8006078:	e005      	b.n	8006086 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d077      	beq.n	800617c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	005a      	lsls	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b0f      	cmp	r3, #15
 80060a6:	d916      	bls.n	80060d6 <UART_SetConfig+0x4a6>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ae:	d212      	bcs.n	80060d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f023 030f 	bic.w	r3, r3, #15
 80060b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	8afb      	ldrh	r3, [r7, #22]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	8afa      	ldrh	r2, [r7, #22]
 80060d2:	60da      	str	r2, [r3, #12]
 80060d4:	e052      	b.n	800617c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060dc:	e04e      	b.n	800617c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d827      	bhi.n	8006136 <UART_SetConfig+0x506>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <UART_SetConfig+0x4bc>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006119 	.word	0x08006119
 80060f4:	08006121 	.word	0x08006121
 80060f8:	08006137 	.word	0x08006137
 80060fc:	08006127 	.word	0x08006127
 8006100:	08006137 	.word	0x08006137
 8006104:	08006137 	.word	0x08006137
 8006108:	08006137 	.word	0x08006137
 800610c:	0800612f 	.word	0x0800612f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fd fe28 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8006114:	61f8      	str	r0, [r7, #28]
        break;
 8006116:	e014      	b.n	8006142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006118:	f7fd fe3a 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 800611c:	61f8      	str	r0, [r7, #28]
        break;
 800611e:	e010      	b.n	8006142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006120:	4b1e      	ldr	r3, [pc, #120]	@ (800619c <UART_SetConfig+0x56c>)
 8006122:	61fb      	str	r3, [r7, #28]
        break;
 8006124:	e00d      	b.n	8006142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006126:	f7fd fd85 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 800612a:	61f8      	str	r0, [r7, #28]
        break;
 800612c:	e009      	b.n	8006142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006132:	61fb      	str	r3, [r7, #28]
        break;
 8006134:	e005      	b.n	8006142 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006140:	bf00      	nop
    }

    if (pclk != 0U)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d019      	beq.n	800617c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	085a      	lsrs	r2, r3, #1
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	441a      	add	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d909      	bls.n	8006176 <UART_SetConfig+0x546>
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006168:	d205      	bcs.n	8006176 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60da      	str	r2, [r3, #12]
 8006174:	e002      	b.n	800617c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006188:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800618c:	4618      	mov	r0, r3
 800618e:	3728      	adds	r7, #40	@ 0x28
 8006190:	46bd      	mov	sp, r7
 8006192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006196:	bf00      	nop
 8006198:	40008000 	.word	0x40008000
 800619c:	00f42400 	.word	0x00f42400

080061a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629e:	d10a      	bne.n	80062b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b098      	sub	sp, #96	@ 0x60
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f4:	f7fc fa08 	bl	8002708 <HAL_GetTick>
 80062f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b08      	cmp	r3, #8
 8006306:	d12e      	bne.n	8006366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006310:	2200      	movs	r2, #0
 8006312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f88c 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d021      	beq.n	8006366 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006336:	653b      	str	r3, [r7, #80]	@ 0x50
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006340:	647b      	str	r3, [r7, #68]	@ 0x44
 8006342:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800634e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e062      	b.n	800642c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b04      	cmp	r3, #4
 8006372:	d149      	bne.n	8006408 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800637c:	2200      	movs	r2, #0
 800637e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f856 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d03c      	beq.n	8006408 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	623b      	str	r3, [r7, #32]
   return(result);
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e6      	bne.n	800638e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063e0:	61fa      	str	r2, [r7, #28]
 80063e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	69b9      	ldr	r1, [r7, #24]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	617b      	str	r3, [r7, #20]
   return(result);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e011      	b.n	800642c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3758      	adds	r7, #88	@ 0x58
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006444:	e04f      	b.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d04b      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fc f95b 	bl	8002708 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x30>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e04e      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d037      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b80      	cmp	r3, #128	@ 0x80
 800647a:	d034      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d031      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d110      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f8ff 	bl	800669c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2208      	movs	r2, #8
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e029      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c0:	d111      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f8e5 	bl	800669c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00f      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0a0      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006510:	b480      	push	{r7}
 8006512:	b097      	sub	sp, #92	@ 0x5c
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	88fa      	ldrh	r2, [r7, #6]
 8006530:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006542:	d10e      	bne.n	8006562 <UART_Start_Receive_IT+0x52>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <UART_Start_Receive_IT+0x48>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006552:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006556:	e02d      	b.n	80065b4 <UART_Start_Receive_IT+0xa4>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	22ff      	movs	r2, #255	@ 0xff
 800655c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006560:	e028      	b.n	80065b4 <UART_Start_Receive_IT+0xa4>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10d      	bne.n	8006586 <UART_Start_Receive_IT+0x76>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <UART_Start_Receive_IT+0x6c>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	22ff      	movs	r2, #255	@ 0xff
 8006576:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800657a:	e01b      	b.n	80065b4 <UART_Start_Receive_IT+0xa4>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	227f      	movs	r2, #127	@ 0x7f
 8006580:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006584:	e016      	b.n	80065b4 <UART_Start_Receive_IT+0xa4>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800658e:	d10d      	bne.n	80065ac <UART_Start_Receive_IT+0x9c>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <UART_Start_Receive_IT+0x92>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	227f      	movs	r2, #127	@ 0x7f
 800659c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065a0:	e008      	b.n	80065b4 <UART_Start_Receive_IT+0xa4>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	223f      	movs	r2, #63	@ 0x3f
 80065a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80065aa:	e003      	b.n	80065b4 <UART_Start_Receive_IT+0xa4>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2222      	movs	r2, #34	@ 0x22
 80065c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	657b      	str	r3, [r7, #84]	@ 0x54
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80065ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006600:	d107      	bne.n	8006612 <UART_Start_Receive_IT+0x102>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a21      	ldr	r2, [pc, #132]	@ (8006694 <UART_Start_Receive_IT+0x184>)
 800660e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006610:	e002      	b.n	8006618 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4a20      	ldr	r2, [pc, #128]	@ (8006698 <UART_Start_Receive_IT+0x188>)
 8006616:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d019      	beq.n	8006654 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006640:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_Start_Receive_IT+0x110>
 8006652:	e018      	b.n	8006686 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	613b      	str	r3, [r7, #16]
   return(result);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f043 0320 	orr.w	r3, r3, #32
 8006668:	653b      	str	r3, [r7, #80]	@ 0x50
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006672:	623b      	str	r3, [r7, #32]
 8006674:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	69f9      	ldr	r1, [r7, #28]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e6      	bne.n	8006654 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	375c      	adds	r7, #92	@ 0x5c
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	08006b19 	.word	0x08006b19
 8006698:	0800695d 	.word	0x0800695d

0800669c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b095      	sub	sp, #84	@ 0x54
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80066c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e6      	bne.n	80066a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800670e:	2b01      	cmp	r3, #1
 8006710:	d118      	bne.n	8006744 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f023 0310 	bic.w	r3, r3, #16
 8006726:	647b      	str	r3, [r7, #68]	@ 0x44
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6979      	ldr	r1, [r7, #20]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	613b      	str	r3, [r7, #16]
   return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e6      	bne.n	8006712 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006758:	bf00      	nop
 800675a:	3754      	adds	r7, #84	@ 0x54
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fa3e 	bl	8005c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b08f      	sub	sp, #60	@ 0x3c
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800679c:	2b21      	cmp	r3, #33	@ 0x21
 800679e:	d14c      	bne.n	800683a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d132      	bne.n	8006812 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	613b      	str	r3, [r7, #16]
   return(result);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006810:	e013      	b.n	800683a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800683a:	bf00      	nop
 800683c:	373c      	adds	r7, #60	@ 0x3c
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006846:	b480      	push	{r7}
 8006848:	b091      	sub	sp, #68	@ 0x44
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006852:	2b21      	cmp	r3, #33	@ 0x21
 8006854:	d151      	bne.n	80068fa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d132      	bne.n	80068c8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	623b      	str	r3, [r7, #32]
   return(result);
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006876:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30
 8006882:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e6      	bne.n	8006862 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	69b9      	ldr	r1, [r7, #24]
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	617b      	str	r3, [r7, #20]
   return(result);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e6      	bne.n	8006894 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80068c6:	e018      	b.n	80068fa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80068ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068da:	b292      	uxth	r2, r2
 80068dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e2:	1c9a      	adds	r2, r3, #2
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80068fa:	bf00      	nop
 80068fc:	3744      	adds	r7, #68	@ 0x44
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b088      	sub	sp, #32
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	60bb      	str	r3, [r7, #8]
   return(result);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6979      	ldr	r1, [r7, #20]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	613b      	str	r3, [r7, #16]
   return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e6      	bne.n	800690e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fb fd4d 	bl	80023ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006952:	bf00      	nop
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b09c      	sub	sp, #112	@ 0x70
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800696a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006974:	2b22      	cmp	r3, #34	@ 0x22
 8006976:	f040 80be 	bne.w	8006af6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006980:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006984:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006988:	b2d9      	uxtb	r1, r3
 800698a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800698e:	b2da      	uxtb	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006994:	400a      	ands	r2, r1
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f040 80a3 	bne.w	8006b0a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a34      	ldr	r2, [pc, #208]	@ (8006b14 <UART_RxISR_8BIT+0x1b8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d01f      	beq.n	8006a88 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d018      	beq.n	8006a88 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	623b      	str	r3, [r7, #32]
   return(result);
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e6      	bne.n	8006a56 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d12e      	bne.n	8006aee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d103      	bne.n	8006ade <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2210      	movs	r2, #16
 8006adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff f896 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aec:	e00d      	b.n	8006b0a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fb fca8 	bl	8002444 <HAL_UART_RxCpltCallback>
}
 8006af4:	e009      	b.n	8006b0a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	8b1b      	ldrh	r3, [r3, #24]
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0208 	orr.w	r2, r2, #8
 8006b06:	b292      	uxth	r2, r2
 8006b08:	831a      	strh	r2, [r3, #24]
}
 8006b0a:	bf00      	nop
 8006b0c:	3770      	adds	r7, #112	@ 0x70
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40008000 	.word	0x40008000

08006b18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b09c      	sub	sp, #112	@ 0x70
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b30:	2b22      	cmp	r3, #34	@ 0x22
 8006b32:	f040 80be 	bne.w	8006cb2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b44:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b46:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006b4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b4e:	4013      	ands	r3, r2
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5a:	1c9a      	adds	r2, r3, #2
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f040 80a3 	bne.w	8006cc6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b94:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ba0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ba4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e6      	bne.n	8006b80 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3308      	adds	r3, #8
 8006bd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bd2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e5      	bne.n	8006bb2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a34      	ldr	r2, [pc, #208]	@ (8006cd0 <UART_RxISR_16BIT+0x1b8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d01f      	beq.n	8006c44 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d018      	beq.n	8006c44 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c32:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d12e      	bne.n	8006caa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6979      	ldr	r1, [r7, #20]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e6      	bne.n	8006c52 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f003 0310 	and.w	r3, r3, #16
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d103      	bne.n	8006c9a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2210      	movs	r2, #16
 8006c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fe ffb8 	bl	8005c18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ca8:	e00d      	b.n	8006cc6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fb fbca 	bl	8002444 <HAL_UART_RxCpltCallback>
}
 8006cb0:	e009      	b.n	8006cc6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	8b1b      	ldrh	r3, [r3, #24]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0208 	orr.w	r2, r2, #8
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	831a      	strh	r2, [r3, #24]
}
 8006cc6:	bf00      	nop
 8006cc8:	3770      	adds	r7, #112	@ 0x70
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40008000 	.word	0x40008000

08006cd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	7992      	ldrb	r2, [r2, #6]
 8006cfa:	08d2      	lsrs	r2, r2, #3
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	fb13 f302 	smulbb	r3, r3, r2
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	889b      	ldrh	r3, [r3, #4]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	885b      	ldrh	r3, [r3, #2]
 8006d12:	fb02 f303 	mul.w	r3, r2, r3
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	60da      	str	r2, [r3, #12]
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006d2e:	b490      	push	{r4, r7}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	1d39      	adds	r1, r7, #4
 8006d3a:	e881 000c 	stmia.w	r1, {r2, r3}
 8006d3e:	4623      	mov	r3, r4
 8006d40:	81fb      	strh	r3, [r7, #14]
 8006d42:	4603      	mov	r3, r0
 8006d44:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006d4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d4e:	88ba      	ldrh	r2, [r7, #4]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	da04      	bge.n	8006d5e <code+0x30>
        code |= LEFT;
 8006d54:	2201      	movs	r2, #1
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	75fb      	strb	r3, [r7, #23]
 8006d5c:	e008      	b.n	8006d70 <code+0x42>
    } else if (x0 > window.x1) {
 8006d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d62:	893a      	ldrh	r2, [r7, #8]
 8006d64:	4293      	cmp	r3, r2
 8006d66:	dd03      	ble.n	8006d70 <code+0x42>
        code |= RIGHT;
 8006d68:	2202      	movs	r2, #2
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8006d70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d74:	88fa      	ldrh	r2, [r7, #6]
 8006d76:	4293      	cmp	r3, r2
 8006d78:	da04      	bge.n	8006d84 <code+0x56>
        code |= BOTTOM;
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	75fb      	strb	r3, [r7, #23]
 8006d82:	e008      	b.n	8006d96 <code+0x68>
    } else if (y0 > window.y1) {
 8006d84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d88:	897a      	ldrh	r2, [r7, #10]
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	dd03      	ble.n	8006d96 <code+0x68>
        code |= TOP;
 8006d8e:	2208      	movs	r2, #8
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc90      	pop	{r4, r7}
 8006da0:	4770      	bx	lr

08006da2 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b088      	sub	sp, #32
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
 8006dae:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006dbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006dc0:	cb0c      	ldmia	r3, {r2, r3}
 8006dc2:	f7ff ffb4 	bl	8006d2e <code>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006dd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006dda:	cb0c      	ldmia	r3, {r2, r3}
 8006ddc:	f7ff ffa7 	bl	8006d2e <code>
 8006de0:	4603      	mov	r3, r0
 8006de2:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8006de4:	2300      	movs	r3, #0
 8006de6:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006de8:	7ffa      	ldrb	r2, [r7, #31]
 8006dea:	7fbb      	ldrb	r3, [r7, #30]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8006df4:	2301      	movs	r3, #1
 8006df6:	777b      	strb	r3, [r7, #29]
            break;
 8006df8:	e0e9      	b.n	8006fce <clip_line+0x22c>
        } else if (code0 & code1) {
 8006dfa:	7ffa      	ldrb	r2, [r7, #31]
 8006dfc:	7fbb      	ldrb	r3, [r7, #30]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 80e2 	bne.w	8006fcc <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006e10:	7ffb      	ldrb	r3, [r7, #31]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <clip_line+0x78>
 8006e16:	7ffb      	ldrb	r3, [r7, #31]
 8006e18:	e000      	b.n	8006e1c <clip_line+0x7a>
 8006e1a:	7fbb      	ldrb	r3, [r7, #30]
 8006e1c:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006e1e:	2208      	movs	r2, #8
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	4013      	ands	r3, r2
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d024      	beq.n	8006e74 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e40:	1acb      	subs	r3, r1, r3
 8006e42:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006e44:	4608      	mov	r0, r1
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006e4c:	1a41      	subs	r1, r0, r1
 8006e4e:	fb03 f101 	mul.w	r1, r3, r1
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e60:	1ac3      	subs	r3, r0, r3
 8006e62:	fb91 f3f3 	sdiv	r3, r1, r3
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8006e6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006e70:	833b      	strh	r3, [r7, #24]
 8006e72:	e07f      	b.n	8006f74 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8006e74:	2204      	movs	r2, #4
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d024      	beq.n	8006eca <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e96:	1acb      	subs	r3, r1, r3
 8006e98:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ea2:	1a41      	subs	r1, r0, r1
 8006ea4:	fb03 f101 	mul.w	r1, r3, r1
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb6:	1ac3      	subs	r3, r0, r3
 8006eb8:	fb91 f3f3 	sdiv	r3, r1, r3
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8006ec4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ec6:	833b      	strh	r3, [r7, #24]
 8006ec8:	e054      	b.n	8006f74 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006eca:	2202      	movs	r2, #2
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d024      	beq.n	8006f20 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eec:	1acb      	subs	r3, r1, r3
 8006eee:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	68f9      	ldr	r1, [r7, #12]
 8006ef4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006ef8:	1a41      	subs	r1, r0, r1
 8006efa:	fb03 f101 	mul.w	r1, r3, r1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f04:	4618      	mov	r0, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f0c:	1ac3      	subs	r3, r0, r3
 8006f0e:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4413      	add	r3, r2
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006f1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006f1c:	837b      	strh	r3, [r7, #26]
 8006f1e:	e029      	b.n	8006f74 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006f20:	2201      	movs	r2, #1
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	4013      	ands	r3, r2
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d023      	beq.n	8006f74 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f42:	1acb      	subs	r3, r1, r3
 8006f44:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8006f46:	4608      	mov	r0, r1
 8006f48:	68f9      	ldr	r1, [r7, #12]
 8006f4a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006f4e:	1a41      	subs	r1, r0, r1
 8006f50:	fb03 f101 	mul.w	r1, r3, r1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f62:	1ac3      	subs	r3, r0, r3
 8006f64:	fb91 f3f3 	sdiv	r3, r1, r3
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8006f70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f72:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8006f74:	7dfa      	ldrb	r2, [r7, #23]
 8006f76:	7ffb      	ldrb	r3, [r7, #31]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d113      	bne.n	8006fa4 <clip_line+0x202>
                *x0 = x;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8b7a      	ldrh	r2, [r7, #26]
 8006f80:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	8b3a      	ldrh	r2, [r7, #24]
 8006f86:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006f94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f98:	cb0c      	ldmia	r3, {r2, r3}
 8006f9a:	f7ff fec8 	bl	8006d2e <code>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e721      	b.n	8006de8 <clip_line+0x46>
            } else {
                *x1 = x;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8b7a      	ldrh	r2, [r7, #26]
 8006fa8:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	8b3a      	ldrh	r2, [r7, #24]
 8006fae:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006fbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fc0:	cb0c      	ldmia	r3, {r2, r3}
 8006fc2:	f7ff feb4 	bl	8006d2e <code>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006fca:	e70d      	b.n	8006de8 <clip_line+0x46>
            break;
 8006fcc:	bf00      	nop
            }
        }
    }

    return accept;
 8006fce:	7f7b      	ldrb	r3, [r7, #29]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	3306      	adds	r3, #6
 8006fe8:	2208      	movs	r2, #8
 8006fea:	4619      	mov	r1, r3
 8006fec:	f001 fa56 	bl	800849c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	330e      	adds	r3, #14
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	330f      	adds	r3, #15
 8006ffe:	781a      	ldrb	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	3310      	adds	r3, #16
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	72da      	strb	r2, [r3, #11]

    return 0;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b08e      	sub	sp, #56	@ 0x38
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007024:	f107 0314 	add.w	r3, r7, #20
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff ffd4 	bl	8006fd8 <fontx_meta>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8007036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <fontx_glyph+0x2c>
        return status;
 800703e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e077      	b.n	8007134 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8007044:	7f7a      	ldrb	r2, [r7, #29]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800704a:	7fba      	ldrb	r2, [r7, #30]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8007050:	7f7b      	ldrb	r3, [r7, #29]
 8007052:	3307      	adds	r3, #7
 8007054:	2b00      	cmp	r3, #0
 8007056:	da00      	bge.n	800705a <fontx_glyph+0x42>
 8007058:	3307      	adds	r3, #7
 800705a:	10db      	asrs	r3, r3, #3
 800705c:	b2da      	uxtb	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	78da      	ldrb	r2, [r3, #3]
 8007066:	7fbb      	ldrb	r3, [r7, #30]
 8007068:	fb12 f303 	smulbb	r3, r2, r3
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8007072:	7ffb      	ldrb	r3, [r7, #31]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10f      	bne.n	8007098 <fontx_glyph+0x80>
        if (code < 0x100) {
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2bff      	cmp	r3, #255	@ 0xff
 800707c:	d859      	bhi.n	8007132 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	789b      	ldrb	r3, [r3, #2]
 8007082:	461a      	mov	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	fb02 f303 	mul.w	r3, r2, r3
 800708a:	3311      	adds	r3, #17
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	441a      	add	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	e04d      	b.n	8007134 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3312      	adds	r3, #18
 800709c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3311      	adds	r3, #17
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80070aa:	e03d      	b.n	8007128 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	3301      	adds	r3, #1
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	4413      	add	r3, r2
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	3302      	adds	r3, #2
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	3303      	adds	r3, #3
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	4413      	add	r3, r2
 80070d0:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d31c      	bcc.n	8007114 <fontx_glyph+0xfc>
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d818      	bhi.n	8007114 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ea:	4413      	add	r3, r2
 80070ec:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3311      	adds	r3, #17
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	461a      	mov	r2, r3
                    nc * glyph->size
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	789b      	ldrb	r3, [r3, #2]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007100:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007104:	4413      	add	r3, r2
 8007106:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	441a      	add	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	e00f      	b.n	8007134 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8007114:	6a3a      	ldr	r2, [r7, #32]
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	1ad2      	subs	r2, r2, r3
 800711a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711c:	4413      	add	r3, r2
 800711e:	3301      	adds	r3, #1
 8007120:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	3304      	adds	r3, #4
 8007126:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	1e5a      	subs	r2, r3, #1
 800712c:	633a      	str	r2, [r7, #48]	@ 0x30
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1bc      	bne.n	80070ac <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8007132:	2301      	movs	r3, #1
 8007134:	4618      	mov	r0, r3
 8007136:	3738      	adds	r7, #56	@ 0x38
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	dd01      	ble.n	8007152 <min+0x16>
        return b;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	e000      	b.n	8007154 <min+0x18>
    };
    return a;
 8007152:	687b      	ldr	r3, [r7, #4]
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <max>:

static inline int max(int a, int b) {
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
    if (a > b) {
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	dd01      	ble.n	8007176 <max+0x16>
        return a;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	e000      	b.n	8007178 <max+0x18>
    }
    return b;
 8007176:	683b      	ldr	r3, [r7, #0]
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	80fb      	strh	r3, [r7, #6]
 800718e:	460b      	mov	r3, r1
 8007190:	80bb      	strh	r3, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8007196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800719a:	4a12      	ldr	r2, [pc, #72]	@ (80071e4 <hagl_put_pixel+0x60>)
 800719c:	8812      	ldrh	r2, [r2, #0]
 800719e:	4293      	cmp	r3, r2
 80071a0:	db1a      	blt.n	80071d8 <hagl_put_pixel+0x54>
 80071a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071a6:	4a0f      	ldr	r2, [pc, #60]	@ (80071e4 <hagl_put_pixel+0x60>)
 80071a8:	8852      	ldrh	r2, [r2, #2]
 80071aa:	4293      	cmp	r3, r2
 80071ac:	db14      	blt.n	80071d8 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80071ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071b2:	4a0c      	ldr	r2, [pc, #48]	@ (80071e4 <hagl_put_pixel+0x60>)
 80071b4:	8892      	ldrh	r2, [r2, #4]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	dc10      	bgt.n	80071dc <hagl_put_pixel+0x58>
 80071ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80071be:	4a09      	ldr	r2, [pc, #36]	@ (80071e4 <hagl_put_pixel+0x60>)
 80071c0:	88d2      	ldrh	r2, [r2, #6]
 80071c2:	4293      	cmp	r3, r2
 80071c4:	dc0a      	bgt.n	80071dc <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80071c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80071ce:	887a      	ldrh	r2, [r7, #2]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fa fe45 	bl	8001e60 <lcdPutPixel>
 80071d6:	e002      	b.n	80071de <hagl_put_pixel+0x5a>
        return;
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <hagl_put_pixel+0x5a>
        return;
 80071dc:	bf00      	nop
}
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	2000020c 	.word	0x2000020c

080071e8 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	4611      	mov	r1, r2
 80071f4:	461a      	mov	r2, r3
 80071f6:	4623      	mov	r3, r4
 80071f8:	80fb      	strh	r3, [r7, #6]
 80071fa:	4603      	mov	r3, r0
 80071fc:	80bb      	strh	r3, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	807b      	strh	r3, [r7, #2]
 8007202:	4613      	mov	r3, r2
 8007204:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	4413      	add	r3, r2
 800720c:	b29b      	uxth	r3, r3
 800720e:	b21a      	sxth	r2, r3
 8007210:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8007214:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007218:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800721c:	883b      	ldrh	r3, [r7, #0]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4623      	mov	r3, r4
 8007222:	f000 f827 	bl	8007274 <hagl_draw_line>
#endif
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	bd90      	pop	{r4, r7, pc}

0800722e <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 800722e:	b590      	push	{r4, r7, lr}
 8007230:	b085      	sub	sp, #20
 8007232:	af02      	add	r7, sp, #8
 8007234:	4604      	mov	r4, r0
 8007236:	4608      	mov	r0, r1
 8007238:	4611      	mov	r1, r2
 800723a:	461a      	mov	r2, r3
 800723c:	4623      	mov	r3, r4
 800723e:	80fb      	strh	r3, [r7, #6]
 8007240:	4603      	mov	r3, r0
 8007242:	80bb      	strh	r3, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	807b      	strh	r3, [r7, #2]
 8007248:	4613      	mov	r3, r2
 800724a:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 800724c:	88ba      	ldrh	r2, [r7, #4]
 800724e:	887b      	ldrh	r3, [r7, #2]
 8007250:	4413      	add	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	b21c      	sxth	r4, r3
 8007256:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800725a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800725e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007262:	883b      	ldrh	r3, [r7, #0]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4623      	mov	r3, r4
 8007268:	f000 f804 	bl	8007274 <hagl_draw_line>
#endif
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bd90      	pop	{r4, r7, pc}

08007274 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007276:	b089      	sub	sp, #36	@ 0x24
 8007278:	af02      	add	r7, sp, #8
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	4611      	mov	r1, r2
 8007280:	461a      	mov	r2, r3
 8007282:	4623      	mov	r3, r4
 8007284:	80fb      	strh	r3, [r7, #6]
 8007286:	4603      	mov	r3, r0
 8007288:	80bb      	strh	r3, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	807b      	strh	r3, [r7, #2]
 800728e:	4613      	mov	r3, r2
 8007290:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8007292:	463b      	mov	r3, r7
 8007294:	1cba      	adds	r2, r7, #2
 8007296:	1d3d      	adds	r5, r7, #4
 8007298:	1dbc      	adds	r4, r7, #6
 800729a:	494a      	ldr	r1, [pc, #296]	@ (80073c4 <hagl_draw_line+0x150>)
 800729c:	466e      	mov	r6, sp
 800729e:	c903      	ldmia	r1, {r0, r1}
 80072a0:	e886 0003 	stmia.w	r6, {r0, r1}
 80072a4:	4629      	mov	r1, r5
 80072a6:	4620      	mov	r0, r4
 80072a8:	f7ff fd7b 	bl	8006da2 <clip_line>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f083 0301 	eor.w	r3, r3, #1
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d17e      	bne.n	80073b6 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80072b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072bc:	461a      	mov	r2, r3
 80072be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfb8      	it	lt
 80072c8:	425b      	neglt	r3, r3
 80072ca:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 80072cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	da01      	bge.n	80072dc <hagl_draw_line+0x68>
 80072d8:	2301      	movs	r3, #1
 80072da:	e001      	b.n	80072e0 <hagl_draw_line+0x6c>
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 80072e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfb8      	it	lt
 80072f2:	425b      	neglt	r3, r3
 80072f4:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 80072f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80072fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80072fe:	429a      	cmp	r2, r3
 8007300:	da01      	bge.n	8007306 <hagl_draw_line+0x92>
 8007302:	2301      	movs	r3, #1
 8007304:	e001      	b.n	800730a <hagl_draw_line+0x96>
 8007306:	f04f 33ff 	mov.w	r3, #4294967295
 800730a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 800730c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007310:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007314:	429a      	cmp	r2, r3
 8007316:	dd06      	ble.n	8007326 <hagl_draw_line+0xb2>
 8007318:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800731c:	0fda      	lsrs	r2, r3, #31
 800731e:	4413      	add	r3, r2
 8007320:	105b      	asrs	r3, r3, #1
 8007322:	b21b      	sxth	r3, r3
 8007324:	e006      	b.n	8007334 <hagl_draw_line+0xc0>
 8007326:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800732a:	0fda      	lsrs	r2, r3, #31
 800732c:	4413      	add	r3, r2
 800732e:	105b      	asrs	r3, r3, #1
 8007330:	425b      	negs	r3, r3
 8007332:	b21b      	sxth	r3, r3
 8007334:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8007336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800733a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800733e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff1f 	bl	8007184 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8007346:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800734a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800734e:	429a      	cmp	r2, r3
 8007350:	d105      	bne.n	800735e <hagl_draw_line+0xea>
 8007352:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007356:	f9b7 3000 	ldrsh.w	r3, [r7]
 800735a:	429a      	cmp	r2, r3
 800735c:	d02d      	beq.n	80073ba <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 800735e:	8afb      	ldrh	r3, [r7, #22]
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	b29b      	uxth	r3, r3
 8007364:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8007366:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800736a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800736e:	425b      	negs	r3, r3
 8007370:	429a      	cmp	r2, r3
 8007372:	dd0c      	ble.n	800738e <hagl_draw_line+0x11a>
            err -= dy;
 8007374:	8afa      	ldrh	r2, [r7, #22]
 8007376:	8a3b      	ldrh	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 800737e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007382:	b29a      	uxth	r2, r3
 8007384:	8a7b      	ldrh	r3, [r7, #18]
 8007386:	4413      	add	r3, r2
 8007388:	b29b      	uxth	r3, r3
 800738a:	b21b      	sxth	r3, r3
 800738c:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 800738e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007392:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	dacd      	bge.n	8007336 <hagl_draw_line+0xc2>
            err += dx;
 800739a:	8afa      	ldrh	r2, [r7, #22]
 800739c:	8abb      	ldrh	r3, [r7, #20]
 800739e:	4413      	add	r3, r2
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80073a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	89fb      	ldrh	r3, [r7, #14]
 80073ac:	4413      	add	r3, r2
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80073b4:	e7bf      	b.n	8007336 <hagl_draw_line+0xc2>
        return;
 80073b6:	bf00      	nop
 80073b8:	e000      	b.n	80073bc <hagl_draw_line+0x148>
            break;
 80073ba:	bf00      	nop
        }
    }
}
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c2:	bf00      	nop
 80073c4:	2000020c 	.word	0x2000020c

080073c8 <hagl_draw_rectangle>:

/*
 * Draw a rectangle with given color.
 */
void hagl_draw_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4623      	mov	r3, r4
 80073d8:	80fb      	strh	r3, [r7, #6]
 80073da:	4603      	mov	r3, r0
 80073dc:	80bb      	strh	r3, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	807b      	strh	r3, [r7, #2]
 80073e2:	4613      	mov	r3, r2
 80073e4:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80073e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	dd0e      	ble.n	8007410 <hagl_draw_rectangle+0x48>
        x0 = x0 + x1;
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	887b      	ldrh	r3, [r7, #2]
 80073f6:	4413      	add	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 80073fc:	88fa      	ldrh	r2, [r7, #6]
 80073fe:	887b      	ldrh	r3, [r7, #2]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	b29b      	uxth	r3, r3
 8007404:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007406:	88fa      	ldrh	r2, [r7, #6]
 8007408:	887b      	ldrh	r3, [r7, #2]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	b29b      	uxth	r3, r3
 800740e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007410:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007414:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007418:	429a      	cmp	r2, r3
 800741a:	dd0e      	ble.n	800743a <hagl_draw_rectangle+0x72>
        y0 = y0 + y1;
 800741c:	88ba      	ldrh	r2, [r7, #4]
 800741e:	883b      	ldrh	r3, [r7, #0]
 8007420:	4413      	add	r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007426:	88ba      	ldrh	r2, [r7, #4]
 8007428:	883b      	ldrh	r3, [r7, #0]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	b29b      	uxth	r3, r3
 800742e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007430:	88ba      	ldrh	r2, [r7, #4]
 8007432:	883b      	ldrh	r3, [r7, #0]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	b29b      	uxth	r3, r3
 8007438:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800743a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800743e:	4a24      	ldr	r2, [pc, #144]	@ (80074d0 <hagl_draw_rectangle+0x108>)
 8007440:	8812      	ldrh	r2, [r2, #0]
 8007442:	4293      	cmp	r3, r2
 8007444:	db3e      	blt.n	80074c4 <hagl_draw_rectangle+0xfc>
 8007446:	f9b7 3000 	ldrsh.w	r3, [r7]
 800744a:	4a21      	ldr	r2, [pc, #132]	@ (80074d0 <hagl_draw_rectangle+0x108>)
 800744c:	8852      	ldrh	r2, [r2, #2]
 800744e:	4293      	cmp	r3, r2
 8007450:	db38      	blt.n	80074c4 <hagl_draw_rectangle+0xfc>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007456:	4a1e      	ldr	r2, [pc, #120]	@ (80074d0 <hagl_draw_rectangle+0x108>)
 8007458:	8892      	ldrh	r2, [r2, #4]
 800745a:	4293      	cmp	r3, r2
 800745c:	dc34      	bgt.n	80074c8 <hagl_draw_rectangle+0x100>
 800745e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007462:	4a1b      	ldr	r2, [pc, #108]	@ (80074d0 <hagl_draw_rectangle+0x108>)
 8007464:	88d2      	ldrh	r2, [r2, #6]
 8007466:	4293      	cmp	r3, r2
 8007468:	dc2e      	bgt.n	80074c8 <hagl_draw_rectangle+0x100>
        return;
    }

    uint16_t width = x1 - x0 + 1;
 800746a:	887a      	ldrh	r2, [r7, #2]
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	b29b      	uxth	r3, r3
 8007472:	3301      	adds	r3, #1
 8007474:	81fb      	strh	r3, [r7, #14]
    uint16_t height = y1 - y0 + 1;
 8007476:	883a      	ldrh	r2, [r7, #0]
 8007478:	88bb      	ldrh	r3, [r7, #4]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	b29b      	uxth	r3, r3
 800747e:	3301      	adds	r3, #1
 8007480:	81bb      	strh	r3, [r7, #12]

    hagl_draw_hline(x0, y0, width, color);
 8007482:	8c3b      	ldrh	r3, [r7, #32]
 8007484:	89fa      	ldrh	r2, [r7, #14]
 8007486:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800748a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800748e:	f7ff feab 	bl	80071e8 <hagl_draw_hline>
    hagl_draw_hline(x0, y1, width, color);
 8007492:	8c3b      	ldrh	r3, [r7, #32]
 8007494:	89fa      	ldrh	r2, [r7, #14]
 8007496:	f9b7 1000 	ldrsh.w	r1, [r7]
 800749a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800749e:	f7ff fea3 	bl	80071e8 <hagl_draw_hline>
    hagl_draw_vline(x0, y0, height, color);
 80074a2:	8c3b      	ldrh	r3, [r7, #32]
 80074a4:	89ba      	ldrh	r2, [r7, #12]
 80074a6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80074ae:	f7ff febe 	bl	800722e <hagl_draw_vline>
    hagl_draw_vline(x1, y0, height, color);
 80074b2:	8c3b      	ldrh	r3, [r7, #32]
 80074b4:	89ba      	ldrh	r2, [r7, #12]
 80074b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074ba:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80074be:	f7ff feb6 	bl	800722e <hagl_draw_vline>
 80074c2:	e002      	b.n	80074ca <hagl_draw_rectangle+0x102>
        return;
 80074c4:	bf00      	nop
 80074c6:	e000      	b.n	80074ca <hagl_draw_rectangle+0x102>
        return;
 80074c8:	bf00      	nop
}
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd90      	pop	{r4, r7, pc}
 80074d0:	2000020c 	.word	0x2000020c

080074d4 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	4623      	mov	r3, r4
 80074e4:	80fb      	strh	r3, [r7, #6]
 80074e6:	4603      	mov	r3, r0
 80074e8:	80bb      	strh	r3, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	807b      	strh	r3, [r7, #2]
 80074ee:	4613      	mov	r3, r2
 80074f0:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80074f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80074f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	dd0e      	ble.n	800751c <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 80074fe:	88fa      	ldrh	r2, [r7, #6]
 8007500:	887b      	ldrh	r3, [r7, #2]
 8007502:	4413      	add	r3, r2
 8007504:	b29b      	uxth	r3, r3
 8007506:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007508:	88fa      	ldrh	r2, [r7, #6]
 800750a:	887b      	ldrh	r3, [r7, #2]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	b29b      	uxth	r3, r3
 8007510:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	887b      	ldrh	r3, [r7, #2]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	b29b      	uxth	r3, r3
 800751a:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 800751c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007520:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007524:	429a      	cmp	r2, r3
 8007526:	dd0e      	ble.n	8007546 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007528:	88ba      	ldrh	r2, [r7, #4]
 800752a:	883b      	ldrh	r3, [r7, #0]
 800752c:	4413      	add	r3, r2
 800752e:	b29b      	uxth	r3, r3
 8007530:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007532:	88ba      	ldrh	r2, [r7, #4]
 8007534:	883b      	ldrh	r3, [r7, #0]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	b29b      	uxth	r3, r3
 800753a:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 800753c:	88ba      	ldrh	r2, [r7, #4]
 800753e:	883b      	ldrh	r3, [r7, #0]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	b29b      	uxth	r3, r3
 8007544:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007546:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800754a:	4a33      	ldr	r2, [pc, #204]	@ (8007618 <hagl_fill_rectangle+0x144>)
 800754c:	8812      	ldrh	r2, [r2, #0]
 800754e:	4293      	cmp	r3, r2
 8007550:	db5b      	blt.n	800760a <hagl_fill_rectangle+0x136>
 8007552:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007556:	4a30      	ldr	r2, [pc, #192]	@ (8007618 <hagl_fill_rectangle+0x144>)
 8007558:	8852      	ldrh	r2, [r2, #2]
 800755a:	4293      	cmp	r3, r2
 800755c:	db55      	blt.n	800760a <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800755e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007562:	4a2d      	ldr	r2, [pc, #180]	@ (8007618 <hagl_fill_rectangle+0x144>)
 8007564:	8892      	ldrh	r2, [r2, #4]
 8007566:	4293      	cmp	r3, r2
 8007568:	dc51      	bgt.n	800760e <hagl_fill_rectangle+0x13a>
 800756a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800756e:	4a2a      	ldr	r2, [pc, #168]	@ (8007618 <hagl_fill_rectangle+0x144>)
 8007570:	88d2      	ldrh	r2, [r2, #6]
 8007572:	4293      	cmp	r3, r2
 8007574:	dc4b      	bgt.n	800760e <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8007576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800757a:	4a27      	ldr	r2, [pc, #156]	@ (8007618 <hagl_fill_rectangle+0x144>)
 800757c:	8812      	ldrh	r2, [r2, #0]
 800757e:	4611      	mov	r1, r2
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff fded 	bl	8007160 <max>
 8007586:	4603      	mov	r3, r0
 8007588:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 800758a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800758e:	4a22      	ldr	r2, [pc, #136]	@ (8007618 <hagl_fill_rectangle+0x144>)
 8007590:	8852      	ldrh	r2, [r2, #2]
 8007592:	4611      	mov	r1, r2
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fde3 	bl	8007160 <max>
 800759a:	4603      	mov	r3, r0
 800759c:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800759e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075a2:	4a1d      	ldr	r2, [pc, #116]	@ (8007618 <hagl_fill_rectangle+0x144>)
 80075a4:	8892      	ldrh	r2, [r2, #4]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fdc7 	bl	800713c <min>
 80075ae:	4603      	mov	r3, r0
 80075b0:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80075b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80075b6:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <hagl_fill_rectangle+0x144>)
 80075b8:	88d2      	ldrh	r2, [r2, #6]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff fdbd 	bl	800713c <min>
 80075c2:	4603      	mov	r3, r0
 80075c4:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80075c6:	887a      	ldrh	r2, [r7, #2]
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3301      	adds	r3, #1
 80075d0:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80075d2:	883a      	ldrh	r2, [r7, #0]
 80075d4:	88bb      	ldrh	r3, [r7, #4]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3301      	adds	r3, #1
 80075dc:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80075de:	2300      	movs	r3, #0
 80075e0:	81fb      	strh	r3, [r7, #14]
 80075e2:	e00d      	b.n	8007600 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80075e4:	88ba      	ldrh	r2, [r7, #4]
 80075e6:	89fb      	ldrh	r3, [r7, #14]
 80075e8:	4413      	add	r3, r2
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	b219      	sxth	r1, r3
 80075ee:	8c3b      	ldrh	r3, [r7, #32]
 80075f0:	89ba      	ldrh	r2, [r7, #12]
 80075f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80075f6:	f7ff fdf7 	bl	80071e8 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 80075fa:	89fb      	ldrh	r3, [r7, #14]
 80075fc:	3301      	adds	r3, #1
 80075fe:	81fb      	strh	r3, [r7, #14]
 8007600:	89fa      	ldrh	r2, [r7, #14]
 8007602:	897b      	ldrh	r3, [r7, #10]
 8007604:	429a      	cmp	r2, r3
 8007606:	d3ed      	bcc.n	80075e4 <hagl_fill_rectangle+0x110>
 8007608:	e002      	b.n	8007610 <hagl_fill_rectangle+0x13c>
        return;
 800760a:	bf00      	nop
 800760c:	e000      	b.n	8007610 <hagl_fill_rectangle+0x13c>
        return;
 800760e:	bf00      	nop
#endif
    }
}
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	bd90      	pop	{r4, r7, pc}
 8007616:	bf00      	nop
 8007618:	2000020c 	.word	0x2000020c

0800761c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800762a:	f844 0c24 	str.w	r0, [r4, #-36]
 800762e:	460c      	mov	r4, r1
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007638:	4622      	mov	r2, r4
 800763a:	f823 2c26 	strh.w	r2, [r3, #-38]
 800763e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007642:	4602      	mov	r2, r0
 8007644:	f823 2c28 	strh.w	r2, [r3, #-40]
 8007648:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800764c:	460a      	mov	r2, r1
 800764e:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8007652:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007656:	4619      	mov	r1, r3
 8007658:	f107 0310 	add.w	r3, r7, #16
 800765c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fcd6 	bl	8007018 <fontx_glyph>
 800766c:	4603      	mov	r3, r0
 800766e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007672:	f102 0209 	add.w	r2, r2, #9
 8007676:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8007678:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800767c:	f103 0309 	add.w	r3, r3, #9
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <hagl_put_char+0x6e>
        return 0;
 8007686:	2300      	movs	r3, #0
 8007688:	e0c0      	b.n	800780c <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 800768a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800768e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007692:	461a      	mov	r2, r3
 8007694:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007698:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 800769c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076a0:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076aa:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80076ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076b2:	2210      	movs	r2, #16
 80076b4:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80076b8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80076bc:	3a08      	subs	r2, #8
 80076be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076c2:	3b18      	subs	r3, #24
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fb0e 	bl	8006ce8 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80076cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076d0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80076d4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076d8:	f102 020c 	add.w	r2, r2, #12
 80076dc:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80076de:	2300      	movs	r3, #0
 80076e0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076e4:	f102 020b 	add.w	r2, r2, #11
 80076e8:	7013      	strb	r3, [r2, #0]
 80076ea:	e071      	b.n	80077d0 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80076ec:	2300      	movs	r3, #0
 80076ee:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80076f2:	f102 020a 	add.w	r2, r2, #10
 80076f6:	7013      	strb	r3, [r2, #0]
 80076f8:	e047      	b.n	800778a <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 80076fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80076fe:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b25a      	sxtb	r2, r3
 8007706:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800770a:	f103 030a 	add.w	r3, r3, #10
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	2180      	movs	r1, #128	@ 0x80
 8007716:	fa41 f303 	asr.w	r3, r1, r3
 800771a:	b25b      	sxtb	r3, r3
 800771c:	4013      	ands	r3, r2
 800771e:	b25b      	sxtb	r3, r3
 8007720:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007724:	f102 0208 	add.w	r2, r2, #8
 8007728:	7013      	strb	r3, [r2, #0]
            if (set) {
 800772a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800772e:	f103 0308 	add.w	r3, r3, #8
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d010      	beq.n	800775a <hagl_put_char+0x13e>
                *(ptr++) = color;
 8007738:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800773c:	f103 030c 	add.w	r3, r3, #12
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8007748:	f101 010c 	add.w	r1, r1, #12
 800774c:	600a      	str	r2, [r1, #0]
 800774e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007752:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	e00c      	b.n	8007774 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 800775a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800775e:	f103 030c 	add.w	r3, r3, #12
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	1c9a      	adds	r2, r3, #2
 8007766:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800776a:	f101 010c 	add.w	r1, r1, #12
 800776e:	600a      	str	r2, [r1, #0]
 8007770:	2200      	movs	r2, #0
 8007772:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8007774:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8007778:	f103 030a 	add.w	r3, r3, #10
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	3301      	adds	r3, #1
 8007780:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007784:	f102 020a 	add.w	r2, r2, #10
 8007788:	7013      	strb	r3, [r2, #0]
 800778a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800778e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007792:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8007796:	f102 020a 	add.w	r2, r2, #10
 800779a:	7812      	ldrb	r2, [r2, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d3ac      	bcc.n	80076fa <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80077a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80077a4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80077a8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077ac:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80077b0:	4413      	add	r3, r2
 80077b2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077b6:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80077ba:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80077be:	f103 030b 	add.w	r3, r3, #11
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80077ca:	f102 020b 	add.w	r2, r2, #11
 80077ce:	7013      	strb	r3, [r2, #0]
 80077d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80077d4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80077d8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80077dc:	f102 020b 	add.w	r2, r2, #11
 80077e0:	7812      	ldrb	r2, [r2, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d382      	bcc.n	80076ec <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 80077e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80077ea:	3b18      	subs	r3, #24
 80077ec:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077f0:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 80077f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80077f8:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 80077fc:	461a      	mov	r2, r3
 80077fe:	f000 f85a 	bl	80078b6 <hagl_blit>

    return bitmap.width;
 8007802:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007806:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800780a:	b2db      	uxtb	r3, r3
}
 800780c:	4618      	mov	r0, r3
 800780e:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bd90      	pop	{r4, r7, pc}

08007818 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	@ 0x30
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	461a      	mov	r2, r3
 8007826:	4603      	mov	r3, r0
 8007828:	817b      	strh	r3, [r7, #10]
 800782a:	460b      	mov	r3, r1
 800782c:	813b      	strh	r3, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8007832:	897b      	ldrh	r3, [r7, #10]
 8007834:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007836:	f107 0314 	add.w	r3, r7, #20
 800783a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fbcb 	bl	8006fd8 <fontx_meta>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 8007848:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <hagl_put_text+0x3c>
        return 0;
 8007850:	2300      	movs	r3, #0
 8007852:	e02c      	b.n	80078ae <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	1d1a      	adds	r2, r3, #4
 8007858:	60fa      	str	r2, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	2b0d      	cmp	r3, #13
 8007862:	d002      	beq.n	800786a <hagl_put_text+0x52>
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2b0a      	cmp	r3, #10
 8007868:	d108      	bne.n	800787c <hagl_put_text+0x64>
            x0 = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800786e:	7fbb      	ldrb	r3, [r7, #30]
 8007870:	461a      	mov	r2, r3
 8007872:	893b      	ldrh	r3, [r7, #8]
 8007874:	4413      	add	r3, r2
 8007876:	b29b      	uxth	r3, r3
 8007878:	813b      	strh	r3, [r7, #8]
 800787a:	e010      	b.n	800789e <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800787c:	88f8      	ldrh	r0, [r7, #6]
 800787e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007882:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	4603      	mov	r3, r0
 800788c:	6a38      	ldr	r0, [r7, #32]
 800788e:	f7ff fec5 	bl	800761c <hagl_put_char>
 8007892:	4603      	mov	r3, r0
 8007894:	461a      	mov	r2, r3
 8007896:	897b      	ldrh	r3, [r7, #10]
 8007898:	4413      	add	r3, r2
 800789a:	b29b      	uxth	r3, r3
 800789c:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1d6      	bne.n	8007854 <hagl_put_text+0x3c>

    return x0 - original;
 80078a6:	897a      	ldrh	r2, [r7, #10]
 80078a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	b29b      	uxth	r3, r3
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3728      	adds	r7, #40	@ 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	4603      	mov	r3, r0
 80078be:	603a      	str	r2, [r7, #0]
 80078c0:	80fb      	strh	r3, [r7, #6]
 80078c2:	460b      	mov	r3, r1
 80078c4:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80078cc:	2300      	movs	r3, #0
 80078ce:	827b      	strh	r3, [r7, #18]
 80078d0:	e020      	b.n	8007914 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80078d2:	2300      	movs	r3, #0
 80078d4:	823b      	strh	r3, [r7, #16]
 80078d6:	e015      	b.n	8007904 <hagl_blit+0x4e>
            color = *(ptr++);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	1c9a      	adds	r2, r3, #2
 80078dc:	617a      	str	r2, [r7, #20]
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	8a3b      	ldrh	r3, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	b218      	sxth	r0, r3
 80078ec:	88ba      	ldrh	r2, [r7, #4]
 80078ee:	8a7b      	ldrh	r3, [r7, #18]
 80078f0:	4413      	add	r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	b21b      	sxth	r3, r3
 80078f6:	89fa      	ldrh	r2, [r7, #14]
 80078f8:	4619      	mov	r1, r3
 80078fa:	f7ff fc43 	bl	8007184 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 80078fe:	8a3b      	ldrh	r3, [r7, #16]
 8007900:	3301      	adds	r3, #1
 8007902:	823b      	strh	r3, [r7, #16]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	881b      	ldrh	r3, [r3, #0]
 8007908:	8a3a      	ldrh	r2, [r7, #16]
 800790a:	429a      	cmp	r2, r3
 800790c:	d3e4      	bcc.n	80078d8 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800790e:	8a7b      	ldrh	r3, [r7, #18]
 8007910:	3301      	adds	r3, #1
 8007912:	827b      	strh	r3, [r7, #18]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	885b      	ldrh	r3, [r3, #2]
 8007918:	8a7a      	ldrh	r2, [r7, #18]
 800791a:	429a      	cmp	r2, r3
 800791c:	d3d9      	bcc.n	80078d2 <hagl_blit+0x1c>
        }
    }
#endif
};
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <hagl_draw_circle>:
#endif
}



void hagl_draw_circle(int16_t xc, int16_t yc, int16_t r, color_t color) {
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	461a      	mov	r2, r3
 8007936:	4623      	mov	r3, r4
 8007938:	80fb      	strh	r3, [r7, #6]
 800793a:	4603      	mov	r3, r0
 800793c:	80bb      	strh	r3, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	807b      	strh	r3, [r7, #2]
 8007942:	4613      	mov	r3, r2
 8007944:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 800794a:	887b      	ldrh	r3, [r7, #2]
 800794c:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 800794e:	887b      	ldrh	r3, [r7, #2]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	b29b      	uxth	r3, r3
 8007954:	f1c3 0303 	rsb	r3, r3, #3
 8007958:	b29b      	uxth	r3, r3
 800795a:	817b      	strh	r3, [r7, #10]

    hagl_put_pixel(xc + x, yc + y, color);
 800795c:	88fa      	ldrh	r2, [r7, #6]
 800795e:	89fb      	ldrh	r3, [r7, #14]
 8007960:	4413      	add	r3, r2
 8007962:	b29b      	uxth	r3, r3
 8007964:	b218      	sxth	r0, r3
 8007966:	88ba      	ldrh	r2, [r7, #4]
 8007968:	89bb      	ldrh	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	b29b      	uxth	r3, r3
 800796e:	b21b      	sxth	r3, r3
 8007970:	883a      	ldrh	r2, [r7, #0]
 8007972:	4619      	mov	r1, r3
 8007974:	f7ff fc06 	bl	8007184 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc + y, color);
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	89fb      	ldrh	r3, [r7, #14]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	b29b      	uxth	r3, r3
 8007980:	b218      	sxth	r0, r3
 8007982:	88ba      	ldrh	r2, [r7, #4]
 8007984:	89bb      	ldrh	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	b21b      	sxth	r3, r3
 800798c:	883a      	ldrh	r2, [r7, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	f7ff fbf8 	bl	8007184 <hagl_put_pixel>
    hagl_put_pixel(xc + x, yc - y, color);
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	89fb      	ldrh	r3, [r7, #14]
 8007998:	4413      	add	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	b218      	sxth	r0, r3
 800799e:	88ba      	ldrh	r2, [r7, #4]
 80079a0:	89bb      	ldrh	r3, [r7, #12]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	b21b      	sxth	r3, r3
 80079a8:	883a      	ldrh	r2, [r7, #0]
 80079aa:	4619      	mov	r1, r3
 80079ac:	f7ff fbea 	bl	8007184 <hagl_put_pixel>
    hagl_put_pixel(xc - x, yc - y, color);
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	89fb      	ldrh	r3, [r7, #14]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	b218      	sxth	r0, r3
 80079ba:	88ba      	ldrh	r2, [r7, #4]
 80079bc:	89bb      	ldrh	r3, [r7, #12]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	b21b      	sxth	r3, r3
 80079c4:	883a      	ldrh	r2, [r7, #0]
 80079c6:	4619      	mov	r1, r3
 80079c8:	f7ff fbdc 	bl	8007184 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc + x, color);
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	89bb      	ldrh	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	b218      	sxth	r0, r3
 80079d6:	88ba      	ldrh	r2, [r7, #4]
 80079d8:	89fb      	ldrh	r3, [r7, #14]
 80079da:	4413      	add	r3, r2
 80079dc:	b29b      	uxth	r3, r3
 80079de:	b21b      	sxth	r3, r3
 80079e0:	883a      	ldrh	r2, [r7, #0]
 80079e2:	4619      	mov	r1, r3
 80079e4:	f7ff fbce 	bl	8007184 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc + x, color);
 80079e8:	88fa      	ldrh	r2, [r7, #6]
 80079ea:	89bb      	ldrh	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	b218      	sxth	r0, r3
 80079f2:	88ba      	ldrh	r2, [r7, #4]
 80079f4:	89fb      	ldrh	r3, [r7, #14]
 80079f6:	4413      	add	r3, r2
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	b21b      	sxth	r3, r3
 80079fc:	883a      	ldrh	r2, [r7, #0]
 80079fe:	4619      	mov	r1, r3
 8007a00:	f7ff fbc0 	bl	8007184 <hagl_put_pixel>
    hagl_put_pixel(xc + y, yc - x, color);
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	89bb      	ldrh	r3, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	b218      	sxth	r0, r3
 8007a0e:	88ba      	ldrh	r2, [r7, #4]
 8007a10:	89fb      	ldrh	r3, [r7, #14]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	b21b      	sxth	r3, r3
 8007a18:	883a      	ldrh	r2, [r7, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f7ff fbb2 	bl	8007184 <hagl_put_pixel>
    hagl_put_pixel(xc - y, yc - x, color);
 8007a20:	88fa      	ldrh	r2, [r7, #6]
 8007a22:	89bb      	ldrh	r3, [r7, #12]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	b218      	sxth	r0, r3
 8007a2a:	88ba      	ldrh	r2, [r7, #4]
 8007a2c:	89fb      	ldrh	r3, [r7, #14]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	b21b      	sxth	r3, r3
 8007a34:	883a      	ldrh	r2, [r7, #0]
 8007a36:	4619      	mov	r1, r3
 8007a38:	f7ff fba4 	bl	8007184 <hagl_put_pixel>

    while (y >= x) {
 8007a3c:	e097      	b.n	8007b6e <hagl_draw_circle+0x246>
        x++;
 8007a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3301      	adds	r3, #1
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007a4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd14      	ble.n	8007a7c <hagl_draw_circle+0x154>
            y--;
 8007a52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007a5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007a62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	897b      	ldrh	r3, [r7, #10]
 8007a70:	4413      	add	r3, r2
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	330a      	adds	r3, #10
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	817b      	strh	r3, [r7, #10]
 8007a7a:	e008      	b.n	8007a8e <hagl_draw_circle+0x166>
        } else {
            d = d + 4 * x + 6;
 8007a7c:	89fb      	ldrh	r3, [r7, #14]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	897b      	ldrh	r3, [r7, #10]
 8007a84:	4413      	add	r3, r2
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3306      	adds	r3, #6
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	817b      	strh	r3, [r7, #10]
        }

        hagl_put_pixel(xc + x, yc + y, color);
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	89fb      	ldrh	r3, [r7, #14]
 8007a92:	4413      	add	r3, r2
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	b218      	sxth	r0, r3
 8007a98:	88ba      	ldrh	r2, [r7, #4]
 8007a9a:	89bb      	ldrh	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b21b      	sxth	r3, r3
 8007aa2:	883a      	ldrh	r2, [r7, #0]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7ff fb6d 	bl	8007184 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc + y, color);
 8007aaa:	88fa      	ldrh	r2, [r7, #6]
 8007aac:	89fb      	ldrh	r3, [r7, #14]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b218      	sxth	r0, r3
 8007ab4:	88ba      	ldrh	r2, [r7, #4]
 8007ab6:	89bb      	ldrh	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	b21b      	sxth	r3, r3
 8007abe:	883a      	ldrh	r2, [r7, #0]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f7ff fb5f 	bl	8007184 <hagl_put_pixel>
        hagl_put_pixel(xc + x, yc - y, color);
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	4413      	add	r3, r2
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	b218      	sxth	r0, r3
 8007ad0:	88ba      	ldrh	r2, [r7, #4]
 8007ad2:	89bb      	ldrh	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	b21b      	sxth	r3, r3
 8007ada:	883a      	ldrh	r2, [r7, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	f7ff fb51 	bl	8007184 <hagl_put_pixel>
        hagl_put_pixel(xc - x, yc - y, color);
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	89fb      	ldrh	r3, [r7, #14]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	b218      	sxth	r0, r3
 8007aec:	88ba      	ldrh	r2, [r7, #4]
 8007aee:	89bb      	ldrh	r3, [r7, #12]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	b21b      	sxth	r3, r3
 8007af6:	883a      	ldrh	r2, [r7, #0]
 8007af8:	4619      	mov	r1, r3
 8007afa:	f7ff fb43 	bl	8007184 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc + x, color);
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	89bb      	ldrh	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	b218      	sxth	r0, r3
 8007b08:	88ba      	ldrh	r2, [r7, #4]
 8007b0a:	89fb      	ldrh	r3, [r7, #14]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b21b      	sxth	r3, r3
 8007b12:	883a      	ldrh	r2, [r7, #0]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f7ff fb35 	bl	8007184 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc + x, color);
 8007b1a:	88fa      	ldrh	r2, [r7, #6]
 8007b1c:	89bb      	ldrh	r3, [r7, #12]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	b218      	sxth	r0, r3
 8007b24:	88ba      	ldrh	r2, [r7, #4]
 8007b26:	89fb      	ldrh	r3, [r7, #14]
 8007b28:	4413      	add	r3, r2
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	883a      	ldrh	r2, [r7, #0]
 8007b30:	4619      	mov	r1, r3
 8007b32:	f7ff fb27 	bl	8007184 <hagl_put_pixel>
        hagl_put_pixel(xc + y, yc - x, color);
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	89bb      	ldrh	r3, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	b218      	sxth	r0, r3
 8007b40:	88ba      	ldrh	r2, [r7, #4]
 8007b42:	89fb      	ldrh	r3, [r7, #14]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	b21b      	sxth	r3, r3
 8007b4a:	883a      	ldrh	r2, [r7, #0]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f7ff fb19 	bl	8007184 <hagl_put_pixel>
        hagl_put_pixel(xc - y, yc - x, color);
 8007b52:	88fa      	ldrh	r2, [r7, #6]
 8007b54:	89bb      	ldrh	r3, [r7, #12]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	b218      	sxth	r0, r3
 8007b5c:	88ba      	ldrh	r2, [r7, #4]
 8007b5e:	89fb      	ldrh	r3, [r7, #14]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	b21b      	sxth	r3, r3
 8007b66:	883a      	ldrh	r2, [r7, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	f7ff fb0b 	bl	8007184 <hagl_put_pixel>
    while (y >= x) {
 8007b6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	f6bf af61 	bge.w	8007a3e <hagl_draw_circle+0x116>
    }
}
 8007b7c:	bf00      	nop
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd90      	pop	{r4, r7, pc}

08007b86 <hagl_fill_circle>:

void hagl_fill_circle(int16_t x0, int16_t y0, int16_t r, color_t color) {
 8007b86:	b590      	push	{r4, r7, lr}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	4608      	mov	r0, r1
 8007b90:	4611      	mov	r1, r2
 8007b92:	461a      	mov	r2, r3
 8007b94:	4623      	mov	r3, r4
 8007b96:	80fb      	strh	r3, [r7, #6]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	80bb      	strh	r3, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	807b      	strh	r3, [r7, #2]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	803b      	strh	r3, [r7, #0]
    int16_t x = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	81fb      	strh	r3, [r7, #14]
    int16_t y = r;
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	81bb      	strh	r3, [r7, #12]
    int16_t d = 3 - 2 * r;
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f1c3 0303 	rsb	r3, r3, #3
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	817b      	strh	r3, [r7, #10]

    while (y >= x) {
 8007bba:	e067      	b.n	8007c8c <hagl_fill_circle+0x106>
        hagl_draw_hline(x0 - x, y0 + y, x * 2, color);
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	89fb      	ldrh	r3, [r7, #14]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	b218      	sxth	r0, r3
 8007bc6:	88ba      	ldrh	r2, [r7, #4]
 8007bc8:	89bb      	ldrh	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	b219      	sxth	r1, r3
 8007bd0:	89fb      	ldrh	r3, [r7, #14]
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	883b      	ldrh	r3, [r7, #0]
 8007bd8:	f7ff fb06 	bl	80071e8 <hagl_draw_hline>
        hagl_draw_hline(x0 - x, y0 - y, x * 2, color);
 8007bdc:	88fa      	ldrh	r2, [r7, #6]
 8007bde:	89fb      	ldrh	r3, [r7, #14]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	b218      	sxth	r0, r3
 8007be6:	88ba      	ldrh	r2, [r7, #4]
 8007be8:	89bb      	ldrh	r3, [r7, #12]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	b219      	sxth	r1, r3
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	883b      	ldrh	r3, [r7, #0]
 8007bf8:	f7ff faf6 	bl	80071e8 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 + x, y * 2, color);
 8007bfc:	88fa      	ldrh	r2, [r7, #6]
 8007bfe:	89bb      	ldrh	r3, [r7, #12]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	b218      	sxth	r0, r3
 8007c06:	88ba      	ldrh	r2, [r7, #4]
 8007c08:	89fb      	ldrh	r3, [r7, #14]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	b219      	sxth	r1, r3
 8007c10:	89bb      	ldrh	r3, [r7, #12]
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	883b      	ldrh	r3, [r7, #0]
 8007c18:	f7ff fae6 	bl	80071e8 <hagl_draw_hline>
        hagl_draw_hline(x0 - y, y0 - x, y * 2, color);
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	89bb      	ldrh	r3, [r7, #12]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	b218      	sxth	r0, r3
 8007c26:	88ba      	ldrh	r2, [r7, #4]
 8007c28:	89fb      	ldrh	r3, [r7, #14]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	b219      	sxth	r1, r3
 8007c30:	89bb      	ldrh	r3, [r7, #12]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	883b      	ldrh	r3, [r7, #0]
 8007c38:	f7ff fad6 	bl	80071e8 <hagl_draw_hline>
        x++;
 8007c3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3301      	adds	r3, #1
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	81fb      	strh	r3, [r7, #14]

        if (d > 0) {
 8007c48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dd14      	ble.n	8007c7a <hagl_fill_circle+0xf4>
            y--;
 8007c50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	81bb      	strh	r3, [r7, #12]
            d = d + 4 * (x - y) + 10;
 8007c5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	897b      	ldrh	r3, [r7, #10]
 8007c6e:	4413      	add	r3, r2
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	330a      	adds	r3, #10
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	817b      	strh	r3, [r7, #10]
 8007c78:	e008      	b.n	8007c8c <hagl_fill_circle+0x106>
        } else {
            d = d + 4 * x + 6;
 8007c7a:	89fb      	ldrh	r3, [r7, #14]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	897b      	ldrh	r3, [r7, #10]
 8007c82:	4413      	add	r3, r2
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3306      	adds	r3, #6
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	817b      	strh	r3, [r7, #10]
    while (y >= x) {
 8007c8c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	da91      	bge.n	8007bbc <hagl_fill_circle+0x36>
        }
    }
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd90      	pop	{r4, r7, pc}

08007ca2 <hagl_draw_polygon>:



void hagl_draw_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007ca2:	b590      	push	{r4, r7, lr}
 8007ca4:	b087      	sub	sp, #28
 8007ca6:	af02      	add	r7, sp, #8
 8007ca8:	4603      	mov	r3, r0
 8007caa:	6039      	str	r1, [r7, #0]
 8007cac:	80fb      	strh	r3, [r7, #6]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	80bb      	strh	r3, [r7, #4]

    for(int16_t i = 0; i < amount - 1; i++) {
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	81fb      	strh	r3, [r7, #14]
 8007cb6:	e02a      	b.n	8007d0e <hagl_draw_polygon+0x6c>
        hagl_draw_line(
            vertices[(i << 1 ) + 0],
 8007cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	4413      	add	r3, r2
        hagl_draw_line(
 8007cc2:	f9b3 0000 	ldrsh.w	r0, [r3]
            vertices[(i << 1 ) + 1],
 8007cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	3302      	adds	r3, #2
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	4413      	add	r3, r2
        hagl_draw_line(
 8007cd2:	f9b3 1000 	ldrsh.w	r1, [r3]
            vertices[(i << 1 ) + 2],
 8007cd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4413      	add	r3, r2
        hagl_draw_line(
 8007ce2:	f9b3 4000 	ldrsh.w	r4, [r3]
            vertices[(i << 1 ) + 3],
 8007ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	3306      	adds	r3, #6
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	4413      	add	r3, r2
        hagl_draw_line(
 8007cf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007cf6:	88bb      	ldrh	r3, [r7, #4]
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	f7ff fab9 	bl	8007274 <hagl_draw_line>
    for(int16_t i = 0; i < amount - 1; i++) {
 8007d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3301      	adds	r3, #1
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	81fb      	strh	r3, [r7, #14]
 8007d0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	dbcd      	blt.n	8007cb8 <hagl_draw_polygon+0x16>
            color
        );
    }
    hagl_draw_line(
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f9b3 0000 	ldrsh.w	r0, [r3]
        vertices[0],
        vertices[1],
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	3302      	adds	r3, #2
    hagl_draw_line(
 8007d26:	f9b3 1000 	ldrsh.w	r1, [r3]
        vertices[(amount <<1 ) - 2],
 8007d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007d32:	3b01      	subs	r3, #1
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4413      	add	r3, r2
    hagl_draw_line(
 8007d3a:	f9b3 4000 	ldrsh.w	r4, [r3]
        vertices[(amount <<1 ) - 1],
 8007d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	3b02      	subs	r3, #2
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4413      	add	r3, r2
    hagl_draw_line(
 8007d4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007d4e:	88bb      	ldrh	r3, [r7, #4]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4613      	mov	r3, r2
 8007d54:	4622      	mov	r2, r4
 8007d56:	f7ff fa8d 	bl	8007274 <hagl_draw_line>
        color
    );
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd90      	pop	{r4, r7, pc}

08007d62 <hagl_fill_polygon>:

/* Adapted from  http://alienryderflex.com/polygon_fill/ */
void hagl_fill_polygon(int16_t amount, int16_t *vertices, color_t color) {
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b0ac      	sub	sp, #176	@ 0xb0
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	4603      	mov	r3, r0
 8007d6a:	6039      	str	r1, [r7, #0]
 8007d6c:	80fb      	strh	r3, [r7, #6]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80bb      	strh	r3, [r7, #4]
    float x0;
    float y0;
    float x1;
    float y1;

    int16_t miny = DISPLAY_HEIGHT;
 8007d72:	2380      	movs	r3, #128	@ 0x80
 8007d74:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    int16_t maxy = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa

    for (uint8_t i = 0; i < amount; i++) {
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007d84:	e02e      	b.n	8007de4 <hagl_fill_polygon+0x82>
        if (miny > vertices[(i << 1) + 1]) {
 8007d86:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	4413      	add	r3, r2
 8007d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d96:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	dd08      	ble.n	8007db0 <hagl_fill_polygon+0x4e>
            miny = vertices[(i << 1) + 1];
 8007d9e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	3302      	adds	r3, #2
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4413      	add	r3, r2
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        }
        if (maxy < vertices[(i << 1) + 1]) {
 8007db0:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	3302      	adds	r3, #2
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dc0:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	@ 0xaa
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	da08      	bge.n	8007dda <hagl_fill_polygon+0x78>
            maxy = vertices[(i << 1) + 1];
 8007dc8:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	3302      	adds	r3, #2
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    for (uint8_t i = 0; i < amount; i++) {
 8007dda:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8007dde:	3301      	adds	r3, #1
 8007de0:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 8007de4:	f897 20a9 	ldrb.w	r2, [r7, #169]	@ 0xa9
 8007de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	dbca      	blt.n	8007d86 <hagl_fill_polygon+0x24>
        }
    }

    /*  Loop through the rows of the image. */
    for (y = miny; y < maxy; y++) {
 8007df0:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8007df4:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8007df8:	e144      	b.n	8008084 <hagl_fill_polygon+0x322>

        /*  Build a list of nodes. */
        int16_t count = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
        int16_t j = amount - 1;
 8007e00:	88fb      	ldrh	r3, [r7, #6]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

        for (int16_t i = 0; i < amount; i++) {
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007e10:	e0a6      	b.n	8007f60 <hagl_fill_polygon+0x1fe>
            x0 = vertices[(i << 1) + 0];
 8007e12:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e20:	ee07 3a90 	vmov	s15, r3
 8007e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e28:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            y0 = vertices[(i << 1) + 1];
 8007e2c:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	3302      	adds	r3, #2
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	4413      	add	r3, r2
 8007e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e3c:	ee07 3a90 	vmov	s15, r3
 8007e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e44:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            x1 = vertices[(j << 1) + 0];
 8007e48:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	4413      	add	r3, r2
 8007e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e5e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            y1 = vertices[(j << 1) + 1];
 8007e62:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	3302      	adds	r3, #2
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e7a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

            if (
                (y0 < (float)y && y1 >= (float)y) ||
 8007e7e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (
 8007e8a:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e96:	d50c      	bpl.n	8007eb2 <hagl_fill_polygon+0x150>
                (y0 < (float)y && y1 >= (float)y) ||
 8007e98:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ea4:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb0:	da19      	bge.n	8007ee6 <hagl_fill_polygon+0x184>
                (y1 < (float)y && y0 >= (float)y)
 8007eb2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                (y0 < (float)y && y1 >= (float)y) ||
 8007ebe:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007ec2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eca:	d53e      	bpl.n	8007f4a <hagl_fill_polygon+0x1e8>
                (y1 < (float)y && y0 >= (float)y)
 8007ecc:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ed8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8007edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee4:	db31      	blt.n	8007f4a <hagl_fill_polygon+0x1e8>
            ) {
                nodes[count] = (int16_t)(x0 + (y - y0) / (y1 - y0) * (x1 - x0));
 8007ee6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ef2:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007ef6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007efa:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007efe:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0a:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8007f0e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007f12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f1a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8007f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f26:	ee17 3a90 	vmov	r3, s15
 8007f2a:	b21a      	sxth	r2, r3
 8007f2c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007f30:	b292      	uxth	r2, r2
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	33b0      	adds	r3, #176	@ 0xb0
 8007f36:	443b      	add	r3, r7
 8007f38:	f823 2ca8 	strh.w	r2, [r3, #-168]
                count++;
 8007f3c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3301      	adds	r3, #1
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
            }
            j = i;
 8007f4a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007f4e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
        for (int16_t i = 0; i < amount; i++) {
 8007f52:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3301      	adds	r3, #1
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
 8007f60:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8007f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	f6ff af52 	blt.w	8007e12 <hagl_fill_polygon+0xb0>
        }

        /* Sort the nodes, via a simple “Bubble” sort. */
        int16_t i = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8007f74:	e046      	b.n	8008004 <hagl_fill_polygon+0x2a2>
            if (nodes[i] > nodes[i + 1]) {
 8007f76:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	33b0      	adds	r3, #176	@ 0xb0
 8007f7e:	443b      	add	r3, r7
 8007f80:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 8007f84:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007f88:	3301      	adds	r3, #1
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	33b0      	adds	r3, #176	@ 0xb0
 8007f8e:	443b      	add	r3, r7
 8007f90:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d92e      	bls.n	8007ff6 <hagl_fill_polygon+0x294>
                int16_t swap = nodes[i];
 8007f98:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	33b0      	adds	r3, #176	@ 0xb0
 8007fa0:	443b      	add	r3, r7
 8007fa2:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8007fa6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
                nodes[i] = nodes[i + 1];
 8007faa:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007fae:	3301      	adds	r3, #1
 8007fb0:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	33b0      	adds	r3, #176	@ 0xb0
 8007fb8:	443b      	add	r3, r7
 8007fba:	f833 1ca8 	ldrh.w	r1, [r3, #-168]
 8007fbe:	0053      	lsls	r3, r2, #1
 8007fc0:	33b0      	adds	r3, #176	@ 0xb0
 8007fc2:	443b      	add	r3, r7
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	f823 2ca8 	strh.w	r2, [r3, #-168]
                nodes[i + 1] = swap;
 8007fca:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007fce:	3301      	adds	r3, #1
 8007fd0:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	33b0      	adds	r3, #176	@ 0xb0
 8007fd8:	443b      	add	r3, r7
 8007fda:	f823 2ca8 	strh.w	r2, [r3, #-168]
                if (i) {
 8007fde:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00e      	beq.n	8008004 <hagl_fill_polygon+0x2a2>
                    i--;
 8007fe6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8007ff4:	e006      	b.n	8008004 <hagl_fill_polygon+0x2a2>
                }
            } else {
                i++;
 8007ff6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
        while (i < count - 1) {
 8008004:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8008008:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 800800c:	3b01      	subs	r3, #1
 800800e:	429a      	cmp	r2, r3
 8008010:	dbb1      	blt.n	8007f76 <hagl_fill_polygon+0x214>
            }
        }

        /* Draw lines between nodes. */
        for (int16_t i = 0; i < count; i += 2) {
 8008012:	2300      	movs	r3, #0
 8008014:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 8008018:	e027      	b.n	800806a <hagl_fill_polygon+0x308>
            int16_t width = nodes[i + 1] - nodes[i];
 800801a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 800801e:	3301      	adds	r3, #1
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	33b0      	adds	r3, #176	@ 0xb0
 8008024:	443b      	add	r3, r7
 8008026:	f833 2ca8 	ldrh.w	r2, [r3, #-168]
 800802a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	33b0      	adds	r3, #176	@ 0xb0
 8008032:	443b      	add	r3, r7
 8008034:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	b29b      	uxth	r3, r3
 800803c:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
            hagl_draw_hline(nodes[i], y, width, color);
 8008040:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	@ 0x9e
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	33b0      	adds	r3, #176	@ 0xb0
 8008048:	443b      	add	r3, r7
 800804a:	f833 3ca8 	ldrh.w	r3, [r3, #-168]
 800804e:	b218      	sxth	r0, r3
 8008050:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8008054:	88bb      	ldrh	r3, [r7, #4]
 8008056:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 800805a:	f7ff f8c5 	bl	80071e8 <hagl_draw_hline>
        for (int16_t i = 0; i < count; i += 2) {
 800805e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008062:	3302      	adds	r3, #2
 8008064:	b29b      	uxth	r3, r3
 8008066:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 800806a:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 800806e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8008072:	429a      	cmp	r2, r3
 8008074:	dbd1      	blt.n	800801a <hagl_fill_polygon+0x2b8>
    for (y = miny; y < maxy; y++) {
 8008076:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800807a:	b29b      	uxth	r3, r3
 800807c:	3301      	adds	r3, #1
 800807e:	b29b      	uxth	r3, r3
 8008080:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8008084:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8008088:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 800808c:	429a      	cmp	r2, r3
 800808e:	f6ff aeb4 	blt.w	8007dfa <hagl_fill_polygon+0x98>
        }
    }
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	37b0      	adds	r7, #176	@ 0xb0
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <hagl_draw_triangle>:

void hagl_draw_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4604      	mov	r4, r0
 80080a4:	4608      	mov	r0, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	4623      	mov	r3, r4
 80080ac:	80fb      	strh	r3, [r7, #6]
 80080ae:	4603      	mov	r3, r0
 80080b0:	80bb      	strh	r3, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	807b      	strh	r3, [r7, #2]
 80080b6:	4613      	mov	r3, r2
 80080b8:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	81bb      	strh	r3, [r7, #12]
 80080be:	88bb      	ldrh	r3, [r7, #4]
 80080c0:	81fb      	strh	r3, [r7, #14]
 80080c2:	887b      	ldrh	r3, [r7, #2]
 80080c4:	823b      	strh	r3, [r7, #16]
 80080c6:	883b      	ldrh	r3, [r7, #0]
 80080c8:	827b      	strh	r3, [r7, #18]
 80080ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80080cc:	82bb      	strh	r3, [r7, #20]
 80080ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80080d0:	82fb      	strh	r3, [r7, #22]
    hagl_draw_polygon(3, vertices, color);
 80080d2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80080d4:	f107 030c 	add.w	r3, r7, #12
 80080d8:	4619      	mov	r1, r3
 80080da:	2003      	movs	r0, #3
 80080dc:	f7ff fde1 	bl	8007ca2 <hagl_draw_polygon>
};
 80080e0:	bf00      	nop
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd90      	pop	{r4, r7, pc}

080080e8 <hagl_fill_triangle>:

void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
 80080e8:	b590      	push	{r4, r7, lr}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	4623      	mov	r3, r4
 80080f8:	80fb      	strh	r3, [r7, #6]
 80080fa:	4603      	mov	r3, r0
 80080fc:	80bb      	strh	r3, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	807b      	strh	r3, [r7, #2]
 8008102:	4613      	mov	r3, r2
 8008104:	803b      	strh	r3, [r7, #0]
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	81bb      	strh	r3, [r7, #12]
 800810a:	88bb      	ldrh	r3, [r7, #4]
 800810c:	81fb      	strh	r3, [r7, #14]
 800810e:	887b      	ldrh	r3, [r7, #2]
 8008110:	823b      	strh	r3, [r7, #16]
 8008112:	883b      	ldrh	r3, [r7, #0]
 8008114:	827b      	strh	r3, [r7, #18]
 8008116:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008118:	82bb      	strh	r3, [r7, #20]
 800811a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800811c:	82fb      	strh	r3, [r7, #22]
    hagl_fill_polygon(3, vertices, color);
 800811e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	4619      	mov	r1, r3
 8008126:	2003      	movs	r0, #3
 8008128:	f7ff fe1b 	bl	8007d62 <hagl_fill_polygon>
}
 800812c:	bf00      	nop
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	bd90      	pop	{r4, r7, pc}

08008134 <malloc>:
 8008134:	4b02      	ldr	r3, [pc, #8]	@ (8008140 <malloc+0xc>)
 8008136:	4601      	mov	r1, r0
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	f000 b82d 	b.w	8008198 <_malloc_r>
 800813e:	bf00      	nop
 8008140:	20000214 	.word	0x20000214

08008144 <free>:
 8008144:	4b02      	ldr	r3, [pc, #8]	@ (8008150 <free+0xc>)
 8008146:	4601      	mov	r1, r0
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	f000 b9b5 	b.w	80084b8 <_free_r>
 800814e:	bf00      	nop
 8008150:	20000214 	.word	0x20000214

08008154 <sbrk_aligned>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	4e0f      	ldr	r6, [pc, #60]	@ (8008194 <sbrk_aligned+0x40>)
 8008158:	460c      	mov	r4, r1
 800815a:	6831      	ldr	r1, [r6, #0]
 800815c:	4605      	mov	r5, r0
 800815e:	b911      	cbnz	r1, 8008166 <sbrk_aligned+0x12>
 8008160:	f000 f960 	bl	8008424 <_sbrk_r>
 8008164:	6030      	str	r0, [r6, #0]
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f000 f95b 	bl	8008424 <_sbrk_r>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d103      	bne.n	800817a <sbrk_aligned+0x26>
 8008172:	f04f 34ff 	mov.w	r4, #4294967295
 8008176:	4620      	mov	r0, r4
 8008178:	bd70      	pop	{r4, r5, r6, pc}
 800817a:	1cc4      	adds	r4, r0, #3
 800817c:	f024 0403 	bic.w	r4, r4, #3
 8008180:	42a0      	cmp	r0, r4
 8008182:	d0f8      	beq.n	8008176 <sbrk_aligned+0x22>
 8008184:	1a21      	subs	r1, r4, r0
 8008186:	4628      	mov	r0, r5
 8008188:	f000 f94c 	bl	8008424 <_sbrk_r>
 800818c:	3001      	adds	r0, #1
 800818e:	d1f2      	bne.n	8008176 <sbrk_aligned+0x22>
 8008190:	e7ef      	b.n	8008172 <sbrk_aligned+0x1e>
 8008192:	bf00      	nop
 8008194:	2000af50 	.word	0x2000af50

08008198 <_malloc_r>:
 8008198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800819c:	1ccd      	adds	r5, r1, #3
 800819e:	f025 0503 	bic.w	r5, r5, #3
 80081a2:	3508      	adds	r5, #8
 80081a4:	2d0c      	cmp	r5, #12
 80081a6:	bf38      	it	cc
 80081a8:	250c      	movcc	r5, #12
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	4606      	mov	r6, r0
 80081ae:	db01      	blt.n	80081b4 <_malloc_r+0x1c>
 80081b0:	42a9      	cmp	r1, r5
 80081b2:	d904      	bls.n	80081be <_malloc_r+0x26>
 80081b4:	230c      	movs	r3, #12
 80081b6:	6033      	str	r3, [r6, #0]
 80081b8:	2000      	movs	r0, #0
 80081ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008294 <_malloc_r+0xfc>
 80081c2:	f000 f869 	bl	8008298 <__malloc_lock>
 80081c6:	f8d8 3000 	ldr.w	r3, [r8]
 80081ca:	461c      	mov	r4, r3
 80081cc:	bb44      	cbnz	r4, 8008220 <_malloc_r+0x88>
 80081ce:	4629      	mov	r1, r5
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7ff ffbf 	bl	8008154 <sbrk_aligned>
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	4604      	mov	r4, r0
 80081da:	d158      	bne.n	800828e <_malloc_r+0xf6>
 80081dc:	f8d8 4000 	ldr.w	r4, [r8]
 80081e0:	4627      	mov	r7, r4
 80081e2:	2f00      	cmp	r7, #0
 80081e4:	d143      	bne.n	800826e <_malloc_r+0xd6>
 80081e6:	2c00      	cmp	r4, #0
 80081e8:	d04b      	beq.n	8008282 <_malloc_r+0xea>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	4639      	mov	r1, r7
 80081ee:	4630      	mov	r0, r6
 80081f0:	eb04 0903 	add.w	r9, r4, r3
 80081f4:	f000 f916 	bl	8008424 <_sbrk_r>
 80081f8:	4581      	cmp	r9, r0
 80081fa:	d142      	bne.n	8008282 <_malloc_r+0xea>
 80081fc:	6821      	ldr	r1, [r4, #0]
 80081fe:	1a6d      	subs	r5, r5, r1
 8008200:	4629      	mov	r1, r5
 8008202:	4630      	mov	r0, r6
 8008204:	f7ff ffa6 	bl	8008154 <sbrk_aligned>
 8008208:	3001      	adds	r0, #1
 800820a:	d03a      	beq.n	8008282 <_malloc_r+0xea>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	442b      	add	r3, r5
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	f8d8 3000 	ldr.w	r3, [r8]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	bb62      	cbnz	r2, 8008274 <_malloc_r+0xdc>
 800821a:	f8c8 7000 	str.w	r7, [r8]
 800821e:	e00f      	b.n	8008240 <_malloc_r+0xa8>
 8008220:	6822      	ldr	r2, [r4, #0]
 8008222:	1b52      	subs	r2, r2, r5
 8008224:	d420      	bmi.n	8008268 <_malloc_r+0xd0>
 8008226:	2a0b      	cmp	r2, #11
 8008228:	d917      	bls.n	800825a <_malloc_r+0xc2>
 800822a:	1961      	adds	r1, r4, r5
 800822c:	42a3      	cmp	r3, r4
 800822e:	6025      	str	r5, [r4, #0]
 8008230:	bf18      	it	ne
 8008232:	6059      	strne	r1, [r3, #4]
 8008234:	6863      	ldr	r3, [r4, #4]
 8008236:	bf08      	it	eq
 8008238:	f8c8 1000 	streq.w	r1, [r8]
 800823c:	5162      	str	r2, [r4, r5]
 800823e:	604b      	str	r3, [r1, #4]
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f82f 	bl	80082a4 <__malloc_unlock>
 8008246:	f104 000b 	add.w	r0, r4, #11
 800824a:	1d23      	adds	r3, r4, #4
 800824c:	f020 0007 	bic.w	r0, r0, #7
 8008250:	1ac2      	subs	r2, r0, r3
 8008252:	bf1c      	itt	ne
 8008254:	1a1b      	subne	r3, r3, r0
 8008256:	50a3      	strne	r3, [r4, r2]
 8008258:	e7af      	b.n	80081ba <_malloc_r+0x22>
 800825a:	6862      	ldr	r2, [r4, #4]
 800825c:	42a3      	cmp	r3, r4
 800825e:	bf0c      	ite	eq
 8008260:	f8c8 2000 	streq.w	r2, [r8]
 8008264:	605a      	strne	r2, [r3, #4]
 8008266:	e7eb      	b.n	8008240 <_malloc_r+0xa8>
 8008268:	4623      	mov	r3, r4
 800826a:	6864      	ldr	r4, [r4, #4]
 800826c:	e7ae      	b.n	80081cc <_malloc_r+0x34>
 800826e:	463c      	mov	r4, r7
 8008270:	687f      	ldr	r7, [r7, #4]
 8008272:	e7b6      	b.n	80081e2 <_malloc_r+0x4a>
 8008274:	461a      	mov	r2, r3
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	42a3      	cmp	r3, r4
 800827a:	d1fb      	bne.n	8008274 <_malloc_r+0xdc>
 800827c:	2300      	movs	r3, #0
 800827e:	6053      	str	r3, [r2, #4]
 8008280:	e7de      	b.n	8008240 <_malloc_r+0xa8>
 8008282:	230c      	movs	r3, #12
 8008284:	6033      	str	r3, [r6, #0]
 8008286:	4630      	mov	r0, r6
 8008288:	f000 f80c 	bl	80082a4 <__malloc_unlock>
 800828c:	e794      	b.n	80081b8 <_malloc_r+0x20>
 800828e:	6005      	str	r5, [r0, #0]
 8008290:	e7d6      	b.n	8008240 <_malloc_r+0xa8>
 8008292:	bf00      	nop
 8008294:	2000af54 	.word	0x2000af54

08008298 <__malloc_lock>:
 8008298:	4801      	ldr	r0, [pc, #4]	@ (80082a0 <__malloc_lock+0x8>)
 800829a:	f000 b8fd 	b.w	8008498 <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	2000b094 	.word	0x2000b094

080082a4 <__malloc_unlock>:
 80082a4:	4801      	ldr	r0, [pc, #4]	@ (80082ac <__malloc_unlock+0x8>)
 80082a6:	f000 b8f8 	b.w	800849a <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	2000b094 	.word	0x2000b094

080082b0 <sniprintf>:
 80082b0:	b40c      	push	{r2, r3}
 80082b2:	b530      	push	{r4, r5, lr}
 80082b4:	4b17      	ldr	r3, [pc, #92]	@ (8008314 <sniprintf+0x64>)
 80082b6:	1e0c      	subs	r4, r1, #0
 80082b8:	681d      	ldr	r5, [r3, #0]
 80082ba:	b09d      	sub	sp, #116	@ 0x74
 80082bc:	da08      	bge.n	80082d0 <sniprintf+0x20>
 80082be:	238b      	movs	r3, #139	@ 0x8b
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	f04f 30ff 	mov.w	r0, #4294967295
 80082c6:	b01d      	add	sp, #116	@ 0x74
 80082c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082cc:	b002      	add	sp, #8
 80082ce:	4770      	bx	lr
 80082d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082d8:	bf14      	ite	ne
 80082da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082de:	4623      	moveq	r3, r4
 80082e0:	9304      	str	r3, [sp, #16]
 80082e2:	9307      	str	r3, [sp, #28]
 80082e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082e8:	9002      	str	r0, [sp, #8]
 80082ea:	9006      	str	r0, [sp, #24]
 80082ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082f2:	ab21      	add	r3, sp, #132	@ 0x84
 80082f4:	a902      	add	r1, sp, #8
 80082f6:	4628      	mov	r0, r5
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	f000 f983 	bl	8008604 <_svfiprintf_r>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	bfbc      	itt	lt
 8008302:	238b      	movlt	r3, #139	@ 0x8b
 8008304:	602b      	strlt	r3, [r5, #0]
 8008306:	2c00      	cmp	r4, #0
 8008308:	d0dd      	beq.n	80082c6 <sniprintf+0x16>
 800830a:	9b02      	ldr	r3, [sp, #8]
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	e7d9      	b.n	80082c6 <sniprintf+0x16>
 8008312:	bf00      	nop
 8008314:	20000214 	.word	0x20000214

08008318 <siprintf>:
 8008318:	b40e      	push	{r1, r2, r3}
 800831a:	b500      	push	{lr}
 800831c:	b09c      	sub	sp, #112	@ 0x70
 800831e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008320:	9002      	str	r0, [sp, #8]
 8008322:	9006      	str	r0, [sp, #24]
 8008324:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008328:	4809      	ldr	r0, [pc, #36]	@ (8008350 <siprintf+0x38>)
 800832a:	9107      	str	r1, [sp, #28]
 800832c:	9104      	str	r1, [sp, #16]
 800832e:	4909      	ldr	r1, [pc, #36]	@ (8008354 <siprintf+0x3c>)
 8008330:	f853 2b04 	ldr.w	r2, [r3], #4
 8008334:	9105      	str	r1, [sp, #20]
 8008336:	6800      	ldr	r0, [r0, #0]
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	a902      	add	r1, sp, #8
 800833c:	f000 f962 	bl	8008604 <_svfiprintf_r>
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	b01c      	add	sp, #112	@ 0x70
 8008348:	f85d eb04 	ldr.w	lr, [sp], #4
 800834c:	b003      	add	sp, #12
 800834e:	4770      	bx	lr
 8008350:	20000214 	.word	0x20000214
 8008354:	ffff0208 	.word	0xffff0208

08008358 <_vsniprintf_r>:
 8008358:	b530      	push	{r4, r5, lr}
 800835a:	4614      	mov	r4, r2
 800835c:	2c00      	cmp	r4, #0
 800835e:	b09b      	sub	sp, #108	@ 0x6c
 8008360:	4605      	mov	r5, r0
 8008362:	461a      	mov	r2, r3
 8008364:	da05      	bge.n	8008372 <_vsniprintf_r+0x1a>
 8008366:	238b      	movs	r3, #139	@ 0x8b
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	f04f 30ff 	mov.w	r0, #4294967295
 800836e:	b01b      	add	sp, #108	@ 0x6c
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008376:	f8ad 300c 	strh.w	r3, [sp, #12]
 800837a:	bf14      	ite	ne
 800837c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008380:	4623      	moveq	r3, r4
 8008382:	9302      	str	r3, [sp, #8]
 8008384:	9305      	str	r3, [sp, #20]
 8008386:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800838a:	9100      	str	r1, [sp, #0]
 800838c:	9104      	str	r1, [sp, #16]
 800838e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008392:	4669      	mov	r1, sp
 8008394:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008396:	f000 f935 	bl	8008604 <_svfiprintf_r>
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	bfbc      	itt	lt
 800839e:	238b      	movlt	r3, #139	@ 0x8b
 80083a0:	602b      	strlt	r3, [r5, #0]
 80083a2:	2c00      	cmp	r4, #0
 80083a4:	d0e3      	beq.n	800836e <_vsniprintf_r+0x16>
 80083a6:	9b00      	ldr	r3, [sp, #0]
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e7df      	b.n	800836e <_vsniprintf_r+0x16>
	...

080083b0 <vsniprintf>:
 80083b0:	b507      	push	{r0, r1, r2, lr}
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	4613      	mov	r3, r2
 80083b6:	460a      	mov	r2, r1
 80083b8:	4601      	mov	r1, r0
 80083ba:	4803      	ldr	r0, [pc, #12]	@ (80083c8 <vsniprintf+0x18>)
 80083bc:	6800      	ldr	r0, [r0, #0]
 80083be:	f7ff ffcb 	bl	8008358 <_vsniprintf_r>
 80083c2:	b003      	add	sp, #12
 80083c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80083c8:	20000214 	.word	0x20000214

080083cc <memcmp>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	3901      	subs	r1, #1
 80083d0:	4402      	add	r2, r0
 80083d2:	4290      	cmp	r0, r2
 80083d4:	d101      	bne.n	80083da <memcmp+0xe>
 80083d6:	2000      	movs	r0, #0
 80083d8:	e005      	b.n	80083e6 <memcmp+0x1a>
 80083da:	7803      	ldrb	r3, [r0, #0]
 80083dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	d001      	beq.n	80083e8 <memcmp+0x1c>
 80083e4:	1b18      	subs	r0, r3, r4
 80083e6:	bd10      	pop	{r4, pc}
 80083e8:	3001      	adds	r0, #1
 80083ea:	e7f2      	b.n	80083d2 <memcmp+0x6>

080083ec <memset>:
 80083ec:	4402      	add	r2, r0
 80083ee:	4603      	mov	r3, r0
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d100      	bne.n	80083f6 <memset+0xa>
 80083f4:	4770      	bx	lr
 80083f6:	f803 1b01 	strb.w	r1, [r3], #1
 80083fa:	e7f9      	b.n	80083f0 <memset+0x4>

080083fc <strncpy>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	3901      	subs	r1, #1
 8008400:	4603      	mov	r3, r0
 8008402:	b132      	cbz	r2, 8008412 <strncpy+0x16>
 8008404:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008408:	f803 4b01 	strb.w	r4, [r3], #1
 800840c:	3a01      	subs	r2, #1
 800840e:	2c00      	cmp	r4, #0
 8008410:	d1f7      	bne.n	8008402 <strncpy+0x6>
 8008412:	441a      	add	r2, r3
 8008414:	2100      	movs	r1, #0
 8008416:	4293      	cmp	r3, r2
 8008418:	d100      	bne.n	800841c <strncpy+0x20>
 800841a:	bd10      	pop	{r4, pc}
 800841c:	f803 1b01 	strb.w	r1, [r3], #1
 8008420:	e7f9      	b.n	8008416 <strncpy+0x1a>
	...

08008424 <_sbrk_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d06      	ldr	r5, [pc, #24]	@ (8008440 <_sbrk_r+0x1c>)
 8008428:	2300      	movs	r3, #0
 800842a:	4604      	mov	r4, r0
 800842c:	4608      	mov	r0, r1
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	f7f9 ff94 	bl	800235c <_sbrk>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_sbrk_r+0x1a>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_sbrk_r+0x1a>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	2000b090 	.word	0x2000b090

08008444 <__errno>:
 8008444:	4b01      	ldr	r3, [pc, #4]	@ (800844c <__errno+0x8>)
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	20000214 	.word	0x20000214

08008450 <__libc_init_array>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4d0d      	ldr	r5, [pc, #52]	@ (8008488 <__libc_init_array+0x38>)
 8008454:	4c0d      	ldr	r4, [pc, #52]	@ (800848c <__libc_init_array+0x3c>)
 8008456:	1b64      	subs	r4, r4, r5
 8008458:	10a4      	asrs	r4, r4, #2
 800845a:	2600      	movs	r6, #0
 800845c:	42a6      	cmp	r6, r4
 800845e:	d109      	bne.n	8008474 <__libc_init_array+0x24>
 8008460:	4d0b      	ldr	r5, [pc, #44]	@ (8008490 <__libc_init_array+0x40>)
 8008462:	4c0c      	ldr	r4, [pc, #48]	@ (8008494 <__libc_init_array+0x44>)
 8008464:	f000 fba8 	bl	8008bb8 <_init>
 8008468:	1b64      	subs	r4, r4, r5
 800846a:	10a4      	asrs	r4, r4, #2
 800846c:	2600      	movs	r6, #0
 800846e:	42a6      	cmp	r6, r4
 8008470:	d105      	bne.n	800847e <__libc_init_array+0x2e>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	f855 3b04 	ldr.w	r3, [r5], #4
 8008478:	4798      	blx	r3
 800847a:	3601      	adds	r6, #1
 800847c:	e7ee      	b.n	800845c <__libc_init_array+0xc>
 800847e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008482:	4798      	blx	r3
 8008484:	3601      	adds	r6, #1
 8008486:	e7f2      	b.n	800846e <__libc_init_array+0x1e>
 8008488:	08012250 	.word	0x08012250
 800848c:	08012250 	.word	0x08012250
 8008490:	08012250 	.word	0x08012250
 8008494:	08012254 	.word	0x08012254

08008498 <__retarget_lock_acquire_recursive>:
 8008498:	4770      	bx	lr

0800849a <__retarget_lock_release_recursive>:
 800849a:	4770      	bx	lr

0800849c <memcpy>:
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a4:	d100      	bne.n	80084a8 <memcpy+0xc>
 80084a6:	4770      	bx	lr
 80084a8:	b510      	push	{r4, lr}
 80084aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b2:	4291      	cmp	r1, r2
 80084b4:	d1f9      	bne.n	80084aa <memcpy+0xe>
 80084b6:	bd10      	pop	{r4, pc}

080084b8 <_free_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4605      	mov	r5, r0
 80084bc:	2900      	cmp	r1, #0
 80084be:	d041      	beq.n	8008544 <_free_r+0x8c>
 80084c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c4:	1f0c      	subs	r4, r1, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfb8      	it	lt
 80084ca:	18e4      	addlt	r4, r4, r3
 80084cc:	f7ff fee4 	bl	8008298 <__malloc_lock>
 80084d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008548 <_free_r+0x90>)
 80084d2:	6813      	ldr	r3, [r2, #0]
 80084d4:	b933      	cbnz	r3, 80084e4 <_free_r+0x2c>
 80084d6:	6063      	str	r3, [r4, #4]
 80084d8:	6014      	str	r4, [r2, #0]
 80084da:	4628      	mov	r0, r5
 80084dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e0:	f7ff bee0 	b.w	80082a4 <__malloc_unlock>
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	d908      	bls.n	80084fa <_free_r+0x42>
 80084e8:	6820      	ldr	r0, [r4, #0]
 80084ea:	1821      	adds	r1, r4, r0
 80084ec:	428b      	cmp	r3, r1
 80084ee:	bf01      	itttt	eq
 80084f0:	6819      	ldreq	r1, [r3, #0]
 80084f2:	685b      	ldreq	r3, [r3, #4]
 80084f4:	1809      	addeq	r1, r1, r0
 80084f6:	6021      	streq	r1, [r4, #0]
 80084f8:	e7ed      	b.n	80084d6 <_free_r+0x1e>
 80084fa:	461a      	mov	r2, r3
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	b10b      	cbz	r3, 8008504 <_free_r+0x4c>
 8008500:	42a3      	cmp	r3, r4
 8008502:	d9fa      	bls.n	80084fa <_free_r+0x42>
 8008504:	6811      	ldr	r1, [r2, #0]
 8008506:	1850      	adds	r0, r2, r1
 8008508:	42a0      	cmp	r0, r4
 800850a:	d10b      	bne.n	8008524 <_free_r+0x6c>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	4401      	add	r1, r0
 8008510:	1850      	adds	r0, r2, r1
 8008512:	4283      	cmp	r3, r0
 8008514:	6011      	str	r1, [r2, #0]
 8008516:	d1e0      	bne.n	80084da <_free_r+0x22>
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	6053      	str	r3, [r2, #4]
 800851e:	4408      	add	r0, r1
 8008520:	6010      	str	r0, [r2, #0]
 8008522:	e7da      	b.n	80084da <_free_r+0x22>
 8008524:	d902      	bls.n	800852c <_free_r+0x74>
 8008526:	230c      	movs	r3, #12
 8008528:	602b      	str	r3, [r5, #0]
 800852a:	e7d6      	b.n	80084da <_free_r+0x22>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	1821      	adds	r1, r4, r0
 8008530:	428b      	cmp	r3, r1
 8008532:	bf04      	itt	eq
 8008534:	6819      	ldreq	r1, [r3, #0]
 8008536:	685b      	ldreq	r3, [r3, #4]
 8008538:	6063      	str	r3, [r4, #4]
 800853a:	bf04      	itt	eq
 800853c:	1809      	addeq	r1, r1, r0
 800853e:	6021      	streq	r1, [r4, #0]
 8008540:	6054      	str	r4, [r2, #4]
 8008542:	e7ca      	b.n	80084da <_free_r+0x22>
 8008544:	bd38      	pop	{r3, r4, r5, pc}
 8008546:	bf00      	nop
 8008548:	2000af54 	.word	0x2000af54

0800854c <__ssputs_r>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	688e      	ldr	r6, [r1, #8]
 8008552:	461f      	mov	r7, r3
 8008554:	42be      	cmp	r6, r7
 8008556:	680b      	ldr	r3, [r1, #0]
 8008558:	4682      	mov	sl, r0
 800855a:	460c      	mov	r4, r1
 800855c:	4690      	mov	r8, r2
 800855e:	d82d      	bhi.n	80085bc <__ssputs_r+0x70>
 8008560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008564:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008568:	d026      	beq.n	80085b8 <__ssputs_r+0x6c>
 800856a:	6965      	ldr	r5, [r4, #20]
 800856c:	6909      	ldr	r1, [r1, #16]
 800856e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008572:	eba3 0901 	sub.w	r9, r3, r1
 8008576:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800857a:	1c7b      	adds	r3, r7, #1
 800857c:	444b      	add	r3, r9
 800857e:	106d      	asrs	r5, r5, #1
 8008580:	429d      	cmp	r5, r3
 8008582:	bf38      	it	cc
 8008584:	461d      	movcc	r5, r3
 8008586:	0553      	lsls	r3, r2, #21
 8008588:	d527      	bpl.n	80085da <__ssputs_r+0x8e>
 800858a:	4629      	mov	r1, r5
 800858c:	f7ff fe04 	bl	8008198 <_malloc_r>
 8008590:	4606      	mov	r6, r0
 8008592:	b360      	cbz	r0, 80085ee <__ssputs_r+0xa2>
 8008594:	6921      	ldr	r1, [r4, #16]
 8008596:	464a      	mov	r2, r9
 8008598:	f7ff ff80 	bl	800849c <memcpy>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	6126      	str	r6, [r4, #16]
 80085aa:	6165      	str	r5, [r4, #20]
 80085ac:	444e      	add	r6, r9
 80085ae:	eba5 0509 	sub.w	r5, r5, r9
 80085b2:	6026      	str	r6, [r4, #0]
 80085b4:	60a5      	str	r5, [r4, #8]
 80085b6:	463e      	mov	r6, r7
 80085b8:	42be      	cmp	r6, r7
 80085ba:	d900      	bls.n	80085be <__ssputs_r+0x72>
 80085bc:	463e      	mov	r6, r7
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	4632      	mov	r2, r6
 80085c2:	4641      	mov	r1, r8
 80085c4:	f000 faa8 	bl	8008b18 <memmove>
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	1b9b      	subs	r3, r3, r6
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	4433      	add	r3, r6
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	2000      	movs	r0, #0
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085da:	462a      	mov	r2, r5
 80085dc:	f000 fab6 	bl	8008b4c <_realloc_r>
 80085e0:	4606      	mov	r6, r0
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d1e0      	bne.n	80085a8 <__ssputs_r+0x5c>
 80085e6:	6921      	ldr	r1, [r4, #16]
 80085e8:	4650      	mov	r0, sl
 80085ea:	f7ff ff65 	bl	80084b8 <_free_r>
 80085ee:	230c      	movs	r3, #12
 80085f0:	f8ca 3000 	str.w	r3, [sl]
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008600:	e7e9      	b.n	80085d6 <__ssputs_r+0x8a>
	...

08008604 <_svfiprintf_r>:
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	4698      	mov	r8, r3
 800860a:	898b      	ldrh	r3, [r1, #12]
 800860c:	061b      	lsls	r3, r3, #24
 800860e:	b09d      	sub	sp, #116	@ 0x74
 8008610:	4607      	mov	r7, r0
 8008612:	460d      	mov	r5, r1
 8008614:	4614      	mov	r4, r2
 8008616:	d510      	bpl.n	800863a <_svfiprintf_r+0x36>
 8008618:	690b      	ldr	r3, [r1, #16]
 800861a:	b973      	cbnz	r3, 800863a <_svfiprintf_r+0x36>
 800861c:	2140      	movs	r1, #64	@ 0x40
 800861e:	f7ff fdbb 	bl	8008198 <_malloc_r>
 8008622:	6028      	str	r0, [r5, #0]
 8008624:	6128      	str	r0, [r5, #16]
 8008626:	b930      	cbnz	r0, 8008636 <_svfiprintf_r+0x32>
 8008628:	230c      	movs	r3, #12
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	b01d      	add	sp, #116	@ 0x74
 8008632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008636:	2340      	movs	r3, #64	@ 0x40
 8008638:	616b      	str	r3, [r5, #20]
 800863a:	2300      	movs	r3, #0
 800863c:	9309      	str	r3, [sp, #36]	@ 0x24
 800863e:	2320      	movs	r3, #32
 8008640:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008644:	f8cd 800c 	str.w	r8, [sp, #12]
 8008648:	2330      	movs	r3, #48	@ 0x30
 800864a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087e8 <_svfiprintf_r+0x1e4>
 800864e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008652:	f04f 0901 	mov.w	r9, #1
 8008656:	4623      	mov	r3, r4
 8008658:	469a      	mov	sl, r3
 800865a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800865e:	b10a      	cbz	r2, 8008664 <_svfiprintf_r+0x60>
 8008660:	2a25      	cmp	r2, #37	@ 0x25
 8008662:	d1f9      	bne.n	8008658 <_svfiprintf_r+0x54>
 8008664:	ebba 0b04 	subs.w	fp, sl, r4
 8008668:	d00b      	beq.n	8008682 <_svfiprintf_r+0x7e>
 800866a:	465b      	mov	r3, fp
 800866c:	4622      	mov	r2, r4
 800866e:	4629      	mov	r1, r5
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff ff6b 	bl	800854c <__ssputs_r>
 8008676:	3001      	adds	r0, #1
 8008678:	f000 80a7 	beq.w	80087ca <_svfiprintf_r+0x1c6>
 800867c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800867e:	445a      	add	r2, fp
 8008680:	9209      	str	r2, [sp, #36]	@ 0x24
 8008682:	f89a 3000 	ldrb.w	r3, [sl]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 809f 	beq.w	80087ca <_svfiprintf_r+0x1c6>
 800868c:	2300      	movs	r3, #0
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008696:	f10a 0a01 	add.w	sl, sl, #1
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	9307      	str	r3, [sp, #28]
 800869e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80086a4:	4654      	mov	r4, sl
 80086a6:	2205      	movs	r2, #5
 80086a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ac:	484e      	ldr	r0, [pc, #312]	@ (80087e8 <_svfiprintf_r+0x1e4>)
 80086ae:	f7f7 fd97 	bl	80001e0 <memchr>
 80086b2:	9a04      	ldr	r2, [sp, #16]
 80086b4:	b9d8      	cbnz	r0, 80086ee <_svfiprintf_r+0xea>
 80086b6:	06d0      	lsls	r0, r2, #27
 80086b8:	bf44      	itt	mi
 80086ba:	2320      	movmi	r3, #32
 80086bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086c0:	0711      	lsls	r1, r2, #28
 80086c2:	bf44      	itt	mi
 80086c4:	232b      	movmi	r3, #43	@ 0x2b
 80086c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ca:	f89a 3000 	ldrb.w	r3, [sl]
 80086ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d0:	d015      	beq.n	80086fe <_svfiprintf_r+0xfa>
 80086d2:	9a07      	ldr	r2, [sp, #28]
 80086d4:	4654      	mov	r4, sl
 80086d6:	2000      	movs	r0, #0
 80086d8:	f04f 0c0a 	mov.w	ip, #10
 80086dc:	4621      	mov	r1, r4
 80086de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086e2:	3b30      	subs	r3, #48	@ 0x30
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d94b      	bls.n	8008780 <_svfiprintf_r+0x17c>
 80086e8:	b1b0      	cbz	r0, 8008718 <_svfiprintf_r+0x114>
 80086ea:	9207      	str	r2, [sp, #28]
 80086ec:	e014      	b.n	8008718 <_svfiprintf_r+0x114>
 80086ee:	eba0 0308 	sub.w	r3, r0, r8
 80086f2:	fa09 f303 	lsl.w	r3, r9, r3
 80086f6:	4313      	orrs	r3, r2
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	46a2      	mov	sl, r4
 80086fc:	e7d2      	b.n	80086a4 <_svfiprintf_r+0xa0>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	1d19      	adds	r1, r3, #4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	9103      	str	r1, [sp, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	bfbb      	ittet	lt
 800870a:	425b      	neglt	r3, r3
 800870c:	f042 0202 	orrlt.w	r2, r2, #2
 8008710:	9307      	strge	r3, [sp, #28]
 8008712:	9307      	strlt	r3, [sp, #28]
 8008714:	bfb8      	it	lt
 8008716:	9204      	strlt	r2, [sp, #16]
 8008718:	7823      	ldrb	r3, [r4, #0]
 800871a:	2b2e      	cmp	r3, #46	@ 0x2e
 800871c:	d10a      	bne.n	8008734 <_svfiprintf_r+0x130>
 800871e:	7863      	ldrb	r3, [r4, #1]
 8008720:	2b2a      	cmp	r3, #42	@ 0x2a
 8008722:	d132      	bne.n	800878a <_svfiprintf_r+0x186>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	1d1a      	adds	r2, r3, #4
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	9203      	str	r2, [sp, #12]
 800872c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008730:	3402      	adds	r4, #2
 8008732:	9305      	str	r3, [sp, #20]
 8008734:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087f8 <_svfiprintf_r+0x1f4>
 8008738:	7821      	ldrb	r1, [r4, #0]
 800873a:	2203      	movs	r2, #3
 800873c:	4650      	mov	r0, sl
 800873e:	f7f7 fd4f 	bl	80001e0 <memchr>
 8008742:	b138      	cbz	r0, 8008754 <_svfiprintf_r+0x150>
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	eba0 000a 	sub.w	r0, r0, sl
 800874a:	2240      	movs	r2, #64	@ 0x40
 800874c:	4082      	lsls	r2, r0
 800874e:	4313      	orrs	r3, r2
 8008750:	3401      	adds	r4, #1
 8008752:	9304      	str	r3, [sp, #16]
 8008754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008758:	4824      	ldr	r0, [pc, #144]	@ (80087ec <_svfiprintf_r+0x1e8>)
 800875a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800875e:	2206      	movs	r2, #6
 8008760:	f7f7 fd3e 	bl	80001e0 <memchr>
 8008764:	2800      	cmp	r0, #0
 8008766:	d036      	beq.n	80087d6 <_svfiprintf_r+0x1d2>
 8008768:	4b21      	ldr	r3, [pc, #132]	@ (80087f0 <_svfiprintf_r+0x1ec>)
 800876a:	bb1b      	cbnz	r3, 80087b4 <_svfiprintf_r+0x1b0>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	3307      	adds	r3, #7
 8008770:	f023 0307 	bic.w	r3, r3, #7
 8008774:	3308      	adds	r3, #8
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877a:	4433      	add	r3, r6
 800877c:	9309      	str	r3, [sp, #36]	@ 0x24
 800877e:	e76a      	b.n	8008656 <_svfiprintf_r+0x52>
 8008780:	fb0c 3202 	mla	r2, ip, r2, r3
 8008784:	460c      	mov	r4, r1
 8008786:	2001      	movs	r0, #1
 8008788:	e7a8      	b.n	80086dc <_svfiprintf_r+0xd8>
 800878a:	2300      	movs	r3, #0
 800878c:	3401      	adds	r4, #1
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	4619      	mov	r1, r3
 8008792:	f04f 0c0a 	mov.w	ip, #10
 8008796:	4620      	mov	r0, r4
 8008798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800879c:	3a30      	subs	r2, #48	@ 0x30
 800879e:	2a09      	cmp	r2, #9
 80087a0:	d903      	bls.n	80087aa <_svfiprintf_r+0x1a6>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0c6      	beq.n	8008734 <_svfiprintf_r+0x130>
 80087a6:	9105      	str	r1, [sp, #20]
 80087a8:	e7c4      	b.n	8008734 <_svfiprintf_r+0x130>
 80087aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ae:	4604      	mov	r4, r0
 80087b0:	2301      	movs	r3, #1
 80087b2:	e7f0      	b.n	8008796 <_svfiprintf_r+0x192>
 80087b4:	ab03      	add	r3, sp, #12
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	462a      	mov	r2, r5
 80087ba:	4b0e      	ldr	r3, [pc, #56]	@ (80087f4 <_svfiprintf_r+0x1f0>)
 80087bc:	a904      	add	r1, sp, #16
 80087be:	4638      	mov	r0, r7
 80087c0:	f3af 8000 	nop.w
 80087c4:	1c42      	adds	r2, r0, #1
 80087c6:	4606      	mov	r6, r0
 80087c8:	d1d6      	bne.n	8008778 <_svfiprintf_r+0x174>
 80087ca:	89ab      	ldrh	r3, [r5, #12]
 80087cc:	065b      	lsls	r3, r3, #25
 80087ce:	f53f af2d 	bmi.w	800862c <_svfiprintf_r+0x28>
 80087d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087d4:	e72c      	b.n	8008630 <_svfiprintf_r+0x2c>
 80087d6:	ab03      	add	r3, sp, #12
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	462a      	mov	r2, r5
 80087dc:	4b05      	ldr	r3, [pc, #20]	@ (80087f4 <_svfiprintf_r+0x1f0>)
 80087de:	a904      	add	r1, sp, #16
 80087e0:	4638      	mov	r0, r7
 80087e2:	f000 f879 	bl	80088d8 <_printf_i>
 80087e6:	e7ed      	b.n	80087c4 <_svfiprintf_r+0x1c0>
 80087e8:	08012214 	.word	0x08012214
 80087ec:	0801221e 	.word	0x0801221e
 80087f0:	00000000 	.word	0x00000000
 80087f4:	0800854d 	.word	0x0800854d
 80087f8:	0801221a 	.word	0x0801221a

080087fc <_printf_common>:
 80087fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	4616      	mov	r6, r2
 8008802:	4698      	mov	r8, r3
 8008804:	688a      	ldr	r2, [r1, #8]
 8008806:	690b      	ldr	r3, [r1, #16]
 8008808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800880c:	4293      	cmp	r3, r2
 800880e:	bfb8      	it	lt
 8008810:	4613      	movlt	r3, r2
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008818:	4607      	mov	r7, r0
 800881a:	460c      	mov	r4, r1
 800881c:	b10a      	cbz	r2, 8008822 <_printf_common+0x26>
 800881e:	3301      	adds	r3, #1
 8008820:	6033      	str	r3, [r6, #0]
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	0699      	lsls	r1, r3, #26
 8008826:	bf42      	ittt	mi
 8008828:	6833      	ldrmi	r3, [r6, #0]
 800882a:	3302      	addmi	r3, #2
 800882c:	6033      	strmi	r3, [r6, #0]
 800882e:	6825      	ldr	r5, [r4, #0]
 8008830:	f015 0506 	ands.w	r5, r5, #6
 8008834:	d106      	bne.n	8008844 <_printf_common+0x48>
 8008836:	f104 0a19 	add.w	sl, r4, #25
 800883a:	68e3      	ldr	r3, [r4, #12]
 800883c:	6832      	ldr	r2, [r6, #0]
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	42ab      	cmp	r3, r5
 8008842:	dc26      	bgt.n	8008892 <_printf_common+0x96>
 8008844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008848:	6822      	ldr	r2, [r4, #0]
 800884a:	3b00      	subs	r3, #0
 800884c:	bf18      	it	ne
 800884e:	2301      	movne	r3, #1
 8008850:	0692      	lsls	r2, r2, #26
 8008852:	d42b      	bmi.n	80088ac <_printf_common+0xb0>
 8008854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008858:	4641      	mov	r1, r8
 800885a:	4638      	mov	r0, r7
 800885c:	47c8      	blx	r9
 800885e:	3001      	adds	r0, #1
 8008860:	d01e      	beq.n	80088a0 <_printf_common+0xa4>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	6922      	ldr	r2, [r4, #16]
 8008866:	f003 0306 	and.w	r3, r3, #6
 800886a:	2b04      	cmp	r3, #4
 800886c:	bf02      	ittt	eq
 800886e:	68e5      	ldreq	r5, [r4, #12]
 8008870:	6833      	ldreq	r3, [r6, #0]
 8008872:	1aed      	subeq	r5, r5, r3
 8008874:	68a3      	ldr	r3, [r4, #8]
 8008876:	bf0c      	ite	eq
 8008878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800887c:	2500      	movne	r5, #0
 800887e:	4293      	cmp	r3, r2
 8008880:	bfc4      	itt	gt
 8008882:	1a9b      	subgt	r3, r3, r2
 8008884:	18ed      	addgt	r5, r5, r3
 8008886:	2600      	movs	r6, #0
 8008888:	341a      	adds	r4, #26
 800888a:	42b5      	cmp	r5, r6
 800888c:	d11a      	bne.n	80088c4 <_printf_common+0xc8>
 800888e:	2000      	movs	r0, #0
 8008890:	e008      	b.n	80088a4 <_printf_common+0xa8>
 8008892:	2301      	movs	r3, #1
 8008894:	4652      	mov	r2, sl
 8008896:	4641      	mov	r1, r8
 8008898:	4638      	mov	r0, r7
 800889a:	47c8      	blx	r9
 800889c:	3001      	adds	r0, #1
 800889e:	d103      	bne.n	80088a8 <_printf_common+0xac>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a8:	3501      	adds	r5, #1
 80088aa:	e7c6      	b.n	800883a <_printf_common+0x3e>
 80088ac:	18e1      	adds	r1, r4, r3
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	2030      	movs	r0, #48	@ 0x30
 80088b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088b6:	4422      	add	r2, r4
 80088b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088c0:	3302      	adds	r3, #2
 80088c2:	e7c7      	b.n	8008854 <_printf_common+0x58>
 80088c4:	2301      	movs	r3, #1
 80088c6:	4622      	mov	r2, r4
 80088c8:	4641      	mov	r1, r8
 80088ca:	4638      	mov	r0, r7
 80088cc:	47c8      	blx	r9
 80088ce:	3001      	adds	r0, #1
 80088d0:	d0e6      	beq.n	80088a0 <_printf_common+0xa4>
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7d9      	b.n	800888a <_printf_common+0x8e>
	...

080088d8 <_printf_i>:
 80088d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	7e0f      	ldrb	r7, [r1, #24]
 80088de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088e0:	2f78      	cmp	r7, #120	@ 0x78
 80088e2:	4691      	mov	r9, r2
 80088e4:	4680      	mov	r8, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	469a      	mov	sl, r3
 80088ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088ee:	d807      	bhi.n	8008900 <_printf_i+0x28>
 80088f0:	2f62      	cmp	r7, #98	@ 0x62
 80088f2:	d80a      	bhi.n	800890a <_printf_i+0x32>
 80088f4:	2f00      	cmp	r7, #0
 80088f6:	f000 80d2 	beq.w	8008a9e <_printf_i+0x1c6>
 80088fa:	2f58      	cmp	r7, #88	@ 0x58
 80088fc:	f000 80b9 	beq.w	8008a72 <_printf_i+0x19a>
 8008900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008908:	e03a      	b.n	8008980 <_printf_i+0xa8>
 800890a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800890e:	2b15      	cmp	r3, #21
 8008910:	d8f6      	bhi.n	8008900 <_printf_i+0x28>
 8008912:	a101      	add	r1, pc, #4	@ (adr r1, 8008918 <_printf_i+0x40>)
 8008914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008918:	08008971 	.word	0x08008971
 800891c:	08008985 	.word	0x08008985
 8008920:	08008901 	.word	0x08008901
 8008924:	08008901 	.word	0x08008901
 8008928:	08008901 	.word	0x08008901
 800892c:	08008901 	.word	0x08008901
 8008930:	08008985 	.word	0x08008985
 8008934:	08008901 	.word	0x08008901
 8008938:	08008901 	.word	0x08008901
 800893c:	08008901 	.word	0x08008901
 8008940:	08008901 	.word	0x08008901
 8008944:	08008a85 	.word	0x08008a85
 8008948:	080089af 	.word	0x080089af
 800894c:	08008a3f 	.word	0x08008a3f
 8008950:	08008901 	.word	0x08008901
 8008954:	08008901 	.word	0x08008901
 8008958:	08008aa7 	.word	0x08008aa7
 800895c:	08008901 	.word	0x08008901
 8008960:	080089af 	.word	0x080089af
 8008964:	08008901 	.word	0x08008901
 8008968:	08008901 	.word	0x08008901
 800896c:	08008a47 	.word	0x08008a47
 8008970:	6833      	ldr	r3, [r6, #0]
 8008972:	1d1a      	adds	r2, r3, #4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6032      	str	r2, [r6, #0]
 8008978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800897c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008980:	2301      	movs	r3, #1
 8008982:	e09d      	b.n	8008ac0 <_printf_i+0x1e8>
 8008984:	6833      	ldr	r3, [r6, #0]
 8008986:	6820      	ldr	r0, [r4, #0]
 8008988:	1d19      	adds	r1, r3, #4
 800898a:	6031      	str	r1, [r6, #0]
 800898c:	0606      	lsls	r6, r0, #24
 800898e:	d501      	bpl.n	8008994 <_printf_i+0xbc>
 8008990:	681d      	ldr	r5, [r3, #0]
 8008992:	e003      	b.n	800899c <_printf_i+0xc4>
 8008994:	0645      	lsls	r5, r0, #25
 8008996:	d5fb      	bpl.n	8008990 <_printf_i+0xb8>
 8008998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800899c:	2d00      	cmp	r5, #0
 800899e:	da03      	bge.n	80089a8 <_printf_i+0xd0>
 80089a0:	232d      	movs	r3, #45	@ 0x2d
 80089a2:	426d      	negs	r5, r5
 80089a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089a8:	4859      	ldr	r0, [pc, #356]	@ (8008b10 <_printf_i+0x238>)
 80089aa:	230a      	movs	r3, #10
 80089ac:	e011      	b.n	80089d2 <_printf_i+0xfa>
 80089ae:	6821      	ldr	r1, [r4, #0]
 80089b0:	6833      	ldr	r3, [r6, #0]
 80089b2:	0608      	lsls	r0, r1, #24
 80089b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80089b8:	d402      	bmi.n	80089c0 <_printf_i+0xe8>
 80089ba:	0649      	lsls	r1, r1, #25
 80089bc:	bf48      	it	mi
 80089be:	b2ad      	uxthmi	r5, r5
 80089c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80089c2:	4853      	ldr	r0, [pc, #332]	@ (8008b10 <_printf_i+0x238>)
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	bf14      	ite	ne
 80089c8:	230a      	movne	r3, #10
 80089ca:	2308      	moveq	r3, #8
 80089cc:	2100      	movs	r1, #0
 80089ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089d2:	6866      	ldr	r6, [r4, #4]
 80089d4:	60a6      	str	r6, [r4, #8]
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	bfa2      	ittt	ge
 80089da:	6821      	ldrge	r1, [r4, #0]
 80089dc:	f021 0104 	bicge.w	r1, r1, #4
 80089e0:	6021      	strge	r1, [r4, #0]
 80089e2:	b90d      	cbnz	r5, 80089e8 <_printf_i+0x110>
 80089e4:	2e00      	cmp	r6, #0
 80089e6:	d04b      	beq.n	8008a80 <_printf_i+0x1a8>
 80089e8:	4616      	mov	r6, r2
 80089ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80089ee:	fb03 5711 	mls	r7, r3, r1, r5
 80089f2:	5dc7      	ldrb	r7, [r0, r7]
 80089f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089f8:	462f      	mov	r7, r5
 80089fa:	42bb      	cmp	r3, r7
 80089fc:	460d      	mov	r5, r1
 80089fe:	d9f4      	bls.n	80089ea <_printf_i+0x112>
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d10b      	bne.n	8008a1c <_printf_i+0x144>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07df      	lsls	r7, r3, #31
 8008a08:	d508      	bpl.n	8008a1c <_printf_i+0x144>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	4299      	cmp	r1, r3
 8008a10:	bfde      	ittt	le
 8008a12:	2330      	movle	r3, #48	@ 0x30
 8008a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a1c:	1b92      	subs	r2, r2, r6
 8008a1e:	6122      	str	r2, [r4, #16]
 8008a20:	f8cd a000 	str.w	sl, [sp]
 8008a24:	464b      	mov	r3, r9
 8008a26:	aa03      	add	r2, sp, #12
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff fee6 	bl	80087fc <_printf_common>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d14a      	bne.n	8008aca <_printf_i+0x1f2>
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
 8008a38:	b004      	add	sp, #16
 8008a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	f043 0320 	orr.w	r3, r3, #32
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	4833      	ldr	r0, [pc, #204]	@ (8008b14 <_printf_i+0x23c>)
 8008a48:	2778      	movs	r7, #120	@ 0x78
 8008a4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	6831      	ldr	r1, [r6, #0]
 8008a52:	061f      	lsls	r7, r3, #24
 8008a54:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a58:	d402      	bmi.n	8008a60 <_printf_i+0x188>
 8008a5a:	065f      	lsls	r7, r3, #25
 8008a5c:	bf48      	it	mi
 8008a5e:	b2ad      	uxthmi	r5, r5
 8008a60:	6031      	str	r1, [r6, #0]
 8008a62:	07d9      	lsls	r1, r3, #31
 8008a64:	bf44      	itt	mi
 8008a66:	f043 0320 	orrmi.w	r3, r3, #32
 8008a6a:	6023      	strmi	r3, [r4, #0]
 8008a6c:	b11d      	cbz	r5, 8008a76 <_printf_i+0x19e>
 8008a6e:	2310      	movs	r3, #16
 8008a70:	e7ac      	b.n	80089cc <_printf_i+0xf4>
 8008a72:	4827      	ldr	r0, [pc, #156]	@ (8008b10 <_printf_i+0x238>)
 8008a74:	e7e9      	b.n	8008a4a <_printf_i+0x172>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f023 0320 	bic.w	r3, r3, #32
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	e7f6      	b.n	8008a6e <_printf_i+0x196>
 8008a80:	4616      	mov	r6, r2
 8008a82:	e7bd      	b.n	8008a00 <_printf_i+0x128>
 8008a84:	6833      	ldr	r3, [r6, #0]
 8008a86:	6825      	ldr	r5, [r4, #0]
 8008a88:	6961      	ldr	r1, [r4, #20]
 8008a8a:	1d18      	adds	r0, r3, #4
 8008a8c:	6030      	str	r0, [r6, #0]
 8008a8e:	062e      	lsls	r6, r5, #24
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	d501      	bpl.n	8008a98 <_printf_i+0x1c0>
 8008a94:	6019      	str	r1, [r3, #0]
 8008a96:	e002      	b.n	8008a9e <_printf_i+0x1c6>
 8008a98:	0668      	lsls	r0, r5, #25
 8008a9a:	d5fb      	bpl.n	8008a94 <_printf_i+0x1bc>
 8008a9c:	8019      	strh	r1, [r3, #0]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	4616      	mov	r6, r2
 8008aa4:	e7bc      	b.n	8008a20 <_printf_i+0x148>
 8008aa6:	6833      	ldr	r3, [r6, #0]
 8008aa8:	1d1a      	adds	r2, r3, #4
 8008aaa:	6032      	str	r2, [r6, #0]
 8008aac:	681e      	ldr	r6, [r3, #0]
 8008aae:	6862      	ldr	r2, [r4, #4]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7f7 fb94 	bl	80001e0 <memchr>
 8008ab8:	b108      	cbz	r0, 8008abe <_printf_i+0x1e6>
 8008aba:	1b80      	subs	r0, r0, r6
 8008abc:	6060      	str	r0, [r4, #4]
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ac8:	e7aa      	b.n	8008a20 <_printf_i+0x148>
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	4632      	mov	r2, r6
 8008ace:	4649      	mov	r1, r9
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	47d0      	blx	sl
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d0ad      	beq.n	8008a34 <_printf_i+0x15c>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	079b      	lsls	r3, r3, #30
 8008adc:	d413      	bmi.n	8008b06 <_printf_i+0x22e>
 8008ade:	68e0      	ldr	r0, [r4, #12]
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	bfb8      	it	lt
 8008ae6:	4618      	movlt	r0, r3
 8008ae8:	e7a6      	b.n	8008a38 <_printf_i+0x160>
 8008aea:	2301      	movs	r3, #1
 8008aec:	4632      	mov	r2, r6
 8008aee:	4649      	mov	r1, r9
 8008af0:	4640      	mov	r0, r8
 8008af2:	47d0      	blx	sl
 8008af4:	3001      	adds	r0, #1
 8008af6:	d09d      	beq.n	8008a34 <_printf_i+0x15c>
 8008af8:	3501      	adds	r5, #1
 8008afa:	68e3      	ldr	r3, [r4, #12]
 8008afc:	9903      	ldr	r1, [sp, #12]
 8008afe:	1a5b      	subs	r3, r3, r1
 8008b00:	42ab      	cmp	r3, r5
 8008b02:	dcf2      	bgt.n	8008aea <_printf_i+0x212>
 8008b04:	e7eb      	b.n	8008ade <_printf_i+0x206>
 8008b06:	2500      	movs	r5, #0
 8008b08:	f104 0619 	add.w	r6, r4, #25
 8008b0c:	e7f5      	b.n	8008afa <_printf_i+0x222>
 8008b0e:	bf00      	nop
 8008b10:	08012225 	.word	0x08012225
 8008b14:	08012236 	.word	0x08012236

08008b18 <memmove>:
 8008b18:	4288      	cmp	r0, r1
 8008b1a:	b510      	push	{r4, lr}
 8008b1c:	eb01 0402 	add.w	r4, r1, r2
 8008b20:	d902      	bls.n	8008b28 <memmove+0x10>
 8008b22:	4284      	cmp	r4, r0
 8008b24:	4623      	mov	r3, r4
 8008b26:	d807      	bhi.n	8008b38 <memmove+0x20>
 8008b28:	1e43      	subs	r3, r0, #1
 8008b2a:	42a1      	cmp	r1, r4
 8008b2c:	d008      	beq.n	8008b40 <memmove+0x28>
 8008b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b36:	e7f8      	b.n	8008b2a <memmove+0x12>
 8008b38:	4402      	add	r2, r0
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	428a      	cmp	r2, r1
 8008b3e:	d100      	bne.n	8008b42 <memmove+0x2a>
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b4a:	e7f7      	b.n	8008b3c <memmove+0x24>

08008b4c <_realloc_r>:
 8008b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b50:	4680      	mov	r8, r0
 8008b52:	4615      	mov	r5, r2
 8008b54:	460c      	mov	r4, r1
 8008b56:	b921      	cbnz	r1, 8008b62 <_realloc_r+0x16>
 8008b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	f7ff bb1b 	b.w	8008198 <_malloc_r>
 8008b62:	b92a      	cbnz	r2, 8008b70 <_realloc_r+0x24>
 8008b64:	f7ff fca8 	bl	80084b8 <_free_r>
 8008b68:	2400      	movs	r4, #0
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	f000 f81a 	bl	8008ba8 <_malloc_usable_size_r>
 8008b74:	4285      	cmp	r5, r0
 8008b76:	4606      	mov	r6, r0
 8008b78:	d802      	bhi.n	8008b80 <_realloc_r+0x34>
 8008b7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b7e:	d8f4      	bhi.n	8008b6a <_realloc_r+0x1e>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4640      	mov	r0, r8
 8008b84:	f7ff fb08 	bl	8008198 <_malloc_r>
 8008b88:	4607      	mov	r7, r0
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0ec      	beq.n	8008b68 <_realloc_r+0x1c>
 8008b8e:	42b5      	cmp	r5, r6
 8008b90:	462a      	mov	r2, r5
 8008b92:	4621      	mov	r1, r4
 8008b94:	bf28      	it	cs
 8008b96:	4632      	movcs	r2, r6
 8008b98:	f7ff fc80 	bl	800849c <memcpy>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f7ff fc8a 	bl	80084b8 <_free_r>
 8008ba4:	463c      	mov	r4, r7
 8008ba6:	e7e0      	b.n	8008b6a <_realloc_r+0x1e>

08008ba8 <_malloc_usable_size_r>:
 8008ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bac:	1f18      	subs	r0, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfbc      	itt	lt
 8008bb2:	580b      	ldrlt	r3, [r1, r0]
 8008bb4:	18c0      	addlt	r0, r0, r3
 8008bb6:	4770      	bx	lr

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
